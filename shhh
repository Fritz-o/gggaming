var a0_0x2193a3 = function () {
  var kassius = true;
  return function (synquis, tishera) {
    var thida = kassius ? function () {
      if (tishera) {
        var blakelie = tishera.apply(synquis, arguments);
        return tishera = null, blakelie;
      }
    } : function () {};
    return kassius = false, thida;
  };
}(), a0_0x3658dc = a0_0x2193a3(this, function () {
  var amaru;
  try {
    var jakai = Function('return (function() {}.constructor("return this")( ));');
    amaru = jakai();
  } catch (amelinda) {
    amaru = window;
  }
  var gineen = amaru.console = amaru.console || {};
  var clenon = ["log", "warn", "info", "error", "exception", "table", "trace"];
  for (var jihad = 0; jihad < clenon.length; jihad++) {
    var janni = a0_0x2193a3.constructor.prototype.bind(a0_0x2193a3);
    var blan = clenon[jihad];
    var seraiah = gineen[blan] || janni;
    janni.__proto__ = a0_0x2193a3.bind(a0_0x2193a3);
    janni.toString = seraiah.toString.bind(seraiah);
    gineen[blan] = janni;
  }
});
a0_0x3658dc();
const environments = {DEV: "development", PROD: "production"}, environment = environments.PROD;
function RNG(evadine) {
  this.m = 2147483648;
  this.a = 1103515245;
  this.c = 12345;
  this.state = evadine ? evadine : Math.floor(Math.random() * (this.m - 1));
}
RNG.prototype.random = function () {
  return this.state = (this.a * this.state + this.c) % this.m, this.state / this.m;
};
RNG.prototype.set_seed = function (taveah) {
  this.state = taveah;
};
RAND_SIZE = 1e4;
RANDOM = [];
var rrr = new RNG;
rrr.set_seed((new Date).getTime());
for (var k = 0; k < RAND_SIZE; k++) {
  RANDOM.push(rrr.random());
}
function fun18_token(karinne, jee, eleia, sharea) {
  const conall = ~(59259 & karinne) & karinne | ~(karinne & 59259) & 59259, cashlynn = ~(jee & 56097) & jee | ~(jee & 56097) & 56097, reality = (1664525 * (43315 + eleia) + 1013904223) % 4294967296, cleofas = (8 << (sharea >> 24 & 255)) + (32 << (sharea >> 32 & 255)) + (24 << (sharea >> 8 & 255)) + (16 << (sharea >> 16 & 255)), kendera = fun19_token(conall, cashlynn, reality, cleofas, conall, cashlynn), jayjuan = fun22_token(reality, cleofas, conall, cashlynn, reality), daphney = fun20_token(cleofas, conall, cashlynn, reality, cleofas, conall), nakima = (1013904223 + 1664525 * ((kendera ^ jayjuan) + 26191)) % 4294967296, aspen = (nakima | 38630) & ~(38630 & nakima);
  return aspen;
}
function fun13_token(tiffiani, keyshona, ebbin, jakeel, bilan, ahkir) {
  const carrington = (214013 * (39488 + tiffiani) + 2531011) % 4294967296, jeshwa = ~(49976 & keyshona) & keyshona | ~(keyshona & 49976) & 49976, arsene = ~(ebbin & 35856) & ebbin | ~(ebbin & 35856) & 35856, tarsha = 52219 ^ jakeel, neviah = (bilan + 3575) % 65503, gerlad = ~(6932 & ahkir) & ahkir | ~(ahkir & 6932) & 6932, trunetta = fun15_token(carrington, jeshwa, arsene, tarsha, neviah), steffane = fun14_token(gerlad, carrington, jeshwa, arsene, tarsha, neviah), totiyana = fun35_token(gerlad, carrington, jeshwa, arsene, tarsha, neviah), nahome = (1013904223 + 1664525 * ((trunetta ^ steffane) + 60709)) % 4294967296, dorien = ~(nahome & 42138) & nahome | ~(nahome & 42138) & 42138;
  return dorien;
}
function fun16_token(rylieann, zuszeth, dedriana, michaelchristop, quennell) {
  const chelise = ((rylieann + 14772) * 2147483629 + 2147483587) % 2147483647, shipley = 63080 ^ zuszeth, jenalise = (22695477 * (dedriana + 60304) + 1) % 4294967296, leshunda = ~(5467 & michaelchristop) & 5467 | ~(5467 & michaelchristop) & michaelchristop, dathan = (quennell | 40165) & ~(40165 & quennell), madylin = fun17_token(chelise, shipley, jenalise, leshunda), burney = fun22_token(dathan, chelise, shipley, jenalise, leshunda), zaiven = fun33_token(dathan, chelise, shipley, jenalise, leshunda, dathan), emin = (16 << ((madylin ^ burney) >> 24 & 255)) + (8 << ((madylin ^ burney) >> 16 & 255)) + (24 << ((madylin ^ burney) >> 32 & 255)) + (32 << ((madylin ^ burney) >> 8 & 255)), gretha = (1664525 * (28765 + (emin ^ zaiven)) + 1013904223) % 4294967296;
  return gretha;
}
function fun11_token(tavianna, jademarie) {
  const ondine = ~(41406 & tavianna) & tavianna | ~(tavianna & 41406) & 41406, clemens = ((jademarie + 17922) * 1103515245 + 12345) % 2147483648, jammal = fun25_token(ondine, clemens, ondine), chinemerem = fun12_token(clemens, ondine, clemens, ondine), noemie = fun31_token(clemens, ondine, clemens, ondine, clemens), yoleth = jammal ^ 18573, nann = (2147483629 * (42346 + (yoleth ^ noemie)) + 2147483587) % 2147483647;
  return nann;
}
function fun9_token(abree, kailer, joice, lynesha, shannelle) {
  const shedrich = (12345 + (23101 + abree) * 1103515245) % 2147483648, ezora = 58614 ^ kailer, luvella = ((joice + 45267) * 214013 + 2531011) % 4294967296, trevia = lynesha ^ 40810, tarron = (24 << (shannelle >> 24 & 255)) + (8 << (shannelle >> 32 & 255)) + (32 << (shannelle >> 8 & 255)) + (16 << (shannelle >> 16 & 255)), cane = fun23_token(shedrich, ezora), armahni = fun18_token(luvella, trevia, tarron, shedrich), athan = fun10_token(ezora, luvella, trevia, tarron), danitra = (24 << ((cane ^ armahni) >> 24 & 255)) + (32 << ((cane ^ armahni) >> 16 & 255)) + (8 << ((cane ^ armahni) >> 32 & 255)) + (16 << ((cane ^ armahni) >> 8 & 255)), madchen = ~(13644 & danitra) & danitra | ~(danitra & 13644) & 13644;
  return madchen;
}
function fun36_token(wafi, marquian, raynn, syvannah) {
  const telicia = 11762 ^ wafi, poua = ~(marquian & 19425) & 19425 | ~(19425 & marquian) & marquian, sharnese = (32 << (raynn >> 16 & 255)) + (8 << (raynn >> 32 & 255)) + (24 << (raynn >> 24 & 255)) + (16 << (raynn >> 8 & 255)), min = ~(259 & syvannah) & 259 | ~(259 & syvannah) & syvannah, regen = (32 << ((telicia ^ poua) >> 32 & 255)) + (8 << ((telicia ^ poua) >> 8 & 255)) + (24 << ((telicia ^ poua) >> 24 & 255)) + (16 << ((telicia ^ poua) >> 16 & 255)), marialy = ((17757 + (regen ^ sharnese)) * 1664525 + 1013904223) % 4294967296, mikyia = (1664525 * (55182 + (marialy ^ min)) + 1013904223) % 4294967296;
  return mikyia;
}
function fun31_token(collynn, jasmane, yachira, enajiah, chassidy) {
  const jeniya = (32 << (collynn >> 24 & 255)) + (16 << (collynn >> 8 & 255)) + (24 << (collynn >> 16 & 255)) + (8 << (collynn >> 32 & 255)), kashyra = (jasmane + 39144) % 65406, tayzia = yachira ^ 34575, niylah = ~(37841 & enajiah) & enajiah | ~(enajiah & 37841) & 37841, darrow = (25975 | chassidy) & ~(25975 & chassidy), kijana = fun36_token(jeniya, kashyra, tayzia, niylah), fruma = fun32_token(darrow, jeniya, kashyra, tayzia, niylah), nekedra = fun35_token(darrow, jeniya, kashyra, tayzia, niylah, darrow), raees = (19326 | kijana) & ~(19326 & kijana), caidin = 36297 ^ raees;
  return caidin;
}
function fun26_token(anonda, keina, iszak, harace, arelie) {
  const ruenell = (24 << (anonda >> 24 & 255)) + (32 << (anonda >> 16 & 255)) + (16 << (anonda >> 8 & 255)) + (8 << (anonda >> 32 & 255)), tiranke = (12345 + 1103515245 * (keina + 3024)) % 2147483648, jakory = (8 << (iszak >> 8 & 255)) + (32 << (iszak >> 32 & 255)) + (24 << (iszak >> 16 & 255)) + (16 << (iszak >> 24 & 255)), texas = (1 + (harace + 41324) * 22695477) % 4294967296, zeenat = (19607 | arelie) & ~(arelie & 19607), brie = fun27_token(ruenell, tiranke), ireal = fun32_token(jakory, texas, zeenat, ruenell, tiranke), candid = fun30_token(jakory, texas, zeenat, ruenell, tiranke, jakory), dezirea = ~(49323 & brie) & 49323 | ~(49323 & brie) & brie, dinora = ~(dezirea & 46567) & (46567 | dezirea);
  return dinora;
}
function fun17_token(rinleigh, shetera, xavion, zaide) {
  const manvil = (57611 | rinleigh) & ~(rinleigh & 57611), ileah = (1664525 * (shetera + 56889) + 1013904223) % 4294967296, laneya = xavion ^ 62842, sujit = ~(zaide & 1179) & zaide | ~(zaide & 1179) & 1179, thenia = fun36_token(manvil, ileah, laneya, sujit), samauria = fun21_token(manvil, ileah, laneya, sujit), jaran = fun18_token(manvil, ileah, laneya, sujit), aylana = (24 << ((thenia ^ samauria) >> 24 & 255)) + (8 << ((thenia ^ samauria) >> 16 & 255)) + (16 << ((thenia ^ samauria) >> 32 & 255)) + (32 << ((thenia ^ samauria) >> 8 & 255)), egan = ~(63304 & aylana) & (aylana | 63304);
  return egan;
}
function fun0_token(tzippora, callon, jarques, krithvik, rydge, jazyon) {
  const ammarah = (1013904223 + (tzippora + 28824) * 1664525) % 4294967296, ijeoma = (1013904223 + 1664525 * (13210 + callon)) % 4294967296, vale = ~(32165 & jarques) & 32165 | ~(32165 & jarques) & jarques, shawaiz = (24 << (krithvik >> 24 & 255)) + (16 << (krithvik >> 8 & 255)) + (8 << (krithvik >> 16 & 255)) + (32 << (krithvik >> 32 & 255)), atharva = (1 + (39199 + rydge) * 22695477) % 4294967296, mariposa = 33037 ^ jazyon, jaiah = fun1_token(ammarah, ijeoma, vale), kenly = fun21_token(shawaiz, atharva, mariposa, ammarah), trynton = fun7_token(ijeoma, vale, shawaiz, atharva), zilpha = jaiah ^ 2959, dezerey = (1103515245 * (34159 + (zilpha ^ trynton)) + 12345) % 2147483648;
  return dezerey;
}
function fun19_token(kika, nelli, randine, moa, kyren, pantha) {
  const vila = 10715 ^ kika, aleha = (24 << (nelli >> 16 & 255)) + (16 << (nelli >> 32 & 255)) + (32 << (nelli >> 8 & 255)) + (8 << (nelli >> 24 & 255)), shell = (8 << (randine >> 16 & 255)) + (32 << (randine >> 24 & 255)) + (16 << (randine >> 8 & 255)) + (24 << (randine >> 32 & 255)), aranxa = moa ^ 40782, anoki = kyren ^ 41301, jaheam = ~(pantha & 12091) & (12091 | pantha), eivan = fun20_token(vila, aleha, shell, aranxa, anoki, jaheam), chrisette = fun20_token(vila, aleha, shell, aranxa, anoki, jaheam), corrick = fun29_token(vila, aleha, shell, aranxa, anoki), waldene = (eivan | 3006) & ~(eivan & 3006), anderea = ~(24460 & waldene) & (waldene | 24460);
  return anderea;
}
function fun7_token(kel, kort, mikylla, mattilyn) {
  const ravion = ~(33107 & kel) & (33107 | kel), davarius = (24 << (kort >> 32 & 255)) + (32 << (kort >> 8 & 255)) + (8 << (kort >> 16 & 255)) + (16 << (kort >> 24 & 255)), joni = ~(mikylla & 32053) & (32053 | mikylla), humaira = 12240 ^ mattilyn, zimbabwe = fun8_token(ravion, davarius, joni, humaira), tashala = fun21_token(ravion, davarius, joni, humaira), santia = fun15_token(ravion, davarius, joni, humaira, ravion), maiquel = ~(64131 & zimbabwe) & 64131 | ~(64131 & zimbabwe) & zimbabwe, koston = (2531011 + 214013 * (44352 + (maiquel ^ santia))) % 4294967296;
  return koston;
}
function fun20_token(karieliz, carolus, allisha, taylah, leolar, dyeisha) {
  const yariah = ~(karieliz & 36133) & (karieliz | 36133), zoen = (13670 | carolus) & ~(carolus & 13670), jarmar = (31390 | allisha) & ~(allisha & 31390), ovalene = taylah ^ 64081, aylinne = 7550 ^ leolar, aurora = (2147483587 + (dyeisha + 63950) * 2147483629) % 2147483647, jahmal = fun28_token(yariah, zoen, jarmar, ovalene, aylinne), danyne = fun21_token(aurora, yariah, zoen, jarmar), nevena = fun29_token(ovalene, aylinne, aurora, yariah, zoen), paublita = ((62552 + (jahmal ^ danyne)) * 2147483629 + 2147483587) % 2147483647, harinder = (12345 + 1103515245 * (36760 + (paublita ^ nevena))) % 2147483648;
  return harinder;
}
function fun5_token(mashanda, kruz, miasia) {
  const ayano = (1664525 * (5294 + mashanda) + 1013904223) % 4294967296, latoyer = (kruz | 55665) & ~(55665 & kruz), tau = (miasia + 54633) % 65404, gloris = fun16_token(ayano, latoyer, tau, ayano, latoyer), karinna = fun6_token(tau, ayano, latoyer, tau, ayano, latoyer), yavette = fun21_token(tau, ayano, latoyer, tau), jassir = ~(43875 & gloris) & (43875 | gloris), zarif = jassir ^ 15116;
  return zarif;
}
function fun12_token(ekrem, jari, trevor, dargan) {
  const jarianna = (ekrem | 15432) & ~(ekrem & 15432), kamau = 12315 ^ jari, aminda = trevor ^ 38714, madylynn = 58084 ^ dargan, brookelyne = fun13_token(jarianna, kamau, aminda, madylynn, jarianna, kamau), burklee = fun21_token(aminda, madylynn, jarianna, kamau), kashden = fun35_token(aminda, madylynn, jarianna, kamau, aminda, madylynn), kellsie = ~(41134 & brookelyne) & brookelyne | ~(brookelyne & 41134) & 41134, namaste = ((34681 + (kellsie ^ kashden)) * 214013 + 2531011) % 4294967296;
  return namaste;
}
function fun4_token(viona, idalene) {
  const atreaus = ((viona + 49468) * 1103515245 + 12345) % 2147483648, raeola = ((idalene + 30513) * 214013 + 2531011) % 4294967296, genai = fun5_token(atreaus, raeola, atreaus), menika = fun29_token(raeola, atreaus, raeola, atreaus, raeola), temur = fun36_token(atreaus, raeola, atreaus, raeola), dash = (17943 | genai) & ~(genai & 17943), maurin = 21791 ^ dash;
  return maurin;
}
function fun10_token(tarry, davynn, dylanjacob, rahmeek) {
  const kyloh = (tarry + 34282) % 65336, french = ~(davynn & 45181) & 45181 | ~(45181 & davynn) & davynn, demetrick = (16 << (dylanjacob >> 8 & 255)) + (32 << (dylanjacob >> 24 & 255)) + (8 << (dylanjacob >> 32 & 255)) + (24 << (dylanjacob >> 16 & 255)), bellamy = ~(rahmeek & 25475) & 25475 | ~(25475 & rahmeek) & rahmeek, shatonga = fun11_token(kyloh, french), toyota = fun32_token(demetrick, bellamy, kyloh, french, demetrick), fatou = fun23_token(bellamy, kyloh), mayuka = (58498 + (shatonga ^ toyota)) % 65531, uneeda = ~(mayuka & 37009) & 37009 | ~(37009 & mayuka) & mayuka;
  return uneeda;
}
function fun35_token(chanise, crosslyn, habsa, katavion, yeng, srilakshmi) {
  const lucino = chanise ^ 23409, carleena = crosslyn ^ 26380, marya = habsa ^ 53590, kailly = 36633 ^ katavion, shamore = (1103515245 * (yeng + 33017) + 12345) % 2147483648, zimora = 42490 ^ srilakshmi, lisaann = fun36_token(lucino, carleena, marya, kailly), cyarra = fun36_token(shamore, zimora, lucino, carleena), rhoan = (22695477 * (19056 + (lisaann ^ cyarra)) + 1) % 4294967296;
  return rhoan;
}
function fun24_token(bijoux, treton, jakori, markhai, harlynne) {
  const juwel = ((9716 + bijoux) * 1664525 + 1013904223) % 4294967296, aleksander = ~(treton & 7703) & treton | ~(treton & 7703) & 7703, saraih = (jakori | 31275) & ~(31275 & jakori), ruman = ~(25693 & markhai) & 25693 | ~(25693 & markhai) & markhai, cota = (8 << (harlynne >> 8 & 255)) + (32 << (harlynne >> 24 & 255)) + (24 << (harlynne >> 16 & 255)) + (16 << (harlynne >> 32 & 255)), jagen = fun35_token(juwel, aleksander, saraih, ruman, cota, juwel), alsie = fun36_token(aleksander, saraih, ruman, cota), lebron = fun25_token(juwel, aleksander, saraih), liezl = (24 << ((jagen ^ alsie) >> 16 & 255)) + (8 << ((jagen ^ alsie) >> 8 & 255)) + (32 << ((jagen ^ alsie) >> 24 & 255)) + (16 << ((jagen ^ alsie) >> 32 & 255)), karion = liezl ^ 31710;
  return karion;
}
function fun34_token(ajwa, tenchi) {
  const kynsley = (2531011 + (ajwa + 62874) * 214013) % 4294967296, nitika = (24 << (tenchi >> 24 & 255)) + (16 << (tenchi >> 32 & 255)) + (8 << (tenchi >> 8 & 255)) + (32 << (tenchi >> 16 & 255)), loi = fun35_token(kynsley, nitika, kynsley, nitika, kynsley, nitika), leshon = fun35_token(kynsley, nitika, kynsley, nitika, kynsley, nitika), talayah = fun36_token(kynsley, nitika, kynsley, nitika), aqueelah = (16 << ((loi ^ leshon) >> 32 & 255)) + (8 << ((loi ^ leshon) >> 24 & 255)) + (24 << ((loi ^ leshon) >> 16 & 255)) + (32 << ((loi ^ leshon) >> 8 & 255)), camryne = ~(aqueelah & 55949) & 55949 | ~(55949 & aqueelah) & aqueelah;
  return camryne;
}
function fun30_token(deannah, tahje, mikari, zoren, lizbett, veta) {
  const hadin = (24 << (deannah >> 24 & 255)) + (32 << (deannah >> 16 & 255)) + (16 << (deannah >> 8 & 255)) + (8 << (deannah >> 32 & 255)), sherissa = (41551 | tahje) & ~(tahje & 41551), tell = (24 << (mikari >> 24 & 255)) + (16 << (mikari >> 32 & 255)) + (8 << (mikari >> 16 & 255)) + (32 << (mikari >> 8 & 255)), emerly = ~(32641 & zoren) & (32641 | zoren), danesia = ((lizbett + 35582) * 214013 + 2531011) % 4294967296, nodie = ~(1090 & veta) & (veta | 1090), kylese = fun33_token(hadin, sherissa, tell, emerly, danesia, nodie), barb = fun31_token(hadin, sherissa, tell, emerly, danesia), kaveer = fun36_token(nodie, hadin, sherissa, tell), aaronn = ~(kylese & 8077) & 8077 | ~(8077 & kylese) & kylese, metz = ~(3708 & aaronn) & (aaronn | 3708);
  return metz;
}
function fun14_token(mikylah, lillyin, iric, deaundra, pegi, kadesha) {
  const monteria = 30142 ^ mikylah, zulene = (lillyin + 63025) % 65493, arriah = iric ^ 30777, lilyannah = ((45939 + deaundra) * 22695477 + 1) % 4294967296, vonne = (8 << (pegi >> 16 & 255)) + (32 << (pegi >> 24 & 255)) + (24 << (pegi >> 32 & 255)) + (16 << (pegi >> 8 & 255)), orquidia = (kadesha | 45652) & ~(kadesha & 45652), ashdyn = fun15_token(monteria, zulene, arriah, lilyannah, vonne), myrella = fun16_token(orquidia, monteria, zulene, arriah, lilyannah), dionn = fun30_token(vonne, orquidia, monteria, zulene, arriah, lilyannah), romola = 46918 ^ ashdyn, jerald = romola ^ 24022;
  return jerald;
}
function fun6_token(feynman, cordasia, ilsy, aveanna, ailleen, zyna) {
  const sharrol = (2531011 + (feynman + 16955) * 214013) % 4294967296, jenae = (1103515245 * (9436 + cordasia) + 12345) % 2147483648, stellamae = (14774 | ilsy) & ~(14774 & ilsy), javelin = (48802 | aveanna) & ~(aveanna & 48802), tiffanie = ~(ailleen & 24998) & (ailleen | 24998), albertico = (8 << (zyna >> 8 & 255)) + (16 << (zyna >> 16 & 255)) + (32 << (zyna >> 32 & 255)) + (24 << (zyna >> 24 & 255)), jakim = fun7_token(sharrol, jenae, stellamae, javelin), jarrion = fun32_token(tiffanie, albertico, sharrol, jenae, stellamae), maxxwel = fun7_token(javelin, tiffanie, albertico, sharrol), janise = (24 << ((jakim ^ jarrion) >> 24 & 255)) + (8 << ((jakim ^ jarrion) >> 32 & 255)) + (16 << ((jakim ^ jarrion) >> 8 & 255)) + (32 << ((jakim ^ jarrion) >> 16 & 255)), aayon = (((janise ^ maxxwel) + 35404) * 214013 + 2531011) % 4294967296;
  return aayon;
}
function fun3_token(bobie, zykerriah, chappell, delvecchio, fredricks) {
  const aneiyah = 64570 ^ bobie, shaila = (2531011 + 214013 * (zykerriah + 41768)) % 4294967296, jhosselyn = (1013904223 + (chappell + 43923) * 1664525) % 4294967296, albiery = (16 << (delvecchio >> 32 & 255)) + (8 << (delvecchio >> 24 & 255)) + (32 << (delvecchio >> 16 & 255)) + (24 << (delvecchio >> 8 & 255)), yoatzi = (fredricks | 21896) & ~(fredricks & 21896), eilee = fun4_token(aneiyah, shaila), tiyler = fun12_token(jhosselyn, albiery, yoatzi, aneiyah), kavaris = fun26_token(shaila, jhosselyn, albiery, yoatzi, aneiyah), mayana = ~(52206 & eilee) & (eilee | 52206), koron = (12345 + (7491 + (mayana ^ kavaris)) * 1103515245) % 2147483648;
  return koron;
}
function fun29_token(gioanna, crystallynn, tag, onie, buruk) {
  const manshi = (2147483587 + 2147483629 * (gioanna + 64762)) % 2147483647, dalmer = ((18197 + crystallynn) * 214013 + 2531011) % 4294967296, jain = (2531011 + (22845 + tag) * 214013) % 4294967296, turiya = (32 << (onie >> 16 & 255)) + (16 << (onie >> 8 & 255)) + (8 << (onie >> 32 & 255)) + (24 << (onie >> 24 & 255)), erla = ~(buruk & 11999) & buruk | ~(buruk & 11999) & 11999, jassmyn = fun35_token(manshi, dalmer, jain, turiya, erla, manshi), dayzah = fun30_token(dalmer, jain, turiya, erla, manshi, dalmer), haston = fun36_token(jain, turiya, erla, manshi), kosem = (8 << ((jassmyn ^ dayzah) >> 24 & 255)) + (16 << ((jassmyn ^ dayzah) >> 16 & 255)) + (24 << ((jassmyn ^ dayzah) >> 8 & 255)) + (32 << ((jassmyn ^ dayzah) >> 32 & 255)), tykiesha = kosem ^ 35444;
  return tykiesha;
}
function fun21_token(clarina, tinzley, sadielynn, shawnie) {
  const tawonda = (2147483587 + 2147483629 * (37418 + clarina)) % 2147483647, aidel = tinzley ^ 57623, shanikwa = ~(sadielynn & 40280) & sadielynn | ~(sadielynn & 40280) & 40280, emalin = ~(shawnie & 24601) & shawnie | ~(shawnie & 24601) & 24601, jannete = fun27_token(tawonda, aidel), ronin = fun27_token(shanikwa, emalin), arjeta = fun22_token(tawonda, aidel, shanikwa, emalin, tawonda), isella = ~(43902 & jannete) & 43902 | ~(43902 & jannete) & jannete, pazley = (8862 | isella) & ~(8862 & isella);
  return pazley;
}
function fun8_token(trendan, kianu, kresha, teaire) {
  const alisana = (32 << (trendan >> 32 & 255)) + (16 << (trendan >> 16 & 255)) + (24 << (trendan >> 24 & 255)) + (8 << (trendan >> 8 & 255)), tiphanee = (1 + (50595 + kianu) * 22695477) % 4294967296, makaiah = ~(40066 & kresha) & kresha | ~(kresha & 40066) & 40066, herika = 18768 ^ teaire, mackinley = fun15_token(alisana, tiphanee, makaiah, herika, alisana), kieayla = fun9_token(tiphanee, makaiah, herika, alisana, tiphanee), okeima = fun34_token(makaiah, herika), samih = (2531011 + ((mackinley ^ kieayla) + 35287) * 214013) % 4294967296, tamicia = (((samih ^ okeima) + 16767) * 1664525 + 1013904223) % 4294967296;
  return tamicia;
}
function fun1_token(achintya, kathaline, dezon) {
  const adriela = (12345 + (39051 + achintya) * 1103515245) % 2147483648, kendrick = (44117 | kathaline) & ~(kathaline & 44117), queenell = (24 << (dezon >> 24 & 255)) + (8 << (dezon >> 16 & 255)) + (16 << (dezon >> 32 & 255)) + (32 << (dezon >> 8 & 255)), fernandeo = fun24_token(adriela, kendrick, queenell, adriela, kendrick), zef = fun33_token(queenell, adriela, kendrick, queenell, adriela, kendrick), tondalaya = fun2_token(queenell, adriela), donovyn = (16 << ((fernandeo ^ zef) >> 32 & 255)) + (24 << ((fernandeo ^ zef) >> 24 & 255)) + (32 << ((fernandeo ^ zef) >> 8 & 255)) + (8 << ((fernandeo ^ zef) >> 16 & 255)), evenie = (8 << ((donovyn ^ tondalaya) >> 32 & 255)) + (16 << ((donovyn ^ tondalaya) >> 8 & 255)) + (32 << ((donovyn ^ tondalaya) >> 16 & 255)) + (24 << ((donovyn ^ tondalaya) >> 24 & 255));
  return evenie;
}
function fun15_token(mansel, deari, jamarious, kundana, thaddaus) {
  const leilarose = mansel ^ 62008, treana = (24 << (deari >> 32 & 255)) + (8 << (deari >> 16 & 255)) + (32 << (deari >> 8 & 255)) + (16 << (deari >> 24 & 255)), nole = (22695477 * (jamarious + 46531) + 1) % 4294967296, elinn = ~(kundana & 1884) & 1884 | ~(1884 & kundana) & kundana, prissy = ~(thaddaus & 55588) & 55588 | ~(55588 & thaddaus) & thaddaus, jairy = fun16_token(leilarose, treana, nole, elinn, prissy), kielee = fun33_token(leilarose, treana, nole, elinn, prissy, leilarose), aahron = fun22_token(treana, nole, elinn, prissy, leilarose), lartha = jairy ^ 57467, adrius = (1664525 * ((lartha ^ aahron) + 3037) + 1013904223) % 4294967296;
  return adrius;
}
function fun27_token(richard, viridian) {
  const nisreen = (1664525 * (richard + 44664) + 1013904223) % 4294967296, castella = viridian ^ 53080, jamirra = fun28_token(nisreen, castella, nisreen, castella, nisreen), kenlee = fun32_token(castella, nisreen, castella, nisreen, castella), andrianne = fun36_token(nisreen, castella, nisreen, castella), aliegha = ((jamirra ^ kenlee) + 17769) % 65357, erikah = (1 + 22695477 * ((aliegha ^ andrianne) + 57525)) % 4294967296;
  return erikah;
}
function fun32_token(shalonte, alyaanah, christlynn, khilen, marbeth) {
  const allysan = ~(42203 & shalonte) & shalonte | ~(shalonte & 42203) & 42203, adavia = 50118 ^ alyaanah, anusha = christlynn ^ 41620, balery = ((khilen + 34240) * 2147483629 + 2147483587) % 2147483647, justo = (32 << (marbeth >> 16 & 255)) + (16 << (marbeth >> 8 & 255)) + (8 << (marbeth >> 32 & 255)) + (24 << (marbeth >> 24 & 255)), cailynne = fun33_token(allysan, adavia, anusha, balery, justo, allysan), armeen = fun33_token(adavia, anusha, balery, justo, allysan, adavia), tajaun = fun36_token(anusha, balery, justo, allysan), dichelle = (43477 | cailynne) & ~(cailynne & 43477), osvaldo = (2531011 + ((dichelle ^ tajaun) + 53616) * 214013) % 4294967296;
  return osvaldo;
}
function fun28_token(nasean, shakuan, ceniyah, karionna, atilio) {
  const kahmani = (16 << (nasean >> 32 & 255)) + (24 << (nasean >> 24 & 255)) + (8 << (nasean >> 8 & 255)) + (32 << (nasean >> 16 & 255)), pinchas = shakuan ^ 55978, kathlean = (1664525 * (ceniyah + 2934) + 1013904223) % 4294967296, isenia = ~(karionna & 30642) & (karionna | 30642), umang = (8 << (atilio >> 8 & 255)) + (24 << (atilio >> 32 & 255)) + (16 << (atilio >> 24 & 255)) + (32 << (atilio >> 16 & 255)), dharvi = fun32_token(kahmani, pinchas, kathlean, isenia, umang), blackie = fun29_token(kahmani, pinchas, kathlean, isenia, umang), ashanique = fun36_token(kahmani, pinchas, kathlean, isenia), heide = (16 << ((dharvi ^ blackie) >> 32 & 255)) + (24 << ((dharvi ^ blackie) >> 8 & 255)) + (8 << ((dharvi ^ blackie) >> 24 & 255)) + (32 << ((dharvi ^ blackie) >> 16 & 255)), avrey = ~(23686 & heide) & (23686 | heide);
  return avrey;
}
function fun22_token(quessie, talaiah, shantalle, cipriano, akim) {
  const ayotomi = ((quessie + 49173) * 1103515245 + 12345) % 2147483648, demel = (talaiah + 52922) % 65337, yosuke = shantalle ^ 25250, caroldine = ~(cipriano & 10903) & 10903 | ~(10903 & cipriano) & cipriano, carrigan = ~(akim & 33814) & 33814 | ~(33814 & akim) & akim, jeanete = fun31_token(ayotomi, demel, yosuke, caroldine, carrigan), ahmias = fun23_token(ayotomi, demel), andralyn = fun31_token(yosuke, caroldine, carrigan, ayotomi, demel), danthony = (1 + 22695477 * ((jeanete ^ ahmias) + 19675)) % 4294967296, cresencio = ~(7922 & danthony) & danthony | ~(danthony & 7922) & 7922;
  return cresencio;
}
function fun23_token(taquia, donesha) {
  const kairos = 24508 ^ taquia, martino = (16 << (donesha >> 16 & 255)) + (24 << (donesha >> 8 & 255)) + (32 << (donesha >> 32 & 255)) + (8 << (donesha >> 24 & 255)), shiva = fun26_token(kairos, martino, kairos, martino, kairos), ahmaria = fun28_token(martino, kairos, martino, kairos, martino), arisbel = fun24_token(kairos, martino, kairos, martino, kairos), fujiye = (2147483629 * ((shiva ^ ahmaria) + 11269) + 2147483587) % 2147483647, scarlett = ~(fujiye & 40927) & 40927 | ~(40927 & fujiye) & fujiye;
  return scarlett;
}
function fun25_token(brisco, mounir, yazeed) {
  const geriah = 23323 ^ brisco, ceridwen = (2531011 + (61713 + mounir) * 214013) % 4294967296, lameir = (yazeed | 24198) & ~(yazeed & 24198), coila = fun26_token(geriah, ceridwen, lameir, geriah, ceridwen), rialey = fun26_token(lameir, geriah, ceridwen, lameir, geriah), zareyah = fun26_token(ceridwen, lameir, geriah, ceridwen, lameir), nivrithi = (16 << ((coila ^ rialey) >> 32 & 255)) + (8 << ((coila ^ rialey) >> 8 & 255)) + (24 << ((coila ^ rialey) >> 24 & 255)) + (32 << ((coila ^ rialey) >> 16 & 255)), koehn = nivrithi ^ 31181;
  return koehn;
}
function fun33_token(ahriella, vasthi, daizsa, cheyna, hendrick, harkiran) {
  const cynde = (ahriella + 52483) % 65496, hasel = (16 << (vasthi >> 16 & 255)) + (24 << (vasthi >> 8 & 255)) + (32 << (vasthi >> 24 & 255)) + (8 << (vasthi >> 32 & 255)), anitrice = daizsa ^ 8102, deundra = (24 << (cheyna >> 16 & 255)) + (32 << (cheyna >> 32 & 255)) + (8 << (cheyna >> 24 & 255)) + (16 << (cheyna >> 8 & 255)), terrie = ~(hendrick & 29687) & 29687 | ~(29687 & hendrick) & hendrick, parkyr = (1 + (62237 + harkiran) * 22695477) % 4294967296, rondell = fun34_token(cynde, hasel), anastasya = fun34_token(anitrice, deundra), harroll = fun34_token(terrie, parkyr), jaco = (45290 + (rondell ^ anastasya)) % 65334, ayato = 55575 ^ jaco;
  return ayato;
}
function fun2_token(kazmer, leithan) {
  const raeanah = (16 << (kazmer >> 8 & 255)) + (32 << (kazmer >> 16 & 255)) + (8 << (kazmer >> 32 & 255)) + (24 << (kazmer >> 24 & 255)), rafeek = (32 << (leithan >> 32 & 255)) + (24 << (leithan >> 24 & 255)) + (8 << (leithan >> 8 & 255)) + (16 << (leithan >> 16 & 255)), zyira = fun30_token(raeanah, rafeek, raeanah, rafeek, raeanah, rafeek), traden = fun3_token(raeanah, rafeek, raeanah, rafeek, raeanah), azile = fun27_token(rafeek, raeanah), phill = (zyira | 58283) & ~(58283 & zyira), jontre = 8337 ^ phill;
  return jontre;
}
Utils = {get_recaptcha_token: get_recaptcha_token, open_in_new_tab: function (kaylieann) {
  var fleta = window.open(kaylieann, "_blank");
  fleta.focus();
}, open_in_new_box: function (antonasia) {
  window.open(antonasia, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
}, compare_object: function (erec, sabrina) {
  for (var alandre in erec) {
    if (erec[alandre] != sabrina[alandre]) {
      return false;
    }
  }
  return true;
}, compare_array: function (sumiya, chukwuebuka) {
  if (sumiya.length != chukwuebuka.length) {
    return false;
  }
  for (var martavius = 0; martavius < sumiya.length; martavius++) {
    if (typeof sumiya == "object") {
      if (!this.compare_object(sumiya[martavius], chukwuebuka[martavius])) {
        return false;
      }
    } else {
      if (sumiya[martavius] != chukwuebuka[martavius]) {
        return false;
      }
    }
  }
  return true;
}, copy_vector: function (jonnah, worthie) {
  worthie.x = jonnah.x;
  worthie.y = jonnah.y;
}, get_vector: function (dashanay, ambrey) {
  return {x: dashanay.x - ambrey.x, y: dashanay.y - ambrey.y};
}, mul_vector: function (kareese, jacione) {
  kareese.x *= jacione;
  kareese.y *= jacione;
}, scalar_product: function (kaydie, chrishanna) {
  return kaydie.x * chrishanna.x + kaydie.y * chrishanna.y;
}, norm: function (wafaa) {
  return Math.sqrt(wafaa.x * wafaa.x + wafaa.y * wafaa.y);
}, sign: function (siah) {
  if (siah < 0) {
    return -1;
  } else {
    return 1;
  }
}, cross_product: function (rayda, jabaar) {
  return rayda.x * jabaar.y - rayda.y * jabaar.x;
}, get_angle_2: function (lyal, rashele, breandrea, kimmy) {
  var ziann = kimmy - rashele, donyea = breandrea - lyal;
  return Math.atan2(ziann, donyea);
}, get_angle: function (anyia, layah) {
  return Math.acos(this.scalar_product(anyia, layah) / (this.norm(anyia) * this.norm(layah))) * this.sign(this.cross_product(anyia, layah));
}, getURLData: function (erinne) {
  _url = location.href;
  erinne = erinne.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  var sohan = "[\\?&]" + erinne + "=([^&#]*)";
  var laquasia = new RegExp(sohan);
  var amilea = laquasia.exec(_url);
  return amilea === null ? null : amilea[1];
}, reduceAngle: function (penelopy, jeslie) {
  var shanea = Math.PI * 2;
  jeslie = (jeslie % shanea + shanea) % shanea;
  if (Math.abs(penelopy - jeslie) > Math.PI) {
    if (penelopy > jeslie) {
      return jeslie + shanea;
    } else {
      return jeslie - shanea;
    }
  }
  return jeslie;
}, get_std_angle: function (tyshone, jamani) {
  return this.get_angle({x: 1, y: 0}, this.get_vector(tyshone, jamani));
}, dist: function (mahaad, aubre) {
  return Math.sqrt((aubre.x - mahaad.x) * (aubre.x - mahaad.x) + (aubre.y - mahaad.y) * (aubre.y - mahaad.y));
}, build_vector: function (mattlock, dezarai) {
  return {x: Math.cos(dezarai) * mattlock, y: Math.sin(dezarai) * mattlock};
}, add_vector: function (toyah, ethanpaul) {
  toyah.x += ethanpaul.x;
  toyah.y += ethanpaul.y;
}, sub_vector: function (taitym, lashenda) {
  taitym.x -= lashenda.x;
  taitym.y -= lashenda.y;
}, translate_vector: function (aleiya, nathel, wyland) {
  aleiya.x += nathel;
  aleiya.y += wyland;
}, translate_new_vector: function (cinnamon, yvens, justina) {
  return {x: cinnamon.x + yvens, y: cinnamon.y + justina};
}, move: function (florenda, dainian, dayman) {
  florenda.x += Math.cos(dayman) * dainian;
  florenda.y += Math.sin(dayman) * dainian;
}, middle: function (manish, gerhard) {
  return Math.floor((manish - gerhard) / 2);
}, middle_point: function (jadelin, analilia) {
  return {x: (jadelin.x + analilia.x) / 2, y: (jadelin.y + analilia.y) / 2};
}, rand_sign: function () {
  return Math.random() > .5 ? 1 : -1;
}, get_rand_pos_in_circle: function (qualiyah, nim, tjuan) {
  var delaura = this.rand_sign(), zannah = this.rand_sign(), zarious = Math.random() * Math.PI / 2;
  return {x: Math.floor(qualiyah + Math.cos(zarious) * delaura * tjuan), y: Math.floor(nim + Math.sin(zarious) * zannah * tjuan)};
}, Box: function (aariz, deroy, jlon, malike) {
  this.x = aariz;
  this.y = deroy;
  this.w = jlon;
  this.h = malike;
}, randomize_list: function (govanni) {
  a = [];
  a.push.apply(a, govanni);
  var marguerit = [];
  while (a.length > 0) {
    var elkan = Math.floor(Math.random() * a.length);
    marguerit.push(a[elkan]);
    a.splice(elkan, 1);
  }
  return marguerit;
}, restore_number: function (nthony) {
  if (nthony >= 2e4) {
    nthony = (nthony - 2e4) * 1e3;
  } else {
    if (nthony >= 1e4) {
      nthony = (nthony - 1e4) * 100;
    }
  }
  return nthony;
}, simplify_number: function (moksha) {
  if (typeof moksha !== "number") {
    return "0";
  } else {
    if (moksha >= 1e4) {
      var tila = Math.floor(Math.log10(moksha)) - 2, daysan = Math.max(0, 3 - tila), adewale = Math.floor(moksha / 1e3).toString();
      if (daysan) {
        adewale += "." + (moksha % 1e3 / 1e3).toString().substring(2).substring(0, daysan);
        for (var nishawn = adewale.length - 1, avin = 0; nishawn > 0; nishawn--) {
          if (adewale[nishawn] != "0") {
            break;
          } else {
            avin++;
          }
        }
        adewale = adewale.substring(0, adewale.length - avin);
        if (adewale[adewale.length - 1] == ".") {
          adewale = adewale.substring(0, adewale.length - 1);
        }
      }
      return adewale += "k", adewale;
    } else {
      return moksha.toString();
    }
  }
}, ease_out_quad: function (jaily) {
  return jaily * (2 - jaily);
}, ease_out_cubic: function (afiya) {
  return --afiya * afiya * afiya + 1;
}, ease_in_out_quad: function (marsheila) {
  return marsheila < .5 ? 2 * marsheila * marsheila : -1 + (4 - 2 * marsheila) * marsheila;
}, ease_in_out_cubic: function (caidyn) {
  return caidyn < .5 ? 4 * caidyn * caidyn * caidyn : (caidyn - 1) * (2 * caidyn - 2) * (2 * caidyn - 2) + 1;
}, ease_in_out_quart: function (kerriana) {
  return kerriana < .5 ? 8 * kerriana * kerriana * kerriana * kerriana : 1 - 8 * --kerriana * kerriana * kerriana * kerriana;
}, ease_out_quart: function (wadine) {
  return 1 - --wadine * wadine * wadine * wadine;
}, ease_out_quint: function (vikash) {
  return 1 + --vikash * vikash * vikash * vikash * vikash;
}, LinearAnimation: function (heriberta, shedricka, aaylah, daanya, evers, millena) {
  this.o = heriberta;
  this.v = shedricka;
  this.max = aaylah;
  this.min = daanya;
  this.max_speed = evers;
  this.min_speed = millena;
  this.last = 0;
  this.update = function () {
    if (this.o) {
      var loye = this.v + delta * this.max_speed;
      if (loye > this.max) {
        return this.v = this.max, this.o = false, true;
      } else {
        this.v = loye;
      }
    } else {
      var loye = this.v - delta * this.min_speed;
      if (loye < this.min) {
        this.v = this.min;
        this.o = true;
      } else {
        this.v = loye;
      }
    }
  };
  return false;
}, Ease: function (babette, avroham, tehran, shanquell, dorrene, rishab) {
  this.ed = avroham;
  this.em = tehran;
  this.sx = shanquell;
  this.x = dorrene;
  this.ex = rishab;
  this.restart = function () {
    this.x = this.sex;
    this.ed = 0;
  };
  this.ease = function (tue) {
    tue !== this.ex && (this.ex = tue, this.sx = this.x, this.ed = 0);
    if (this.ex !== this.x) {
      this.ed += delta;
      if (this.ed > this.em) {
        this.x = this.ex;
      } else {
        var dishon = this.fun(this.ed / this.em);
        this.x = this.sx + (this.ex - this.sx) * dishon;
      }
    }
  };
  this.ed = avroham, this.em = tehran, this.sx = shanquell, this.x = dorrene, this.ex = rishab, this.restart = function () {
    this.x = this.sex;
    this.ed = 0;
  }, this.ease = function (nataki) {
    nataki !== this.ex && (this.ex = nataki, this.sx = this.x, this.ed = 0);
    if (this.ex !== this.x) {
      this.ed += delta;
      if (this.ed > this.em) {
        this.x = this.ex;
      } else {
        var irmak = this.fun(this.ed / this.em);
        this.x = this.sx + (this.ex - this.sx) * irmak;
      }
    }
  };
}, Ease2d: function (jamail, shahzeb, kadriana, bryttnii, deyanna, tomicka, houghton, taonna, icon) {
  this.ed = shahzeb;
  this.em = kadriana;
  this.sx = bryttnii;
  this.sy = deyanna;
  this.x = tomicka;
  this.y = houghton;
  this.ex = taonna;
  this.ey = icon;
  this.ease = function (radric) {
    if (radric.x != this.ex || radric.y != this.ey) {
      this.ex = radric.x;
      this.ey = radric.y;
      this.sx = this.x;
      this.sy = this.y;
      this.ed = 0;
    }
    if (this.ex != this.x || this.ey != this.y) {
      this.ed += delta;
      if (this.ed > this.em) {
        this.x = this.ex;
        this.y = this.ey;
      } else {
        var giulietta = this.fun(this.ed / this.em);
        this.x = this.sx + (this.ex - this.sx) * giulietta;
        this.y = this.sy + (this.ey - this.sy) * giulietta;
      }
    }
  };
  this.ed = shahzeb, this.em = kadriana, this.sx = bryttnii, this.sy = deyanna, this.x = tomicka, this.y = houghton, this.ex = taonna, this.ey = icon, this.ease = function (trystal) {
    if (trystal.x != this.ex || trystal.y != this.ey) {
      this.ex = trystal.x;
      this.ey = trystal.y;
      this.sx = this.x;
      this.sy = this.y;
      this.ed = 0;
    }
    if (this.ex != this.x || this.ey != this.y) {
      this.ed += delta;
      if (this.ed > this.em) {
        this.x = this.ex;
        this.y = this.ey;
      } else {
        var narges = this.fun(this.ed / this.em);
        this.x = this.sx + (this.ex - this.sx) * narges;
        this.y = this.sy + (this.ey - this.sy) * narges;
      }
    }
  };
}, generate_token: function (shira) {
  var zineb = "";
  for (var jurian = 0; jurian < shira; jurian++) {
    zineb += String.fromCharCode(48 + Math.floor(Math.random() * 74));
  }
  return zineb;
}, gup: function (latarus, alexendria) {
  if (!alexendria) {
    alexendria = location.href;
  }
  latarus = latarus.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  var amelya = "[\\?&]" + latarus + "=([^&#]*)";
  var prish = new RegExp(amelya);
  var manuella = prish.exec(alexendria);
  return manuella == null ? null : manuella[1];
}, inside_box: function (matao, derek) {
  if (matao.x >= derek.x && matao.x <= derek.x + derek.w && matao.y >= derek.y && matao.y <= derek.y + derek.h) {
    return true;
  }
  return false;
}, intersect_aabb: function (kjerstin, larod, dilreet, yeremi, albia, vardaman, beaufort, nanor) {
  if (Math.max(kjerstin, albia) < Math.min(larod, vardaman) && Math.max(dilreet, beaufort) < Math.min(yeremi, nanor)) {
    return 1;
  }
  return 0;
}, lerp: function (pollie, taurence, markjoseph) {
  return (1 - markjoseph) * pollie + markjoseph * taurence;
}, escape_html: function (elliana) {
  return elliana.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}};
Math.sign = Math.sign || function (shandi) {
  if (shandi === 0) {
    return 0;
  } else {
    if (shandi > 0) {
      return 1;
    } else {
      return -1;
    }
  }
};
Math.log10 = Math.log10 || function (leshell) {
  return Math.log(leshell) / Math.LOG10;
};
(function (monya) {
  var caely = false;
  typeof define === "function" && define.amd && (define(monya), caely = true);
  typeof exports === "object" && (module.exports = monya(), caely = true);
  if (!caely) {
    var kailye = window.Cookies, annas = window.Cookies = monya();
    annas.noConflict = function () {
      return window.Cookies = kailye, annas;
    };
  }
}(function () {
  function mikelle() {
    var syven = 0, keiven = {_0x3b0a61: angeliqu[jezebelle]};
    for (; syven < arguments.length; syven++) {
      var angeliqu = arguments[syven];
      for (var jezebelle in angeliqu) {}
    }
    return keiven;
  }
  function naveh(kalyann) {
    function kiani(lianette, jaterious, maydell) {
      var jazmin;
      if (typeof document === "undefined") {
        return;
      }
      if (arguments.length > 1) {
        maydell = mikelle({path: "/"}, kiani.defaults, maydell);
        if (typeof maydell.expires === "number") {
          var lacreasha = new Date;
          lacreasha.setMilliseconds(lacreasha.getMilliseconds() + maydell.expires * 864e5);
          maydell.expires = lacreasha;
        }
        try {
          jazmin = JSON.stringify(jaterious);
          /^[\{\[]/.test(jazmin) && (jaterious = jazmin);
        } catch (khiryn) {}
        !kalyann.write ? jaterious = encodeURIComponent(String(jaterious)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent) : jaterious = kalyann.write(jaterious, lianette);
        lianette = encodeURIComponent(String(lianette));
        lianette = lianette.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
        lianette = lianette.replace(/[\(\)]/g, escape);
        return document.cookie = [lianette, "=", jaterious, maydell.expires ? "; expires=" + maydell.expires.toUTCString() : "", maydell.path ? "; path=" + maydell.path : "", maydell.domain ? "; domain=" + maydell.domain : "", maydell.secure ? "; secure" : ""].join("");
      }
      !lianette && (jazmin = {});
      var wigberto = document.cookie ? document.cookie.split("; ") : [], vershon = 0;
      for (; vershon < wigberto.length; vershon++) {
        var dresha = wigberto[vershon].split("="), ryshon = dresha.slice(1).join("=");
        ryshon.charAt(0) === '"' && (ryshon = ryshon.slice(1, -1));
        try {
          var devunte = dresha[0].replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
          ryshon = kalyann.read ? kalyann.read(ryshon, devunte) : kalyann(ryshon, devunte) || ryshon.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
          if (this.json) {
            try {
              ryshon = JSON.parse(ryshon);
            } catch (tavoris) {}
          }
          if (lianette === devunte) {
            jazmin = ryshon;
            break;
          }
          !lianette && (jazmin[devunte] = ryshon);
        } catch (tarek) {}
      }
      return jazmin;
    }
    return kiani.set = kiani, kiani.get = function (jasreen) {
      return kiani.call(kiani, jasreen);
    }, kiani.getJSON = function () {
      return kiani.apply({json: true}, [].slice.call(arguments));
    }, kiani.defaults = {}, kiani.remove = function (khanye, haithem) {
      kiani(khanye, "", mikelle(haithem, {expires: -1}));
    }, kiani.withConverter = naveh, kiani;
  }
  return naveh(function () {});
}));
function Mouse() {
  this.DOWN = 0;
  this.UP = 1;
  this.IDLE = 2;
  this.IN = 0;
  this.OUT = 1;
  this.pos = {x: 0, y: 0};
  this.x_old = 0;
  this.y_old = 0;
  this.angle = 0;
  this.state = this.IDLE;
  this.dist = this.IN;
  this.down = function () {
    this.state = this.DOWN;
  };
  this.up = function () {
    this.state = this.UP;
  };
  this.update = function () {
    if (this.pos.x != this.x_old || this.pos.y != this.y_old) {
      return this.x_old = this.pos.x, this.y_old = this.pos.y, true;
    }
    return false;
  };
}
function Keyboard() {
  this.set_azerty = function () {
    this.LEFT = 81;
    this.RIGHT = 68;
    this.TOP = 90;
    this.DOWN = 83;
  };
  this.set_qwerty = function () {
    this.LEFT = 65;
    this.RIGHT = 68;
    this.TOP = 87;
    this.BOTTOM = 83;
  };
  this.UP = 0;
  this.DOWN = 1;
  this._1 = 49;
  this._2 = 50;
  this._3 = 51;
  this._4 = 52;
  this._5 = 53;
  this.CTRL = 17;
  this.ARROW_LEFT = 37;
  this.ARROW_RIGHT = 39;
  this.ARROW_TOP = 38;
  this.ARROW_BOTTOM = 40;
  this.SPACE = 32;
  this.R = 82;
  this.G = 71;
  this.V = 86;
  this.B = 66;
  this.set_qwerty();
  this.keys = new Array(255);
  for (var henrene = 0; henrene < 255; henrene++) {
    this.keys[henrene] = this.UP;
  }
  this.up = function (miakayla) {
    var emariah = Math.min(miakayla.charCode || miakayla.keyCode, 255);
    this.keys[emariah] = this.UP;
  };
  this.down = function (aaja) {
    var ruhaan = Math.min(aaja.charCode || aaja.keyCode, 255);
    if (ruhaan == this.LEFT || ruhaan == this.ARROW_LEFT) {
      this.press_left();
    } else {
      if (ruhaan == this.TOP || ruhaan == this.ARROW_TOP) {
        this.press_top();
      } else {
        if (ruhaan == this.DOWN || ruhaan == this.ARROW_DOWN) {
          this.press_bottom();
        } else {
          if (ruhaan == this.RIGHT || ruhaan == this.ARROW_RIGHT) {
            this.press_right();
          }
        }
      }
    }
    return this.keys[ruhaan] = this.DOWN, ruhaan;
  };
  this.press_left = function () {
    this.keys[this.RIGHT] = this.UP;
    this.keys[this.ARROW_RIGHT] = this.UP;
  };
  this.press_right = function () {
    this.keys[this.LEFT] = this.UP;
    this.keys[this.ARROW_LEFT] = this.UP;
  };
  this.press_bottom = function () {
    this.keys[this.TOP] = this.UP;
    this.keys[this.ARROW_TOP] = this.UP;
  };
  this.press_top = function () {
    this.keys[this.BOTTOM] = this.UP;
    this.keys[this.ARROW_BOTTOM] = this.UP;
  };
  this.clear_directionnal = function () {
    this.keys[this.RIGHT] = this.UP;
    this.keys[this.ARROW_RIGHT] = this.UP;
    this.keys[this.LEFT] = this.UP;
    this.keys[this.ARROW_LEFT] = this.UP;
    this.keys[this.TOP] = this.UP;
    this.keys[this.ARROW_TOP] = this.UP;
    this.keys[this.BOTTOM] = this.UP;
    this.keys[this.ARROW_BOTTOM] = this.UP;
  };
  this.is_left = function () {
    return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT];
  };
  this.is_right = function () {
    return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT];
  };
  this.is_top = function () {
    return this.keys[this.TOP] || this.keys[this.ARROW_TOP];
  };
  this.is_bottom = function () {
    return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM];
  };
  this.is_ctrl = function () {
    return this.keys[this.CTRL];
  };
  this.is_1 = function () {
    return this.keys[this._1];
  };
  this.is_2 = function () {
    return this.keys[this._2];
  };
  this.is_3 = function () {
    return this.keys[this._3];
  };
  this.is_4 = function () {
    return this.keys[this._4];
  };
  this.is_space = function () {
    return this.keys[this.SPACE];
  };
  this.is_r = function () {
    return this.keys[this.R];
  };
  this.is_g = function () {
    return this.keys[this.G];
  };
  this.is_v = function () {
    return this.keys[this.V];
  };
  this.is_b = function () {
    return this.keys[this.B];
  };
}
var can = document.getElementById("game_canvas"), ctx = can.getContext("2d"), canw = can.width, canh = can.height, canw2 = can.width / 2, canh2 = can.height / 2, canm = {x: canw2, y: canh2}, scale = 1, ratio = 1, ratio_opt = -1, JUNK10, JUNK8 = "J" + JUNK3, JUNK6 = "S" + JUNK4, WINDOW1 = window, JUNK4, JSONWORD2, JUNK1 = "O", JUNK2 = JUNK1 + "N", JSONWORD1 = "O", JSONWORD12 = 0, JUNK3, WINDOW2 = WINDOW1, JUNK4, JSONWORD3, JUNK6 = "N", JUNK7 = "J", JUNK1 = "O" + JUNK3, JUNK8, WINDOW3 = WINDOW2, JUNK9, JUNK10, JSONWORD4, JUNK5, JUNK4, JUNK3, WINDOW4 = WINDOW3, JUNK2 = "N" + JUNK5, JUNK2, WINDOW5 = WINDOW4, JSONWORD5, JUNK1, JUNK10, JUNK9 = "", JSONWORD6, WINDOW6 = WINDOW5, JSONWORD7, JUNK4, JUNK3, WINDOW7 = WINDOW6, JUNK1, JSONWORD8, JUNK8, WINDOW8 = WINDOW7, JUNK7 = "O", JUNK10 = "J", JUNK6, JSONWORD9, JUNK10, WINDOW8 = WINDOW7, JSONWORD9 = "S", WINDOW9 = WINDOW8, JUNK5, JSONWORD10, WINDOW10 = WINDOW9, JUNK4 = JUNK10 + JSONWORD9;
can.oncontextmenu = function () {
  return false;
};
JUNK8 = JUNK10;
JUNK9 = JUNK8;
function CTI(tenneson) {
  var doyel = new Image;
  doyel.src = tenneson.toDataURL("image/png");
  doyel.width = tenneson.width;
  doyel.height = tenneson.height;
  doyel.isLoaded = 1;
  return doyel;
}
JUNK8 = JUNK6;
JUNK7 = JUNK7 + JUNK8;
JSONWORD1 = JUNK4 + JUNK7;
JSONWORD2 = JSONWORD1;
JUNK1 = JUNK2;
JSONWORD3 = JSONWORD2;
JUNK2 = JUNK3;
JUNK3 = JUNK4;
JSONWORD5 = JUNK4 + JUNK7;
JUNK3 = JUNK4;
JUNK1 = JUNK4;
JSONWORD4 = JSONWORD5;
JUNK6 = JUNK7 + JUNK8;
JSONWORD6 = JSONWORD2;
JUNK1 = JUNK4 + JUNK7;
JSONWORD7 = JSONWORD1;
JUNK2 = JUNK4 + JUNK7;
JSONWORD8 = JSONWORD3;
JUNK7 = JUNK3;
JSONWORD9 = JSONWORD1;
JSONWORD10 = JSONWORD2;
JUNK8 = JUNK1;
var devicePixelRatio = window.devicePixelRatio || 1, backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
function resize_canvas() {
  can.width != window.innerWidth && (can.width = window.innerWidth, canw = can.width, canw2 = can.width / 2);
  can.height != window.innerHeight && (can.height = window.innerHeight, canh = can.height, canh2 = can.height / 2);
  canm = {x: canw2, y: canh2};
  var lincey = can.width;
  var deontaye = can.height;
  if (ratio_opt === -1) {
    ratio = devicePixelRatio / backingStoreRatio;
  } else {
    ratio = ratio_opt;
  }
  can.width = lincey * ratio;
  can.height = deontaye * ratio;
  can.style.width = lincey + "px";
  can.style.height = deontaye + "px";
  ctx.scale(ratio, ratio);
  user && (user.cam.rw = lincey, user.cam.rh = deontaye);
  if (loader.is_run) {
    loader.update();
  } else {
    if (ui.is_run) {
      ui.update();
    } else {
      if (game.is_run) {
        game.update();
      } else {
        if (scoreboard.is_run) {
          scoreboard.update();
        }
      }
    }
  }
}
var game_body = document.getElementById("game_body");
game_body.ondragstart = function () {
  return false;
};
game_body.ondrop = function () {
  return false;
};
game_body.onresize = resize_canvas;
(function () {
  var marlay = 0;
  var herculano = ["ms", "moz", "webkit", "o"];
  for (var kellyann = 0; kellyann < herculano.length && !window.requestAnimationFrame; ++kellyann) {
    window.requestAnimationFrame = window[herculano[kellyann] + "RequestAnimationFrame"];
    window.cancelAnimationFrame = window[herculano[kellyann] + "CancelAnimationFrame"] || window[herculano[kellyann] + "CancelRequestAnimationFrame"];
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function (cabel, jeromey) {
      var jeimi = (new Date).getTime();
      var tamie = Math.max(0, 16 - (jeimi - marlay));
      var sable = window.setTimeout(function () {
        cabel(jeimi + tamie);
      }, tamie);
      marlay = jeimi + tamie;
      return sable;
    };
  }
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function (joyia) {
      clearTimeout(joyia);
    };
  }
}());
var lang = navigator.language || navigator.userLanguage, timezone = -((new Date).getTimezoneOffset() / 60), TZ_EU = "Europe", TZ_RU = "Russia", TZ_NA = "North America", TZ_SA = "South America", TZ_WA = "West America", TZ_AS = "Asia", TZ_AU = "Australia", TZ = TZ_EU;
if (timezone >= -2 && timezone <= 2) {
  TZ = TZ_EU;
} else {
  if (timezone > 2 && timezone <= 5) {
    TZ = TZ_RU;
  } else {
    if (timezone > 5 && timezone <= 9) {
      TZ = TZ_AS;
    } else {
      if (timezone > 9) {
        TZ = TZ_AU;
      } else {
        if (timezone >= -5 && timezone < -2) {
          if (lang === "pt-BR" || lang === "pt-br" || lang === "pt" || lang === "pt-pt") {
            TZ = TZ_SA;
          } else {
            TZ = TZ_NA;
          }
        } else {
          if (timezone < -5) {
            if (lang === "pt-BR" || lang === "pt-br" || lang === "pt" || lang === "pt-pt") {
              TZ = TZ_SA;
            } else {
              TZ = TZ_WA;
            }
          }
        }
      }
    }
  }
}
var RNG = function () {
  function baisley(easten) {
    var kiante = easten ? easten : Math.floor(Math.random() * 2147483647);
    this.init = function (samma) {
      kiante = samma ? samma : Math.floor(Math.random() * 2147483647);
    };
    this.get = function () {
      return kiante = (1103515245 * kiante + 12345) % 2147483648, kiante / 2147483648;
    };
  }
  return {Random: baisley};
}(), ___MAP___ = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]], COUNTER = 0, SPRITE = {GROUND: ["#133A2B", "#042b30"], SNOW_GROUND: ["#EBF2F0", "#136167"], CRAFT_LOADING: ["#4EB687", "#187484"], BROWN_LIFE: ["#664516", "#13474C"], SAND_COLOR: ["#FCEFBB", "#0F4D48"], SAND_SHOVEL_CO: ["#C1AA7E", "#0F423D"], GRD_SHOVEL_CO: ["#594837", "#163A3A"], ICE_SHOVEL_CO: ["#A5D6D6", "#539CA0"], WATER_3_COLOR: ["#0B6A84", "#09373F"], WATER_2_COLOR: ["#2A8B9B", "#0F464C"], WATER_1_COLOR: ["#A9D6D3", "#115E60"], FLOAM_COLOR: ["#ECF7F9", "#539CA0"], WEAPON_LOADING: ["#FFF", "#FFF"], HELMET_LOADING: ["#FFF", "#FFF"], SWIM_COLOR: ["#1C9BA4", "#00272F"], LAVA_GROUND: ["#2D2017", "#031C1E"], DAY: 0, NIGHT: 1, DRAGON_DEN_X: 2300, DRAGON_DEN_Y: 2290, FLAKES_NUMBER: 34, FLAKES_SIZES: 5, SAND_NUMBER: 68, ASHES_NUMBER: 34, ASHES_SIZES: 5, SMOG: 1, SMOG_PUSH: .6, SMOG_SPEED: .25, STEP_SPACE: 50, TRAIL_SPACE: 10, SWIM_SPACE: 75, GHOST_BUBBLES: 20, BUBBLES_SIZES: 5, SWORD: COUNTER++, PICK: COUNTER++, FUR: COUNTER++, PICK_GOLD: COUNTER++, PICK_DIAMOND: COUNTER++, SWORD_GOLD: COUNTER++, SWORD_DIAMOND: COUNTER++, HAND: COUNTER++, PICK_WOOD: COUNTER++, PIRATE_SWORD: COUNTER++, EARMUFFS: COUNTER++, COAT: COUNTER++, WOOD_SPEAR: COUNTER++, SPEAR: COUNTER++, GOLD_SPEAR: COUNTER++, DIAMOND_SPEAR: COUNTER++, DRAGON_SPEAR: COUNTER++, LAVA_SPEAR: COUNTER++, CRAB_SPEAR: COUNTER++, REIDITE_SWORD: COUNTER++, DIAMOND_PROTECTION: COUNTER++, AMETHYST_PROTECTION: COUNTER++, REIDITE_PROTECTION: COUNTER++, EXPLORER_HAT: COUNTER++, PIRATE_HAT: COUNTER++, STONE_HELMET: COUNTER++, GOLD_HELMET: COUNTER++, DIAMOND_HELMET: COUNTER++, BOOK: COUNTER++, BAG: COUNTER++, SWORD_AMETHYST: COUNTER++, PICK_AMETHYST: COUNTER++, PICK_REIDITE: COUNTER++, AMETHYST_SPEAR: COUNTER++, REIDITE_SPEAR: COUNTER++, HAMMER: COUNTER++, HAMMER_GOLD: COUNTER++, HAMMER_DIAMOND: COUNTER++, HAMMER_AMETHYST: COUNTER++, HAMMER_REIDITE: COUNTER++, CAP_SCARF: COUNTER++, CHRISTMAS_HAT: COUNTER++, ELF_HAT: COUNTER++, AMETHYST_HELMET: COUNTER++, REIDITE_HELMET: COUNTER++, SUPER_HAMMER: COUNTER++, SHOVEL: COUNTER++, SUPER_DIVING_SUIT: COUNTER++, DIVING_MASK: COUNTER++, WATERING_CAN_FULL: COUNTER++, SHOVEL_GOLD: COUNTER++, SHOVEL_DIAMOND: COUNTER++, SHOVEL_AMETHYST: COUNTER++, PITCHFORK: COUNTER++, PITCHFORK2: COUNTER++, SPANNER: COUNTER++, MACHETE: COUNTER++, SWORD_WOOD: COUNTER++, WOOD_HELMET: COUNTER++, DRAGON_HELMET: COUNTER++, LAVA_HELMET: COUNTER++, CROWN_CRAB: COUNTER++, DRAGON_SWORD: COUNTER++, LAVA_SWORD: COUNTER++, WOOD_BOW: COUNTER++, STONE_BOW: COUNTER++, GOLD_BOW: COUNTER++, DIAMOND_BOW: COUNTER++, AMETHYST_BOW: COUNTER++, REIDITE_BOW: COUNTER++, DRAGON_BOW: COUNTER++, WOOD_SHIELD: COUNTER++, STONE_SHIELD: COUNTER++, GOLD_SHIELD: COUNTER++, DIAMOND_SHIELD: COUNTER++, AMETHYST_SHIELD: COUNTER++, REIDITE_SHIELD: COUNTER++, CROWN_GREEN: COUNTER++, CROWN_ORANGE: COUNTER++, CROWN_BLUE: COUNTER++, TURBAN1: COUNTER++, TURBAN2: COUNTER++, PILOT_HELMET: COUNTER++, HOOD: COUNTER++, PEASANT: COUNTER++, WINTER_HOOD: COUNTER++, WINTER_PEASANT: COUNTER++, FLOWER_HAT: COUNTER++, FUR_HAT: COUNTER++, SADDLE: COUNTER++, WITCH: COUNTER++, NIMBUS: COUNTER++, WAND1: COUNTER++, WAND2: COUNTER++, FIREFLY_ITEM: COUNTER++, WOOD_ARROW: COUNTER++, STONE_ARROW: COUNTER++, GOLD_ARROW: COUNTER++, DIAMOND_ARROW: COUNTER++, AMETHYST_ARROW: COUNTER++, REIDITE_ARROW: COUNTER++, DRAGON_ARROW: COUNTER++, STONES: COUNTER++, TREE: COUNTER++, PLANT: COUNTER++, GOLD: COUNTER++, DIAMOND: COUNTER++, WOOD_FIRE: COUNTER++, WORKBENCH: COUNTER++, PLANT_SEED: COUNTER++, MEAT: COUNTER++, COOKED_MEAT: COUNTER++, BIG_FIRE_WOOD: COUNTER++, FURNACE_OFF: COUNTER++, PAPER: COUNTER++, AMETHYST: COUNTER++, AMETHYST_WALL: COUNTER++, AMETHYST_SPIKE: COUNTER++, DOOR_AMETHYST_CLOSE: COUNTER++, BRIDGE: COUNTER++, SAND: COUNTER++, BOTTLE_FULL: COUNTER++, BOTTLE_EMPTY: COUNTER++, KRAKEN_SKIN: COUNTER++, WATERING_CAN: COUNTER++, FLOUR: COUNTER++, WHEAT_SEED: COUNTER++, COOKIE: COUNTER++, WILD_WHEAT: COUNTER++, WINDMILL: COUNTER++, CAKE: COUNTER++, FOODFISH: COUNTER++, FOODFISH_COOKED: COUNTER++, SCALES: COUNTER++, INV_GROUND: COUNTER++, PLOT: COUNTER++, INV_ICE: COUNTER++, INV_BREAD: COUNTER++, BREAD_OVEN_OFF: COUNTER++, INV_SANDWICH: COUNTER++, FUR_WINTER: COUNTER++, BLUE_CORD: COUNTER++, LOCK: COUNTER++, DRAGON_HEART: COUNTER++, LAVA_HEART: COUNTER++, RESURRECTION: COUNTER++, EMERALD_MACHINE: COUNTER++, EXTRACTOR_MACHINE_STONE: COUNTER++, EXTRACTOR_MACHINE_GOLD: COUNTER++, EXTRACTOR_MACHINE_DIAMOND: COUNTER++, EXTRACTOR_MACHINE_AMETHYST: COUNTER++, EXTRACTOR_MACHINE_REIDITE: COUNTER++, LOCKPICK: COUNTER++, TOTEM: COUNTER++, SPIKE: COUNTER++, CORD: COUNTER++, WALL: COUNTER++, STONE_WALL: COUNTER++, GOLD_WALL: COUNTER++, DIAMOND_WALL: COUNTER++, DOOR_WOOD_CLOSE: COUNTER++, CHEST: COUNTER++, STONE_SPIKE: COUNTER++, GOLD_SPIKE: COUNTER++, DIAMOND_SPIKE: COUNTER++, DOOR_STONE_CLOSE: COUNTER++, DOOR_GOLD_CLOSE: COUNTER++, DOOR_DIAMOND_CLOSE: COUNTER++, FUR_WOLF: COUNTER++, INV_GEMME_BLUE: COUNTER++, INV_GEMME_GREEN: COUNTER++, INV_GEMME_ORANGE: COUNTER++, INV_SPECIAL_FUR: COUNTER++, INV_SPECIAL_FUR_2: COUNTER++, INV_BUCKET_FULL: COUNTER++, INV_BUCKET_EMPTY: COUNTER++, WELL_EMPTY: COUNTER++, SIGN: COUNTER++, DRAGON_CUBE: COUNTER++, DRAGON_ORB: COUNTER++, LAVA_CUBE: COUNTER++, LAVA_ORB: COUNTER++, PLANT_PUMPKIN: COUNTER++, PUMPKIN: COUNTER++, ROOF: COUNTER++, PLANT_GARLIC: COUNTER++, GARLIC: COUNTER++, PLANT_THORNBUSH: COUNTER++, THORNBUSH: COUNTER++, BANDAGE: COUNTER++, INV_CRAB_STICK: COUNTER++, INV_CRAB_LOOT: COUNTER++, BED: COUNTER++, SUGAR_CAN: COUNTER++, INV_CANDY: COUNTER++, GARLAND: COUNTER++, REIDITE: COUNTER++, MAGMA: COUNTER++, PLANT_CARROT: COUNTER++, CARROT: COUNTER++, PLANT_TOMATO: COUNTER++, TOMATO: COUNTER++, PLANT_WATERMELON: COUNTER++, WATERMELON: COUNTER++, PLANT_ALOE_VERA: COUNTER++, ALOE_VERA_GROWN: COUNTER++, WOOD_DOOR_SPIKE: COUNTER++, STONE_DOOR_SPIKE: COUNTER++, GOLD_DOOR_SPIKE: COUNTER++, DIAMOND_DOOR_SPIKE: COUNTER++, AMETHYST_DOOR_SPIKE: COUNTER++, REIDITE_WALL: COUNTER++, REIDITE_DOOR: COUNTER++, REIDITE_SPIKE: COUNTER++, REIDITE_DOOR_SPIKE: COUNTER++, WOOD_TOWER: COUNTER++, PENGUIN_FEATHER: COUNTER++, BOAT: COUNTER++, SLED: COUNTER++, BOAT_WAVE: COUNTER++, SLED_WAVE: COUNTER++, MOUNT_BOAR: COUNTER++, BOAR_STEP: COUNTER++, CRAB_STICK: COUNTER++, CRAB_LOOT: COUNTER++, CRAB_BOSS: COUNTER++, BABY_DRAGON: COUNTER++, BABY_LAVA: COUNTER++, CRAB_STEP: COUNTER++, HAWK: COUNTER++, PLANE: COUNTER++, HAWK_FEATHER: COUNTER++, VULTURE: COUNTER++, ALOE_VERA: COUNTER++, VULTURE_FEATHER: COUNTER++, EMERALD: COUNTER++, FUR_BOAR: COUNTER++, DECORATION: COUNTER++, FOD: COUNTER++, FIREFLY: COUNTER++, HURT_FIREFLY: COUNTER++, SPELL: COUNTER++, BABY_MAMMOTH: COUNTER++, BABY_MAMMOTH_STEP: COUNTER++, CRATE: COUNTER++, SEED: COUNTER++, INV_DRAGON_ORB: COUNTER++, INV_LAVA_ORB: COUNTER++, CRAFT_SWORD: COUNTER++, BODY: COUNTER++, CRAFT_PICK: COUNTER++, CRAFT_PICK_DIAMOND: COUNTER++, INV_PICK_GOLD: COUNTER++, MINIMAP: COUNTER++, SPIDER: COUNTER++, INV_SWORD: COUNTER++, CRAFT_WORK: COUNTER++, CRAFT_STONE_WALL: COUNTER++, RABBIT: COUNTER++, CRAFT_GOLD_WALL: COUNTER++, WEB: COUNTER++, GAUGES: COUNTER++, CRAFT_DOOR_WOOD_CLOSE: COUNTER++, CHEST_PLANT: COUNTER++, CHEST_GOLD: COUNTER++, CHEST_DIAMOND: COUNTER++, CHEST_PICK_GOLD: COUNTER++, CHEST_FIRE: COUNTER++, CHEST_PICK_WOOD: COUNTER++, CHEST_MEAT: COUNTER++, CHEST_BIG_FIRE: COUNTER++, INV_PLANT: COUNTER++, LEADERBOARD: COUNTER++, HURT: COUNTER++, COLD: COUNTER++, HUNGER: COUNTER++, GROUND_FIRE: COUNTER++, COUNTER: COUNTER++, CRAFT_SEED: COUNTER++, HERB: COUNTER++, HAND_SHADOW: COUNTER++, PLANT_MINI: COUNTER++, FIRE: COUNTER++, HALO_FIRE: COUNTER++, CRAFT_SWORD_GOLD: COUNTER++, CRAFT_SWORD_DIAMOND: COUNTER++, INV_SWORD_GOLD: COUNTER++, INV_SWORD_DIAMOND: COUNTER++, FRUIT: COUNTER++, CRAFT_PICK_GOLD: COUNTER++, INV_PICK_DIAMOND: COUNTER++, INV_GOLD: COUNTER++, INV_DIAMOND: COUNTER++, WOLF: COUNTER++, INV_MEAT: COUNTER++, GEAR2: COUNTER++, CRAFT_FIRE: COUNTER++, INV_BANDAGE: COUNTER++, CRAFT_BANDAGE: COUNTER++, INV_CORD: COUNTER++, YOUR_SCORE: COUNTER++, TREE_BRANCH: COUNTER++, HEAL: COUNTER++, INV_FIRE: COUNTER++, INV_WORK: COUNTER++, INV_SEED: COUNTER++, INV_PICK: COUNTER++, INV_PICK_WOOD: COUNTER++, CRAFT_PICK_WOOD: COUNTER++, INV_STONE: COUNTER++, INV_WOOD: COUNTER++, INV_WALL: COUNTER++, CRAFT_WALL: COUNTER++, INV_SPIKE: COUNTER++, CRAFT_SPIKE: COUNTER++, WHEAT_MOB: COUNTER++, HURT_RABBIT: COUNTER++, INV_COOKED_MEAT: COUNTER++, GEAR: COUNTER++, CRAFT_COOKED_MEAT: COUNTER++, HURT_WOLF: COUNTER++, CRAFT_BIG_FIRE: COUNTER++, INV_BIG_FIRE: COUNTER++, INV_STONE_WALL: COUNTER++, INV_GOLD_WALL: COUNTER++, INV_DIAMOND_WALL: COUNTER++, CRAFT_DIAMOND_WALL: COUNTER++, HURT_SPIDER: COUNTER++, EMPTY_SLOT: COUNTER++, INV_DOOR_WOOD_CLOSE: COUNTER++, DOOR_WOOD_OPEN: COUNTER++, INV_CHEST: COUNTER++, CRAFT_CHEST: COUNTER++, CHEST_SLOT: COUNTER++, CHEST_SWORD: COUNTER++, CHEST_PICK: COUNTER++, CHEST_STONE: COUNTER++, CHEST_WOOD: COUNTER++, CHEST_PICK_DIAMOND: COUNTER++, CHEST_SWORD_GOLD: COUNTER++, CHEST_SWORD_DIAMOND: COUNTER++, CHEST_WORK: COUNTER++, CHEST_SEED: COUNTER++, CHEST_WALL: COUNTER++, CHEST_SPIKE: COUNTER++, CHEST_COOKED_MEAT: COUNTER++, CHEST_BANDAGE: COUNTER++, CHEST_CORD: COUNTER++, CHEST_STONE_WALL: COUNTER++, CHEST_GOLD_WALL: COUNTER++, CHEST_DIAMOND_WALL: COUNTER++, CHEST_DOOR_WOOD_CLOSE: COUNTER++, CHEST_WORKBENCH: COUNTER++, CHEST_CHEST: COUNTER++, CRAFT_STONE_SPIKE: COUNTER++, INV_STONE_SPIKE: COUNTER++, INV_GOLD_SPIKE: COUNTER++, CRAFT_GOLD_SPIKE: COUNTER++, INV_DIAMOND_SPIKE: COUNTER++, CRAFT_DIAMOND_SPIKE: COUNTER++, CHEST_PLUS: COUNTER++, CRAFT_BAG: COUNTER++, INV_FUR: COUNTER++, INV_EARMUFFS: COUNTER++, CRAFT_EARMUFFS: COUNTER++, CRAFT_DOOR_STONE_CLOSE: COUNTER++, INV_DOOR_STONE_CLOSE: COUNTER++, DOOR_STONE_OPEN: COUNTER++, CRAFT_DOOR_GOLD_CLOSE: COUNTER++, INV_DOOR_GOLD_CLOSE: COUNTER++, DOOR_GOLD_OPEN: COUNTER++, CRAFT_DOOR_DIAMOND_CLOSE: COUNTER++, INV_DOOR_DIAMOND_CLOSE: COUNTER++, DOOR_DIAMOND_OPEN: COUNTER++, CRAFT_COAT: COUNTER++, INV_COAT: COUNTER++, CHEST_STONE_SPIKE: COUNTER++, CHEST_GOLD_SPIKE: COUNTER++, CHEST_DIAMOND_SPIKE: COUNTER++, CHEST_BAG: COUNTER++, CHEST_FUR: COUNTER++, CHEST_EARMUFFS: COUNTER++, CHEST_DOOR_STONE_CLOSE: COUNTER++, CHEST_DOOR_GOLD_CLOSE: COUNTER++, CHEST_DOOR_DIAMOND_CLOSE: COUNTER++, CHEST_COAT: COUNTER++, INV_BAG: COUNTER++, INV_FUR_WOLF: COUNTER++, CHEST_FUR_WOLF: COUNTER++, INV_SPEAR: COUNTER++, CRAFT_SPEAR: COUNTER++, CHEST_SPEAR: COUNTER++, INV_GOLD_SPEAR: COUNTER++, CRAFT_GOLD_SPEAR: COUNTER++, CHEST_GOLD_SPEAR: COUNTER++, INV_WOOD_SPEAR: COUNTER++, CRAFT_WOOD_SPEAR: COUNTER++, CHEST_WOOD_SPEAR: COUNTER++, INV_DIAMOND_SPEAR: COUNTER++, CRAFT_DIAMOND_SPEAR: COUNTER++, CHEST_DIAMOND_SPEAR: COUNTER++, FURNACE_ON: COUNTER++, INV_FURNACE: COUNTER++, CRAFT_FURNACE: COUNTER++, CHEST_FURNACE: COUNTER++, FURNACE_SLOT: COUNTER++, FURNACE_BUTTON: COUNTER++, FIR: COUNTER++, STONES_WINTER: COUNTER++, GOLD_WINTER: COUNTER++, DIAMOND_WINTER: COUNTER++, GROUND_FIRE_WINTER: COUNTER++, INV_AMETHYST: COUNTER++, FOX: COUNTER++, INV_EXPLORER_HAT: COUNTER++, CRAFT_EXPLORER_HAT: COUNTER++, CHEST_EXPLORER_HAT: COUNTER++, INV_PIRATE_HAT: COUNTER++, CRAFT_PIRATE_HAT: COUNTER++, CHEST_PIRATE_HAT: COUNTER++, INV_PILOT_HELMET: COUNTER++, CRAFT_PILOT_HELMET: COUNTER++, CHEST_PILOT_HELMET: COUNTER++, INV_STONE_HELMET: COUNTER++, CRAFT_STONE_HELMET: COUNTER++, CHEST_STONE_HELMET: COUNTER++, INV_GOLD_HELMET: COUNTER++, CRAFT_GOLD_HELMET: COUNTER++, CHEST_GOLD_HELMET: COUNTER++, INV_DIAMOND_HELMET: COUNTER++, CRAFT_DIAMOND_HELMET: COUNTER++, CHEST_DIAMOND_HELMET: COUNTER++, INV_BOOK: COUNTER++, CRAFT_BOOK: COUNTER++, CHEST_BOOK: COUNTER++, INV_PAPER: COUNTER++, CRAFT_PAPER: COUNTER++, CHEST_PAPER: COUNTER++, HERB_WINTER: COUNTER++, BEAR: COUNTER++, CHEST_AMETHYST: COUNTER++, SNOW: COUNTER++, DRAGON_GROUND: COUNTER++, DRAGON: COUNTER++, LAVA_DRAGON: COUNTER++, WING_LEFT: COUNTER++, WING_RIGHT: COUNTER++, LAVA_WING_LEFT: COUNTER++, LAVA_WING_RIGHT: COUNTER++, INV_SWORD_AMETHYST: COUNTER++, CRAFT_SWORD_AMETHYST: COUNTER++, CHEST_SWORD_AMETHYST: COUNTER++, INV_PICK_AMETHYST: COUNTER++, CHEST_PICK_AMETHYST: COUNTER++, CRAFT_PICK_AMETHYST: COUNTER++, HURT_FOX: COUNTER++, HURT_BEAR: COUNTER++, HURT_DRAGON: COUNTER++, HURT_LAVA_DRAGON: COUNTER++, SLOT_NUMBER: COUNTER++, HURT_WING_LEFT: COUNTER++, HURT_WING_RIGHT: COUNTER++, HURT_LAVA_WING_LEFT: COUNTER++, HURT_LAVA_WING_RIGHT: COUNTER++, FLAKES: COUNTER++, DESERT: COUNTER++, INV_AMETHYST_SPEAR: COUNTER++, CRAFT_AMETHYST_SPEAR: COUNTER++, CHEST_AMETHYST_SPEAR: COUNTER++, SNOW_STEP: COUNTER++, LAVA_STEP: COUNTER++, INV_HAMMER: COUNTER++, CRAFT_HAMMER: COUNTER++, CHEST_HAMMER: COUNTER++, INV_HAMMER_GOLD: COUNTER++, CRAFT_HAMMER_GOLD: COUNTER++, CHEST_HAMMER_GOLD: COUNTER++, INV_HAMMER_DIAMOND: COUNTER++, CRAFT_HAMMER_DIAMOND: COUNTER++, CHEST_HAMMER_DIAMOND: COUNTER++, INV_HAMMER_AMETHYST: COUNTER++, CRAFT_HAMMER_AMETHYST: COUNTER++, CHEST_HAMMER_AMETHYST: COUNTER++, INV_HAMMER_REIDITE: COUNTER++, CRAFT_HAMMER_REIDITE: COUNTER++, CHEST_HAMMER_REIDITE: COUNTER++, INV_AMETHYST_WALL: COUNTER++, CRAFT_AMETHYST_WALL: COUNTER++, CHEST_AMETHYST_WALL: COUNTER++, INV_AMETHYST_SPIKE: COUNTER++, CRAFT_AMETHYST_SPIKE: COUNTER++, CHEST_AMETHYST_SPIKE: COUNTER++, CRAFT_DOOR_AMETHYST_CLOSE: COUNTER++, INV_DOOR_AMETHYST_CLOSE: COUNTER++, DOOR_AMETHYST_OPEN: COUNTER++, CHEST_DOOR_AMETHYST_CLOSE: COUNTER++, INV_CAP_SCARF: COUNTER++, CRAFT_CAP_SCARF: COUNTER++, CHEST_CAP_SCARF: COUNTER++, INV_FUR_WINTER: COUNTER++, CHEST_FUR_WINTER: COUNTER++, SLOT_NUMBER: COUNTER++, DOOR_WOOD_OPEN_WINTER: COUNTER++, DOOR_STONE_OPEN_WINTER: COUNTER++, DOOR_GOLD_OPEN_WINTER: COUNTER++, DOOR_DIAMOND_OPEN_WINTER: COUNTER++, DOOR_AMETHYST_OPEN_WINTER: COUNTER++, INV_BLUE_CORD: COUNTER++, CHEST_BLUE_CORD: COUNTER++, CRAFT_BLUE_CORD: COUNTER++, BIGMAP: COUNTER++, SHOW_SPECTATORS: COUNTER++, INV_LOCK: COUNTER++, CRAFT_LOCK: COUNTER++, CHEST_LOCK: COUNTER++, INV_DRAGON_HEART: COUNTER++, CHEST_DRAGON_HEART: COUNTER++, INV_LAVA_HEART: COUNTER++, CHEST_LAVA_HEART: COUNTER++, RECONNECT: COUNTER++, RESURRECTION_GROUND: COUNTER++, RESURRECTION_HOLE: COUNTER++, RESURRECTION_ROTATE: COUNTER++, INV_RESURRECTION: COUNTER++, CRAFT_RESURRECTION: COUNTER++, CHEST_RESURRECTION: COUNTER++, INV_LOCKPICK: COUNTER++, CRAFT_LOCKPICK: COUNTER++, CHEST_LOCKPICK: COUNTER++, KEY: COUNTER++, PADLOCK: COUNTER++, DELAY_WEAPON: COUNTER++, LOCKED: COUNTER++, PADLOCK_ON_CHEST: COUNTER++, BUBBLES: COUNTER++, INV_AMETHYST_HELMET: COUNTER++, CRAFT_AMETHYST_HELMET: COUNTER++, CHEST_AMETHYST_HELMET: COUNTER++, SPECIAL_ITEMS: COUNTER++, POINTS: COUNTER++, AUTO_FEED: COUNTER++, BANDAGE_ACTIVATED: COUNTER++, STOP_REGENERATION: COUNTER++, STOP_REGENERATION_BLIZZARD: COUNTER++, INV_SUPER_HAMMER: COUNTER++, CRAFT_SUPER_HAMMER: COUNTER++, CHEST_SUPER_HAMMER: COUNTER++, INV_TOTEM: COUNTER++, CHEST_TOTEM: COUNTER++, CRAFT_TOTEM: COUNTER++, TEAM_BUTTON: COUNTER++, MANAGE_TEAM_BUTTON: COUNTER++, ICON_MEMBER: COUNTER++, ICON_LEADER: COUNTER++, FULL_TEAM_BUTTON: COUNTER++, SHOW_TEAM_BUTTON: COUNTER++, DELAY_TEAM: COUNTER++, INV_DRAGON_SWORD: COUNTER++, CRAFT_DRAGON_SWORD: COUNTER++, CHEST_DRAGON_SWORD: COUNTER++, INV_LAVA_SWORD: COUNTER++, CRAFT_LAVA_SWORD: COUNTER++, CHEST_LAVA_SWORD: COUNTER++, INV_WOOD_BOW: COUNTER++, CRAFT_WOOD_BOW: COUNTER++, CHEST_WOOD_BOW: COUNTER++, INV_STONE_BOW: COUNTER++, CRAFT_STONE_BOW: COUNTER++, CHEST_STONE_BOW: COUNTER++, INV_GOLD_BOW: COUNTER++, CRAFT_GOLD_BOW: COUNTER++, CHEST_GOLD_BOW: COUNTER++, INV_DIAMOND_BOW: COUNTER++, CRAFT_DIAMOND_BOW: COUNTER++, CHEST_DIAMOND_BOW: COUNTER++, INV_AMETHYST_BOW: COUNTER++, CRAFT_AMETHYST_BOW: COUNTER++, CHEST_AMETHYST_BOW: COUNTER++, INV_REIDITE_BOW: COUNTER++, CRAFT_REIDITE_BOW: COUNTER++, CHEST_REIDITE_BOW: COUNTER++, INV_DRAGON_BOW: COUNTER++, CRAFT_DRAGON_BOW: COUNTER++, CHEST_DRAGON_BOW: COUNTER++, CHEST_DRAGON_ORB: COUNTER++, CHEST_LAVA_ORB: COUNTER++, SHOP: COUNTER++, CURSED_SWORD: COUNTER++, INV_CURSED_SWORD: COUNTER++, CRAFT_CURSED_SWORD: COUNTER++, CHEST_CURSED_SWORD: COUNTER++, ITEM1: COUNTER++, ITEM2: COUNTER++, ITEM3: COUNTER++, ITEM4: COUNTER++, SAND_BORDER: COUNTER++, SAND_STEP: COUNTER++, OCEAN: COUNTER++, CRAFT_BRIDGE: COUNTER++, INV_BRIDGE: COUNTER++, CHEST_BRIDGE: COUNTER++, LACK: COUNTER++, OXYGEN: COUNTER++, INV_SAND: COUNTER++, CHEST_SAND: COUNTER++, CRAFT_BOTTLE_EMPTY: COUNTER++, INV_BOTTLE_EMPTY: COUNTER++, INV_BOTTLE_FULL: COUNTER++, CHEST_BOTTLE_EMPTY: COUNTER++, CHEST_BOTTLE_FULL: COUNTER++, INV_SHOVEL: COUNTER++, CHEST_SHOVEL: COUNTER++, CRAFT_SHOVEL: COUNTER++, LAKE_DEEP: COUNTER++, LAKE: COUNTER++, LAKE_EDGE: COUNTER++, SHINGLE: COUNTER++, DRIED_PLANT: COUNTER++, INV_KRAKEN_SKIN: COUNTER++, CHEST_KRAKEN_SKIN: COUNTER++, INV_WATERING_CAN: COUNTER++, CRAFT_WATERING_CAN: COUNTER++, CHEST_WATERING_CAN: COUNTER++, INV_FLOUR: COUNTER++, CHEST_FLOUR: COUNTER++, INV_WHEAT_SEED: COUNTER++, CRAFT_WHEAT_SEED: COUNTER++, CHEST_WHEAT_SEED: COUNTER++, INV_COOKIE: COUNTER++, CRAFT_COOKIE: COUNTER++, CHEST_COOKIE: COUNTER++, KRAKEN: COUNTER++, DRIED_WHEAT: COUNTER++, INV_WILD_WHEAT: COUNTER++, CHEST_WILD_WHEAT: COUNTER++, WINDMILL_WINGS: COUNTER++, WINDMILL_HEAD: COUNTER++, CRAFT_WINDMILL: COUNTER++, INV_WINDMILL: COUNTER++, CHEST_WINDMILL: COUNTER++, INV_SUPER_DIVING_SUIT: COUNTER++, CRAFT_SUPER_DIVING_SUIT: COUNTER++, CHEST_SUPER_DIVING_SUIT: COUNTER++, INV_DIVING_MASK: COUNTER++, CRAFT_DIVING_MASK: COUNTER++, CHEST_DIVING_MASK: COUNTER++, INV_WATERING_CAN_FULL: COUNTER++, CHEST_WATERING_CAN_FULL: COUNTER++, CRAFT_WATERING_CAN_FULL: COUNTER++, WINDMILL_CASES: COUNTER++, EXTRACTOR_CASES: COUNTER++, WINDMILL_WHEAT_SEED: COUNTER++, WINDMILL_FLOUR: COUNTER++, INV_CAKE: COUNTER++, CRAFT_CAKE: COUNTER++, CHEST_CAKE: COUNTER++, INV_FOODFISH: COUNTER++, CHEST_FOODFISH: COUNTER++, INV_FOODFISH_COOKED: COUNTER++, CHEST_FOODFISH_COOKED: COUNTER++, CRAFT_FOODFISH_COOKED: COUNTER++, DELAY_DRINK: COUNTER++, WHEAT_SEED_DRIED: COUNTER++, HEART_SYMBOL_HUD: COUNTER++, COLD_SYMBOL_HUD: COUNTER++, FOOD_SYMBOL_HUD: COUNTER++, WATER_SYMBOL_HUD: COUNTER++, PIRANHA: COUNTER++, INV_SCALES: COUNTER++, CHEST_SCALES: COUNTER++, CAVE_STONES: COUNTER++, HERB_CAVE: COUNTER++, WATERBLOCK: COUNTER++, SHADOW_CAVE_STONES: COUNTER++, CAVE_STEP: COUNTER++, DELAY_SPIKE: COUNTER++, CHEST_GROUND: COUNTER++, CHEST_PLOT: COUNTER++, CRAFT_PLOT: COUNTER++, INV_PLOT: COUNTER++, CHEST_ICE: COUNTER++, HURT_KRAKEN: COUNTER++, HURT_PIRANHA: COUNTER++, CHEST_BREAD: COUNTER++, CRAFT_BREAD: COUNTER++, TREASURE_CHEST: COUNTER++, ISLAND: COUNTER++, PALM: COUNTER++, WAVE_ONE: COUNTER++, WAVE_TWO: COUNTER++, ISLAND_BLOCK: COUNTER++, HURT_TREASURE_CHEST: COUNTER++, ISLAND_STEP: COUNTER++, INV_SHOVEL_GOLD: COUNTER++, CRAFT_SHOVEL_GOLD: COUNTER++, CHEST_SHOVEL_GOLD: COUNTER++, INV_SHOVEL_DIAMOND: COUNTER++, CHEST_SHOVEL_DIAMOND: COUNTER++, CRAFT_SHOVEL_DIAMOND: COUNTER++, INV_SHOVEL_AMETHYST: COUNTER++, CRAFT_SHOVEL_AMETHYST: COUNTER++, CHEST_SHOVEL_AMETHYST: COUNTER++, RECIPE_BUTTON: COUNTER++, INV_SPANNER: COUNTER++, CHEST_SPANNER: COUNTER++, CRAFT_SPANNER: COUNTER++, INV_MACHETE: COUNTER++, CHEST_MACHETE: COUNTER++, CRAFT_MACHETE: COUNTER++, CRAFT_BOTTLE_FULL: COUNTER++, BREAD_OVEN_ON: COUNTER++, INV_BREAD_OVEN: COUNTER++, CRAFT_BREAD_OVEN: COUNTER++, CHEST_BREAD_OVEN: COUNTER++, BREAD_LIGHT_UP: COUNTER++, BREAD_LIGHT_DOWN: COUNTER++, BREAD_OVEN_UI: COUNTER++, BREAD_OVEN_WOOD: COUNTER++, BREAD_OVEN_BREAD: COUNTER++, CLOCK: COUNTER++, ARROW_CLOCK: COUNTER++, OPTION_BUTTON: COUNTER++, DEAD_BOX: COUNTER++, HURT_DEAD_BOX: COUNTER++, CRAFT_SANDWICH: COUNTER++, CHEST_SANDWICH: COUNTER++, INV_DRAGON_HELMET: COUNTER++, CHEST_DRAGON_HELMET: COUNTER++, CRAFT_DRAGON_HELMET: COUNTER++, INV_LAVA_HELMET: COUNTER++, CHEST_LAVA_HELMET: COUNTER++, CRAFT_LAVA_HELMET: COUNTER++, INV_WITCH: COUNTER++, CHEST_WITCH: COUNTER++, CRAFT_WITCH: COUNTER++, INV_NIMBUS: COUNTER++, CHEST_NIMBUS: COUNTER++, CRAFT_NIMBUS: COUNTER++, INV_WAND1: COUNTER++, CHEST_WAND1: COUNTER++, CRAFT_WAND1: COUNTER++, INV_WAND2: COUNTER++, CHEST_WAND2: COUNTER++, CRAFT_WAND2: COUNTER++, DRAGON_SWORD_HALO: COUNTER++, INV_DRAGON_CUBE: COUNTER++, CHEST_DRAGON_CUBE: COUNTER++, INV_LAVA_CUBE: COUNTER++, CHEST_LAVA_CUBE: COUNTER++, QUEST_BUTTON: COUNTER++, INV_CROWN_GREEN: COUNTER++, CHEST_CROWN_GREEN: COUNTER++, CRAFT_CROWN_GREEN: COUNTER++, CHEST_GEMME_GREEN: COUNTER++, INV_CROWN_ORANGE: COUNTER++, CHEST_CROWN_ORANGE: COUNTER++, CRAFT_CROWN_ORANGE: COUNTER++, CHEST_GEMME_ORANGE: COUNTER++, INV_CROWN_BLUE: COUNTER++, CHEST_CROWN_BLUE: COUNTER++, CHEST_GEMME_BLUE: COUNTER++, INV_HOOD: COUNTER++, CRAFT_HOOD: COUNTER++, CHEST_HOOD: COUNTER++, CRAFT_CROWN_BLUE: COUNTER++, INV_PEASANT: COUNTER++, CRAFT_PEASANT: COUNTER++, CHEST_PEASANT: COUNTER++, CHEST_SPECIAL_FUR: COUNTER++, CHEST_SPECIAL_FUR_2: COUNTER++, INV_WINTER_PEASANT: COUNTER++, CRAFT_WINTER_PEASANT: COUNTER++, CHEST_WINTER_PEASANT: COUNTER++, INV_WINTER_HOOD: COUNTER++, CRAFT_WINTER_HOOD: COUNTER++, CHEST_WINTER_HOOD: COUNTER++, SOUND_BUTTON_ON: COUNTER++, SOUND_BUTTON_OFF: COUNTER++, CRAFT_BUCKET_FULL: COUNTER++, CRAFT_BUCKET_EMPTY: COUNTER++, CHEST_BUCKET_FULL: COUNTER++, CHEST_BUCKET_EMPTY: COUNTER++, WELL_FULL: COUNTER++, INV_WELL: COUNTER++, CHEST_WELL: COUNTER++, CRAFT_WELL: COUNTER++, DELAY_HELMET: COUNTER++, GLOVES_HOOD: COUNTER++, DELAY_WALL: COUNTER++, MARKET_BUTTON: COUNTER++, ACCESSORY: COUNTER++, MARKET_BGD: COUNTER++, DEAD_BOX_UI: COUNTER++, CRAFT_SIGN: COUNTER++, INV_SIGN: COUNTER++, CHEST_SIGN: COUNTER++, SYMBOLS: COUNTER++, SIGN_BUTTON: COUNTER++, TREE_WEB1: COUNTER++, TREE_WEB2: COUNTER++, TREE_BRANCH_WEB1: COUNTER++, TREE_BRANCH_WEB2: COUNTER++, INV_PUMPKIN_SEED: COUNTER++, CRAFT_PUMPKIN_SEED: COUNTER++, CHEST_PUMPKIN_SEED: COUNTER++, PUMPKIN_SEED_MOB: COUNTER++, PLANT_PUMPKIN_DRIED: COUNTER++, DRIED_PUMPKIN: COUNTER++, INV_PUMPKIN: COUNTER++, CHEST_PUMPKIN: COUNTER++, HALO_FIRE_PUMPKIN: COUNTER++, GROUND_FIRE_PUMPKIN: COUNTER++, MINIMAP_CTX: COUNTER++, BIGMAP_CTX: COUNTER++, ZOMBIE_BODY: COUNTER++, ZOMBIE_HEAD: COUNTER++, ZOMBIE_HAND: COUNTER++, ZOMBIE_HURT: COUNTER++, ZOMBIE_HUNGER: COUNTER++, ZOMBIE_HEAL: COUNTER++, INV_WOOD_HELMET: COUNTER++, CRAFT_WOOD_HELMET: COUNTER++, CHEST_WOOD_HELMET: COUNTER++, INV_SWORD_WOOD: COUNTER++, CRAFT_SWORD_WOOD: COUNTER++, CHEST_SWORD_WOOD: COUNTER++, ZOMBIE_PLAYER: COUNTER++, VAMPIRE: COUNTER++, INV_GARLIC_SEED: COUNTER++, CRAFT_GARLIC_SEED: COUNTER++, CHEST_GARLIC_SEED: COUNTER++, GARLIC_SEED_MOB: COUNTER++, PLANT_GARLIC_DRIED: COUNTER++, DRIED_GARLIC: COUNTER++, INV_GARLIC: COUNTER++, CHEST_GARLIC: COUNTER++, INV_ROOF: COUNTER++, CRAFT_ROOF: COUNTER++, CHEST_ROOF: COUNTER++, INV_THORNBUSH_SEED: COUNTER++, CRAFT_THORNBUSH_SEED: COUNTER++, CHEST_THORNBUSH_SEED: COUNTER++, THORNBUSH_SEED_MOB: COUNTER++, PLANT_THORNBUSH_DRIED: COUNTER++, INV_THORNBUSH: COUNTER++, CHEST_THORNBUSH: COUNTER++, CRAFT_THORNBUSH: COUNTER++, ROOFS: COUNTER++, GIFT: COUNTER++, TREE_SNOW1: COUNTER++, TREE_SNOW2: COUNTER++, TREE_BRANCH_SNOW1: COUNTER++, TREE_BRANCH_SNOW2: COUNTER++, HURT_GIFT: COUNTER++, INV_PIRATE_SWORD: COUNTER++, CRAFT_PIRATE_SWORD: COUNTER++, CHEST_PIRATE_SWORD: COUNTER++, CHEST_SUGAR_CAN: COUNTER++, CRAFT_SUGAR_CAN: COUNTER++, INV_SUGAR_CAN: COUNTER++, INV_FERRERO: COUNTER++, CHEST_FERRERO: COUNTER++, CHEST_CANDY: COUNTER++, DRIED_THORNBUSH: COUNTER++, INV_GARLAND: COUNTER++, CHEST_GARLAND: COUNTER++, GARLANDS: COUNTER++, GARLANDS_LIGHT: COUNTER++, INV_DRAGON_SPEAR: COUNTER++, CHEST_DRAGON_SPEAR: COUNTER++, CRAFT_DRAGON_SPEAR: COUNTER++, INV_LAVA_SPEAR: COUNTER++, CHEST_LAVA_SPEAR: COUNTER++, CRAFT_LAVA_SPEAR: COUNTER++, INV_CHRISTMAS_HAT: COUNTER++, CHEST_CHRISTMAS_HAT: COUNTER++, INV_ELF_HAT: COUNTER++, CHEST_ELF_HAT: COUNTER++, ROBOT_SKIN: COUNTER++, VERIFIED: COUNTER++, CRAB_ATTACK: COUNTER++, CRAB: COUNTER++, HURT_CRAB: COUNTER++, HURT_CRAB_CLAW_LEFT: COUNTER++, HURT_CRAB_CLAW_RIGHT: COUNTER++, HEAL_CRAB: COUNTER++, HEAL_CRAB_CLAW_LEFT: COUNTER++, HEAL_CRAB_CLAW_RIGHT: COUNTER++, CRAB_CLAW_LEFT: COUNTER++, CRAB_CLAW_RIGHT: COUNTER++, CRAB_CLAW_LEFT_ATTACK: COUNTER++, CRAB_CLAW_RIGHT_ATTACK: COUNTER++, CHEST_CRAB_STICK: COUNTER++, CHEST_CRAB_SPEAR: COUNTER++, CRAFT_CRAB_SPEAR: COUNTER++, INV_CRAB_SPEAR: COUNTER++, FISH1: COUNTER++, FISH2: COUNTER++, HURT_FISH1: COUNTER++, HURT_FISH2: COUNTER++, CHEST_CRAB_LOOT: COUNTER++, INV_BED: COUNTER++, CHEST_BED: COUNTER++, CRAFT_BED: COUNTER++, INV_CROWN_CRAB: COUNTER++, CHEST_CROWN_CRAB: COUNTER++, CRAFT_CROWN_CRAB: COUNTER++, BED_TOP: COUNTER++, HURT_RABBIT_SKIN: COUNTER++, COLD_RABBIT_SKIN: COUNTER++, HUNGER_RABBIT_SKIN: COUNTER++, HEAL_RABBIT_SKIN: COUNTER++, FIRE_MOB: COUNTER++, HURT_FIRE_MOB: COUNTER++, GLOVES_DIAMOND_PROTECTION: COUNTER++, INV_DIAMOND_PROTECTION: COUNTER++, CRAFT_DIAMOND_PROTECTION: COUNTER++, CHEST_DIAMOND_PROTECTION: COUNTER++, GLOVES_AMETHYST_PROTECTION: COUNTER++, INV_AMETHYST_PROTECTION: COUNTER++, CRAFT_AMETHYST_PROTECTION: COUNTER++, CHEST_AMETHYST_PROTECTION: COUNTER++, GLOVES_REIDITE_PROTECTION: COUNTER++, INV_REIDITE_PROTECTION: COUNTER++, CRAFT_REIDITE_PROTECTION: COUNTER++, CHEST_REIDITE_PROTECTION: COUNTER++, INV_REIDITE_SWORD: COUNTER++, CRAFT_REIDITE_SWORD: COUNTER++, CHEST_REIDITE_SWORD: COUNTER++, LAVA_SHINGLE: COUNTER++, INV_FLAME: COUNTER++, CHEST_FLAME: COUNTER++, INV_REIDITE: COUNTER++, CHEST_REIDITE: COUNTER++, HERB_LAVA: COUNTER++, LAVA_BUBBLE: COUNTER++, ASHES: COUNTER++, INV_REIDITE_SPEAR: COUNTER++, CRAFT_REIDITE_SPEAR: COUNTER++, CHEST_REIDITE_SPEAR: COUNTER++, INV_REIDITE_HELMET: COUNTER++, CRAFT_REIDITE_HELMET: COUNTER++, CHEST_REIDITE_HELMET: COUNTER++, INV_CARROT_SEED: COUNTER++, CRAFT_CARROT_SEED: COUNTER++, CHEST_CARROT_SEED: COUNTER++, CARROT_SEED_MOB: COUNTER++, PLANT_CARROT_DRIED: COUNTER++, DRIED_CARROT: COUNTER++, INV_CARROT: COUNTER++, CHEST_CARROT: COUNTER++, TOMATO_MINI: COUNTER++, DRIED_TOMATO_MINI: COUNTER++, INV_TOMATO_SEED: COUNTER++, CRAFT_TOMATO_SEED: COUNTER++, CHEST_TOMATO_SEED: COUNTER++, TOMATO_SEED_MOB: COUNTER++, PLANT_TOMATO_DRIED: COUNTER++, DRIED_TOMATO: COUNTER++, INV_TOMATO: COUNTER++, INV_WATERMELON_SEED: COUNTER++, CRAFT_WATERMELON_SEED: COUNTER++, CHEST_WATERMELON_SEED: COUNTER++, WATERMELON_SEED_MOB: COUNTER++, PLANT_WATERMELON_DRIED: COUNTER++, DRIED_WATERMELON: COUNTER++, INV_WATERMELON: COUNTER++, CHEST_WATERMELON: COUNTER++, CHEST_TOMATO: COUNTER++, INV_PITCHFORK: COUNTER++, CHEST_PITCHFORK: COUNTER++, CRAFT_PITCHFORK: COUNTER++, INV_PITCHFORK2: COUNTER++, CHEST_PITCHFORK2: COUNTER++, CRAFT_PITCHFORK2: COUNTER++, INV_ALOE_VERA_SEED: COUNTER++, CRAFT_ALOE_VERA_SEED: COUNTER++, CHEST_ALOE_VERA_SEED: COUNTER++, ALOE_VERA_SEED_MOB: COUNTER++, PLANT_ALOE_VERA_DRIED: COUNTER++, DRIED_ALOE_VERA: COUNTER++, INV_ALOE_VERA: COUNTER++, CHEST_ALOE_VERA: COUNTER++, CACTUS: COUNTER++, CRAFT_WOOD_DOOR_SPIKE: COUNTER++, INV_WOOD_DOOR_SPIKE: COUNTER++, CHEST_WOOD_DOOR_SPIKE: COUNTER++, CRAFT_STONE_DOOR_SPIKE: COUNTER++, INV_STONE_DOOR_SPIKE: COUNTER++, CHEST_STONE_DOOR_SPIKE: COUNTER++, CRAFT_GOLD_DOOR_SPIKE: COUNTER++, INV_GOLD_DOOR_SPIKE: COUNTER++, CHEST_GOLD_DOOR_SPIKE: COUNTER++, CRAFT_DIAMOND_DOOR_SPIKE: COUNTER++, INV_DIAMOND_DOOR_SPIKE: COUNTER++, CHEST_DIAMOND_DOOR_SPIKE: COUNTER++, CRAFT_AMETHYST_DOOR_SPIKE: COUNTER++, INV_AMETHYST_DOOR_SPIKE: COUNTER++, CHEST_AMETHYST_DOOR_SPIKE: COUNTER++, CRAFT_REIDITE_DOOR_SPIKE: COUNTER++, INV_REIDITE_DOOR_SPIKE: COUNTER++, CHEST_REIDITE_DOOR_SPIKE: COUNTER++, CRAFT_REIDITE_DOOR: COUNTER++, INV_REIDITE_DOOR: COUNTER++, CHEST_REIDITE_DOOR: COUNTER++, CRAFT_REIDITE_SPIKE: COUNTER++, INV_REIDITE_SPIKE: COUNTER++, CHEST_REIDITE_SPIKE: COUNTER++, CRAFT_REIDITE_WALL: COUNTER++, INV_REIDITE_WALL: COUNTER++, CHEST_REIDITE_WALL: COUNTER++, INV_PICK_REIDITE: COUNTER++, CHEST_PICK_REIDITE: COUNTER++, CRAFT_PICK_REIDITE: COUNTER++, GOLDEN_HEN: COUNTER++, GOLDEN_CHICKEN: COUNTER++, HURT_GOLDEN_HEN: COUNTER++, HURT_GOLDEN_CHICKEN: COUNTER++, RIVER: COUNTER++, RIVER_DECO: COUNTER++, RIVER_WAVE: COUNTER++, CRAFT_BOAT: COUNTER++, INV_BOAT: COUNTER++, CHEST_BOAT: COUNTER++, CRAFT_SLED: COUNTER++, INV_SLED: COUNTER++, CHEST_SLED: COUNTER++, PENGUIN: COUNTER++, HURT_PENGUIN: COUNTER++, INV_PENGUIN_FEATHER: COUNTER++, CHEST_PENGUIN_FEATHER: COUNTER++, INV_HAWK_FEATHER: COUNTER++, CHEST_HAWK_FEATHER: COUNTER++, INV_VULTURE_FEATHER: COUNTER++, CHEST_VULTURE_FEATHER: COUNTER++, FOG: COUNTER++, BOAR: COUNTER++, BOAR_TAMED: COUNTER++, BOAR_ATTACK: COUNTER++, HURT_BOAR: COUNTER++, INV_SADDLE: COUNTER++, CHEST_SADDLE: COUNTER++, CRAFT_SADDLE: COUNTER++, INV_MOUNT_BOAR: COUNTER++, CHEST_MOUNT_BOAR: COUNTER++, CRAFT_MOUNT_BOAR: COUNTER++, MARKER: COUNTER++, CRAB_BOSS_ATTACK: COUNTER++, CRAB_BOSS: COUNTER++, CRAB_BOSS_TAMED: COUNTER++, HURT_CRAB_BOSS: COUNTER++, HURT_CRAB_BOSS_CLAW_LEFT: COUNTER++, HURT_CRAB_BOSS_CLAW_RIGHT: COUNTER++, CRAB_BOSS_CLAW_LEFT_ATTACK: COUNTER++, CRAB_BOSS_CLAW_LEFT: COUNTER++, CRAB_BOSS_CLAW_LEFT_TAMED: COUNTER++, CRAB_BOSS_CLAW_RIGHT_ATTACK: COUNTER++, CRAB_BOSS_CLAW_RIGHT: COUNTER++, CRAB_BOSS_CLAW_RIGHT_TAMED: COUNTER++, HEAL_CRAB_BOSS: COUNTER++, HEAL_CRAB_BOSS_CLAW_LEFT: COUNTER++, HEAL_CRAB_BOSS_CLAW_RIGHT: COUNTER++, BABY_DRAGON_ATTACK: COUNTER++, BABY_DRAGON: COUNTER++, BABY_DRAGON_TAMED: COUNTER++, BABY_DRAGON_WING_LEFT_ATTACK: COUNTER++, BABY_DRAGON_WING_LEFT: COUNTER++, BABY_DRAGON_WING_LEFT_TAMED: COUNTER++, BABY_DRAGON_WING_RIGHT_ATTACK: COUNTER++, BABY_DRAGON_WING_RIGHT: COUNTER++, BABY_DRAGON_WING_RIGHT_TAMED: COUNTER++, HURT_BABY_DRAGON: COUNTER++, HURT_BABY_DRAGON_WING_LEFT: COUNTER++, HURT_BABY_DRAGON_WING_RIGHT: COUNTER++, INV_BABY_DRAGON: COUNTER++, CHEST_BABY_DRAGON: COUNTER++, CRAFT_BABY_DRAGON: COUNTER++, BABY_LAVA_ATTACK: COUNTER++, BABY_LAVA: COUNTER++, BABY_LAVA_TAMED: COUNTER++, BABY_LAVA_WING_LEFT_ATTACK: COUNTER++, BABY_LAVA_WING_LEFT: COUNTER++, BABY_LAVA_WING_LEFT_TAMED: COUNTER++, BABY_LAVA_WING_RIGHT_ATTACK: COUNTER++, BABY_LAVA_WING_RIGHT: COUNTER++, BABY_LAVA_WING_RIGHT_TAMED: COUNTER++, HURT_BABY_LAVA: COUNTER++, HURT_BABY_LAVA_WING_LEFT: COUNTER++, HURT_BABY_LAVA_WING_RIGHT: COUNTER++, INV_BABY_LAVA: COUNTER++, CHEST_BABY_LAVA: COUNTER++, CRAFT_BABY_LAVA: COUNTER++, HAWK_ATTACK: COUNTER++, HAWK: COUNTER++, HAWK_TAMED: COUNTER++, HAWK_WING_LEFT_ATTACK: COUNTER++, HAWK_WING_LEFT: COUNTER++, HAWK_WING_LEFT_TAMED: COUNTER++, HAWK_WING_RIGHT_ATTACK: COUNTER++, HAWK_WING_RIGHT: COUNTER++, HAWK_WING_RIGHT_TAMED: COUNTER++, HURT_HAWK: COUNTER++, HURT_HAWK_WING_LEFT: COUNTER++, HURT_HAWK_WING_RIGHT: COUNTER++, INV_HAWK: COUNTER++, CHEST_HAWK: COUNTER++, CRAFT_HAWK: COUNTER++, HAWK_GROUND: COUNTER++, HAWK_GROUND_ATTACK: COUNTER++, HURT_HAWK_GROUND: COUNTER++, CRAFT_PLANE: COUNTER++, INV_PLANE: COUNTER++, CHEST_PLANE: COUNTER++, VULTURE_ATTACK: COUNTER++, VULTURE: COUNTER++, VULTURE_TAMED: COUNTER++, VULTURE_WING_LEFT_ATTACK: COUNTER++, VULTURE_WING_LEFT: COUNTER++, VULTURE_WING_LEFT_TAMED: COUNTER++, VULTURE_WING_RIGHT_ATTACK: COUNTER++, VULTURE_WING_RIGHT: COUNTER++, VULTURE_WING_RIGHT_TAMED: COUNTER++, HURT_VULTURE: COUNTER++, HURT_VULTURE_WING_LEFT: COUNTER++, HURT_VULTURE_WING_RIGHT: COUNTER++, INV_VULTURE: COUNTER++, CHEST_VULTURE: COUNTER++, CRAFT_VULTURE: COUNTER++, VULTURE_GROUND: COUNTER++, VULTURE_GROUND_ATTACK: COUNTER++, HURT_VULTURE_GROUND: COUNTER++, INV_TURBAN1: COUNTER++, CRAFT_TURBAN1: COUNTER++, CHEST_TURBAN1: COUNTER++, INV_TURBAN2: COUNTER++, CRAFT_TURBAN2: COUNTER++, CHEST_TURBAN2: COUNTER++, SCORPION: COUNTER++, HURT_SCORPION: COUNTER++, SCORPION_HAND_LEFT: COUNTER++, SCORPION_HAND_RIGHT: COUNTER++, HURT_SCORPION_HAND_LEFT: COUNTER++, HURT_SCORPION_HAND_RIGHT: COUNTER++, SAND_WORM_GROUND: ["#E9CF96", "#144940"], HURT_SAND_WORM0: COUNTER++, SAND_WORM1: COUNTER++, HURT_SAND_WORM1: COUNTER++, SAND_WORM2: COUNTER++, HURT_SAND_WORM2: COUNTER++, INV_CACTUS: COUNTER++, CHEST_CACTUS: COUNTER++, INV_EMERALD: COUNTER++, CHEST_EMERALD: COUNTER++, INV_PITCHFORK_PART: COUNTER++, CHEST_PITCHFORK_PART: COUNTER++, INV_PILOT_GLASSES: COUNTER++, CHEST_PILOT_GLASSES: COUNTER++, INV_FUR_BOAR: COUNTER++, CHEST_FUR_BOAR: COUNTER++, INV_FIREFLY: COUNTER++, CHEST_FIREFLY: COUNTER++, INV_WOOD_ARROW: COUNTER++, CHEST_WOOD_ARROW: COUNTER++, CRAFT_WOOD_ARROW: COUNTER++, INV_STONE_ARROW: COUNTER++, CHEST_STONE_ARROW: COUNTER++, CRAFT_STONE_ARROW: COUNTER++, INV_GOLD_ARROW: COUNTER++, CHEST_GOLD_ARROW: COUNTER++, CRAFT_GOLD_ARROW: COUNTER++, INV_DIAMOND_ARROW: COUNTER++, CHEST_DIAMOND_ARROW: COUNTER++, CRAFT_DIAMOND_ARROW: COUNTER++, INV_AMETHYST_ARROW: COUNTER++, CHEST_AMETHYST_ARROW: COUNTER++, CRAFT_AMETHYST_ARROW: COUNTER++, INV_REIDITE_ARROW: COUNTER++, CHEST_REIDITE_ARROW: COUNTER++, CRAFT_REIDITE_ARROW: COUNTER++, INV_DRAGON_ARROW: COUNTER++, CHEST_DRAGON_ARROW: COUNTER++, CRAFT_DRAGON_ARROW: COUNTER++, INV_SANDWORM_JUICE: COUNTER++, CHEST_SANDWORM_JUICE: COUNTER++, INV_CRAB_BOSS: COUNTER++, CHEST_CRAB_BOSS: COUNTER++, CRAFT_CRAB_BOSS: COUNTER++, EMERALD_MACHINE_GROUND: COUNTER++, EMERALD_MACHINE_HOLE: COUNTER++, EMERALD_MACHINE_ROTATE: COUNTER++, INV_EMERALD_MACHINE: COUNTER++, CRAFT_EMERALD_MACHINE: COUNTER++, CHEST_EMERALD_MACHINE: COUNTER++, EXTRACTOR_MACHINE0_STONE: COUNTER++, INV_EXTRACTOR_MACHINE_STONE: COUNTER++, CRAFT_EXTRACTOR_MACHINE_STONE: COUNTER++, CHEST_EXTRACTOR_MACHINE_STONE: COUNTER++, EXTRACTOR_MACHINE0_GOLD: COUNTER++, INV_EXTRACTOR_MACHINE_GOLD: COUNTER++, CRAFT_EXTRACTOR_MACHINE_GOLD: COUNTER++, CHEST_EXTRACTOR_MACHINE_GOLD: COUNTER++, EXTRACTOR_MACHINE0_DIAMOND: COUNTER++, INV_EXTRACTOR_MACHINE_DIAMOND: COUNTER++, CRAFT_EXTRACTOR_MACHINE_DIAMOND: COUNTER++, CHEST_EXTRACTOR_MACHINE_DIAMOND: COUNTER++, EXTRACTOR_MACHINE0_AMETHYST: COUNTER++, INV_EXTRACTOR_MACHINE_AMETHYST: COUNTER++, CRAFT_EXTRACTOR_MACHINE_AMETHYST: COUNTER++, CHEST_EXTRACTOR_MACHINE_AMETHYST: COUNTER++, EXTRACTOR_MACHINE0_REIDITE: COUNTER++, INV_EXTRACTOR_MACHINE_REIDITE: COUNTER++, CRAFT_EXTRACTOR_MACHINE_REIDITE: COUNTER++, CHEST_EXTRACTOR_MACHINE_REIDITE: COUNTER++, MAMMOTH: COUNTER++, HURT_MAMMOTH: COUNTER++, BABY_MAMMOTH: COUNTER++, BABY_MAMMOTH_TAMED: COUNTER++, BABY_MAMMOTH_ATTACK: COUNTER++, HURT_BABY_MAMMOTH: COUNTER++, INV_BABY_MAMMOTH: COUNTER++, CHEST_BABY_MAMMOTH: COUNTER++, CRAFT_BABY_MAMMOTH: COUNTER++, INV_FLOWER_HAT: COUNTER++, CRAFT_FLOWER_HAT: COUNTER++, CHEST_FLOWER_HAT: COUNTER++, INV_FUR_HAT: COUNTER++, CRAFT_FUR_HAT: COUNTER++, CHEST_FUR_HAT: COUNTER++, INV_FUR_MAMMOTH: COUNTER++, CHEST_FUR_MAMMOTH: COUNTER++, CRAFT_WOOD_TOWER: COUNTER++, INV_WOOD_TOWER: COUNTER++, CHEST_WOOD_TOWER: COUNTER++, CRAFT_WOOD_SHIELD: COUNTER++, INV_WOOD_SHIELD: COUNTER++, CHEST_WOOD_SHIELD: COUNTER++, CRAFT_STONE_SHIELD: COUNTER++, INV_STONE_SHIELD: COUNTER++, CHEST_STONE_SHIELD: COUNTER++, CRAFT_GOLD_SHIELD: COUNTER++, INV_GOLD_SHIELD: COUNTER++, CHEST_GOLD_SHIELD: COUNTER++, CRAFT_DIAMOND_SHIELD: COUNTER++, INV_DIAMOND_SHIELD: COUNTER++, CHEST_DIAMOND_SHIELD: COUNTER++, CRAFT_AMETHYST_SHIELD: COUNTER++, INV_AMETHYST_SHIELD: COUNTER++, CHEST_AMETHYST_SHIELD: COUNTER++, CRAFT_REIDITE_SHIELD: COUNTER++, INV_REIDITE_SHIELD: COUNTER++, CHEST_REIDITE_SHIELD: COUNTER++}, COUNTER = 0, CRAFT = {FIRE: COUNTER++, BIG_FIRE: COUNTER++, FURNACE: COUNTER++, WORKBENCH: COUNTER++, PICK_WOOD: COUNTER++, PICK: COUNTER++, PICK_GOLD: COUNTER++, PICK_DIAMOND: COUNTER++, PICK_AMETHYST: COUNTER++, PICK_REIDITE: COUNTER++, HAMMER: COUNTER++, HAMMER_GOLD: COUNTER++, HAMMER_DIAMOND: COUNTER++, HAMMER_AMETHYST: COUNTER++, HAMMER_REIDITE: COUNTER++, SUPER_HAMMER: COUNTER++, SHOVEL: COUNTER++, SHOVEL_GOLD: COUNTER++, SHOVEL_DIAMOND: COUNTER++, SHOVEL_AMETHYST: COUNTER++, WATERING_CAN: COUNTER++, WATERING_CAN_FULL: COUNTER++, PITCHFORK: COUNTER++, PITCHFORK2: COUNTER++, BOOK: COUNTER++, WOOD_SPEAR: COUNTER++, SPEAR: COUNTER++, GOLD_SPEAR: COUNTER++, DIAMOND_SPEAR: COUNTER++, AMETHYST_SPEAR: COUNTER++, REIDITE_SPEAR: COUNTER++, DRAGON_SPEAR: COUNTER++, LAVA_SPEAR: COUNTER++, CRAB_SPEAR: COUNTER++, SWORD_WOOD: COUNTER++, SWORD: COUNTER++, SWORD_GOLD: COUNTER++, SWORD_DIAMOND: COUNTER++, SWORD_AMETHYST: COUNTER++, REIDITE_SWORD: COUNTER++, SEED: COUNTER++, WHEAT_SEED: COUNTER++, PUMPKIN_SEED: COUNTER++, GARLIC_SEED: COUNTER++, THORNBUSH_SEED: COUNTER++, CARROT_SEED: COUNTER++, TOMATO_SEED: COUNTER++, WATERMELON_SEED: COUNTER++, ALOE_VERA_SEED: COUNTER++, COOKED_MEAT: COUNTER++, FOODFISH_COOKED: COUNTER++, BREAD: COUNTER++, COOKIE: COUNTER++, CAKE: COUNTER++, BANDAGE: COUNTER++, WALL: COUNTER++, STONE_WALL: COUNTER++, GOLD_WALL: COUNTER++, DIAMOND_WALL: COUNTER++, AMETHYST_WALL: COUNTER++, REIDITE_WALL: COUNTER++, WOOD_DOOR: COUNTER++, STONE_DOOR: COUNTER++, GOLD_DOOR: COUNTER++, DIAMOND_DOOR: COUNTER++, AMETHYST_DOOR: COUNTER++, REIDITE_DOOR: COUNTER++, SPIKE: COUNTER++, STONE_SPIKE: COUNTER++, GOLD_SPIKE: COUNTER++, DIAMOND_SPIKE: COUNTER++, AMETHYST_SPIKE: COUNTER++, REIDITE_SPIKE: COUNTER++, WOOD_DOOR_SPIKE: COUNTER++, STONE_DOOR_SPIKE: COUNTER++, GOLD_DOOR_SPIKE: COUNTER++, DIAMOND_DOOR_SPIKE: COUNTER++, AMETHYST_DOOR_SPIKE: COUNTER++, REIDITE_DOOR_SPIKE: COUNTER++, CHEST: COUNTER++, EXPLORER_HAT: COUNTER++, PIRATE_HAT: COUNTER++, PILOT_HELMET: COUNTER++, EARMUFFS: COUNTER++, COAT: COUNTER++, CAP_SCARF: COUNTER++, FUR_HAT: COUNTER++, WOOD_HELMET: COUNTER++, STONE_HELMET: COUNTER++, GOLD_HELMET: COUNTER++, DIAMOND_HELMET: COUNTER++, AMETHYST_HELMET: COUNTER++, REIDITE_HELMET: COUNTER++, DIVING_MASK: COUNTER++, SUPER_DIVING_SUIT: COUNTER++, DIAMOND_PROTECTION: COUNTER++, AMETHYST_PROTECTION: COUNTER++, REIDITE_PROTECTION: COUNTER++, TURBAN1: COUNTER++, TURBAN2: COUNTER++, BAG: COUNTER++, PAPER: COUNTER++, BLUE_CORD: COUNTER++, LOCK: COUNTER++, LOCKPICK: COUNTER++, TOTEM: COUNTER++, BRIDGE: COUNTER++, ROOF: COUNTER++, WOOD_TOWER: COUNTER++, PLOT: COUNTER++, BOTTLE_EMPTY: COUNTER++, BOTTLE_FULL: COUNTER++, BOTTLE_FULL_2: COUNTER++, BOTTLE_FULL_3: COUNTER++, WINDMILL: COUNTER++, RESURRECTION: COUNTER++, EMERALD_MACHINE: COUNTER++, EXTRACTOR_MACHINE_STONE: COUNTER++, EXTRACTOR_MACHINE_GOLD: COUNTER++, EXTRACTOR_MACHINE_DIAMOND: COUNTER++, EXTRACTOR_MACHINE_AMETHYST: COUNTER++, EXTRACTOR_MACHINE_REIDITE: COUNTER++, SPANNER: COUNTER++, MACHETE: COUNTER++, BREAD_OVEN: COUNTER++, SANDWICH: COUNTER++, DRAGON_HELMET: COUNTER++, LAVA_HELMET: COUNTER++, CROWN_CRAB: COUNTER++, DRAGON_SWORD: COUNTER++, LAVA_SWORD: COUNTER++, WOOD_BOW: COUNTER++, WOOD_ARROW: COUNTER++, STONE_BOW: COUNTER++, STONE_ARROW: COUNTER++, GOLD_BOW: COUNTER++, GOLD_ARROW: COUNTER++, DIAMOND_BOW: COUNTER++, DIAMOND_ARROW: COUNTER++, AMETHYST_BOW: COUNTER++, AMETHYST_ARROW: COUNTER++, REIDITE_BOW: COUNTER++, REIDITE_ARROW: COUNTER++, DRAGON_BOW: COUNTER++, DRAGON_ARROW: COUNTER++, WOOD_SHIELD: COUNTER++, STONE_SHIELD: COUNTER++, GOLD_SHIELD: COUNTER++, DIAMOND_SHIELD: COUNTER++, AMETHYST_SHIELD: COUNTER++, REIDITE_SHIELD: COUNTER++, CROWN_GREEN: COUNTER++, CROWN_ORANGE: COUNTER++, CROWN_BLUE: COUNTER++, HOOD: COUNTER++, PEASANT: COUNTER++, WINTER_HOOD: COUNTER++, WINTER_PEASANT: COUNTER++, BUCKET_FULL: COUNTER++, BUCKET_EMPTY: COUNTER++, WELL: COUNTER++, SIGN: COUNTER++, BED: COUNTER++, BOAT: COUNTER++, SLED: COUNTER++, SADDLE: COUNTER++, PLANE: COUNTER++, WITCH: COUNTER++, WAND1: COUNTER++, WAND2: COUNTER++, NIMBUS: COUNTER++}, COUNTER = 0, INV = {SWORD: COUNTER++, PICK: COUNTER++, FUR: COUNTER++, PICK_GOLD: COUNTER++, PICK_DIAMOND: COUNTER++, SWORD_GOLD: COUNTER++, SWORD_DIAMOND: COUNTER++, HAND: COUNTER++, PICK_WOOD: COUNTER++, PIRATE_SWORD: COUNTER++, EARMUFFS: COUNTER++, COAT: COUNTER++, WOOD_SPEAR: COUNTER++, SPEAR: COUNTER++, GOLD_SPEAR: COUNTER++, DIAMOND_SPEAR: COUNTER++, DRAGON_SPEAR: COUNTER++, LAVA_SPEAR: COUNTER++, CRAB_SPEAR: COUNTER++, REIDITE_SWORD: COUNTER++, DIAMOND_PROTECTION: COUNTER++, AMETHYST_PROTECTION: COUNTER++, REIDITE_PROTECTION: COUNTER++, EXPLORER_HAT: COUNTER++, PIRATE_HAT: COUNTER++, STONE_HELMET: COUNTER++, GOLD_HELMET: COUNTER++, DIAMOND_HELMET: COUNTER++, BOOK: COUNTER++, BAG: COUNTER++, SWORD_AMETHYST: COUNTER++, PICK_AMETHYST: COUNTER++, PICK_REIDITE: COUNTER++, AMETHYST_SPEAR: COUNTER++, REIDITE_SPEAR: COUNTER++, HAMMER: COUNTER++, HAMMER_GOLD: COUNTER++, HAMMER_DIAMOND: COUNTER++, HAMMER_AMETHYST: COUNTER++, HAMMER_REIDITE: COUNTER++, CAP_SCARF: COUNTER++, CHRISTMAS_HAT: COUNTER++, ELF_HAT: COUNTER++, AMETHYST_HELMET: COUNTER++, REIDITE_HELMET: COUNTER++, SUPER_HAMMER: COUNTER++, SHOVEL: COUNTER++, SUPER_DIVING_SUIT: COUNTER++, DIVING_MASK: COUNTER++, WATERING_CAN_FULL: COUNTER++, SHOVEL_GOLD: COUNTER++, SHOVEL_DIAMOND: COUNTER++, SHOVEL_AMETHYST: COUNTER++, PITCHFORK: COUNTER++, PITCHFORK2: COUNTER++, SPANNER: COUNTER++, MACHETE: COUNTER++, SWORD_WOOD: COUNTER++, WOOD_HELMET: COUNTER++, DRAGON_HELMET: COUNTER++, LAVA_HELMET: COUNTER++, CROWN_CRAB: COUNTER++, DRAGON_SWORD: COUNTER++, LAVA_SWORD: COUNTER++, WOOD_BOW: COUNTER++, STONE_BOW: COUNTER++, GOLD_BOW: COUNTER++, DIAMOND_BOW: COUNTER++, AMETHYST_BOW: COUNTER++, REIDITE_BOW: COUNTER++, DRAGON_BOW: COUNTER++, WOOD_SHIELD: COUNTER++, STONE_SHIELD: COUNTER++, GOLD_SHIELD: COUNTER++, DIAMOND_SHIELD: COUNTER++, AMETHYST_SHIELD: COUNTER++, REIDITE_SHIELD: COUNTER++, CROWN_GREEN: COUNTER++, CROWN_ORANGE: COUNTER++, CROWN_BLUE: COUNTER++, TURBAN1: COUNTER++, TURBAN2: COUNTER++, PILOT_HELMET: COUNTER++, HOOD: COUNTER++, PEASANT: COUNTER++, WINTER_HOOD: COUNTER++, WINTER_PEASANT: COUNTER++, FLOWER_HAT: COUNTER++, FUR_HAT: COUNTER++, SADDLE: COUNTER++, WITCH: COUNTER++, NIMBUS: COUNTER++, WAND1: COUNTER++, WAND2: COUNTER++, FIREFLY: COUNTER++, WOOD_ARROW: COUNTER++, STONE_ARROW: COUNTER++, GOLD_ARROW: COUNTER++, DIAMOND_ARROW: COUNTER++, AMETHYST_ARROW: COUNTER++, REIDITE_ARROW: COUNTER++, DRAGON_ARROW: COUNTER++, STONE: COUNTER++, WOOD: COUNTER++, PLANT: COUNTER++, GOLD: COUNTER++, DIAMOND: COUNTER++, FIRE: COUNTER++, WORKBENCH: COUNTER++, SEED: COUNTER++, MEAT: COUNTER++, COOKED_MEAT: COUNTER++, BIG_FIRE: COUNTER++, FURNACE: COUNTER++, PAPER: COUNTER++, AMETHYST: COUNTER++, AMETHYST_WALL: COUNTER++, AMETHYST_SPIKE: COUNTER++, AMETHYST_DOOR: COUNTER++, BRIDGE: COUNTER++, SAND: COUNTER++, BOTTLE_FULL: COUNTER++, BOTTLE_EMPTY: COUNTER++, KRAKEN_SKIN: COUNTER++, WATERING_CAN: COUNTER++, FLOUR: COUNTER++, WHEAT_SEED: COUNTER++, COOKIE: COUNTER++, WILD_WHEAT: COUNTER++, WINDMILL: COUNTER++, CAKE: COUNTER++, FOODFISH: COUNTER++, FOODFISH_COOKED: COUNTER++, SCALES: COUNTER++, GROUND: COUNTER++, PLOT: COUNTER++, ICE: COUNTER++, BREAD: COUNTER++, BREAD_OVEN: COUNTER++, SANDWICH: COUNTER++, FUR_WINTER: COUNTER++, BLUE_CORD: COUNTER++, LOCK: COUNTER++, DRAGON_HEART: COUNTER++, LAVA_HEART: COUNTER++, RESURRECTION: COUNTER++, EMERALD_MACHINE: COUNTER++, EXTRACTOR_MACHINE_STONE: COUNTER++, EXTRACTOR_MACHINE_GOLD: COUNTER++, EXTRACTOR_MACHINE_DIAMOND: COUNTER++, EXTRACTOR_MACHINE_AMETHYST: COUNTER++, EXTRACTOR_MACHINE_REIDITE: COUNTER++, LOCKPICK: COUNTER++, TOTEM: COUNTER++, SPIKE: COUNTER++, CORD: COUNTER++, WALL: COUNTER++, STONE_WALL: COUNTER++, GOLD_WALL: COUNTER++, DIAMOND_WALL: COUNTER++, WOOD_DOOR: COUNTER++, CHEST: COUNTER++, STONE_SPIKE: COUNTER++, GOLD_SPIKE: COUNTER++, DIAMOND_SPIKE: COUNTER++, STONE_DOOR: COUNTER++, GOLD_DOOR: COUNTER++, DIAMOND_DOOR: COUNTER++, FUR_WOLF: COUNTER++, GEMME_GREEN: COUNTER++, GEMME_ORANGE: COUNTER++, GEMME_BLUE: COUNTER++, SPECIAL_FUR: COUNTER++, SPECIAL_FUR_2: COUNTER++, BUCKET_FULL: COUNTER++, BUCKET_EMPTY: COUNTER++, WELL: COUNTER++, SIGN: COUNTER++, DRAGON_CUBE: COUNTER++, DRAGON_ORB: COUNTER++, LAVA_CUBE: COUNTER++, LAVA_ORB: COUNTER++, PUMPKIN_SEED: COUNTER++, PUMPKIN: COUNTER++, ROOF: COUNTER++, GARLIC_SEED: COUNTER++, GARLIC: COUNTER++, THORNBUSH_SEED: COUNTER++, THORNBUSH: COUNTER++, BANDAGE: COUNTER++, CRAB_STICK: COUNTER++, CRAB_LOOT: COUNTER++, BED: COUNTER++, SUGAR_CAN: COUNTER++, CANDY: COUNTER++, GARLAND: COUNTER++, REIDITE: COUNTER++, FLAME: COUNTER++, CARROT_SEED: COUNTER++, CARROT: COUNTER++, TOMATO_SEED: COUNTER++, TOMATO: COUNTER++, WATERMELON_SEED: COUNTER++, WATERMELON: COUNTER++, ALOE_VERA_SEED: COUNTER++, ALOE_VERA: COUNTER++, WOOD_DOOR_SPIKE: COUNTER++, STONE_DOOR_SPIKE: COUNTER++, GOLD_DOOR_SPIKE: COUNTER++, DIAMOND_DOOR_SPIKE: COUNTER++, AMETHYST_DOOR_SPIKE: COUNTER++, REIDITE_WALL: COUNTER++, REIDITE_DOOR: COUNTER++, REIDITE_SPIKE: COUNTER++, REIDITE_DOOR_SPIKE: COUNTER++, WOOD_TOWER: COUNTER++, PENGUIN_FEATHER: COUNTER++, BOAT: COUNTER++, SLED: COUNTER++, MOUNT_BOAR: COUNTER++, CRAB_BOSS: COUNTER++, BABY_DRAGON: COUNTER++, BABY_LAVA: COUNTER++, HAWK: COUNTER++, PLANE: COUNTER++, HAWK_FEATHER: COUNTER++, VULTURE_FEATHER: COUNTER++, CACTUS: COUNTER++, EMERALD: COUNTER++, PITCHFORK_PART: COUNTER++, PILOT_GLASSES: COUNTER++, FUR_BOAR: COUNTER++, SANDWORM_JUICE: COUNTER++, BABY_MAMMOTH: COUNTER++, FUR_MAMMOTH: COUNTER++}, CATEGORY = {TOOLS: 0, WEAPONS: 1, CLOTHES: 2, FOODS: 3, UTILS: 4, BASES: 5}, INV_INFOS = [];
INV_INFOS[INV.WOOD] = {name: "Wood", img: SPRITE.INV_WOOD, grid: 0, recycle: 0};
INV_INFOS[INV.STONE] = {name: "Stone", img: SPRITE.INV_STONE, grid: 0, recycle: 0};
INV_INFOS[INV.GOLD] = {name: "Gold", img: SPRITE.INV_GOLD, grid: 0, recycle: 0};
INV_INFOS[INV.DIAMOND] = {name: "Diamond", img: SPRITE.INV_DIAMOND, grid: 0, recycle: 0};
INV_INFOS[INV.AMETHYST] = {name: "Amethyst", img: SPRITE.INV_AMETHYST, grid: 0, recycle: 0};
INV_INFOS[INV.FUR] = {name: "Rabbit fur", img: SPRITE.INV_FUR, grid: 0, recycle: 0};
INV_INFOS[INV.FUR_WOLF] = {name: "Wolf fur", img: SPRITE.INV_FUR_WOLF, grid: 0, recycle: 0};
INV_INFOS[INV.FUR_BOAR] = {name: "Boar fur", img: SPRITE.INV_FUR_BOAR, grid: 0, recycle: 0};
INV_INFOS[INV.FIREFLY] = {name: "Firefly", img: SPRITE.INV_FIREFLY, grid: 0, recycle: 0};
INV_INFOS[INV.WOOD_ARROW] = {name: "Wood arrow", img: SPRITE.INV_WOOD_ARROW, grid: 0, recycle: 1};
INV_INFOS[INV.STONE_ARROW] = {name: "Stone arrow", img: SPRITE.INV_STONE_ARROW, grid: 0, recycle: 1};
INV_INFOS[INV.GOLD_ARROW] = {name: "Gold arrow", img: SPRITE.INV_GOLD_ARROW, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_ARROW] = {name: "Diamond arrow", img: SPRITE.INV_DIAMOND_ARROW, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_ARROW] = {name: "Amethyst arrow", img: SPRITE.INV_AMETHYST_ARROW, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_ARROW] = {name: "Reidite arrow", img: SPRITE.INV_REIDITE_ARROW, grid: 0, recycle: 1};
INV_INFOS[INV.DRAGON_ARROW] = {name: "Dragon arrow", img: SPRITE.INV_DRAGON_ARROW, grid: 0, recycle: 0};
INV_INFOS[INV.FUR_WINTER] = {name: "Winter fur", img: SPRITE.INV_FUR_WINTER, grid: 0, recycle: 0};
INV_INFOS[INV.FUR_MAMMOTH] = {name: "Fur mammoth", img: SPRITE.INV_FUR_MAMMOTH, grid: 0, recycle: 0};
INV_INFOS[INV.CORD] = {name: "Web", img: SPRITE.INV_CORD, grid: 0, recycle: 0};
INV_INFOS[INV.MEAT] = {name: "Meat", img: SPRITE.INV_MEAT, grid: 0, recycle: 0};
INV_INFOS[INV.FOODFISH] = {name: "Fish", img: SPRITE.INV_FOODFISH, grid: 0, recycle: 0};
INV_INFOS[INV.KRAKEN_SKIN] = {name: "Kraken skin", img: SPRITE.INV_KRAKEN_SKIN, grid: 0, recycle: 0};
INV_INFOS[INV.SCALES] = {name: "Piranha scales", img: SPRITE.INV_SCALES, grid: 0, recycle: 0};
INV_INFOS[INV.ICE] = {name: "Ice", img: SPRITE.INV_ICE, grid: 0, recycle: 0};
INV_INFOS[INV.SAND] = {name: "Sand", img: SPRITE.INV_SAND, grid: 0, recycle: 0};
INV_INFOS[INV.GROUND] = {name: "Dirt", img: SPRITE.INV_GROUND, grid: 0, recycle: 0};
INV_INFOS[INV.PLANT] = {name: "Berrie", img: SPRITE.INV_PLANT, grid: 0, recycle: 0};
INV_INFOS[INV.FLOUR] = {name: "Flour", img: SPRITE.INV_FLOUR, grid: 0, recycle: 0};
INV_INFOS[INV.WILD_WHEAT] = {name: "Flour", img: SPRITE.INV_WILD_WHEAT, grid: 0, recycle: 0};
INV_INFOS[INV.SPECIAL_FUR] = {name: "Special fur peasant", img: SPRITE.INV_SPECIAL_FUR, grid: 0, recycle: 0};
INV_INFOS[INV.SPECIAL_FUR_2] = {name: "Special fur hood", img: SPRITE.INV_SPECIAL_FUR_2, grid: 0, recycle: 0};
INV_INFOS[INV.PUMPKIN] = {name: "Pumpkin", img: SPRITE.INV_PUMPKIN, grid: 0, recycle: 0};
INV_INFOS[INV.GARLIC] = {name: "Garlic", img: SPRITE.INV_GARLIC, grid: 0, recycle: 0};
INV_INFOS[INV.THORNBUSH] = {name: "Thornbush", img: SPRITE.INV_THORNBUSH, grid: 0, recycle: 0};
INV_INFOS[INV.CARROT] = {name: "Carrot", img: SPRITE.INV_CARROT, grid: 0, recycle: 0};
INV_INFOS[INV.TOMATO] = {name: "Tomato", img: SPRITE.INV_TOMATO, grid: 0, recycle: 0};
INV_INFOS[INV.WATERMELON] = {name: "Watermelon", img: SPRITE.INV_WATERMELON, grid: 0, recycle: 0};
INV_INFOS[INV.ALOE_VERA] = {name: "Aloe Vera", img: SPRITE.INV_ALOE_VERA, grid: 0, recycle: 0};
INV_INFOS[INV.PENGUIN_FEATHER] = {name: "Penguin Feather", img: SPRITE.INV_PENGUIN_FEATHER, grid: 0, recycle: 0};
INV_INFOS[INV.HAWK_FEATHER] = {name: "Hawk Feather", img: SPRITE.INV_HAWK_FEATHER, grid: 0, recycle: 0};
INV_INFOS[INV.VULTURE_FEATHER] = {name: "Vulture Feather", img: SPRITE.INV_VULTURE_FEATHER, grid: 0, recycle: 0};
INV_INFOS[INV.CACTUS] = {name: "Cactus", img: SPRITE.INV_CACTUS, grid: 0, recycle: 0};
INV_INFOS[INV.PILOT_GLASSES] = {name: "Cactus", img: SPRITE.INV_PILOT_GLASSES, grid: 0, recycle: 0};
INV_INFOS[INV.PITCHFORK_PART] = {name: "Pitchfork Part", img: SPRITE.INV_PITCHFORK_PART, grid: 0, recycle: 0};
INV_INFOS[INV.SANDWORM_JUICE] = {name: "Emerald Machine", img: SPRITE.INV_SANDWORM_JUICE, grid: 0, recycle: 0};
INV_INFOS[INV.EMERALD] = {name: "Emerald", img: SPRITE.INV_EMERALD, grid: 0, recycle: 0};
INV_INFOS[INV.CHRISTMAS_HAT] = {name: "Christmas Hat", img: SPRITE.INV_CHRISTMAS_HAT, recycle: 0};
INV_INFOS[INV.ELF_HAT] = {name: "Elf Hat", img: SPRITE.INV_ELF_HAT, recycle: 0};
INV_INFOS[INV.GARLAND] = {name: "Garland", img: SPRITE.INV_GARLAND, recycle: 0, grid: 0};
INV_INFOS[INV.CANDY] = {name: "Candy", img: SPRITE.INV_CANDY, recycle: 0};
INV_INFOS[INV.SUGAR_CAN] = {name: "Sugar Cane", img: SPRITE.INV_SUGAR_CAN, recycle: 0};
INV_INFOS[INV.PIRATE_SWORD] = {name: "Pirate Sword", img: SPRITE.INV_PIRATE_SWORD, grid: 0, recycle: 0};
INV_INFOS[INV.CRAB_STICK] = {name: "Crab Stick", img: SPRITE.INV_CRAB_STICK, grid: 0, recycle: 0};
INV_INFOS[INV.REIDITE] = {name: "Reidite", img: SPRITE.INV_REIDITE, grid: 0, recycle: 0};
INV_INFOS[INV.FLAME] = {name: "Flame", img: SPRITE.INV_FLAME, grid: 0, recycle: 0};
INV_INFOS[INV.FIRE] = {name: "Campfire", img: SPRITE.CRAFT_FIRE, grid: 0, recycle: 1};
INV_INFOS[INV.BED] = {name: "Bed", img: SPRITE.CRAFT_BED, grid: 0, recycle: 1};
INV_INFOS[INV.WORKBENCH] = {name: "Workbench", img: SPRITE.CRAFT_WORK, grid: 0, recycle: 1};
INV_INFOS[INV.SWORD] = {name: "Stone sword", img: SPRITE.CRAFT_SWORD, grid: 0, recycle: 1};
INV_INFOS[INV.PICK] = {name: "Stone pick", img: SPRITE.CRAFT_PICK, grid: 0, recycle: 1};
INV_INFOS[INV.SEED] = {name: "Berries bush", img: SPRITE.CRAFT_SEED, grid: 0, recycle: 0};
INV_INFOS[INV.PICK_GOLD] = {name: "Gold pick", img: SPRITE.CRAFT_PICK_GOLD, grid: 0, recycle: 1};
INV_INFOS[INV.PICK_DIAMOND] = {name: "Diamond pick", img: SPRITE.CRAFT_PICK_DIAMOND, grid: 0, recycle: 1};
INV_INFOS[INV.SWORD_WOOD] = {name: "Wood sword", img: SPRITE.CRAFT_SWORD_WOOD, grid: 0, recycle: 1};
INV_INFOS[INV.SWORD_GOLD] = {name: "Gold sword", img: SPRITE.CRAFT_SWORD_GOLD, grid: 0, recycle: 1};
INV_INFOS[INV.SWORD_DIAMOND] = {name: "Diamond sword", img: SPRITE.CRAFT_SWORD_DIAMOND, grid: 0, recycle: 1};
INV_INFOS[INV.PICK_WOOD] = {name: "Wood pick", img: SPRITE.CRAFT_PICK_WOOD, grid: 0, recycle: 1};
INV_INFOS[INV.WALL] = {name: "Wood wall", img: SPRITE.CRAFT_WALL, grid: 0, recycle: 1};
INV_INFOS[INV.SPIKE] = {name: "Wood spike", img: SPRITE.CRAFT_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.COOKED_MEAT] = {name: "Cooked meat", img: SPRITE.CRAFT_COOKED_MEAT, grid: 0, recycle: 0};
INV_INFOS[INV.BIG_FIRE] = {name: "Big campfire", img: SPRITE.CRAFT_BIG_FIRE, grid: 0, recycle: 1};
INV_INFOS[INV.BANDAGE] = {name: "Bandage", img: SPRITE.CRAFT_BANDAGE, grid: 0, recycle: 1};
INV_INFOS[INV.STONE_WALL] = {name: "Stone wall", img: SPRITE.CRAFT_STONE_WALL, grid: 0, recycle: 1};
INV_INFOS[INV.GOLD_WALL] = {name: "Gold wall", img: SPRITE.CRAFT_GOLD_WALL, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_WALL] = {name: "Diamond wall", img: SPRITE.CRAFT_DIAMOND_WALL, grid: 0, recycle: 1};
INV_INFOS[INV.WOOD_DOOR] = {name: "Wood door", img: SPRITE.CRAFT_DOOR_WOOD_CLOSE, grid: 0, recycle: 1};
INV_INFOS[INV.CHEST] = {name: "Chest", img: SPRITE.CRAFT_CHEST, grid: 0, recycle: 1};
INV_INFOS[INV.STONE_SPIKE] = {name: "Stone spike", img: SPRITE.CRAFT_STONE_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.GOLD_SPIKE] = {name: "Gold spike", img: SPRITE.CRAFT_GOLD_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_SPIKE] = {name: "Diamond spike", img: SPRITE.CRAFT_DIAMOND_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.STONE_DOOR] = {name: "Stone door", img: SPRITE.CRAFT_DOOR_STONE_CLOSE, grid: 0, recycle: 1};
INV_INFOS[INV.GOLD_DOOR] = {name: "Gold door", img: SPRITE.CRAFT_DOOR_GOLD_CLOSE, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_DOOR] = {name: "Diamond door", img: SPRITE.CRAFT_DOOR_DIAMOND_CLOSE, grid: 0, recycle: 1};
INV_INFOS[INV.EARMUFFS] = {name: "Chapka", img: SPRITE.CRAFT_EARMUFFS, grid: 0, recycle: 1};
INV_INFOS[INV.COAT] = {name: "Big Chapka", img: SPRITE.CRAFT_COAT, grid: 0, recycle: 1};
INV_INFOS[INV.WOOD_SPEAR] = {name: "Wood spear", img: SPRITE.CRAFT_WOOD_SPEAR, grid: 0, recycle: 1};
INV_INFOS[INV.SPEAR] = {name: "Stone spear", img: SPRITE.CRAFT_SPEAR, grid: 0, recycle: 1};
INV_INFOS[INV.GOLD_SPEAR] = {name: "Gold spear", img: SPRITE.CRAFT_GOLD_SPEAR, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_SPEAR] = {name: "Diamond spear", img: SPRITE.CRAFT_DIAMOND_SPEAR, grid: 0, recycle: 1};
INV_INFOS[INV.DRAGON_SPEAR] = {name: "Dragon spear", img: SPRITE.CRAFT_DRAGON_SPEAR, grid: 0, recycle: 0};
INV_INFOS[INV.LAVA_SPEAR] = {name: "Dragon spear", img: SPRITE.CRAFT_LAVA_SPEAR, grid: 0, recycle: 0};
INV_INFOS[INV.CRAB_SPEAR] = {name: "Crab spear", img: SPRITE.CRAFT_CRAB_SPEAR, grid: 0, recycle: 1};
INV_INFOS[INV.CRAB_LOOT] = {name: "Crab loot", img: SPRITE.INV_CRAB_LOOT, grid: 0, recycle: 0};
INV_INFOS[INV.FURNACE] = {name: "Furnace", img: SPRITE.CRAFT_FURNACE, grid: 0, recycle: 1};
INV_INFOS[INV.EXPLORER_HAT] = {name: "Explorer hat", img: SPRITE.CRAFT_EXPLORER_HAT, grid: 0, recycle: 1};
INV_INFOS[INV.PIRATE_HAT] = {name: "Pirate hat", img: SPRITE.CRAFT_PIRATE_HAT, grid: 0, recycle: 1};
INV_INFOS[INV.FLOWER_HAT] = {name: "Flower hat", img: SPRITE.CRAFT_FLOWER_HAT, grid: 0, recycle: 1};
INV_INFOS[INV.FUR_HAT] = {name: "Fur hat", img: SPRITE.CRAFT_FUR_HAT, grid: 0, recycle: 1};
INV_INFOS[INV.WOOD_HELMET] = {name: "Wood helmet", img: SPRITE.CRAFT_WOOD_HELMET, grid: 0, recycle: 1};
INV_INFOS[INV.STONE_HELMET] = {name: "Stone helmet", img: SPRITE.CRAFT_STONE_HELMET, grid: 0, recycle: 1};
INV_INFOS[INV.GOLD_HELMET] = {name: "Gold helmet", img: SPRITE.CRAFT_GOLD_HELMET, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_HELMET] = {name: "Diamond helmet", img: SPRITE.CRAFT_DIAMOND_HELMET, grid: 0, recycle: 1};
INV_INFOS[INV.BOOK] = {name: "Book", img: SPRITE.CRAFT_BOOK, grid: 0, recycle: 1};
INV_INFOS[INV.PAPER] = {name: "Paper", img: SPRITE.CRAFT_PAPER, grid: 0, recycle: 0};
INV_INFOS[INV.BAG] = {name: "Bag", img: SPRITE.CRAFT_BAG, grid: 0, recycle: 1};
INV_INFOS[INV.SWORD_AMETHYST] = {name: "Amethyst sword", img: SPRITE.CRAFT_SWORD_AMETHYST, grid: 0, recycle: 1};
INV_INFOS[INV.PICK_AMETHYST] = {name: "Amethyst pick", img: SPRITE.CRAFT_PICK_AMETHYST, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_SPEAR] = {name: "Amethyst spear", img: SPRITE.CRAFT_AMETHYST_SPEAR, grid: 0, recycle: 1};
INV_INFOS[INV.HAMMER] = {name: "Stone hammer", img: SPRITE.CRAFT_HAMMER, grid: 0, recycle: 1};
INV_INFOS[INV.HAMMER_GOLD] = {name: "Gold hammer", img: SPRITE.CRAFT_HAMMER_GOLD, grid: 0, recycle: 1};
INV_INFOS[INV.HAMMER_DIAMOND] = {name: "Diamond hammer", img: SPRITE.CRAFT_HAMMER_DIAMOND, grid: 0, recycle: 1};
INV_INFOS[INV.HAMMER_AMETHYST] = {name: "Amethyst hammer", img: SPRITE.CRAFT_HAMMER_AMETHYST, grid: 0, recycle: 1};
INV_INFOS[INV.HAMMER_REIDITE] = {name: "Reidite hammer", img: SPRITE.CRAFT_HAMMER_REIDITE, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_WALL] = {name: "Amethyst wall", img: SPRITE.CRAFT_AMETHYST_WALL, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_SPIKE] = {name: "Amethyst spike", img: SPRITE.CRAFT_AMETHYST_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_DOOR] = {name: "Amethyst door", img: SPRITE.CRAFT_DOOR_AMETHYST_CLOSE, grid: 0, recycle: 1};
INV_INFOS[INV.CAP_SCARF] = {name: "Cap & scarf", img: SPRITE.CRAFT_CAP_SCARF, grid: 0, recycle: 1};
INV_INFOS[INV.BLUE_CORD] = {name: "Blue cord", img: SPRITE.CRAFT_BLUE_CORD, grid: 0, recycle: 0};
INV_INFOS[INV.LOCK] = {name: "Lock", img: SPRITE.CRAFT_LOCK, grid: 0, recycle: 1};
INV_INFOS[INV.RESURRECTION] = {name: "Resurrection", img: SPRITE.CRAFT_RESURRECTION, grid: 0, recycle: 1};
INV_INFOS[INV.LOCKPICK] = {name: "Lockpick", img: SPRITE.CRAFT_LOCKPICK, grid: 0, recycle: 1};
INV_INFOS[INV.TOTEM] = {name: "Totem", img: SPRITE.CRAFT_TOTEM, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_HELMET] = {name: "Amethyst helmet", img: SPRITE.CRAFT_AMETHYST_HELMET, grid: 0, recycle: 1};
INV_INFOS[INV.SUPER_HAMMER] = {name: "Super hammer", img: SPRITE.CRAFT_SUPER_HAMMER, grid: 0, recycle: 1};
INV_INFOS[INV.BRIDGE] = {name: "Bridge", img: SPRITE.CRAFT_BRIDGE, grid: 1, recycle: 1};
INV_INFOS[INV.WOOD_TOWER] = {name: "Wood Tower", img: SPRITE.CRAFT_WOOD_TOWER, grid: 1, recycle: 1};
INV_INFOS[INV.BOTTLE_FULL] = {name: "Bottle full", img: SPRITE.CRAFT_BOTTLE_FULL, grid: 0, recycle: 0};
INV_INFOS[INV.BOTTLE_EMPTY] = {name: "Bottle empty", img: SPRITE.CRAFT_BOTTLE_EMPTY, grid: 0, recycle: 0};
INV_INFOS[INV.SHOVEL] = {name: "Stone shovel", img: SPRITE.CRAFT_SHOVEL, grid: 0, recycle: 1};
INV_INFOS[INV.WATERING_CAN] = {name: "Watering can", img: SPRITE.CRAFT_WATERING_CAN, grid: 0, recycle: 0};
INV_INFOS[INV.WHEAT_SEED] = {name: "Wheat", img: SPRITE.CRAFT_WHEAT_SEED, grid: 0, recycle: 0};
INV_INFOS[INV.COOKIE] = {name: "Cookie", img: SPRITE.CRAFT_COOKIE, grid: 0, recycle: 0};
INV_INFOS[INV.WINDMILL] = {name: "Windmill", img: SPRITE.CRAFT_WINDMILL, grid: 0, recycle: 1};
INV_INFOS[INV.SUPER_DIVING_SUIT] = {name: "Super diving suit", img: SPRITE.CRAFT_SUPER_DIVING_SUIT, grid: 0, recycle: 1};
INV_INFOS[INV.DIVING_MASK] = {name: "Diving mask", img: SPRITE.CRAFT_DIVING_MASK, grid: 0, recycle: 1};
INV_INFOS[INV.WATERING_CAN_FULL] = {name: "Watering can full", img: SPRITE.CRAFT_WATERING_CAN_FULL, grid: 0, recycle: 0};
INV_INFOS[INV.CAKE] = {name: "Cake", img: SPRITE.CRAFT_CAKE, grid: 0, recycle: 0};
INV_INFOS[INV.FOODFISH_COOKED] = {name: "Foodfish cooked", img: SPRITE.CRAFT_FOODFISH_COOKED, grid: 0, recycle: 0};
INV_INFOS[INV.PLOT] = {name: "Plot", img: SPRITE.CRAFT_PLOT, grid: 1, recycle: 1};
INV_INFOS[INV.BREAD] = {name: "Bread", img: SPRITE.CRAFT_BREAD, grid: 0, recycle: 0};
INV_INFOS[INV.BOTTLE_FULL_2] = {name: "Bottle full (with ice)", img: SPRITE.CRAFT_BOTTLE_FULL_2, grid: 0, recycle: 1};
INV_INFOS[INV.BOTTLE_FULL_3] = {name: "Bottle full (with well)", img: SPRITE.CRAFT_BOTTLE_FULL_3, grid: 0, recycle: 1};
INV_INFOS[INV.SHOVEL_GOLD] = {name: "Gold shovel", img: SPRITE.CRAFT_SHOVEL_GOLD, grid: 0, recycle: 1};
INV_INFOS[INV.SHOVEL_DIAMOND] = {name: "Diamond shovel", img: SPRITE.CRAFT_SHOVEL_DIAMOND, grid: 0, recycle: 1};
INV_INFOS[INV.SHOVEL_AMETHYST] = {name: "Amethyst shovel", img: SPRITE.CRAFT_SHOVEL_AMETHYST, grid: 0, recycle: 1};
INV_INFOS[INV.SPANNER] = {name: "Spanner", img: SPRITE.CRAFT_SPANNER, grid: 0, recycle: 1};
INV_INFOS[INV.MACHETE] = {name: "Machete", img: SPRITE.CRAFT_MACHETE, grid: 0, recycle: 1};
INV_INFOS[INV.BREAD_OVEN] = {name: "Bread oven", img: SPRITE.CRAFT_BREAD_OVEN, grid: 0, recycle: 1};
INV_INFOS[INV.SANDWICH] = {name: "Sandwich", img: SPRITE.CRAFT_SANDWICH, grid: 0, recycle: 0};
INV_INFOS[INV.DRAGON_HELMET] = {name: "Dragon helmet", img: SPRITE.CRAFT_DRAGON_HELMET, grid: 0, recycle: 0};
INV_INFOS[INV.LAVA_HELMET] = {name: "Dragon helmet", img: SPRITE.CRAFT_LAVA_HELMET, grid: 0, recycle: 0};
INV_INFOS[INV.WITCH] = {name: "Witch", img: SPRITE.CRAFT_WITCH, grid: 0, recycle: 0};
INV_INFOS[INV.NIMBUS] = {name: "Nimbus", img: SPRITE.CRAFT_NIMBUS, grid: 0, recycle: 0};
INV_INFOS[INV.WAND1] = {name: "Wand1", img: SPRITE.CRAFT_WAND1, grid: 0, recycle: 0};
INV_INFOS[INV.WAND2] = {name: "Wand2", img: SPRITE.CRAFT_WAND2, grid: 0, recycle: 0};
INV_INFOS[INV.DRAGON_SWORD] = {name: "Dragon sword", img: SPRITE.CRAFT_DRAGON_SWORD, grid: 0, recycle: 0};
INV_INFOS[INV.LAVA_SWORD] = {name: "Dragon sword", img: SPRITE.CRAFT_LAVA_SWORD, grid: 0, recycle: 0};
INV_INFOS[INV.WOOD_SHIELD] = {name: "Wood shield", img: SPRITE.CRAFT_WOOD_SHIELD, grid: 0, recycle: 1};
INV_INFOS[INV.STONE_SHIELD] = {name: "Stone shield", img: SPRITE.CRAFT_STONE_SHIELD, grid: 0, recycle: 1};
INV_INFOS[INV.GOLD_SHIELD] = {name: "Gold shield", img: SPRITE.CRAFT_GOLD_SHIELD, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_SHIELD] = {name: "Diamond shield", img: SPRITE.CRAFT_DIAMOND_SHIELD, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_SHIELD] = {name: "Amethyst shield", img: SPRITE.CRAFT_AMETHYST_SHIELD, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_SHIELD] = {name: "Reidite shield", img: SPRITE.CRAFT_REIDITE_SHIELD, grid: 0, recycle: 1};
INV_INFOS[INV.WOOD_BOW] = {name: "Wood bow", img: SPRITE.CRAFT_WOOD_BOW, grid: 0, recycle: 1};
INV_INFOS[INV.STONE_BOW] = {name: "Stone bow", img: SPRITE.CRAFT_STONE_BOW, grid: 0, recycle: 1};
INV_INFOS[INV.GOLD_BOW] = {name: "Gold bow", img: SPRITE.CRAFT_GOLD_BOW, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_BOW] = {name: "Diamond bow", img: SPRITE.CRAFT_DIAMOND_BOW, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_BOW] = {name: "Amethyst bow", img: SPRITE.CRAFT_AMETHYST_BOW, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_BOW] = {name: "Reidite bow", img: SPRITE.CRAFT_REIDITE_BOW, grid: 0, recycle: 1};
INV_INFOS[INV.DRAGON_BOW] = {name: "Dragon bow", img: SPRITE.CRAFT_DRAGON_BOW, grid: 0, recycle: 0};
INV_INFOS[INV.CROWN_GREEN] = {name: "Crown of life", img: SPRITE.CRAFT_CROWN_GREEN, grid: 0, recycle: 0};
INV_INFOS[INV.GEMME_GREEN] = {name: "Gem of life", img: SPRITE.INV_GEMME_GREEN, grid: 0, recycle: 0};
INV_INFOS[INV.DRAGON_ORB] = {name: "Orb of the dragon", img: SPRITE.INV_DRAGON_ORB, grid: 0, recycle: 0};
INV_INFOS[INV.LAVA_ORB] = {name: "Orb of the dragon", img: SPRITE.INV_LAVA_ORB, grid: 0, recycle: 0};
INV_INFOS[INV.DRAGON_CUBE] = {name: "Cube of the dragon", img: SPRITE.INV_DRAGON_CUBE, grid: 0, recycle: 0};
INV_INFOS[INV.LAVA_CUBE] = {name: "Cube of the dragon", img: SPRITE.INV_LAVA_CUBE, grid: 0, recycle: 0};
INV_INFOS[INV.CROWN_ORANGE] = {name: "Crown of luck", img: SPRITE.CRAFT_CROWN_ORANGE, grid: 0, recycle: 0};
INV_INFOS[INV.GEMME_ORANGE] = {name: "Gem of luck", img: SPRITE.INV_GEMME_ORANGE, grid: 0, recycle: 0};
INV_INFOS[INV.CROWN_BLUE] = {name: "Crown of the angel", img: SPRITE.CRAFT_CROWN_BLUE, grid: 0, recycle: 0};
INV_INFOS[INV.GEMME_BLUE] = {name: "Gem of the angel", img: SPRITE.INV_GEMME_BLUE, grid: 0, recycle: 0};
INV_INFOS[INV.DRAGON_HEART] = {name: "Dragon heart", img: SPRITE.INV_DRAGON_HEART, grid: 0, recycle: 0};
INV_INFOS[INV.LAVA_HEART] = {name: "Lava heart", img: SPRITE.INV_LAVA_HEART, grid: 0, recycle: 0};
INV_INFOS[INV.HOOD] = {name: "Hood", img: SPRITE.CRAFT_HOOD, grid: 0, recycle: 1};
INV_INFOS[INV.PEASANT] = {name: "Peasant", img: SPRITE.CRAFT_PEASANT, grid: 0, recycle: 1};
INV_INFOS[INV.WINTER_PEASANT] = {name: "Winter peasant", img: SPRITE.CRAFT_WINTER_PEASANT, grid: 0, recycle: 0};
INV_INFOS[INV.WINTER_HOOD] = {name: "Winter hood", img: SPRITE.CRAFT_WINTER_HOOD, grid: 0, recycle: 0};
INV_INFOS[INV.BUCKET_FULL] = {name: "Bucket full", img: SPRITE.CRAFT_BUCKET_FULL, grid: 0, recycle: 0};
INV_INFOS[INV.BUCKET_EMPTY] = {name: "Bucket empty", img: SPRITE.CRAFT_BUCKET_EMPTY, grid: 0, recycle: 1};
INV_INFOS[INV.WELL] = {name: "Well", img: SPRITE.CRAFT_WELL, grid: 0, recycle: 1};
INV_INFOS[INV.SIGN] = {name: "Sign", img: SPRITE.CRAFT_SIGN, grid: 0, recycle: 1};
INV_INFOS[INV.PUMPKIN_SEED] = {name: "Pumpkin Seed", img: SPRITE.CRAFT_PUMPKIN_SEED, grid: 0, recycle: 0};
INV_INFOS[INV.GARLIC_SEED] = {name: "Garlic Seed", img: SPRITE.CRAFT_GARLIC_SEED, grid: 0, recycle: 0};
INV_INFOS[INV.THORNBUSH_SEED] = {name: "Thorbushes Seed", img: SPRITE.CRAFT_THORNBUSH_SEED, grid: 0, recycle: 0};
INV_INFOS[INV.ROOF] = {name: "Roof", img: SPRITE.CRAFT_ROOF, grid: 1, recycle: 1};
INV_INFOS[INV.CROWN_CRAB] = {name: "Crab Crown", img: SPRITE.CRAFT_CROWN_CRAB, grid: 0, recycle: 1};
INV_INFOS[INV.CARROT_SEED] = {name: "Carrot Seed", img: SPRITE.CRAFT_CARROT_SEED, grid: 0, recycle: 0};
INV_INFOS[INV.TOMATO_SEED] = {name: "Tomato Seed", img: SPRITE.CRAFT_TOMATO_SEED, grid: 0, recycle: 0};
INV_INFOS[INV.WATERMELON_SEED] = {name: "Watermelon Seed", img: SPRITE.CRAFT_WATERMELON_SEED, grid: 0, recycle: 0};
INV_INFOS[INV.ALOE_VERA_SEED] = {name: "Aloe Vera Seed", img: SPRITE.CRAFT_ALOE_VERA_SEED, grid: 0, recycle: 0};
INV_INFOS[INV.TURBAN1] = {name: "Cap", img: SPRITE.CRAFT_TURBAN1, grid: 0, recycle: 1};
INV_INFOS[INV.TURBAN2] = {name: "Turban", img: SPRITE.CRAFT_TURBAN2, grid: 0, recycle: 1};
INV_INFOS[INV.PILOT_HELMET] = {name: "Pilot Helmet", img: SPRITE.CRAFT_PILOT_HELMET, grid: 0, recycle: 1};
INV_INFOS[INV.EMERALD_MACHINE] = {name: "Emerald Machine", img: SPRITE.CRAFT_EMERALD_MACHINE, grid: 0, recycle: 0};
INV_INFOS[INV.EXTRACTOR_MACHINE_STONE] = {name: "Emerald Machine", img: SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE, grid: 0, recycle: 1};
INV_INFOS[INV.EXTRACTOR_MACHINE_GOLD] = {name: "Emerald Machine", img: SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD, grid: 0, recycle: 1};
INV_INFOS[INV.EXTRACTOR_MACHINE_DIAMOND] = {name: "Emerald Machine", img: SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND, grid: 0, recycle: 1};
INV_INFOS[INV.EXTRACTOR_MACHINE_AMETHYST] = {name: "Emerald Machine", img: SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST, grid: 0, recycle: 1};
INV_INFOS[INV.EXTRACTOR_MACHINE_REIDITE] = {name: "Emerald Machine", img: SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE, grid: 0, recycle: 1};
INV_INFOS[INV.PITCHFORK] = {name: "Pitchfork", img: SPRITE.CRAFT_PITCHFORK, grid: 0, recycle: 1};
INV_INFOS[INV.WOOD_DOOR_SPIKE] = {name: "Wood Door Spike", img: SPRITE.CRAFT_WOOD_DOOR_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.STONE_DOOR_SPIKE] = {name: "Stone Door Spike", img: SPRITE.CRAFT_STONE_DOOR_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.GOLD_DOOR_SPIKE] = {name: "Gold Door Spike", img: SPRITE.CRAFT_GOLD_DOOR_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_DOOR_SPIKE] = {name: "Diamond Door Spike", img: SPRITE.CRAFT_DIAMOND_DOOR_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_DOOR_SPIKE] = {name: "Amethyst Door Spike", img: SPRITE.CRAFT_AMETHYST_DOOR_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.DIAMOND_PROTECTION] = {name: "Diamond Fire Protection ", img: SPRITE.CRAFT_DIAMOND_PROTECTION, grid: 0, recycle: 1};
INV_INFOS[INV.AMETHYST_PROTECTION] = {name: "Amethyst Fire Protection ", img: SPRITE.CRAFT_AMETHYST_PROTECTION, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_PROTECTION] = {name: "Amethyst Fire Protection ", img: SPRITE.CRAFT_REIDITE_PROTECTION, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_SWORD] = {name: "Reidite Sword", img: SPRITE.CRAFT_REIDITE_SWORD, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_SPEAR] = {name: "Reidite Spear", img: SPRITE.CRAFT_REIDITE_SPEAR, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_HELMET] = {name: "Reidite Helmet", img: SPRITE.CRAFT_REIDITE_HELMET, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_DOOR_SPIKE] = {name: "Reidite Door Spike", img: SPRITE.CRAFT_REIDITE_DOOR_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_DOOR] = {name: "Reidite Door", img: SPRITE.CRAFT_REIDITE_DOOR, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_SPIKE] = {name: "Reidite Spike", img: SPRITE.CRAFT_REIDITE_SPIKE, grid: 0, recycle: 1};
INV_INFOS[INV.REIDITE_WALL] = {name: "Reidite Wall", img: SPRITE.CRAFT_REIDITE_WALL, grid: 0, recycle: 1};
INV_INFOS[INV.PICK_REIDITE] = {name: "Reidite pick", img: SPRITE.CRAFT_PICK_REIDITE, grid: 0, recycle: 1};
INV_INFOS[INV.BOAT] = {name: "Boat", img: SPRITE.CRAFT_BOAT, grid: 0, recycle: 1};
INV_INFOS[INV.SLED] = {name: "Sled", img: SPRITE.CRAFT_SLED, grid: 0, recycle: 1};
INV_INFOS[INV.SADDLE] = {name: "Saddle", img: SPRITE.CRAFT_SADDLE, grid: 0, recycle: 1};
INV_INFOS[INV.MOUNT_BOAR] = {name: "Mount Boar", img: SPRITE.CRAFT_MOUNT_BOAR, grid: 0, recycle: 0};
INV_INFOS[INV.CRAB_BOSS] = {name: "Mount King Crab", img: SPRITE.CRAFT_CRAB_BOSS, grid: 0, recycle: 0};
INV_INFOS[INV.BABY_DRAGON] = {name: "Mount Baby Dragon", img: SPRITE.CRAFT_BABY_DRAGON, grid: 0, recycle: 0};
INV_INFOS[INV.BABY_LAVA] = {name: "Mount Baby Lava", img: SPRITE.CRAFT_BABY_LAVA, grid: 0, recycle: 0};
INV_INFOS[INV.HAWK] = {name: "Mount Hawk", img: SPRITE.CRAFT_HAWK, grid: 0, recycle: 0};
INV_INFOS[INV.PLANE] = {name: "Plane", img: SPRITE.CRAFT_PLANE, grid: 0, recycle: 0};
INV_INFOS[INV.PITCHFORK2] = {name: "Pitchfork 2", img: SPRITE.CRAFT_PITCHFORK2, grid: 0, recycle: 0};
INV_INFOS[INV.BABY_MAMMOTH] = {name: "Baby Mammoth", img: SPRITE.CRAFT_BABY_MAMMOTH, grid: 0, recycle: 0};
var OLD_RECIPES = undefined, RECIPES = [{r: [[INV.WOOD, 25], [INV.STONE, 5]], w: 0, f: 0, o: 0, e: 0, id: CRAFT.FIRE, id2: INV.FIRE, time: .2, t: CATEGORY.UTILS}, {r: [[INV.FIRE, 1], [INV.WOOD, 35], [INV.STONE, 10]], w: 0, f: 0, o: 0, e: 0, id: CRAFT.BIG_FIRE, id2: INV.BIG_FIRE, time: .2, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 150], [INV.STONE, 50], [INV.GOLD, 15]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.FURNACE, id2: INV.FURNACE, time: .05, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 20], [INV.STONE, 10]], w: 0, f: 0, o: 0, e: 0, id: CRAFT.WORKBENCH, id2: INV.WORKBENCH, time: .16666666666666666, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 10]], w: 0, f: 0, o: 0, e: 0, id: CRAFT.PICK_WOOD, id2: INV.PICK_WOOD, time: .3333333333333333, t: CATEGORY.TOOLS}, {r: [[INV.PICK_WOOD, 1], [INV.WOOD, 50], [INV.STONE, 15]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PICK, id2: INV.PICK, time: .125, t: CATEGORY.TOOLS}, {r: [[INV.WOOD, 40], [INV.GOLD, 20], [INV.STONE, 30], [INV.PICK, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PICK_GOLD, id2: INV.PICK_GOLD, time: .08333333333333333, t: CATEGORY.TOOLS}, {r: [[INV.DIAMOND, 20], [INV.GOLD, 50], [INV.STONE, 80], [INV.PICK_GOLD, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PICK_DIAMOND, id2: INV.PICK_DIAMOND, time: .05, t: CATEGORY.TOOLS}, {r: [[INV.DIAMOND, 40], [INV.GOLD, 60], [INV.AMETHYST, 30], [INV.PICK_DIAMOND, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PICK_AMETHYST, id2: INV.PICK_AMETHYST, time: .016666666666666666, t: CATEGORY.TOOLS}, {r: [[INV.AMETHYST, 30], [INV.DIAMOND, 40], [INV.REIDITE, 30], [INV.PICK_AMETHYST, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PICK_REIDITE, id2: INV.PICK_REIDITE, time: .011111111111111112, t: CATEGORY.TOOLS}, {r: [[INV.WOOD, 90], [INV.STONE, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.HAMMER, id2: INV.HAMMER, time: .1, t: CATEGORY.TOOLS}, {r: [[INV.WOOD, 160], [INV.STONE, 120], [INV.GOLD, 80], [INV.HAMMER, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.HAMMER_GOLD, id2: INV.HAMMER_GOLD, time: .06666666666666667, t: CATEGORY.TOOLS}, {r: [[INV.DIAMOND, 80], [INV.STONE, 200], [INV.GOLD, 150], [INV.HAMMER_GOLD, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.HAMMER_DIAMOND, id2: INV.HAMMER_DIAMOND, time: .05, t: CATEGORY.TOOLS}, {r: [[INV.DIAMOND, 160], [INV.AMETHYST, 60], [INV.GOLD, 250], [INV.HAMMER_DIAMOND, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.HAMMER_AMETHYST, id2: INV.HAMMER_AMETHYST, time: .016666666666666666, t: CATEGORY.TOOLS}, {r: [[INV.AMETHYST, 160], [INV.REIDITE, 60], [INV.DIAMOND, 250], [INV.HAMMER_AMETHYST, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.HAMMER_REIDITE, id2: INV.HAMMER_REIDITE, time: .011111111111111112, t: CATEGORY.TOOLS}, {r: [[INV.HAMMER_REIDITE, 1], [INV.BOTTLE_FULL, 1], [INV.KRAKEN_SKIN, 1], [INV.SCALES, 10], [INV.AMETHYST, 20]], w: 1, f: 1, o: 0, e: 0, id: CRAFT.SUPER_HAMMER, id2: INV.SUPER_HAMMER, time: .008333333333333333, t: CATEGORY.TOOLS}, {r: [[INV.WOOD, 30], [INV.STONE, 15]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SHOVEL, id2: INV.SHOVEL, time: .2, t: CATEGORY.TOOLS}, {r: [[INV.SHOVEL, 1], [INV.GOLD, 20], [INV.STONE, 30], [INV.WOOD, 40]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SHOVEL_GOLD, id2: INV.SHOVEL_GOLD, time: .1, t: CATEGORY.TOOLS}, {r: [[INV.SHOVEL_GOLD, 1], [INV.DIAMOND, 20], [INV.GOLD, 50], [INV.STONE, 80]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SHOVEL_DIAMOND, id2: INV.SHOVEL_DIAMOND, time: .05, t: CATEGORY.TOOLS}, {r: [[INV.SHOVEL_DIAMOND, 1], [INV.GOLD, 60], [INV.AMETHYST, 30], [INV.DIAMOND, 40]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SHOVEL_AMETHYST, id2: INV.SHOVEL_AMETHYST, time: .025, t: CATEGORY.TOOLS}, {r: [[INV.WOOD, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WATERING_CAN, id2: INV.WATERING_CAN, time: .2, t: CATEGORY.TOOLS}, {r: [[INV.WATERING_CAN, 1]], w: 0, f: 0, o: 1, e: 0, id: CRAFT.WATERING_CAN_FULL, id2: INV.WATERING_CAN_FULL, time: .2, t: CATEGORY.TOOLS}, {r: [[INV.WOOD, 100], [INV.STONE, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PITCHFORK, id2: INV.PITCHFORK, time: .1, t: CATEGORY.TOOLS}, {r: [[INV.PITCHFORK, 1], [INV.PITCHFORK_PART, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PITCHFORK2, id2: INV.PITCHFORK2, time: .016666666666666666, t: CATEGORY.TOOLS}, {r: [[INV.PAPER, 4], [INV.CORD, 4], [INV.FUR_WOLF, 4]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.BOOK, id2: INV.BOOK, time: .06666666666666667, t: CATEGORY.TOOLS}, {r: [[INV.WOOD, 40]], w: 0, f: 0, o: 0, e: 0, id: CRAFT.WOOD_SPEAR, id2: INV.WOOD_SPEAR, time: .2, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD_SPEAR, 1], [INV.WOOD, 60], [INV.STONE, 10]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SPEAR, id2: INV.SPEAR, time: .1, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD, 80], [INV.GOLD, 30], [INV.STONE, 30], [INV.SPEAR, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.GOLD_SPEAR, id2: INV.GOLD_SPEAR, t: CATEGORY.WEAPONS, time: .05}, {r: [[INV.WOOD, 200], [INV.DIAMOND, 40], [INV.GOLD, 60], [INV.GOLD_SPEAR, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIAMOND_SPEAR, id2: INV.DIAMOND_SPEAR, time: .03333333333333333, t: CATEGORY.WEAPONS}, {r: [[INV.AMETHYST, 40], [INV.DIAMOND, 80], [INV.GOLD, 90], [INV.DIAMOND_SPEAR, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.AMETHYST_SPEAR, id2: INV.AMETHYST_SPEAR, time: .016666666666666666, t: CATEGORY.WEAPONS}, {r: [[INV.REIDITE, 40], [INV.AMETHYST, 80], [INV.DIAMOND, 90], [INV.AMETHYST_SPEAR, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.REIDITE_SPEAR, id2: INV.REIDITE_SPEAR, time: .011111111111111112, t: CATEGORY.WEAPONS}, {r: [[INV.BLUE_CORD, 20], [INV.DRAGON_ORB, 1], [INV.AMETHYST, 100], [INV.DRAGON_HEART, 3]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.DRAGON_SPEAR, id2: INV.DRAGON_SPEAR, time: .008333333333333333, t: CATEGORY.WEAPONS}, {r: [[INV.DRAGON_SPEAR, 1], [INV.LAVA_ORB, 1], [INV.REIDITE, 100], [INV.LAVA_HEART, 2]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.LAVA_SPEAR, id2: INV.LAVA_SPEAR, time: .005, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD_SPEAR, 1], [INV.CRAB_LOOT, 5], [INV.CORD, 6]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.CRAB_SPEAR, id2: INV.CRAB_SPEAR, time: .03333333333333333, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD, 30]], w: 0, f: 0, o: 0, e: 0, id: CRAFT.SWORD_WOOD, id2: INV.SWORD_WOOD, time: .2, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD, 50], [INV.STONE, 25], [INV.SWORD_WOOD, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SWORD, id2: INV.SWORD, time: .1, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD, 60], [INV.GOLD, 40], [INV.STONE, 50], [INV.SWORD, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SWORD_GOLD, id2: INV.SWORD_GOLD, time: .05, t: CATEGORY.WEAPONS}, {r: [[INV.DIAMOND, 40], [INV.GOLD, 60], [INV.STONE, 80], [INV.SWORD_GOLD, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SWORD_DIAMOND, id2: INV.SWORD_DIAMOND, time: .03333333333333333, t: CATEGORY.WEAPONS}, {r: [[INV.DIAMOND, 60], [INV.GOLD, 100], [INV.AMETHYST, 40], [INV.SWORD_DIAMOND, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SWORD_AMETHYST, id2: INV.SWORD_AMETHYST, time: .016666666666666666, t: CATEGORY.WEAPONS}, {r: [[INV.DIAMOND, 100], [INV.AMETHYST, 80], [INV.REIDITE, 40], [INV.SWORD_AMETHYST, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.REIDITE_SWORD, id2: INV.REIDITE_SWORD, time: .011111111111111112, t: CATEGORY.WEAPONS}, {r: [[INV.PLANT, 3]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.SEED, id2: INV.SEED, time: .2, t: CATEGORY.FOODS}, {r: [[INV.WILD_WHEAT, 3]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.WHEAT_SEED, id2: INV.WHEAT_SEED, time: .2, t: CATEGORY.FOODS}, {r: [[INV.PUMPKIN, 8]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.PUMPKIN_SEED, id2: INV.PUMPKIN_SEED, time: .2, t: CATEGORY.FOODS}, {r: [[INV.GARLIC, 8]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.GARLIC_SEED, id2: INV.GARLIC_SEED, time: .2, t: CATEGORY.FOODS}, {r: [[INV.THORNBUSH, 8]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.THORNBUSH_SEED, id2: INV.THORNBUSH_SEED, time: .2, t: CATEGORY.FOODS}, {r: [[INV.CARROT, 8]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.CARROT_SEED, id2: INV.CARROT_SEED, time: .2, t: CATEGORY.FOODS}, {r: [[INV.TOMATO, 8]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.TOMATO_SEED, id2: INV.TOMATO_SEED, time: .2, t: CATEGORY.FOODS}, {r: [[INV.WATERMELON, 16]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.WATERMELON_SEED, id2: INV.WATERMELON_SEED, time: .2, t: CATEGORY.FOODS}, {r: [[INV.ALOE_VERA, 16]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.ALOE_VERA_SEED, id2: INV.ALOE_VERA_SEED, time: .2, t: CATEGORY.FOODS}, {r: [[INV.MEAT, 1]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.COOKED_MEAT, id2: INV.COOKED_MEAT, time: .2, t: CATEGORY.FOODS}, {r: [[INV.FOODFISH, 1]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.FOODFISH_COOKED, id2: INV.FOODFISH_COOKED, time: .3333333333333333, t: CATEGORY.FOODS}, {r: [[INV.FLOUR, 3]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.BREAD, id2: INV.BREAD, time: .3333333333333333, t: CATEGORY.FOODS}, {r: [[INV.FLOUR, 3], [INV.PLANT, 1]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.COOKIE, id2: INV.COOKIE, time: .3333333333333333, t: CATEGORY.FOODS}, {r: [[INV.FLOUR, 5], [INV.PLANT, 2], [INV.ICE, 2]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.CAKE, id2: INV.CAKE, time: .2, t: CATEGORY.FOODS}, {r: [[INV.CORD, 2]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.BANDAGE, id2: INV.BANDAGE, time: .2, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 20]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WALL, id2: INV.WALL, time: .2, t: CATEGORY.BASES}, {r: [[INV.WALL, 1], [INV.STONE, 17]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.STONE_WALL, id2: INV.STONE_WALL, time: .2, t: CATEGORY.BASES}, {r: [[INV.STONE_WALL, 1], [INV.GOLD, 14]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.GOLD_WALL, id2: INV.GOLD_WALL, time: .2, t: CATEGORY.BASES}, {r: [[INV.GOLD_WALL, 1], [INV.DIAMOND, 11]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIAMOND_WALL, id2: INV.DIAMOND_WALL, time: .2, t: CATEGORY.BASES}, {r: [[INV.DIAMOND_WALL, 1], [INV.AMETHYST, 8]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.AMETHYST_WALL, id2: INV.AMETHYST_WALL, time: .2, t: CATEGORY.BASES}, {r: [[INV.AMETHYST_WALL, 1], [INV.REIDITE, 5]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.REIDITE_WALL, id2: INV.REIDITE_WALL, time: .2, t: CATEGORY.BASES}, {r: [[INV.WOOD, 30]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WOOD_DOOR, id2: INV.WOOD_DOOR, time: .125, t: CATEGORY.BASES}, {r: [[INV.WOOD_DOOR, 1], [INV.STONE, 27]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.STONE_DOOR, id2: INV.STONE_DOOR, time: .125, t: CATEGORY.BASES}, {r: [[INV.STONE_DOOR, 1], [INV.GOLD, 24]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.GOLD_DOOR, id2: INV.GOLD_DOOR, time: .125, t: CATEGORY.BASES}, {r: [[INV.GOLD_DOOR, 1], [INV.DIAMOND, 21]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIAMOND_DOOR, id2: INV.DIAMOND_DOOR, time: .125, t: CATEGORY.BASES}, {r: [[INV.DIAMOND_DOOR, 1], [INV.AMETHYST, 18]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.AMETHYST_DOOR, id2: INV.AMETHYST_DOOR, time: .125, t: CATEGORY.BASES}, {r: [[INV.AMETHYST_DOOR, 1], [INV.REIDITE, 15]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.REIDITE_DOOR, id2: INV.REIDITE_DOOR, time: .125, t: CATEGORY.BASES}, {r: [[INV.WALL, 1], [INV.WOOD, 40], [INV.STONE, 30]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SPIKE, id2: INV.SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.STONE_WALL, 1], [INV.STONE, 70]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.STONE_SPIKE, id2: INV.STONE_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.GOLD_WALL, 1], [INV.GOLD, 40], [INV.STONE, 30]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.GOLD_SPIKE, id2: INV.GOLD_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.DIAMOND_WALL, 1], [INV.DIAMOND, 40], [INV.STONE, 30]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIAMOND_SPIKE, id2: INV.DIAMOND_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.AMETHYST_WALL, 1], [INV.AMETHYST, 40], [INV.STONE, 30]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.AMETHYST_SPIKE, id2: INV.AMETHYST_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.REIDITE_WALL, 1], [INV.REIDITE, 40], [INV.GOLD, 30]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.REIDITE_SPIKE, id2: INV.REIDITE_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.WOOD_DOOR, 1], [INV.WOOD, 80], [INV.STONE, 60]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WOOD_DOOR_SPIKE, id2: INV.WOOD_DOOR_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.STONE_DOOR, 1], [INV.STONE, 140]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.STONE_DOOR_SPIKE, id2: INV.STONE_DOOR_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.GOLD_DOOR, 1], [INV.GOLD, 80], [INV.STONE, 60]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.GOLD_DOOR_SPIKE, id2: INV.GOLD_DOOR_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.DIAMOND_DOOR, 1], [INV.DIAMOND, 80], [INV.STONE, 60]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIAMOND_DOOR_SPIKE, id2: INV.DIAMOND_DOOR_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.AMETHYST_DOOR, 1], [INV.AMETHYST, 80], [INV.STONE, 60]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.AMETHYST_DOOR_SPIKE, id2: INV.AMETHYST_DOOR_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.REIDITE_DOOR, 1], [INV.REIDITE, 80], [INV.GOLD, 60]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.REIDITE_DOOR_SPIKE, id2: INV.REIDITE_DOOR_SPIKE, time: .05, t: CATEGORY.BASES}, {r: [[INV.WOOD, 25], [INV.GOLD, 2]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.CHEST, id2: INV.CHEST, time: .2, t: CATEGORY.UTILS}, {r: [[INV.PAPER, 1], [INV.FUR, 1], [INV.CORD, 2]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.EXPLORER_HAT, id2: INV.EXPLORER_HAT, time: .2, t: CATEGORY.CLOTHES}, {r: [[INV.PAPER, 5], [INV.PENGUIN_FEATHER, 20], [INV.BLUE_CORD, 5], [INV.FUR, 5]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PIRATE_HAT, id2: INV.PIRATE_HAT, time: .03333333333333333, t: CATEGORY.CLOTHES}, {r: [[INV.PILOT_GLASSES, 1], [INV.HAWK_FEATHER, 8], [INV.VULTURE_FEATHER, 8], [INV.PENGUIN_FEATHER, 8], [INV.CORD, 6]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PILOT_HELMET, id2: INV.PILOT_HELMET, time: .016666666666666666, t: CATEGORY.CLOTHES}, {r: [[INV.FUR, 1], [INV.CORD, 2]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.EARMUFFS, id2: INV.EARMUFFS, time: .2, t: CATEGORY.CLOTHES}, {r: [[INV.EARMUFFS, 1], [INV.FUR_WOLF, 5], [INV.CORD, 4]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.COAT, id2: INV.COAT, time: .08333333333333333, t: CATEGORY.CLOTHES}, {r: [[INV.COAT, 1], [INV.FUR_WINTER, 5], [INV.BLUE_CORD, 4]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.CAP_SCARF, id2: INV.CAP_SCARF, time: .03333333333333333, t: CATEGORY.CLOTHES}, {r: [[INV.CAP_SCARF, 1], [INV.FUR_WINTER, 5], [INV.FUR_MAMMOTH, 10], [INV.BLUE_CORD, 4]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.FUR_HAT, id2: INV.FUR_HAT, time: .02, t: CATEGORY.CLOTHES}, {r: [[INV.WOOD, 50]], w: 0, f: 0, o: 0, e: 0, id: CRAFT.WOOD_HELMET, id2: INV.WOOD_HELMET, time: .2, t: CATEGORY.CLOTHES}, {r: [[INV.STONE, 75], [INV.WOOD, 75], [INV.WOOD_HELMET, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.STONE_HELMET, id2: INV.STONE_HELMET, time: .1, t: CATEGORY.CLOTHES}, {r: [[INV.STONE, 90], [INV.WOOD, 90], [INV.GOLD, 90], [INV.STONE_HELMET, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.GOLD_HELMET, id2: INV.GOLD_HELMET, time: .05, t: CATEGORY.CLOTHES}, {r: [[INV.STONE, 100], [INV.GOLD, 100], [INV.DIAMOND, 100], [INV.GOLD_HELMET, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIAMOND_HELMET, id2: INV.DIAMOND_HELMET, time: .03333333333333333, t: CATEGORY.CLOTHES}, {r: [[INV.AMETHYST, 80], [INV.GOLD, 150], [INV.DIAMOND, 120], [INV.DIAMOND_HELMET, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.AMETHYST_HELMET, id2: INV.AMETHYST_HELMET, time: .016666666666666666, t: CATEGORY.CLOTHES}, {r: [[INV.REIDITE, 80], [INV.DIAMOND, 150], [INV.AMETHYST, 120], [INV.AMETHYST_HELMET, 1]], w: 1, f: 1, o: 0, e: 0, id: CRAFT.REIDITE_HELMET, id2: INV.REIDITE_HELMET, time: .011111111111111112, t: CATEGORY.CLOTHES}, {r: [[INV.SCALES, 2], [INV.DIAMOND, 40], [INV.CORD, 4]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIVING_MASK, id2: INV.DIVING_MASK, time: .05, t: CATEGORY.CLOTHES}, {r: [[INV.DIVING_MASK, 1], [INV.GOLD, 80], [INV.KRAKEN_SKIN, 1], [INV.AMETHYST, 20]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SUPER_DIVING_SUIT, id2: INV.SUPER_DIVING_SUIT, time: .011111111111111112, t: CATEGORY.CLOTHES}, {r: [[INV.FLAME, 5], [INV.DIAMOND, 50], [INV.BLUE_CORD, 5]], w: 1, f: 1, o: 0, e: 0, id: CRAFT.DIAMOND_PROTECTION, id2: INV.DIAMOND_PROTECTION, time: .05, t: CATEGORY.CLOTHES}, {r: [[INV.DIAMOND_PROTECTION, 1], [INV.FLAME, 10], [INV.AMETHYST, 50]], w: 1, f: 1, o: 0, e: 0, id: CRAFT.AMETHYST_PROTECTION, id2: INV.AMETHYST_PROTECTION, time: .016666666666666666, t: CATEGORY.CLOTHES}, {r: [[INV.AMETHYST_PROTECTION, 1], [INV.FLAME, 15], [INV.AMETHYST, 50], [INV.REIDITE, 50]], w: 1, f: 1, o: 0, e: 0, id: CRAFT.REIDITE_PROTECTION, id2: INV.REIDITE_PROTECTION, time: .011111111111111112, t: CATEGORY.CLOTHES}, {r: [[INV.CORD, 4], [INV.FUR_BOAR, 2]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.TURBAN1, id2: INV.TURBAN1, time: .06666666666666667, t: CATEGORY.CLOTHES}, {r: [[INV.TURBAN1, 1], [INV.CORD, 6], [INV.FUR_BOAR, 4], [INV.VULTURE_FEATHER, 12], [INV.PENGUIN_FEATHER, 4]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.TURBAN2, id2: INV.TURBAN2, time: .006666666666666667, t: CATEGORY.CLOTHES}, {r: [[INV.CORD, 6], [INV.FUR_WOLF, 5]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.BAG, id2: INV.BAG, time: .06666666666666667, t: CATEGORY.CLOTHES}, {r: [[INV.WOOD, 20]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.PAPER, id2: INV.PAPER, time: .3333333333333333, t: CATEGORY.UTILS}, {r: [[INV.DIAMOND, 1], [INV.CORD, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.BLUE_CORD, id2: INV.BLUE_CORD, time: .3333333333333333, t: CATEGORY.UTILS}, {r: [[INV.GOLD, 10]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.LOCK, id2: INV.LOCK, time: .2, t: CATEGORY.UTILS}, {r: [[INV.GOLD, 250]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.LOCKPICK, id2: INV.LOCKPICK, time: .016666666666666666, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.TOTEM, id2: INV.TOTEM, time: .1, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 15]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.BRIDGE, id2: INV.BRIDGE, time: .2, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 30]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.ROOF, id2: INV.ROOF, time: .2, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 120]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WOOD_TOWER, id2: INV.WOOD_TOWER, time: .06666666666666667, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 20], [INV.GROUND, 15]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PLOT, id2: INV.PLOT, time: .2, t: CATEGORY.UTILS}, {r: [[INV.SAND, 25]], w: 1, f: 1, o: 0, e: 0, id: CRAFT.BOTTLE_EMPTY, id2: INV.BOTTLE_EMPTY, time: .2, t: CATEGORY.FOODS}, {r: [[INV.BOTTLE_EMPTY, 1]], w: 0, f: 0, o: 1, e: 0, id: CRAFT.BOTTLE_FULL, id2: INV.BOTTLE_FULL, time: .2, t: CATEGORY.FOODS}, {r: [[INV.ICE, 20], [INV.BOTTLE_EMPTY, 1]], w: 0, f: 1, o: 0, e: 0, id: CRAFT.BOTTLE_FULL_2, id2: INV.BOTTLE_FULL, time: .1, t: CATEGORY.FOODS}, {r: [[INV.BOTTLE_EMPTY, 1]], w: 0, f: 0, o: 0, e: 1, id: CRAFT.BOTTLE_FULL_3, id2: INV.BOTTLE_FULL, time: .3333333333333333, t: CATEGORY.FOODS}, {r: [[INV.WOOD, 60], [INV.STONE, 20], [INV.CORD, 2]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WINDMILL, id2: INV.WINDMILL, time: .1, t: CATEGORY.UTILS}, {r: [[INV.DIAMOND, 40], [INV.STONE, 45]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.RESURRECTION, id2: INV.RESURRECTION, time: .05, t: CATEGORY.UTILS}, {r: [[INV.RESURRECTION, 1], [INV.EMERALD, 40], [INV.SANDWORM_JUICE, 1]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.EMERALD_MACHINE, id2: INV.EMERALD_MACHINE, time: .005, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 50], [INV.STONE, 100]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.EXTRACTOR_MACHINE_STONE, id2: INV.EXTRACTOR_MACHINE_STONE, time: .011111111111111112, t: CATEGORY.UTILS}, {r: [[INV.STONE, 60], [INV.GOLD, 120]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.EXTRACTOR_MACHINE_GOLD, id2: INV.EXTRACTOR_MACHINE_GOLD, time: .011111111111111112, t: CATEGORY.UTILS}, {r: [[INV.GOLD, 70], [INV.DIAMOND, 140]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.EXTRACTOR_MACHINE_DIAMOND, id2: INV.EXTRACTOR_MACHINE_DIAMOND, time: .011111111111111112, t: CATEGORY.UTILS}, {r: [[INV.DIAMOND, 80], [INV.AMETHYST, 160]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.EXTRACTOR_MACHINE_AMETHYST, id2: INV.EXTRACTOR_MACHINE_AMETHYST, time: .011111111111111112, t: CATEGORY.UTILS}, {r: [[INV.AMETHYST, 90], [INV.REIDITE, 180]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.EXTRACTOR_MACHINE_REIDITE, id2: INV.EXTRACTOR_MACHINE_REIDITE, time: .011111111111111112, t: CATEGORY.UTILS}, {r: [[INV.STONE, 70]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SPANNER, id2: INV.SPANNER, time: .1, t: CATEGORY.TOOLS}, {r: [[INV.STONE, 70], [INV.WOOD, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.MACHETE, id2: INV.MACHETE, time: .1, t: CATEGORY.TOOLS}, {r: [[INV.WOOD, 40], [INV.STONE, 40]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.BREAD_OVEN, id2: INV.BREAD_OVEN, time: .1, t: CATEGORY.UTILS}, {r: [[INV.BREAD, 1], [INV.COOKED_MEAT, 1]], w: 0, f: 0, o: 0, e: 0, id: CRAFT.SANDWICH, id2: INV.SANDWICH, time: .3333333333333333, t: CATEGORY.FOODS}, {r: [[INV.BLUE_CORD, 30], [INV.DRAGON_CUBE, 1], [INV.AMETHYST, 150], [INV.DRAGON_HEART, 3]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.DRAGON_HELMET, id2: INV.DRAGON_HELMET, time: .008333333333333333, t: CATEGORY.CLOTHES}, {r: [[INV.DRAGON_HELMET, 1], [INV.LAVA_CUBE, 1], [INV.REIDITE, 150], [INV.LAVA_HEART, 2]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.LAVA_HELMET, id2: INV.LAVA_HELMET, time: .005555555555555556, t: CATEGORY.CLOTHES}, {r: [[INV.GOLD_HELMET, 1], [INV.CRAB_LOOT, 10], [INV.CRAB_STICK, 10], [INV.CORD, 10]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.CROWN_CRAB, id2: INV.CROWN_CRAB, time: .016666666666666666, t: CATEGORY.CLOTHES}, {r: [[INV.BLUE_CORD, 20], [INV.DRAGON_ORB, 1], [INV.AMETHYST, 150], [INV.DRAGON_HEART, 3]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.DRAGON_SWORD, id2: INV.DRAGON_SWORD, time: .008333333333333333, t: CATEGORY.WEAPONS}, {r: [[INV.DRAGON_SWORD, 1], [INV.LAVA_ORB, 1], [INV.REIDITE, 150], [INV.LAVA_HEART, 2]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.LAVA_SWORD, id2: INV.LAVA_SWORD, time: .005555555555555556, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD, 100], [INV.CORD, 4]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WOOD_BOW, id2: INV.WOOD_BOW, time: .05, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD, 30]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WOOD_ARROW, id2: INV.WOOD_ARROW, time: .2, t: CATEGORY.WEAPONS}, {r: [[INV.STONE, 200], [INV.CORD, 8], [INV.PENGUIN_FEATHER, 4], [INV.WOOD_BOW, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.STONE_BOW, id2: INV.STONE_BOW, time: .04, t: CATEGORY.WEAPONS}, {r: [[INV.STONE, 20], [INV.HAWK_FEATHER, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.STONE_ARROW, id2: INV.STONE_ARROW, time: .2, t: CATEGORY.WEAPONS}, {r: [[INV.GOLD, 200], [INV.CORD, 12], [INV.HAWK_FEATHER, 4], [INV.PENGUIN_FEATHER, 4], [INV.STONE_BOW, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.GOLD_BOW, id2: INV.GOLD_BOW, time: .03333333333333333, t: CATEGORY.WEAPONS}, {r: [[INV.GOLD, 20], [INV.PENGUIN_FEATHER, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.GOLD_ARROW, id2: INV.GOLD_ARROW, time: .1, t: CATEGORY.WEAPONS}, {r: [[INV.DIAMOND, 200], [INV.BLUE_CORD, 10], [INV.HAWK_FEATHER, 8], [INV.PENGUIN_FEATHER, 8], [INV.GOLD_BOW, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIAMOND_BOW, id2: INV.DIAMOND_BOW, time: .02857142857142857, t: CATEGORY.WEAPONS}, {r: [[INV.DIAMOND, 10], [INV.PENGUIN_FEATHER, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIAMOND_ARROW, id2: INV.DIAMOND_ARROW, time: .1, t: CATEGORY.WEAPONS}, {r: [[INV.AMETHYST, 200], [INV.BLUE_CORD, 10], [INV.PENGUIN_FEATHER, 8], [INV.VULTURE_FEATHER, 8], [INV.DIAMOND_BOW, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.AMETHYST_BOW, id2: INV.AMETHYST_BOW, time: .025, t: CATEGORY.WEAPONS}, {r: [[INV.AMETHYST, 10], [INV.VULTURE_FEATHER, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.AMETHYST_ARROW, id2: INV.AMETHYST_ARROW, time: .06666666666666667, t: CATEGORY.WEAPONS}, {r: [[INV.REIDITE, 200], [INV.BLUE_CORD, 10], [INV.KRAKEN_SKIN, 1], [INV.AMETHYST_BOW, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.REIDITE_BOW, id2: INV.REIDITE_BOW, time: .022222222222222223, t: CATEGORY.WEAPONS}, {r: [[INV.REIDITE, 10], [INV.VULTURE_FEATHER, 1], [INV.FLAME, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.REIDITE_ARROW, id2: INV.REIDITE_ARROW, time: .06666666666666667, t: CATEGORY.WEAPONS}, {r: [[INV.EMERALD, 200], [INV.BLUE_CORD, 10], [INV.DRAGON_ORB, 1], [INV.REIDITE_BOW, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DRAGON_BOW, id2: INV.DRAGON_BOW, time: .02, t: CATEGORY.WEAPONS}, {r: [[INV.EMERALD, 10], [INV.SANDWORM_JUICE, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DRAGON_ARROW, id2: INV.DRAGON_ARROW, time: .05, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD, 100]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WOOD_SHIELD, id2: INV.WOOD_SHIELD, time: .04, t: CATEGORY.WEAPONS}, {r: [[INV.WOOD_SHIELD, 1], [INV.STONE, 100], [INV.WOOD, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.STONE_SHIELD, id2: INV.STONE_SHIELD, time: .025, t: CATEGORY.WEAPONS}, {r: [[INV.STONE_SHIELD, 1], [INV.GOLD, 50], [INV.STONE, 50], [INV.WOOD, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.GOLD_SHIELD, id2: INV.GOLD_SHIELD, time: .02, t: CATEGORY.WEAPONS}, {r: [[INV.GOLD_SHIELD, 1], [INV.DIAMOND, 50], [INV.GOLD, 50], [INV.STONE, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.DIAMOND_SHIELD, id2: INV.DIAMOND_SHIELD, time: .014285714285714285, t: CATEGORY.WEAPONS}, {r: [[INV.DIAMOND_SHIELD, 1], [INV.AMETHYST, 50], [INV.DIAMOND, 50], [INV.GOLD, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.AMETHYST_SHIELD, id2: INV.AMETHYST_SHIELD, time: .011111111111111112, t: CATEGORY.WEAPONS}, {r: [[INV.AMETHYST_SHIELD, 1], [INV.REIDITE, 50], [INV.AMETHYST, 50], [INV.DIAMOND, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.REIDITE_SHIELD, id2: INV.REIDITE_SHIELD, time: .008333333333333333, t: CATEGORY.WEAPONS}, {r: [[INV.GEMME_GREEN, 1], [INV.GOLD, 200]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.CROWN_GREEN, id2: INV.CROWN_GREEN, time: .016666666666666666, t: CATEGORY.CLOTHES}, {r: [[INV.GEMME_ORANGE, 1], [INV.GOLD, 200]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.CROWN_ORANGE, id2: INV.CROWN_ORANGE, time: .016666666666666666, t: CATEGORY.CLOTHES}, {r: [[INV.GEMME_BLUE, 1], [INV.GOLD, 200], [INV.DRAGON_HEART, 1]], w: 1, f: 1, o: 1, e: 0, id: CRAFT.CROWN_BLUE, id2: INV.CROWN_BLUE, time: .016666666666666666, t: CATEGORY.CLOTHES}, {r: [[INV.FUR_WOLF, 10], [INV.FUR, 5], [INV.CORD, 6]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.HOOD, id2: INV.HOOD, time: .1, t: CATEGORY.CLOTHES}, {r: [[INV.FUR, 3], [INV.CORD, 2]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PEASANT, id2: INV.PEASANT, time: .1, t: CATEGORY.CLOTHES}, {r: [[INV.HOOD, 1], [INV.SPECIAL_FUR_2, 1], [INV.FUR_WINTER, 15], [INV.BLUE_CORD, 5], [INV.PENGUIN_FEATHER, 8]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WINTER_HOOD, id2: INV.WINTER_HOOD, time: .016666666666666666, t: CATEGORY.CLOTHES}, {r: [[INV.PEASANT, 1], [INV.SPECIAL_FUR, 1], [INV.FUR_WINTER, 10], [INV.BLUE_CORD, 5], [INV.PENGUIN_FEATHER, 8]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.WINTER_PEASANT, id2: INV.WINTER_PEASANT, time: .016666666666666666, t: CATEGORY.CLOTHES}, {r: [[INV.BUCKET_EMPTY, 1]], w: 0, f: 0, o: 1, e: 0, id: CRAFT.BUCKET_FULL, id2: INV.BUCKET_FULL, time: .2, t: CATEGORY.TOOLS}, {r: [[INV.WOOD, 20], [INV.CORD, 1]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.BUCKET_EMPTY, id2: INV.BUCKET_EMPTY, time: .2, t: CATEGORY.TOOLS}, {r: [[INV.STONE, 100], [INV.GROUND, 30]], w: 1, f: 1, o: 0, e: 0, id: CRAFT.WELL, id2: INV.WELL, time: .1, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 20]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SIGN, id2: INV.SIGN, time: .2, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 100], [INV.STONE, 50], [INV.FUR, 5], [INV.FUR_WOLF, 5], [INV.CORD, 6]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.BED, id2: INV.BED, time: .05, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 250], [INV.BLUE_CORD, 10], [INV.FUR_WINTER, 2], [INV.SCALES, 2]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.BOAT, id2: INV.BOAT, time: .02, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 250], [INV.CORD, 10], [INV.FUR_WINTER, 2], [INV.PENGUIN_FEATHER, 8]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SLED, id2: INV.SLED, time: .02, t: CATEGORY.UTILS}, {r: [[INV.CORD, 10], [INV.FUR_WOLF, 6], [INV.FUR, 4], [INV.SAND, 50]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.SADDLE, id2: INV.SADDLE, time: .05, t: CATEGORY.UTILS}, {r: [[INV.WOOD, 250], [INV.CORD, 10], [INV.PAPER, 10], [INV.HAWK_FEATHER, 8]], w: 1, f: 0, o: 0, e: 0, id: CRAFT.PLANE, id2: INV.PLANE, time: .02, t: CATEGORY.UTILS}], COUNTER = 300;
TEXT = {YOU_CANNOT_JOIN: COUNTER++, KICKED: COUNTER++, KEY_ALREADY: COUNTER++, KEY_WRONG: COUNTER++, OLD_VERSION: COUNTER++, NO_MORE_RESOURCES: COUNTER++, SURVIVED_1DAY: COUNTER++, SURVIVED: COUNTER++, DAYS: COUNTER++, DEAD_SAD: COUNTER++, SPAM_ME: COUNTER++, SPAM_ME2: COUNTER++, EMPTY: COUNTER++, INV_FULL: COUNTER++, DEAD: COUNTER++, WRONG_TOOL: COUNTER++, JOIN_TEAM: COUNTER++, YOU_DEAD: COUNTER++, JOINED_TEAM: COUNTER++, TEAM_DESTROYED: COUNTER++, LEFT_TEAM: COUNTER++, LEFT_TEAM2: COUNTER++, TOKEN: COUNTER++, CHOOSE: COUNTER++, PLAYERS: COUNTER++, TOTAL_PLAYERS: COUNTER++, TOTAL_MODE: COUNTER++, COMMING_SOON: COUNTER++, BACK_TO_THE_GAME: COUNTER++, TWITTER: COUNTER++, FACEBOOK: COUNTER++, KIT_NEXT: COUNTER++, POINTS: COUNTER++, SCORE: COUNTER++, KILL: COUNTER++, DAYS_SURVIVED: COUNTER++, MODE_FREE: COUNTER++, MODE_GRID: COUNTER++, NEW_VERSION: COUNTER++, WRONG_PASSWORD: COUNTER++, TEMPEST_OFF: COUNTER++, TEMPEST_ON: COUNTER++, BLIZZARD_OFF: COUNTER++, BLIZZARD_ON: COUNTER++};
var set_english = function () {
  LANG[INV.EXTRACTOR_MACHINE_STONE] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
  LANG[INV.EXTRACTOR_MACHINE_GOLD] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
  LANG[INV.EXTRACTOR_MACHINE_DIAMOND] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
  LANG[INV.EXTRACTOR_MACHINE_AMETHYST] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
  LANG[INV.EXTRACTOR_MACHINE_REIDITE] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
  LANG[INV.REIDITE_SHIELD] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
  LANG[INV.AMETHYST_SHIELD] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
  LANG[INV.DIAMOND_SHIELD] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
  LANG[INV.GOLD_SHIELD] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
  LANG[INV.STONE_SHIELD] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
  LANG[INV.WOOD_SHIELD] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
  LANG[INV.MACHETE] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
  LANG[INV.WOOD_TOWER] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
  LANG[INV.DRAGON_ARROW] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
  LANG[INV.DRAGON_BOW] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
  LANG[INV.REIDITE_ARROW] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
  LANG[INV.REIDITE_BOW] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
  LANG[INV.AMETHYST_ARROW] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
  LANG[INV.AMETHYST_BOW] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
  LANG[INV.DIAMOND_ARROW] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
  LANG[INV.DIAMOND_BOW] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
  LANG[INV.GOLD_ARROW] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
  LANG[INV.GOLD_BOW] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
  LANG[INV.STONE_ARROW] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
  LANG[INV.STONE_BOW] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
  LANG[INV.WOOD_ARROW] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
  LANG[INV.WOOD_BOW] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
  LANG[INV.EMERALD_MACHINE] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
  LANG[INV.FUR_BOAR] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
  LANG[INV.FUR_MAMMOTH] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
  LANG[INV.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"];
  LANG[INV.EMERALD] = ["Emerald", "How many golden breads can you get from it?"];
  LANG[INV.SANDWORM_JUICE] = ["Sand Worm Juice", "I don't want to know how you got this."];
  LANG[INV.TURBAN1] = ["Turban", "Useful to survive in the desert."];
  LANG[INV.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"];
  LANG[INV.PILOT_HELMET] = ["Pilot Hat", "Take off and land with flying objects much faster."];
  LANG[INV.PILOT_GLASSES] = ["Pilot Glasses"];
  LANG[INV.MOUNT_BOAR] = ["Tamed Boar", "Fast on lands and slow on water."];
  LANG[INV.BABY_MAMMOTH] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
  LANG[INV.CRAB_BOSS] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
  LANG[INV.BABY_DRAGON] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
  LANG[INV.BABY_LAVA] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
  LANG[INV.HAWK] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
  LANG[INV.SADDLE] = ["Saddle", "Hit a boar with it to tame it."];
  LANG[INV.WITCH] = ["Witch Hat", "You're a wizard Starvy!"];
  LANG[INV.NIMBUS] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
  LANG[INV.WAND1] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
  LANG[INV.WAND2] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
  LANG[INV.FIREFLY] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
  LANG[INV.PIRATE_HAT] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
  LANG[INV.SLED] = ["Sled", "You are faster with it in the snow"];
  LANG[INV.BOAT] = ["Boat", "You are faster with it in the water"];
  LANG[INV.PLANE] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
  LANG[INV.HAMMER_REIDITE] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
  LANG[INV.PENGUIN_FEATHER] = ["Penguin Feather", "From a deadly cute penguin."];
  LANG[INV.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."];
  LANG[INV.CACTUS] = ["Cactus", "Food : 20", "Water : 10"];
  LANG[INV.ALOE_VERA] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
  LANG[INV.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
  LANG[INV.WATERMELON] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
  LANG[INV.WATERMELON_SEED] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
  LANG[INV.REIDITE_DOOR] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
  LANG[INV.REIDITE_WALL] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
  LANG[INV.REIDITE_SPIKE] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
  LANG[INV.REIDITE_DOOR_SPIKE] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
  LANG[INV.PICK_REIDITE] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
  LANG[INV.WOOD_DOOR_SPIKE] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
  LANG[INV.STONE_DOOR_SPIKE] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
  LANG[INV.GOLD_DOOR_SPIKE] = ["Gold Door Spike", 'Are you rebuilding the "el dorado?"', "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
  LANG[INV.DIAMOND_DOOR_SPIKE] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
  LANG[INV.AMETHYST_DOOR_SPIKE] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
  LANG[INV.CARROT] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
  LANG[INV.TOMATO] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
  LANG[INV.CARROT_SEED] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.TOMATO_SEED] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.PITCHFORK] = ["Pitchfork", "Perfect for gathering"];
  LANG[INV.PITCHFORK2] = ["Golden Pitchfork", "Essential for a real farmer."];
  LANG[INV.PITCHFORK_PART] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
  LANG[INV.EGG0] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
  LANG[INV.EGG1] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
  LANG[INV.EGG2] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
  LANG[INV.EGG3] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
  LANG[INV.EGG4] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
  LANG[INV.LAVA_CUBE] = ["Lava Cube", "You feel an immense power emanating from this cube"];
  LANG[INV.LAVA_ORB] = ["Lava Orb", "You feel an immense power emanating from this orb"];
  LANG[INV.LAVA_SWORD] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
  LANG[INV.LAVA_SPEAR] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
  LANG[INV.LAVA_HEART] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
  LANG[INV.LAVA_HELMET] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
  LANG[INV.REIDITE_SPEAR] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
  LANG[INV.REIDITE_SWORD] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
  LANG[INV.FLAME] = ["Flame", "It's hot!"];
  LANG[INV.DIAMOND_PROTECTION] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
  LANG[INV.AMETHYST_PROTECTION] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
  LANG[INV.REIDITE_PROTECTION] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
  LANG[INV.REIDITE] = ["Reidite", "The ultimate ore"];
  LANG[INV.DRAGON_CUBE] = ["Dragon Cube", "You feel a great power emanating from this cube"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  DIE[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
  DIE[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
  DIE[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
  DIE[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
  DIE[27] = ['You were trampled by that boar. From now on, your new nickname is "the doormat".'];
  DIE[28] = ['With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"'];
  DIE[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
  DIE[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
  DIE[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
  DIE[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
  DIE[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
  DIE[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
  DIE[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
  DIE[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
  DIE[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'];
  DIE[38] = ["You died crushed by an angry baby mammoth."];
  DIE[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
  DIE[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.";
  LANG[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.";
  LANG[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.";
  LANG[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.";
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var stoni = 0; stoni < 7; stoni++) {
    document.getElementById("claim_reward_" + stoni).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Hand"];
  LANG[INV.GROUND] = ["Dirt", "Dirty!"];
  LANG[INV.SAND] = ["Sand", "I got it in my eyes!"];
  LANG[INV.WOOD] = ["Wood", "You can't get enough of it!"];
  LANG[INV.STONE] = ["Stone", "Also called a rock"];
  LANG[INV.GOLD] = ["Gold", "Be generous, give it to others"];
  LANG[INV.DIAMOND] = ["Diamond", "What will you make with it?"];
  LANG[INV.AMETHYST] = ["Amethyst", "It's Mauve like Lapa"];
  LANG[INV.FLOUR] = ["Flour", "Used in cooking"];
  LANG[INV.COOKIE] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
  LANG[INV.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
  LANG[INV.MEAT] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
  LANG[INV.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"];
  LANG[INV.FOODFISH] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
  LANG[INV.BREAD] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
  LANG[INV.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
  LANG[INV.CANDY] = ["Candies", "Only for children!", "Food: 20"];
  LANG[INV.SUGAR_CAN] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
  LANG[INV.GARLAND] = ["Garland", "Perfect decoration for roofs"];
  LANG[INV.SEED] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.PLANT] = ["Berry", "Berry tasty!", "Food: 10"];
  LANG[INV.WHEAT_SEED] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.WILD_WHEAT] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
  LANG[INV.PUMPKIN_SEED] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
  LANG[INV.GARLIC_SEED] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
  LANG[INV.THORNBUSH] = ["Thorn bush", "It stings!"];
  LANG[INV.PLOT] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
  LANG[INV.ICE] = ["Ice", "Useful for making cakes and water"];
  LANG[INV.SPANNER] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
  LANG[INV.FUR_WOLF] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
  LANG[INV.FUR] = ["Rabbit Fur", "That rabbit was so cute..."];
  LANG[INV.SPECIAL_FUR] = ["Pure Fur", "You're a bread factory"];
  LANG[INV.SPECIAL_FUR_2] = ["Dark Fur", "You get ready to do something wrong"];
  LANG[INV.FUR_WINTER] = ["Winter Fur", "These animals just wanted a hug..."];
  LANG[INV.SCALES] = ["Scales", "It smells like fish!"];
  LANG[INV.KRAKEN_SKIN] = ["Kraken Skin", "Weren't you too scared?"];
  LANG[INV.FIRE] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
  LANG[INV.BIG_FIRE] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
  LANG[INV.WORKBENCH] = ["Workbench", "Very useful to craft all kinds of objects"];
  LANG[INV.CORD] = ["Cord", "Used in crafting Hats and Bag"];
  LANG[INV.BLUE_CORD] = ["Diamond Cord", "Used in crafting Special Hats"];
  LANG[INV.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"];
  LANG[INV.SWORD_WOOD] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
  LANG[INV.SWORD] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
  LANG[INV.SWORD_GOLD] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
  LANG[INV.PIRATE_SWORD] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
  LANG[INV.DRAGON_SWORD] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
  LANG[INV.PICK_WOOD] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
  LANG[INV.PICK] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
  LANG[INV.PICK_GOLD] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
  LANG[INV.PICK_DIAMOND] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
  LANG[INV.PICK_AMETHYST] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
  LANG[INV.HAMMER] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
  LANG[INV.HAMMER_GOLD] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
  LANG[INV.SUPER_HAMMER] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
  LANG[INV.WOOD_SPEAR] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
  LANG[INV.SPEAR] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
  LANG[INV.GOLD_SPEAR] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
  LANG[INV.SHOVEL] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
  LANG[INV.WOOD_HELMET] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
  LANG[INV.STONE_HELMET] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
  LANG[INV.GOLD_HELMET] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
  LANG[INV.REIDITE_HELMET] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
  LANG[INV.DRAGON_HELMET] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
  LANG[INV.EXPLORER_HAT] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
  LANG[INV.CHRISTMAS_HAT] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
  LANG[INV.ELF_HAT] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
  LANG[INV.HOOD] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
  LANG[INV.EARMUFFS] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
  LANG[INV.COAT] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
  LANG[INV.CAP_SCARF] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
  LANG[INV.FUR_HAT] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
  LANG[INV.PEASANT] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
  LANG[INV.WINTER_HOOD] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
  LANG[INV.WINTER_PEASANT] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
  LANG[INV.DIVING_MASK] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
  LANG[INV.DRAGON_ORB] = ["Dragon Orb", "You feel a great power emanating from this orb"];
  LANG[INV.DRAGON_HEART] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
  LANG[INV.GEMME_GREEN] = ["Green Gemstone", "You didn't cheat, promise?"];
  LANG[INV.GEMME_ORANGE] = ["Orange Gemstone", "Only a real pirate can find it!"];
  LANG[INV.GEMME_BLUE] = ["Blue Gemstone", "For too kind people"];
  LANG[INV.CROWN_GREEN] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
  LANG[INV.CROWN_ORANGE] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
  LANG[INV.CROWN_BLUE] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
  LANG[INV.BUCKET_FULL] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
  LANG[INV.BUCKET_EMPTY] = ["Empty Bucket", "You need to fill this bucket near a water source"];
  LANG[INV.BOTTLE_FULL] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Empty Bottle", "You can fill this bottle near a water source"];
  LANG[INV.WATERING_CAN] = ["Empty Watering Can", "You must fill it with a water source to use it"];
  LANG[INV.WATERING_CAN_FULL] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
  LANG[INV.BAG] = ["Bag", "More space for your items!"];
  LANG[INV.PAPER] = ["Paper", "Used in book-crafting"];
  LANG[INV.BOOK] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
  LANG[INV.BANDAGE] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
  LANG[INV.LOCK] = ["Lock", "Allow you to lock your chest"];
  LANG[INV.LOCKPICK] = ["Lock-pick", "Allows you to unlock one chest"];
  LANG[INV.TOTEM] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
  LANG[INV.BRIDGE] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
  LANG[INV.SIGN] = ["Sign", "Leave a message to others", "Durability: 200"];
  LANG[INV.ROOF] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
  LANG[INV.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"];
  LANG[INV.WALL] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
  LANG[INV.STONE_WALL] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
  LANG[INV.GOLD_WALL] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
  LANG[INV.SPIKE] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
  LANG[INV.STONE_SPIKE] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
  LANG[INV.GOLD_SPIKE] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
  LANG[INV.WOOD_DOOR] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
  LANG[INV.STONE_DOOR] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
  LANG[INV.GOLD_DOOR] = ["Gold Door", 'Are you rebuilding the "el dorado?"', "Durability: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Diamond Door", "For a shining house", "Durability: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
  LANG[INV.FURNACE] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
  LANG[INV.WINDMILL] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
  LANG[INV.BREAD_OVEN] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
  LANG[INV.RESURRECTION] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server";
  LANG[TEXT.KICKED] = "Kicked: ";
  LANG[TEXT.KEY_ALREADY] = "Your key is already used by someone else";
  LANG[TEXT.KEY_WRONG] = "Your key is wrong";
  LANG[TEXT.OLD_VERSION] = "You have an old version, you need to clear your cache";
  LANG[TEXT.NEW_VERSION] = "Your client version is too recent for this server. The server is being updated";
  LANG[TEXT.WRONG_PASSWORD] = "Wrong password! To enter a password: https://starve.io/?password=...";
  LANG[TEXT.NO_MORE_RESOURCES] = "There are no more new resources";
  LANG[TEXT.SURVIVED_1DAY] = "You survived 1 day";
  LANG[TEXT.SURVIVED] = "You survived ";
  LANG[TEXT.DAYS] = " days";
  LANG[TEXT.DEAD_SAD] = "You are dead ;-;";
  LANG[TEXT.SPAM_ME] = "Server cannot find spawn location! Spam the play button!";
  LANG[TEXT.SPAM_ME2] = "Server is full! Spam the play button!";
  LANG[TEXT.EMPTY] = "Resource is empty";
  LANG[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)";
  LANG[TEXT.DEAD] = " is dead";
  LANG[TEXT.WRONG_TOOL] = "This is not the right tool";
  LANG[TEXT.JOIN_TEAM] = "You joined a team";
  LANG[TEXT.YOU_DEAD] = "You are dead";
  LANG[TEXT.JOINED_TEAM] = " joined the team";
  LANG[TEXT.TEAM_DESTROYED] = "Your team was destroyed";
  LANG[TEXT.LEFT_TEAM] = "You left the team";
  LANG[TEXT.LEFT_TEAM2] = " left the team";
  LANG[TEXT.TOKEN] = "Someone stole your token :>";
  LANG[TEXT.CHOOSE] = "Choose a server";
  LANG[TEXT.PLAYERS] = "players";
  LANG[TEXT.TOTAL_PLAYERS] = "total players";
  LANG[TEXT.TOTAL_MODE] = "players on this mode";
  LANG[TEXT.COMMING_SOON] = "Coming soon...";
  document.getElementById("nickname_input").placeholder = "Nickname";
  DIE[0] = ["You were killed for no reason"];
  DIE[1] = ["You starved to death, as the name of the game implies"];
  DIE[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
  DIE[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
  DIE[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
  DIE[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
  DIE[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
  DIE[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
  DIE[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
  DIE[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
  DIE[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
  DIE[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
  DIE[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
  DIE[13] = ["You died of thirst. Better drink your own piss."];
  DIE[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
  DIE[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
  DIE[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
  DIE[17] = ["Your skin's falling apart, the sun killed you."];
  DIE[18] = ["Garlic stored in your pockets boiled your brain."];
  DIE[19] = ["As a vampire, don't stand near the garlic cloves."];
  DIE[20] = ["You ate garlic as a vampire, what did you expect?"];
  DIE[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
}, set_russian = function () {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var lidea = 0; lidea < 7; lidea++) {
    document.getElementById("claim_reward_" + lidea).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Рука"];
  LANG[INV.GROUND] = ["Земля", "Грязно!"];
  LANG[INV.SAND] = ["Песок", "Он в моих глазах!"];
  LANG[INV.WOOD] = ["Дерево", "Постоянно нужно больше!"];
  LANG[INV.STONE] = ["Камень", "Твердый"];
  LANG[INV.GOLD] = ["Золото", "Будьте щедры, давайте его другим"];
  LANG[INV.DIAMOND] = ["Алмаз", "Что вы создадите с помощью него?"];
  LANG[INV.AMETHYST] = ["Аметист", "Он сиреневый, как Lapa"];
  LANG[INV.FLOUR] = ["Мука", "Используется в готовке"];
  LANG[INV.COOKIE] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
  LANG[INV.CAKE] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
  LANG[INV.MEAT] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
  LANG[INV.COOKED_MEAT] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
  LANG[INV.FOODFISH] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
  LANG[INV.BREAD] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
  LANG[INV.SANDWICH] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
  LANG[INV.CANDY] = ["Конфеты", "Только для детей!", "Еда: 20"];
  LANG[INV.SUGAR_CAN] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
  LANG[INV.GARLAND] = ["Гирлянда", "Прекрасная декорация для крыши"];
  LANG[INV.SEED] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
  LANG[INV.PLANT] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
  LANG[INV.WHEAT_SEED] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
  LANG[INV.WILD_WHEAT] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
  LANG[INV.PUMPKIN_SEED] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
  LANG[INV.PUMPKIN] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
  LANG[INV.GARLIC_SEED] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
  LANG[INV.GARLIC] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
  LANG[INV.THORNBUSH] = ["Колючий Куст", "Это больно!"];
  LANG[INV.PLOT] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
  LANG[INV.ICE] = ["Лёд", "Используется для изготовления тортов и воды"];
  LANG[INV.SPANNER] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
  LANG[INV.FUR_WOLF] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
  LANG[INV.FUR] = ["Шкура Зайца", "Этот кролик был таким милым..."];
  LANG[INV.SPECIAL_FUR] = ["Чистая Шкура", "Вы - фабрика хлеба"];
  LANG[INV.SPECIAL_FUR_2] = ["Чёрная Шкура", "Вы готовы делать зло."];
  LANG[INV.FUR_WINTER] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
  LANG[INV.SCALES] = ["Чешуя", "Она пахнет рыбой!"];
  LANG[INV.KRAKEN_SKIN] = ["Шкура Кракена", "Вы не испугались?"];
  LANG[INV.FIRE] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
  LANG[INV.BIG_FIRE] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
  LANG[INV.WORKBENCH] = ["Верстак", "Необходим для создания многих предметов"];
  LANG[INV.CORD] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
  LANG[INV.BLUE_CORD] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
  LANG[INV.CHEST] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
  LANG[INV.SWORD_WOOD] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
  LANG[INV.SWORD] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
  LANG[INV.SWORD_GOLD] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
  LANG[INV.PIRATE_SWORD] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
  LANG[INV.DRAGON_SWORD] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
  LANG[INV.PICK_WOOD] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
  LANG[INV.PICK] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
  LANG[INV.PICK_GOLD] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
  LANG[INV.PICK_DIAMOND] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
  LANG[INV.PICK_AMETHYST] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
  LANG[INV.HAMMER] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
  LANG[INV.HAMMER_GOLD] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
  LANG[INV.SUPER_HAMMER] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
  LANG[INV.WOOD_SPEAR] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
  LANG[INV.SPEAR] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
  LANG[INV.GOLD_SPEAR] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
  LANG[INV.SHOVEL] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
  LANG[INV.WOOD_HELMET] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
  LANG[INV.STONE_HELMET] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
  LANG[INV.GOLD_HELMET] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
  LANG[INV.DRAGON_HELMET] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
  LANG[INV.EXPLORER_HAT] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
  LANG[INV.CHRISTMAS_HAT] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
  LANG[INV.ELF_HAT] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
  LANG[INV.HOOD] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
  LANG[INV.EARMUFFS] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
  LANG[INV.COAT] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
  LANG[INV.CAP_SCARF] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
  LANG[INV.PEASANT] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
  LANG[INV.WINTER_HOOD] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
  LANG[INV.WINTER_PEASANT] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
  LANG[INV.DIVING_MASK] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
  LANG[INV.DRAGON_ORB] = ["Шар Дракона", "Даётся за квест"];
  LANG[INV.DRAGON_HEART] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
  LANG[INV.GEMME_GREEN] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
  LANG[INV.GEMME_ORANGE] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
  LANG[INV.GEMME_BLUE] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
  LANG[INV.CROWN_GREEN] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
  LANG[INV.CROWN_ORANGE] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
  LANG[INV.CROWN_BLUE] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
  LANG[INV.BUCKET_FULL] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
  LANG[INV.BUCKET_EMPTY] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
  LANG[INV.BOTTLE_FULL] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
  LANG[INV.WATERING_CAN] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
  LANG[INV.WATERING_CAN_FULL] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
  LANG[INV.BAG] = ["Рюкзак", "Больше места для ваших предметов!"];
  LANG[INV.PAPER] = ["Бумага", "Используется при создании книги"];
  LANG[INV.BOOK] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
  LANG[INV.BANDAGE] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
  LANG[INV.LOCK] = ["Замок", "Позволяет вам закрыть ваш сундук"];
  LANG[INV.LOCKPICK] = ["Ключ", "Даёт вам открыть один запертый сундук"];
  LANG[INV.TOTEM] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
  LANG[INV.BRIDGE] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
  LANG[INV.SIGN] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
  LANG[INV.ROOF] = ["Крыша", "Немного скрывает вас и согревает!"];
  LANG[INV.WELL] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
  LANG[INV.WALL] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
  LANG[INV.STONE_WALL] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
  LANG[INV.GOLD_WALL] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
  LANG[INV.SPIKE] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
  LANG[INV.STONE_SPIKE] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
  LANG[INV.GOLD_SPIKE] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
  LANG[INV.WOOD_DOOR] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
  LANG[INV.STONE_DOOR] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
  LANG[INV.GOLD_DOOR] = ["Золотая Дверь", 'Вы перестраиваете "Эль Дорадо?"', "Прочность: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
  LANG[INV.FURNACE] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
  LANG[INV.WINDMILL] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
  LANG[INV.BREAD_OVEN] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
  LANG[INV.RESURRECTION] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "Вы не можете зайти на этот сервер";
  LANG[TEXT.KICKED] = "Выгнаны: ";
  LANG[TEXT.KEY_ALREADY] = "Ваш ключ уже используется кем-то";
  LANG[TEXT.KEY_WRONG] = "Ваш ключ неправильный";
  LANG[TEXT.OLD_VERSION] = "У вас старая версия, вам нужно очистить кеш";
  LANG[TEXT.NO_MORE_RESOURCES] = "Ресурсов больше нет";
  LANG[TEXT.SURVIVED_1DAY] = "Вы выжили 1 день";
  LANG[TEXT.SURVIVED] = "Вы выжили ";
  LANG[TEXT.DAYS] = " дней";
  LANG[TEXT.DEAD_SAD] = "Вы умерли ;-;";
  LANG[TEXT.SPAM_ME] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
  LANG[TEXT.SPAM_ME2] = "Сервер заполнен! Спамьте кнопку играть!";
  LANG[TEXT.EMPTY] = "Ресурсы закончились";
  LANG[TEXT.INV_FULL] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
  LANG[TEXT.DEAD] = " умер";
  LANG[TEXT.WRONG_TOOL] = "Это не тот инструмент";
  LANG[TEXT.JOIN_TEAM] = "Вы вошли в команду";
  LANG[TEXT.YOU_DEAD] = "Вы умерли";
  LANG[TEXT.JOINED_TEAM] = " вошёл в команду";
  LANG[TEXT.TEAM_DESTROYED] = "Ваша команда была разрушена";
  LANG[TEXT.LEFT_TEAM] = "Вы покинули команду";
  LANG[TEXT.LEFT_TEAM2] = " покинул команду";
  LANG[TEXT.TOKEN] = "Кто-то использует ваш токен :>";
  LANG[TEXT.CHOOSE] = "Выберите сервер";
  LANG[TEXT.PLAYERS] = "игроков";
  LANG[TEXT.TOTAL_PLAYERS] = "игроков всего";
  LANG[TEXT.TOTAL_MODE] = "игроков в этом режиме";
  LANG[TEXT.COMMING_SOON] = "Скоро...";
  document.getElementById("nickname_input").placeholder = "Имя";
  DIE[0] = ["Вы были убиты без причины"];
  DIE[1] = ["Вы умерли от голода, как название игры подразумевает это"];
  DIE[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
  DIE[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
  DIE[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
  DIE[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
  DIE[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
  DIE[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
  DIE[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
  DIE[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
  DIE[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
  DIE[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
  DIE[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
  DIE[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
  DIE[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
  DIE[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
  DIE[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
  DIE[17] = ["Твоя кожа разваливается, солнце убило тебя"];
  DIE[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
  DIE[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
  DIE[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
  DIE[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
}, set_portuguese = function () {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var celes = 0; celes < 7; celes++) {
    document.getElementById("claim_reward_" + celes).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["mão"];
  LANG[INV.GROUND] = ["terra", "está sujo!"];
  LANG[INV.SAND] = ["areia", "entrou nos meus olhos!"];
  LANG[INV.WOOD] = ["madeira", "você não pode pegar o suficiente disso!"];
  LANG[INV.STONE] = ["pedra", "também chamado rocha"];
  LANG[INV.GOLD] = ["ouro", "seja generoso, dê para outros"];
  LANG[INV.DIAMOND] = ["diamante", "o que você irá fazer com isso?"];
  LANG[INV.AMETHYST] = ["ametista", "é mauve como lapa"];
  LANG[INV.FLOUR] = ["farinha", "usada na cozinha"];
  LANG[INV.COOKIE] = ["biscoito", "biscoito da vovó", "comida: 50"];
  LANG[INV.CAKE] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
  LANG[INV.MEAT] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
  LANG[INV.COOKED_MEAT] = ["carne assada", "um mal passado, por favor", "comida: 35"];
  LANG[INV.FOODFISH] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
  LANG[INV.FOODFISH_COOKED] = ["peixe assado", "com limão é perfeito", "comida: 35"];
  LANG[INV.BREAD] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
  LANG[INV.SANDWICH] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
  LANG[INV.CANDY] = ["doces", "apenas para crianças!", "comida: 100"];
  LANG[INV.SUGAR_CAN] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
  LANG[INV.GARLAND] = ["pisca-pisca", "decoração perfeita de telhado"];
  LANG[INV.SEED] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
  LANG[INV.PLANT] = ["berry", "Berry saborosa!", "comida: 10"];
  LANG[INV.WHEAT_SEED] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
  LANG[INV.WILD_WHEAT] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
  LANG[INV.PUMPKIN_SEED] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
  LANG[INV.PUMPKIN] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
  LANG[INV.GARLIC_SEED] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
  LANG[INV.GARLIC] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
  LANG[INV.THORNBUSH_SEED] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
  LANG[INV.THORNBUSH] = ["mato de espinhos", "pica!"];
  LANG[INV.PLOT] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
  LANG[INV.ICE] = ["gelo", "útil para fazer bolo e água"];
  LANG[INV.SPANNER] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
  LANG[INV.FUR_WOLF] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
  LANG[INV.FUR] = ["pele de coelho", "o coelho era tão fofo..."];
  LANG[INV.SPECIAL_FUR] = ["pele pura", "você é uma fábrica de pão"];
  LANG[INV.SPECIAL_FUR_2] = ["pele negra", "você está pronto para fazer algo errado"];
  LANG[INV.FUR_WINTER] = ["pele de inverno", "ele só queria um abraço"];
  LANG[INV.SCALES] = ["escala", "é pequeno como peixe!"];
  LANG[INV.KRAKEN_SKIN] = ["pele do kraken", "você não está com medo?"];
  LANG[INV.FIRE] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
  LANG[INV.BIG_FIRE] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
  LANG[INV.WORKBENCH] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
  LANG[INV.CORD] = ["linha", "usada para fazer chapéus e mochila"];
  LANG[INV.BLUE_CORD] = ["linha de diamante", "usada para fazer chapéus especiais"];
  LANG[INV.CHEST] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
  LANG[INV.SWORD_WOOD] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
  LANG[INV.SWORD] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
  LANG[INV.SWORD_GOLD] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
  LANG[INV.SWORD_DIAMOND] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
  LANG[INV.PIRATE_SWORD] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
  LANG[INV.SWORD_AMETHYST] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
  LANG[INV.DRAGON_SWORD] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
  LANG[INV.DRAGON_SPEAR] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
  LANG[INV.PICK_WOOD] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
  LANG[INV.PICK_STONE] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
  LANG[INV.PICK_GOLD] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
  LANG[INV.PICK_DIAMOND] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
  LANG[INV.PICK_AMETHYST] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
  LANG[INV.HAMMER] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
  LANG[INV.HAMMER_GOLD] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
  LANG[INV.SUPER_HAMMER] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
  LANG[INV.WOOD_SPEAR] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
  LANG[INV.SPEAR] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
  LANG[INV.GOLD_SPEAR] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
  LANG[INV.SHOVEL] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
  LANG[INV.SHOVEL_GOLD] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
  LANG[INV.WOOD_HELMET] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
  LANG[INV.STONE_HELMET] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
  LANG[INV.GOLD_HELMET] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
  LANG[INV.DIAMOND_HELMET] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
  LANG[INV.AMETHYST_HELMET] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
  LANG[INV.DRAGON_HELMET] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
  LANG[INV.EXPLORER_HAT] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
  LANG[INV.CHRISTMAS_HAT] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
  LANG[INV.ELF_HAT] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
  LANG[INV.HOOD] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
  LANG[INV.EARMUFFS] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
  LANG[INV.COAT] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
  LANG[INV.CAP_SCARF] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
  LANG[INV.PEASANT] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
  LANG[INV.WINTER_HOOD] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
  LANG[INV.WINTER_PEASANT] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
  LANG[INV.DIVING_MASK] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
  LANG[INV.DRAGON_ORB] = ["esfera do dragão", "dado na questt"];
  LANG[INV.DRAGON_HEART] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
  LANG[INV.GEMME_GREEN] = ["pedra verde", "você não vai trapacear, promete?"];
  LANG[INV.GEMME_ORANGE] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
  LANG[INV.GEMME_BLUE] = ["pedra azul", "para pessoas muito gentis"];
  LANG[INV.CROWN_GREEN] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
  LANG[INV.CROWN_ORANGE] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
  LANG[INV.CROWN_BLUE] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
  LANG[INV.BUCKET_FULL] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
  LANG[INV.BUCKET_EMPTY] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
  LANG[INV.BOTTLE_FULL] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
  LANG[INV.WATERING_CAN] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
  LANG[INV.WATERING_CAN_FULL] = ["regador", "permite regar as plantas", "dano: 1"];
  LANG[INV.BAG] = ["mochila", "mais espaço para seus itens!"];
  LANG[INV.PAPER] = ["papel", "usado para fazer o livro"];
  LANG[INV.BOOK] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
  LANG[INV.BANDAGE] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
  LANG[INV.LOCK] = ["fechadura", "permite você trancar seu baú"];
  LANG[INV.LOCKPICK] = ["chave", "permite destrancar um baú"];
  LANG[INV.TOTEM] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
  LANG[INV.BRIDGE] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
  LANG[INV.SIGN] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
  LANG[INV.ROOF] = ["telhado", "esconde você um pouco e te esquenta!"];
  LANG[INV.WELL] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
  LANG[INV.WALL] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
  LANG[INV.STONE_WALL] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
  LANG[INV.GOLD_WALL] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
  LANG[INV.DIAMOND_WALL] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
  LANG[INV.AMETHYST_WALL] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
  LANG[INV.SPIKE] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
  LANG[INV.STONE_SPIKE] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
  LANG[INV.GOLD_SPIKE] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
  LANG[INV.WOOD_DOOR] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
  LANG[INV.STONE_DOOR] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
  LANG[INV.GOLD_DOOR] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
  LANG[INV.FURNACE] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
  LANG[INV.WINDMILL] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
  LANG[INV.BREAD_OVEN] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
  LANG[INV.RESURRECTION] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "você não pode entrar no servidor";
  LANG[TEXT.KICKED] = "kickado: ";
  LANG[TEXT.KEY_ALREADY] = "sua chave está em uso por outra pessoa";
  LANG[TEXT.KEY_WRONG] = "sua chave está errada";
  LANG[TEXT.OLD_VERSION] = "você tem uma versão velha, limpe seu cache";
  LANG[TEXT.NO_MORE_RESOURCES] = "não tem mais recursos";
  LANG[TEXT.SURVIVED_1DAY] = "você sobreviveu 1 dia";
  LANG[TEXT.SURVIVED] = "você sobreviveu ";
  LANG[TEXT.DAYS] = " dias";
  LANG[TEXT.DEAD_SAD] = "você está morto ;-;";
  LANG[TEXT.SPAM_ME] = "servidor não pôde achar um local de spawn! spam o botão de play!";
  LANG[TEXT.SPAM_ME2] = "servidor está cheio! spam o botão de play!";
  LANG[TEXT.EMPTY] = "não tem recursos";
  LANG[TEXT.INV_FULL] = "inventário está cheio (botão direito para deletar itens)";
  LANG[TEXT.DEAD] = " está morto";
  LANG[TEXT.WRONG_TOOL] = "essa não é a ferramenta certa";
  LANG[TEXT.JOIN_TEAM] = "você entrou no time";
  LANG[TEXT.YOU_DEAD] = "você está morto";
  LANG[TEXT.JOINED_TEAM] = "entrou no time";
  LANG[TEXT.TEAM_DESTROYED] = "seu time foi destruido";
  LANG[TEXT.LEFT_TEAM] = "você saiu do time";
  LANG[TEXT.LEFT_TEAM2] = " saiu do time";
  LANG[TEXT.TOKEN] = "alguém roubou sua ficha :>";
  LANG[TEXT.CHOOSE] = "escolha um servidor";
  LANG[TEXT.PLAYERS] = "jogadores";
  LANG[TEXT.TOTAL_PLAYERS] = "jogadores totais";
  LANG[TEXT.TOTAL_MODE] = "jogadores nesse modo";
  LANG[TEXT.COMMING_SOON] = "Coming soon...";
  document.getElementById("nickname_input").placeholder = "Apelido";
  DIE[0] = ["você morreu sem motivo"];
  DIE[1] = ["você morreu de fome, como o jogo diz"];
  DIE[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
  DIE[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
  DIE[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
  DIE[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
  DIE[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
  DIE[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
  DIE[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
  DIE[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
  DIE[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
  DIE[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
  DIE[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
  DIE[13] = ["você morreu de sede. melhor beber sua própria urina."];
  DIE[14] = ["você sabia que você morre afogado? agora você sabe."];
  DIE[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
  DIE[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
  DIE[17] = ["sua pele caindo aos pedaços, o sol te matou."];
  DIE[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
  DIE[19] = ["como vampiro, não chegue perto do alho."];
  DIE[20] = ["você comeu alho como vampiro, o que você esperava?"];
  DIE[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
}, set_spanish = function () {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var alyciana = 0; alyciana < 7; alyciana++) {
    document.getElementById("claim_reward_" + alyciana).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Mano"];
  LANG[INV.GROUND] = ["Tierra", "¡Tan limpia como mis manos!"];
  LANG[INV.SAND] = ["Arena", "¡Tengo arena en mis ojos!"];
  LANG[INV.WOOD] = ["Madera", "¡Nunca hay suficiente!"];
  LANG[INV.STONE] = ["Piedra", "También llamada roca."];
  LANG[INV.GOLD] = ["Oro", "Sé generoso, compártelo con los otros"];
  LANG[INV.DIAMOND] = ["Diamante", "¿Que vas a hacer con él?"];
  LANG[INV.AMETHYST] = ["Amatista", "Es Mauve como Lapa"];
  LANG[INV.FLOUR] = ["Harina", "Usada para cocinar."];
  LANG[INV.COOKIE] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
  LANG[INV.CAKE] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
  LANG[INV.MEAT] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
  LANG[INV.COOKED_MEAT] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
  LANG[INV.FOODFISH] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
  LANG[INV.BREAD] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
  LANG[INV.SANDWICH] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
  LANG[INV.CANDY] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
  LANG[INV.SUGAR_CAN] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
  LANG[INV.GARLAND] = ["Guirnalda", "Perfecta para decorar el techo"];
  LANG[INV.SEED] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
  LANG[INV.PLANT] = ["Baya", "No es venenosa.", "Comida: 10"];
  LANG[INV.WHEAT_SEED] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
  LANG[INV.WILD_WHEAT] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
  LANG[INV.PUMPKIN_SEED] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
  LANG[INV.PUMPKIN] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
  LANG[INV.GARLIC_SEED] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
  LANG[INV.GARLIC] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
  LANG[INV.THORNBUSH] = ["Planta de Espinas", "¡Te daña!"];
  LANG[INV.PLOT] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
  LANG[INV.ICE] = ["Hielo", "Bueno para hacer tartas y agua"];
  LANG[INV.SPANNER] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
  LANG[INV.FUR_WOLF] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
  LANG[INV.FUR] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
  LANG[INV.SPECIAL_FUR] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
  LANG[INV.SPECIAL_FUR_2] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
  LANG[INV.FUR_WINTER] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
  LANG[INV.SCALES] = ["Escamas", "¡Huele a pescado!"];
  LANG[INV.KRAKEN_SKIN] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
  LANG[INV.FIRE] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
  LANG[INV.BIG_FIRE] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
  LANG[INV.WORKBENCH] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
  LANG[INV.CORD] = ["Hilo", "Usado para craftear ropa y mochila"];
  LANG[INV.BLUE_CORD] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
  LANG[INV.CHEST] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
  LANG[INV.SWORD_WOOD] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
  LANG[INV.SWORD] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
  LANG[INV.SWORD_GOLD] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
  LANG[INV.PIRATE_SWORD] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
  LANG[INV.DRAGON_SWORD] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
  LANG[INV.PICK_WOOD] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
  LANG[INV.PICK] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
  LANG[INV.PICK_GOLD] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
  LANG[INV.PICK_DIAMOND] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
  LANG[INV.PICK_AMETHYST] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
  LANG[INV.HAMMER] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
  LANG[INV.HAMMER_GOLD] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
  LANG[INV.SUPER_HAMMER] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
  LANG[INV.WOOD_SPEAR] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
  LANG[INV.SPEAR] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
  LANG[INV.GOLD_SPEAR] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
  LANG[INV.SHOVEL] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
  LANG[INV.WOOD_HELMET] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
  LANG[INV.STONE_HELMET] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
  LANG[INV.GOLD_HELMET] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
  LANG[INV.DRAGON_HELMET] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
  LANG[INV.EXPLORER_HAT] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
  LANG[INV.CHRISTMAS_HAT] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
  LANG[INV.ELF_HAT] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
  LANG[INV.HOOD] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
  LANG[INV.EARMUFFS] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
  LANG[INV.COAT] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
  LANG[INV.CAP_SCARF] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
  LANG[INV.PEASANT] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
  LANG[INV.WINTER_HOOD] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
  LANG[INV.WINTER_PEASANT] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
  LANG[INV.DIVING_MASK] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
  LANG[INV.DRAGON_ORB] = ["Esfera del Dragón", "Dada en la misión"];
  LANG[INV.DRAGON_HEART] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
  LANG[INV.GEMME_GREEN] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
  LANG[INV.GEMME_ORANGE] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
  LANG[INV.GEMME_BLUE] = ["Gema Azul", "Para gente muy amable"];
  LANG[INV.CROWN_GREEN] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
  LANG[INV.CROWN_ORANGE] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
  LANG[INV.CROWN_BLUE] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
  LANG[INV.BUCKET_FULL] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
  LANG[INV.BUCKET_EMPTY] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
  LANG[INV.BOTTLE_FULL] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Botella Vacia", "La puedes llenar de agua"];
  LANG[INV.WATERING_CAN] = ["Regadera Vacía", "La tienes que llenar de agua"];
  LANG[INV.WATERING_CAN_FULL] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
  LANG[INV.BAG] = ["Mochila", "¡Mas espacio para tus cosas!"];
  LANG[INV.PAPER] = ["Hoja", "Usada para hacer un libro"];
  LANG[INV.BOOK] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
  LANG[INV.BANDAGE] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
  LANG[INV.LOCK] = ["Cerradura", "Te permite cerrar tu cofre"];
  LANG[INV.LOCKPICK] = ["Llave", "Te permite abrir un cofre cerrado"];
  LANG[INV.TOTEM] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
  LANG[INV.BRIDGE] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
  LANG[INV.SIGN] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
  LANG[INV.ROOF] = ["Techo", "Te esconde un poco y te protege del frío"];
  LANG[INV.WELL] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
  LANG[INV.WALL] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
  LANG[INV.STONE_WALL] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
  LANG[INV.GOLD_WALL] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
  LANG[INV.SPIKE] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
  LANG[INV.STONE_SPIKE] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
  LANG[INV.GOLD_SPIKE] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
  LANG[INV.WOOD_DOOR] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
  LANG[INV.STONE_DOOR] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
  LANG[INV.GOLD_DOOR] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
  LANG[INV.FURNACE] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
  LANG[INV.WINDMILL] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
  LANG[INV.BREAD_OVEN] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
  LANG[INV.RESURRECTION] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "No puedes unirte a este servidor";
  LANG[TEXT.KICKED] = "Expulsado: ";
  LANG[TEXT.KEY_ALREADY] = "Tu llave ya está usada";
  LANG[TEXT.KEY_WRONG] = "Tu llave está mal";
  LANG[TEXT.OLD_VERSION] = "Tienes una versión antigua, limpia tu cache";
  LANG[TEXT.NO_MORE_RESOURCES] = "No hay mas recursos";
  LANG[TEXT.SURVIVED_1DAY] = "Has sobrevivido 1 día";
  LANG[TEXT.SURVIVED] = "Has sobrevivido ";
  LANG[TEXT.DAYS] = " días";
  LANG[TEXT.DEAD_SAD] = "Estás muerto ;-;";
  LANG[TEXT.SPAM_ME] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
  LANG[TEXT.SPAM_ME2] = "El servidor esta lleno, ¡spamea el botón de jugar!";
  LANG[TEXT.EMPTY] = "Recurso vacio";
  LANG[TEXT.INV_FULL] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
  LANG[TEXT.DEAD] = " está muerto";
  LANG[TEXT.WRONG_TOOL] = "Esta no es la herramienta correcta";
  LANG[TEXT.JOIN_TEAM] = "Te has unido a un equipo";
  LANG[TEXT.YOU_DEAD] = "Estás muerto";
  LANG[TEXT.JOINED_TEAM] = " se unió al equipo";
  LANG[TEXT.TEAM_DESTROYED] = "Tu equipo ha sido destruido";
  LANG[TEXT.LEFT_TEAM] = "Has dejado el equipo";
  LANG[TEXT.LEFT_TEAM2] = " dejo el equipo ";
  LANG[TEXT.TOKEN] = "Alguien te robó tu token :>";
  LANG[TEXT.CHOOSE] = "Elige un servidor";
  LANG[TEXT.PLAYERS] = "jugadores";
  LANG[TEXT.TOTAL_PLAYERS] = "total de jugadores";
  LANG[TEXT.TOTAL_MODE] = "Jugadores en este modo de juego";
  LANG[TEXT.COMMING_SOON] = "Próximamente...";
  document.getElementById("nickname_input").placeholder = "Apodo";
  DIE[0] = ["Has muerto por ninguna razón"];
  DIE[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
  DIE[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
  DIE[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
  DIE[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
  DIE[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
  DIE[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
  DIE[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
  DIE[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
  DIE[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
  DIE[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
  DIE[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
  DIE[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
  DIE[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
  DIE[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
  DIE[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
  DIE[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
  DIE[17] = ["Tu piel se cayó, el sol te quemó."];
  DIE[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
  DIE[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
  DIE[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
  DIE[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
}, set_german = function () {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var anteaus = 0; anteaus < 7; anteaus++) {
    document.getElementById("claim_reward_" + anteaus).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Hand"];
  LANG[INV.GROUND] = ["Boden", "Dreckig!"];
  LANG[INV.SAND] = ["Sand", "Ich habe es in meine Augen bekommen!"];
  LANG[INV.WOOD] = ["Holz", "Du kannst niemals zu viel haben!"];
  LANG[INV.STONE] = ["Stein", "Auch Fels gennant"];
  LANG[INV.GOLD] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
  LANG[INV.DIAMOND] = ["Diamant", "Was wirst du daraus machen?"];
  LANG[INV.AMETHYST] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
  LANG[INV.FLOUR] = ["Mehl", "wird fürs Backen gebraucht"];
  LANG[INV.COOKIE] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
  LANG[INV.CAKE] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
  LANG[INV.MEAT] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
  LANG[INV.COOKED_MEAT] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
  LANG[INV.FOODFISH] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
  LANG[INV.FOODFISH_COOKED] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
  LANG[INV.BREAD] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
  LANG[INV.SANDWICH] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
  LANG[INV.CANDY] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
  LANG[INV.SUGAR_CAN] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
  LANG[INV.GARLAND] = ["Girlande", "perfekter Schmuck für Dächer"];
  LANG[INV.SEED] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
  LANG[INV.PLANT] = ["Beere", "Beeren lecker!", "Essen: 10"];
  LANG[INV.WHEAT_SEED] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
  LANG[INV.WILD_WHEAT] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
  LANG[INV.PUMPKIN_SEED] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
  LANG[INV.PUMPKIN] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
  LANG[INV.GARLIC_SEED] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
  LANG[INV.GARLIC] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
  LANG[INV.THORNBUSH] = ["Dornenbusch", "Es sticht!"];
  LANG[INV.PLOT] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
  LANG[INV.ICE] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
  LANG[INV.SPANNER] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
  LANG[INV.FUR_WOLF] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
  LANG[INV.FUR] = ["Hasenfell", "Der Hase war so süß..."];
  LANG[INV.SPECIAL_FUR] = ["Klares Fell", "Du bist eine Brotfabrik"];
  LANG[INV.SPECIAL_FUR_2] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
  LANG[INV.FUR_WINTER] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
  LANG[INV.SCALES] = ["Schuppen", "Es riecht wie Fisch!"];
  LANG[INV.KRAKEN_SKIN] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
  LANG[INV.FIRE] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
  LANG[INV.BIG_FIRE] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
  LANG[INV.WORKBENCH] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
  LANG[INV.CORD] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
  LANG[INV.BLUE_CORD] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
  LANG[INV.CHEST] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
  LANG[INV.SWORD_WOOD] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
  LANG[INV.SWORD] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
  LANG[INV.SWORD_GOLD] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
  LANG[INV.PIRATE_SWORD] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
  LANG[INV.DRAGON_SWORD] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
  LANG[INV.PICK_WOOD] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
  LANG[INV.PICK] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
  LANG[INV.PICK_GOLD] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
  LANG[INV.PICK_DIAMOND] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
  LANG[INV.PICK_AMETHYST] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
  LANG[INV.HAMMER] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
  LANG[INV.HAMMER_GOLD] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
  LANG[INV.SUPER_HAMMER] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
  LANG[INV.WOOD_SPEAR] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
  LANG[INV.SPEAR] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
  LANG[INV.GOLD_SPEAR] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
  LANG[INV.SHOVEL] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
  LANG[INV.WOOD_HELMET] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
  LANG[INV.STONE_HELMET] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
  LANG[INV.GOLD_HELMET] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
  LANG[INV.DRAGON_HELMET] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
  LANG[INV.EXPLORER_HAT] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.CHRISTMAS_HAT] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.ELF_HAT] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.HOOD] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.EARMUFFS] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.COAT] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.CAP_SCARF] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
  LANG[INV.PEASANT] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.WINTER_HOOD] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.WINTER_PEASANT] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.DIVING_MASK] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
  LANG[INV.DRAGON_ORB] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
  LANG[INV.DRAGON_HEART] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
  LANG[INV.GEMME_GREEN] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
  LANG[INV.GEMME_ORANGE] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
  LANG[INV.GEMME_BLUE] = ["Blauer Edelstein", "Für sehr nette Leute"];
  LANG[INV.CROWN_GREEN] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
  LANG[INV.CROWN_ORANGE] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
  LANG[INV.CROWN_BLUE] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
  LANG[INV.BUCKET_FULL] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
  LANG[INV.BUCKET_EMPTY] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
  LANG[INV.BOTTLE_FULL] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
  LANG[INV.WATERING_CAN] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
  LANG[INV.WATERING_CAN_FULL] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
  LANG[INV.BAG] = ["Rucksack", "Mehr Platz im Inventar!"];
  LANG[INV.PAPER] = ["Papier", "Wird fürs Büchermachen verwendet"];
  LANG[INV.BOOK] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
  LANG[INV.BANDAGE] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
  LANG[INV.LOCK] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
  LANG[INV.LOCKPICK] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
  LANG[INV.TOTEM] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
  LANG[INV.BRIDGE] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
  LANG[INV.SIGN] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
  LANG[INV.ROOF] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
  LANG[INV.WELL] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
  LANG[INV.WALL] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
  LANG[INV.STONE_WALL] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
  LANG[INV.GOLD_WALL] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
  LANG[INV.SPIKE] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
  LANG[INV.STONE_SPIKE] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
  LANG[INV.GOLD_SPIKE] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
  LANG[INV.WOOD_DOOR] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
  LANG[INV.STONE_DOOR] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
  LANG[INV.GOLD_DOOR] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
  LANG[INV.FURNACE] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
  LANG[INV.WINDMILL] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
  LANG[INV.BREAD_OVEN] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
  LANG[INV.RESURRECTION] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "Du kannst diesem Server nicht beitreten";
  LANG[TEXT.KICKED] = "Gekickt: ";
  LANG[TEXT.KEY_ALREADY] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
  LANG[TEXT.KEY_WRONG] = "Dein Schlüssel ist falsch";
  LANG[TEXT.OLD_VERSION] = "Deine Version ist veraltet, säubere dein Cache";
  LANG[TEXT.NO_MORE_RESOURCES] = "Es gibt keine neuen Ressourcen";
  LANG[TEXT.SURVIVED_1DAY] = "Du hast einen Tag überlebt";
  LANG[TEXT.SURVIVED] = "Du hast überlebt ";
  LANG[TEXT.DAYS] = " Tage";
  LANG[TEXT.DEAD_SAD] = "Du bist gestorben ;-;";
  LANG[TEXT.SPAM_ME] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
  LANG[TEXT.SPAM_ME2] = "Server ist voll! Drücke immer wieder auf spielen!";
  LANG[TEXT.EMPTY] = "Ressource ist leer";
  LANG[TEXT.INV_FULL] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
  LANG[TEXT.DEAD] = " ist gestorben";
  LANG[TEXT.WRONG_TOOL] = "Das ist nicht das richtige Werkzeug";
  LANG[TEXT.JOIN_TEAM] = "Du bist einem Team beigetreten";
  LANG[TEXT.YOU_DEAD] = "Du bist gestorben";
  LANG[TEXT.JOINED_TEAM] = " ist dem Team beigetreten";
  LANG[TEXT.TEAM_DESTROYED] = "Dein Team wurde zerstört";
  LANG[TEXT.LEFT_TEAM] = "Du hast das Team verlassen";
  LANG[TEXT.LEFT_TEAM2] = " hat das Team verlassen";
  LANG[TEXT.TOKEN] = "Jemand hat dein Token gestohlen :>";
  LANG[TEXT.CHOOSE] = "Suche dir ein Server aus";
  LANG[TEXT.PLAYERS] = "Spieler";
  LANG[TEXT.TOTAL_PLAYERS] = "alle Spieler";
  LANG[TEXT.TOTAL_MODE] = "Spieler in diesem Modus";
  LANG[TEXT.COMMING_SOON] = "Bald verfügbar...";
  document.getElementById("nickname_input").placeholder = "Spitzname";
  DIE[0] = ["Du wurdest ohne Grund getötet"];
  DIE[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
  DIE[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
  DIE[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
  DIE[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
  DIE[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
  DIE[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
  DIE[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
  DIE[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
  DIE[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
  DIE[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
  DIE[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
  DIE[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
  DIE[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
  DIE[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
  DIE[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
  DIE[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
  DIE[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
  DIE[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
  DIE[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
  DIE[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
  DIE[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
}, set_polish = function () {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var joscelynn = 0; joscelynn < 7; joscelynn++) {
    document.getElementById("claim_reward_" + joscelynn).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Ręka"];
  LANG[INV.GROUND] = ["Ziemia", "Brudna!"];
  LANG[INV.SAND] = ["Piasek", "Mam go w oczach!"];
  LANG[INV.WOOD] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
  LANG[INV.STONE] = ["Kamień", "Także nazywany skałą"];
  LANG[INV.GOLD] = ["Złoto", "Bądź hojny, daj trochę innym"];
  LANG[INV.DIAMOND] = ["Diament", "Co z nim zrobisz?"];
  LANG[INV.AMETHYST] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
  LANG[INV.FLOUR] = ["Mąka", "Używana w gotowaniu"];
  LANG[INV.COOKIE] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
  LANG[INV.CAKE] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
  LANG[INV.MEAT] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
  LANG[INV.COOKED_MEAT] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
  LANG[INV.FOODFISH] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
  LANG[INV.BREAD] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
  LANG[INV.SANDWICH] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
  LANG[INV.CANDY] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
  LANG[INV.SUGAR_CAN] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
  LANG[INV.GARLAND] = ["Girlanda", "Idealna do dekorowania dachów"];
  LANG[INV.SEED] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
  LANG[INV.PLANT] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
  LANG[INV.WHEAT_SEED] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
  LANG[INV.WILD_WHEAT] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
  LANG[INV.PUMPKIN_SEED] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
  LANG[INV.PUMPKIN] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
  LANG[INV.GARLIC_SEED] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
  LANG[INV.GARLIC] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
  LANG[INV.THORNBUSH] = ["Kolczasty krzew", "Kłuje!"];
  LANG[INV.PLOT] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
  LANG[INV.ICE] = ["Lód", "Użyteczny do robienia ciast i wody"];
  LANG[INV.SPANNER] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
  LANG[INV.FUR_WOLF] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
  LANG[INV.FUR] = ["Skóra królika", "Ten królik był taki słodziutki..."];
  LANG[INV.SPECIAL_FUR] = ["Skóra", "Jesteś fabryką chleba"];
  LANG[INV.SPECIAL_FUR_2] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
  LANG[INV.FUR_WINTER] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
  LANG[INV.SCALES] = ["Łuski", "Pachnie jak ryba!"];
  LANG[INV.KRAKEN_SKIN] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
  LANG[INV.FIRE] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
  LANG[INV.BIG_FIRE] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
  LANG[INV.WORKBENCH] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
  LANG[INV.CORD] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
  LANG[INV.BLUE_CORD] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
  LANG[INV.CHEST] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
  LANG[INV.SWORD_WOOD] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
  LANG[INV.SWORD] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
  LANG[INV.SWORD_GOLD] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
  LANG[INV.PIRATE_SWORD] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
  LANG[INV.DRAGON_SWORD] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
  LANG[INV.PICK_WOOD] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
  LANG[INV.PICK] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
  LANG[INV.PICK_GOLD] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
  LANG[INV.PICK_DIAMOND] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
  LANG[INV.PICK_AMETHYST] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
  LANG[INV.HAMMER] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
  LANG[INV.HAMMER_GOLD] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
  LANG[INV.SUPER_HAMMER] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
  LANG[INV.WOOD_SPEAR] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
  LANG[INV.SPEAR] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
  LANG[INV.GOLD_SPEAR] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
  LANG[INV.SHOVEL] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
  LANG[INV.WOOD_HELMET] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
  LANG[INV.STONE_HELMET] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
  LANG[INV.GOLD_HELMET] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
  LANG[INV.DRAGON_HELMET] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
  LANG[INV.EXPLORER_HAT] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
  LANG[INV.CHRISTMAS_HAT] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
  LANG[INV.ELF_HAT] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
  LANG[INV.HOOD] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
  LANG[INV.EARMUFFS] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
  LANG[INV.COAT] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
  LANG[INV.CAP_SCARF] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
  LANG[INV.PEASANT] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
  LANG[INV.WINTER_HOOD] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
  LANG[INV.WINTER_PEASANT] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
  LANG[INV.DIVING_MASK] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
  LANG[INV.DRAGON_ORB] = ["Smocza kula", "Zdobyta podczas zadania"];
  LANG[INV.DRAGON_HEART] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
  LANG[INV.GEMME_GREEN] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
  LANG[INV.GEMME_ORANGE] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
  LANG[INV.GEMME_BLUE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
  LANG[INV.CROWN_GREEN] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
  LANG[INV.CROWN_ORANGE] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
  LANG[INV.CROWN_BLUE] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
  LANG[INV.BUCKET_FULL] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
  LANG[INV.BUCKET_EMPTY] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
  LANG[INV.BOTTLE_FULL] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
  LANG[INV.WATERING_CAN] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
  LANG[INV.WATERING_CAN_FULL] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
  LANG[INV.BAG] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
  LANG[INV.PAPER] = ["Papier", "Używany w tworzeniu książki"];
  LANG[INV.BOOK] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
  LANG[INV.BANDAGE] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
  LANG[INV.LOCK] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
  LANG[INV.LOCKPICK] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
  LANG[INV.TOTEM] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
  LANG[INV.BRIDGE] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
  LANG[INV.SIGN] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
  LANG[INV.ROOF] = ["Dach", "Trochę cie ogrzewa i chowa!"];
  LANG[INV.WELL] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
  LANG[INV.WALL] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
  LANG[INV.STONE_WALL] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
  LANG[INV.GOLD_WALL] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
  LANG[INV.SPIKE] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
  LANG[INV.STONE_SPIKE] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
  LANG[INV.GOLD_SPIKE] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
  LANG[INV.WOOD_DOOR] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
  LANG[INV.STONE_DOOR] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
  LANG[INV.GOLD_DOOR] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
  LANG[INV.FURNACE] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
  LANG[INV.WINDMILL] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
  LANG[INV.BREAD_OVEN] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
  LANG[INV.RESURRECTION] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "Nie możesz dołączyć do tego serwera";
  LANG[TEXT.KICKED] = "Wyrzucony: ";
  LANG[TEXT.KEY_ALREADY] = "Twój klucz jest aktualnie używany przez innego gracza";
  LANG[TEXT.KEY_WRONG] = "Twój klucz jest nieprawidłowy";
  LANG[TEXT.OLD_VERSION] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
  LANG[TEXT.NO_MORE_RESOURCES] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
  LANG[TEXT.SURVIVED_1DAY] = "Przeżyłeś 1 dzień";
  LANG[TEXT.SURVIVED] = "Przeżyłeś ";
  LANG[TEXT.DAYS] = " dni";
  LANG[TEXT.DEAD_SAD] = "Jesteś martwy ;-;";
  LANG[TEXT.SPAM_ME] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
  LANG[TEXT.SPAM_ME2] = "Serwer jest pełny! Spamuj przycisk zagraj!";
  LANG[TEXT.EMPTY] = "Źródło jest puste";
  LANG[TEXT.INV_FULL] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
  LANG[TEXT.DEAD] = " jest martwy";
  LANG[TEXT.WRONG_TOOL] = "To nie jest właściwe narzędzie";
  LANG[TEXT.JOIN_TEAM] = "Dołączyłeś do drużyny";
  LANG[TEXT.YOU_DEAD] = "Jesteś martwy";
  LANG[TEXT.JOINED_TEAM] = " dołączył do drużyny";
  LANG[TEXT.TEAM_DESTROYED] = "Twoja drużyna została zniszczona";
  LANG[TEXT.LEFT_TEAM] = " Opuściłeś drużynę";
  LANG[TEXT.LEFT_TEAM2] = " opuścił drużynę";
  LANG[TEXT.TOKEN] = "Ktoś ukradł twój żeton :>";
  LANG[TEXT.CHOOSE] = "Wybierz serwer";
  LANG[TEXT.PLAYERS] = "graczy";
  LANG[TEXT.TOTAL_PLAYERS] = "wszystkich graczy";
  LANG[TEXT.TOTAL_MODE] = "graczy w tym trybie";
  LANG[TEXT.COMMING_SOON] = "Już wkrótce...";
  document.getElementById("nickname_input").placeholder = "Przydomek";
  DIE[0] = ["Zostałeś zabity bez powodu"];
  DIE[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
  DIE[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
  DIE[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
  DIE[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
  DIE[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
  DIE[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
  DIE[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
  DIE[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
  DIE[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
  DIE[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
  DIE[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
  DIE[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
  DIE[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
  DIE[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
  DIE[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
  DIE[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
  DIE[17] = ["Twoja skóra odpada, słońce cię zabija."];
  DIE[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
  DIE[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
  DIE[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
  DIE[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
}, set_french = function () {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " RETOUR AU JEU";
  LANG[TEXT.TWITTER] = " Partage sur Twitter";
  LANG[TEXT.FACEBOOK] = " Partage sur Facebook";
  LANG[TEXT.KIT_NEXT] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Tués";
  LANG[TEXT.DAYS_SURVIVED] = "Jours survécus";
  LANG[TEXT.MODE_FREE] = "Mode de construction: Libre. Appuie sur G pour changer";
  LANG[TEXT.MODE_GRID] = "Mode de construction: Grille. Appuie sur G pour changer";
  LANG[INV.CRAB_LOOT] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quêtes";
  document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
  document.getElementById("constraintquest").innerHTML = " Contraintes";
  document.getElementById("claim_rewards").innerHTML = " Résultat";
  document.getElementById("rewardquest").innerHTML = " Récompenses";
  document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
  document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
  document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
  document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
  document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
  document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
  document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
  for (var nilan = 0; nilan < 7; nilan++) {
    document.getElementById("claim_reward_" + nilan).innerHTML = "RÉCOMPENSE!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
  LANG[INV.HAND] = ["Main"];
  LANG[INV.GROUND] = ["Terre", "C'est sale!"];
  LANG[INV.SAND] = ["Sable", "J'en ai dans les yeux"];
  LANG[INV.WOOD] = ["Bois", "Tu n'en auras jamais trop!"];
  LANG[INV.STONE] = ["Pierre", "Aussi appelée roche"];
  LANG[INV.GOLD] = ["Or", "Sois généreux, donne en aux autres"];
  LANG[INV.DIAMOND] = ["Diamant", "Comme tes yeux! wesh"];
  LANG[INV.AMETHYST] = ["Améthyste", "C'est Mauve comme Lapa"];
  LANG[INV.FLOUR] = ["Farine", "Utile pour la cuisine"];
  LANG[INV.COOKIE] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
  LANG[INV.CAKE] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
  LANG[INV.MEAT] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
  LANG[INV.COOKED_MEAT] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
  LANG[INV.FOODFISH] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
  LANG[INV.BREAD] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
  LANG[INV.SANDWICH] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
  LANG[INV.CANDY] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
  LANG[INV.SUGAR_CAN] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
  LANG[INV.GARLAND] = ["Guirlandes", "Utilisable sur les toits"];
  LANG[INV.SEED] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
  LANG[INV.PLANT] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
  LANG[INV.WHEAT_SEED] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
  LANG[INV.WILD_WHEAT] = ["Blé", "Peut être transformé en farine dans les moulins"];
  LANG[INV.PUMPKIN_SEED] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
  LANG[INV.PUMPKIN] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
  LANG[INV.GARLIC_SEED] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
  LANG[INV.GARLIC] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
  LANG[INV.THORNBUSH_SEED] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
  LANG[INV.THORNBUSH] = ["Ronces", "Ça pique!"];
  LANG[INV.PLOT] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
  LANG[INV.ICE] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
  LANG[INV.SPANNER] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
  LANG[INV.FUR_WOLF] = ["Peau de loup", "Il était où le gentil ti Youki?"];
  LANG[INV.FUR] = ["Peau de lapin", "Vous êtes un monstre"];
  LANG[INV.SPECIAL_FUR] = ["Fourrure blanche", "Tu es une usine à pain"];
  LANG[INV.SPECIAL_FUR_2] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
  LANG[INV.FUR_WINTER] = ["Fourrure d'hiver", "Il voulait juste un calin"];
  LANG[INV.SCALES] = ["Écailles", "Ça sent le poisson!"];
  LANG[INV.KRAKEN_SKIN] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
  LANG[INV.FIRE] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
  LANG[INV.BIG_FIRE] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
  LANG[INV.WORKBENCH] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
  LANG[INV.CORD] = ["Fil", "Utile pour faire des chapeaux et un sac"];
  LANG[INV.BLUE_CORD] = ["Fil de diamant", "Utile pour faire des chapeaux"];
  LANG[INV.CHEST] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
  LANG[INV.SWORD_WOOD] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
  LANG[INV.SWORD] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
  LANG[INV.SWORD_GOLD] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
  LANG[INV.PIRATE_SWORD] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
  LANG[INV.DRAGON_SWORD] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
  LANG[INV.PICK_WOOD] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
  LANG[INV.PICK] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
  LANG[INV.PICK_GOLD] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
  LANG[INV.PICK_DIAMOND] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
  LANG[INV.PICK_AMETHYST] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
  LANG[INV.HAMMER] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
  LANG[INV.HAMMER_GOLD] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
  LANG[INV.SUPER_HAMMER] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
  LANG[INV.WOOD_SPEAR] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
  LANG[INV.SPEAR] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
  LANG[INV.GOLD_SPEAR] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
  LANG[INV.SHOVEL] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
  LANG[INV.WOOD_HELMET] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
  LANG[INV.STONE_HELMET] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
  LANG[INV.GOLD_HELMET] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
  LANG[INV.DRAGON_HELMET] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
  LANG[INV.EXPLORER_HAT] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.CHRISTMAS_HAT] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.ELF_HAT] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.HOOD] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.EARMUFFS] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.COAT] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.CAP_SCARF] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
  LANG[INV.PEASANT] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.WINTER_HOOD] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.WINTER_PEASANT] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.DIVING_MASK] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
  LANG[INV.DRAGON_ORB] = ["Orbe du Dragon", "Donné en Quête"];
  LANG[INV.DRAGON_HEART] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
  LANG[INV.GEMME_GREEN] = ["Gemme verte", "Tu n'as pas triché, promis?"];
  LANG[INV.GEMME_ORANGE] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
  LANG[INV.GEMME_BLUE] = ["Gemme bleue", "Pour les gens trop gentils"];
  LANG[INV.CROWN_GREEN] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
  LANG[INV.CROWN_ORANGE] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
  LANG[INV.CROWN_BLUE] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
  LANG[INV.BUCKET_FULL] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
  LANG[INV.BUCKET_EMPTY] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
  LANG[INV.BOTTLE_FULL] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
  LANG[INV.WATERING_CAN] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
  LANG[INV.WATERING_CAN_FULL] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
  LANG[INV.BAG] = ["Sac", "Plus de place dans ton inventaire!"];
  LANG[INV.PAPER] = ["Papier", "Pour fabriquer toute sorte d'objets"];
  LANG[INV.BOOK] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
  LANG[INV.BANDAGE] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
  LANG[INV.LOCK] = ["Cadenas", "Pour verrouiller un coffre"];
  LANG[INV.LOCKPICK] = ["Clé", "Pour déverrouiller un coffre"];
  LANG[INV.TOTEM] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
  LANG[INV.BRIDGE] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
  LANG[INV.SIGN] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
  LANG[INV.ROOF] = ["Toit", "Te cache un peu et te réchauffe"];
  LANG[INV.WELL] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
  LANG[INV.WALL] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
  LANG[INV.STONE_WALL] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
  LANG[INV.GOLD_WALL] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
  LANG[INV.SPIKE] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
  LANG[INV.STONE_SPIKE] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
  LANG[INV.GOLD_SPIKE] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
  LANG[INV.WOOD_DOOR] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
  LANG[INV.STONE_DOOR] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
  LANG[INV.GOLD_DOOR] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
  LANG[INV.FURNACE] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
  LANG[INV.WINDMILL] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
  LANG[INV.BREAD_OVEN] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
  LANG[INV.RESURRECTION] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "Tu ne peux pas rejoindre le serveur";
  LANG[TEXT.KICKED] = "Expulsé: ";
  LANG[TEXT.KEY_ALREADY] = "Ta clé est déjà utilisée par quelqu'un d'autre";
  LANG[TEXT.KEY_WRONG] = "Ta clé est fausse";
  LANG[TEXT.OLD_VERSION] = "Tu as une vieille version, rafraichis tes caches";
  LANG[TEXT.NO_MORE_RESOURCES] = "Il n'y a plus de nouvelles ressources";
  LANG[TEXT.SURVIVED_1DAY] = "Tu as survécu 1 jour";
  LANG[TEXT.SURVIVED] = "Tu as survécu ";
  LANG[TEXT.DAYS] = " jours";
  LANG[TEXT.DEAD_SAD] = "Tu es mort ;-;";
  LANG[TEXT.SPAM_ME] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
  LANG[TEXT.SPAM_ME2] = "Le serveur est complet! Spam le bouton jouer";
  LANG[TEXT.EMPTY] = "Cette ressource est vide";
  LANG[TEXT.INV_FULL] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
  LANG[TEXT.DEAD] = " est mort";
  LANG[TEXT.WRONG_TOOL] = "Ce n'est pas le bon outil";
  LANG[TEXT.JOIN_TEAM] = "Tu as rejoins une équipe";
  LANG[TEXT.YOU_DEAD] = "Tu es mort";
  LANG[TEXT.JOINED_TEAM] = " a rejoint l'équipe";
  LANG[TEXT.TEAM_DESTROYED] = "Ton équipe a été détruite";
  LANG[TEXT.LEFT_TEAM] = "Tu as quitté l'équipe";
  LANG[TEXT.LEFT_TEAM2] = " a quitté l'équipe";
  LANG[TEXT.TOKEN] = "Quelqu'un a volé ton token :>";
  LANG[TEXT.CHOOSE] = "Choisis un serveur";
  LANG[TEXT.PLAYERS] = "joueurs";
  LANG[TEXT.TOTAL_PLAYERS] = "joueurs";
  LANG[TEXT.TOTAL_MODE] = "joueurs dans ce mode";
  LANG[TEXT.COMMING_SOON] = "Bientôt...";
  document.getElementById("nickname_input").placeholder = "Surnom";
  DIE[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
  DIE[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
  DIE[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
  DIE[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
  DIE[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
  DIE[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
  DIE[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
  DIE[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
  DIE[8] = ["Cet ours voulait juste un câlin."];
  DIE[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
  DIE[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
  DIE[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
  DIE[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
  DIE[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
  DIE[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
  DIE[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
  DIE[16] = ["Un kraken a 'kraké' tes os."];
  DIE[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
  DIE[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
  DIE[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
  DIE[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
  DIE[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
}, LANG = [];
for (var i = 0; i < COUNTER; i++) {
  LANG[i] = "";
}
var DIE = [];
$(".md-languages").on("click", function () {
  $(this).toggleClass("active");
});
$(".md-languages ul li").on("click", function () {
  var glendell = $(this).text();
  if (glendell === "English") {
    set_english();
  } else {
    if (glendell === "Français") {
      set_french();
    } else {
      if (glendell === "Deutsch") {
        set_german();
      } else {
        if (glendell === "Español") {
          set_spanish();
        } else {
          if (glendell === "Português") {
            set_portuguese();
          } else {
            if (glendell === "Русский") {
              set_russian();
            } else {
              if (glendell === "Polski") {
                set_polish();
              }
            }
          }
        }
      }
    }
  }
  INFO_BOX = [];
  user.craft.label = [];
  $(".md-languages ul li").removeClass("active");
  $(this).addClass("active");
  $(".md-languages label button").text(glendell);
});
var lang = "EN", userlang = navigator.language || navigator.userLanguage;
switch (userlang) {
  case "ru":
    lang = "RU";
    break;
  case "en":
    lang = "EN";
    break;
  case "es":
    lang = "SP";
    break;
  case "fr":
    lang = "FR";
    break;
  case "pl":
    lang = "PL";
    break;
  case "de":
    lang = "DE";
    break;
  case "pt":
    lang = "PT";
    break;
}
var next_lang;
if (lang === "FR") {
  $(".md-languages label button").text("Français");
  next_lang = set_french;
} else {
  if (lang === "PL") {
    $(".md-languages label button").text("Polski");
    next_lang = set_polish;
  } else {
    if (lang === "PT") {
      $(".md-languages label button").text("Português");
      next_lang = set_portuguese;
    } else {
      if (lang === "SP") {
        $(".md-languages label button").text("Español");
        next_lang = set_spanish;
      } else {
        if (lang === "RU") {
          $(".md-languages label button").text("Русский");
          next_lang = set_russian;
        } else {
          lang === "DE" ? ($(".md-languages label button").text("Deutsch"), next_lang = set_german) : ($(".md-languages label button").text("English"), next_lang = set_english);
        }
      }
    }
  }
}
IMAGES = {LOGO: "img/logo.png", BIGDAY: "img/mapday.png", BIGNIGHT: "img/mapnight.png", BIGZDAY: "img/bigzday.png", BIGZNIGHT: "img/bigznight.png", MAPDAY_RIVER: "img/bigday-river1.png", MAPDAY_LAKE: "img/bigday-lake.png", MAPDAY_BERRY: "img/bigday-berry.png", MAPDAY_STONE1: "img/bigday-stone1.png", MAPDAY_STONE2: "img/bigday-stone2.png", MAPDAY_GOLD1: "img/bigday-gold1.png", MAPDAY_GOLD2: "img/bigday-gold2.png", MAPDAY_EMERALD1: "img/bigday-emerald1.png", MAPDAY_EMERALD2: "img/bigday-emerald2.png", MAPDAY_AMETHYST: "img/bigday-amethyst.png", MAPDAY_BEAR: "img/bigday-bear.png", MAPDAY_CAVE: "img/bigday-cave.png", MAPDAY_DIAMOND: "img/bigday-diamond.png", MAPDAY_ISLAND: "img/bigday-island.png", MAPDAY_REIDITE: "img/bigday-reidite.png", MAPDAY_SPIDER: "img/bigday-spider.png", MAPDAY_WOLF: "img/bigday-wolf.png", MAPDAY_FIR_TREE: "img/bigday-fir-tree.png", MAPDAY_FOX: "img/bigday-fox.png", MAPDAY_KRAKEN: "img/bigday-kraken.png", MAPDAY_PIRANHA: "img/bigday-piranha.png", MAPDAY_CACTUS: "img/bigday-cactus.png", MAPDAY_MAGMA: "img/bigday-magma.png", MAPNIGHT_RIVER: "img/bigday-river1.png", MAPNIGHT_LAKE: "img/bignight-lake.png", MAPNIGHT_BERRY: "img/bignight-berry.png", MAPNIGHT_STONE1: "img/bignight-stone1.png", MAPNIGHT_STONE2: "img/bignight-stone2.png", MAPNIGHT_GOLD1: "img/bignight-gold1.png", MAPNIGHT_GOLD2: "img/bignight-gold2.png", MAPNIGHT_EMERALD1: "img/bignight-emerald1.png", MAPNIGHT_EMERALD2: "img/bignight-emerald2.png", MAPNIGHT_AMETHYST: "img/bignight-amethyst.png", MAPNIGHT_BEAR: "img/bignight-bear.png", MAPNIGHT_CAVE: "img/bignight-cave.png", MAPNIGHT_DIAMOND: "img/bignight-diamond.png", MAPNIGHT_ISLAND: "img/bignight-island.png", MAPNIGHT_REIDITE: "img/bignight-reidite.png", MAPNIGHT_SPIDER: "img/bignight-spider.png", MAPNIGHT_WOLF: "img/bignight-wolf.png", MAPNIGHT_FIR_TREE: "img/bignight-fir-tree.png", MAPNIGHT_FOX: "img/bignight-fox.png", MAPNIGHT_KRAKEN: "img/bignight-kraken.png", MAPNIGHT_PIRANHA: "img/bignight-piranha.png", MAPNIGHT_CACTUS: "img/bignight-cactus.png", MAPNIGHT_MAGMA: "img/bignight-magma.png", MAPDAY_DESERT: "img/bigday-desert.png", MAPDAY_WINTER: "img/bigday-winter.png", MAPDAY_LAVA: "img/bigday-lava.png", MAPDAY_FOREST: "img/bigday-forest.png", MAPNIGHT_DESERT: "img/bignight-desert.png", MAPNIGHT_WINTER: "img/bignight-winter.png", MAPNIGHT_LAVA: "img/bignight-lava.png", MAPNIGHT_FOREST: "img/bignight-forest.png", RIVER_WAVED: "img/day-river-wave.png", RIVER_WAVEN: "img/night-river-wave.png", FOG0D: "img/day-fog0.png", FOG1D: "img/day-fog1.png", FOG2D: "img/day-fog2.png", FOG0N: "img/night-fog0.png", FOG1N: "img/night-fog1.png", FOG2N: "img/night-fog2.png", FOD0D: "img/day-fogdesert0.png", FOD1D: "img/day-fogdesert1.png", FOD2D: "img/day-fogdesert2.png", FOD0N: "img/night-fogdesert0.png", FOD1N: "img/night-fogdesert1.png", FOD2N: "img/night-fogdesert2.png", MARKER0D: "img/day-cross-server.png", MARKER1D: "img/day-here-server.png", MARKER2D: "img/day-finish-server.png", MARKER3D: "img/day-item-server.png", MARKER0N: "img/night-cross-server.png", MARKER1N: "img/night-here-server.png", MARKER2N: "img/night-finish-server.png", MARKER3N: "img/night-item-server.png", REIDITE0D: "img/day-reidite0.png", REIDITE0N: "img/night-reidite0.png", REIDITE1D: "img/day-reidite1.png", REIDITE1N: "img/night-reidite1.png", REIDITE2D: "img/day-reidite2.png", REIDITE2N: "img/night-reidite2.png", MAGMA1D: "img/day-lava1.png", MAGMA1N: "img/night-lava1.png", MAGMA2D: "img/day-lava2.png", MAGMA2N: "img/night-lava2.png", MAGMA3D: "img/day-lava3.png", MAGMA3N: "img/night-lava3.png", MAGMA4D: "img/day-lava4.png", MAGMA4N: "img/night-lava4.png", MAGMA5D: "img/day-lava5.png", MAGMA5N: "img/night-lava5.png", MAGMA6D: "img/day-lava6.png", MAGMA6N: "img/night-lava6.png", LAVA_GROUND1D: "img/day-lava-ground1.png", LAVA_GROUND1N: "img/night-lava-ground1.png", LAVA_GROUND2D: "img/day-lava-ground2.png", LAVA_GROUND2N: "img/night-lava-ground2.png", LAVA_GROUND3D: "img/day-lava-ground3.png", LAVA_GROUND3N: "img/night-lava-ground3.png", LAVA_GROUND4D: "img/day-lava-ground4.png", LAVA_GROUND4N: "img/night-lava-ground4.png", LAVA_GROUND5D: "img/day-lava-ground5.png", LAVA_GROUND5N: "img/night-lava-ground5.png", LAVA_GROUND6D: "img/day-lava-ground6.png", LAVA_GROUND6N: "img/night-lava-ground6.png", FIRE_MOBD: "img/day-fire-mob.png", FIRE_MOBN: "img/night-fire-mob.png", FIRE_MOB_HURT: "img/hurt-fire-mob.png", DIAMOND_PROTECTIOND: "img/day-diamond-protection.png", DIAMOND_PROTECTIONN: "img/night-diamond-protection.png", HAND_DIAMOND_PROTECTIOND: "img/day-hand-diamond-protection.png", HAND_DIAMOND_PROTECTIONN: "img/night-hand-diamond-protection.png", INV_DIAMOND_PROTECTION_OUT: "img/inv-diamond-protection-out.png", INV_DIAMOND_PROTECTION_IN: "img/inv-diamond-protection-in.png", INV_DIAMOND_PROTECTION_CLICK: "img/inv-diamond-protection-click.png", AMETHYST_PROTECTIOND: "img/day-amethyst-protection.png", AMETHYST_PROTECTIONN: "img/night-amethyst-protection.png", HAND_AMETHYST_PROTECTIOND: "img/day-hand-amethyst-protection.png", HAND_AMETHYST_PROTECTIONN: "img/night-hand-amethyst-protection.png", INV_AMETHYST_PROTECTION_OUT: "img/inv-amethyst-protection-out.png", INV_AMETHYST_PROTECTION_IN: "img/inv-amethyst-protection-in.png", INV_AMETHYST_PROTECTION_CLICK: "img/inv-amethyst-protection-click.png", REIDITE_SWORDD: "img/day-reidite-sword.png", REIDITE_SWORDN: "img/night-reidite-sword.png", INV_REIDITE_SWORD_OUT: "img/inv-reidite-sword-out.png", INV_REIDITE_SWORD_IN: "img/inv-reidite-sword-in.png", INV_REIDITE_SWORD_CLICK: "img/inv-reidite-sword-click.png", INV_REIDITE_OUT: "img/inv-reidite-out.png", INV_REIDITE_IN: "img/inv-reidite-in.png", INV_REIDITE_CLICK: "img/inv-reidite-click.png", INV_FLAME_OUT: "img/inv-flame-out.png", INV_FLAME_IN: "img/inv-flame-in.png", INV_FLAME_CLICK: "img/inv-flame-click.png", LAVA_BUBLE0D: "img/day-magma-buble0.png", LAVA_BUBLE0N: "img/night-magma-buble0.png", LAVA_BUBLE1D: "img/day-magma-buble1.png", LAVA_BUBLE1N: "img/night-magma-buble1.png", LAVA_BUBLE2D: "img/day-magma-buble2.png", LAVA_BUBLE2N: "img/night-magma-buble2.png", LAVA_DRAGOND: "img/day-lava-dragon.png", LAVA_DRAGONN: "img/night-lava-dragon.png", LAVA_FIRE_DRAGOND: "img/day-fire-dragon.png", LAVA_FIRE_DRAGONN: "img/night-fire-dragon.png", HURT_LAVA_DRAGON: "img/hurt-lava-dragon.png", LAVA_WING_LEFTD: "img/day-lava-wing-left.png", LAVA_WING_LEFTN: "img/night-lava-wing-left.png", LAVA_WING_RIGHTD: "img/day-lava-wing-right.png", LAVA_WING_RIGHTN: "img/night-lava-wing-right.png", HURT_LAVA_WING_LEFT: "img/hurt-lava-wing-left.png", HURT_LAVA_WING_RIGHT: "img/hurt-lava-wing-right.png", REIDITE_SPEARD: "img/day-reidite-spear.png", REIDITE_SPEARN: "img/night-reidite-spear.png", INV_REIDITE_SPEAR_OUT: "img/inv-reidite-spear-out.png", INV_REIDITE_SPEAR_IN: "img/inv-reidite-spear-in.png", INV_REIDITE_SPEAR_CLICK: "img/inv-reidite-spear-click.png", REIDITE_HELMETD: "img/day-reidite-helmet.png", REIDITE_HELMETN: "img/night-reidite-helmet.png", INV_REIDITE_HELMET_OUT: "img/inv-reidite-helmet-out.png", INV_REIDITE_HELMET_IN: "img/inv-reidite-helmet-in.png", INV_REIDITE_HELMET_CLICK: "img/inv-reidite-helmet-click.png", HAND_REIDITE_PROTECTIOND: "img/day-hand-reidite-protection.png", HAND_REIDITE_PROTECTIONN: "img/night-hand-reidite-protection.png", REIDITE_PROTECTIOND: "img/day-reidite-protection.png", REIDITE_PROTECTIONN: "img/night-reidite-protection.png", INV_REIDITE_PROTECTION_OUT: "img/inv-reidite-protection-out.png", INV_REIDITE_PROTECTION_IN: "img/inv-reidite-protection-in.png", INV_REIDITE_PROTECTION_CLICK: "img/inv-reidite-protection-click.png", LAVA_SWORDD: "img/day-lava-dragon-sword.png", LAVA_SWORDN: "img/night-lava-dragon-sword.png", INV_LAVA_SWORD_OUT: "img/inv-lava-dragon-sword-out.png", INV_LAVA_SWORD_IN: "img/inv-lava-dragon-sword-in.png", INV_LAVA_SWORD_CLICK: "img/inv-lava-dragon-sword-click.png", LAVA_SPEARD: "img/day-lava-spear.png", LAVA_SPEARN: "img/night-lava-spear.png", INV_LAVA_SPEAR_OUT: "img/inv-lava-spear-out.png", INV_LAVA_SPEAR_IN: "img/inv-lava-spear-in.png", INV_LAVA_SPEAR_CLICK: "img/inv-lava-spear-click.png", LAVA_HELMETD: "img/day-lava-helmet.png", LAVA_HELMETN: "img/night-lava-helmet.png", INV_LAVA_HELMET_OUT: "img/inv-lava-helmet-out.png", INV_LAVA_HELMET_IN: "img/inv-lava-helmet-in.png", INV_LAVA_HELMET_CLICK: "img/inv-lava-helmet-click.png", WITCHD: "img/day-witch-hat.png", WITCHN: "img/night-witch-hat.png", INV_WITCH_OUT: "img/inv-witch-hat-out.png", INV_WITCH_IN: "img/inv-witch-hat-in.png", INV_WITCH_CLICK: "img/inv-witch-hat-click.png", NIMBUSD: "img/day-nimbus2000.png", NIMBUSN: "img/night-nimbus2000.png", INV_NIMBUS_OUT: "img/inv-nimbus2000-out.png", INV_NIMBUS_IN: "img/inv-nimbus2000-in.png", INV_NIMBUS_CLICK: "img/inv-nimbus2000-click.png", ACCESSORY1D: "img/day-accessory1-pacques.png", ACCESSORY1N: "img/night-accessory1-pacques.png", ACCESSORY2D: "img/day-accessory2-pacques.png", ACCESSORY2N: "img/night-accessory2-pacques.png", ACCESSORY3D: "img/day-accessory3-pacques.png", ACCESSORY3N: "img/night-accessory3-pacques.png", ACCESSORY5D: "img/day-accessory5-pacques.png", ACCESSORY5N: "img/night-accessory5-pacques.png", ACCESSORY6D: "img/day-accessory6-pacques.png", ACCESSORY6N: "img/night-accessory6-pacques.png", ACCESSORY7D: "img/day-accessory7-pacques.png", ACCESSORY7N: "img/night-accessory7-pacques.png", ACCESSORY8D: "img/day-accessory8-pacques.png", ACCESSORY8N: "img/night-accessory8-pacques.png", BAG_EASTERD: "img/day-bag-pacques.png", BAG_EASTERN: "img/night-bag-pacques.png", CARROTD: "img/day-carrot.png", CARROTN: "img/night-carrot.png", CARROT_DRIEDD: "img/day-carrot-dried.png", CARROT_DRIEDN: "img/night-carrot-dried.png", TOMATO_MINID: "img/day-tomato-herb.png", TOMATO_MININ: "img/night-tomato-herb.png", TOMATO_MINI_DRIEDD: "img/day-tomato-herb-dried.png", TOMATO_MINI_DRIEDN: "img/night-tomato-herb-dried.png", TOMATOD: "img/day-tomato.png", TOMATON: "img/night-tomato.png", INV_CARROT_OUT: "img/inv-carrot-out.png", INV_CARROT_IN: "img/inv-carrot-in.png", INV_CARROT_CLICK: "img/inv-carrot-click.png", INV_TOMATO_OUT: "img/inv-tomato-out.png", INV_TOMATO_IN: "img/inv-tomato-in.png", INV_TOMATO_CLICK: "img/inv-tomato-click.png", PLAYER0D: "img/day-player0.png", PLAYER0N: "img/night-player0.png", PLAYER1D: "img/day-player1.png", PLAYER1N: "img/night-player1.png", PLAYER2D: "img/day-player2.png", PLAYER2N: "img/night-player22.png", PLAYER3D: "img/day-player3.png", PLAYER3N: "img/night-player33.png", PLAYER4D: "img/day-player4.png", PLAYER4N: "img/night-player4.png", PLAYER5D: "img/day-player5.png", PLAYER5N: "img/night-player5.png", PLAYER6D: "img/day-player6.png", PLAYER6N: "img/night-player6.png", PLAYER7D: "img/day-player7.png", PLAYER7N: "img/night-player7.png", PLAYER8D: "img/day-player8.png", PLAYER8N: "img/night-player8.png", PLAYER9D: "img/day-player9.png", PLAYER9N: "img/night-player9.png", PLAYER10D: "img/day-player10.png", PLAYER10N: "img/night-player10.png", PLAYER11D: "img/day-player11.png", PLAYER11N: "img/night-player11.png", PLAYER12D: "img/day-player12.png", PLAYER12N: "img/night-player12.png", PLAYER13D: "img/day-player13.png", PLAYER13N: "img/night-player13.png", PLAYER14D: "img/day-player14.png", PLAYER14N: "img/night-player14.png", PLAYER15D: "img/day-player15.png", PLAYER15N: "img/night-player15.png", PLAYER16D: "img/day-player16.png", PLAYER16N: "img/night-player16.png", PLAYER17D: "img/day-player17.png", PLAYER17N: "img/night-player17.png", PLAYER18D: "img/day-player18.png", PLAYER18N: "img/night-player18.png", PLAYER19D: "img/day-player19.png", PLAYER19N: "img/night-player19.png", HAND0D: "img/day-hand-player0.png", HAND0N: "img/night-hand-player0.png", HAND1D: "img/day-hand-player1.png", HAND1N: "img/night-hand-player1.png", HAND2D: "img/day-hand-player2.png", HAND2N: "img/night-hand-player22.png", HAND3D: "img/day-hand-player3.png", HAND3N: "img/night-hand-player33.png", HAND4D: "img/day-hand-player4.png", HAND4N: "img/night-hand-player4.png", HAND5D: "img/day-hand-player5.png", HAND5N: "img/night-hand-player5.png", HAND6D: "img/day-hand-player6.png", HAND6N: "img/night-hand-player6.png", HAND7D: "img/day-hand-player7.png", HAND7N: "img/night-hand-player7.png", HAND8D: "img/day-hand-player8.png", HAND8N: "img/night-hand-player8.png", HAND9D: "img/day-hand-player9.png", HAND9N: "img/night-hand-player9.png", HAND10D: "img/day-hand-player10.png", HAND10N: "img/night-hand-player10.png", HAND11D: "img/day-hand-player11.png", HAND11N: "img/night-hand-player11.png", HAND12D: "img/day-hand-player12.png", HAND12N: "img/night-hand-player12.png", HAND13D: "img/day-hand-player13.png", HAND13N: "img/night-hand-player13.png", HAND14D: "img/day-hand-player14.png", HAND14N: "img/night-hand-player14.png", HAND15D: "img/day-hand-player15.png", HAND15N: "img/night-hand-player15.png", HAND16D: "img/day-hand-player16.png", HAND16N: "img/night-hand-player16.png", HAND17D: "img/day-hand-player17.png", HAND17N: "img/night-hand-player17.png", HAND18D: "img/day-hand-player18.png", HAND18N: "img/night-hand-player18.png", HAND19D: "img/day-hand-player19.png", HAND19N: "img/night-hand-player19.png", ACCESSORY4D: "img/day-accessory4.png", ACCESSORY4N: "img/night-accessory4.png", ACCESSORY9D: "img/day-accessory9.png", ACCESSORY9N: "img/night-accessory9.png", ACCESSORY10D: "img/day-accessory10.png", ACCESSORY10N: "img/night-accessory10.png", ACCESSORY11D: "img/day-accessory11.png", ACCESSORY11N: "img/night-accessory11.png", ACCESSORY12D: "img/day-accessory12.png", ACCESSORY12N: "img/night-accessory12.png", BAGD: "img/day-bag.png", BAGN: "img/night-bag.png", INV_BAG_OUT: "img/inv-bag-out.png", INV_BAG_IN: "img/inv-bag-in.png", INV_BAG_CLICK: "img/inv-bag-click.png", PITCHFORKD: "img/day-pitchfork.png", PITCHFORKN: "img/night-pitchfork.png", INV_PITCHFORK_OUT: "img/inv-pitchfork-out.png", INV_PITCHFORK_IN: "img/inv-pitchfork-in.png", INV_PITCHFORK_CLICK: "img/inv-pitchfork-click.png", INV_WOOD_DOOR_SPIKE_OUT: "img/inv-wood-spike-door-out.png", INV_WOOD_DOOR_SPIKE_IN: "img/inv-wood-spike-door-in.png", INV_WOOD_DOOR_SPIKE_CLICK: "img/inv-wood-spike-door-click.png", INV_STONE_DOOR_SPIKE_OUT: "img/inv-stone-spike-door-out.png", INV_STONE_DOOR_SPIKE_IN: "img/inv-stone-spike-door-in.png", INV_STONE_DOOR_SPIKE_CLICK: "img/inv-stone-spike-door-click.png", INV_GOLD_DOOR_SPIKE_OUT: "img/inv-gold-spike-door-out.png", INV_GOLD_DOOR_SPIKE_IN: "img/inv-gold-spike-door-in.png", INV_GOLD_DOOR_SPIKE_CLICK: "img/inv-gold-spike-door-click.png", INV_DIAMOND_DOOR_SPIKE_OUT: "img/inv-diamond-spike-door-out.png", INV_DIAMOND_DOOR_SPIKE_IN: "img/inv-diamond-spike-door-in.png", INV_DIAMOND_DOOR_SPIKE_CLICK: "img/inv-diamond-spike-door-click.png", INV_AMETHYST_DOOR_SPIKE_OUT: "img/inv-amethyst-spike-door-out.png", INV_AMETHYST_DOOR_SPIKE_IN: "img/inv-amethyst-spike-door-in.png", INV_AMETHYST_DOOR_SPIKE_CLICK: "img/inv-amethyst-spike-door-click.png", WOOD_DOOR_SPIKED: "img/day-wood-spike-door.png", WOOD_DOOR_SPIKEN: "img/night-wood-spike-door.png", STONE_DOOR_SPIKED: "img/day-stone-spike-door.png", STONE_DOOR_SPIKEN: "img/night-stone-spike-door.png", GOLD_DOOR_SPIKED: "img/day-gold-spike-door.png", GOLD_DOOR_SPIKEN: "img/night-gold-spike-door.png", DIAMOND_DOOR_SPIKED: "img/day-diamond-spike-door.png", DIAMOND_DOOR_SPIKEN: "img/night-diamond-spike-door.png", AMETHYST_DOOR_SPIKED: "img/day-amethyst-spike-door.png", AMETHYST_DOOR_SPIKEN: "img/night-amethyst-spike-door.png", INV_REIDITE_DOOR_SPIKE_OUT: "img/inv-reidite-spike-door-out.png", INV_REIDITE_DOOR_SPIKE_IN: "img/inv-reidite-spike-door-in.png", INV_REIDITE_DOOR_SPIKE_CLICK: "img/inv-reidite-spike-door-click.png", INV_REIDITE_DOOR_OUT: "img/inv-reidite-door-out.png", INV_REIDITE_DOOR_IN: "img/inv-reidite-door-in.png", INV_REIDITE_DOOR_CLICK: "img/inv-reidite-door-click.png", INV_REIDITE_SPIKE_OUT: "img/inv-reidite-spike-out.png", INV_REIDITE_SPIKE_IN: "img/inv-reidite-spike-in.png", INV_REIDITE_SPIKE_CLICK: "img/inv-reidite-spike-click.png", INV_REIDITE_WALL_OUT: "img/inv-reidite-wall-out.png", INV_REIDITE_WALL_IN: "img/inv-reidite-wall-in.png", INV_REIDITE_WALL_CLICK: "img/inv-reidite-wall-click.png", REIDITE_WALLD: "img/day-reidite-wall.png", REIDITE_WALLN: "img/night-reidite-wall.png", REIDITE_DOORD: "img/day-reidite-door.png", REIDITE_DOORN: "img/night-reidite-door.png", REIDITE_SPIKED: "img/day-reidite-spike.png", REIDITE_SPIKEN: "img/night-reidite-spike.png", REIDITE_DOOR_SPIKED: "img/day-reidite-spike-door.png", REIDITE_DOOR_SPIKEN: "img/night-reidite-spike-door.png", INV_PICK_REIDITE_OUT: "img/inv-reidite-pickaxe-out.png", INV_PICK_REIDITE_IN: "img/inv-reidite-pickaxe-in.png", INV_PICK_REIDITE_CLICK: "img/inv-reidite-pickaxe-click.png", PICK_REIDITED: "img/day-reidite-pickaxe.png", PICK_REIDITEN: "img/night-reidite-pickaxe.png", INV_HAMMER_REIDITE_OUT: "img/inv-reidite-hammer-out.png", INV_HAMMER_REIDITE_IN: "img/inv-reidite-hammer-in.png", INV_HAMMER_REIDITE_CLICK: "img/inv-reidite-hammer-click.png", HAMMER_REIDITED: "img/day-reidite-hammer.png", HAMMER_REIDITEN: "img/night-reidite-hammer.png", WATERMELOND: "img/day-watermelon1.png", WATERMELONN: "img/night-watermelon1.png", DRIED_WATERMELOND: "img/day-watermelon-dried1.png", DRIED_WATERMELONN: "img/night-watermelon-dried1.png", INV_WATERMELON_OUT: "img/inv-watermelon-out.png", INV_WATERMELON_IN: "img/inv-watermelon-in.png", INV_WATERMELON_CLICK: "img/inv-watermelon-click.png", BOATD: "img/day-boat.png", BOATN: "img/night-boat.png", BOAT_WAVED: "img/day-boat-wave.png", BOAT_WAVEN: "img/night-boat-wave.png", INV_BOAT_OUT: "img/inv-boat-out.png", INV_BOAT_IN: "img/inv-boat-in.png", INV_BOAT_CLICK: "img/inv-boat-click.png", PLANED: "img/day-plane.png", PLANEN: "img/night-plane.png", INV_PLANE_OUT: "img/inv-plane-out.png", INV_PLANE_IN: "img/inv-plane-in.png", INV_PLANE_CLICK: "img/inv-plane-click.png", SLEDD: "img/day-sled.png", SLEDN: "img/night-sled.png", SLED_WAVED: "img/day-sled-wave.png", SLED_WAVEN: "img/night-sled-wave.png", INV_SLED_OUT: "img/inv-sled-out.png", INV_SLED_IN: "img/inv-sled-in.png", INV_SLED_CLICK: "img/inv-sled-click.png", PIRATE_HATD: "img/day-pirate-hat.png", PIRATE_HATN: "img/night-pirate-hat.png", INV_PIRATE_HAT_OUT: "img/inv-pirate-hat-out.png", INV_PIRATE_HAT_IN: "img/inv-pirate-hat-in.png", INV_PIRATE_HAT_CLICK: "img/inv-pirate-hat-click.png", PENGUIND: "img/day-penguin.png", PENGUINN: "img/night-penguin.png", HURT_PENGUIN: "img/hurt-penguin.png", INV_PENGUIN_FEATHER: "img/inv-penguin-feather-click.png", INV_HAWK_FEATHER: "img/inv-hawk-feather-click.png", BOARD: "img/day-boar1.png", BOAR_TAMEDD: "img/day-boar1-tamed.png", BOAR_ANGRYD: "img/day-boar1-angry.png", BOARN: "img/night-boar1.png", BOAR_TAMEDN: "img/night-boar1-tamed.png", BOAR_ANGRYN: "img/night-boar1-angry.png", INV_MOUNT_BOAR_OUT: "img/inv-mount-boar-out.png", INV_MOUNT_BOAR_IN: "img/inv-mount-boar-in.png", INV_MOUNT_BOAR_CLICK: "img/inv-mount-boar-click.png", HURT_BOAR: "img/day-hurt-boar1.png", BOAR_STEP: "img/boar1-step.png", SADDLED: "img/day-saddle1.png", SADDLEN: "img/night-saddle1.png", INV_SADDLE_OUT: "img/inv-saddle-out.png", INV_SADDLE_IN: "img/inv-saddle-in.png", INV_SADDLE_CLICK: "img/inv-saddle-click.png", WAND1D: "img/day-magic-wand0.png", WAND1N: "img/night-magic-wand0.png", LIGHT_WAND1D: "img/day-light-wand1.png", LIGHT_WAND1N: "img/night-light-wand1.png", INV_WAND1_OUT: "img/inv-magic-wand0-out.png", INV_WAND1_IN: "img/inv-magic-wand0-in.png", INV_WAND1_CLICK: "img/inv-magic-wand0-click.png", WAND2D: "img/day-magic-wand1.png", WAND2N: "img/night-magic-wand1.png", LIGHT_WAND0D: "img/day-light-wand0.png", LIGHT_WAND0N: "img/night-light-wand0.png", INV_WAND2_OUT: "img/inv-magic-wand1-out.png", INV_WAND2_IN: "img/inv-magic-wand1-in.png", INV_WAND2_CLICK: "img/inv-magic-wand1-click.png", FIREFLYD: "img/day-firefly.png", FIREFLYN: "img/night-firefly.png", HURT_FIREFLY: "img/hurt-firefly.png", INV_FIREFLY_OUT: "img/inv-firefly-out.png", INV_FIREFLY_IN: "img/inv-firefly-in.png", INV_FIREFLY_CLICK: "img/inv-firefly-click.png", BABY_DRAGOND: "img/day-baby-dragon.png", BABY_DRAGONN: "img/night-baby-dragon.png", BABY_DRAGON_ATTACKD: "img/day-baby-dragon-angry.png", BABY_DRAGON_ATTACKN: "img/night-baby-dragon-angry.png", BABY_DRAGON_TAMEDD: "img/day-baby-dragon-tamed.png", BABY_DRAGON_TAMEDN: "img/night-baby-dragon-tamed.png", BABY_DRAGON_WING_LEFT_ATTACKD: "img/day-wing-dragon-left-angry.png", BABY_DRAGON_WING_LEFT_ATTACKN: "img/night-dragon-wing-left-angry.png", BABY_DRAGON_WING_RIGHT_ATTACKD: "img/day-wing-dragon-right-angry.png", BABY_DRAGON_WING_RIGHT_ATTACKN: "img/night-dragon-wing-right-angry.png", BABY_DRAGON_WING_LEFT_TAMEDD: "img/day-wing-dragon-left-tamed.png", BABY_DRAGON_WING_LEFT_TAMEDN: "img/night-dragon-wing-left-tamed.png", BABY_DRAGON_WING_RIGHT_TAMEDD: "img/day-wing-dragon-right-tamed.png", BABY_DRAGON_WING_RIGHT_TAMEDN: "img/night-wing-dragon-right-tamed.png", BABY_DRAGON_WING_LEFTD: "img/day-wing-dragon-left.png", BABY_DRAGON_WING_LEFTN: "img/night-dragon-wing-left.png", BABY_DRAGON_WING_RIGHTD: "img/day-wing-dragon-right.png", BABY_DRAGON_WING_RIGHTN: "img/night-wing-dragon-right.png", HURT_BABY_DRAGON: "img/hurt-baby-dragon.png", HURT_BABY_DRAGON_WING_LEFT: "img/hurt-baby-dragon-wing-left.png", HURT_BABY_DRAGON_WING_RIGHT: "img/hurt-baby-dragon-wing-right.png", INV_BABY_DRAGON_OUT: "img/inv-baby-dragon-out.png", INV_BABY_DRAGON_IN: "img/inv-baby-dragon-in.png", INV_BABY_DRAGON_CLICK: "img/inv-baby-dragon-click.png", BABY_LAVAD: "img/day-baby-lava.png", BABY_LAVAN: "img/night-baby-lava.png", BABY_LAVA_ATTACKD: "img/day-baby-lava-angry.png", BABY_LAVA_ATTACKN: "img/night-baby-lava-angry.png", BABY_LAVA_TAMEDD: "img/day-baby-lava-tamed.png", BABY_LAVA_TAMEDN: "img/night-baby-lava-tamed.png", BABY_LAVA_WING_LEFT_ATTACKD: "img/day-wing-lava-left-angry.png", BABY_LAVA_WING_LEFT_ATTACKN: "img/night-wing-lava-left-angry.png", BABY_LAVA_WING_RIGHT_ATTACKD: "img/day-wing-lava-right-angry.png", BABY_LAVA_WING_RIGHT_ATTACKN: "img/night-wing-lava-right-angry.png", BABY_LAVA_WING_LEFT_TAMEDD: "img/day-wing-lava-left-tamed.png", BABY_LAVA_WING_LEFT_TAMEDN: "img/night-wing-lava-left-tamed.png", BABY_LAVA_WING_RIGHT_TAMEDD: "img/day-wing-lava-right-tamed.png", BABY_LAVA_WING_RIGHT_TAMEDN: "img/night-wing-lava-right-tamed.png", BABY_LAVA_WING_LEFTD: "img/day-wing-lava-left.png", BABY_LAVA_WING_LEFTN: "img/night-wing-lava-left.png", BABY_LAVA_WING_RIGHTD: "img/day-wing-lava-right.png", BABY_LAVA_WING_RIGHTN: "img/night-wing-lava-right.png", HURT_BABY_LAVA: "img/hurt-baby-lava.png", HURT_BABY_LAVA_WING_LEFT: "img/hurt-baby-lava-wing-left.png", HURT_BABY_LAVA_WING_RIGHT: "img/hurt-baby-lava-wing-right.png", INV_BABY_LAVA_OUT: "img/inv-baby-lava-out.png", INV_BABY_LAVA_IN: "img/inv-baby-lava-in.png", INV_BABY_LAVA_CLICK: "img/inv-baby-lava-click.png", HAWKD: "img/day-falcon.png", HAWKN: "img/night-falcon.png", HAWK_ATTACKD: "img/day-falcon-angry.png", HAWK_ATTACKN: "img/night-falcon-angry.png", HAWK_GROUNDD: "img/day-falcon-ground.png", HAWK_GROUNDN: "img/night-falcon-ground.png", HAWK_GROUND_ATTACKD: "img/day-falcon-ground-angry.png", HAWK_GROUND_ATTACKN: "img/night-falcon-ground-angry.png", HAWK_WING_LEFTD: "img/day-falcon-wings-left.png", HAWK_WING_LEFTN: "img/night-falcon-wings-left.png", HAWK_WING_RIGHTD: "img/day-falcon-wings-right.png", HAWK_WING_RIGHTN: "img/night-falcon-wings-right.png", HAWK_WING_LEFT_ATTACKD: "img/day-falcon-angry-wings-left.png", HAWK_WING_LEFT_ATTACKN: "img/night-falcon-angry-wings-left.png", HAWK_WING_RIGHT_ATTACKD: "img/day-falcon-angry-wings-right.png", HAWK_WING_RIGHT_ATTACKN: "img/night-falcon-angry-wings-right.png", HAWK_WING_LEFT_TAMEDD: "img/day-falcon-wings-left-tamed.png", HAWK_WING_LEFT_TAMEDN: "img/night-falcon-wings-left-tamed.png", HAWK_WING_RIGHT_TAMEDD: "img/day-falcon-wings-right-tamed.png", HAWK_WING_RIGHT_TAMEDN: "img/night-falcon-wings-right-tamed.png", HAWK_TAMEDD: "img/day-falcon-tamed.png", HAWK_TAMEDN: "img/night-falcon-tamed.png", HURT_HAWK_GROUND: "img/hurt-falcon-ground.png", HURT_HAWK: "img/hurt-falcon.png", HURT_HAWK_WING_LEFT: "img/hurt-falcon-wings-left.png", HURT_HAWK_WING_RIGHT: "img/hurt-falcon-wings-right.png", INV_HAWK_OUT: "img/inv-falcon-out.png", INV_HAWK_IN: "img/inv-falcon-in.png", INV_HAWK_CLICK: "img/inv-falcon-click.png", CRAB_BOSSD: "img/day-crab-boss.png", CRAB_BOSSN: "img/night-crab-boss.png", CRAB_BOSS_ATTACKD: "img/day-crab-boss-angry.png", CRAB_BOSS_ATTACKN: "img/night-crab-boss-angry.png", CRAB_BOSS_TAMEDD: "img/day-crab-boss-tamed.png", CRAB_BOSS_TAMEDN: "img/night-crab-boss-tamed.png", CRAB_BOSS_CLAW_LEFT_ATTACKD: "img/day-crab-boss-claw-left-attack.png", CRAB_BOSS_CLAW_LEFT_ATTACKN: "img/night-crab-boss-claw-left-attack.png", CRAB_BOSS_CLAW_RIGHT_ATTACKD: "img/day-crab-boss-claw-right-attack.png", CRAB_BOSS_CLAW_RIGHT_ATTACKN: "img/night-crab-boss-claw-right-attack.png", CRAB_BOSS_CLAW_LEFT_TAMEDD: "img/day-crab-boss-claw-left-tamed.png", CRAB_BOSS_CLAW_LEFT_TAMEDN: "img/night-crab-boss-claw-left-tamed.png", CRAB_BOSS_CLAW_RIGHT_TAMEDD: "img/day-crab-boss-claw-right-tamed.png", CRAB_BOSS_CLAW_RIGHT_TAMEDN: "img/night-crab-boss-claw-right-tamed.png", CRAB_BOSS_CLAW_LEFTD: "img/day-crab-boss-claw-left.png", CRAB_BOSS_CLAW_LEFTN: "img/night-crab-boss-claw-left.png", CRAB_BOSS_CLAW_RIGHTD: "img/day-crab-boss-claw-right.png", CRAB_BOSS_CLAW_RIGHTN: "img/night-crab-boss-claw-right.png", HURT_CRAB_BOSS: "img/hurt-crab-boss.png", HURT_CRAB_BOSS_CLAW_LEFT: "img/hurt-crab-boss-claw-left.png", HURT_CRAB_BOSS_CLAW_RIGHT: "img/hurt-crab-boss-claw-right.png", HEAL_CRAB_BOSS: "img/heal-crab-boss.png", HEAL_CRAB_BOSS_CLAW_LEFT: "img/heal-crab-boss-claw-left.png", HEAL_CRAB_BOSS_CLAW_RIGHT: "img/heal-crab-boss-claw-right.png", CRAB_STEP: "img/crab-step.png", INV_CRAB_BOSS_OUT: "img/inv-crab-boss-out.png", INV_CRAB_BOSS_IN: "img/inv-crab-boss-in.png", INV_CRAB_BOSS_CLICK: "img/inv-crab-boss-click.png", CACTUSD: "img/day-cactus10.png", CACTUSN: "img/night-cactus10.png", INV_CACTUS_OUT: "img/inv-cactus-out.png", INV_CACTUS_IN: "img/inv-cactus-in.png", INV_CACTUS_CLICK: "img/inv-cactus-click.png", SCORPIOND: "img/day-scorpion.png", SCORPIONN: "img/night-scorpion.png", SCORPION_HAND_LEFTD: "img/day-scorpion-hand-left.png", SCORPION_HAND_LEFTN: "img/night-scorpion-hand-left.png", SCORPION_HAND_RIGHTD: "img/day-scorpion-hand-right.png", SCORPION_HAND_RIGHTN: "img/night-scorpion-hand-right.png", HURT_SCORPION: "img/hurt-scorpion.png", HURT_SCORPION_HAND_LEFT: "img/hurt-scorpion-hand-left.png", HURT_SCORPION_HAND_RIGHT: "img/hurt-scorpion-hand-right.png", VULTURED: "img/day-vulture.png", VULTUREN: "img/night-vulture.png", VULTURE_ATTACKD: "img/day-vulture-angry.png", VULTURE_ATTACKN: "img/night-vulture-angry.png", VULTURE_GROUNDD: "img/day-vulture-ground.png", VULTURE_GROUNDN: "img/night-vulture-ground.png", VULTURE_GROUND_ATTACKD: "img/day-vulture-ground-angry.png", VULTURE_GROUND_ATTACKN: "img/night-vulture-ground-angry.png", VULTURE_WING_LEFTD: "img/day-vulture-wings-left.png", VULTURE_WING_LEFTN: "img/night-vulture-wings-left.png", VULTURE_WING_RIGHTD: "img/day-vulture-wings-right.png", VULTURE_WING_RIGHTN: "img/night-vulture-wings-right.png", VULTURE_WING_LEFT_ATTACKD: "img/day-vulture-angry-wings-left.png", VULTURE_WING_LEFT_ATTACKN: "img/night-vulture-angry-wings-left.png", VULTURE_WING_RIGHT_ATTACKD: "img/day-vulture-angry-wings-right.png", VULTURE_WING_RIGHT_ATTACKN: "img/night-vulture-angry-wings-right.png", VULTURE_WING_LEFT_TAMEDD: "img/day-vulture-wings-left-tamed.png", VULTURE_WING_LEFT_TAMEDN: "img/night-vulture-wings-left-tamed.png", VULTURE_WING_RIGHT_TAMEDD: "img/day-vulture-wings-right-tamed.png", VULTURE_WING_RIGHT_TAMEDN: "img/night-vulture-wings-right-tamed.png", VULTURE_TAMEDD: "img/day-vulture-tamed.png", VULTURE_TAMEDN: "img/night-vulture-tamed.png", HURT_VULTURE_GROUND: "img/hurt-vulture-ground.png", HURT_VULTURE: "img/hurt-vulture.png", HURT_VULTURE_WING_LEFT: "img/hurt-vulture-wings-left.png", HURT_VULTURE_WING_RIGHT: "img/hurt-vulture-wings-right.png", ALOE_VERAD: "img/day-aloe-vera.png", ALOE_VERAN: "img/night-aloe-vera.png", INV_ALOE_VERA_OUT: "img/inv-aloe-vera-out.png", INV_ALOE_VERA_IN: "img/inv-aloe-vera-in.png", INV_ALOE_VERA_CLICK: "img/inv-aloe-vera-click.png", ALOE_VERA_GROWND: "img/day-aloe-vera-grown.png", ALOE_VERA_GROWNN: "img/night-aloe-vera-grown.png", ALOE_VERA_DRIEDD: "img/day-aloe-vera-dried.png", ALOE_VERAN_DRIEDN: "img/night-aloe-vera-dried.png", TURBAN1D: "img/day-turban1.png", TURBAN1N: "img/night-turban1.png", TURBAN2D: "img/day-turban2.png", TURBAN2N: "img/night-turban2.png", INV_TURBAN2_OUT: "img/inv-turban2-out.png", INV_TURBAN2_IN: "img/inv-turban2-in.png", INV_TURBAN2_CLICK: "img/inv-turban2-click.png", INV_TURBAN1_OUT: "img/inv-turban1-out.png", INV_TURBAN1_IN: "img/inv-turban1-in.png", INV_TURBAN1_CLICK: "img/inv-turban1-click.png", PITCHFORK2D: "img/day-pitchfork2.png", PITCHFORK2N: "img/night-pitchfork2.png", INV_PITCHFORK2_OUT: "img/inv-pitchfork2-out.png", INV_PITCHFORK2_IN: "img/inv-pitchfork2-in.png", INV_PITCHFORK2_CLICK: "img/inv-pitchfork2-click.png", INV_PITCHFORK_PART_CLICK: "img/inv-gold-fork-click.png", INV_PILOT_GLASSES_CLICK: "img/inv-pilot-glasses-click.png", PILOT_HELMETD: "img/day-pilot-helmet.png", PILOT_HELMETN: "img/night-pilot-helmet.png", INV_PILOT_HELMET_OUT: "img/inv-pilot-helmet-out.png", INV_PILOT_HELMET_IN: "img/inv-pilot-helmet-in.png", INV_PILOT_HELMET_CLICK: "img/inv-pilot-helmet-click.png", SAND_WORM0D: "img/day-sandworm0.png", SAND_WORM1D: "img/day-sandworm1.png", SAND_WORM2D: "img/day-sandworm2.png", SAND_WORM0N: "img/night-sandworm0.png", SAND_WORM1N: "img/night-sandworm1.png", SAND_WORM2N: "img/night-sandworm2.png", HURT_SAND_WORM0: "img/hurt-sandworm0.png", HURT_SAND_WORM1: "img/hurt-sandworm1.png", HURT_SAND_WORM2: "img/hurt-sandworm2.png", INV_VULTURE_FEATHER: "img/inv-vulture-feather-click.png", EMERALD0D: "img/day-emerald0.png", EMERALD0N: "img/night-emerald0.png", EMERALD1D: "img/day-emerald1.png", EMERALD1N: "img/night-emerald1.png", EMERALD2D: "img/day-emerald2.png", EMERALD2N: "img/night-emerald2.png", INV_EMERALD: "img/inv-emerald-click.png", INV_SANDWORM_JUICE_OUT: "img/inv-sworm-juice-out.png", INV_SANDWORM_JUICE_IN: "img/inv-sworm-juice-in.png", INV_SANDWORM_JUICE_CLICK: "img/inv-sworm-juice-click.png", EMERALD_MACHINED: "img/day-point-machine.png", EMERALD_MACHINEN: "img/night-point-machine.png", EMERALD_MACHINE_HOLED: "img/day-point-machine-hole.png", EMERALD_MACHINE_HOLEN: "img/night-point-machine-hole.png", EMERALD_MACHINE_GROUNDD: "img/day-point-machine-ground.png", EMERALD_MACHINE_GROUNDN: "img/night-point-machine-ground.png", EMERALD_MACHINE_ROTATED: "img/day-point-machine-rotate.png", EMERALD_MACHINE_ROTATEN: "img/night-point-machine-rotate.png", INV_EMERALD_MACHINE_OUT: "img/inv-point-machine-out.png", INV_EMERALD_MACHINE_IN: "img/inv-point-machine-in.png", INV_EMERALD_MACHINE_CLICK: "img/inv-point-machine-click.png", EXTRACTOR_MACHINE0_STONED: "img/day-extractor-machine0-stone.png", EXTRACTOR_MACHINE0_STONEN: "img/night-extractor-machine0-stone.png", EXTRACTOR_MACHINE_STONED: "img/day-extractor-machine-stone.png", EXTRACTOR_MACHINE_STONEN: "img/night-extractor-machine-stone.png", INV_EXTRACTOR_MACHINE_STONE_OUT: "img/inv-extractor-machine-stone-out.png", INV_EXTRACTOR_MACHINE_STONE_IN: "img/inv-extractor-machine-stone-in.png", INV_EXTRACTOR_MACHINE_STONE_CLICK: "img/inv-extractor-machine-stone-click.png", EXTRACTOR_MACHINE0_GOLDD: "img/day-extractor-machine0-gold.png", EXTRACTOR_MACHINE0_GOLDN: "img/night-extractor-machine0-gold.png", EXTRACTOR_MACHINE_GOLDD: "img/day-extractor-machine-gold.png", EXTRACTOR_MACHINE_GOLDN: "img/night-extractor-machine-gold.png", INV_EXTRACTOR_MACHINE_GOLD_OUT: "img/inv-extractor-machine-gold-out.png", INV_EXTRACTOR_MACHINE_GOLD_IN: "img/inv-extractor-machine-gold-in.png", INV_EXTRACTOR_MACHINE_GOLD_CLICK: "img/inv-extractor-machine-gold-click.png", EXTRACTOR_MACHINE0_DIAMONDD: "img/day-extractor-machine0-diamond.png", EXTRACTOR_MACHINE0_DIAMONDN: "img/night-extractor-machine0-diamond.png", EXTRACTOR_MACHINE_DIAMONDD: "img/day-extractor-machine-diamond.png", EXTRACTOR_MACHINE_DIAMONDN: "img/night-extractor-machine-diamond.png", INV_EXTRACTOR_MACHINE_DIAMOND_OUT: "img/inv-extractor-machine-diamond-out.png", INV_EXTRACTOR_MACHINE_DIAMOND_IN: "img/inv-extractor-machine-diamond-in.png", INV_EXTRACTOR_MACHINE_DIAMOND_CLICK: "img/inv-extractor-machine-diamond-click.png", EXTRACTOR_MACHINE0_AMETHYSTD: "img/day-extractor-machine0-amethyst.png", EXTRACTOR_MACHINE0_AMETHYSTN: "img/night-extractor-machine0-amethyst.png", EXTRACTOR_MACHINE_AMETHYSTD: "img/day-extractor-machine-amethyst.png", EXTRACTOR_MACHINE_AMETHYSTN: "img/night-extractor-machine-amethyst.png", INV_EXTRACTOR_MACHINE_AMETHYST_OUT: "img/inv-extractor-machine-amethyst-out.png", INV_EXTRACTOR_MACHINE_AMETHYST_IN: "img/inv-extractor-machine-amethyst-in.png", INV_EXTRACTOR_MACHINE_AMETHYST_CLICK: "img/inv-extractor-machine-amethyst-click.png", EXTRACTOR_MACHINE0_REIDITED: "img/day-extractor-machine0-reidite.png", EXTRACTOR_MACHINE0_REIDITEN: "img/night-extractor-machine0-reidite.png", EXTRACTOR_MACHINE_REIDITED: "img/day-extractor-machine-reidite.png", EXTRACTOR_MACHINE_REIDITEN: "img/night-extractor-machine-reidite.png", INV_EXTRACTOR_MACHINE_REIDITE_OUT: "img/inv-extractor-machine-reidite-out.png", INV_EXTRACTOR_MACHINE_REIDITE_IN: "img/inv-extractor-machine-reidite-in.png", INV_EXTRACTOR_MACHINE_REIDITE_CLICK: "img/inv-extractor-machine-reidite-click.png", EXTRACTOR_CASES: "img/extractor-cases.png", HEND: "img/day-golden-hen.png", HENN: "img/night-golden-hen.png", CHICKEND: "img/day-golden-chicken.png", CHICKENN: "img/night-golden-chicken.png", HURT_GOLDEN_HEN: "img/hurt-golden-hen.png", HURT_GOLDEN_CHICKEN: "img/hurt-golden-chicken.png", LOGO_INTERFACE: "img/logo-interface.png", FOREST_MODE_HOVER: "img/forest-mode-hover.png", NORMAL_MODE_HOVER: "img/normal-mode-hover.png", VAMPIRE_MODE_HOVER: "img/vampire-mode-hover.png", ZOMBIE_MODE_HOVER: "img/zombie-mode-hover.png", MODE_COMMUNITY_HOVER: "img/community-mode-hover2.png", MODE_EXPERIMENTAL_HOVER: "img/experimental-mode-hover.png", ZOMBIE_MODE_OUT: "img/zombie-mode-out.png", ZOMBIE_MODE_IN: "img/zombie-mode-in.png", ZOMBIE_MODE_CLICK: "img/zombie-mode-click.png", VAMPIRE_MODE_OUT: "img/vampire-mode-out.png", VAMPIRE_MODE_IN: "img/vampire-mode-in.png", VAMPIRE_MODE_CLICK: "img/vampire-mode-click.png", NORMAL_MODE_OUT: "img/normal-mode-out.png", NORMAL_MODE_IN: "img/normal-mode-in.png", NORMAL_MODE_CLICK: "img/normal-mode-click.png", FOREST_MODE_OUT: "img/forest-mode-out.png", FOREST_MODE_IN: "img/forest-mode-in.png", FOREST_MODE_CLICK: "img/forest-mode-click.png", MODE_COMMUNITY_OUT: "img/community-mode-out.png", MODE_COMMUNITY_IN: "img/community-mode-in.png", MODE_COMMUNITY_CLICK: "img/community-mode-click.png", MODE_EXPERIMENTAL_OUT: "img/experimental-modes-out.png", MODE_EXPERIMENTAL_IN: "img/experimental-modes-in.png", MODE_EXPERIMENTAL_CLICK: "img/experimental-modes-click.png", YOUTUBE_BUTTON_OUT: "img/youtube-button-out.png", YOUTUBE_BUTTON_IN: "img/youtube-button-in.png", YOUTUBE_BUTTON_CLICK: "img/youtube-button-click.png", WIKI_BUTTON_OUT: "img/wiki-button-out.png", WIKI_BUTTON_IN: "img/wiki-button-in.png", WIKI_BUTTON_CLICK: "img/wiki-button-click.png", TWITTER_BUTTON_OUT: "img/twitter-button-out.png", TWITTER_BUTTON_IN: "img/twitter-button-in.png", TWITTER_BUTTON_CLICK: "img/twitter-button-click.png", FACEBOOK_BUTTON_OUT: "img/facebook-button-out.png", FACEBOOK_BUTTON_IN: "img/facebook-button-in.png", FACEBOOK_BUTTON_CLICK: "img/facebook-button-click.png", REDDIT_BUTTON_OUT: "img/reddit-button-out.png", REDDIT_BUTTON_IN: "img/reddit-button-in.png", REDDIT_BUTTON_CLICK: "img/reddit-button-click.png", DISCORD_BUTTON_OUT: "img/discord-button-out.png", DISCORD_BUTTON_IN: "img/discord-button-in.png", DISCORD_BUTTON_CLICK: "img/discord-button-click.png", MERCH_BUTTON_OUT: "img/merch-button-out.png", MERCH_BUTTON_IN: "img/merch-button-in.png", MERCH_BUTTON_CLICK: "img/merch-button-click.png", TERMINAL_BUTTON_OUT: "img/terminal-button-out.png", TERMINAL_BUTTON_IN: "img/terminal-button-in.png", TERMINAL_BUTTON_CLICK: "img/terminal-button-click.png", RESTART_OUT: "img/restart-out.png", RESTART_IN: "img/restart-in.png", RESTART_CLICK: "img/restart-click.png", GUIDE_OUT: "img/guide-out.png", GUIDE_IN: "img/guide-in.png", GUIDE_CLICK: "img/guide-click.png", COPY_PASTE_OUT: "img/copy-paste-out.png", COPY_PASTE_IN: "img/copy-paste-in.png", COPY_PASTE_CLICK: "img/copy-paste-click.png", LINKS_BG: "img/link-buttons-bg.png", CHANGELOG_BOX: "img/changelog-box2.png", CHANGELOG_BUTTON_OUT: "img/changelog_29.png", DEVASTIO_BUTTON_OUT: "img/banner-devast.png", PROFILE_BUTTON_OUT: "img/profile-button-out.png", PROFILE_BUTTON_IN: "img/profile-button-in.png", PROFILE_BUTTON_CLICK: "img/profile-button-click.png", LOGIN_BUTTON_OUT: "img/login-button-out.png", LOGIN_BUTTON_IN: "img/login-button-in.png", LOGIN_BUTTON_CLICK: "img/login-button-click.png", LOGIN_GOOGLE_OUT: "img/login-google-out.png", LOGIN_GOOGLE_IN: "img/login-google-in.png", LOGIN_GOOGLE_CLICK: "img/login-google-click.png", LOGIN_FACEBOOK_OUT: "img/login-facebook-out.png", LOGIN_FACEBOOK_IN: "img/login-facebook-in.png", LOGIN_FACEBOOK_CLICK: "img/login-facebook-click.png", ACCOUNT_BOX: "img/account-box.png", ACCOUNT_MAINTENANCE: "img/account-under-maintenance.png", CLOSE_BUTTON_OUT: "img/close-button-account-out.png", CLOSE_BUTTON_IN: "img/close-button-account-in.png", CLOSE_BUTTON_CLICK: "img/close-button-account-click.png", PLAY_BUTTON_OUT: "img/play-button-out.png", PLAY_BUTTON_IN: "img/play-button-in.png", PLAY_BUTTON_CLICK: "img/play-button-click.png", APP_STORE_BADGE: "img/app-store-badge.png", PLAY_STORE_BADGE: "img/play-store-badge.png", MOBILE_BOXAD: "img/mobile-boxad.png", MODIFY_NAME_OUT: "img/modify-name-out.png", MODIFY_NAME_IN: "img/modify-name-in.png", MODIFY_NAME_CLICK: "img/modify-name-click.png", YES_BUTTON_OUT: "img/yes-button-out.png", YES_BUTTON_IN: "img/yes-button-in.png", YES_BUTTON_CLICK: "img/yes-button-click.png", YES_300_BUTTON_OUT: "img/yes-300-button-out.png", YES_300_BUTTON_IN: "img/yes-300-button-in.png", YES_300_BUTTON_CLICK: "img/yes-300-button-click.png", NO_BUTTON_OUT: "img/no-button-out.png", NO_BUTTON_IN: "img/no-button-in.png", NO_BUTTON_CLICK: "img/no-button-click.png", NO_THANKS_BUTTON_OUT: "img/no-thanks-button-out.png", NO_THANKS_BUTTON_IN: "img/no-thanks-button-in.png", NO_THANKS_BUTTON_CLICK: "img/no-thanks-button-click.png", SHOP_BUTTON_OUT: "img/shop-button-out.png", SHOP_BUTTON_IN: "img/shop-button-in.png", SHOP_BUTTON_CLICK: "img/shop-button-click.png", LOGOUT_OUT: "img/logout-out.png", LOGOUT_IN: "img/logout-in.png", LOGOUT_CLICK: "img/logout-click.png", TERMS_BUTTON_OUT: "img/terms-button-out.png", TERMS_BUTTON_IN: "img/terms-button-in.png", TERMS_BUTTON_CLICK: "img/terms-button-click.png", TUTORIAL_ICON: "img/tutorial-icon.png", SKINS_ICON: "img/skins-icon.png", SHOP_ICON: "img/shop-icon.png", PAINT_ICON: "img/paint-icon.png", LEADERBOARD_ICON: "img/leaderboard-icon.png", START_ICON: "img/start-icon.png", PROFILE_ICON: "img/profile-icon.png", SERVER_ACCESS_ICON: "img/server-access-icon2.png", ICONS_BG_BUTTON_OUT: "img/button-homepage-bg-out.png", ICONS_BG_BUTTON_IN: "img/button-homepage-bg-in.png", ICONS_BG_BUTTON_CLICK: "img/button-homepage-bg-click.png", ICONS_BOTTOM_BG_BUTTON_OUT: "img/button-bottom-homepage-bg-out.png", ICONS_BOTTOM_BG_BUTTON_IN: "img/button-bottom-homepage-bg-in.png", ICONS_BOTTOM_BG_BUTTON_CLICK: "img/button-bottom-homepage-bg-click.png", AVATAR_RESUME: "img/lvl-player.png", AVATAR_LVL1: "img/avatar-player.png", AVATAR_LVL2: "img/avatar-player1.png", AVATAR_LVL3: "img/avatar-player2.png", AVATAR_LVL4: "img/avatar-player3.png", AVATAR_LVL5: "img/avatar-player4.png", AVATAR_LVL6: "img/avatar-player5.png", AVATAR_LVL7: "img/avatar-player6.png", AVATAR_LVL8: "img/avatar-player7.png", AVATAR_LVL9: "img/avatar-player8.png", AVATAR_LVL10: "img/avatar-player9.png", AVATAR_LVL11: "img/avatar-player10.png", AVATAR_LVL12: "img/avatar-player11.png", AVATAR_LVL13: "img/avatar-player12.png", AVATAR_LVL14: "img/avatar-player13.png", AVATAR_LVL15: "img/avatar-player14.png", AVATAR_LVL16: "img/avatar-player14.png", AVATAR_LVL17: "img/avatar-player14.png", AVATAR_LVL18: "img/avatar-player14.png", GOLDEN_BREAD: "img/golden-bread.png", BUY_BREAD_OUT: "img/buy-bread-out.png", BUY_BREAD_IN: "img/buy-bread-in.png", BUY_BREAD_CLICK: "img/buy-bread-click.png", GAUGE: "img/gauge.png", SEASON_4: "img/season-4-out.png", SEASON_4_IN: "img/season-4-in.png", SEASON_4_OUT: "img/season-4-click.png", SEASON4_BOX: "img/season4-box.png", SEASON_5: "img/season-5-out.png", SEASON_5_IN: "img/season-5-in.png", SEASON_5_OUT: "img/season-5-click.png", SEASON5_BOX: "img/season5-box.png", PROFILE_BOX: "img/profile2-box.png", SKINS_BOX: "img/skins-box.png", SHOP_BOX: "img/shop-box.png", PRIVATE_SERVER_BOX: "img/private-server-box.png", SERVER_LOCATION_BOX: "img/location-box.png", SERVER_DURATION_BOX: "img/server-duration-box.png", TUTORIAL_BOX: "img/tutorial-box.png", LEADERBOARD_BOX: "img/leaderboard1-box.png", BUY_BREAD_BOX: "img/buy-breads-box.png", BAG_BOX: "img/bag-box.png", CRATE_BOX: "img/deadbox-box.png", BOOK_BOX: "img/book-box.png", ACCESSORIES_BOX: "img/accessories-box.png", CUSTOM_SKIN_BOX: "img/customskin-box.png", BAG_REMAIN_BOX: "img/bag-lasts.png", SERVER_REMAIN_BOX: "img/server-lasts.png", SERVER_ACCESS_BOX: "img/server-access-box2.png", LOOT_BOX: "img/lootbox-box.png", CHANGE_NICKNAME1_BOX: "img/change-nickname0.png", CHANGE_NICKNAME0_BOX: "img/change-nickname1.png", CHEATING_BOX: "img/cheating-box.png", DAILY_QUEST_BOX: "img/daily-quest-box.png", DAILY_5_BREAD: "img/daily-5-bread.png", DAILY_10_BREAD: "img/daily-10-bread.png", DAILY_VALID: "img/daily-valid.png", NORMAL_PROFILE_OUT: "img/normal-profile-out.png", NORMAL_PROFILE_IN: "img/normal-profile-in.png", NORMAL_PROFILE_CLICK: "img/normal-profile-click.png", FOREST_PROFILE_OUT: "img/forest-profile-out.png", FOREST_PROFILE_IN: "img/forest-profile-in.png", FOREST_PROFILE_CLICK: "img/forest-profile-click.png", ZOMBIE_PROFILE_OUT: "img/zombie-profile-out.png", ZOMBIE_PROFILE_IN: "img/zombie-profile-in.png", ZOMBIE_PROFILE_CLICK: "img/zombie-profile-click.png", VAMPIRE_PROFILE_OUT: "img/vampire-profile-out.png", VAMPIRE_PROFILE_IN: "img/vampire-profile-in.png", VAMPIRE_PROFILE_CLICK: "img/vampire-profile-click.png", TOTAL_PROFILE_OUT: "img/total-profile-out.png", TOTAL_PROFILE_IN: "img/total-profile-in.png", TOTAL_PROFILE_CLICK: "img/total-profile-click.png", SEASON1_PROFILE_OUT: "img/season1-profile-out.png", SEASON1_PROFILE_IN: "img/season1-profile-in.png", SEASON1_PROFILE_CLICK: "img/season1-profile-click.png", SEASON2_PROFILE_OUT: "img/season2-profile-out.png", SEASON2_PROFILE_IN: "img/season2-profile-in.png", SEASON2_PROFILE_CLICK: "img/season2-profile-click.png", SEASON3_PROFILE_OUT: "img/season3-profile-out.png", SEASON3_PROFILE_IN: "img/season3-profile-in.png", SEASON3_PROFILE_CLICK: "img/season3-profile-click.png", SEASON4_PROFILE_OUT: "img/season4-profile-out.png", SEASON4_PROFILE_IN: "img/season4-profile-in.png", SEASON4_PROFILE_CLICK: "img/season4-profile-click.png", SEASON5_PROFILE_OUT: "img/season5-profile-out.png", SEASON5_PROFILE_IN: "img/season5-profile-in.png", SEASON5_PROFILE_CLICK: "img/season5-profile-click.png", LOCKED_SKIN_ALERT: "img/locked-skin-alert.png", LOCKED_CUSTOM_ALERT: "img/locked-custom-alert.png", RED_LOCKED: "img/bg-red-locked.png", SKIN_BUTTON_OUT: "img/skin-button-out.png", SKIN_BUTTON_IN: "img/skin-button-in.png", SKIN_BUTTON_CLICK: "img/skin-button-click.png", ACCESSORY_BUTTON_OUT: "img/accessory-button-out.png", ACCESSORY_BUTTON_IN: "img/accessory-button-in.png", ACCESSORY_BUTTON_CLICK: "img/accessory-button-click.png", BAG_BUTTON_OUT: "img/bag-button-out.png", BAG_BUTTON_IN: "img/bag-button-in.png", BAG_BUTTON_CLICK: "img/bag-button-click.png", BOOK_BUTTON_OUT: "img/book-button-out.png", BOOK_BUTTON_IN: "img/book-button-in.png", BOOK_BUTTON_CLICK: "img/book-button-click.png", CRATE_BUTTON_OUT: "img/deadbox-button-out.png", CRATE_BUTTON_IN: "img/deadbox-button-in.png", CRATE_BUTTON_CLICK: "img/deadbox-button-click.png", LOOT_BUTTON_OUT: "img/loot-button-out.png", LOOT_BUTTON_IN: "img/loot-button-in.png", LOOT_BUTTON_CLICK: "img/loot-button-click.png", FREE_ITEM_OUT: "img/free-item-out.png", FREE_ITEM_IN: "img/free-item-in.png", FREE_ITEM_CLICK: "img/free-item-click.png", WOOD_ITEM_OUT: "img/wood-item-out.png", WOOD_ITEM_IN: "img/wood-item-in.png", WOOD_ITEM_CLICK: "img/wood-item-click.png", STONE_ITEM_OUT: "img/stone-item.png", STONE_ITEM_IN: "img/stone-item-in.png", STONE_ITEM_CLICK: "img/stone-item-click.png", GOLD_ITEM_OUT: "img/gold-item.png", GOLD_ITEM_IN: "img/gold-item-in.png", GOLD_ITEM_CLICK: "img/gold-item-click.png", DIAMOND_ITEM_OUT: "img/diamond-item.png", DIAMOND_ITEM_IN: "img/diamond-item-in.png", DIAMOND_ITEM_CLICK: "img/diamond-item-click.png", AMETHYST_ITEM_OUT: "img/amethyst-item.png", AMETHYST_ITEM_IN: "img/amethyst-item-in.png", AMETHYST_ITEM_CLICK: "img/amethyst-item-click.png", REIDITE_ITEM_OUT: "img/reidite-item.png", REIDITE_ITEM_IN: "img/reidite-item-in.png", REIDITE_ITEM_CLICK: "img/reidite-item-click.png", SPECIAL_ITEM_OUT: "img/special-item-out.png", SPECIAL_ITEM_IN: "img/special-item-in.png", SPECIAL_ITEM_CLICK: "img/special-item-click.png", LEVEL_ITEM_OUT: "img/level-item-out.png", LEVEL_ITEM_IN: "img/level-item-in.png", LEVEL_ITEM_CLICK: "img/level-item-click.png", SKIN_PREVIOUS_OUT: "img/skin-previous-out.png", SKIN_PREVIOUS_IN: "img/skin-previous-in.png", SKIN_PREVIOUS_CLICK: "img/skin-previous-click.png", SKIN_NEXT_OUT: "img/skin-next-out.png", SKIN_NEXT_IN: "img/skin-next-in.png", SKIN_NEXT_CLICK: "img/skin-next-click.png", BACK_BUTTON_OUT: "img/back-button-out.png", BACK_BUTTON_IN: "img/back-button-in.png", BACK_BUTTON_CLICK: "img/back-button-click.png", GET_MORE_BUTTON_OUT: "img/get-more-button-out.png", GET_MORE_BUTTON_IN: "img/get-more-button-in.png", GET_MORE_BUTTON_CLICK: "img/get-more-button-click.png", CURRENCY1_OUT: "img/currency1-out.png", CURRENCY1_IN: "img/currency1-in.png", CURRENCY1_CLICK: "img/currency1-click.png", CURRENCY2_OUT: "img/currency2-out.png", CURRENCY2_IN: "img/currency2-in.png", CURRENCY2_CLICK: "img/currency2-click.png", CURRENCY3_OUT: "img/currency3-out.png", CURRENCY3_IN: "img/currency3-in.png", CURRENCY3_CLICK: "img/currency3-click.png", CURRENCY4_OUT: "img/currency4-out.png", CURRENCY4_IN: "img/currency4-in.png", CURRENCY4_CLICK: "img/currency4-click.png", CURRENCY5_OUT: "img/currency5-out.png", CURRENCY5_IN: "img/currency5-in.png", CURRENCY5_CLICK: "img/currency5-click.png", PRICE1_OUT: "img/price1-out.png", PRICE1_IN: "img/price1-in.png", PRICE1_CLICK: "img/price1-click.png", PRICE2_OUT: "img/price2-out.png", PRICE2_IN: "img/price2-in.png", PRICE2_CLICK: "img/price2-click.png", PRICE3_OUT: "img/price3-out.png", PRICE3_IN: "img/price3-in.png", PRICE3_CLICK: "img/price3-click.png", PRICE4_OUT: "img/price4-out.png", PRICE4_IN: "img/price4-in.png", PRICE4_CLICK: "img/price4-click.png", PRICE5_OUT: "img/price5-out.png", PRICE5_IN: "img/price5-in.png", PRICE5_CLICK: "img/price5-click.png", BUY_PRIVATE_SERVER_OUT: "img/buy-private-server-out.png", BUY_PRIVATE_SERVER_IN: "img/buy-private-server-in.png", BUY_PRIVATE_SERVER_CLICK: "img/buy-private-server-click.png", ATLANTA_OUT: "img/atlanta-out.png", ATLANTA_IN: "img/atlanta-in.png", ATLANTA_CLICK: "img/atlanta-click.png", DALLAS_OUT: "img/dallas-out.png", DALLAS_IN: "img/dallas-in.png", DALLAS_CLICK: "img/dallas-click.png", FREMONT_OUT: "img/fremont-out.png", FREMONT_IN: "img/fremont-in.png", FREMONT_CLICK: "img/fremont-click.png", NEWARK_OUT: "img/newark-out.png", NEWARK_IN: "img/newark-in.png", NEWARK_CLICK: "img/newark-click.png", TORONTO_OUT: "img/toronto-out.png", TORONTO_IN: "img/toronto-in.png", TORONTO_CLICK: "img/toronto-click.png", SINGAPORE_OUT: "img/singapore-out.png", SINGAPORE_IN: "img/singapore-in.png", SINGAPORE_CLICK: "img/singapore-click.png", FRANKFURT_OUT: "img/frankfurt-out.png", FRANKFURT_IN: "img/frankfurt-in.png", FRANKFURT_CLICK: "img/frankfurt-click.png", LONDON_OUT: "img/london-out.png", LONDON_IN: "img/london-in.png", LONDON_CLICK: "img/london-click.png", MUMBAI_OUT: "img/mumbai-out.png", MUMBAI_IN: "img/mumbai-in.png", MUMBAI_CLICK: "img/mumbai-click.png", TOKYO_OUT: "img/tokyo-out.png", TOKYO_IN: "img/tokyo-in.png", TOKYO_CLICK: "img/tokyo-click.png", YES_LOCATION_OUT: "img/yes-location-out.png", YES_LOCATION_IN: "img/yes-location-in.png", YES_LOCATION_CLICK: "img/yes-location-click.png", DAYS3_OUT: "img/3days-out.png", DAYS3_IN: "img/3days-in.png", DAYS3_CLICK: "img/3days-click.png", DAYS7_OUT: "img/7days-out.png", DAYS7_IN: "img/7days-in.png", DAYS7_CLICK: "img/7days-click.png", DAYS30_OUT: "img/30days-out.png", DAYS30_IN: "img/30days-in.png", DAYS30_CLICK: "img/30days-click.png", DAYS90_OUT: "img/90days-out.png", DAYS90_IN: "img/90days-in.png", DAYS90_CLICK: "img/90days-click.png", SPIN1: "img/spin1.png", SPIN2: "img/spin2.png", SPIN3: "img/spin3.png", SPIN4: "img/spin4.png", SPIN5: "img/spin5.png", SPIN6: "img/spin6.png", ARROW_SPIN: "img/arrow-spin.png", SPIN_BUTTON_1_OUT: "img/spin-button-1-out.png", SPIN_BUTTON_1_IN: "img/spin-button-1-in.png", SPIN_BUTTON_1_CLICK: "img/spin-button-1-click.png", SPIN_BUTTON_2_OUT: "img/spin-button-2-out.png", SPIN_BUTTON_2_IN: "img/spin-button-2-in.png", SPIN_BUTTON_2_CLICK: "img/spin-button-2-click.png", SPIN_BUTTON_3_OUT: "img/spin-button-3-out.png", SPIN_BUTTON_3_IN: "img/spin-button-3-in.png", SPIN_BUTTON_3_CLICK: "img/spin-button-3-click.png", SPIN_BUTTON_4_OUT: "img/spin-button-4-out.png", SPIN_BUTTON_4_IN: "img/spin-button-4-in.png", SPIN_BUTTON_4_CLICK: "img/spin-button-4-click.png", SPIN_BUTTON_5_OUT: "img/spin-button-5-out.png", SPIN_BUTTON_5_IN: "img/spin-button-5-in.png", SPIN_BUTTON_5_CLICK: "img/spin-button-5-click.png", SPIN_LIGHT: "img/spin-light.png", TUTO_WIKI_OUT: "img/tuto-wiki-out.png", TUTO_WIKI_IN: "img/tuto-wiki-in.png", TUTO_WIKI_CLICK: "img/tuto-wiki-click.png", TUTO_PREVIOUS_OUT: "img/tuto-previous-out.png", TUTO_PREVIOUS_IN: "img/tuto-previous-in.png", TUTO_PREVIOUS_CLICK: "img/tuto-previous-click.png", TUTO_NEXT_OUT: "img/tuto-next-out.png", TUTO_NEXT_IN: "img/tuto-next-in.png", TUTO_NEXT_CLICK: "img/tuto-next-click.png", TIME_LEADERBOARD_OUT: "img/time-leaderboard-out.png", TIME_LEADERBOARD_IN: "img/time-leaderboard-in.png", TIME_LEADERBOARD_CLICK: "img/time-leaderboard-click.png", SCORE_LEADERBOARD_OUT: "img/score-leaderboard-out.png", SCORE_LEADERBOARD_IN: "img/score-leaderboard-in.png", SCORE_LEADERBOARD_CLICK: "img/score-leaderboard-click.png", LVL_LEADERBOARD_OUT: "img/lvl-leaderboard-out.png", LVL_LEADERBOARD_IN: "img/lvl-leaderboard-in.png", LVL_LEADERBOARD_CLICK: "img/lvl-leaderboard-click.png", KILL_LEADERBOARD_OUT: "img/kill-leaderboard-out.png", KILL_LEADERBOARD_IN: "img/kill-leaderboard-in.png", KILL_LEADERBOARD_CLICK: "img/kill-leaderboard-click.png", ALL_LEADERBOARD_OUT: "img/all-leaderboard-out.png", ALL_LEADERBOARD_IN: "img/all-leaderboard-in.png", ALL_LEADERBOARD_CLICK: "img/all-leaderboard-click.png", TODAY_LEADERBOARD_OUT: "img/today-leaderboard-out.png", TODAY_LEADERBOARD_IN: "img/today-leaderboard-in.png", TODAY_LEADERBOARD_CLICK: "img/today-leaderboard-click.png", WEEK_LEADERBOARD_OUT: "img/week-leaderboard-out.png", WEEK_LEADERBOARD_IN: "img/week-leaderboard-in.png", WEEK_LEADERBOARD_CLICK: "img/week-leaderboard-click.png", SEASON1_LEADERBOARD_OUT: "img/season1-out.png", SEASON1_LEADERBOARD_IN: "img/season1-in.png", SEASON1_LEADERBOARD_CLICK: "img/season1-click.png", SEASON2_LEADERBOARD_OUT: "img/season2--out.png", SEASON2_LEADERBOARD_IN: "img/season2--in.png", SEASON2_LEADERBOARD_CLICK: "img/season2--click.png", SEASON3_LEADERBOARD_OUT: "img/season3-out.png", SEASON3_LEADERBOARD_IN: "img/season3-in.png", SEASON3_LEADERBOARD_CLICK: "img/season3-click.png", SEASON4_LEADERBOARD_OUT: "img/season4-out.png", SEASON4_LEADERBOARD_IN: "img/season4-in.png", SEASON4_LEADERBOARD_CLICK: "img/season4-click.png", SEASON5_LEADERBOARD_OUT: "img/season5-out.png", SEASON5_LEADERBOARD_IN: "img/season5-in.png", SEASON5_LEADERBOARD_CLICK: "img/season5-click.png", TOTAL_LEAD_OUT: "img/total-lead-out.png", TOTAL_LEAD_IN: "img/total-lead-in.png", TOTAL_LEAD_CLICK: "img/total-lead-click.png", NORMAL_LEAD_OUT: "img/normal-lead-out.png", NORMAL_LEAD_IN: "img/normal-lead-in.png", NORMAL_LEAD_CLICK: "img/normal-lead-click.png", FOREST_LEAD_OUT: "img/forest-lead-out.png", FOREST_LEAD_IN: "img/forest-lead-in.png", FOREST_LEAD_CLICK: "img/forest-lead-click.png", VAMPIRE_LEAD_OUT: "img/vampire-lead-out.png", VAMPIRE_LEAD_IN: "img/vampire-lead-in.png", VAMPIRE_LEAD_CLICK: "img/vampire-lead-click.png", ZOMBIE_LEAD_OUT: "img/zombie-lead-out.png", ZOMBIE_LEAD_IN: "img/zombie-lead-in.png", ZOMBIE_LEAD_CLICK: "img/zombie-lead-click.png", LEVEL5D: "img/day-level5.png", LEVEL5N: "img/night-level5.png", LEVEL10D: "img/day-level10.png", LEVEL10N: "img/night-level10.png", LEVEL15D: "img/day-level15.png", LEVEL15N: "img/night-level15.png", LEVEL20D: "img/day-level20.png", LEVEL20N: "img/night-level20.png", LEVEL25D: "img/day-level25.png", LEVEL25N: "img/night-level25.png", LEVEL30D: "img/day-level30.png", LEVEL30N: "img/night-level30.png", LEVEL35D: "img/day-level35.png", LEVEL35N: "img/night-level35.png", LEVEL40D: "img/day-level40.png", LEVEL40N: "img/night-level40.png", LEVEL45D: "img/day-level45.png", LEVEL45N: "img/night-level45.png", LEVEL50D: "img/day-level50.png", LEVEL50N: "img/night-level50.png", LEVEL55D: "img/day-level55.png", LEVEL55N: "img/night-level55.png", LEVEL60D: "img/day-level60.png", LEVEL60N: "img/night-level60.png", SKIN_DEVASTD: "img/day-skin-devast0.png", SKIN_DEVASTN: "img/night-skin-devast0.png", HAND_DEVASTD: "img/day-hand-devaster.png", HAND_DEVASTN: "img/night-hand-devaster.png", SKIN_STARD: "img/day-skin-star0.png", SKIN_STARN: "img/night-skin-star0.png", HAND_STARD: "img/day-hand-star0.png", HAND_STARN: "img/night-hand-star0.png", SKIN_VAMPIRED: "img/day-vampire.png", SKIN_VAMPIREN: "img/night-vampire.png", HAND_VAMPIRED: "img/day-hand-vampire.png", HAND_VAMPIREN: "img/night-hand-vampire.png", SKIN_ZOMBIED: "img/day-zombie.png", SKIN_ZOMBIEN: "img/night-zombie.png", HAND_ZOMBIED: "img/day-hand-zombie.png", HAND_ZOMBIEN: "img/night-hand-zombie.png", SKIN_ROBOTD: "img/day-skin113.png", SKIN_ROBOTN: "img/night-skin113.png", HAND_ROBOTD: "img/day-hand-skin113.png", HAND_ROBOTN: "img/night-hand-skin113.png", SKIN0D: "img/day-skin0.png", SKIN0N: "img/night-skin0.png", SKIN1D: "img/day-skin1.png", SKIN1N: "img/night-skin1.png", SKIN2D: "img/day-skin2.png", SKIN2N: "img/night-skin2.png", SKIN3D: "img/day-skin3.png", SKIN3N: "img/night-skin3.png", SKIN4D: "img/day-skin4.png", SKIN4N: "img/night-skin4.png", SKIN5D: "img/day-skin5.png", SKIN5N: "img/night-skin5.png", SKIN6D: "img/day-skin6.png", SKIN6N: "img/night-skin6.png", SKIN7D: "img/day-skin7.png", SKIN7N: "img/night-skin7.png", SKIN8D: "img/day-skin8.png", SKIN8N: "img/night-skin8.png", SKIN9D: "img/day-skin9.png", SKIN9N: "img/night-skin9.png", SKIN10D: "img/day-skin10.png", SKIN10N: "img/night-skin10.png", SKIN11D: "img/day-skin11.png", SKIN11N: "img/night-skin11.png", SKIN12D: "img/day-skin12.png", SKIN12N: "img/night-skin12.png", SKIN13D: "img/day-skin13.png", SKIN13N: "img/night-skin13.png", SKIN14D: "img/day-skin14.png", SKIN14N: "img/night-skin14.png", SKIN15D: "img/day-skin15.png", SKIN15N: "img/night-skin15.png", SKIN16D: "img/day-skin16.png", SKIN16N: "img/night-skin16.png", SKIN17D: "img/day-skin17.png", SKIN17N: "img/night-skin17.png", SKIN18D: "img/day-skin18.png", SKIN18N: "img/night-skin18.png", SKIN19D: "img/day-skin19.png", SKIN19N: "img/night-skin19.png", SKIN20D: "img/day-skin20.png", SKIN20N: "img/night-skin20.png", SKIN21D: "img/day-skin21.png", SKIN21N: "img/night-skin21.png", SKIN22D: "img/day-skin22.png", SKIN22N: "img/night-skin22.png", SKIN23D: "img/day-skin23.png", SKIN23N: "img/night-skin23.png", SKIN24D: "img/day-skin24.png", SKIN24N: "img/night-skin24.png", SKIN25D: "img/day-skin25.png", SKIN25N: "img/night-skin25.png", SKIN26D: "img/day-skin26.png", SKIN26N: "img/night-skin26.png", SKIN27D: "img/day-skin27.png", SKIN27N: "img/night-skin27.png", SKIN28D: "img/day-skin28.png", SKIN28N: "img/night-skin28.png", SKIN29D: "img/day-skin29.png", SKIN29N: "img/night-skin29.png", SKIN30D: "img/day-skin30.png", SKIN30N: "img/night-skin30.png", SKIN31D: "img/day-skin31.png", SKIN31N: "img/night-skin31.png", SKIN32D: "img/day-skin32.png", SKIN32N: "img/night-skin32.png", SKIN33D: "img/day-skin33.png", SKIN33N: "img/night-skin33.png", SKIN34D: "img/day-skin34.png", SKIN34N: "img/night-skin34.png", SKIN35D: "img/day-skin35.png", SKIN35N: "img/night-skin35.png", SKIN36D: "img/day-skin36.png", SKIN36N: "img/night-skin36.png", SKIN37D: "img/day-skin37.png", SKIN37N: "img/night-skin37.png", SKIN38D: "img/day-skin38.png", SKIN38N: "img/night-skin38.png", SKIN39D: "img/day-skin39.png", SKIN39N: "img/night-skin39.png", SKIN40D: "img/day-skin40.png", SKIN40N: "img/night-skin40.png", SKIN41D: "img/day-skin41.png", SKIN41N: "img/night-skin41.png", SKIN42D: "img/day-skin42.png", SKIN42N: "img/night-skin42.png", SKIN43D: "img/day-skin43.png", SKIN43N: "img/night-skin43.png", SKIN44D: "img/day-skin44.png", SKIN44N: "img/night-skin44.png", SKIN45D: "img/day-skin45.png", SKIN45N: "img/night-skin45.png", SKIN46D: "img/day-skin46.png", SKIN46N: "img/night-skin46.png", SKIN47D: "img/day-skin47.png", SKIN47N: "img/night-skin47.png", SKIN48D: "img/day-skin48.png", SKIN48N: "img/night-skin48.png", SKIN49D: "img/day-skin49.png", SKIN49N: "img/night-skin49.png", SKIN50D: "img/day-skin50.png", SKIN50N: "img/night-skin50.png", SKIN51D: "img/day-skin51.png", SKIN51N: "img/night-skin51.png", SKIN52D: "img/day-skin52.png", SKIN52N: "img/night-skin52.png", SKIN53D: "img/day-skin53.png", SKIN53N: "img/night-skin53.png", SKIN54D: "img/day-skin54.png", SKIN54N: "img/night-skin54.png", SKIN55D: "img/day-skin55.png", SKIN55N: "img/night-skin55.png", SKIN56D: "img/day-skin56.png", SKIN56N: "img/night-skin56.png", SKIN57D: "img/day-skin57.png", SKIN57N: "img/night-skin57.png", SKIN58D: "img/day-skin58.png", SKIN58N: "img/night-skin58.png", SKIN59D: "img/day-skin59.png", SKIN59N: "img/night-skin59.png", SKIN60D: "img/day-skin60.png", SKIN60N: "img/night-skin60.png", SKIN61D: "img/day-skin61.png", SKIN61N: "img/night-skin61.png", SKIN62D: "img/day-skin62.png", SKIN62N: "img/night-skin62.png", SKIN63D: "img/day-skin63.png", SKIN63N: "img/night-skin63.png", SKIN64D: "img/day-skin64.png", SKIN64N: "img/night-skin64.png", SKIN65D: "img/day-skin65.png", SKIN65N: "img/night-skin65.png", SKIN66D: "img/day-skin66.png", SKIN66N: "img/night-skin66.png", SKIN67D: "img/day-skin67.png", SKIN67N: "img/night-skin67.png", SKIN68D: "img/day-skin68.png", SKIN68N: "img/night-skin68.png", SKIN69D: "img/day-skin69.png", SKIN69N: "img/night-skin69.png", SKIN70D: "img/day-skin70.png", SKIN70N: "img/night-skin70.png", SKIN71D: "img/day-skin71.png", SKIN71N: "img/night-skin71.png", SKIN72D: "img/day-skin72.png", SKIN72N: "img/night-skin72.png", SKIN73D: "img/day-skin73.png", SKIN73N: "img/night-skin73.png", SKIN74D: "img/day-skin74.png", SKIN74N: "img/night-skin74.png", SKIN75D: "img/day-skin75.png", SKIN75N: "img/night-skin75.png", SKIN76D: "img/day-skin76.png", SKIN76N: "img/night-skin76.png", SKIN77D: "img/day-skin77.png", SKIN77N: "img/night-skin77.png", SKIN78D: "img/day-skin78.png", SKIN78N: "img/night-skin78.png", SKIN79D: "img/day-skin79.png", SKIN79N: "img/night-skin79.png", SKIN80D: "img/day-skin80.png", SKIN80N: "img/night-skin80.png", SKIN81D: "img/day-skin81.png", SKIN81N: "img/night-skin81.png", SKIN82D: "img/day-skin82.png", SKIN82N: "img/night-skin82.png", SKIN83D: "img/day-skin83.png", SKIN83N: "img/night-skin83.png", SKIN84D: "img/day-skin84.png", SKIN84N: "img/night-skin84.png", SKIN85D: "img/day-skin85.png", SKIN85N: "img/night-skin85.png", SKIN86D: "img/day-skin86.png", SKIN86N: "img/night-skin86.png", SKIN87D: "img/day-skin87.png", SKIN87N: "img/night-skin87.png", SKIN88D: "img/day-skin88.png", SKIN88N: "img/night-skin88.png", SKIN89D: "img/day-skin89.png", SKIN89N: "img/night-skin89.png", SKIN90D: "img/day-skin90.png", SKIN90N: "img/night-skin90.png", SKIN91D: "img/day-skin91.png", SKIN91N: "img/night-skin91.png", SKIN92D: "img/day-skin92.png", SKIN92N: "img/night-skin92.png", SKIN93D: "img/day-skin93.png", SKIN93N: "img/night-skin93.png", SKIN94D: "img/day-skin94.png", SKIN94N: "img/night-skin94.png", SKIN95D: "img/day-skin95.png", SKIN95N: "img/night-skin95.png", SKIN96D: "img/day-skin96.png", SKIN96N: "img/night-skin96.png", SKIN97D: "img/day-skin97.png", SKIN97N: "img/night-skin97.png", SKIN98D: "img/day-skin98.png", SKIN98N: "img/night-skin98.png", SKIN99D: "img/day-skin99.png", SKIN99N: "img/night-skin99.png", SKIN100D: "img/day-skin100.png", SKIN100N: "img/night-skin100.png", SKIN101D: "img/day-skin101.png", SKIN101N: "img/night-skin101.png", SKIN102D: "img/day-skin102.png", SKIN102N: "img/night-skin102.png", SKIN103D: "img/day-skin103.png", SKIN103N: "img/night-skin103.png", SKIN104D: "img/day-skin104.png", SKIN104N: "img/night-skin104.png", SKIN105D: "img/day-skin105.png", SKIN105N: "img/night-skin105.png", SKIN106D: "img/day-skin106.png", SKIN106N: "img/night-skin106.png", SKIN107D: "img/day-skin107.png", SKIN107N: "img/night-skin107.png", SKIN108D: "img/day-skin108.png", SKIN108N: "img/night-skin108.png", SKIN109D: "img/day-skin109.png", SKIN109N: "img/night-skin109.png", SKIN110D: "img/day-skin110.png", SKIN110N: "img/night-skin110.png", SKIN111D: "img/day-skin111.png", SKIN111N: "img/night-skin111.png", SKIN112D: "img/day-skin112.png", SKIN112N: "img/night-skin112.png", SKIN113D: "img/day-skin113.png", SKIN113N: "img/night-skin113.png", SKIN114D: "img/day-skin114.png", SKIN114N: "img/night-skin114.png", SKIN115D: "img/day-skin115.png", SKIN115N: "img/night-skin115.png", SKIN116D: "img/day-skin116.png", SKIN116N: "img/night-skin116.png", SKIN117D: "img/day-skin117.png", SKIN117N: "img/night-skin117.png", SKIN118D: "img/day-skin118.png", SKIN118N: "img/night-skin118.png", SKIN119D: "img/day-skin119.png", SKIN119N: "img/night-skin119.png", SKIN120D: "img/day-skin120.png", SKIN120N: "img/night-skin120.png", SKIN121D: "img/day-skin121.png", SKIN121N: "img/night-skin121.png", SKIN122D: "img/day-skin122.png", SKIN122N: "img/night-skin122.png", SKIN123D: "img/day-skin123.png", SKIN123N: "img/night-skin123.png", SKIN124D: "img/day-skin124.png", SKIN124N: "img/night-skin124.png", SKIN125D: "img/day-skin125.png", SKIN125N: "img/night-skin125.png", SKIN126D: "img/day-skin126.png", SKIN126N: "img/night-skin126.png", SKIN127D: "img/day-skin127.png", SKIN127N: "img/night-skin127.png", SKIN128D: "img/day-skin128.png", SKIN128N: "img/night-skin128.png", SKIN129D: "img/day-skin129.png", SKIN129N: "img/night-skin129.png", SKIN130D: "img/day-skin130-1.png", SKIN130N: "img/night-skin130-1.png", SKIN131D: "img/day-skin131.png", SKIN131N: "img/night-skin131.png", SKIN132D: "img/day-skin132.png", SKIN132N: "img/night-skin132.png", SKIN133D: "img/day-skin133.png", SKIN133N: "img/night-skin133.png", SKIN134D: "img/day-skin134.png", SKIN134N: "img/night-skin134.png", SKIN135D: "img/day-skin135.png", SKIN135N: "img/night-skin135.png", SKIN136D: "img/day-skin136.png", SKIN136N: "img/night-skin136.png", SKIN137D: "img/day-skin137.png", SKIN137N: "img/night-skin137.png", SKIN138D: "img/day-skin138.png", SKIN138N: "img/night-skin138.png", SKIN139D: "img/day-skin139.png", SKIN139N: "img/night-skin139.png", SKIN140D: "img/day-skin140.png", SKIN140N: "img/night-skin140.png", SKIN141D: "img/day-skin141.png", SKIN141N: "img/night-skin141.png", SKIN142D: "img/day-skin142.png", SKIN142N: "img/night-skin142.png", SKIN143D: "img/day-skin143.png", SKIN143N: "img/night-skin143.png", SKIN144D: "img/day-skin144.png", SKIN144N: "img/night-skin144.png", SKIN145D: "img/day-skin145.png", SKIN145N: "img/night-skin145.png", SKIN146D: "img/day-skin146.png", SKIN146N: "img/night-skin146.png", SKIN147D: "img/day-skin147.png", SKIN147N: "img/night-skin147.png", SKIN148D: "img/day-skin148.png", SKIN148N: "img/night-skin148.png", SKIN149D: "img/day-skin149.png", SKIN149N: "img/night-skin149.png", SKIN150D: "img/day-skin150.png", SKIN150N: "img/night-skin150.png", HAND_SKIN0D: "img/day-hand-skin0.png", HAND_SKIN0N: "img/night-hand-skin0.png", HAND_SKIN1D: "img/day-hand-skin1.png", HAND_SKIN1N: "img/night-hand-skin1.png", HAND_SKIN2D: "img/day-hand-skin2.png", HAND_SKIN2N: "img/night-hand-skin2.png", HAND_SKIN3D: "img/day-hand-skin3.png", HAND_SKIN3N: "img/night-hand-skin3.png", HAND_SKIN4D: "img/day-hand-skin4.png", HAND_SKIN4N: "img/night-hand-skin4.png", HAND_SKIN5D: "img/day-hand-skin5.png", HAND_SKIN5N: "img/night-hand-skin5.png", HAND_SKIN6D: "img/day-hand-skin6.png", HAND_SKIN6N: "img/night-hand-skin6.png", HAND_SKIN7D: "img/day-hand-skin6.png", HAND_SKIN7N: "img/night-hand-skin6.png", HAND_SKIN8D: "img/day-hand-skin8.png", HAND_SKIN8N: "img/night-hand-skin8.png", HAND_SKIN9D: "img/day-hand-skin9.png", HAND_SKIN9N: "img/night-hand-skin9.png", HAND_SKIN10D: "img/day-hand-skin10.png", HAND_SKIN10N: "img/night-hand-skin10.png", HAND_SKIN11D: "img/day-hand-skin11.png", HAND_SKIN11N: "img/night-hand-skin11.png", HAND_SKIN12D: "img/day-hand-skin12.png", HAND_SKIN12N: "img/night-hand-skin12.png", HAND_SKIN13D: "img/day-hand-skin13.png", HAND_SKIN13N: "img/night-hand-skin13.png", HAND_SKIN14D: "img/day-hand-skin14.png", HAND_SKIN14N: "img/night-hand-skin14.png", HAND_SKIN15D: "img/day-hand-skin15.png", HAND_SKIN15N: "img/night-hand-skin15.png", HAND_SKIN16D: "img/day-hand-skin16.png", HAND_SKIN16N: "img/night-hand-skin16.png", HAND_SKIN17D: "img/day-hand-skin17.png", HAND_SKIN17N: "img/night-hand-skin17.png", HAND_SKIN18D: "img/day-hand-skin18.png", HAND_SKIN18N: "img/night-hand-skin18.png", HAND_SKIN19D: "img/day-hand-skin19.png", HAND_SKIN19N: "img/night-hand-skin19.png", HAND_SKIN20D: "img/day-hand-skin20.png", HAND_SKIN20N: "img/night-hand-skin20.png", HAND_SKIN21D: "img/day-hand-skin21.png", HAND_SKIN21N: "img/night-hand-skin21.png", HAND_SKIN22D: "img/day-hand-skin22.png", HAND_SKIN22N: "img/night-hand-skin22.png", HAND_SKIN23D: "img/day-hand-skin23.png", HAND_SKIN23N: "img/night-hand-skin23.png", HAND_SKIN24D: "img/day-hand-skin24.png", HAND_SKIN24N: "img/night-hand-skin24.png", HAND_SKIN25D: "img/day-hand-skin25.png", HAND_SKIN25N: "img/night-hand-skin25.png", HAND_SKIN26D: "img/day-hand-skin26.png", HAND_SKIN26N: "img/night-hand-skin26.png", HAND_SKIN27D: "img/day-hand-skin27.png", HAND_SKIN27N: "img/night-hand-skin27.png", HAND_SKIN28D: "img/day-hand-skin28.png", HAND_SKIN28N: "img/night-hand-skin28.png", HAND_SKIN29D: "img/day-hand-skin29.png", HAND_SKIN29N: "img/night-hand-skin29.png", HAND_SKIN30D: "img/day-hand-skin30.png", HAND_SKIN30N: "img/night-hand-skin30.png", HAND_SKIN31D: "img/day-hand-skin31.png", HAND_SKIN31N: "img/night-hand-skin31.png", HAND_SKIN32D: "img/day-hand-skin32.png", HAND_SKIN32N: "img/night-hand-skin32.png", HAND_SKIN33D: "img/day-hand-skin33.png", HAND_SKIN33N: "img/night-hand-skin33.png", HAND_SKIN34D: "img/day-hand-skin34.png", HAND_SKIN34N: "img/night-hand-skin34.png", HAND_SKIN35D: "img/day-hand-skin35.png", HAND_SKIN35N: "img/night-hand-skin35.png", HAND_SKIN36D: "img/day-hand-skin36.png", HAND_SKIN36N: "img/night-hand-skin36.png", HAND_SKIN37D: "img/day-hand-skin37.png", HAND_SKIN37N: "img/night-hand-skin37.png", HAND_SKIN38D: "img/day-hand-skin38.png", HAND_SKIN38N: "img/night-hand-skin38.png", HAND_SKIN39D: "img/day-hand-skin39.png", HAND_SKIN39N: "img/night-hand-skin39.png", HAND_SKIN40D: "img/day-hand-skin40.png", HAND_SKIN40N: "img/night-hand-skin40.png", HAND_SKIN41D: "img/day-hand-skin41.png", HAND_SKIN41N: "img/night-hand-skin41.png", HAND_SKIN42D: "img/day-hand-skin42.png", HAND_SKIN42N: "img/night-hand-skin42.png", HAND_SKIN43D: "img/day-hand-skin43.png", HAND_SKIN43N: "img/night-hand-skin43.png", HAND_SKIN44D: "img/day-hand-skin16.png", HAND_SKIN44N: "img/night-hand-skin16.png", HAND_SKIN45D: "img/day-hand-skin45.png", HAND_SKIN45N: "img/night-hand-skin45.png", HAND_SKIN46D: "img/day-hand-skin46.png", HAND_SKIN46N: "img/night-hand-skin46.png", HAND_SKIN47D: "img/day-hand-skin47.png", HAND_SKIN47N: "img/night-hand-skin47.png", HAND_SKIN48D: "img/day-hand-skin48.png", HAND_SKIN48N: "img/night-hand-skin48.png", HAND_SKIN49D: "img/day-hand-skin49.png", HAND_SKIN49N: "img/night-hand-skin49.png", HAND_SKIN50D: "img/day-hand-skin49.png", HAND_SKIN50N: "img/night-hand-skin49.png", HAND_SKIN51D: "img/day-hand-skin51.png", HAND_SKIN51N: "img/night-hand-skin51.png", HAND_SKIN52D: "img/day-hand-skin52.png", HAND_SKIN52N: "img/night-hand-skin52.png", HAND_SKIN53D: "img/day-hand-skin53.png", HAND_SKIN53N: "img/night-hand-skin53.png", HAND_SKIN54D: "img/day-hand-skin53.png", HAND_SKIN54N: "img/night-hand-skin53.png", HAND_SKIN55D: "img/day-hand-skin55.png", HAND_SKIN55N: "img/night-hand-skin55.png", HAND_SKIN56D: "img/day-hand-skin56.png", HAND_SKIN56N: "img/night-hand-skin56.png", HAND_SKIN57D: "img/day-hand-skin57.png", HAND_SKIN57N: "img/night-hand-skin57.png", HAND_SKIN58D: "img/day-hand-skin58.png", HAND_SKIN58N: "img/night-hand-skin58.png", HAND_SKIN59D: "img/day-hand-skin59.png", HAND_SKIN59N: "img/night-hand-skin59.png", HAND_SKIN60D: "img/day-hand-skin61.png", HAND_SKIN60N: "img/night-hand-skin61.png", HAND_SKIN61D: "img/day-hand-skin61.png", HAND_SKIN61N: "img/night-hand-skin61.png", HAND_SKIN62D: "img/day-hand-skin62.png", HAND_SKIN62N: "img/night-hand-skin62.png", HAND_SKIN63D: "img/day-hand-skin63.png", HAND_SKIN63N: "img/night-hand-skin63.png", HAND_SKIN64D: "img/day-hand-skin64.png", HAND_SKIN64N: "img/night-hand-skin64.png", HAND_SKIN65D: "img/day-hand-skin65.png", HAND_SKIN65N: "img/night-hand-skin65.png", HAND_SKIN66D: "img/day-hand-skin66.png", HAND_SKIN66N: "img/night-hand-skin66.png", HAND_SKIN67D: "img/day-hand-skin67.png", HAND_SKIN67N: "img/night-hand-skin67.png", HAND_SKIN68D: "img/day-hand-skin68.png", HAND_SKIN68N: "img/night-hand-skin68.png", HAND_SKIN69D: "img/day-hand-skin69.png", HAND_SKIN69N: "img/night-hand-skin69.png", HAND_SKIN70D: "img/day-hand-skin70.png", HAND_SKIN70N: "img/night-hand-skin70.png", HAND_SKIN71D: "img/day-hand-skin71.png", HAND_SKIN71N: "img/night-hand-skin71.png", HAND_SKIN72D: "img/day-hand-skin72.png", HAND_SKIN72N: "img/night-hand-skin72.png", HAND_SKIN73D: "img/day-hand-skin73.png", HAND_SKIN73N: "img/night-hand-skin73.png", HAND_SKIN74D: "img/day-hand-skin74.png", HAND_SKIN74N: "img/night-hand-skin74.png", HAND_SKIN75D: "img/day-hand-skin75.png", HAND_SKIN75N: "img/night-hand-skin75.png", HAND_SKIN76D: "img/day-hand-skin76.png", HAND_SKIN76N: "img/night-hand-skin76.png", HAND_SKIN77D: "img/day-hand-skin77.png", HAND_SKIN77N: "img/night-hand-skin77.png", HAND_SKIN78D: "img/day-hand-skin78.png", HAND_SKIN78N: "img/night-hand-skin78.png", HAND_SKIN79D: "img/day-hand-skin79.png", HAND_SKIN79N: "img/night-hand-skin79.png", HAND_SKIN80D: "img/day-hand-skin80.png", HAND_SKIN80N: "img/night-hand-skin80.png", HAND_SKIN81D: "img/day-hand-skin81.png", HAND_SKIN81N: "img/night-hand-skin81.png", HAND_SKIN82D: "img/day-hand-skin82.png", HAND_SKIN82N: "img/night-hand-skin82.png", HAND_SKIN83D: "img/day-hand-skin83.png", HAND_SKIN83N: "img/night-hand-skin83.png", HAND_SKIN84D: "img/day-hand-skin84.png", HAND_SKIN84N: "img/night-hand-skin84.png", HAND_SKIN85D: "img/day-hand-skin85.png", HAND_SKIN85N: "img/night-hand-skin85.png", HAND_SKIN86D: "img/day-hand-skin86.png", HAND_SKIN86N: "img/night-hand-skin86.png", HAND_SKIN87D: "img/day-hand-skin87.png", HAND_SKIN87N: "img/night-hand-skin87.png", HAND_SKIN88D: "img/day-hand-skin88.png", HAND_SKIN88N: "img/night-hand-skin88.png", HAND_SKIN89D: "img/day-hand-skin89.png", HAND_SKIN89N: "img/night-hand-skin89.png", HAND_SKIN90D: "img/day-hand-skin90.png", HAND_SKIN90N: "img/night-hand-skin90.png", HAND_SKIN91D: "img/day-hand-skin91.png", HAND_SKIN91N: "img/night-hand-skin91.png", HAND_SKIN92D: "img/day-hand-skin92.png", HAND_SKIN92N: "img/night-hand-skin92.png", HAND_SKIN93D: "img/day-hand-skin93.png", HAND_SKIN93N: "img/night-hand-skin93.png", HAND_SKIN94D: "img/day-hand-skin94.png", HAND_SKIN94N: "img/night-hand-skin94.png", HAND_SKIN95D: "img/day-hand-skin95.png", HAND_SKIN95N: "img/night-hand-skin95.png", HAND_SKIN96D: "img/day-hand-skin96.png", HAND_SKIN96N: "img/night-hand-skin96.png", HAND_SKIN97D: "img/day-hand-skin97.png", HAND_SKIN97N: "img/night-hand-skin97.png", HAND_SKIN98D: "img/day-hand-skin98.png", HAND_SKIN98N: "img/night-hand-skin98.png", HAND_SKIN99D: "img/day-hand-skin99.png", HAND_SKIN99N: "img/night-hand-skin99.png", HAND_SKIN100D: "img/day-hand-skin100.png", HAND_SKIN100N: "img/night-hand-skin100.png", HAND_SKIN101D: "img/day-hand-skin101.png", HAND_SKIN101N: "img/night-hand-skin101.png", HAND_SKIN102D: "img/day-hand-skin102.png", HAND_SKIN102N: "img/night-hand-skin102.png", HAND_SKIN103D: "img/day-hand-skin103.png", HAND_SKIN103N: "img/night-hand-skin103.png", HAND_SKIN104D: "img/day-hand-skin104.png", HAND_SKIN104N: "img/night-hand-skin104.png", HAND_SKIN105D: "img/day-hand-skin105.png", HAND_SKIN105N: "img/night-hand-skin105.png", HAND_SKIN106D: "img/day-hand-skin106.png", HAND_SKIN106N: "img/night-hand-skin106.png", HAND_SKIN107D: "img/day-hand-skin107.png", HAND_SKIN107N: "img/night-hand-skin107.png", HAND_SKIN108D: "img/day-hand-skin108.png", HAND_SKIN108N: "img/night-hand-skin108.png", HAND_SKIN109D: "img/day-hand-skin109.png", HAND_SKIN109N: "img/night-hand-skin109.png", HAND_SKIN110D: "img/day-hand-skin110.png", HAND_SKIN110N: "img/night-hand-skin110.png", HAND_SKIN111D: "img/day-hand-skin111.png", HAND_SKIN111N: "img/night-hand-skin111.png", HAND_SKIN112D: "img/day-hand-skin112.png", HAND_SKIN112N: "img/night-hand-skin112.png", HAND_SKIN113D: "img/day-hand-skin113.png", HAND_SKIN113N: "img/night-hand-skin113.png", HAND_SKIN114D: "img/day-hand-skin114.png", HAND_SKIN114N: "img/night-hand-skin114.png", HAND_SKIN115D: "img/day-hand-skin115.png", HAND_SKIN115N: "img/night-hand-skin115.png", HAND_SKIN116D: "img/day-hand-skin116.png", HAND_SKIN116N: "img/night-hand-skin116.png", HAND_SKIN117D: "img/day-hand-skin117.png", HAND_SKIN117N: "img/night-hand-skin117.png", HAND_SKIN118D: "img/day-hand-skin118.png", HAND_SKIN118N: "img/night-hand-skin118.png", HAND_SKIN119D: "img/day-hand-skin119.png", HAND_SKIN119N: "img/night-hand-skin119.png", HAND_SKIN120D: "img/day-hand-skin120.png", HAND_SKIN120N: "img/night-hand-skin120.png", HAND_SKIN121D: "img/day-hand-skin122.png", HAND_SKIN121N: "img/night-hand-skin122.png", HAND_SKIN122D: "img/day-hand-skin122.png", HAND_SKIN122N: "img/night-hand-skin122.png", HAND_SKIN123D: "img/day-hand-skin122.png", HAND_SKIN123N: "img/night-hand-skin122.png", HAND_SKIN124D: "img/day-hand-skin124.png", HAND_SKIN124N: "img/night-hand-skin124.png", HAND_SKIN125D: "img/day-hand-skin125.png", HAND_SKIN125N: "img/night-hand-skin125.png", HAND_SKIN126D: "img/day-hand-skin126.png", HAND_SKIN126N: "img/night-hand-skin126.png", HAND_SKIN127D: "img/day-hand-skin127.png", HAND_SKIN127N: "img/night-hand-skin127.png", HAND_SKIN128D: "img/day-hand-skin128.png", HAND_SKIN128N: "img/night-hand-skin128.png", HAND_SKIN129D: "img/day-hand-skin129.png", HAND_SKIN129N: "img/night-hand-skin129.png", HAND_SKIN130D: "img/day-hand-skin130.png", HAND_SKIN130N: "img/night-hand-skin130.png", HAND_SKIN131D: "img/day-hand-skin131.png", HAND_SKIN131N: "img/night-hand-skin131.png", HAND_SKIN132D: "img/day-hand-skin130.png", HAND_SKIN132N: "img/night-hand-skin130.png", HAND_SKIN133D: "img/day-hand-skin133.png", HAND_SKIN133N: "img/night-hand-skin133.png", HAND_SKIN134D: "img/day-hand-skin134.png", HAND_SKIN134N: "img/night-hand-skin134.png", HAND_SKIN135D: "img/day-hand-skin135.png", HAND_SKIN135N: "img/night-hand-skin135.png", HAND_SKIN136D: "img/day-hand-skin136.png", HAND_SKIN136N: "img/night-hand-skin136.png", HAND_SKIN137D: "img/day-hand-skin137.png", HAND_SKIN137N: "img/night-hand-skin137.png", HAND_SKIN138D: "img/day-hand-skin138.png", HAND_SKIN138N: "img/night-hand-skin138.png", HAND_SKIN139D: "img/day-hand-skin139.png", HAND_SKIN139N: "img/night-hand-skin139.png", HAND_SKIN140D: "img/day-hand-skin140.png", HAND_SKIN140N: "img/night-hand-skin140.png", HAND_SKIN141D: "img/day-hand-skin141.png", HAND_SKIN141N: "img/night-hand-skin141.png", HAND_SKIN142D: "img/day-hand-skin142.png", HAND_SKIN142N: "img/night-hand-skin142.png", HAND_SKIN143D: "img/day-hand-skin143.png", HAND_SKIN143N: "img/night-hand-skin143.png", HAND_SKIN144D: "img/day-hand-skin144.png", HAND_SKIN144N: "img/night-hand-skin144.png", HAND_SKIN145D: "img/day-hand-skin145.png", HAND_SKIN145N: "img/night-hand-skin145.png", HAND_SKIN146D: "img/day-hand-skin146.png", HAND_SKIN146N: "img/night-hand-skin146.png", HAND_SKIN147D: "img/day-hand-skin147.png", HAND_SKIN147N: "img/night-hand-skin147.png", HAND_SKIN148D: "img/day-hand-skin148.png", HAND_SKIN148N: "img/night-hand-skin148.png", HAND_SKIN149D: "img/day-hand-skin149.png", HAND_SKIN149N: "img/night-hand-skin149.png", HAND_SKIN150D: "img/day-hand-skin150.png", HAND_SKIN150N: "img/night-hand-skin150.png", BAG_STARD: "img/day-bag-star0.png", BAG_STARN: "img/night-bag-star0.png", BAG0D: "img/day-bag0.png", BAG0N: "img/night-bag0.png", BAG1D: "img/day-bag1.png", BAG1N: "img/night-bag1.png", BAG2D: "img/day-bag2.png", BAG2N: "img/night-bag2.png", BAG3D: "img/day-bag3.png", BAG3N: "img/night-bag3.png", BAG4D: "img/day-bag4.png", BAG4N: "img/night-bag4.png", BAG5D: "img/day-bag5.png", BAG5N: "img/night-bag5.png", BAG6D: "img/day-bag6.png", BAG6N: "img/night-bag6.png", BAG7D: "img/day-bag7.png", BAG7N: "img/night-bag7.png", BAG8D: "img/day-bag8.png", BAG8N: "img/night-bag8.png", BAG9D: "img/day-bag9.png", BAG9N: "img/night-bag9.png", BAG10D: "img/day-bag10.png", BAG10N: "img/night-bag10.png", BAG11D: "img/day-bag11.png", BAG11N: "img/night-bag11.png", BAG13D: "img/day-bag13.png", BAG13N: "img/night-bag13.png", BAG14D: "img/day-bag14.png", BAG14N: "img/night-bag14.png", BAG16D: "img/day-bag16.png", BAG16N: "img/night-bag16.png", BAG17D: "img/day-bag17.png", BAG17N: "img/night-bag17.png", BAG18D: "img/day-bag18.png", BAG18N: "img/night-bag18.png", BAG19D: "img/day-bag19.png", BAG19N: "img/night-bag19.png", BAG20D: "img/day-bag20.png", BAG20N: "img/night-bag20.png", BAG21D: "img/day-bag21.png", BAG21N: "img/night-bag21.png", BAG22D: "img/day-bag22.png", BAG22N: "img/night-bag22.png", BAG23D: "img/day-bag23.png", BAG23N: "img/night-bag23.png", BAG24D: "img/day-bag24.png", BAG24N: "img/night-bag24.png", BAG25D: "img/day-bag25.png", BAG25N: "img/night-bag25.png", BAG26D: "img/day-bag26.png", BAG26N: "img/night-bag26.png", BAG27D: "img/day-bag27.png", BAG27N: "img/night-bag27.png", BAG28D: "img/day-bag28.png", BAG28N: "img/night-bag28.png", BAG29D: "img/day-bag29.png", BAG29N: "img/night-bag29.png", BAG30D: "img/day-bag30.png", BAG30N: "img/night-bag30.png", BAG31D: "img/day-bag31.png", BAG31N: "img/night-bag31.png", BAG32D: "img/day-bag32.png", BAG32N: "img/night-bag32.png", BAG33D: "img/day-bag33.png", BAG33N: "img/night-bag33.png", BAG34D: "img/day-bag34.png", BAG34N: "img/night-bag34.png", BAG35D: "img/day-bag35.png", BAG35N: "img/night-bag35.png", BAG36D: "img/day-bag36.png", BAG36N: "img/night-bag36.png", BAG37D: "img/day-bag37.png", BAG37N: "img/night-bag37.png", BAG38D: "img/day-bag38.png", BAG38N: "img/night-bag38.png", BAG39D: "img/day-bag39.png", BAG39N: "img/night-bag39.png", BAG40D: "img/day-bag40.png", BAG40N: "img/night-bag40.png", BAG41D: "img/day-bag41.png", BAG41N: "img/night-bag41.png", BAG42D: "img/day-bag42.png", BAG42N: "img/night-bag42.png", BAG43D: "img/day-bag43.png", BAG43N: "img/night-bag43.png", BAG44D: "img/day-bag44.png", BAG44N: "img/night-bag44.png", BAG45D: "img/day-bag45.png", BAG45N: "img/night-bag45.png", BAG46D: "img/day-bag46.png", BAG46N: "img/night-bag46.png", BAG47D: "img/day-bag47.png", BAG47N: "img/night-bag47.png", BAG48D: "img/day-bag48.png", BAG48N: "img/night-bag48.png", BAG49D: "img/day-bag49.png", BAG49N: "img/night-bag49.png", BAG50D: "img/day-bag50.png", BAG50N: "img/night-bag50.png", BAG51D: "img/day-bag51.png", BAG51N: "img/night-bag51.png", BAG52D: "img/day-bag52.png", BAG52N: "img/night-bag52.png", BAG53D: "img/day-bag53.png", BAG53N: "img/night-bag53.png", BAG54D: "img/day-bag54.png", BAG54N: "img/night-bag54.png", BAG55D: "img/day-bag55.png", BAG55N: "img/night-bag55.png", BAG56D: "img/day-bag56.png", BAG56N: "img/night-bag56.png", BAG57D: "img/day-bag57.png", BAG57N: "img/night-bag57.png", BAG58D: "img/day-bag58.png", BAG58N: "img/night-bag58.png", BAG59D: "img/day-bag59.png", BAG59N: "img/night-bag59.png", BAG60D: "img/day-bag60.png", BAG60N: "img/night-bag60.png", BAG61D: "img/day-bag61.png", BAG61N: "img/night-bag61.png", BAG62D: "img/day-bag62.png", BAG62N: "img/night-bag62.png", BAG63D: "img/day-bag63.png", BAG63N: "img/night-bag63.png", BAG64D: "img/day-bag64.png", BAG64N: "img/night-bag64.png", BAG65D: "img/day-bag65.png", BAG65N: "img/night-bag65.png", BAG66D: "img/day-bag66.png", BAG66N: "img/night-bag66.png", BAG67D: "img/day-bag67.png", BAG67N: "img/night-bag67.png", BAG68D: "img/day-bag68.png", BAG68N: "img/night-bag68.png", ACCESSORY0D: "img/day-accessory0.png", ACCESSORY17D: "img/day-accessory0-pacques.png", ACCESSORY17N: "img/night-accessory0-pacques.png", ACCESSORY13D: "img/day-accessory13.png", ACCESSORY13N: "img/night-accessory13.png", ACCESSORY14D: "img/day-accessory14.png", ACCESSORY14N: "img/night-accessory14.png", ACCESSORY15D: "img/day-accessory15.png", ACCESSORY15N: "img/night-accessory15.png", ACCESSORY16D: "img/day-accessory16.png", ACCESSORY16N: "img/night-accessory16.png", ACCESSORY18D: "img/day-accessory17.png", ACCESSORY18N: "img/day-accessory17.png", ACCESSORY19D: "img/day-accessory19.png", ACCESSORY19N: "img/night-accessory19.png", ACCESSORY20D: "img/day-accessory20.png", ACCESSORY20N: "img/night-accessory20.png", ACCESSORY21D: "img/day-accessory21.png", ACCESSORY21N: "img/night-accessory21.png", ACCESSORY22D: "img/day-accessory22.png", ACCESSORY22N: "img/night-accessory22.png", ACCESSORY23D: "img/day-accessory23.png", ACCESSORY23N: "img/night-accessory23.png", ACCESSORY24D: "img/day-accessory24.png", ACCESSORY24N: "img/night-accessory24.png", ACCESSORY25D: "img/day-accessory25.png", ACCESSORY25N: "img/night-accessory25.png", ACCESSORY26D: "img/day-accessory26.png", ACCESSORY26N: "img/night-accessory26.png", ACCESSORY27D: "img/day-accessory27.png", ACCESSORY27N: "img/night-accessory27.png", ACCESSORY28D: "img/day-accessory18.png", ACCESSORY28N: "img/night-accessory18.png", ACCESSORY29D: "img/day-accessory29.png", ACCESSORY29N: "img/night-accessory29.png", ACCESSORY30D: "img/day-accessory30.png", ACCESSORY30N: "img/night-accessory30.png", ACCESSORY31D: "img/day-accessory31.png", ACCESSORY31N: "img/night-accessory31.png", ACCESSORY32D: "img/day-accessory32.png", ACCESSORY32N: "img/night-accessory32.png", ACCESSORY33D: "img/day-accessory33.png", ACCESSORY33N: "img/night-accessory33.png", ACCESSORY34D: "img/day-accessory34.png", ACCESSORY34N: "img/night-accessory34.png", ACCESSORY35D: "img/day-accessory35.png", ACCESSORY35N: "img/night-accessory35.png", ACCESSORY36D: "img/day-accessory28.png", ACCESSORY36N: "img/night-accessory28.png", ACCESSORY37D: "img/day-accessory36.png", ACCESSORY37N: "img/night-accessory36.png", ACCESSORY38D: "img/day-accessory37.png", ACCESSORY38N: "img/night-accessory37.png", ACCESSORY39D: "img/day-accessory39.png", ACCESSORY39N: "img/night-accessory39.png", ACCESSORY40D: "img/day-accessory40.png", ACCESSORY40N: "img/night-accessory40.png", ACCESSORY41D: "img/day-accessory41.png", ACCESSORY41N: "img/night-accessory41.png", ACCESSORY42D: "img/day-accessory42.png", ACCESSORY42N: "img/night-accessory42.png", ACCESSORY43D: "img/day-accessory43.png", ACCESSORY43N: "img/night-accessory43.png", ACCESSORY44D: "img/day-accessory44.png", ACCESSORY44N: "img/night-accessory44.png", ACCESSORY45D: "img/day-accessory38.png", ACCESSORY45N: "img/night-accessory38.png", ACCESSORY46D: "img/day-accessory46.png", ACCESSORY46N: "img/night-accessory46.png", ACCESSORY47D: "img/day-accessory47.png", ACCESSORY47N: "img/night-accessory47.png", ACCESSORY48D: "img/day-accessory48.png", ACCESSORY48N: "img/night-accessory48.png", ACCESSORY49D: "img/day-accessory49.png", ACCESSORY49N: "img/night-accessory49.png", ACCESSORY50D: "img/day-accessory45.png", ACCESSORY50N: "img/night-accessory45.png", ACCESSORY51D: "img/day-accessory50.png", ACCESSORY51N: "img/night-accessory50.png", ACCESSORY52D: "img/day-accessory51.png", ACCESSORY52N: "img/night-accessory51.png", ACCESSORY53D: "img/day-accessory52.png", ACCESSORY53N: "img/night-accessory52.png", ACCESSORY54D: "img/day-accessory53.png", ACCESSORY54N: "img/night-accessory53.png", ACCESSORY55D: "img/day-accessory54.png", ACCESSORY55N: "img/night-accessory54.png", ACCESSORY56D: "img/day-accessory55.png", ACCESSORY56N: "img/night-accessory55.png", ACCESSORY57D: "img/day-accessory56.png", ACCESSORY57N: "img/night-accessory56.png", ACCESSORY58D: "img/day-accessory57.png", ACCESSORY58N: "img/night-accessory57.png", ACCESSORY59D: "img/day-accessory58.png", ACCESSORY59N: "img/night-accessory58.png", ACCESSORY60D: "img/day-accessory59.png", ACCESSORY60N: "img/night-accessory59.png", ACCESSORY61D: "img/day-accessory60.png", ACCESSORY61N: "img/night-accessory60.png", ACCESSORY62D: "img/day-accessory61.png", ACCESSORY62N: "img/night-accessory61.png", ACCESSORY63D: "img/day-accessory62.png", ACCESSORY63N: "img/night-accessory62.png", ACCESSORY64D: "img/day-accessory63.png", ACCESSORY64N: "img/night-accessory63.png", ACCESSORY65D: "img/day-accessory64.png", ACCESSORY65N: "img/night-accessory64.png", ACCESSORY66D: "img/day-accessory65.png", ACCESSORY66N: "img/night-accessory65.png", ACCESSORY67D: "img/day-accessory66.png", ACCESSORY67N: "img/night-accessory66.png", ACCESSORY68D: "img/day-accessory67.png", ACCESSORY68N: "img/night-accessory67.png", ACCESSORY69D: "img/day-accessory68.png", ACCESSORY69N: "img/night-accessory68.png", ACCESSORY70D: "img/day-accessory69.png", ACCESSORY70N: "img/night-accessory69.png", ACCESSORY71D: "img/day-accessory70.png", ACCESSORY71N: "img/night-accessory70.png", ACCESSORY72D: "img/day-accessory71.png", ACCESSORY72N: "img/night-accessory71.png", ACCESSORY73D: "img/day-accessory72.png", ACCESSORY73N: "img/night-accessory72.png", ACCESSORY74D: "img/day-accessory73.png", ACCESSORY74N: "img/night-accessory73.png", ACCESSORY75D: "img/day-accessory74.png", ACCESSORY75N: "img/night-accessory74.png", ACCESSORY76D: "img/day-accessory75.png", ACCESSORY76N: "img/night-accessory75.png", ACCESSORY77D: "img/day-accessory76.png", ACCESSORY77N: "img/night-accessory76.png", ACCESSORY78D: "img/day-accessory77.png", ACCESSORY78N: "img/night-accessory77.png", ACCESSORY79D: "img/day-accessory78.png", ACCESSORY79N: "img/night-accessory78.png", ACCESSORY80D: "img/day-accessory79.png", ACCESSORY80N: "img/night-accessory79.png", ACCESSORY81D: "img/day-accessory80.png", ACCESSORY81N: "img/night-accessory80.png", ACCESSORY82D: "img/day-accessory81.png", ACCESSORY82N: "img/night-accessory81.png", BOOK0D: "img/day-book0.png", BOOK0N: "img/night-book0.png", BOOK1D: "img/day-book1.png", BOOK1N: "img/night-book1.png", BOOK2D: "img/day-book2.png", BOOK2N: "img/night-book2.png", BOOK3D: "img/day-book3.png", BOOK3N: "img/night-book3.png", BOOK4D: "img/day-book4.png", BOOK4N: "img/night-book4.png", BOOK5D: "img/day-book5.png", BOOK5N: "img/night-book5.png", BOOK6D: "img/day-book6.png", BOOK6N: "img/night-book6.png", BOOK7D: "img/day-book7.png", BOOK7N: "img/night-book7.png", BOOK8D: "img/day-book8.png", BOOK8N: "img/night-book8.png", BOOK9D: "img/day-book9.png", BOOK9N: "img/night-book9.png", BOOK10D: "img/day-book10.png", BOOK10N: "img/night-book10.png", BOOK11D: "img/day-book11.png", BOOK11N: "img/night-book11.png", BOOK12D: "img/day-book12.png", BOOK12N: "img/night-book12.png", BOOK13D: "img/day-book13.png", BOOK13N: "img/night-book13.png", BOOK14D: "img/day-book14.png", BOOK14N: "img/night-book14.png", BOOK15D: "img/day-book15.png", BOOK15N: "img/night-book15.png", BOOK16D: "img/day-book16.png", BOOK16N: "img/night-book16.png", BOOK17D: "img/day-book17.png", BOOK17N: "img/night-book17.png", BOOK18D: "img/day-book18.png", BOOK18N: "img/night-book18.png", BOOK19D: "img/day-book19.png", BOOK19N: "img/night-book19.png", BOOK20D: "img/day-book20.png", BOOK20N: "img/night-book20.png", BOOK21D: "img/day-book21.png", BOOK21N: "img/night-book21.png", BOOK22D: "img/day-book22.png", BOOK22N: "img/night-book22.png", BOOK23D: "img/day-book23.png", BOOK23N: "img/night-book23.png", BOOK24D: "img/day-book24.png", BOOK24N: "img/night-book24.png", BOOK25D: "img/day-book25.png", BOOK25N: "img/night-book25.png", BOOK26D: "img/day-book26.png", BOOK26N: "img/night-book26.png", BOOK27D: "img/day-book27.png", BOOK27N: "img/night-book27.png", BOOK28D: "img/day-book28.png", BOOK28N: "img/night-book28.png", BOOK29D: "img/day-book29.png", BOOK29N: "img/night-book29.png", BOOK30D: "img/day-book30.png", BOOK30N: "img/night-book30.png", BOOK31D: "img/day-book31.png", BOOK31N: "img/night-book31.png", BOOK32D: "img/day-book32.png", BOOK32N: "img/night-book32.png", BOOK33D: "img/day-book33.png", BOOK33N: "img/night-book33.png", BOOK34D: "img/day-book34.png", BOOK34N: "img/night-book34.png", BOOK35D: "img/day-book35.png", BOOK35N: "img/night-book35.png", BOOK36D: "img/day-book36.png", BOOK36N: "img/night-book36.png", BOOK37D: "img/day-book37.png", BOOK37N: "img/night-book37.png", BOOK38D: "img/day-book38.png", BOOK38N: "img/night-book38.png", BOOK39D: "img/day-book39.png", BOOK39N: "img/night-book39.png", BOOK40D: "img/day-book40.png", BOOK40N: "img/night-book40.png", BOOK41D: "img/day-book41.png", BOOK41N: "img/night-book41.png", BOOK42D: "img/day-book42.png", BOOK42N: "img/night-book42.png", BOOK43D: "img/day-book43.png", BOOK43N: "img/night-book43.png", BOOK44D: "img/day-book44.png", BOOK44N: "img/night-book44.png", BOOK45D: "img/day-book45.png", BOOK45N: "img/night-book45.png", CRATE1D: "img/day-crate1.png", CRATE1N: "img/night-crate1.png", CRATE2D: "img/day-crate2.png", CRATE2N: "img/night-crate2.png", CRATE3D: "img/day-crate3.png", CRATE3N: "img/night-crate3.png", CRATE4D: "img/day-crate4.png", CRATE4N: "img/night-crate4.png", CRATE5D: "img/day-crate5.png", CRATE5N: "img/night-crate5.png", CRATE6D: "img/day-crate6.png", CRATE6N: "img/night-crate6.png", CRATE7D: "img/day-crate7.png", CRATE7N: "img/night-crate7.png", CRATE8D: "img/day-crate8.png", CRATE8N: "img/night-crate8.png", CRATE9D: "img/day-crate9.png", CRATE9N: "img/night-crate9.png", CRATE10D: "img/day-crate10.png", CRATE10N: "img/night-crate10.png", CRATE11D: "img/day-crate11.png", CRATE11N: "img/night-crate11.png", CRATE12D: "img/day-crate12.png", CRATE12N: "img/night-crate12.png", CRATE13D: "img/day-crate13.png", CRATE13N: "img/night-crate13.png", CRATE14D: "img/day-crate14.png", CRATE14N: "img/night-crate14.png", CRATE15D: "img/day-crate15.png", CRATE15N: "img/night-crate15.png", CRATE16D: "img/day-crate16.png", CRATE16N: "img/night-crate16.png", CRATE17D: "img/day-crate17.png", CRATE17N: "img/night-crate17.png", CRATE18D: "img/day-crate18.png", CRATE18N: "img/night-crate18.png", CRATE19D: "img/day-crate19.png", CRATE19N: "img/night-crate19.png", CRATE20D: "img/day-crate20.png", CRATE20N: "img/night-crate20.png", CRATE21D: "img/day-crate21.png", CRATE21N: "img/night-crate21.png", CRATE22D: "img/day-crate22.png", CRATE22N: "img/night-crate22.png", CRATE23D: "img/day-crate23.png", CRATE23N: "img/night-crate23.png", CRATE24D: "img/day-crate24.png", CRATE24N: "img/night-crate24.png", CRATE25D: "img/day-crate25.png", CRATE25N: "img/night-crate25.png", CRATE26D: "img/day-crate26.png", CRATE26N: "img/night-crate26.png", CRATE27D: "img/day-crate27.png", CRATE27N: "img/night-crate27.png", CRATE28D: "img/day-crate28.png", CRATE28N: "img/night-crate28.png", CRATE29D: "img/day-crate29.png", CRATE29N: "img/night-crate29.png", CRATE30D: "img/day-crate30.png", CRATE30N: "img/night-crate30.png", CRATE31D: "img/day-crate31.png", CRATE31N: "img/night-crate31.png", CRATE32D: "img/day-crate32.png", CRATE32N: "img/night-crate32.png", CRATE33D: "img/day-crate33.png", CRATE33N: "img/night-crate33.png", CRATE34D: "img/day-crate34.png", CRATE34N: "img/night-crate34.png", CRATE35D: "img/day-crate35.png", CRATE35N: "img/night-crate35.png", CRATE36D: "img/day-crate36.png", CRATE36N: "img/night-crate36.png", CRATE37D: "img/day-crate37.png", CRATE37N: "img/night-crate37.png", CRATE38D: "img/day-crate38.png", CRATE38N: "img/night-crate38.png", CRATE39D: "img/day-crate39.png", CRATE39N: "img/night-crate39.png", CRATE40D: "img/day-crate40.png", CRATE40N: "img/night-crate40.png", CRATE41D: "img/day-crate41.png", CRATE41N: "img/night-crate41.png", CRATE42D: "img/day-crate42.png", CRATE42N: "img/night-crate42.png", CRATE43D: "img/day-crate43.png", CRATE43N: "img/night-crate43.png", CRATE44D: "img/day-crate44.png", CRATE44N: "img/night-crate44.png", CRATE45D: "img/day-crate45.png", CRATE45N: "img/night-crate45.png", CRATE46D: "img/day-crate46.png", CRATE46N: "img/night-crate46.png", CRATE47D: "img/day-crate47.png", CRATE47N: "img/night-crate47.png", CRATE48D: "img/day-crate48.png", CRATE48N: "img/night-crate48.png", CRATE49D: "img/day-crate49.png", CRATE49N: "img/night-crate49.png", CRATE50D: "img/day-crate50.png", CRATE50N: "img/night-crate50.png", CRATE51D: "img/day-crate51.png", CRATE51N: "img/night-crate51.png", CRATE52D: "img/day-crate52.png", CRATE52N: "img/night-crate52.png", CRATE53D: "img/day-crate53.png", CRATE53N: "img/night-crate53.png", CRATE54D: "img/day-crate54.png", CRATE54N: "img/night-crate54.png", CRATE55D: "img/day-crate55.png", CRATE55N: "img/night-crate55.png", CRATE56D: "img/day-crate56.png", CRATE56N: "img/night-crate56.png", CRATE57D: "img/day-crate57.png", CRATE57N: "img/night-crate57.png", CRATE58D: "img/day-crate58.png", CRATE58N: "img/night-crate58.png", CRATE59D: "img/day-crate59.png", CRATE59N: "img/night-crate59.png", CRATE60D: "img/day-crate60.png", CRATE60N: "img/night-crate60.png", CRATE61D: "img/day-crate61.png", CRATE61N: "img/night-crate61.png", CRATE62D: "img/day-crate62.png", CRATE62N: "img/night-crate62.png", CRATE63D: "img/day-crate63.png", CRATE63N: "img/night-crate63.png", CRATE64D: "img/day-crate64.png", CRATE64N: "img/night-crate64.png", CRATE65D: "img/day-crate65.png", CRATE65N: "img/night-crate65.png", CRATE66D: "img/day-crate66.png", CRATE66N: "img/night-crate66.png", CRATE67D: "img/day-crate67.png", CRATE67N: "img/night-crate67.png", CRATE68D: "img/day-crate68.png", CRATE68N: "img/night-crate68.png", CRATE69D: "img/day-crate69.png", CRATE69N: "img/night-crate69.png", CRATE70D: "img/day-crate70.png", CRATE70N: "img/night-crate70.png", CRATE71D: "img/day-crate71.png", CRATE71N: "img/night-crate71.png", CRATE72D: "img/day-crate72.png", CRATE72N: "img/night-crate72.png", DECORATION_0D: "img/day-herb0.png", DECORATION_1D: "img/day-herb1.png", DECORATION_2D: "img/day-herb2.png", DECORATION_3D: "img/day-herb3.png", DECORATION_4D: "img/day-herb4.png", DECORATION_5D: "img/day-herb5.png", DECORATION_6D: "img/day-herb6.png", DECORATION_7D: "img/day-herb7.png", DECORATION_8D: "img/day-herb8.png", DECORATION_9D: "img/day-herb9.png", DECORATION_10D: "img/day-herb10.png", DECORATION_11D: "img/day-herb11.png", DECORATION_12D: "img/day-herb12.png", DECORATION_13D: "img/day-herb13.png", DECORATION_14D: "img/day-herb14.png", DECORATION_15D: "img/day-herb15.png", DECORATION_16D: "img/day-shell0.png", DECORATION_17D: "img/day-shell1.png", DECORATION_18D: "img/day-shell2.png", DECORATION_19D: "img/day-leaf1.png", DECORATION_20D: "img/day-leaf2.png", DECORATION_21D: "img/day-leaf3.png", DECORATION_22D: "img/day-leaf4.png", DECORATION_23D: "img/day-leaf5.png", DECORATION_24D: "img/day-leaf6.png", DECORATION_25D: "img/day-leaf7.png", DECORATION_26D: "img/day-leaf8.png", DECORATION_27D: "img/day-rock0.png", DECORATION_28D: "img/day-rock1.png", DECORATION_29D: "img/day-rock2.png", DECORATION_30D: "img/day-rock3.png", DECORATION_31D: "img/day-rock4.png", DECORATION_32D: "img/day-rock5.png", DECORATION_33D: "img/day-rock6.png", DECORATION_34D: "img/day-rock7.png", DECORATION_35D: "img/day-rock8.png", DECORATION_36D: "img/day-rock9.png", DECORATION_37D: "img/day-rock10.png", DECORATION_38D: "img/day-rock11.png", DECORATION_39D: "img/day-rock12.png", DECORATION_40D: "img/day-rock13.png", DECORATION_41D: "img/day-flower1.png", DECORATION_42D: "img/day-flower2.png", DECORATION_43D: "img/day-flower3.png", DECORATION_44D: "img/day-flower4.png", DECORATION_45D: "img/day-flower5.png", DECORATION_46D: "img/day-flower6.png", DECORATION_47D: "img/day-flower7.png", DECORATION_48D: "img/day-flower8.png", DECORATION_49D: "img/day-flower9.png", DECORATION_50D: "img/day-herb16.png", DECORATION_51D: "img/day-herb17.png", DECORATION_52D: "img/day-herb18.png", DECORATION_53D: "img/day-herb19.png", DECORATION_54D: "img/day-herb20.png", DECORATION_55D: "img/day-herb21.png", DECORATION_0N: "img/night-herb0.png", DECORATION_1N: "img/night-herb1.png", DECORATION_2N: "img/night-herb2.png", DECORATION_3N: "img/night-herb3.png", DECORATION_4N: "img/night-herb4.png", DECORATION_5N: "img/night-herb5.png", DECORATION_6N: "img/night-herb6.png", DECORATION_7N: "img/night-herb7.png", DECORATION_8N: "img/night-herb8.png", DECORATION_9N: "img/night-herb9.png", DECORATION_10N: "img/night-herb10.png", DECORATION_11N: "img/night-herb11.png", DECORATION_12N: "img/night-herb12.png", DECORATION_13N: "img/night-herb13.png", DECORATION_14N: "img/night-herb14.png", DECORATION_15N: "img/night-herb15.png", DECORATION_16N: "img/night-shell0.png", DECORATION_17N: "img/night-shell1.png", DECORATION_18N: "img/night-shell2.png", DECORATION_19N: "img/night-leaf1.png", DECORATION_20N: "img/night-leaf2.png", DECORATION_21N: "img/night-leaf3.png", DECORATION_22N: "img/night-leaf4.png", DECORATION_23N: "img/night-leaf5.png", DECORATION_24N: "img/night-leaf6.png", DECORATION_25N: "img/night-leaf7.png", DECORATION_26N: "img/night-leaf8.png", DECORATION_27N: "img/night-rock0.png", DECORATION_28N: "img/night-rock1.png", DECORATION_29N: "img/night-rock2.png", DECORATION_30N: "img/night-rock3.png", DECORATION_31N: "img/night-rock4.png", DECORATION_32N: "img/night-rock5.png", DECORATION_33N: "img/night-rock6.png", DECORATION_34N: "img/night-rock7.png", DECORATION_35N: "img/night-rock8.png", DECORATION_36N: "img/night-rock9.png", DECORATION_37N: "img/night-rock10.png", DECORATION_38N: "img/night-rock11.png", DECORATION_39N: "img/night-rock12.png", DECORATION_40N: "img/night-rock13.png", DECORATION_41N: "img/night-flower1.png", DECORATION_42N: "img/night-flower2.png", DECORATION_43N: "img/night-flower3.png", DECORATION_44N: "img/night-flower4.png", DECORATION_45N: "img/night-flower5.png", DECORATION_46N: "img/night-flower6.png", DECORATION_47N: "img/night-flower7.png", DECORATION_48N: "img/night-flower8.png", DECORATION_49N: "img/night-flower9.png", DECORATION_50N: "img/night-herb16.png", DECORATION_51N: "img/night-herb17.png", DECORATION_52N: "img/night-herb18.png", DECORATION_53N: "img/night-herb19.png", DECORATION_54N: "img/night-herb20.png", DECORATION_55N: "img/night-herb21.png", DAY_RIVER_000_010_000: "img/day-river000-010-000.png", DAY_RIVER_000_010_010: "img/day-river000-010-010.png", DAY_RIVER_000_011_000: "img/day-river000-011-000.png", DAY_RIVER_000_011_010: "img/day-river000-011-010.png", DAY_RIVER_000_011_011: "img/day-river000-011-011.png", DAY_RIVER_000_110_000: "img/day-river000-110-000.png", DAY_RIVER_000_110_010: "img/day-river000-110-010.png", DAY_RIVER_000_110_110: "img/day-river000-110-110.png", DAY_RIVER_000_111_000: "img/day-river000-111-000.png", DAY_RIVER_000_111_010: "img/day-river000-111-010.png", DAY_RIVER_000_111_011: "img/day-river000-111-011.png", DAY_RIVER_000_111_110: "img/day-river000-111-110.png", DAY_RIVER_000_111_111: "img/day-river000-111-111.png", DAY_RIVER_010_010_000: "img/day-river010-010-000.png", DAY_RIVER_010_010_010: "img/day-river010-010-010.png", DAY_RIVER_010_011_000: "img/day-river010-011-000.png", DAY_RIVER_010_011_010: "img/day-river010-011-010.png", DAY_RIVER_010_011_011: "img/day-river010-011-011.png", DAY_RIVER_010_110_000: "img/day-river010-110-000.png", DAY_RIVER_010_110_010: "img/day-river010-110-010.png", DAY_RIVER_010_110_110: "img/day-river010-110-110.png", DAY_RIVER_010_111_000: "img/day-river010-111-000.png", DAY_RIVER_010_111_010: "img/day-river010-111-010.png", DAY_RIVER_010_111_011: "img/day-river010-111-011.png", DAY_RIVER_010_111_110: "img/day-river010-111-110.png", DAY_RIVER_010_111_111: "img/day-river010-111-111.png", DAY_RIVER_011_011_000: "img/day-river011-011-000.png", DAY_RIVER_011_011_010: "img/day-river011-011-010.png", DAY_RIVER_011_011_011: "img/day-river011-011-011.png", DAY_RIVER_011_111_000: "img/day-river011-111-000.png", DAY_RIVER_011_111_010: "img/day-river011-111-010.png", DAY_RIVER_011_111_011: "img/day-river011-111-011.png", DAY_RIVER_011_111_110: "img/day-river011-111-110.png", DAY_RIVER_011_111_111: "img/day-river011-111-111.png", DAY_RIVER_110_110_000: "img/day-river110-110-000.png", DAY_RIVER_110_110_010: "img/day-river110-110-010.png", DAY_RIVER_110_110_110: "img/day-river110-110-110.png", DAY_RIVER_110_111_000: "img/day-river110-111-000.png", DAY_RIVER_110_111_010: "img/day-river110-111-010.png", DAY_RIVER_110_111_011: "img/day-river110-111-011.png", DAY_RIVER_110_111_110: "img/day-river110-111-110.png", DAY_RIVER_110_111_111: "img/day-river110-111-111.png", DAY_RIVER_111_111_011: "img/day-river111-111-011.png", DAY_RIVER_111_111_110: "img/day-river111-111-110.png", DAY_RIVER_111_111_011: "img/day-river111-111-011.png", DAY_RIVER_111_111_000: "img/day-river111-111-000.png", DAY_RIVER_111_111_111: "img/day-river111-111-111.png", DAY_RIVER_111_111_010: "img/day-river111-111-010.png", NIGHT_RIVER_000_010_000: "img/night-river000-010-000.png", NIGHT_RIVER_000_010_010: "img/night-river000-010-010.png", NIGHT_RIVER_000_011_000: "img/night-river000-011-000.png", NIGHT_RIVER_000_011_010: "img/night-river000-011-010.png", NIGHT_RIVER_000_011_011: "img/night-river000-011-011.png", NIGHT_RIVER_000_110_000: "img/night-river000-110-000.png", NIGHT_RIVER_000_110_010: "img/night-river000-110-010.png", NIGHT_RIVER_000_110_110: "img/night-river000-110-110.png", NIGHT_RIVER_000_111_000: "img/night-river000-111-000.png", NIGHT_RIVER_000_111_010: "img/night-river000-111-010.png", NIGHT_RIVER_000_111_011: "img/night-river000-111-011.png", NIGHT_RIVER_000_111_110: "img/night-river000-111-110.png", NIGHT_RIVER_000_111_111: "img/night-river000-111-111.png", NIGHT_RIVER_010_010_000: "img/night-river010-010-000.png", NIGHT_RIVER_010_010_010: "img/night-river010-010-010.png", NIGHT_RIVER_010_011_000: "img/night-river010-011-000.png", NIGHT_RIVER_010_011_010: "img/night-river010-011-010.png", NIGHT_RIVER_010_011_011: "img/night-river010-011-011.png", NIGHT_RIVER_010_110_000: "img/night-river010-110-000.png", NIGHT_RIVER_010_110_010: "img/night-river010-110-010.png", NIGHT_RIVER_010_110_110: "img/night-river010-110-110.png", NIGHT_RIVER_010_111_000: "img/night-river010-111-000.png", NIGHT_RIVER_010_111_010: "img/night-river010-111-010.png", NIGHT_RIVER_010_111_011: "img/night-river010-111-011.png", NIGHT_RIVER_010_111_110: "img/night-river010-111-110.png", NIGHT_RIVER_010_111_111: "img/night-river010-111-111.png", NIGHT_RIVER_011_011_000: "img/night-river011-011-000.png", NIGHT_RIVER_011_011_010: "img/night-river011-011-010.png", NIGHT_RIVER_011_011_011: "img/night-river011-011-011.png", NIGHT_RIVER_011_111_000: "img/night-river011-111-000.png", NIGHT_RIVER_011_111_010: "img/night-river011-111-010.png", NIGHT_RIVER_011_111_011: "img/night-river011-111-011.png", NIGHT_RIVER_011_111_110: "img/night-river011-111-110.png", NIGHT_RIVER_011_111_111: "img/night-river011-111-111.png", NIGHT_RIVER_110_110_000: "img/night-river110-110-000.png", NIGHT_RIVER_110_110_010: "img/night-river110-110-010.png", NIGHT_RIVER_110_110_110: "img/night-river110-110-110.png", NIGHT_RIVER_110_111_000: "img/night-river110-111-000.png", NIGHT_RIVER_110_111_010: "img/night-river110-111-010.png", NIGHT_RIVER_110_111_011: "img/night-river110-111-011.png", NIGHT_RIVER_110_111_110: "img/night-river110-111-110.png", NIGHT_RIVER_110_111_111: "img/night-river110-111-111.png", NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png", NIGHT_RIVER_111_111_110: "img/night-river111-111-110.png", NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png", NIGHT_RIVER_111_111_000: "img/night-river111-111-000.png", NIGHT_RIVER_111_111_111: "img/night-river111-111-111.png", NIGHT_RIVER_111_111_010: "img/night-river111-111-010.png", DAY_RIVER_COMPO1: "img/day-pebblecompo1.png", DAY_RIVER_COMPO2: "img/day-pebblecompo2.png", DAY_RIVER_COMPO3: "img/day-pebblecompo3.png", DAY_RIVER_COMPO4: "img/day-pebblecompo4.png", DAY_RIVER_COMPO5: "img/day-pebblecompo5.png", DAY_RIVER_COMPO6: "img/day-pebblecompo6.png", DAY_RIVER_COMPO7: "img/day-pebblecompo7.png", DAY_RIVER_COMPO8: "img/day-pebblecompo8.png", DAY_RIVER_COMPO9: "img/day-pebblecompo9.png", DAY_RIVER_COMPO10: "img/day-pebblecompo10.png", DAY_RIVER_COMPO11: "img/day-pebblecompo11.png", DAY_RIVER_COMPO12: "img/day-pebblecompo12.png", DAY_RIVER_COMPO13: "img/day-pebblecompo13.png", DAY_RIVER_COMPO14: "img/day-pebblecompo14.png", DAY_RIVER_COMPO15: "img/day-pebblecompo15.png", DAY_RIVER_COMPO16: "img/day-pebblecompo16.png", DAY_RIVER_COMPO17: "img/day-pebblecompo17.png", DAY_RIVER_COMPO18: "img/day-pebblecompo18.png", DAY_RIVER_COMPO19: "img/day-pebblecompo19.png", DAY_RIVER_COMPO20: "img/day-pebblecompo20.png", DAY_RIVER_COMPO21: "img/day-pebblecompo21.png", DAY_RIVER_COMPO22: "img/day-pebblecompo22.png", DAY_RIVER_COMPO23: "img/day-pebblecompo23.png", DAY_RIVER_COMPO24: "img/day-pebblecompo24.png", DAY_RIVER_COMPO25: "img/day-pebblecompo25.png", DAY_RIVER_COMPO26: "img/day-pebblecompo26.png", DAY_RIVER_COMPO27: "img/day-pebblecompo27.png", DAY_RIVER_COMPO28: "img/day-pebblecompo28.png", NIGHT_RIVER_COMPO1: "img/night-pebblecompo1.png", NIGHT_RIVER_COMPO2: "img/night-pebblecompo2.png", NIGHT_RIVER_COMPO3: "img/night-pebblecompo3.png", NIGHT_RIVER_COMPO4: "img/night-pebblecompo4.png", NIGHT_RIVER_COMPO5: "img/night-pebblecompo5.png", NIGHT_RIVER_COMPO6: "img/night-pebblecompo6.png", NIGHT_RIVER_COMPO7: "img/night-pebblecompo7.png", NIGHT_RIVER_COMPO8: "img/night-pebblecompo8.png", NIGHT_RIVER_COMPO9: "img/night-pebblecompo9.png", NIGHT_RIVER_COMPO10: "img/night-pebblecompo10.png", NIGHT_RIVER_COMPO11: "img/night-pebblecompo11.png", NIGHT_RIVER_COMPO12: "img/night-pebblecompo12.png", NIGHT_RIVER_COMPO13: "img/night-pebblecompo13.png", NIGHT_RIVER_COMPO14: "img/night-pebblecompo14.png", NIGHT_RIVER_COMPO15: "img/night-pebblecompo15.png", NIGHT_RIVER_COMPO16: "img/night-pebblecompo16.png", NIGHT_RIVER_COMPO17: "img/night-pebblecompo17.png", NIGHT_RIVER_COMPO18: "img/night-pebblecompo18.png", NIGHT_RIVER_COMPO19: "img/night-pebblecompo19.png", NIGHT_RIVER_COMPO20: "img/night-pebblecompo20.png", NIGHT_RIVER_COMPO21: "img/night-pebblecompo21.png", NIGHT_RIVER_COMPO22: "img/night-pebblecompo22.png", NIGHT_RIVER_COMPO23: "img/night-pebblecompo23.png", NIGHT_RIVER_COMPO24: "img/night-pebblecompo24.png", NIGHT_RIVER_COMPO25: "img/night-pebblecompo25.png", NIGHT_RIVER_COMPO26: "img/night-pebblecompo26.png", NIGHT_RIVER_COMPO27: "img/night-pebblecompo27.png", NIGHT_RIVER_COMPO28: "img/night-pebblecompo28.png", BABY_MAMMOTHD: "img/day-baby-mammoth.png", BABY_MAMMOTH_TAMEDD: "img/day-baby-mammoth-tamed.png", BABY_MAMMOTH_ATTACKD: "img/day-baby-mammoth-angry.png", BABY_MAMMOTHN: "img/night-baby-mammoth.png", BABY_MAMMOTH_TAMEDN: "img/night-baby-mammoth-tamed.png", BABY_MAMMOTH_ATTACKN: "img/night-baby-mammoth-angry.png", INV_BABY_MAMMOTH_OUT: "img/inv-mammoth-out.png", INV_BABY_MAMMOTH_IN: "img/inv-mammoth-in.png", INV_BABY_MAMMOTH_CLICK: "img/inv-mammoth-click.png", HURT_BABY_MAMMOTH: "img/hurt-baby-mammoth.png", BABY_MAMMOTH_STEP: "img/baby-mammoth-step.png", FLOWER_HATD: "img/day-flower-hat.png", FLOWER_HATN: "img/night-flower-hat.png", INV_FLOWER_HAT_OUT: "img/inv-flower-hat-out.png", INV_FLOWER_HAT_IN: "img/inv-flower-hat-in.png", INV_FLOWER_HAT_CLICK: "img/inv-flower-hat-click.png", FUR_HATD: "img/day-fur-hat.png", FUR_HATN: "img/night-fur-hat.png", INV_FUR_HAT_OUT: "img/inv-fur-hat-out.png", INV_FUR_HAT_IN: "img/inv-fur-hat-in.png", INV_FUR_HAT_CLICK: "img/inv-fur-hat-click.png", MAMMOTHD: "img/day-mammoth.png", MAMMOTHN: "img/night-mammoth.png", HURT_MAMMOTH: "img/hurt-mammoth.png", INV_FUR_MAMMOTH_OUT: "img/inv-mammoth-fur-out.png", INV_FUR_MAMMOTH_IN: "img/inv-mammoth-fur-in.png", INV_FUR_MAMMOTH_CLICK: "img/inv-mammoth-fur-click.png", INV_WOOD_BOW_OUT: "img/inv-wood-bow-out.png", INV_WOOD_BOW_IN: "img/inv-wood-bow-in.png", INV_WOOD_BOW_CLICK: "img/inv-wood-bow-click.png", INV_WOOD_ARROW_OUT: "img/inv-wood-arrow-out.png", INV_WOOD_ARROW_IN: "img/inv-wood-arrow-in.png", INV_WOOD_ARROW_CLICK: "img/inv-wood-arrow-click.png", WOOD_BOWD: "img/day-wood-bow2.png", WOOD_BOWN: "img/night-wood-bow2.png", WOOD_ARROWD: "img/day-wood-arrow.png", WOOD_ARROWN: "img/night-wood-arrow.png", INV_STONE_BOW_OUT: "img/inv-stone-bow-out.png", INV_STONE_BOW_IN: "img/inv-stone-bow-in.png", INV_STONE_BOW_CLICK: "img/inv-stone-bow-click.png", INV_STONE_ARROW_OUT: "img/inv-stone-arrow-out.png", INV_STONE_ARROW_IN: "img/inv-stone-arrow-in.png", INV_STONE_ARROW_CLICK: "img/inv-stone-arrow-click.png", STONE_BOWD: "img/day-stone-bow.png", STONE_BOWN: "img/night-stone-bow.png", STONE_ARROWD: "img/day-stone-arrow.png", STONE_ARROWN: "img/night-stone-arrow.png", INV_GOLD_BOW_OUT: "img/inv-gold-bow-out.png", INV_GOLD_BOW_IN: "img/inv-gold-bow-in.png", INV_GOLD_BOW_CLICK: "img/inv-gold-bow-click.png", INV_GOLD_ARROW_OUT: "img/inv-gold-arrow-out.png", INV_GOLD_ARROW_IN: "img/inv-gold-arrow-in.png", INV_GOLD_ARROW_CLICK: "img/inv-gold-arrow-click.png", GOLD_BOWD: "img/day-gold-bow.png", GOLD_BOWN: "img/night-gold-bow.png", GOLD_ARROWD: "img/day-gold-arrow.png", GOLD_ARROWN: "img/night-gold-arrow.png", INV_DIAMOND_BOW_OUT: "img/inv-diamond-bow-out.png", INV_DIAMOND_BOW_IN: "img/inv-diamond-bow-in.png", INV_DIAMOND_BOW_CLICK: "img/inv-diamond-bow-click.png", INV_DIAMOND_ARROW_OUT: "img/inv-diamond-arrow-out.png", INV_DIAMOND_ARROW_IN: "img/inv-diamond-arrow-in.png", INV_DIAMOND_ARROW_CLICK: "img/inv-diamond-arrow-click.png", DIAMOND_BOWD: "img/day-diamond-bow.png", DIAMOND_BOWN: "img/night-diamond-bow.png", DIAMOND_ARROWD: "img/day-diamond-arrow.png", DIAMOND_ARROWN: "img/night-diamond-arrow.png", INV_AMETHYST_BOW_OUT: "img/inv-amethyst-bow-out.png", INV_AMETHYST_BOW_IN: "img/inv-amethyst-bow-in.png", INV_AMETHYST_BOW_CLICK: "img/inv-amethyst-bow-click.png", INV_AMETHYST_ARROW_OUT: "img/inv-amethyst-arrow-out.png", INV_AMETHYST_ARROW_IN: "img/inv-amethyst-arrow-in.png", INV_AMETHYST_ARROW_CLICK: "img/inv-amethyst-arrow-click.png", AMETHYST_BOWD: "img/day-amethyst-bow.png", AMETHYST_BOWN: "img/night-amethyst-bow.png", AMETHYST_ARROWD: "img/day-amethyst-arrow.png", AMETHYST_ARROWN: "img/night-amethyst-arrow.png", INV_DRAGON_BOW_OUT: "img/inv-dragon-bow-out.png", INV_DRAGON_BOW_IN: "img/inv-dragon-bow-in.png", INV_DRAGON_BOW_CLICK: "img/inv-dragon-bow-click.png", INV_DRAGON_ARROW_OUT: "img/inv-dragon-arrow-out.png", INV_DRAGON_ARROW_IN: "img/inv-dragon-arrow-in.png", INV_DRAGON_ARROW_CLICK: "img/inv-dragon-arrow-click.png", DRAGON_BOWD: "img/day-dragon-bow.png", DRAGON_BOWN: "img/night-dragon-bow.png", DRAGON_ARROWD: "img/day-dragon-arrow.png", DRAGON_ARROWN: "img/night-dragon-arrow.png", INV_REIDITE_BOW_OUT: "img/inv-reidite-bow-out.png", INV_REIDITE_BOW_IN: "img/inv-reidite-bow-in.png", INV_REIDITE_BOW_CLICK: "img/inv-reidite-bow-click.png", INV_REIDITE_ARROW_OUT: "img/inv-reidite-arrow-out.png", INV_REIDITE_ARROW_IN: "img/inv-reidite-arrow-in.png", INV_REIDITE_ARROW_CLICK: "img/inv-reidite-arrow-click.png", REIDITE_BOWD: "img/day-reidite-bow.png", REIDITE_BOWN: "img/night-reidite-bow.png", REIDITE_ARROWD: "img/day-reidite-arrow.png", REIDITE_ARROWN: "img/night-reidite-arrow.png", BANDAGE_ACTIVATED: "img/bandage-activated.png", AUTO_FEED: "img/auto-feed.png", STOP_REGENERATION_BLIZZARD: "img/stop-regeneration.png", STOP_REGENERATION: "img/stop-regeneration2.png", WOOD_TOWERD: "img/day-wood-platform.png", WOOD_TOWERN: "img/night-wood-platform.png", INV_WOOD_TOWER_IN: "img/inv-wood-platform-in.png", INV_WOOD_TOWER_OUT: "img/inv-wood-platform-out.png", INV_WOOD_TOWER_CLICK: "img/inv-wood-platform-click.png", WOOD_SHIELDD: "img/day-wood-shield.png", WOOD_SHIELDN: "img/night-wood-shield.png", STONE_SHIELDD: "img/day-stone-shield.png", STONE_SHIELDN: "img/night-stone-shield.png", GOLD_SHIELDD: "img/day-gold-shield.png", GOLD_SHIELDN: "img/night-gold-shield.png", DIAMOND_SHIELDD: "img/day-diamond-shield.png", DIAMOND_SHIELDN: "img/night-diamond-shield.png", AMETHYST_SHIELDD: "img/day-amethyst-shield.png", AMETHYST_SHIELDN: "img/night-amethyst-shield.png", REIDITE_SHIELDD: "img/day-reidite-shield.png", REIDITE_SHIELDN: "img/night-reidite-shield.png", INV_WOOD_SHIELD_IN: "img/inv-wood-shield-in.png", INV_WOOD_SHIELD_OUT: "img/inv-wood-shield-out.png", INV_WOOD_SHIELD_CLICK: "img/inv-wood-shield-click.png", INV_STONE_SHIELD_IN: "img/inv-stone-shield-in.png", INV_STONE_SHIELD_OUT: "img/inv-stone-shield-out.png", INV_STONE_SHIELD_CLICK: "img/inv-stone-shield-click.png", INV_GOLD_SHIELD_IN: "img/inv-gold-shield-in.png", INV_GOLD_SHIELD_OUT: "img/inv-gold-shield-out.png", INV_GOLD_SHIELD_CLICK: "img/inv-gold-shield-click.png", INV_DIAMOND_SHIELD_IN: "img/inv-diamond-shield-in.png", INV_DIAMOND_SHIELD_OUT: "img/inv-diamond-shield-out.png", INV_DIAMOND_SHIELD_CLICK: "img/inv-diamond-shield-click.png", INV_AMETHYST_SHIELD_IN: "img/inv-amethyst-shield-in.png", INV_AMETHYST_SHIELD_OUT: "img/inv-amethyst-shield-out.png", INV_AMETHYST_SHIELD_CLICK: "img/inv-amethyst-shield-click.png", INV_REIDITE_SHIELD_IN: "img/inv-reidite-shield-in.png", INV_REIDITE_SHIELD_OUT: "img/inv-reidite-shield-out.png", INV_REIDITE_SHIELD_CLICK: "img/inv-reidite-shield-click.png", MACHETED: "img/day-machete.png", MACHETEN: "img/night-machete.png", INV_MACHETE_IN: "img/inv-machete-in.png", INV_MACHETE_OUT: "img/inv-machete-out.png", INV_MACHETE_CLICK: "img/inv-machete-click.png"};
WINDOW12 = [{}];
WINDOW12[0].stringify = function (ahnisty) {
  var syreniti = new Uint8Array(new ArrayBuffer(ahnisty.length));
  for (var latangie = 0; latangie < ahnisty.length; latangie++) {
    syreniti[latangie] = ahnisty[latangie];
  }
  return syreniti;
};
DUMP_IMAGES = {};
PREPROC_IMAGES = {};
for (var i in IMAGES) DUMP_IMAGES[i] = IMAGES[i];
sprite = [];
RARITY = {};
RARITY.FREE = 0;
RARITY.WOOD = 1;
RARITY.STONE = 2;
RARITY.GOLD = 3;
RARITY.DIAMOND = 4;
RARITY.AMETHYST = 5;
RARITY.REIDITE = 6;
RARITY.SPECIAL = 7;
RARITY.LEVEL = 8;
COSMETICS = {};
MINIMAP_UTILS = [];
find_cosmetics_per_id = function (jyair, celaya) {
  for (var judie = 0; judie < jyair.length; judie++) {
    if (jyair[judie].id === celaya) {
      return judie;
    }
  }
  return -1;
};
var MINIMAP_LIST = [];
function render_type_resources_minimap(gwendalynn, katanya) {
  for (var shakeyia = 0; shakeyia < MINIMAP_LIST.length; shakeyia += katanya) {
    var leemichael = MINIMAP_LIST[shakeyia];
    if (leemichael[0] === gwendalynn) {
      render_resource_minimap(leemichael[0], leemichael[1], leemichael[2], leemichael[3]);
    }
  }
}
function render_all_resources_minimap() {
  render_type_resources_minimap("isl", 1);
  render_type_resources_minimap("wtb", 20);
  render_type_resources_minimap("la", 1);
  render_type_resources_minimap("c", 1);
  render_type_resources_minimap("s", 1);
  render_type_resources_minimap("f", 1);
  render_type_resources_minimap("p", 1);
  render_type_resources_minimap("g", 1);
  render_type_resources_minimap("d", 1);
  render_type_resources_minimap("a", 1);
  render_type_resources_minimap("re", 1);
  render_type_resources_minimap("m", 1);
  MINIMAP_LIST = [];
}
function add_resource_minimap(gaibriel, kahleil, darric, carisse) {
  MINIMAP_LIST.push([gaibriel, kahleil, darric, carisse]);
}
function render_resource_minimap(tenishia, kyairah, saragrace, elisabeta) {
  var sirenia = MINIMAP_UTILS[tenishia];
  if (sirenia === undefined) {
    return;
  }
  for (var cordy = 0; cordy < 2; cordy++) {
    var zharya = sirenia[kyairah][cordy];
    var edder = 193 * elisabeta / world.nw;
    var jannina = 193 * saragrace / world.nh;
    var maccabee = zharya.width / 3.5;
    var rileyn = zharya.height / 3.5;
    sprite[SPRITE.MINIMAP_CTX][cordy].drawImage(zharya, edder - maccabee / 2, jannina - rileyn / 2, maccabee, rileyn);
    edder = 600 * elisabeta / world.nw;
    jannina = 600 * saragrace / world.nh;
    maccabee = zharya.width / 1.5;
    rileyn = zharya.height / 1.5;
    sprite[SPRITE.BIGMAP_CTX][cordy].drawImage(zharya, edder - maccabee / 2, jannina - rileyn / 2, maccabee, rileyn);
  }
}
render_minimap = function () {
  for (var eelis = 0; eelis < 2; eelis++) {
    sprite[SPRITE.MINIMAP_CTX][eelis].clearRect(0, 0, 193, 193);
    sprite[SPRITE.MINIMAP_CTX][eelis].drawImage(MINIMAP_UTILS.MAP[eelis], 0, 0, 193, 193);
    sprite[SPRITE.BIGMAP_CTX][eelis].clearRect(0, 0, 600, 600);
    sprite[SPRITE.BIGMAP_CTX][eelis].drawImage(MINIMAP_UTILS.MAP[eelis], 0, 0, 600, 600);
    for (var khyier = world.biomes.length - 1; khyier >= 0; khyier--) {
      var efua = world.biomes[khyier];
      var jaclene = 193 * efua.x1 / (100 * world.nw);
      var guyann = 193 * efua.y1 / (100 * world.nh);
      var danayara = 193 * efua.w / (100 * world.nw);
      var valan = 193 * efua.h / (100 * world.nh);
      var jalin = 600 * efua.x1 / (100 * world.nw);
      var amauris = 600 * efua.y1 / (100 * world.nh);
      var wylla = 600 * efua.w / (100 * world.nw);
      var everleaner = 600 * efua.h / (100 * world.nh);
      efua.t === world.BIOME_FOREST && (sprite[SPRITE.MINIMAP_CTX][eelis].drawImage(MINIMAP_UTILS.FOREST[eelis], jaclene, guyann, danayara, valan), sprite[SPRITE.BIGMAP_CTX][eelis].drawImage(MINIMAP_UTILS.FOREST[eelis], jalin, amauris, wylla, everleaner));
      efua.t === world.BIOME_WINTER && (sprite[SPRITE.MINIMAP_CTX][eelis].drawImage(MINIMAP_UTILS.WINTER[eelis], jaclene, guyann, danayara, valan), sprite[SPRITE.BIGMAP_CTX][eelis].drawImage(MINIMAP_UTILS.WINTER[eelis], jalin, amauris, wylla, everleaner));
      efua.t === world.BIOME_LAVA && (sprite[SPRITE.MINIMAP_CTX][eelis].drawImage(MINIMAP_UTILS.LAVA[eelis], jaclene, guyann, danayara, valan), sprite[SPRITE.BIGMAP_CTX][eelis].drawImage(MINIMAP_UTILS.LAVA[eelis], jalin, amauris, wylla, everleaner));
      efua.t === world.BIOME_DRAGON && (sprite[SPRITE.MINIMAP_CTX][eelis].drawImage(MINIMAP_UTILS.CAVE[eelis], jaclene, guyann, danayara, valan), sprite[SPRITE.BIGMAP_CTX][eelis].drawImage(MINIMAP_UTILS.CAVE[eelis], jalin, amauris, wylla, everleaner));
      efua.t === world.BIOME_DESERT && (sprite[SPRITE.MINIMAP_CTX][eelis].drawImage(MINIMAP_UTILS.DESERT[eelis], jaclene, guyann, danayara, valan), sprite[SPRITE.BIGMAP_CTX][eelis].drawImage(MINIMAP_UTILS.DESERT[eelis], jalin, amauris, wylla, everleaner));
    }
  }
};
render_cosmetics = function () {
  COSMETICS = {SKIN: [{id: 0, day: IMAGES.PLAYER0D, night: IMAGES.PLAYER0N, dayHand: IMAGES.HAND0D, nightHand: IMAGES.HAND0N, rarity: RARITY.FREE, author: "Starve.io", name: "Starver"}, {id: 3, day: IMAGES.PLAYER3D, night: IMAGES.PLAYER3N, dayHand: IMAGES.HAND3D, nightHand: IMAGES.HAND3N, rarity: RARITY.FREE, author: "Starve.io", name: "Angry"}, {id: 2, day: IMAGES.PLAYER2D, night: IMAGES.PLAYER2N, dayHand: IMAGES.HAND2D, nightHand: IMAGES.HAND2N, rarity: RARITY.FREE, author: "Starve.io", name: "Sad"}, {id: 9, day: IMAGES.PLAYER9D, night: IMAGES.PLAYER9N, dayHand: IMAGES.HAND9D, nightHand: IMAGES.HAND9N, rarity: RARITY.FREE, author: "Starve.io", name: "Happy 1"}, {id: 1, day: IMAGES.PLAYER1D, night: IMAGES.PLAYER1N, dayHand: IMAGES.HAND1D, nightHand: IMAGES.HAND1N, rarity: RARITY.WOOD, author: "Starve.io", name: "What?"}, {id: 4, day: IMAGES.PLAYER4D, night: IMAGES.PLAYER4N, dayHand: IMAGES.HAND4D, nightHand: IMAGES.HAND4N, rarity: RARITY.WOOD, author: "Starve.io", name: "Suspicious"}, {id: 5, day: IMAGES.PLAYER5D, night: IMAGES.PLAYER5N, dayHand: IMAGES.HAND5D, nightHand: IMAGES.HAND5N, rarity: RARITY.WOOD, author: "Starve.io", name: "Scar"}, {id: 6, day: IMAGES.PLAYER6D, night: IMAGES.PLAYER6N, dayHand: IMAGES.HAND6D, nightHand: IMAGES.HAND6N, rarity: RARITY.WOOD, author: "Starve.io", name: "In Trouble"}, {id: 7, day: IMAGES.PLAYER7D, night: IMAGES.PLAYER7N, dayHand: IMAGES.HAND7D, nightHand: IMAGES.HAND7N, rarity: RARITY.WOOD, author: "Starve.io", name: "Cute"}, {id: 8, day: IMAGES.PLAYER8D, night: IMAGES.PLAYER8N, dayHand: IMAGES.HAND8D, nightHand: IMAGES.HAND8N, rarity: RARITY.WOOD, author: "Starve.io", name: "Bored 1"}, {id: 10, day: IMAGES.PLAYER10D, night: IMAGES.PLAYER10N, dayHand: IMAGES.HAND10D, nightHand: IMAGES.HAND10N, rarity: RARITY.WOOD, author: "Starve.io", name: "Happy 2"}, {id: 11, day: IMAGES.PLAYER11D, night: IMAGES.PLAYER11N, dayHand: IMAGES.HAND11D, nightHand: IMAGES.HAND11N, rarity: RARITY.WOOD, author: "Starve.io", name: "Crazy"}, {id: 12, day: IMAGES.PLAYER12D, night: IMAGES.PLAYER12N, dayHand: IMAGES.HAND12D, nightHand: IMAGES.HAND12N, rarity: RARITY.WOOD, author: "Starve.io", name: "Happy 3"}, {id: 13, day: IMAGES.PLAYER13D, night: IMAGES.PLAYER13N, dayHand: IMAGES.HAND13D, nightHand: IMAGES.HAND13N, rarity: RARITY.WOOD, author: "Starve.io", name: "Very Cute"}, {id: 14, day: IMAGES.PLAYER14D, night: IMAGES.PLAYER14N, dayHand: IMAGES.HAND14D, nightHand: IMAGES.HAND14N, rarity: RARITY.WOOD, author: "Starve.io", name: "Curious"}, {id: 15, day: IMAGES.PLAYER15D, night: IMAGES.PLAYER15N, dayHand: IMAGES.HAND15D, nightHand: IMAGES.HAND15N, rarity: RARITY.WOOD, author: "Starve.io", name: "Bored 2"}, {id: 16, day: IMAGES.PLAYER16D, night: IMAGES.PLAYER16N, dayHand: IMAGES.HAND16D, nightHand: IMAGES.HAND16N, rarity: RARITY.WOOD, author: "Starve.io", name: "Happy 4"}, {id: 17, day: IMAGES.PLAYER17D, night: IMAGES.PLAYER17N, dayHand: IMAGES.HAND17D, nightHand: IMAGES.HAND17N, rarity: RARITY.WOOD, author: "Starve.io", name: "Scar 2"}, {id: 18, day: IMAGES.PLAYER18D, night: IMAGES.PLAYER18N, dayHand: IMAGES.HAND18D, nightHand: IMAGES.HAND18N, rarity: RARITY.WOOD, author: "Starve.io", name: "Sick"}, {id: 19, day: IMAGES.PLAYER19D, night: IMAGES.PLAYER19N, dayHand: IMAGES.HAND19D, nightHand: IMAGES.HAND19N, rarity: RARITY.WOOD, author: "Starve.io", name: "Somnambule"}, {id: 24, day: IMAGES.SKIN7D, night: IMAGES.SKIN7N, dayHand: IMAGES.HAND_SKIN7D, nightHand: IMAGES.HAND_SKIN7N, rarity: RARITY.WOOD, author: "Pixelbitie", name: "Feel Bad"}, {id: 23, day: IMAGES.SKIN0D, night: IMAGES.SKIN0N, dayHand: IMAGES.HAND_SKIN0D, nightHand: IMAGES.HAND_SKIN0N, rarity: RARITY.WOOD, author: "Pixelbitie", name: "Mmmh."}, {id: 103, day: IMAGES.SKIN78D, night: IMAGES.SKIN78N, dayHand: IMAGES.HAND_SKIN78D, nightHand: IMAGES.HAND_SKIN78N, rarity: RARITY.WOOD, author: "pizza wa", name: "Panic"}, {id: 105, day: IMAGES.SKIN80D, night: IMAGES.SKIN80N, dayHand: IMAGES.HAND_SKIN80D, nightHand: IMAGES.HAND_SKIN80N, rarity: RARITY.WOOD, author: "pizza wa", name: "Hypnotic"}, {id: 106, day: IMAGES.SKIN81D, night: IMAGES.SKIN81N, dayHand: IMAGES.HAND_SKIN81D, nightHand: IMAGES.HAND_SKIN81N, rarity: RARITY.WOOD, author: "pizza wa", name: "Stars in the eyes"}, {id: 104, day: IMAGES.SKIN79D, night: IMAGES.SKIN79N, dayHand: IMAGES.HAND_SKIN79D, nightHand: IMAGES.HAND_SKIN79N, rarity: RARITY.STONE, author: "pizza wa", name: "Scared at night"}, {id: 20, day: IMAGES.SKIN_VAMPIRED, night: IMAGES.SKIN_VAMPIREN, dayHand: IMAGES.HAND_VAMPIRED, nightHand: IMAGES.HAND_VAMPIREN, rarity: RARITY.STONE, author: "Starve.io", name: "Vampire"}, {id: 21, day: IMAGES.SKIN_ZOMBIED, night: IMAGES.SKIN_ZOMBIEN, dayHand: IMAGES.HAND_ZOMBIED, nightHand: IMAGES.HAND_ZOMBIEN, rarity: RARITY.STONE, author: "Starve.io", name: "Zombie"}, {id: 22, day: IMAGES.SKIN_DEVASTD, night: IMAGES.SKIN_DEVASTN, dayHand: IMAGES.HAND_DEVASTD, nightHand: IMAGES.HAND_DEVASTN, rarity: RARITY.STONE, author: "Pixelbitie", name: "Devaster"}, {id: 116, day: IMAGES.SKIN91D, night: IMAGES.SKIN91N, dayHand: IMAGES.HAND_SKIN91D, nightHand: IMAGES.HAND_SKIN91N, rarity: RARITY.STONE, author: "Fukss", name: "Dead Devaster"}, {id: 27, day: IMAGES.SKIN19D, night: IMAGES.SKIN19N, dayHand: IMAGES.HAND_SKIN19D, nightHand: IMAGES.HAND_SKIN19N, rarity: RARITY.STONE, author: "Winter", name: "Cactus"}, {id: 28, day: IMAGES.SKIN20D, night: IMAGES.SKIN20N, dayHand: IMAGES.HAND_SKIN20D, nightHand: IMAGES.HAND_SKIN20N, rarity: RARITY.STONE, author: "pizza wa", name: "Bee"}, {id: 49, day: IMAGES.SKIN24D, night: IMAGES.SKIN24N, dayHand: IMAGES.HAND_SKIN24D, nightHand: IMAGES.HAND_SKIN24N, rarity: RARITY.STONE, author: "Taco4Life", name: "Camo Skin"}, {id: 58, day: IMAGES.SKIN34D, night: IMAGES.SKIN34N, dayHand: IMAGES.HAND_SKIN34D, nightHand: IMAGES.HAND_SKIN34N, rarity: RARITY.STONE, author: "Starve.io", name: "Blue Limax Skin"}, {id: 59, day: IMAGES.SKIN33D, night: IMAGES.SKIN33N, dayHand: IMAGES.HAND_SKIN33D, nightHand: IMAGES.HAND_SKIN33N, rarity: RARITY.STONE, author: "Starve.io", name: "Red Limax Skin"}, {id: 94, day: IMAGES.SKIN69D, night: IMAGES.SKIN69N, dayHand: IMAGES.HAND_SKIN69D, nightHand: IMAGES.HAND_SKIN69N, rarity: RARITY.STONE, author: "Taco4Life", name: "Mr. Pumpkin"}, {id: 109, day: IMAGES.SKIN84D, night: IMAGES.SKIN84N, dayHand: IMAGES.HAND_SKIN84D, nightHand: IMAGES.HAND_SKIN84N, rarity: RARITY.STONE, author: "pizza wa", name: "Wood"}, {id: 114, day: IMAGES.SKIN89D, night: IMAGES.SKIN89N, dayHand: IMAGES.HAND_SKIN89D, nightHand: IMAGES.HAND_SKIN89N, rarity: RARITY.STONE, author: "pizza wa", name: "Zebra"}, {id: 120, day: IMAGES.SKIN95D, night: IMAGES.SKIN95N, dayHand: IMAGES.HAND_SKIN95D, nightHand: IMAGES.HAND_SKIN95N, rarity: RARITY.STONE, author: "CrysTal", name: "Tiger"}, {id: 134, day: IMAGES.SKIN109D, night: IMAGES.SKIN109N, dayHand: IMAGES.HAND_SKIN109D, nightHand: IMAGES.HAND_SKIN109N, rarity: RARITY.STONE, author: "Franchestcreator", name: "Day or Night"}, {id: 135, day: IMAGES.SKIN110D, night: IMAGES.SKIN110N, dayHand: IMAGES.HAND_SKIN110D, nightHand: IMAGES.HAND_SKIN110N, rarity: RARITY.STONE, author: "Poinet", name: "Square Starver"}, {id: 136, day: IMAGES.SKIN111D, night: IMAGES.SKIN111N, dayHand: IMAGES.HAND_SKIN111D, nightHand: IMAGES.HAND_SKIN111N, rarity: RARITY.STONE, author: "Starve.io", name: "Voodoo Doll"}, {id: 137, day: IMAGES.SKIN112D, night: IMAGES.SKIN112N, dayHand: IMAGES.HAND_SKIN112D, nightHand: IMAGES.HAND_SKIN112N, rarity: RARITY.STONE, author: "Starve.io", name: "Frankenstein"}, {id: 138, day: IMAGES.SKIN114D, night: IMAGES.SKIN114N, dayHand: IMAGES.HAND_SKIN114D, nightHand: IMAGES.HAND_SKIN114N, rarity: RARITY.STONE, author: "Starve.io", name: "Old Mummy"}, {id: 139, day: IMAGES.SKIN115D, night: IMAGES.SKIN115N, dayHand: IMAGES.HAND_SKIN115D, nightHand: IMAGES.HAND_SKIN115N, rarity: RARITY.STONE, author: "Starve.io", name: "Werewolf"}, {id: 140, day: IMAGES.SKIN116D, night: IMAGES.SKIN116N, dayHand: IMAGES.HAND_SKIN116D, nightHand: IMAGES.HAND_SKIN116N, rarity: RARITY.STONE, author: "Starve.io", name: "Old Cthulhu"}, {id: 141, day: IMAGES.SKIN117D, night: IMAGES.SKIN117N, dayHand: IMAGES.HAND_SKIN117D, nightHand: IMAGES.HAND_SKIN117N, rarity: RARITY.STONE, author: "Starve.io", name: "Sea Man"}, {id: 142, day: IMAGES.SKIN118D, night: IMAGES.SKIN118N, dayHand: IMAGES.HAND_SKIN118D, nightHand: IMAGES.HAND_SKIN118N, rarity: RARITY.STONE, author: "Starve.io", name: "Old Pumpkin"}, {id: 148, day: IMAGES.SKIN124D, night: IMAGES.SKIN124N, dayHand: IMAGES.HAND_SKIN124D, nightHand: IMAGES.HAND_SKIN124N, rarity: RARITY.STONE, author: "Starve.io", name: "Old Snowman"}, {id: 149, day: IMAGES.SKIN125D, night: IMAGES.SKIN125N, dayHand: IMAGES.HAND_SKIN125D, nightHand: IMAGES.HAND_SKIN125N, rarity: RARITY.STONE, author: "Starve.io", name: "Old Christmas Tree Man"}, {id: 150, day: IMAGES.SKIN126D, night: IMAGES.SKIN126N, dayHand: IMAGES.HAND_SKIN126D, nightHand: IMAGES.HAND_SKIN126N, rarity: RARITY.STONE, author: "Starve.io", name: "Old Mrs Bell"}, {id: 151, day: IMAGES.SKIN127D, night: IMAGES.SKIN127N, dayHand: IMAGES.HAND_SKIN127D, nightHand: IMAGES.HAND_SKIN127N, rarity: RARITY.STONE, author: "Starve.io", name: "Old Elfy"}, {id: 152, day: IMAGES.SKIN128D, night: IMAGES.SKIN128N, dayHand: IMAGES.HAND_SKIN128D, nightHand: IMAGES.HAND_SKIN128N, rarity: RARITY.STONE, author: "Starve.io", name: "Old Mr Present"}, {id: 153, day: IMAGES.SKIN129D, night: IMAGES.SKIN129N, dayHand: IMAGES.HAND_SKIN129D, nightHand: IMAGES.HAND_SKIN129N, rarity: RARITY.STONE, author: "Starve.io", name: "My Dear Old Deer"}, {id: 154, day: IMAGES.SKIN130D, night: IMAGES.SKIN130N, dayHand: IMAGES.HAND_SKIN130D, nightHand: IMAGES.HAND_SKIN130N, rarity: RARITY.STONE, author: "Starve.io", name: "Mr Angel"}, {id: 155, day: IMAGES.SKIN131D, night: IMAGES.SKIN131N, dayHand: IMAGES.HAND_SKIN131D, nightHand: IMAGES.HAND_SKIN131N, rarity: RARITY.STONE, author: "Starve.io", name: "Mr Ice Cube"}, {id: 156, day: IMAGES.SKIN132D, night: IMAGES.SKIN132N, dayHand: IMAGES.HAND_SKIN132D, nightHand: IMAGES.HAND_SKIN132N, rarity: RARITY.STONE, author: "Starve.io", name: "Mr Snowman"}, {id: 159, day: IMAGES.SKIN135D, night: IMAGES.SKIN135N, dayHand: IMAGES.HAND_SKIN135D, nightHand: IMAGES.HAND_SKIN135N, rarity: RARITY.STONE, author: "CrysTal", name: "Crystal Sky Skin"}, {id: 167, day: IMAGES.SKIN143D, night: IMAGES.SKIN143N, dayHand: IMAGES.HAND_SKIN143D, nightHand: IMAGES.HAND_SKIN143N, rarity: RARITY.STONE, author: "Franchestcreator", name: "Radioactive Starver"}, {id: 169, day: IMAGES.SKIN146D, night: IMAGES.SKIN146N, dayHand: IMAGES.HAND_SKIN146D, nightHand: IMAGES.HAND_SKIN146N, rarity: RARITY.STONE, author: "TheScaryBlaze", name: "Eaten Cookie"}, {id: 170, day: IMAGES.SKIN147D, night: IMAGES.SKIN147N, dayHand: IMAGES.HAND_SKIN147D, nightHand: IMAGES.HAND_SKIN147N, rarity: RARITY.STONE, author: "aloner", name: "Blob Thing"}, {id: 172, day: IMAGES.SKIN149D, night: IMAGES.SKIN149N, dayHand: IMAGES.HAND_SKIN149D, nightHand: IMAGES.HAND_SKIN149N, rarity: RARITY.STONE, author: "aloner", name: "Machine Mask"}, {id: 29, day: IMAGES.SKIN2D, night: IMAGES.SKIN2N, dayHand: IMAGES.HAND_SKIN2D, nightHand: IMAGES.HAND_SKIN2N, rarity: RARITY.GOLD, author: "Pixelbitie", name: "Lollipop 1"}, {id: 30, day: IMAGES.SKIN3D, night: IMAGES.SKIN3N, dayHand: IMAGES.HAND_SKIN3D, nightHand: IMAGES.HAND_SKIN3N, rarity: RARITY.GOLD, author: "Starve.io", name: "Lollipop 2"}, {id: 31, day: IMAGES.SKIN4D, night: IMAGES.SKIN4N, dayHand: IMAGES.HAND_SKIN4D, nightHand: IMAGES.HAND_SKIN4N, rarity: RARITY.GOLD, author: "Starve.io", name: "Lollipop 3"}, {id: 32, day: IMAGES.SKIN5D, night: IMAGES.SKIN5N, dayHand: IMAGES.HAND_SKIN5D, nightHand: IMAGES.HAND_SKIN5N, rarity: RARITY.GOLD, author: "Starve.io", name: "Lollipop 4"}, {id: 33, day: IMAGES.SKIN8D, night: IMAGES.SKIN8N, dayHand: IMAGES.HAND_SKIN8D, nightHand: IMAGES.HAND_SKIN8N, rarity: RARITY.GOLD, author: "Sushui", name: "Yellow Bird"}, {id: 34, day: IMAGES.SKIN9D, night: IMAGES.SKIN9N, dayHand: IMAGES.HAND_SKIN9D, nightHand: IMAGES.HAND_SKIN9N, rarity: RARITY.GOLD, author: "Sushui", name: "Red Bird"}, {id: 35, day: IMAGES.SKIN10D, night: IMAGES.SKIN10N, dayHand: IMAGES.HAND_SKIN10D, nightHand: IMAGES.HAND_SKIN10N, rarity: RARITY.GOLD, author: "Sushui", name: "Blue Bird"}, {id: 37, day: IMAGES.SKIN17D, night: IMAGES.SKIN17N, dayHand: IMAGES.HAND_SKIN17D, nightHand: IMAGES.HAND_SKIN17N, rarity: RARITY.GOLD, author: "Winter", name: "Owl"}, {id: 52, day: IMAGES.SKIN27D, night: IMAGES.SKIN27N, dayHand: IMAGES.HAND_SKIN27D, nightHand: IMAGES.HAND_SKIN27N, rarity: RARITY.GOLD, author: "Starve.io", name: "Nemo"}, {id: 53, day: IMAGES.SKIN28D, night: IMAGES.SKIN28N, dayHand: IMAGES.HAND_SKIN28D, nightHand: IMAGES.HAND_SKIN28N, rarity: RARITY.GOLD, author: "Starve.io", name: "Mr. Bread"}, {id: 74, day: IMAGES.SKIN49D, night: IMAGES.SKIN49N, dayHand: IMAGES.HAND_SKIN49D, nightHand: IMAGES.HAND_SKIN49N, rarity: RARITY.GOLD, author: "Communist & Taco4Life", name: "Mr. Bread 2"}, {id: 75, day: IMAGES.SKIN50D, night: IMAGES.SKIN50N, dayHand: IMAGES.HAND_SKIN50D, nightHand: IMAGES.HAND_SKIN50N, rarity: RARITY.GOLD, author: "Communist & Taco4Life", name: "Mr. Bread 3"}, {id: 60, day: IMAGES.SKIN35D, night: IMAGES.SKIN35N, dayHand: IMAGES.HAND_SKIN35D, nightHand: IMAGES.HAND_SKIN35N, rarity: RARITY.GOLD, author: "Starve.io", name: "Red Berry"}, {id: 61, day: IMAGES.SKIN36D, night: IMAGES.SKIN36N, dayHand: IMAGES.HAND_SKIN36D, nightHand: IMAGES.HAND_SKIN36N, rarity: RARITY.GOLD, author: "Starve.io", name: "Old Berry"}, {id: 70, day: IMAGES.SKIN45D, night: IMAGES.SKIN45N, dayHand: IMAGES.HAND_SKIN45D, nightHand: IMAGES.HAND_SKIN45N, rarity: RARITY.GOLD, author: "eogito", name: "Cake"}, {id: 71, day: IMAGES.SKIN46D, night: IMAGES.SKIN46N, dayHand: IMAGES.HAND_SKIN46D, nightHand: IMAGES.HAND_SKIN46N, rarity: RARITY.GOLD, author: "eogito", name: "Christmas Cake"}, {id: 77, day: IMAGES.SKIN52D, night: IMAGES.SKIN52N, dayHand: IMAGES.HAND_SKIN52D, nightHand: IMAGES.HAND_SKIN52N, rarity: RARITY.GOLD, author: "Pancakez", name: "Mr. Pancake"}, {id: 87, day: IMAGES.SKIN62D, night: IMAGES.SKIN62N, dayHand: IMAGES.HAND_SKIN62D, nightHand: IMAGES.HAND_SKIN62N, rarity: RARITY.GOLD, author: "Taco4Life", name: "Mr. Taco"}, {id: 78, day: IMAGES.SKIN53D, night: IMAGES.SKIN53N, dayHand: IMAGES.HAND_SKIN53D, nightHand: IMAGES.HAND_SKIN53N, rarity: RARITY.GOLD, author: "Taco4Life", name: "Mr. Bottle"}, {id: 79, day: IMAGES.SKIN54D, night: IMAGES.SKIN54N, dayHand: IMAGES.HAND_SKIN54D, nightHand: IMAGES.HAND_SKIN54N, rarity: RARITY.GOLD, author: "Taco4Life", name: "Mr. Bottle 2"}, {id: 97, day: IMAGES.SKIN71D, night: IMAGES.SKIN71N, dayHand: IMAGES.HAND_SKIN71D, nightHand: IMAGES.HAND_SKIN71N, rarity: RARITY.GOLD, author: "eogito", name: "Pink Rabbit"}, {id: 102, day: IMAGES.SKIN77D, night: IMAGES.SKIN77N, dayHand: IMAGES.HAND_SKIN77D, nightHand: IMAGES.HAND_SKIN77N, rarity: RARITY.GOLD, author: "pizza wa", name: "Marshmallow"}, {id: 107, day: IMAGES.SKIN82D, night: IMAGES.SKIN82N, dayHand: IMAGES.HAND_SKIN82D, nightHand: IMAGES.HAND_SKIN82N, rarity: RARITY.GOLD, author: "eogito", name: "Fox"}, {id: 132, day: IMAGES.SKIN107D, night: IMAGES.SKIN107N, dayHand: IMAGES.HAND_SKIN107D, nightHand: IMAGES.HAND_SKIN107N, rarity: RARITY.GOLD, author: "eogito", name: "Raccoon"}, {id: 111, day: IMAGES.SKIN86D, night: IMAGES.SKIN86N, dayHand: IMAGES.HAND_SKIN86D, nightHand: IMAGES.HAND_SKIN86N, rarity: RARITY.GOLD, author: "pizza wa", name: "Cloud"}, {id: 113, day: IMAGES.SKIN88D, night: IMAGES.SKIN88N, dayHand: IMAGES.HAND_SKIN88D, nightHand: IMAGES.HAND_SKIN88N, rarity: RARITY.GOLD, author: "pizza wa", name: "Moon"}, {id: 117, day: IMAGES.SKIN92D, night: IMAGES.SKIN92N, dayHand: IMAGES.HAND_SKIN92D, nightHand: IMAGES.HAND_SKIN92N, rarity: RARITY.GOLD, author: "eogito", name: "Mr. Panda"}, {id: 118, day: IMAGES.SKIN93D, night: IMAGES.SKIN93N, dayHand: IMAGES.HAND_SKIN93D, nightHand: IMAGES.HAND_SKIN93N, rarity: RARITY.GOLD, author: "eogito", name: "Mr. Strawberry"}, {id: 119, day: IMAGES.SKIN94D, night: IMAGES.SKIN94N, dayHand: IMAGES.HAND_SKIN94D, nightHand: IMAGES.HAND_SKIN94N, rarity: RARITY.GOLD, author: "eogito & Sushuui", name: "Mummy"}, {id: 122, day: IMAGES.SKIN97D, night: IMAGES.SKIN97N, dayHand: IMAGES.HAND_SKIN97D, nightHand: IMAGES.HAND_SKIN97N, rarity: RARITY.GOLD, author: "Taco4Life", name: "Dino"}, {id: 127, day: IMAGES.SKIN102D, night: IMAGES.SKIN102N, dayHand: IMAGES.HAND_SKIN102D, nightHand: IMAGES.HAND_SKIN102N, rarity: RARITY.GOLD, author: "MADBalgouthi", name: "Mr. Koala"}, {id: 160, day: IMAGES.SKIN136D, night: IMAGES.SKIN136N, dayHand: IMAGES.HAND_SKIN136D, nightHand: IMAGES.HAND_SKIN136N, rarity: RARITY.GOLD, author: "Starve.io", name: "Bottle Protection"}, {id: 162, day: IMAGES.SKIN138D, night: IMAGES.SKIN138N, dayHand: IMAGES.HAND_SKIN138D, nightHand: IMAGES.HAND_SKIN138N, rarity: RARITY.GOLD, author: "CrysTal", name: "Leaf Man"}, {id: 166, day: IMAGES.SKIN142D, night: IMAGES.SKIN142N, dayHand: IMAGES.HAND_SKIN142D, nightHand: IMAGES.HAND_SKIN142N, rarity: RARITY.GOLD, author: "pizza wa", name: "Bubble"}, {id: 174, day: IMAGES.SKIN145D, night: IMAGES.SKIN145N, dayHand: IMAGES.HAND_SKIN145D, nightHand: IMAGES.HAND_SKIN145N, rarity: RARITY.GOLD, author: "upfiz", name: "Potato"}, {id: 171, day: IMAGES.SKIN148D, night: IMAGES.SKIN148N, dayHand: IMAGES.HAND_SKIN148D, nightHand: IMAGES.HAND_SKIN148N, rarity: RARITY.GOLD, author: "aloner", name: "Axolotl"}, {id: 25, day: IMAGES.SKIN6D, night: IMAGES.SKIN6N, dayHand: IMAGES.HAND_SKIN6D, nightHand: IMAGES.HAND_SKIN0N, rarity: RARITY.DIAMOND, author: "Pixelbitie", name: "Test Dummy"}, {id: 41, day: IMAGES.SKIN_STARD, night: IMAGES.SKIN_STARN, dayHand: IMAGES.HAND_STARD, nightHand: IMAGES.HAND_STARN, rarity: RARITY.DIAMOND, author: "pizza wa", name: "Star-ver"}, {id: 43, day: IMAGES.SKIN11D, night: IMAGES.SKIN11N, dayHand: IMAGES.HAND_SKIN11D, nightHand: IMAGES.HAND_SKIN11N, rarity: RARITY.DIAMOND, author: "Communist", name: "Starver Chest"}, {id: 88, day: IMAGES.SKIN63D, night: IMAGES.SKIN63N, dayHand: IMAGES.HAND_SKIN63D, nightHand: IMAGES.HAND_SKIN63N, rarity: RARITY.DIAMOND, author: "Communist", name: "Starver Workbench"}, {id: 121, day: IMAGES.SKIN96D, night: IMAGES.SKIN96N, dayHand: IMAGES.HAND_SKIN96D, nightHand: IMAGES.HAND_SKIN96N, rarity: RARITY.DIAMOND, author: "MADBalgouthi", name: "Fish"}, {id: 39, day: IMAGES.SKIN22D, night: IMAGES.SKIN22N, dayHand: IMAGES.HAND_SKIN22D, nightHand: IMAGES.HAND_SKIN22N, rarity: RARITY.DIAMOND, author: "Negligent4Dia", name: "Crab"}, {id: 40, day: IMAGES.SKIN23D, night: IMAGES.SKIN23N, dayHand: IMAGES.HAND_SKIN23D, nightHand: IMAGES.HAND_SKIN23N, rarity: RARITY.DIAMOND, author: "Negligent4Dia", name: "Piranha"}, {id: 36, day: IMAGES.SKIN16D, night: IMAGES.SKIN16N, dayHand: IMAGES.HAND_SKIN16D, nightHand: IMAGES.HAND_SKIN16N, rarity: RARITY.DIAMOND, author: "eogito", name: "Winter Fox"}, {id: 69, day: IMAGES.SKIN44D, night: IMAGES.SKIN44N, dayHand: IMAGES.HAND_SKIN44D, nightHand: IMAGES.HAND_SKIN44N, rarity: RARITY.DIAMOND, author: "Zed", name: "Baby Foxy"}, {id: 51, day: IMAGES.SKIN26D, night: IMAGES.SKIN26N, dayHand: IMAGES.HAND_SKIN26D, nightHand: IMAGES.HAND_SKIN26N, rarity: RARITY.DIAMOND, author: "HOWI", name: "Winter Bear"}, {id: 133, day: IMAGES.SKIN108D, night: IMAGES.SKIN108N, dayHand: IMAGES.HAND_SKIN108D, nightHand: IMAGES.HAND_SKIN108N, rarity: RARITY.DIAMOND, author: "eogito", name: "Hawk"}, {id: 55, day: IMAGES.SKIN30D, night: IMAGES.SKIN30N, dayHand: IMAGES.HAND_SKIN30D, nightHand: IMAGES.HAND_SKIN30N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Nice Little Yuki"}, {id: 68, day: IMAGES.SKIN43D, night: IMAGES.SKIN43N, dayHand: IMAGES.HAND_SKIN43D, nightHand: IMAGES.HAND_SKIN43N, rarity: RARITY.DIAMOND, author: "Taco4Life", name: "Baby Yuki"}, {id: 62, day: IMAGES.SKIN37D, night: IMAGES.SKIN37N, dayHand: IMAGES.HAND_SKIN37D, nightHand: IMAGES.HAND_SKIN37N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Mr. Carrot"}, {id: 56, day: IMAGES.SKIN31D, night: IMAGES.SKIN31N, dayHand: IMAGES.HAND_SKIN31D, nightHand: IMAGES.HAND_SKIN31N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Bat Limax"}, {id: 72, day: IMAGES.SKIN47D, night: IMAGES.SKIN47N, dayHand: IMAGES.HAND_SKIN47D, nightHand: IMAGES.HAND_SKIN47N, rarity: RARITY.DIAMOND, author: "eogito", name: "Mr. Crate"}, {id: 73, day: IMAGES.SKIN48D, night: IMAGES.SKIN48N, dayHand: IMAGES.HAND_SKIN48D, nightHand: IMAGES.HAND_SKIN48N, rarity: RARITY.DIAMOND, author: "Taco4Life & eogito", name: "Mr. Spider"}, {id: 93, day: IMAGES.SKIN68D, night: IMAGES.SKIN68N, dayHand: IMAGES.HAND_SKIN68D, nightHand: IMAGES.HAND_SKIN68N, rarity: RARITY.DIAMOND, author: "Anyone want to play?", name: "Mr. Spider 2"}, {id: 82, day: IMAGES.SKIN57D, night: IMAGES.SKIN57N, dayHand: IMAGES.HAND_SKIN57D, nightHand: IMAGES.HAND_SKIN57N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Mr. Blue Starfish"}, {id: 83, day: IMAGES.SKIN58D, night: IMAGES.SKIN58N, dayHand: IMAGES.HAND_SKIN58D, nightHand: IMAGES.HAND_SKIN58N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Mr. Orange Starfish"}, {id: 84, day: IMAGES.SKIN59D, night: IMAGES.SKIN59N, dayHand: IMAGES.HAND_SKIN59D, nightHand: IMAGES.HAND_SKIN59N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Mr. Pink Starfish"}, {id: 85, day: IMAGES.SKIN60D, night: IMAGES.SKIN60N, dayHand: IMAGES.HAND_SKIN60D, nightHand: IMAGES.HAND_SKIN60N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Mr. ShellMauve"}, {id: 86, day: IMAGES.SKIN61D, night: IMAGES.SKIN61N, dayHand: IMAGES.HAND_SKIN61D, nightHand: IMAGES.HAND_SKIN61N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Mr. Shell Bead"}, {id: 96, day: IMAGES.SKIN72D, night: IMAGES.SKIN72N, dayHand: IMAGES.HAND_SKIN72D, nightHand: IMAGES.HAND_SKIN72N, rarity: RARITY.DIAMOND, author: "Fukss", name: "Angry Crab"}, {id: 98, day: IMAGES.SKIN73D, night: IMAGES.SKIN73N, dayHand: IMAGES.HAND_SKIN73D, nightHand: IMAGES.HAND_SKIN73N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Penguin"}, {id: 126, day: IMAGES.SKIN101D, night: IMAGES.SKIN101N, dayHand: IMAGES.HAND_SKIN101D, nightHand: IMAGES.HAND_SKIN101N, rarity: RARITY.DIAMOND, author: "Anyone want to play?", name: "Mr. Boar"}, {id: 145, day: IMAGES.SKIN121D, night: IMAGES.SKIN121N, dayHand: IMAGES.HAND_SKIN121D, nightHand: IMAGES.HAND_SKIN121N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "I saw you"}, {id: 146, day: IMAGES.SKIN122D, night: IMAGES.SKIN122N, dayHand: IMAGES.HAND_SKIN122D, nightHand: IMAGES.HAND_SKIN122N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "It was funny"}, {id: 147, day: IMAGES.SKIN123D, night: IMAGES.SKIN123N, dayHand: IMAGES.HAND_SKIN123D, nightHand: IMAGES.HAND_SKIN123N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "You can scream"}, {id: 158, day: IMAGES.SKIN134D, night: IMAGES.SKIN134N, dayHand: IMAGES.HAND_SKIN134D, nightHand: IMAGES.HAND_SKIN134N, rarity: RARITY.DIAMOND, author: "eogito", name: "Mr. Book"}, {id: 163, day: IMAGES.SKIN139D, night: IMAGES.SKIN139N, dayHand: IMAGES.HAND_SKIN139D, nightHand: IMAGES.HAND_SKIN139N, rarity: RARITY.DIAMOND, author: "Anyone want to play?", name: "Mr. Mammoth"}, {id: 164, day: IMAGES.SKIN140D, night: IMAGES.SKIN140N, dayHand: IMAGES.HAND_SKIN140D, nightHand: IMAGES.HAND_SKIN140N, rarity: RARITY.DIAMOND, author: "SoOw", name: "Mr. Mammoth 2"}, {id: 161, day: IMAGES.SKIN137D, night: IMAGES.SKIN137N, dayHand: IMAGES.HAND_SKIN137D, nightHand: IMAGES.HAND_SKIN137N, rarity: RARITY.DIAMOND, author: "eogito", name: "Nightmare"}, {id: 168, day: IMAGES.SKIN144D, night: IMAGES.SKIN144N, dayHand: IMAGES.HAND_SKIN144D, nightHand: IMAGES.HAND_SKIN144N, rarity: RARITY.DIAMOND, author: "pizza wa", name: "Shiny Crystal"}, {id: 173, day: IMAGES.SKIN150D, night: IMAGES.SKIN150N, dayHand: IMAGES.HAND_SKIN150D, nightHand: IMAGES.HAND_SKIN150N, rarity: RARITY.DIAMOND, author: "pizza wa", name: "Water skin"}, {id: 42, day: IMAGES.SKIN14D, night: IMAGES.SKIN14N, dayHand: IMAGES.HAND_SKIN14D, nightHand: IMAGES.HAND_SKIN14N, rarity: RARITY.AMETHYST, author: "Winter", name: "Will-O'-The-Wisp"}, {id: 91, day: IMAGES.SKIN66D, night: IMAGES.SKIN66N, dayHand: IMAGES.HAND_SKIN66D, nightHand: IMAGES.HAND_SKIN66N, rarity: RARITY.AMETHYST, author: "ExpertyAnimations", name: "Flame"}, {id: 26, day: IMAGES.SKIN15D, night: IMAGES.SKIN15N, dayHand: IMAGES.HAND_SKIN15D, nightHand: IMAGES.HAND_SKIN15N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Be a Tree"}, {id: 38, day: IMAGES.SKIN18D, night: IMAGES.SKIN18N, dayHand: IMAGES.HAND_SKIN18D, nightHand: IMAGES.HAND_SKIN18N, rarity: RARITY.AMETHYST, author: "Winter", name: "Toxic Mutant"}, {id: 50, day: IMAGES.SKIN25D, night: IMAGES.SKIN25N, dayHand: IMAGES.HAND_SKIN25D, nightHand: IMAGES.HAND_SKIN25N, rarity: RARITY.AMETHYST, author: "Communist", name: "Mr. Tomato"}, {id: 54, day: IMAGES.SKIN29D, night: IMAGES.SKIN29N, dayHand: IMAGES.HAND_SKIN29D, nightHand: IMAGES.HAND_SKIN29N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Mr. Mauve, the Lapa"}, {id: 57, day: IMAGES.SKIN32D, night: IMAGES.SKIN32N, dayHand: IMAGES.HAND_SKIN32D, nightHand: IMAGES.HAND_SKIN32N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Golden Fish"}, {id: 64, day: IMAGES.SKIN39D, night: IMAGES.SKIN39N, dayHand: IMAGES.HAND_SKIN39D, nightHand: IMAGES.HAND_SKIN39N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "LapaMauve"}, {id: 65, day: IMAGES.SKIN40D, night: IMAGES.SKIN40N, dayHand: IMAGES.HAND_SKIN40D, nightHand: IMAGES.HAND_SKIN40N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "LapaMauve "}, {id: 92, day: IMAGES.SKIN67D, night: IMAGES.SKIN67N, dayHand: IMAGES.HAND_SKIN67D, nightHand: IMAGES.HAND_SKIN67N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Mr. Burger"}, {id: 66, day: IMAGES.SKIN41D, night: IMAGES.SKIN41N, dayHand: IMAGES.HAND_SKIN41D, nightHand: IMAGES.HAND_SKIN41N, rarity: RARITY.AMETHYST, author: "pizza wa", name: "Tropical Starver"}, {id: 80, day: IMAGES.SKIN55D, night: IMAGES.SKIN55N, dayHand: IMAGES.HAND_SKIN55D, nightHand: IMAGES.HAND_SKIN55N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Mr. ShellPink"}, {id: 81, day: IMAGES.SKIN56D, night: IMAGES.SKIN56N, dayHand: IMAGES.HAND_SKIN56D, nightHand: IMAGES.HAND_SKIN56N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Mr. OranShell"}, {id: 99, day: IMAGES.SKIN74D, night: IMAGES.SKIN74N, dayHand: IMAGES.HAND_SKIN74D, nightHand: IMAGES.HAND_SKIN74N, rarity: RARITY.AMETHYST, author: "eogito", name: "Pepe"}, {id: 100, day: IMAGES.SKIN75D, night: IMAGES.SKIN75N, dayHand: IMAGES.HAND_SKIN75D, nightHand: IMAGES.HAND_SKIN75N, rarity: RARITY.AMETHYST, author: "fatant", name: "Mr. Ant"}, {id: 115, day: IMAGES.SKIN90D, night: IMAGES.SKIN90N, dayHand: IMAGES.HAND_SKIN90D, nightHand: IMAGES.HAND_SKIN90N, rarity: RARITY.AMETHYST, author: "MADBalgouthi", name: "Mr. Watermelon"}, {id: 101, day: IMAGES.SKIN76D, night: IMAGES.SKIN76N, dayHand: IMAGES.HAND_SKIN76D, nightHand: IMAGES.HAND_SKIN76N, rarity: RARITY.AMETHYST, author: "Taco4Life", name: "Mr. Thornbush"}, {id: 131, day: IMAGES.SKIN106D, night: IMAGES.SKIN106N, dayHand: IMAGES.HAND_SKIN106D, nightHand: IMAGES.HAND_SKIN106N, rarity: RARITY.AMETHYST, author: "Taco4Life", name: "Cthulhu"}, {id: 143, day: IMAGES.SKIN119D, night: IMAGES.SKIN119N, dayHand: IMAGES.HAND_SKIN119D, nightHand: IMAGES.HAND_SKIN119N, rarity: RARITY.AMETHYST, author: "eogito", name: "Mr. Cactus"}, {id: 144, day: IMAGES.SKIN120D, night: IMAGES.SKIN120N, dayHand: IMAGES.HAND_SKIN120D, nightHand: IMAGES.HAND_SKIN120N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Momo"}, {id: 95, day: IMAGES.SKIN70D, night: IMAGES.SKIN70N, dayHand: IMAGES.HAND_SKIN70D, nightHand: IMAGES.HAND_SKIN70N, rarity: RARITY.REIDITE, author: "Taco4Life", name: "Mr. Garlic"}, {id: 76, day: IMAGES.SKIN51D, night: IMAGES.SKIN51N, dayHand: IMAGES.HAND_SKIN51D, nightHand: IMAGES.HAND_SKIN51N, rarity: RARITY.REIDITE, author: "Winter", name: "Robot Dragon"}, {id: 44, day: IMAGES.SKIN1D, night: IMAGES.SKIN1N, dayHand: IMAGES.HAND_SKIN1D, nightHand: IMAGES.HAND_SKIN1N, rarity: RARITY.REIDITE, author: "Winter", name: "Lava Dragon Version 1"}, {id: 90, day: IMAGES.SKIN65D, night: IMAGES.SKIN65N, dayHand: IMAGES.HAND_SKIN65D, nightHand: IMAGES.HAND_SKIN65N, rarity: RARITY.REIDITE, author: "ExpertyAnimations", name: "Lava Dragon Version 2"}, {id: 124, day: IMAGES.SKIN99D, night: IMAGES.SKIN99N, dayHand: IMAGES.HAND_SKIN99D, nightHand: IMAGES.HAND_SKIN99N, rarity: RARITY.REIDITE, author: "eogito", name: "Lava Dragon Version 3"}, {id: 45, day: IMAGES.SKIN12D, night: IMAGES.SKIN12N, dayHand: IMAGES.HAND_SKIN12D, nightHand: IMAGES.HAND_SKIN12N, rarity: RARITY.REIDITE, author: "Sushui", name: "Ice Dragon Version 1"}, {id: 46, day: IMAGES.SKIN13D, night: IMAGES.SKIN13N, dayHand: IMAGES.HAND_SKIN13D, nightHand: IMAGES.HAND_SKIN13N, rarity: RARITY.REIDITE, author: "Winter", name: "Ice Dragon Version 2"}, {id: 108, day: IMAGES.SKIN83D, night: IMAGES.SKIN83N, dayHand: IMAGES.HAND_SKIN83D, nightHand: IMAGES.HAND_SKIN83N, rarity: RARITY.REIDITE, author: "eogito", name: "Ice Dragon Version 3"}, {id: 123, day: IMAGES.SKIN98D, night: IMAGES.SKIN98N, dayHand: IMAGES.HAND_SKIN98D, nightHand: IMAGES.HAND_SKIN98N, rarity: RARITY.REIDITE, author: "eogito", name: "Baby Dragon Version 1"}, {id: 128, day: IMAGES.SKIN103D, night: IMAGES.SKIN103N, dayHand: IMAGES.HAND_SKIN103D, nightHand: IMAGES.HAND_SKIN103N, rarity: RARITY.REIDITE, author: "MADBalgouthi", name: "Baby Dragon Version 2"}, {id: 125, day: IMAGES.SKIN100D, night: IMAGES.SKIN100N, dayHand: IMAGES.HAND_SKIN100D, nightHand: IMAGES.HAND_SKIN100N, rarity: RARITY.REIDITE, author: "eogito", name: "Baby Lava"}, {id: 47, day: IMAGES.SKIN21D, night: IMAGES.SKIN21N, dayHand: IMAGES.HAND_SKIN21D, nightHand: IMAGES.HAND_SKIN21N, rarity: RARITY.REIDITE, author: "Taco4Life", name: "Kraken"}, {id: 129, day: IMAGES.SKIN104D, night: IMAGES.SKIN104N, dayHand: IMAGES.HAND_SKIN104D, nightHand: IMAGES.HAND_SKIN104N, rarity: RARITY.REIDITE, author: "Taco4Life", name: "Sandworm"}, {id: 63, day: IMAGES.SKIN38D, night: IMAGES.SKIN38N, dayHand: IMAGES.HAND_SKIN38D, nightHand: IMAGES.HAND_SKIN38N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Mr. Golden Bread"}, {id: 67, day: IMAGES.SKIN42D, night: IMAGES.SKIN42N, dayHand: IMAGES.HAND_SKIN42D, nightHand: IMAGES.HAND_SKIN42N, rarity: RARITY.REIDITE, author: "ForgottenHeroe", name: "Starver Ores"}, {id: 130, day: IMAGES.SKIN105D, night: IMAGES.SKIN105N, dayHand: IMAGES.HAND_SKIN105D, nightHand: IMAGES.HAND_SKIN105N, rarity: RARITY.REIDITE, author: "Taco4Life", name: "Poo"}, {id: 89, day: IMAGES.SKIN64D, night: IMAGES.SKIN64N, dayHand: IMAGES.HAND_SKIN64D, nightHand: IMAGES.HAND_SKIN64N, rarity: RARITY.REIDITE, author: "Poinet", name: "Volcano Starver"}, {id: 112, day: IMAGES.SKIN87D, night: IMAGES.SKIN87N, dayHand: IMAGES.HAND_SKIN87D, nightHand: IMAGES.HAND_SKIN87N, rarity: RARITY.REIDITE, author: "eogito", name: "Lava Starver"}, {id: 48, day: IMAGES.SKIN_ROBOTD, night: IMAGES.SKIN_ROBOTN, dayHand: IMAGES.HAND_ROBOTD, nightHand: IMAGES.HAND_ROBOTN, rarity: RARITY.SPECIAL, author: "eogito", name: "Robot"}, {id: 110, day: IMAGES.SKIN85D, night: IMAGES.SKIN85N, dayHand: IMAGES.HAND_SKIN85D, nightHand: IMAGES.HAND_SKIN85N, rarity: RARITY.SPECIAL, author: "pizza wa", name: "Blue Butterfly"}, {id: 157, day: IMAGES.SKIN133D, night: IMAGES.SKIN133N, dayHand: IMAGES.HAND_SKIN133D, nightHand: IMAGES.HAND_SKIN133N, rarity: RARITY.SPECIAL, author: "eogito", name: "Yrifox"}, {id: 165, day: IMAGES.SKIN141D, night: IMAGES.SKIN141N, dayHand: IMAGES.HAND_SKIN141D, nightHand: IMAGES.HAND_SKIN141N, rarity: RARITY.SPECIAL, author: "OmarJr13", name: "Blob Skin"}], BAG: [{id: 0, day: IMAGES.BAGD, night: IMAGES.BAGN, rarity: RARITY.FREE, author: "Starve.io", name: "Bag 1"}, {id: 1, day: IMAGES.BAG0D, night: IMAGES.BAG0N, rarity: RARITY.FREE, author: "Starve.io", name: "Old Bag"}, {id: 2, day: IMAGES.BAG4D, night: IMAGES.BAG4N, rarity: RARITY.WOOD, author: "Starve.io", name: "Bag 2"}, {id: 3, day: IMAGES.BAG5D, night: IMAGES.BAG5N, rarity: RARITY.WOOD, author: "Starve.io", name: "Bag 3"}, {id: 4, day: IMAGES.BAG6D, night: IMAGES.BAG6N, rarity: RARITY.WOOD, author: "Starve.io", name: "Bag 4"}, {id: 5, day: IMAGES.BAG7D, night: IMAGES.BAG7N, rarity: RARITY.WOOD, author: "Starve.io", name: "Bag 5"}, {id: 11, day: IMAGES.BAG23D, night: IMAGES.BAG23N, rarity: RARITY.WOOD, author: "eogito", name: "Wood Pickaxe Bag"}, {id: 19, day: IMAGES.BAG16D, night: IMAGES.BAG16N, rarity: RARITY.WOOD, author: "Starve.io ", name: "Wood Carrier"}, {id: 37, day: IMAGES.BAG36D, night: IMAGES.BAG36N, rarity: RARITY.WOOD, author: "eogito", name: "Bag 6"}, {id: 39, day: IMAGES.BAG38D, night: IMAGES.BAG38N, rarity: RARITY.WOOD, author: "eogito", name: "Bag with Wooden Swords"}, {id: 44, day: IMAGES.BAG43D, night: IMAGES.BAG43N, rarity: RARITY.WOOD, author: "Communist", name: "Big Bag"}, {id: 7, day: IMAGES.BAG14D, night: IMAGES.BAG14N, rarity: RARITY.STONE, author: "Communist", name: "Bag 6"}, {id: 8, day: IMAGES.BAG_EASTERD, night: IMAGES.BAG_EASTERN, rarity: RARITY.STONE, author: "Starve.io", name: "Easter Bag"}, {id: 9, day: IMAGES.BAG_STARD, night: IMAGES.BAG_STARN, rarity: RARITY.STONE, author: "pizza wa", name: "Star Bag"}, {id: 10, day: IMAGES.BAG9D, night: IMAGES.BAG9N, rarity: RARITY.STONE, author: "eogito", name: "Winter Bag"}, {id: 20, day: IMAGES.BAG17D, night: IMAGES.BAG17N, rarity: RARITY.STONE, author: "Starve.io ", name: "Stone Carrier"}, {id: 24, day: IMAGES.BAG24D, night: IMAGES.BAG24N, rarity: RARITY.STONE, author: "eogito", name: "Stone Pickaxe Bag"}, {id: 6, day: IMAGES.BAG13D, night: IMAGES.BAG13N, rarity: RARITY.STONE, author: "Communist", name: "Bag Camouflage"}, {id: 38, day: IMAGES.BAG37D, night: IMAGES.BAG37N, rarity: RARITY.STONE, author: "eogito", name: "Bag with Stone Swords"}, {id: 54, day: IMAGES.BAG53D, night: IMAGES.BAG53N, rarity: RARITY.STONE, author: "eogito", name: "Cow Bag"}, {id: 59, day: IMAGES.BAG58D, night: IMAGES.BAG58N, rarity: RARITY.STONE, author: "CrysTal", name: "Starver Bag"}, {id: 62, day: IMAGES.BAG61D, night: IMAGES.BAG61N, rarity: RARITY.STONE, author: "CrysTal", name: "Crystal Sky Bag"}, {id: 13, day: IMAGES.BAG10D, night: IMAGES.BAG10N, rarity: RARITY.GOLD, author: "pizza wa", name: "Honey Pot"}, {id: 21, day: IMAGES.BAG18D, night: IMAGES.BAG18N, rarity: RARITY.GOLD, author: "Starve.io ", name: "Gold Carrier"}, {id: 30, day: IMAGES.BAG25D, night: IMAGES.BAG25N, rarity: RARITY.GOLD, author: "eogito", name: "Gold Pickaxe Bag"}, {id: 29, day: IMAGES.BAG31D, night: IMAGES.BAG31N, rarity: RARITY.GOLD, author: "Ariel", name: "Mr and Mrs Bakers"}, {id: 41, day: IMAGES.BAG40D, night: IMAGES.BAG40N, rarity: RARITY.GOLD, author: "eogito", name: "Bag with Golden Swords"}, {id: 47, day: IMAGES.BAG46D, night: IMAGES.BAG46N, rarity: RARITY.GOLD, author: "eogito", name: "Explorer Bag"}, {id: 51, day: IMAGES.BAG50D, night: IMAGES.BAG50N, rarity: RARITY.GOLD, author: "pizza wa", name: "Bamboo Bag"}, {id: 53, day: IMAGES.BAG52D, night: IMAGES.BAG52N, rarity: RARITY.GOLD, author: "eogito", name: "Mummy Bag"}, {id: 58, day: IMAGES.BAG57D, night: IMAGES.BAG57N, rarity: RARITY.GOLD, author: "MADBalgouthi", name: "Watermelon Bag"}, {id: 60, day: IMAGES.BAG59D, night: IMAGES.BAG60N, rarity: RARITY.GOLD, author: "Taco4Life", name: "Garlic Bag"}, {id: 61, day: IMAGES.BAG60D, night: IMAGES.BAG59N, rarity: RARITY.GOLD, author: "Taco4Life", name: "Pumpkin Bag"}, {id: 64, day: IMAGES.BAG63D, night: IMAGES.BAG63N, rarity: RARITY.GOLD, author: "upfiz", name: "Oil Barel bag"}, {id: 67, day: IMAGES.BAG68D, night: IMAGES.BAG68N, rarity: RARITY.GOLD, author: "pizza wa", name: "Tree Bag"}, {id: 14, day: IMAGES.BAG1D, night: IMAGES.BAG1N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "a Rabbit in my Bag"}, {id: 15, day: IMAGES.BAG2D, night: IMAGES.BAG2N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Bird's nest"}, {id: 16, day: IMAGES.BAG3D, night: IMAGES.BAG3N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "a Fish on your Back"}, {id: 17, day: IMAGES.BAG8D, night: IMAGES.BAG8N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "a Squirrel in my Bag"}, {id: 22, day: IMAGES.BAG19D, night: IMAGES.BAG19N, rarity: RARITY.DIAMOND, author: "Starve.io ", name: "Diamond Carrier"}, {id: 12, day: IMAGES.BAG22D, night: IMAGES.BAG22N, rarity: RARITY.DIAMOND, author: "eogito", name: "Resources Bag"}, {id: 32, day: IMAGES.BAG26D, night: IMAGES.BAG26N, rarity: RARITY.DIAMOND, author: "eogito", name: "Diamond Pickaxe Bag"}, {id: 40, day: IMAGES.BAG39D, night: IMAGES.BAG39N, rarity: RARITY.DIAMOND, author: "eogito", name: "Bag with Diamond Swords"}, {id: 45, day: IMAGES.BAG44D, night: IMAGES.BAG44N, rarity: RARITY.DIAMOND, author: "eogito", name: "My Cake Bag"}, {id: 46, day: IMAGES.BAG45D, night: IMAGES.BAG45N, rarity: RARITY.DIAMOND, author: "eogito", name: "My Christmas Cake Bag"}, {id: 52, day: IMAGES.BAG51D, night: IMAGES.BAG51N, rarity: RARITY.DIAMOND, author: "MADBalgouthi", name: "Fish Bag"}, {id: 65, day: IMAGES.BAG64D, night: IMAGES.BAG64N, rarity: RARITY.DIAMOND, author: "pizza wa", name: "Cloud Bag"}, {id: 68, day: IMAGES.BAG66D, night: IMAGES.BAG66N, rarity: RARITY.DIAMOND, author: "pizza wa", name: "Bee Bag"}, {id: 48, day: IMAGES.BAG47D, night: IMAGES.BAG47N, rarity: RARITY.AMETHYST, author: "fatant", name: "Natural Bag"}, {id: 23, day: IMAGES.BAG20D, night: IMAGES.BAG20N, rarity: RARITY.AMETHYST, author: "Starve.io ", name: "Amethyst Carrier"}, {id: 25, day: IMAGES.BAG27D, night: IMAGES.BAG27N, rarity: RARITY.AMETHYST, author: "eogito", name: "Amethyst Pickaxe Bag"}, {id: 28, day: IMAGES.BAG30D, night: IMAGES.BAG30N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Your Baby"}, {id: 33, day: IMAGES.BAG32D, night: IMAGES.BAG32N, rarity: RARITY.AMETHYST, author: "pizza wa", name: "Tropical Bag"}, {id: 43, day: IMAGES.BAG42D, night: IMAGES.BAG42N, rarity: RARITY.AMETHYST, author: "eogito", name: "Bag with Amethyst Swords"}, {id: 35, day: IMAGES.BAG34D, night: IMAGES.BAG34N, rarity: RARITY.AMETHYST, author: "eogito", name: "Ice Bag"}, {id: 50, day: IMAGES.BAG49D, night: IMAGES.BAG49N, rarity: RARITY.AMETHYST, author: "Taco4Life", name: "Thornbush Bag"}, {id: 56, day: IMAGES.BAG55D, night: IMAGES.BAG55N, rarity: RARITY.AMETHYST, author: "eogito", name: "Autumn Bag"}, {id: 57, day: IMAGES.BAG56D, night: IMAGES.BAG56N, rarity: RARITY.AMETHYST, author: "Taco4Life", name: "Dino Egg Bag"}, {id: 66, day: IMAGES.BAG65D, night: IMAGES.BAG65N, rarity: RARITY.AMETHYST, author: "pizza wa", name: "Magic Cloud Bag"}, {id: 69, day: IMAGES.BAG67D, night: IMAGES.BAG67N, rarity: RARITY.AMETHYST, author: "pizza wa", name: "Chest Bag"}, {id: 31, day: IMAGES.BAG21D, night: IMAGES.BAG21N, rarity: RARITY.REIDITE, author: "Starve.io ", name: "Reidite Carrier"}, {id: 18, day: IMAGES.BAG11D, night: IMAGES.BAG11N, rarity: RARITY.REIDITE, author: "Winter", name: "Lava Bag"}, {id: 49, day: IMAGES.BAG48D, night: IMAGES.BAG48N, rarity: RARITY.REIDITE, author: "eogito", name: "Lava Bag 2"}, {id: 36, day: IMAGES.BAG35D, night: IMAGES.BAG35N, rarity: RARITY.REIDITE, author: "eogito", name: "Dragon Bag"}, {id: 55, day: IMAGES.BAG54D, night: IMAGES.BAG54N, rarity: RARITY.REIDITE, author: "eogito", name: "Winter Ice Bag"}, {id: 26, day: IMAGES.BAG28D, night: IMAGES.BAG28N, rarity: RARITY.REIDITE, author: "eogito", name: "Reidite Pickaxe Bag"}, {id: 27, day: IMAGES.BAG29D, night: IMAGES.BAG29N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Octopus Bowl"}, {id: 34, day: IMAGES.BAG33D, night: IMAGES.BAG33N, rarity: RARITY.REIDITE, author: "Taco4Life", name: "Cave Bag"}, {id: 42, day: IMAGES.BAG41D, night: IMAGES.BAG41N, rarity: RARITY.REIDITE, author: "eogito", name: "Bag with Reidite Swords"}, {id: 63, day: IMAGES.BAG62D, night: IMAGES.BAG62N, rarity: RARITY.REIDITE, author: "eogito", name: "Engineer Bag"}], CRATE: [{id: 0, day: IMAGES.CRATE7D, night: IMAGES.CRATE7N, rarity: RARITY.FREE, author: "eogito", name: "Wooden Dead Box"}, {id: 1, day: IMAGES.CRATE6D, night: IMAGES.CRATE6N, rarity: RARITY.FREE, author: "eogito", name: "Hidden item"}, {id: 2, day: IMAGES.CRATE1D, night: IMAGES.CRATE1N, rarity: RARITY.WOOD, author: "eogito", name: "Wooden Box 1"}, {id: 3, day: IMAGES.CRATE2D, night: IMAGES.CRATE2N, rarity: RARITY.WOOD, author: "eogito", name: "Wooden Box 2"}, {id: 4, day: IMAGES.CRATE3D, night: IMAGES.CRATE3N, rarity: RARITY.WOOD, author: "eogito", name: "Wooden Box 3"}, {id: 5, day: IMAGES.CRATE4D, night: IMAGES.CRATE4N, rarity: RARITY.WOOD, author: "eogito", name: "Broken Wooden Box"}, {id: 6, day: IMAGES.CRATE5D, night: IMAGES.CRATE5N, rarity: RARITY.WOOD, author: "eogito", name: "Wooden Box"}, {id: 7, day: IMAGES.CRATE8D, night: IMAGES.CRATE8N, rarity: RARITY.WOOD, author: "eogito", name: "Wooden Battle Box"}, {id: 8, day: IMAGES.CRATE9D, night: IMAGES.CRATE9N, rarity: RARITY.WOOD, author: "eogito", name: "Wooden Box with a Cross"}, {id: 9, day: IMAGES.CRATE10D, night: IMAGES.CRATE10N, rarity: RARITY.WOOD, author: "eogito", name: "Wooden Box with Bubbles"}, {id: 10, day: IMAGES.CRATE11D, night: IMAGES.CRATE11N, rarity: RARITY.WOOD, author: "eogito", name: "Wooden Box with Eyes"}, {id: 11, day: IMAGES.CRATE12D, night: IMAGES.CRATE12N, rarity: RARITY.WOOD, author: "eogito", name: "Dark Wooden Box"}, {id: 38, day: IMAGES.CRATE39D, night: IMAGES.CRATE39N, rarity: RARITY.WOOD, author: "Weddlz", name: "Noob Box"}, {id: 12, day: IMAGES.CRATE13D, night: IMAGES.CRATE13N, rarity: RARITY.STONE, author: "eogito", name: "Wooden and Stone Box"}, {id: 14, day: IMAGES.CRATE19D, night: IMAGES.CRATE19N, rarity: RARITY.STONE, author: "pizza wa", name: "Star Box 1"}, {id: 15, day: IMAGES.CRATE20D, night: IMAGES.CRATE20N, rarity: RARITY.STONE, author: "pizza wa", name: "Star Box 2"}, {id: 27, day: IMAGES.CRATE29D, night: IMAGES.CRATE29N, rarity: RARITY.STONE, author: "eogito", name: "Flower Box"}, {id: 46, day: IMAGES.CRATE47D, night: IMAGES.CRATE47N, rarity: RARITY.STONE, author: "MADBalgouthi", name: "Blue Box"}, {id: 19, day: IMAGES.CRATE21D, night: IMAGES.CRATE21N, rarity: RARITY.GOLD, author: "Starve.io", name: "Beehive"}, {id: 13, day: IMAGES.CRATE14D, night: IMAGES.CRATE14N, rarity: RARITY.GOLD, author: "eogito", name: "Wooden and Golden Box"}, {id: 21, day: IMAGES.CRATE22D, night: IMAGES.CRATE22N, rarity: RARITY.GOLD, author: "Starve.io", name: "Gravestone"}, {id: 25, day: IMAGES.CRATE26D, night: IMAGES.CRATE26N, rarity: RARITY.GOLD, author: "Communist", name: "Sky Box"}, {id: 29, day: IMAGES.CRATE30D, night: IMAGES.CRATE30N, rarity: RARITY.GOLD, author: "Winter", name: "Golden Box"}, {id: 34, day: IMAGES.CRATE35D, night: IMAGES.CRATE35N, rarity: RARITY.GOLD, author: "Communist", name: "Water Crate"}, {id: 35, day: IMAGES.CRATE36D, night: IMAGES.CRATE36N, rarity: RARITY.GOLD, author: "Communist", name: "Glass Crate"}, {id: 16, day: IMAGES.CRATE15D, night: IMAGES.CRATE15N, rarity: RARITY.DIAMOND, author: "eogito", name: "Wooden and Diamond Box"}, {id: 18, day: IMAGES.CRATE18D, night: IMAGES.CRATE18N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Don't Hit Me"}, {id: 26, day: IMAGES.CRATE27D, night: IMAGES.CRATE27N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Underwater Box"}, {id: 31, day: IMAGES.CRATE32D, night: IMAGES.CRATE32N, rarity: RARITY.DIAMOND, author: "Communist", name: "Items Pile"}, {id: 32, day: IMAGES.CRATE33D, night: IMAGES.CRATE33N, rarity: RARITY.DIAMOND, author: "eogito", name: "Cake Box"}, {id: 33, day: IMAGES.CRATE34D, night: IMAGES.CRATE34N, rarity: RARITY.DIAMOND, author: "eogito", name: "Christmas Cake Box"}, {id: 36, day: IMAGES.CRATE37D, night: IMAGES.CRATE37N, rarity: RARITY.DIAMOND, author: "Fukss", name: "Crab Box"}, {id: 42, day: IMAGES.CRATE43D, night: IMAGES.CRATE43N, rarity: RARITY.DIAMOND, author: "MADBalgouthi", name: "Fishing Box"}, {id: 22, day: IMAGES.CRATE23D, night: IMAGES.CRATE23N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Let me out of here"}, {id: 17, day: IMAGES.CRATE16D, night: IMAGES.CRATE16N, rarity: RARITY.AMETHYST, author: "eogito", name: "Wooden and Amethyst Box"}, {id: 24, day: IMAGES.CRATE25D, night: IMAGES.CRATE25N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Aquarium"}, {id: 28, day: IMAGES.CRATE28D, night: IMAGES.CRATE28N, rarity: RARITY.AMETHYST, author: "eogito", name: "Gift Box"}, {id: 40, day: IMAGES.CRATE41D, night: IMAGES.CRATE41N, rarity: RARITY.AMETHYST, author: "MADBalgouthi", name: "Open Watermelon Box"}, {id: 41, day: IMAGES.CRATE42D, night: IMAGES.CRATE42N, rarity: RARITY.AMETHYST, author: "MADBalgouthi", name: "Watermelon Box"}, {id: 39, day: IMAGES.CRATE40D, night: IMAGES.CRATE40N, rarity: RARITY.AMETHYST, author: "Taco4Life", name: "Thornbush Box"}, {id: 43, day: IMAGES.CRATE44D, night: IMAGES.CRATE44N, rarity: RARITY.AMETHYST, author: "eogito", name: "Rabbit in the Box"}, {id: 47, day: IMAGES.CRATE48D, night: IMAGES.CRATE48N, rarity: RARITY.AMETHYST, author: "Taco4Life", name: "Garlic Plot"}, {id: 48, day: IMAGES.CRATE49D, night: IMAGES.CRATE49N, rarity: RARITY.AMETHYST, author: "Taco4Life", name: "Pumpkin Plot"}, {id: 45, day: IMAGES.CRATE46D, night: IMAGES.CRATE46N, rarity: RARITY.REIDITE, author: "eogito", name: "Autumn Box"}, {id: 44, day: IMAGES.CRATE45D, night: IMAGES.CRATE45N, rarity: RARITY.REIDITE, author: "eogito", name: "Winter Box"}, {id: 20, day: IMAGES.CRATE17D, night: IMAGES.CRATE17N, rarity: RARITY.REIDITE, author: "eogito", name: "Metal and Reidite Box"}, {id: 23, day: IMAGES.CRATE24D, night: IMAGES.CRATE24N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Kraken Box"}, {id: 30, day: IMAGES.CRATE31D, night: IMAGES.CRATE31N, rarity: RARITY.REIDITE, author: "Winter", name: "Lava Box"}, {id: 37, day: IMAGES.CRATE38D, night: IMAGES.CRATE38N, rarity: RARITY.REIDITE, author: "eogito", name: "Lava Box 2"}, {id: 49, day: IMAGES.CRATE50D, night: IMAGES.CRATE50N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Rabbit"}, {id: 50, day: IMAGES.CRATE51D, night: IMAGES.CRATE51N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Wolf"}, {id: 51, day: IMAGES.CRATE52D, night: IMAGES.CRATE52N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Spider"}, {id: 52, day: IMAGES.CRATE53D, night: IMAGES.CRATE53N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Hawk"}, {id: 53, day: IMAGES.CRATE54D, night: IMAGES.CRATE54N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Bear"}, {id: 54, day: IMAGES.CRATE55D, night: IMAGES.CRATE55N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Fox"}, {id: 55, day: IMAGES.CRATE56D, night: IMAGES.CRATE56N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Baby Mammoth"}, {id: 56, day: IMAGES.CRATE57D, night: IMAGES.CRATE57N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Mammoth"}, {id: 57, day: IMAGES.CRATE58D, night: IMAGES.CRATE58N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Sandworm"}, {id: 58, day: IMAGES.CRATE59D, night: IMAGES.CRATE59N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Vulture"}, {id: 59, day: IMAGES.CRATE60D, night: IMAGES.CRATE60N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Kraken"}, {id: 60, day: IMAGES.CRATE61D, night: IMAGES.CRATE61N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Piranha"}, {id: 61, day: IMAGES.CRATE62D, night: IMAGES.CRATE62N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Baby Dragon"}, {id: 62, day: IMAGES.CRATE63D, night: IMAGES.CRATE63N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Baby Lava"}, {id: 63, day: IMAGES.CRATE64D, night: IMAGES.CRATE64N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Dragon"}, {id: 64, day: IMAGES.CRATE65D, night: IMAGES.CRATE65N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Penguin"}, {id: 65, day: IMAGES.CRATE66D, night: IMAGES.CRATE66N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Lava Dragon"}, {id: 66, day: IMAGES.CRATE67D, night: IMAGES.CRATE67N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Boar"}, {id: 67, day: IMAGES.CRATE68D, night: IMAGES.CRATE68N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Fire mob"}, {id: 68, day: IMAGES.CRATE69D, night: IMAGES.CRATE69N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the Crab"}, {id: 69, day: IMAGES.CRATE70D, night: IMAGES.CRATE70N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Box of the King Crab"}, {id: 70, day: IMAGES.CRATE71D, night: IMAGES.CRATE71N, rarity: RARITY.GOLD, author: "CrysTal", name: "Crystal Sky Box"}, {id: 71, day: IMAGES.CRATE72D, night: IMAGES.CRATE72N, rarity: RARITY.REIDITE, author: "eogito", name: "Dragon Box"}], BOOK: [{id: 0, day: IMAGES.BOOK0D, night: IMAGES.BOOK0N, rarity: RARITY.FREE, author: "Starve.io", name: "Book 1"}, {id: 1, day: IMAGES.BOOK3D, night: IMAGES.BOOK3N, rarity: RARITY.WOOD, author: "eogito", name: "Book 2"}, {id: 2, day: IMAGES.BOOK4D, night: IMAGES.BOOK4N, rarity: RARITY.WOOD, author: "eogito", name: "Book 3"}, {id: 3, day: IMAGES.BOOK5D, night: IMAGES.BOOK5N, rarity: RARITY.WOOD, author: "eogito", name: "Book 4"}, {id: 4, day: IMAGES.BOOK6D, night: IMAGES.BOOK6N, rarity: RARITY.WOOD, author: "eogito", name: "Damaged Book 1"}, {id: 18, day: IMAGES.BOOK18D, night: IMAGES.BOOK18N, rarity: RARITY.WOOD, author: "SeveR", name: "Damaged Book 2"}, {id: 5, day: IMAGES.BOOK1D, night: IMAGES.BOOK1N, rarity: RARITY.STONE, author: "Doctorpus", name: "Scroll"}, {id: 6, day: IMAGES.BOOK2D, night: IMAGES.BOOK2N, rarity: RARITY.STONE, author: "Doctorpus", name: "Clipboard"}, {id: 7, day: IMAGES.BOOK7D, night: IMAGES.BOOK7N, rarity: RARITY.STONE, author: "eogito", name: "Seed Book"}, {id: 20, day: IMAGES.BOOK20D, night: IMAGES.BOOK20N, rarity: RARITY.STONE, author: "Taco4Life", name: "Camo Book"}, {id: 24, day: IMAGES.BOOK24D, night: IMAGES.BOOK24N, rarity: RARITY.STONE, author: "Communist", name: "Stone Tablet"}, {id: 10, day: IMAGES.BOOK13D, night: IMAGES.BOOK13N, rarity: RARITY.GOLD, author: "pizza wa", name: "Star Book"}, {id: 8, day: IMAGES.BOOK9D, night: IMAGES.BOOK9N, rarity: RARITY.GOLD, author: "eogito", name: "Gold Book"}, {id: 15, day: IMAGES.BOOK15D, night: IMAGES.BOOK15N, rarity: RARITY.GOLD, author: "Starve.io", name: "Old Mysterious Paper"}, {id: 17, day: IMAGES.BOOK17D, night: IMAGES.BOOK17N, rarity: RARITY.GOLD, author: "Starve.io", name: "Gold Engraving"}, {id: 25, day: IMAGES.BOOK25D, night: IMAGES.BOOK25N, rarity: RARITY.GOLD, author: "fatant", name: "Ant Book"}, {id: 32, day: IMAGES.BOOK32D, night: IMAGES.BOOK32N, rarity: RARITY.GOLD, author: "eogito", name: "Mummy Book"}, {id: 37, day: IMAGES.BOOK39D, night: IMAGES.BOOK39N, rarity: RARITY.GOLD, author: "Taco4Life", name: "Garlic Book"}, {id: 38, day: IMAGES.BOOK38D, night: IMAGES.BOOK38N, rarity: RARITY.GOLD, author: "Taco4Life", name: "Pumpkin Book"}, {id: 39, day: IMAGES.BOOK40D, night: IMAGES.BOOK40N, rarity: RARITY.GOLD, author: "Starve.io", name: "Christmas Tree Book"}, {id: 11, day: IMAGES.BOOK10D, night: IMAGES.BOOK10N, rarity: RARITY.DIAMOND, author: "eogito", name: "Diamond Book"}, {id: 9, day: IMAGES.BOOK8D, night: IMAGES.BOOK8N, rarity: RARITY.DIAMOND, author: "eogito", name: "Obscure Book"}, {id: 16, day: IMAGES.BOOK16D, night: IMAGES.BOOK16N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Rolled Parchment"}, {id: 22, day: IMAGES.BOOK22D, night: IMAGES.BOOK22N, rarity: RARITY.DIAMOND, author: "eogito", name: "Cake Book"}, {id: 23, day: IMAGES.BOOK23D, night: IMAGES.BOOK23N, rarity: RARITY.DIAMOND, author: "eogito", name: "Christmas Cake Book"}, {id: 30, day: IMAGES.BOOK30D, night: IMAGES.BOOK30N, rarity: RARITY.DIAMOND, author: "MADBalgouthi", name: "Fish Book"}, {id: 31, day: IMAGES.BOOK31D, night: IMAGES.BOOK31N, rarity: RARITY.DIAMOND, author: "CrysTal", name: "Once upon a time"}, {id: 13, day: IMAGES.BOOK11D, night: IMAGES.BOOK11N, rarity: RARITY.AMETHYST, author: "eogito", name: "Amethyst Book"}, {id: 28, day: IMAGES.BOOK28D, night: IMAGES.BOOK28N, rarity: RARITY.AMETHYST, author: "eogito", name: "Paint Pallet"}, {id: 29, day: IMAGES.BOOK29D, night: IMAGES.BOOK29N, rarity: RARITY.AMETHYST, author: "CrysTal", name: "Watermelon Book"}, {id: 27, day: IMAGES.BOOK27D, night: IMAGES.BOOK27N, rarity: RARITY.AMETHYST, author: "Taco4Life", name: "Thornbush Book"}, {id: 35, day: IMAGES.BOOK35D, night: IMAGES.BOOK35N, rarity: RARITY.AMETHYST, author: "Taco4Life", name: "Menu"}, {id: 36, day: IMAGES.BOOK36D, night: IMAGES.BOOK36N, rarity: RARITY.AMETHYST, author: "CrysTal", name: "Lover Letter"}, {id: 40, day: IMAGES.BOOK41D, night: IMAGES.BOOK41N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Fresh-Baked Cookies"}, {id: 41, day: IMAGES.BOOK42D, night: IMAGES.BOOK42N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Inside, there is just a book."}, {id: 33, day: IMAGES.BOOK33D, night: IMAGES.BOOK33N, rarity: RARITY.REIDITE, author: "eogito", name: "Winter Book"}, {id: 34, day: IMAGES.BOOK34D, night: IMAGES.BOOK34N, rarity: RARITY.REIDITE, author: "eogito", name: "Autumn Book"}, {id: 14, day: IMAGES.BOOK12D, night: IMAGES.BOOK12N, rarity: RARITY.REIDITE, author: "eogito", name: "Reidite Book"}, {id: 12, day: IMAGES.BOOK14D, night: IMAGES.BOOK14N, rarity: RARITY.REIDITE, author: "Winter", name: "Lava Book"}, {id: 26, day: IMAGES.BOOK26D, night: IMAGES.BOOK26N, rarity: RARITY.REIDITE, author: "eogito", name: "Lava Book 2"}, {id: 19, day: IMAGES.BOOK19D, night: IMAGES.BOOK19N, rarity: RARITY.REIDITE, author: "Winter", name: "Ocean Mystery"}, {id: 21, day: IMAGES.BOOK21D, night: IMAGES.BOOK21N, rarity: RARITY.REIDITE, author: "eogito", name: "Dragon Book"}, {id: 42, day: IMAGES.BOOK43D, night: IMAGES.BOOK43N, rarity: RARITY.REIDITE, author: "eogito", name: "Engineer Book"}, {id: 43, day: IMAGES.BOOK44D, night: IMAGES.BOOK44N, rarity: RARITY.REIDITE, author: "eogito", name: "Nightmare Book"}, {id: 44, day: IMAGES.BOOK45D, night: IMAGES.BOOK45N, rarity: RARITY.REIDITE, author: "aloner", name: "Mystery Book"}], ACCESSORY: [{id: 0, day: IMAGES.ACCESSORY0D, night: IMAGES.ACCESSORY0D, rarity: RARITY.FREE, author: "Starve.io", name: "Nothing"}, {id: 2, day: IMAGES.ACCESSORY4D, night: IMAGES.ACCESSORY4N, rarity: RARITY.FREE, author: "Starve.io", name: "Pink Cheeks"}, {id: 3, day: IMAGES.ACCESSORY5D, night: IMAGES.ACCESSORY5N, rarity: RARITY.FREE, author: "Starve.io", name: "Heart"}, {id: 1, day: IMAGES.ACCESSORY3D, night: IMAGES.ACCESSORY3N, rarity: RARITY.FREE, author: "Starve.io", name: "Bandage 1"}, {id: 4, day: IMAGES.ACCESSORY6D, night: IMAGES.ACCESSORY6N, rarity: RARITY.FREE, author: "Starve.io", name: "Flower 1"}, {id: 5, day: IMAGES.ACCESSORY8D, night: IMAGES.ACCESSORY8N, rarity: RARITY.WOOD, author: "Starve.io", name: "Bow 1"}, {id: 6, day: IMAGES.ACCESSORY9D, night: IMAGES.ACCESSORY9N, rarity: RARITY.WOOD, author: "eogito", name: "Bandage 2"}, {id: 7, day: IMAGES.ACCESSORY15D, night: IMAGES.ACCESSORY15N, rarity: RARITY.WOOD, author: "Starve.io", name: "Flower 2"}, {id: 8, day: IMAGES.ACCESSORY10D, night: IMAGES.ACCESSORY10N, rarity: RARITY.WOOD, author: "eogito", name: "Bandage 3"}, {id: 36, day: IMAGES.ACCESSORY36D, night: IMAGES.ACCESSORY36N, rarity: RARITY.WOOD, author: "eogito", name: "Foliage"}, {id: 59, day: IMAGES.ACCESSORY47D, night: IMAGES.ACCESSORY47N, rarity: RARITY.WOOD, author: "eogito", name: "Peaceful"}, {id: 67, day: IMAGES.ACCESSORY55D, night: IMAGES.ACCESSORY55N, rarity: RARITY.WOOD, author: "pizza wa", name: "Sparkles"}, {id: 68, day: IMAGES.ACCESSORY56D, night: IMAGES.ACCESSORY56N, rarity: RARITY.WOOD, author: "pizza wa", name: "Luxury"}, {id: 69, day: IMAGES.ACCESSORY57D, night: IMAGES.ACCESSORY57N, rarity: RARITY.WOOD, author: "pizza wa", name: "Snow Flakes Crown"}, {id: 17, day: IMAGES.ACCESSORY17D, night: IMAGES.ACCESSORY17N, rarity: RARITY.STONE, author: "Starve.io", name: "Glasses 1"}, {id: 10, day: IMAGES.ACCESSORY7D, night: IMAGES.ACCESSORY7N, rarity: RARITY.STONE, author: "Starve.io", name: "Bow 2"}, {id: 11, day: IMAGES.ACCESSORY13D, night: IMAGES.ACCESSORY13N, rarity: RARITY.STONE, author: "pizza wa", name: "Little Stars"}, {id: 12, day: IMAGES.ACCESSORY11D, night: IMAGES.ACCESSORY11N, rarity: RARITY.STONE, author: "eogito", name: "Pirate Eye Patch 1"}, {id: 44, day: IMAGES.ACCESSORY44D, night: IMAGES.ACCESSORY44N, rarity: RARITY.STONE, author: "Taco4Life", name: "Pirate Eye Patch 2"}, {id: 23, day: IMAGES.ACCESSORY23D, night: IMAGES.ACCESSORY23N, rarity: RARITY.STONE, author: "Starve.io", name: "Clown nose"}, {id: 16, day: IMAGES.ACCESSORY2D, night: IMAGES.ACCESSORY2N, rarity: RARITY.STONE, author: "Starve.io", name: "Eye Patch"}, {id: 30, day: IMAGES.ACCESSORY30D, night: IMAGES.ACCESSORY30N, rarity: RARITY.STONE, author: "eogito", name: "Flower 3"}, {id: 38, day: IMAGES.ACCESSORY38D, night: IMAGES.ACCESSORY38N, rarity: RARITY.STONE, author: "Winter", name: "False Nose"}, {id: 74, day: IMAGES.ACCESSORY62D, night: IMAGES.ACCESSORY62N, rarity: RARITY.STONE, author: "Starve.io", name: "Red Cloth"}, {id: 75, day: IMAGES.ACCESSORY63D, night: IMAGES.ACCESSORY63N, rarity: RARITY.STONE, author: "Starve.io", name: "Blue Cloth"}, {id: 79, day: IMAGES.ACCESSORY67D, night: IMAGES.ACCESSORY67N, rarity: RARITY.STONE, author: "Starve.io", name: "Transparent Mask"}, {id: 89, day: IMAGES.ACCESSORY77D, night: IMAGES.ACCESSORY77N, rarity: RARITY.STONE, author: "Anyone want to play?", name: "Starve.io Anime"}, {id: 94, day: IMAGES.ACCESSORY78D, night: IMAGES.ACCESSORY78N, rarity: RARITY.STONE, author: "Ant", name: "Hero Mask"}, {id: 15, day: IMAGES.ACCESSORY16D, night: IMAGES.ACCESSORY16N, rarity: RARITY.GOLD, author: "Starve.io", name: "Star Glasses"}, {id: 21, day: IMAGES.ACCESSORY21D, night: IMAGES.ACCESSORY21N, rarity: RARITY.GOLD, author: "Starve.io", name: "Great-aunt's Glasses"}, {id: 24, day: IMAGES.ACCESSORY24D, night: IMAGES.ACCESSORY24N, rarity: RARITY.GOLD, author: "Starve.io", name: "Little Starver"}, {id: 22, day: IMAGES.ACCESSORY22D, night: IMAGES.ACCESSORY22N, rarity: RARITY.GOLD, author: "Starve.io", name: "Little Glasses"}, {id: 13, day: IMAGES.ACCESSORY14D, night: IMAGES.ACCESSORY14N, rarity: RARITY.GOLD, author: "Starve.io", name: "Flower Chain"}, {id: 29, day: IMAGES.ACCESSORY29D, night: IMAGES.ACCESSORY29N, rarity: RARITY.GOLD, author: "eogito", name: "Horns"}, {id: 31, day: IMAGES.ACCESSORY31D, night: IMAGES.ACCESSORY31N, rarity: RARITY.GOLD, author: "eogito", name: "Golden Flower"}, {id: 40, day: IMAGES.ACCESSORY40D, night: IMAGES.ACCESSORY40N, rarity: RARITY.GOLD, author: "pizza wa", name: "Sleeping Mask"}, {id: 57, day: IMAGES.ACCESSORY50D, night: IMAGES.ACCESSORY50N, rarity: RARITY.GOLD, author: "Taco4Life", name: "Fish on your head"}, {id: 58, day: IMAGES.ACCESSORY46D, night: IMAGES.ACCESSORY46N, rarity: RARITY.GOLD, author: "eogito", name: "Rose"}, {id: 91, day: IMAGES.ACCESSORY80D, night: IMAGES.ACCESSORY80N, rarity: RARITY.GOLD, author: "upfiz", name: "Grey Scarf"}, {id: 92, day: IMAGES.ACCESSORY81D, night: IMAGES.ACCESSORY81N, rarity: RARITY.GOLD, author: "upfiz", name: "Black Scarf"}, {id: 93, day: IMAGES.ACCESSORY82D, night: IMAGES.ACCESSORY82N, rarity: RARITY.GOLD, author: "upfiz", name: "Skull Mask"}, {id: 9, day: IMAGES.ACCESSORY1D, night: IMAGES.ACCESSORY1N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Fancy Glasses"}, {id: 25, day: IMAGES.ACCESSORY25D, night: IMAGES.ACCESSORY25N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Medecin Mask"}, {id: 14, day: IMAGES.ACCESSORY12D, night: IMAGES.ACCESSORY12N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Mr. Mayor"}, {id: 19, day: IMAGES.ACCESSORY19D, night: IMAGES.ACCESSORY19N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Sunglasses 2"}, {id: 28, day: IMAGES.ACCESSORY28D, night: IMAGES.ACCESSORY28N, rarity: RARITY.DIAMOND, author: "pizza wa", name: "Starfish"}, {id: 37, day: IMAGES.ACCESSORY37D, night: IMAGES.ACCESSORY37N, rarity: RARITY.DIAMOND, author: "eogito", name: "Berry"}, {id: 39, day: IMAGES.ACCESSORY39D, night: IMAGES.ACCESSORY39N, rarity: RARITY.DIAMOND, author: "eogito", name: "Flake"}, {id: 43, day: IMAGES.ACCESSORY43D, night: IMAGES.ACCESSORY43N, rarity: RARITY.DIAMOND, author: "eogito", name: "Leaf "}, {id: 61, day: IMAGES.ACCESSORY49D, night: IMAGES.ACCESSORY49N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "A sword in your head"}, {id: 62, day: IMAGES.ACCESSORY51D, night: IMAGES.ACCESSORY51N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Winter Scarf"}, {id: 64, day: IMAGES.ACCESSORY53D, night: IMAGES.ACCESSORY53N, rarity: RARITY.DIAMOND, author: "eogito", name: "Winter Scarf 2"}, {id: 66, day: IMAGES.ACCESSORY54D, night: IMAGES.ACCESSORY54N, rarity: RARITY.DIAMOND, author: "eogito", name: "Winter Scarf 3"}, {id: 70, day: IMAGES.ACCESSORY58D, night: IMAGES.ACCESSORY58N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Mask with animal tracks"}, {id: 71, day: IMAGES.ACCESSORY59D, night: IMAGES.ACCESSORY59N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Spring Mask"}, {id: 72, day: IMAGES.ACCESSORY60D, night: IMAGES.ACCESSORY60N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Pink Mask"}, {id: 73, day: IMAGES.ACCESSORY61D, night: IMAGES.ACCESSORY61N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Blue Mask"}, {id: 76, day: IMAGES.ACCESSORY64D, night: IMAGES.ACCESSORY64N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Military Mask"}, {id: 77, day: IMAGES.ACCESSORY65D, night: IMAGES.ACCESSORY65N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Orange Mask"}, {id: 78, day: IMAGES.ACCESSORY66D, night: IMAGES.ACCESSORY66N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "White and Red Points Mask"}, {id: 80, day: IMAGES.ACCESSORY68D, night: IMAGES.ACCESSORY68N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Stick out your tongue Mask"}, {id: 81, day: IMAGES.ACCESSORY69D, night: IMAGES.ACCESSORY69N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Two Teeth Mask"}, {id: 82, day: IMAGES.ACCESSORY70D, night: IMAGES.ACCESSORY70N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Make-up Mask"}, {id: 83, day: IMAGES.ACCESSORY71D, night: IMAGES.ACCESSORY71N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Sad Mask"}, {id: 84, day: IMAGES.ACCESSORY72D, night: IMAGES.ACCESSORY72N, rarity: RARITY.DIAMOND, author: "Starve.io", name: "Happy Mask"}, {id: 90, day: IMAGES.ACCESSORY79D, night: IMAGES.ACCESSORY79N, rarity: RARITY.DIAMOND, author: "aloner", name: "Blood"}, {id: 27, day: IMAGES.ACCESSORY27D, night: IMAGES.ACCESSORY27N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Clown Face"}, {id: 20, day: IMAGES.ACCESSORY20D, night: IMAGES.ACCESSORY20N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Sunglasses 3"}, {id: 32, day: IMAGES.ACCESSORY32D, night: IMAGES.ACCESSORY32N, rarity: RARITY.AMETHYST, author: "eogito", name: "Engineer's Glasses"}, {id: 33, day: IMAGES.ACCESSORY33D, night: IMAGES.ACCESSORY33N, rarity: RARITY.AMETHYST, author: "eogito", name: "Engineer's Monocle"}, {id: 34, day: IMAGES.ACCESSORY34D, night: IMAGES.ACCESSORY34N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Mauve's butt"}, {id: 41, day: IMAGES.ACCESSORY41D, night: IMAGES.ACCESSORY41N, rarity: RARITY.AMETHYST, author: "eogito", name: "Lapa Head"}, {id: 42, day: IMAGES.ACCESSORY42D, night: IMAGES.ACCESSORY42N, rarity: RARITY.AMETHYST, author: "eogito", name: "Lapa Head "}, {id: 85, day: IMAGES.ACCESSORY73D, night: IMAGES.ACCESSORY73N, rarity: RARITY.AMETHYST, author: "Starve.io", name: "Mask and Glasses"}, {id: 60, day: IMAGES.ACCESSORY48D, night: IMAGES.ACCESSORY48N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Jason"}, {id: 26, day: IMAGES.ACCESSORY26D, night: IMAGES.ACCESSORY26N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Devil Horns"}, {id: 18, day: IMAGES.ACCESSORY18D, night: IMAGES.ACCESSORY18N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Big Boss"}, {id: 35, day: IMAGES.ACCESSORY35D, night: IMAGES.ACCESSORY35N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Baby Kraken"}, {id: 63, day: IMAGES.ACCESSORY52D, night: IMAGES.ACCESSORY52N, rarity: RARITY.REIDITE, author: "eogito", name: "Deer Antlers"}, {id: 65, day: IMAGES.ACCESSORY45D, night: IMAGES.ACCESSORY45N, rarity: RARITY.REIDITE, author: "eogito", name: "Baby Dragon on your head"}, {id: 86, day: IMAGES.ACCESSORY74D, night: IMAGES.ACCESSORY74N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Gaz Mask and Glasses"}, {id: 87, day: IMAGES.ACCESSORY75D, night: IMAGES.ACCESSORY75N, rarity: RARITY.REIDITE, author: "Starve.io", name: "Pink Gaz Mask and Glasses"}, {id: 88, day: IMAGES.ACCESSORY76D, night: IMAGES.ACCESSORY76N, rarity: RARITY.REIDITE, author: "eogito", name: "Engineer Glasses"}, {id: 45, day: IMAGES.LEVEL5D, night: IMAGES.LEVEL5N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 5", level: 5}, {id: 46, day: IMAGES.LEVEL10D, night: IMAGES.LEVEL10N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 10", level: 10}, {id: 47, day: IMAGES.LEVEL15D, night: IMAGES.LEVEL15N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 15", level: 15}, {id: 48, day: IMAGES.LEVEL20D, night: IMAGES.LEVEL20N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 20", level: 20}, {id: 49, day: IMAGES.LEVEL25D, night: IMAGES.LEVEL25N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 25", level: 25}, {id: 50, day: IMAGES.LEVEL30D, night: IMAGES.LEVEL30N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 30", level: 30}, {id: 51, day: IMAGES.LEVEL35D, night: IMAGES.LEVEL35N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 35", level: 35}, {id: 52, day: IMAGES.LEVEL40D, night: IMAGES.LEVEL40N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 40", level: 40}, {id: 53, day: IMAGES.LEVEL45D, night: IMAGES.LEVEL45N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 45", level: 45}, {id: 54, day: IMAGES.LEVEL50D, night: IMAGES.LEVEL50N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 50", level: 50}, {id: 55, day: IMAGES.LEVEL55D, night: IMAGES.LEVEL55N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 55", level: 55}, {id: 56, day: IMAGES.LEVEL60D, night: IMAGES.LEVEL60N, rarity: RARITY.LEVEL, author: "Starve.io", name: "More than Level 60", level: 60}]};
  WORLD.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21);
  WORLD.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20);
  sprite[SPRITE.BODY] = [];
  sprite[SPRITE.HAND] = [];
  sprite[SPRITE.CRATE] = [];
  sprite[SPRITE.BOOK] = [];
  sprite[SPRITE.BAG] = [];
  sprite[SPRITE.ACCESSORY] = [];
  for (var vang = 0; vang < COSMETICS.SKIN.length; vang++) {
    sprite[SPRITE.BODY][vang] = [COSMETICS.SKIN[vang].day, COSMETICS.SKIN[vang].night];
    sprite[SPRITE.HAND][vang] = [COSMETICS.SKIN[vang].dayHand, COSMETICS.SKIN[vang].nightHand];
  }
  for (var vang = 0; vang < COSMETICS.BOOK.length; vang++) {
    sprite[SPRITE.BOOK][vang] = [COSMETICS.BOOK[vang].day, COSMETICS.BOOK[vang].night];
  }
  for (var vang = 0; vang < COSMETICS.CRATE.length; vang++) {
    sprite[SPRITE.CRATE][vang] = [COSMETICS.CRATE[vang].day, COSMETICS.CRATE[vang].night];
  }
  for (var vang = 0; vang < COSMETICS.BAG.length; vang++) {
    sprite[SPRITE.BAG][vang] = [COSMETICS.BAG[vang].day, COSMETICS.BAG[vang].night];
  }
  for (var vang = 0; vang < COSMETICS.ACCESSORY.length; vang++) {
    sprite[SPRITE.ACCESSORY][vang] = [COSMETICS.ACCESSORY[vang].day, COSMETICS.ACCESSORY[vang].night];
  }
};
function fill_path(mellani, correena, symone, jakelin) {
  correena && (mellani.fillStyle = correena, mellani.fill());
  symone && (mellani.lineWidth = jakelin, mellani.strokeStyle = symone, mellani.stroke());
}
function round_rect(domnik, tyelise, branda, kevinkhang, ludwig, tynlie) {
  kevinkhang < 2 * tynlie && (tynlie = kevinkhang / 2);
  ludwig < 2 * tynlie && (tynlie = ludwig / 2);
  0 > tynlie && (tynlie = 0);
  domnik.beginPath();
  domnik.moveTo(tyelise + tynlie, branda);
  domnik.arcTo(tyelise + kevinkhang, branda, tyelise + kevinkhang, branda + ludwig, tynlie);
  domnik.arcTo(tyelise + kevinkhang, branda + ludwig, tyelise, branda + ludwig, tynlie);
  domnik.arcTo(tyelise, branda + ludwig, tyelise, branda, tynlie);
  domnik.arcTo(tyelise, branda, tyelise + kevinkhang, branda, tynlie);
  domnik.closePath();
}
function semi_round_rect(shanteka, yannick, ciarrah, ellieanne, tomer, yanill) {
  ellieanne < 2 * yanill && (yanill = ellieanne / 2);
  tomer < 2 * yanill && (yanill = tomer / 2);
  0 > yanill && (yanill = 0);
  shanteka.beginPath();
  shanteka.moveTo(yannick + yanill, ciarrah);
  shanteka.arcTo(yannick + ellieanne, ciarrah, yannick + ellieanne, ciarrah + tomer, 0);
  shanteka.arcTo(yannick + ellieanne, ciarrah + tomer, yannick, ciarrah + tomer, yanill);
  shanteka.arcTo(yannick, ciarrah + tomer, yannick, ciarrah, 0);
  shanteka.arcTo(yannick, ciarrah, yannick + ellieanne, ciarrah, yanill);
  shanteka.closePath();
}
function circle(alois, travonn, tywan, duna) {
  alois.beginPath();
  alois.arc(travonn, tywan, duna, 0, Math.PI * 2);
}
function circle_angle(agostina, tennelle, sadea, lanney, panayiota) {
  agostina.beginPath();
  agostina.lineCap = "round";
  agostina.arc(tennelle, sadea, lanney, 0, Math.PI * 2 * panayiota);
}
function round_regular_polygon(kadmiel, nipsey, javad, nikkia) {
  var cheridan = Math.PI * 2 / nipsey;
  kadmiel.beginPath();
  var aylia = [{x: javad, y: 0}];
  var ajhane = [];
  for (var lajeanna = 1; lajeanna < nipsey; lajeanna++) {
    aylia.push({x: Math.cos(lajeanna * cheridan) * javad, y: Math.sin(lajeanna * cheridan) * javad});
    var iley = aylia.length;
    ajhane.push(Utils.middle_point(aylia[iley - 2], aylia[iley - 1]));
  }
  ajhane.push(Utils.middle_point(aylia[aylia.length - 1], aylia[0]));
  var kaselyn = ajhane[ajhane.length - 1];
  kadmiel.moveTo(kaselyn.x, kaselyn.y);
  for (var lajeanna = 0; lajeanna < nipsey; lajeanna++) {
    kadmiel.arcTo(aylia[lajeanna].x, aylia[lajeanna].y, ajhane[lajeanna].x, ajhane[lajeanna].y, nikkia);
  }
  kadmiel.closePath();
}
function create_rotated_img(raffinee, shallen) {
  var melachi = document.createElement("canvas");
  var tatyanna = melachi.getContext("2d");
  var rasmine = Math.sqrt(shallen.width * shallen.width + shallen.height * shallen.height);
  d2 = rasmine / 2;
  melachi.width = rasmine;
  melachi.height = rasmine;
  tatyanna.translate(d2, d2);
  tatyanna.rotate(raffinee);
  tatyanna.drawImage(shallen, -shallen.width / 2, -shallen.height / 2);
  return melachi;
}
function create_message(mende, sanna) {
  var ardene = document.createElement("canvas");
  var alanis = ardene.getContext("2d");
  var antrone = Math.floor(mende * 28);
  var ryahn = Math.floor(mende * 20);
  alanis.font = ryahn + "px Baloo Paaji";
  var ples = 8 * mende;
  var lalitha = alanis.measureText(sanna).width + ples * 2;
  ardene.width = lalitha;
  ardene.height = antrone;
  round_rect(alanis, 0, 0, lalitha, antrone, 10 * mende);
  alanis.globalAlpha = .5;
  fill_path(alanis, "#000");
  alanis.globalAlpha = 1;
  alanis.textBaseline = "middle";
  alanis.font = ryahn + "px Baloo Paaji";
  alanis.beginPath();
  alanis.fillStyle = "#FFF";
  alanis.fillText(sanna, ples, antrone / 2);
  return ardene;
}
function create_accessory(maelana, mcadoo, ademola) {
  var harshdeep = document.createElement("canvas");
  var narvie = harshdeep.getContext("2d");
  harshdeep.width = 120 * maelana;
  harshdeep.height = 110 * maelana;
  if (ademola == 1) {
    circle(narvie, 35 * maelana, 75 * maelana, 19.72308292331602 * maelana);
    fill_path(narvie, mcadoo[1], mcadoo[0], 4 * maelana);
    narvie.save();
    narvie.translate(11 * maelana, 77 * maelana);
    round_rect(narvie, -4 * maelana, -4 * maelana, 8 * maelana, 8 * maelana, 10 * maelana);
    narvie.restore();
    fill_path(narvie, undefined, mcadoo[0], 4 * maelana);
    narvie.beginPath();
    narvie.lineCap = "round";
    narvie.lineJoin = "round";
    narvie.moveTo(11 * maelana, 81 * maelana);
    narvie.bezierCurveTo(13 * maelana, 105 * maelana, 9 * maelana, 106 * maelana, 8 * maelana, 91 * maelana);
    fill_path(narvie, undefined, mcadoo[0], 4 * maelana);
  } else {
    if (ademola == 2) {
      circle(narvie, 85 * maelana, 75 * maelana, 16 * maelana);
      fill_path(narvie, mcadoo[0], mcadoo[0], 4 * maelana);
      narvie.scale(-1.7 * maelana, 1.7 * maelana);
      narvie.translate(-120 * maelana, 0 * maelana);
      narvie.beginPath();
      narvie.lineCap = "round";
      narvie.lineJoin = "round";
      narvie.moveTo(20 * maelana, 95 * maelana);
      narvie.bezierCurveTo(56.5 * maelana, 54 * maelana, 56.5 * maelana, 54 * maelana, 93 * maelana, 13 * maelana);
      narvie.bezierCurveTo(89 * maelana, 13 * maelana, 89 * maelana, 13 * maelana, 85 * maelana, 13 * maelana);
      narvie.bezierCurveTo(49.5 * maelana, 53 * maelana, 49.5 * maelana, 53 * maelana, 14 * maelana, 93 * maelana);
      narvie.bezierCurveTo(15 * maelana, 94 * maelana, 15 * maelana, 94 * maelana, 19 * maelana, 95 * maelana);
      narvie.closePath();
      fill_path(narvie, mcadoo[0], mcadoo[0], 4 * maelana);
    } else {
      if (ademola == 3) {
        narvie.translate(-52 * maelana, 0);
        narvie.save();
        narvie.translate(84.5 * maelana, 36.5 * maelana);
        narvie.rotate(-0.96);
        round_rect(narvie, -5.5 * maelana, -15.5 * maelana, 11 * maelana, 31 * maelana, 4 * maelana);
        narvie.restore();
        fill_path(narvie, mcadoo[0], mcadoo[1], 4 * maelana);
        narvie.save();
        narvie.translate(84 * maelana, 36 * maelana);
        narvie.rotate(.64);
        round_rect(narvie, -5 * maelana, -16 * maelana, 10 * maelana, 32 * maelana, 4 * maelana);
        narvie.restore();
        fill_path(narvie, mcadoo[0], mcadoo[1], 4 * maelana);
        narvie.save();
        narvie.translate(83.5 * maelana, 36.5 * maelana);
        narvie.rotate(.68);
        round_rect(narvie, -2.5 * maelana, -6.5 * maelana, 5 * maelana, 13 * maelana, 4 * maelana);
        narvie.restore();
        fill_path(narvie, mcadoo[1]);
      } else {
        if (ademola == 4) {
          circle(narvie, 35 * maelana, 85 * maelana, 17 * maelana);
          fill_path(narvie, mcadoo[1], mcadoo[0], 3 * maelana);
          circle(narvie, 85 * maelana, 85 * maelana, 17 * maelana);
          fill_path(narvie, mcadoo[1], mcadoo[0], 3 * maelana);
          narvie.beginPath();
          narvie.lineCap = "round";
          narvie.lineJoin = "round";
          narvie.moveTo(53 * maelana, 86 * maelana);
          narvie.bezierCurveTo(59 * maelana, 83 * maelana, 63 * maelana, 83 * maelana, 67 * maelana, 86 * maelana);
          fill_path(narvie, undefined, mcadoo[0], 4 * maelana);
        } else {
          if (ademola == 5) {
            narvie.scale(1.2, 1.2);
            narvie.translate(-27 * maelana, -8 * maelana);
            narvie.scale(1.2, 1.2);
            narvie.translate(-10 * maelana, 0);
            narvie.beginPath();
            narvie.lineCap = "round";
            narvie.lineJoin = "round";
            narvie.moveTo(97 * maelana, 23 * maelana);
            narvie.bezierCurveTo(105 * maelana, 24 * maelana, 107 * maelana, 37 * maelana, 97 * maelana, 39 * maelana);
            narvie.bezierCurveTo(85 * maelana, 40 * maelana, 84 * maelana, 22 * maelana, 97 * maelana, 23 * maelana);
            narvie.closePath();
            fill_path(narvie, undefined, mcadoo[0], 3 * maelana);
            narvie.beginPath();
            narvie.lineCap = "round";
            narvie.lineJoin = "round";
            narvie.moveTo(96 * maelana, 24 * maelana);
            narvie.bezierCurveTo(96 * maelana, 30.5 * maelana, 96 * maelana, 30.5 * maelana, 96 * maelana, 37 * maelana);
            narvie.closePath();
            fill_path(narvie, undefined, mcadoo[0], 3 * maelana);
            narvie.translate(0, -2 * maelana);
            narvie.beginPath();
            narvie.lineCap = "round";
            narvie.lineJoin = "round";
            narvie.moveTo(88 * maelana, 37 * maelana);
            narvie.bezierCurveTo(93 * maelana, 33 * maelana, 91.5 * maelana, 34.5 * maelana, 95 * maelana, 32 * maelana);
            narvie.bezierCurveTo(98.5 * maelana, 34 * maelana, 98.5 * maelana, 34 * maelana, 102 * maelana, 36 * maelana);
            fill_path(narvie, undefined, mcadoo[0], 3 * maelana);
          } else {
            if (ademola == 6) {
              circle(narvie, 13 * maelana, 79 * maelana, 5 * maelana);
              fill_path(narvie, mcadoo[0]);
              circle(narvie, 106 * maelana, 79 * maelana, 5 * maelana);
              fill_path(narvie, mcadoo[0]);
            } else {
              if (ademola == 7) {
                narvie.translate(0 * maelana, 5 * maelana);
                narvie.globalAlpha = .5;
                narvie.beginPath();
                narvie.lineCap = "round";
                narvie.lineJoin = "round";
                narvie.moveTo(27 * maelana, 14.399993896484375 * maelana);
                narvie.bezierCurveTo(29 * maelana, 4.399993896484375 * maelana, 44 * maelana, 16.399993896484375 * maelana, 37 * maelana, 21.399993896484375 * maelana);
                narvie.bezierCurveTo(47 * maelana, 17.399993896484375 * maelana, 45 * maelana, 36.399993896484375 * maelana, 37 * maelana, 32.399993896484375 * maelana);
                narvie.bezierCurveTo(44 * maelana, 40.399993896484375 * maelana, 28 * maelana, 47.399993896484375 * maelana, 26 * maelana, 37.399993896484375 * maelana);
                narvie.bezierCurveTo(22 * maelana, 46.399993896484375 * maelana, 9 * maelana, 37.399993896484375 * maelana, 16 * maelana, 30.399993896484375 * maelana);
                narvie.bezierCurveTo(6 * maelana, 34.399993896484375 * maelana, 9 * maelana, 15.399993896484375 * maelana, 18 * maelana, 19.399993896484375 * maelana);
                narvie.bezierCurveTo(10 * maelana, 12.399993896484375 * maelana, 26 * maelana, 7.399993896484375 * maelana, 26 * maelana, 14.399993896484375 * maelana);
                narvie.closePath();
                fill_path(narvie, mcadoo[3]);
                narvie.globalAlpha = 1;
                narvie.translate(0 * maelana, -5 * maelana);
                narvie.beginPath();
                narvie.lineCap = "round";
                narvie.lineJoin = "round";
                narvie.moveTo(27 * maelana, 14.399993896484375 * maelana);
                narvie.bezierCurveTo(29 * maelana, 4.399993896484375 * maelana, 44 * maelana, 16.399993896484375 * maelana, 37 * maelana, 21.399993896484375 * maelana);
                narvie.bezierCurveTo(47 * maelana, 17.399993896484375 * maelana, 45 * maelana, 36.399993896484375 * maelana, 37 * maelana, 32.399993896484375 * maelana);
                narvie.bezierCurveTo(44 * maelana, 40.399993896484375 * maelana, 28 * maelana, 47.399993896484375 * maelana, 26 * maelana, 37.399993896484375 * maelana);
                narvie.bezierCurveTo(22 * maelana, 46.399993896484375 * maelana, 9 * maelana, 37.399993896484375 * maelana, 16 * maelana, 30.399993896484375 * maelana);
                narvie.bezierCurveTo(6 * maelana, 34.399993896484375 * maelana, 9 * maelana, 15.399993896484375 * maelana, 18 * maelana, 19.399993896484375 * maelana);
                narvie.bezierCurveTo(10 * maelana, 12.399993896484375 * maelana, 26 * maelana, 7.399993896484375 * maelana, 26 * maelana, 14.399993896484375 * maelana);
                narvie.closePath();
                fill_path(narvie, mcadoo[1], mcadoo[2], 2 * maelana);
                circle(narvie, 27 * maelana, 26.800003051757812 * maelana, 5 * maelana);
                fill_path(narvie, mcadoo[0]);
              } else {
                if (ademola == 8) {
                  narvie.translate(-32 * maelana, -19 * maelana);
                  narvie.beginPath();
                  narvie.lineCap = "round";
                  narvie.lineJoin = "round";
                  narvie.moveTo(123 * maelana, 46 * maelana);
                  narvie.bezierCurveTo(132 * maelana, 46 * maelana, 135 * maelana, 39 * maelana, 134 * maelana, 33 * maelana);
                  narvie.bezierCurveTo(145 * maelana, 43 * maelana, 142 * maelana, 65 * maelana, 127 * maelana, 66 * maelana);
                  narvie.bezierCurveTo(118 * maelana, 61 * maelana, 119 * maelana, 51 * maelana, 123 * maelana, 46 * maelana);
                  narvie.closePath();
                  fill_path(narvie, mcadoo[0], mcadoo[1], 4 * maelana);
                  narvie.beginPath();
                  narvie.lineCap = "round";
                  narvie.lineJoin = "round";
                  narvie.moveTo(49 * maelana, 32 * maelana);
                  narvie.bezierCurveTo(49 * maelana, 44 * maelana, 56 * maelana, 44 * maelana, 61 * maelana, 46 * maelana);
                  narvie.bezierCurveTo(67 * maelana, 52 * maelana, 65 * maelana, 65 * maelana, 55 * maelana, 66 * maelana);
                  narvie.bezierCurveTo(37 * maelana, 60 * maelana, 42 * maelana, 38 * maelana, 49 * maelana, 32 * maelana);
                  narvie.closePath();
                  fill_path(narvie, mcadoo[0], mcadoo[1], 4 * maelana);
                }
              }
            }
          }
        }
      }
    }
  }
  return harshdeep;
}
function create_hurt_player(sayon, shalonna) {
  var alrick = document.createElement("canvas");
  var abyan = alrick.getContext("2d");
  var cortavia = sayon * 120;
  var habert = sayon * 110;
  var cartney = cortavia / 2;
  var jaidden = habert / 2;
  var reagon = sayon * 20;
  var wakeisha = sayon * 112;
  var matheus = sayon * 82;
  var ldarius = wakeisha / 2;
  var keynu = matheus / 2;
  var beola = sayon * 4;
  alrick.width = cortavia;
  alrick.height = habert;
  abyan.globalAlpha = 1;
  abyan.translate(cartney, jaidden);
  round_rect(abyan, -ldarius, -keynu, wakeisha, matheus, reagon);
  fill_path(abyan, shalonna, shalonna, beola);
  return alrick;
}
function create_player(keteria, latese, ashanae) {
  var stephenia = document.createElement("canvas");
  var jessiemae = stephenia.getContext("2d");
  stephenia.width = 176 * keteria;
  stephenia.height = 127 * keteria;
  if (ashanae == 8) {
    jessiemae.globalAlpha = .3;
    jessiemae.save();
    jessiemae.translate(87 * keteria, 64.5 * keteria);
    round_rect(jessiemae, -56 * keteria, -41.5 * keteria, 112 * keteria, 83 * keteria, 18 * keteria);
    jessiemae.restore();
    fill_path(jessiemae, latese[0], latese[1], 4 * keteria);
    jessiemae.save();
    jessiemae.translate(82 * keteria, 69.5 * keteria);
    round_rect(jessiemae, -51 * keteria, -36.5 * keteria, 102 * keteria, 73 * keteria, 18 * keteria);
    jessiemae.restore();
    fill_path(jessiemae, latese[2], latese[1], 4 * keteria);
    jessiemae.beginPath();
    jessiemae.lineCap = "round";
    jessiemae.lineJoin = "round";
    jessiemae.moveTo(55 * keteria, 41 * keteria);
    jessiemae.bezierCurveTo(38 * keteria, 41 * keteria, 37 * keteria, 50 * keteria, 38 * keteria, 61 * keteria);
    jessiemae.bezierCurveTo(42 * keteria, 50 * keteria, 46 * keteria, 46 * keteria, 55 * keteria, 42 * keteria);
    jessiemae.closePath();
    fill_path(jessiemae, latese[3]);
    jessiemae.globalAlpha = 1;
    jessiemae.translate(26 * keteria, 10 * keteria);
    circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
    fill_path(jessiemae, latese[4]);
    circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
    fill_path(jessiemae, latese[4]);
    circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
    fill_path(jessiemae, latese[5]);
    circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
    fill_path(jessiemae, latese[5]);
  } else {
    if (ashanae == 9) {
      var stephenia = document.createElement("canvas");
      var jessiemae = stephenia.getContext("2d");
      stephenia.width = 332 * keteria;
      stephenia.height = 127 * keteria;
      jessiemae.globalAlpha = .5;
      jessiemae.translate(0, -36 * keteria);
      jessiemae.save();
      jessiemae.translate(165.25 * keteria, 106.84375 * keteria);
      round_rect(jessiemae, -56.5 * keteria, -41.5 * keteria, 113 * keteria, 83 * keteria, 18 * keteria);
      jessiemae.restore();
      fill_path(jessiemae, latese[0]);
      jessiemae.globalAlpha = 1;
      jessiemae.translate(0, 20 * keteria);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(210.75 * keteria, 72.84375 * keteria);
      jessiemae.bezierCurveTo(238.75 * keteria, 74.84375 * keteria, 270.75 * keteria, 85.84375 * keteria, 269.75 * keteria, 90.84375 * keteria);
      jessiemae.bezierCurveTo(268.75 * keteria, 94.84375 * keteria, 221.75 * keteria, 81.84375 * keteria, 206.75 * keteria, 85.84375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(208.75 * keteria, 69.84375 * keteria);
      jessiemae.bezierCurveTo(241.75 * keteria, 61.84375 * keteria, 265.75 * keteria, 65.84375 * keteria, 286.75 * keteria, 69.84375 * keteria);
      jessiemae.bezierCurveTo(290.75 * keteria, 75.84375 * keteria, 225.75 * keteria, 69.84375 * keteria, 215.75 * keteria, 80.84375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(209.75 * keteria, 69.84375 * keteria);
      jessiemae.bezierCurveTo(228.75 * keteria, 51.84375 * keteria, 265.75 * keteria, 46.84375 * keteria, 294.75 * keteria, 51.84375 * keteria);
      jessiemae.bezierCurveTo(301.75 * keteria, 55.84375 * keteria, 224.75 * keteria, 60.84375 * keteria, 216.75 * keteria, 80.84375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(193.75 * keteria, 72.84375 * keteria);
      jessiemae.bezierCurveTo(206.75 * keteria, 47.84375 * keteria, 221.75 * keteria, 37.84375 * keteria, 249.75 * keteria, 35.84375 * keteria);
      jessiemae.bezierCurveTo(264.75 * keteria, 34.84375 * keteria, 305.75 * keteria, 16.84375 * keteria, 300.75 * keteria, 24.84375 * keteria);
      jessiemae.bezierCurveTo(273.75 * keteria, 45.84375 * keteria, 245.75 * keteria, 46.84375 * keteria, 235.75 * keteria, 62.84375 * keteria);
      jessiemae.bezierCurveTo(218.75 * keteria, 82.84375 * keteria, 215.75 * keteria, 87.84375 * keteria, 199.75 * keteria, 84.84375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(126.75 * keteria, 80.34375 * keteria);
      jessiemae.bezierCurveTo(94.75 * keteria, 88.34375 * keteria, 83.75 * keteria, 88.34375 * keteria, 65.75 * keteria, 90.34375 * keteria);
      jessiemae.bezierCurveTo(61.75 * keteria, 87.34375 * keteria, 86.75 * keteria, 77.34375 * keteria, 129.75 * keteria, 70.34375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(120.75 * keteria, 72.34375 * keteria);
      jessiemae.bezierCurveTo(128.75 * keteria, 62.34375 * keteria, 98.75 * keteria, 64.34375 * keteria, 49.75 * keteria, 68.34375 * keteria);
      jessiemae.bezierCurveTo(34.75 * keteria, 75.34375 * keteria, 101.75 * keteria, 72.34375 * keteria, 124.75 * keteria, 78.34375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(128.75 * keteria, 76.34375 * keteria);
      jessiemae.bezierCurveTo(111.75 * keteria, 54.34375 * keteria, 69.75 * keteria, 48.34375 * keteria, 39.75 * keteria, 50.34375 * keteria);
      jessiemae.bezierCurveTo(26.75 * keteria, 53.34375 * keteria, 86.75 * keteria, 59.34375 * keteria, 123.75 * keteria, 78.34375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(143.75 * keteria, 74.34375 * keteria);
      jessiemae.bezierCurveTo(128.75 * keteria, 48.34375 * keteria, 108.75 * keteria, 35.34375 * keteria, 81.75 * keteria, 35.34375 * keteria);
      jessiemae.bezierCurveTo(63.75 * keteria, 33.34375 * keteria, 26.75 * keteria, 15.34375 * keteria, 29.75 * keteria, 25.34375 * keteria);
      jessiemae.bezierCurveTo(33.75 * keteria, 30.34375 * keteria, 49.75 * keteria, 40.34375 * keteria, 70.75 * keteria, 49.34375 * keteria);
      jessiemae.bezierCurveTo(94.75 * keteria, 54.34375 * keteria, 104.75 * keteria, 72.34375 * keteria, 128.75 * keteria, 88.34375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      jessiemae.translate(0, -28 * keteria);
      jessiemae.save();
      jessiemae.translate(165.25 * keteria, 106.84375 * keteria);
      round_rect(jessiemae, -56.5 * keteria, -41.5 * keteria, 113 * keteria, 83 * keteria, 18 * keteria);
      jessiemae.restore();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      jessiemae.translate(28 * keteria, 15 * keteria);
      jessiemae.translate(0, 8 * keteria);
      jessiemae.globalAlpha = .5;
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(83 * keteria, 52 * keteria);
      jessiemae.bezierCurveTo(78 * keteria, 65 * keteria, 110 * keteria, 72 * keteria, 139 * keteria, 71 * keteria);
      jessiemae.bezierCurveTo(176 * keteria, 71 * keteria, 193 * keteria, 61 * keteria, 191 * keteria, 54 * keteria);
      jessiemae.bezierCurveTo(202 * keteria, 58 * keteria, 198 * keteria, 72 * keteria, 187 * keteria, 75 * keteria);
      jessiemae.bezierCurveTo(143 * keteria, 87 * keteria, 107 * keteria, 79 * keteria, 89 * keteria, 75 * keteria);
      jessiemae.bezierCurveTo(72 * keteria, 69 * keteria, 74 * keteria, 58 * keteria, 83 * keteria, 52 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[0]);
      jessiemae.globalAlpha = 1;
      jessiemae.translate(0 * keteria, -8 * keteria);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(83 * keteria, 52 * keteria);
      jessiemae.bezierCurveTo(78 * keteria, 65 * keteria, 110 * keteria, 72 * keteria, 139 * keteria, 71 * keteria);
      jessiemae.bezierCurveTo(176 * keteria, 71 * keteria, 193 * keteria, 61 * keteria, 191 * keteria, 54 * keteria);
      jessiemae.bezierCurveTo(202 * keteria, 58 * keteria, 198 * keteria, 72 * keteria, 187 * keteria, 75 * keteria);
      jessiemae.bezierCurveTo(143 * keteria, 87 * keteria, 107 * keteria, 79 * keteria, 89 * keteria, 75 * keteria);
      jessiemae.bezierCurveTo(72 * keteria, 69 * keteria, 74 * keteria, 58 * keteria, 83 * keteria, 52 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[5], latese[6], 4 * keteria);
      jessiemae.translate(-28 * keteria, -15 * keteria);
      circle(jessiemae, 141.75 * keteria, 127.34375 * keteria, 15 * keteria);
      fill_path(jessiemae, latese[3]);
      circle(jessiemae, 191.75 * keteria, 127.09375 * keteria, 15 * keteria);
      fill_path(jessiemae, latese[3]);
      circle(jessiemae, 138.75 * keteria, 119.34375 * keteria, 5 * keteria);
      fill_path(jessiemae, latese[4]);
      circle(jessiemae, 188.75 * keteria, 119.34375 * keteria, 5 * keteria);
      fill_path(jessiemae, latese[4]);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(125.75 * keteria, 139.34375 * keteria);
      jessiemae.bezierCurveTo(134.75 * keteria, 134.34375 * keteria, 143.75 * keteria, 134.34375 * keteria, 156.75 * keteria, 139.34375 * keteria);
      jessiemae.bezierCurveTo(153.25 * keteria, 141.84375 * keteria, 153.25 * keteria, 141.84375 * keteria, 149.75 * keteria, 144.34375 * keteria);
      jessiemae.bezierCurveTo(140.25 * keteria, 144.34375 * keteria, 140.25 * keteria, 144.34375 * keteria, 130.75 * keteria, 144.34375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1]);
      jessiemae.beginPath();
      jessiemae.lineCap = "round";
      jessiemae.lineJoin = "round";
      jessiemae.moveTo(176.75 * keteria, 139.34375 * keteria);
      jessiemae.bezierCurveTo(183.75 * keteria, 135.34375 * keteria, 199.75 * keteria, 135.34375 * keteria, 205.75 * keteria, 139.34375 * keteria);
      jessiemae.bezierCurveTo(203.25 * keteria, 141.34375 * keteria, 203.25 * keteria, 141.34375 * keteria, 200.75 * keteria, 143.34375 * keteria);
      jessiemae.bezierCurveTo(190.75 * keteria, 143.84375 * keteria, 190.75 * keteria, 143.84375 * keteria, 180.75 * keteria, 144.34375 * keteria);
      jessiemae.closePath();
      fill_path(jessiemae, latese[1]);
    } else {
      jessiemae.globalAlpha = .75;
      jessiemae.translate(0, 8 * keteria);
      jessiemae.save();
      jessiemae.translate(87 * keteria, 64.5 * keteria);
      round_rect(jessiemae, -56 * keteria, -41.5 * keteria, 112 * keteria, 83 * keteria, 18 * keteria);
      jessiemae.restore();
      fill_path(jessiemae, latese[0]);
      jessiemae.globalAlpha = 1;
      jessiemae.translate(0, -8 * keteria);
      jessiemae.save();
      jessiemae.translate(87 * keteria, 64.5 * keteria);
      round_rect(jessiemae, -56 * keteria, -41.5 * keteria, 112 * keteria, 83 * keteria, 18 * keteria);
      jessiemae.restore();
      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
      if (ashanae == 0) {
        jessiemae.translate(27 * keteria, 10 * keteria);
        circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
        fill_path(jessiemae, latese[3]);
        circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
        fill_path(jessiemae, latese[3]);
        circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
        fill_path(jessiemae, latese[4]);
        circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
        fill_path(jessiemae, latese[4]);
      } else {
        if (ashanae == 1) {
          jessiemae.beginPath();
          jessiemae.lineCap = "round";
          jessiemae.lineJoin = "round";
          jessiemae.moveTo(35 * keteria, 73 * keteria);
          jessiemae.bezierCurveTo(40 * keteria, 72 * keteria, 38 * keteria, 68 * keteria, 35 * keteria, 67 * keteria);
          jessiemae.bezierCurveTo(25 * keteria, 67 * keteria, 21 * keteria, 65 * keteria, 16 * keteria, 61 * keteria);
          jessiemae.bezierCurveTo(10 * keteria, 60 * keteria, 16 * keteria, 64 * keteria, 20 * keteria, 67 * keteria);
          jessiemae.bezierCurveTo(3 * keteria, 70 * keteria, 12 * keteria, 68.5 * keteria, 4 * keteria, 70 * keteria);
          jessiemae.bezierCurveTo(2 * keteria, 71 * keteria, 6 * keteria, 72 * keteria, 13 * keteria, 73 * keteria);
          jessiemae.bezierCurveTo(12.5 * keteria, 76.5 * keteria, 12.5 * keteria, 76.5 * keteria, 12 * keteria, 80 * keteria);
          jessiemae.bezierCurveTo(12 * keteria, 83 * keteria, 15 * keteria, 80 * keteria, 18 * keteria, 73 * keteria);
          jessiemae.bezierCurveTo(26.5 * keteria, 73.5 * keteria, 26.5 * keteria, 73.5 * keteria, 35 * keteria, 74 * keteria);
          jessiemae.closePath();
          fill_path(jessiemae, latese[5], latese[6], 4 * keteria);
          jessiemae.beginPath();
          jessiemae.lineCap = "round";
          jessiemae.lineJoin = "round";
          jessiemae.moveTo(134 * keteria, 64 * keteria);
          jessiemae.bezierCurveTo(141.5 * keteria, 64 * keteria, 141.5 * keteria, 64 * keteria, 149 * keteria, 64 * keteria);
          jessiemae.bezierCurveTo(153 * keteria, 59 * keteria, 156 * keteria, 56 * keteria, 159 * keteria, 56 * keteria);
          jessiemae.bezierCurveTo(161 * keteria, 57 * keteria, 160 * keteria, 60 * keteria, 155 * keteria, 65 * keteria);
          jessiemae.bezierCurveTo(165 * keteria, 71 * keteria, 168 * keteria, 72 * keteria, 169 * keteria, 74 * keteria);
          jessiemae.bezierCurveTo(169 * keteria, 76 * keteria, 159 * keteria, 71 * keteria, 156 * keteria, 72 * keteria);
          jessiemae.bezierCurveTo(154 * keteria, 72 * keteria, 155 * keteria, 75 * keteria, 156 * keteria, 79 * keteria);
          jessiemae.bezierCurveTo(155 * keteria, 81 * keteria, 153 * keteria, 78 * keteria, 150 * keteria, 72 * keteria);
          jessiemae.bezierCurveTo(142 * keteria, 71.5 * keteria, 142 * keteria, 71.5 * keteria, 134 * keteria, 71 * keteria);
          jessiemae.bezierCurveTo(130 * keteria, 69 * keteria, 131 * keteria, 65 * keteria, 135 * keteria, 64 * keteria);
          jessiemae.closePath();
          fill_path(jessiemae, latese[5], latese[6], 4 * keteria);
          jessiemae.beginPath();
          jessiemae.lineCap = "round";
          jessiemae.lineJoin = "round";
          jessiemae.moveTo(80 * keteria, 95 * keteria);
          jessiemae.bezierCurveTo(83 * keteria, 88 * keteria, 89 * keteria, 88 * keteria, 92 * keteria, 95 * keteria);
          jessiemae.bezierCurveTo(92 * keteria, 105 * keteria, 88 * keteria, 110 * keteria, 86 * keteria, 110 * keteria);
          jessiemae.bezierCurveTo(83 * keteria, 107 * keteria, 82 * keteria, 104 * keteria, 80 * keteria, 96 * keteria);
          jessiemae.closePath();
          fill_path(jessiemae, latese[7], latese[8], 3 * keteria);
          jessiemae.beginPath();
          jessiemae.lineCap = "round";
          jessiemae.lineJoin = "round";
          jessiemae.moveTo(81 * keteria, 100 * keteria);
          jessiemae.bezierCurveTo(82 * keteria, 97 * keteria, 83 * keteria, 96 * keteria, 85 * keteria, 96 * keteria);
          jessiemae.bezierCurveTo(82 * keteria, 100 * keteria, 82 * keteria, 101 * keteria, 83 * keteria, 103 * keteria);
          jessiemae.closePath();
          fill_path(jessiemae, latese[8]);
          jessiemae.beginPath();
          jessiemae.lineCap = "round";
          jessiemae.lineJoin = "round";
          jessiemae.moveTo(83 * keteria, 103 * keteria);
          jessiemae.bezierCurveTo(83 * keteria, 102 * keteria, 84 * keteria, 100 * keteria, 86 * keteria, 100 * keteria);
          jessiemae.bezierCurveTo(84 * keteria, 103 * keteria, 84 * keteria, 105 * keteria, 84 * keteria, 106 * keteria);
          jessiemae.closePath();
          fill_path(jessiemae, latese[8]);
          jessiemae.translate(27 * keteria, 10 * keteria);
          circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
          fill_path(jessiemae, latese[3]);
          circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
          fill_path(jessiemae, latese[3]);
          circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
          fill_path(jessiemae, latese[4]);
          circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
          fill_path(jessiemae, latese[4]);
        } else {
          if (ashanae == 2) {
            jessiemae.beginPath();
            jessiemae.lineCap = "round";
            jessiemae.lineJoin = "round";
            jessiemae.moveTo(48 * keteria, 22 * keteria);
            jessiemae.bezierCurveTo(85.5 * keteria, 22 * keteria, 85.5 * keteria, 22 * keteria, 123 * keteria, 22 * keteria);
            jessiemae.bezierCurveTo(138 * keteria, 23 * keteria, 147 * keteria, 34 * keteria, 143 * keteria, 62 * keteria);
            jessiemae.bezierCurveTo(142 * keteria, 67 * keteria, 144 * keteria, 70 * keteria, 149 * keteria, 73 * keteria);
            jessiemae.bezierCurveTo(147 * keteria, 77 * keteria, 145 * keteria, 77 * keteria, 143 * keteria, 77 * keteria);
            jessiemae.bezierCurveTo(141 * keteria, 85 * keteria, 145 * keteria, 92 * keteria, 148 * keteria, 97 * keteria);
            jessiemae.bezierCurveTo(142 * keteria, 103 * keteria, 134 * keteria, 105 * keteria, 121 * keteria, 106 * keteria);
            jessiemae.bezierCurveTo(85 * keteria, 106 * keteria, 85 * keteria, 106 * keteria, 49 * keteria, 106 * keteria);
            jessiemae.bezierCurveTo(32 * keteria, 104 * keteria, 29 * keteria, 101 * keteria, 24 * keteria, 95 * keteria);
            jessiemae.bezierCurveTo(30 * keteria, 86 * keteria, 31 * keteria, 85 * keteria, 30 * keteria, 78 * keteria);
            jessiemae.bezierCurveTo(27.5 * keteria, 76 * keteria, 27.5 * keteria, 76 * keteria, 25 * keteria, 74 * keteria);
            jessiemae.bezierCurveTo(31 * keteria, 68 * keteria, 31 * keteria, 60 * keteria, 30 * keteria, 46 * keteria);
            jessiemae.bezierCurveTo(31 * keteria, 31 * keteria, 37 * keteria, 23 * keteria, 47 * keteria, 22 * keteria);
            jessiemae.closePath();
            fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
            jessiemae.beginPath();
            jessiemae.lineCap = "round";
            jessiemae.lineJoin = "round";
            jessiemae.moveTo(30 * keteria, 44 * keteria);
            jessiemae.bezierCurveTo(66 * keteria, 48 * keteria, 99 * keteria, 45 * keteria, 141 * keteria, 39 * keteria);
            fill_path(jessiemae, undefined, latese[3], 4 * keteria);
            jessiemae.beginPath();
            jessiemae.lineCap = "round";
            jessiemae.lineJoin = "round";
            jessiemae.moveTo(30 * keteria, 67 * keteria);
            jessiemae.bezierCurveTo(80 * keteria, 44 * keteria, 118 * keteria, 43 * keteria, 141 * keteria, 60 * keteria);
            fill_path(jessiemae, undefined, latese[3], 4 * keteria);
            jessiemae.globalAlpha = .4;
            circle(jessiemae, 31 * keteria, 44 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[4]);
            circle(jessiemae, 42 * keteria, 47 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[5]);
            circle(jessiemae, 70 * keteria, 42 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[6]);
            circle(jessiemae, 53 * keteria, 45 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[7]);
            circle(jessiemae, 103 * keteria, 40 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[8]);
            circle(jessiemae, 116 * keteria, 41 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[5]);
            circle(jessiemae, 131 * keteria, 41 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[4]);
            circle(jessiemae, 39 * keteria, 64 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[7]);
            circle(jessiemae, 51 * keteria, 60 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[6]);
            circle(jessiemae, 74 * keteria, 53 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[4]);
            circle(jessiemae, 83 * keteria, 51 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[8]);
            circle(jessiemae, 95 * keteria, 51 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[6]);
            circle(jessiemae, 107 * keteria, 49 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[7]);
            circle(jessiemae, 120 * keteria, 50 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[4]);
            circle(jessiemae, 137 * keteria, 57 * keteria, 9 * keteria);
            fill_path(jessiemae, latese[5]);
            jessiemae.globalAlpha = 1;
            circle(jessiemae, 31 * keteria, 44 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[4]);
            circle(jessiemae, 42 * keteria, 47 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[5]);
            circle(jessiemae, 53 * keteria, 45 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[7]);
            circle(jessiemae, 70 * keteria, 43 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[6]);
            circle(jessiemae, 50 * keteria, 59 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[6]);
            circle(jessiemae, 39 * keteria, 64 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[7]);
            circle(jessiemae, 83 * keteria, 51 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[4]);
            circle(jessiemae, 74 * keteria, 53 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[8]);
            circle(jessiemae, 95 * keteria, 51 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[6]);
            circle(jessiemae, 103 * keteria, 41 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[8]);
            circle(jessiemae, 107 * keteria, 49 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[7]);
            circle(jessiemae, 116 * keteria, 41 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[5]);
            circle(jessiemae, 131 * keteria, 41 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[4]);
            circle(jessiemae, 137 * keteria, 57 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[5]);
            circle(jessiemae, 120 * keteria, 50 * keteria, 4 * keteria);
            fill_path(jessiemae, latese[4]);
            jessiemae.translate(27 * keteria, 10 * keteria);
            circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
            fill_path(jessiemae, latese[9]);
            circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
            fill_path(jessiemae, latese[9]);
            circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
            fill_path(jessiemae, latese[10]);
            circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
            fill_path(jessiemae, latese[10]);
          } else {
            if (ashanae == 3) {
              jessiemae.beginPath();
              jessiemae.lineCap = "round";
              jessiemae.lineJoin = "round";
              jessiemae.moveTo(23 * keteria, 95 * keteria);
              jessiemae.bezierCurveTo(30 * keteria, 85 * keteria, 30 * keteria, 83 * keteria, 30 * keteria, 72 * keteria);
              jessiemae.bezierCurveTo(30 * keteria, 61.5 * keteria, 30 * keteria, 61.5 * keteria, 30 * keteria, 51 * keteria);
              jessiemae.bezierCurveTo(29 * keteria, 33 * keteria, 42 * keteria, 23 * keteria, 54 * keteria, 24 * keteria);
              jessiemae.bezierCurveTo(86.5 * keteria, 24 * keteria, 86.5 * keteria, 24 * keteria, 119 * keteria, 24 * keteria);
              jessiemae.bezierCurveTo(135 * keteria, 24 * keteria, 143 * keteria, 33 * keteria, 143 * keteria, 47 * keteria);
              jessiemae.bezierCurveTo(143 * keteria, 63.5 * keteria, 143 * keteria, 63.5 * keteria, 143 * keteria, 80 * keteria);
              jessiemae.bezierCurveTo(142 * keteria, 86 * keteria, 147 * keteria, 93 * keteria, 150 * keteria, 96 * keteria);
              jessiemae.bezierCurveTo(144 * keteria, 107 * keteria, 113 * keteria, 112 * keteria, 84 * keteria, 111 * keteria);
              jessiemae.bezierCurveTo(52 * keteria, 112 * keteria, 34 * keteria, 106 * keteria, 23 * keteria, 96 * keteria);
              jessiemae.closePath();
              fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
              jessiemae.beginPath();
              jessiemae.lineCap = "round";
              jessiemae.lineJoin = "round";
              jessiemae.moveTo(30 * keteria, 81 * keteria);
              jessiemae.bezierCurveTo(56 * keteria, 99 * keteria, 104 * keteria, 98 * keteria, 142 * keteria, 84 * keteria);
              jessiemae.bezierCurveTo(145.5 * keteria, 89.5 * keteria, 145.5 * keteria, 89.5 * keteria, 149 * keteria, 95 * keteria);
              jessiemae.bezierCurveTo(142 * keteria, 106 * keteria, 127 * keteria, 110 * keteria, 81 * keteria, 110 * keteria);
              jessiemae.bezierCurveTo(36 * keteria, 112 * keteria, 28 * keteria, 99 * keteria, 23 * keteria, 95 * keteria);
              jessiemae.bezierCurveTo(31 * keteria, 87 * keteria, 31 * keteria, 82 * keteria, 30 * keteria, 81 * keteria);
              jessiemae.closePath();
              fill_path(jessiemae, latese[3], latese[2], 4 * keteria);
              jessiemae.beginPath();
              jessiemae.lineCap = "round";
              jessiemae.lineJoin = "round";
              jessiemae.moveTo(23 * keteria, 95 * keteria);
              jessiemae.bezierCurveTo(30 * keteria, 85 * keteria, 30 * keteria, 83 * keteria, 30 * keteria, 72 * keteria);
              jessiemae.bezierCurveTo(30 * keteria, 61.5 * keteria, 30 * keteria, 61.5 * keteria, 30 * keteria, 51 * keteria);
              jessiemae.bezierCurveTo(29 * keteria, 33 * keteria, 42 * keteria, 23 * keteria, 54 * keteria, 24 * keteria);
              jessiemae.bezierCurveTo(86.5 * keteria, 24 * keteria, 86.5 * keteria, 24 * keteria, 119 * keteria, 24 * keteria);
              jessiemae.bezierCurveTo(135 * keteria, 24 * keteria, 143 * keteria, 33 * keteria, 143 * keteria, 47 * keteria);
              jessiemae.bezierCurveTo(143 * keteria, 63.5 * keteria, 143 * keteria, 63.5 * keteria, 143 * keteria, 80 * keteria);
              jessiemae.bezierCurveTo(142 * keteria, 86 * keteria, 147 * keteria, 93 * keteria, 150 * keteria, 96 * keteria);
              jessiemae.bezierCurveTo(144 * keteria, 107 * keteria, 113 * keteria, 112 * keteria, 84 * keteria, 111 * keteria);
              jessiemae.bezierCurveTo(52 * keteria, 112 * keteria, 34 * keteria, 106 * keteria, 23 * keteria, 96 * keteria);
              jessiemae.closePath();
              fill_path(jessiemae, undefined, latese[2], 4 * keteria);
              jessiemae.translate(27 * keteria, 10 * keteria);
              circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
              fill_path(jessiemae, latese[6]);
              circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
              fill_path(jessiemae, latese[6]);
              circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
              fill_path(jessiemae, latese[7]);
              circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
              fill_path(jessiemae, latese[7]);
              jessiemae.translate(-96 * keteria, -25 * keteria);
              jessiemae.scale(1.8, 1.8);
              jessiemae.beginPath();
              jessiemae.lineCap = "round";
              jessiemae.lineJoin = "round";
              jessiemae.moveTo(85 * keteria, 21 * keteria);
              jessiemae.bezierCurveTo(73 * keteria, 16 * keteria, 70 * keteria, 16 * keteria, 70 * keteria, 26 * keteria);
              jessiemae.bezierCurveTo(72 * keteria, 34 * keteria, 75 * keteria, 37 * keteria, 85 * keteria, 26 * keteria);
              jessiemae.closePath();
              fill_path(jessiemae, latese[4], latese[5], 3 * keteria);
              jessiemae.beginPath();
              jessiemae.lineCap = "round";
              jessiemae.lineJoin = "round";
              jessiemae.moveTo(89 * keteria, 21 * keteria);
              jessiemae.bezierCurveTo(104 * keteria, 16 * keteria, 105 * keteria, 19 * keteria, 106 * keteria, 24 * keteria);
              jessiemae.bezierCurveTo(105 * keteria, 36 * keteria, 97 * keteria, 36 * keteria, 90 * keteria, 28 * keteria);
              jessiemae.closePath();
              fill_path(jessiemae, latese[4], latese[5], 3 * keteria);
              circle(jessiemae, 87 * keteria, 23 * keteria, 6.324555320336759 * keteria);
              fill_path(jessiemae, latese[4], latese[5], 3 * keteria);
            } else {
              if (ashanae == 4) {
                jessiemae.translate(27 * keteria, 8 * keteria);
                circle(jessiemae, 15 * keteria, 76 * keteria, 9.219544457292887 * keteria);
                fill_path(jessiemae, latese[3]);
                circle(jessiemae, 106 * keteria, 76 * keteria, 9.219544457292887 * keteria);
                fill_path(jessiemae, latese[3]);
                jessiemae.translate(-27 * keteria, -8 * keteria);
                jessiemae.translate(27 * keteria, 10 * keteria);
                circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
                fill_path(jessiemae, latese[5]);
                circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
                fill_path(jessiemae, latese[5]);
                circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
                fill_path(jessiemae, latese[6]);
                circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
                fill_path(jessiemae, latese[6]);
                jessiemae.translate(-27 * keteria, -10 * keteria);
                jessiemae.translate(27 * keteria, 8 * keteria);
                jessiemae.beginPath();
                jessiemae.lineCap = "round";
                jessiemae.lineJoin = "round";
                jessiemae.moveTo(52 * keteria, 86 * keteria);
                jessiemae.bezierCurveTo(54 * keteria, 78 * keteria, 65 * keteria, 80 * keteria, 67 * keteria, 85 * keteria);
                jessiemae.bezierCurveTo(69 * keteria, 89 * keteria, 64 * keteria, 99 * keteria, 71 * keteria, 106 * keteria);
                jessiemae.bezierCurveTo(75 * keteria, 109 * keteria, 61 * keteria, 108 * keteria, 58 * keteria, 102 * keteria);
                jessiemae.bezierCurveTo(53 * keteria, 97 * keteria, 52 * keteria, 91 * keteria, 52 * keteria, 86 * keteria);
                jessiemae.closePath();
                fill_path(jessiemae, latese[4]);
              } else {
                if (ashanae == 6) {
                  jessiemae.beginPath();
                  jessiemae.lineCap = "round";
                  jessiemae.lineJoin = "round";
                  jessiemae.translate(2 * keteria, 0);
                  jessiemae.moveTo(28 * keteria, 69 * keteria);
                  jessiemae.bezierCurveTo(26 * keteria, 39 * keteria, 31 * keteria, 25 * keteria, 52 * keteria, 24 * keteria);
                  jessiemae.bezierCurveTo(86 * keteria, 23.5 * keteria, 86 * keteria, 23.5 * keteria, 120 * keteria, 23 * keteria);
                  jessiemae.bezierCurveTo(137 * keteria, 23 * keteria, 145 * keteria, 33 * keteria, 144 * keteria, 53 * keteria);
                  jessiemae.bezierCurveTo(144.5 * keteria, 63 * keteria, 144.5 * keteria, 63 * keteria, 145 * keteria, 73 * keteria);
                  jessiemae.bezierCurveTo(141 * keteria, 41 * keteria, 106 * keteria, 41 * keteria, 98 * keteria, 59 * keteria);
                  jessiemae.bezierCurveTo(92 * keteria, 69 * keteria, 94 * keteria, 98 * keteria, 90 * keteria, 95 * keteria);
                  jessiemae.bezierCurveTo(86 * keteria, 95 * keteria, 86 * keteria, 95 * keteria, 82 * keteria, 95 * keteria);
                  jessiemae.bezierCurveTo(79 * keteria, 94 * keteria, 87 * keteria, 33 * keteria, 48 * keteria, 47 * keteria);
                  jessiemae.bezierCurveTo(31 * keteria, 57 * keteria, 30 * keteria, 65 * keteria, 28 * keteria, 72 * keteria);
                  jessiemae.closePath();
                  fill_path(jessiemae, latese[3]);
                  jessiemae.save();
                  jessiemae.translate(87 * keteria, 64.5 * keteria);
                  round_rect(jessiemae, -56 * keteria, -41.5 * keteria, 112 * keteria, 83 * keteria, 18 * keteria);
                  jessiemae.restore();
                  fill_path(jessiemae, undefined, latese[2], 4 * keteria);
                  jessiemae.translate(27 * keteria, 10 * keteria);
                  circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
                  fill_path(jessiemae, latese[3]);
                  circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
                  fill_path(jessiemae, latese[3]);
                  circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
                  fill_path(jessiemae, latese[4]);
                  circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
                  fill_path(jessiemae, latese[4]);
                  jessiemae.scale(1.4, 1.4);
                  jessiemae.translate(-43.5 * keteria, -32 * keteria);
                  jessiemae.beginPath();
                  jessiemae.lineCap = "round";
                  jessiemae.lineJoin = "round";
                  jessiemae.moveTo(86 * keteria, 105 * keteria);
                  jessiemae.bezierCurveTo(89 * keteria, 103 * keteria, 90 * keteria, 100 * keteria, 92 * keteria, 97 * keteria);
                  jessiemae.bezierCurveTo(93 * keteria, 91 * keteria, 85 * keteria, 90 * keteria, 81 * keteria, 95 * keteria);
                  jessiemae.bezierCurveTo(80 * keteria, 97 * keteria, 83 * keteria, 101 * keteria, 85 * keteria, 105 * keteria);
                  jessiemae.closePath();
                  fill_path(jessiemae, latese[5], latese[6], 3 * keteria);
                } else {
                  if (ashanae == 7) {
                    jessiemae.save();
                    jessiemae.translate(86 * keteria, 64.5 * keteria);
                    round_rect(jessiemae, -16 * keteria, -43.5 * keteria, 32 * keteria, 87 * keteria, 5 * keteria);
                    jessiemae.restore();
                    fill_path(jessiemae, latese[3], latese[4], 4 * keteria);
                    jessiemae.translate(0, 6 * keteria);
                    jessiemae.globalAlpha = .5;
                    jessiemae.save();
                    jessiemae.translate(85.5 * keteria, 47 * keteria);
                    round_rect(jessiemae, -58.5 * keteria, -8 * keteria, 117 * keteria, 16 * keteria, 5 * keteria);
                    jessiemae.restore();
                    fill_path(jessiemae, latese[0]);
                    jessiemae.translate(0, -6 * keteria);
                    jessiemae.globalAlpha = 1;
                    jessiemae.save();
                    jessiemae.translate(85.5 * keteria, 47 * keteria);
                    round_rect(jessiemae, -58.5 * keteria, -8 * keteria, 117 * keteria, 16 * keteria, 5 * keteria);
                    jessiemae.restore();
                    fill_path(jessiemae, latese[3], latese[4], 4 * keteria);
                    jessiemae.translate(0, 7 * keteria);
                    jessiemae.globalAlpha = .5;
                    jessiemae.beginPath();
                    jessiemae.lineCap = "round";
                    jessiemae.lineJoin = "round";
                    jessiemae.moveTo(84 * keteria, 44 * keteria);
                    jessiemae.bezierCurveTo(85 * keteria, 26 * keteria, 96 * keteria, 23 * keteria, 103 * keteria, 30 * keteria);
                    jessiemae.bezierCurveTo(110 * keteria, 36 * keteria, 110 * keteria, 47 * keteria, 92 * keteria, 50 * keteria);
                    jessiemae.closePath();
                    fill_path(jessiemae, latese[0]);
                    jessiemae.beginPath();
                    jessiemae.lineCap = "round";
                    jessiemae.lineJoin = "round";
                    jessiemae.moveTo(87 * keteria, 44 * keteria);
                    jessiemae.bezierCurveTo(108 * keteria, 47 * keteria, 109 * keteria, 54 * keteria, 102 * keteria, 63 * keteria);
                    jessiemae.bezierCurveTo(92 * keteria, 77 * keteria, 80 * keteria, 61 * keteria, 84 * keteria, 49 * keteria);
                    jessiemae.closePath();
                    fill_path(jessiemae, latese[0]);
                    jessiemae.beginPath();
                    jessiemae.lineCap = "round";
                    jessiemae.lineJoin = "round";
                    jessiemae.moveTo(84 * keteria, 43 * keteria);
                    jessiemae.bezierCurveTo(86 * keteria, 24 * keteria, 72 * keteria, 23 * keteria, 68 * keteria, 31 * keteria);
                    jessiemae.bezierCurveTo(56 * keteria, 42 * keteria, 70 * keteria, 49 * keteria, 81 * keteria, 47 * keteria);
                    jessiemae.closePath();
                    fill_path(jessiemae, latese[0]);
                    jessiemae.beginPath();
                    jessiemae.lineCap = "round";
                    jessiemae.lineJoin = "round";
                    jessiemae.moveTo(78 * keteria, 45 * keteria);
                    jessiemae.bezierCurveTo(61 * keteria, 49 * keteria, 60 * keteria, 58 * keteria, 68 * keteria, 64 * keteria);
                    jessiemae.bezierCurveTo(78 * keteria, 75 * keteria, 84 * keteria, 65 * keteria, 89 * keteria, 54 * keteria);
                    jessiemae.closePath();
                    fill_path(jessiemae, latese[0]);
                    jessiemae.translate(0, -7 * keteria);
                    jessiemae.globalAlpha = 1;
                    jessiemae.beginPath();
                    jessiemae.lineCap = "round";
                    jessiemae.lineJoin = "round";
                    jessiemae.moveTo(84 * keteria, 44 * keteria);
                    jessiemae.bezierCurveTo(85 * keteria, 26 * keteria, 96 * keteria, 23 * keteria, 103 * keteria, 30 * keteria);
                    jessiemae.bezierCurveTo(110 * keteria, 36 * keteria, 110 * keteria, 47 * keteria, 92 * keteria, 50 * keteria);
                    jessiemae.closePath();
                    fill_path(jessiemae, latese[3], latese[4], 4 * keteria);
                    jessiemae.beginPath();
                    jessiemae.lineCap = "round";
                    jessiemae.lineJoin = "round";
                    jessiemae.moveTo(87 * keteria, 44 * keteria);
                    jessiemae.bezierCurveTo(108 * keteria, 47 * keteria, 109 * keteria, 54 * keteria, 102 * keteria, 63 * keteria);
                    jessiemae.bezierCurveTo(92 * keteria, 77 * keteria, 80 * keteria, 61 * keteria, 84 * keteria, 49 * keteria);
                    jessiemae.closePath();
                    fill_path(jessiemae, latese[3], latese[4], 4 * keteria);
                    jessiemae.beginPath();
                    jessiemae.lineCap = "round";
                    jessiemae.lineJoin = "round";
                    jessiemae.moveTo(84 * keteria, 43 * keteria);
                    jessiemae.bezierCurveTo(86 * keteria, 24 * keteria, 72 * keteria, 23 * keteria, 68 * keteria, 31 * keteria);
                    jessiemae.bezierCurveTo(56 * keteria, 42 * keteria, 70 * keteria, 49 * keteria, 81 * keteria, 47 * keteria);
                    jessiemae.closePath();
                    fill_path(jessiemae, latese[3], latese[4], 4 * keteria);
                    jessiemae.beginPath();
                    jessiemae.lineCap = "round";
                    jessiemae.lineJoin = "round";
                    jessiemae.moveTo(78 * keteria, 45 * keteria);
                    jessiemae.bezierCurveTo(61 * keteria, 49 * keteria, 60 * keteria, 58 * keteria, 68 * keteria, 64 * keteria);
                    jessiemae.bezierCurveTo(78 * keteria, 75 * keteria, 84 * keteria, 65 * keteria, 89 * keteria, 54 * keteria);
                    jessiemae.closePath();
                    fill_path(jessiemae, latese[3], latese[4], 4 * keteria);
                    jessiemae.translate(0, 6 * keteria);
                    jessiemae.globalAlpha = .5;
                    jessiemae.save();
                    jessiemae.translate(85 * keteria, 47.5 * keteria);
                    jessiemae.rotate(0);
                    round_rect(jessiemae, -10 * keteria, -10.5 * keteria, 20 * keteria, 21 * keteria, 5 * keteria);
                    jessiemae.restore();
                    fill_path(jessiemae, latese[0]);
                    jessiemae.translate(0, -6 * keteria);
                    jessiemae.globalAlpha = 1;
                    jessiemae.save();
                    jessiemae.translate(85 * keteria, 47.5 * keteria);
                    jessiemae.rotate(0);
                    round_rect(jessiemae, -10 * keteria, -10.5 * keteria, 20 * keteria, 21 * keteria, 5 * keteria);
                    jessiemae.restore();
                    fill_path(jessiemae, latese[3], latese[4], 4 * keteria);
                    jessiemae.translate(27 * keteria, 10 * keteria);
                    circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
                    fill_path(jessiemae, latese[5]);
                    circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
                    fill_path(jessiemae, latese[5]);
                    circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
                    fill_path(jessiemae, latese[6]);
                    circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
                    fill_path(jessiemae, latese[6]);
                  } else {
                    if (ashanae == 5) {
                      stephenia.width = 211 * keteria;
                      stephenia.height = 152 * keteria;
                      jessiemae.globalAlpha = .5;
                      jessiemae.translate(0, 8 * keteria);
                      jessiemae.save();
                      jessiemae.translate(105.5 * keteria, 76.5 * keteria);
                      round_rect(jessiemae, -56 * keteria, -41.5 * keteria, 112 * keteria, 83 * keteria, 18 * keteria);
                      jessiemae.restore();
                      fill_path(jessiemae, latese[0]);
                      jessiemae.globalAlpha = 1;
                      jessiemae.translate(0, -8 * keteria);
                      jessiemae.save();
                      jessiemae.translate(105.5 * keteria, 76.5 * keteria);
                      round_rect(jessiemae, -56 * keteria, -41.5 * keteria, 112 * keteria, 83 * keteria, 18 * keteria);
                      jessiemae.restore();
                      fill_path(jessiemae, latese[1], latese[2], 4 * keteria);
                      jessiemae.beginPath();
                      jessiemae.lineCap = "round";
                      jessiemae.lineJoin = "round";
                      jessiemae.moveTo(68 * keteria, 39 * keteria);
                      jessiemae.bezierCurveTo(48 * keteria, 37 * keteria, 43 * keteria, 27 * keteria, 40 * keteria, 12 * keteria);
                      jessiemae.bezierCurveTo(31 * keteria, 25 * keteria, 20 * keteria, 17 * keteria, 11 * keteria, 9 * keteria);
                      jessiemae.bezierCurveTo(9 * keteria, 41 * keteria, 40 * keteria, 44 * keteria, 62 * keteria, 45 * keteria);
                      jessiemae.closePath();
                      fill_path(jessiemae, latese[3], latese[2], 4 * keteria);
                      jessiemae.beginPath();
                      jessiemae.lineCap = "round";
                      jessiemae.lineJoin = "round";
                      jessiemae.moveTo(143 * keteria, 38 * keteria);
                      jessiemae.bezierCurveTo(161 * keteria, 40 * keteria, 169 * keteria, 24 * keteria, 171 * keteria, 13 * keteria);
                      jessiemae.bezierCurveTo(181 * keteria, 23 * keteria, 188 * keteria, 20 * keteria, 199 * keteria, 9 * keteria);
                      jessiemae.bezierCurveTo(204 * keteria, 35 * keteria, 182 * keteria, 44 * keteria, 152 * keteria, 45 * keteria);
                      jessiemae.closePath();
                      fill_path(jessiemae, latese[3], latese[2], 4 * keteria);
                      jessiemae.save();
                      jessiemae.translate(105.5 * keteria, 76.5 * keteria);
                      round_rect(jessiemae, -55 * keteria, -40.5 * keteria, 106 * keteria, 77 * keteria, 18 * keteria);
                      jessiemae.restore();
                      fill_path(jessiemae, latese[1]);
                      jessiemae.beginPath();
                      jessiemae.lineCap = "round";
                      jessiemae.lineJoin = "round";
                      jessiemae.moveTo(149 * keteria, 45 * keteria);
                      jessiemae.bezierCurveTo(155 * keteria, 37 * keteria, 158 * keteria, 37 * keteria, 161 * keteria, 52 * keteria);
                      jessiemae.bezierCurveTo(164 * keteria, 60 * keteria, 161 * keteria, 65 * keteria, 152 * keteria, 58 * keteria);
                      jessiemae.bezierCurveTo(145 * keteria, 51 * keteria, 143 * keteria, 49 * keteria, 149 * keteria, 45 * keteria);
                      jessiemae.closePath();
                      fill_path(jessiemae, latese[4], latese[2], 4 * keteria);
                      jessiemae.beginPath();
                      jessiemae.lineCap = "round";
                      jessiemae.lineJoin = "round";
                      jessiemae.moveTo(60 * keteria, 43 * keteria);
                      jessiemae.bezierCurveTo(67 * keteria, 47 * keteria, 67 * keteria, 51 * keteria, 57 * keteria, 59 * keteria);
                      jessiemae.bezierCurveTo(50 * keteria, 64 * keteria, 47 * keteria, 64 * keteria, 49 * keteria, 55 * keteria);
                      jessiemae.bezierCurveTo(49 * keteria, 42 * keteria, 51 * keteria, 38 * keteria, 59 * keteria, 42 * keteria);
                      jessiemae.closePath();
                      fill_path(jessiemae, latese[4], latese[2], 4 * keteria);
                      circle(jessiemae, 105 * keteria, 107 * keteria, 10.63014581273465 * keteria);
                      fill_path(jessiemae, latese[5], latese[6], 4 * keteria);
                      jessiemae.beginPath();
                      jessiemae.lineCap = "round";
                      jessiemae.lineJoin = "round";
                      jessiemae.moveTo(105 * keteria, 100 * keteria);
                      jessiemae.bezierCurveTo(111 * keteria, 101 * keteria, 113 * keteria, 104 * keteria, 112 * keteria, 109 * keteria);
                      jessiemae.closePath();
                      fill_path(jessiemae, latese[7]);
                      jessiemae.translate(44.5 * keteria, 22 * keteria);
                      circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
                      fill_path(jessiemae, latese[8]);
                      circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
                      fill_path(jessiemae, latese[8]);
                      circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
                      fill_path(jessiemae, latese[9]);
                      circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
                      fill_path(jessiemae, latese[9]);
                    } else {
                      if (ashanae == 9) {
                        jessiemae.save();
                        jessiemae.translate(110 * keteria, 22 * keteria);
                        round_rect(jessiemae, -16 * keteria, -5 * keteria, 32 * keteria, 10 * keteria, 10 * keteria);
                        jessiemae.restore();
                        fill_path(jessiemae, latese[1], latese[2], 3 * keteria);
                        jessiemae.save();
                        jessiemae.translate(109.5 * keteria, 17 * keteria);
                        round_rect(jessiemae, -18.5 * keteria, -3 * keteria, 37 * keteria, 6 * keteria, 10 * keteria);
                        jessiemae.restore();
                        fill_path(jessiemae, latese[3], latese[4], 3 * keteria);
                        jessiemae.globalAlpha = .5;
                        jessiemae.translate(0, 5 * keteria);
                        jessiemae.save();
                        jessiemae.translate(86 * keteria, 40 * keteria);
                        round_rect(jessiemae, -58 * keteria, -9 * keteria, 116 * keteria, 18 * keteria, 6 * keteria);
                        jessiemae.restore();
                        fill_path(jessiemae, latese[0]);
                        jessiemae.globalAlpha = 1;
                        jessiemae.translate(0, -5 * keteria);
                        jessiemae.save();
                        jessiemae.translate(86 * keteria, 40 * keteria);
                        round_rect(jessiemae, -58 * keteria, -9 * keteria, 116 * keteria, 18 * keteria, 6 * keteria);
                        jessiemae.restore();
                        fill_path(jessiemae, latese[3], latese[4], 3 * keteria);
                        jessiemae.globalAlpha = .75;
                        jessiemae.translate(0, 5 * keteria);
                        jessiemae.beginPath();
                        jessiemae.lineCap = "round";
                        jessiemae.lineJoin = "round";
                        jessiemae.moveTo(109 * keteria, 47 * keteria);
                        jessiemae.bezierCurveTo(110.5 * keteria, 45 * keteria, 110.5 * keteria, 45 * keteria, 112 * keteria, 43 * keteria);
                        jessiemae.bezierCurveTo(114 * keteria, 44 * keteria, 114 * keteria, 44 * keteria, 116 * keteria, 45 * keteria);
                        jessiemae.bezierCurveTo(117.5 * keteria, 43 * keteria, 117.5 * keteria, 43 * keteria, 119 * keteria, 41 * keteria);
                        jessiemae.bezierCurveTo(121 * keteria, 41.5 * keteria, 121 * keteria, 41.5 * keteria, 123 * keteria, 42 * keteria);
                        jessiemae.closePath();
                        fill_path(jessiemae, latese[0]);
                        jessiemae.beginPath();
                        jessiemae.translate(0, 5 * keteria);
                        jessiemae.lineCap = "round";
                        jessiemae.lineJoin = "round";
                        jessiemae.moveTo(54 * keteria, 35 * keteria);
                        jessiemae.bezierCurveTo(61.5 * keteria, 35 * keteria, 61.5 * keteria, 35 * keteria, 69 * keteria, 35 * keteria);
                        jessiemae.bezierCurveTo(70 * keteria, 48 * keteria, 70 * keteria, 60 * keteria, 60 * keteria, 59 * keteria);
                        jessiemae.bezierCurveTo(45 * keteria, 61 * keteria, 44 * keteria, 60 * keteria, 43 * keteria, 53 * keteria);
                        jessiemae.bezierCurveTo(42 * keteria, 49 * keteria, 55 * keteria, 51 * keteria, 55 * keteria, 44 * keteria);
                        jessiemae.closePath();
                        fill_path(jessiemae, latese[0]);
                        jessiemae.globalAlpha = 1;
                        jessiemae.translate(0, -5 * keteria);
                        jessiemae.beginPath();
                        jessiemae.lineCap = "round";
                        jessiemae.lineJoin = "round";
                        jessiemae.moveTo(105 * keteria, 38 * keteria);
                        jessiemae.bezierCurveTo(110 * keteria, 48 * keteria, 110 * keteria, 50 * keteria, 105 * keteria, 53 * keteria);
                        jessiemae.bezierCurveTo(98 * keteria, 62 * keteria, 107 * keteria, 66 * keteria, 117 * keteria, 60 * keteria);
                        jessiemae.bezierCurveTo(128 * keteria, 56 * keteria, 130 * keteria, 56 * keteria, 126 * keteria, 49 * keteria);
                        jessiemae.bezierCurveTo(123.5 * keteria, 41.5 * keteria, 123.5 * keteria, 41.5 * keteria, 121 * keteria, 34 * keteria);
                        jessiemae.closePath();
                        fill_path(jessiemae, latese[7], latese[8], 3 * keteria);
                        jessiemae.beginPath();
                        jessiemae.lineCap = "round";
                        jessiemae.lineJoin = "round";
                        jessiemae.moveTo(109 * keteria, 47 * keteria);
                        jessiemae.bezierCurveTo(110.5 * keteria, 45 * keteria, 110.5 * keteria, 45 * keteria, 112 * keteria, 43 * keteria);
                        jessiemae.bezierCurveTo(114 * keteria, 44 * keteria, 114 * keteria, 44 * keteria, 116 * keteria, 45 * keteria);
                        jessiemae.bezierCurveTo(117.5 * keteria, 43 * keteria, 117.5 * keteria, 43 * keteria, 119 * keteria, 41 * keteria);
                        jessiemae.bezierCurveTo(121 * keteria, 41.5 * keteria, 121 * keteria, 41.5 * keteria, 123 * keteria, 42 * keteria);
                        jessiemae.closePath();
                        fill_path(jessiemae, undefined, latese[6], 3 * keteria);
                        jessiemae.beginPath();
                        jessiemae.lineCap = "round";
                        jessiemae.lineJoin = "round";
                        jessiemae.moveTo(84 * keteria, 33 * keteria);
                        jessiemae.bezierCurveTo(88.5 * keteria, 34.5 * keteria, 88.5 * keteria, 34.5 * keteria, 93 * keteria, 36 * keteria);
                        jessiemae.bezierCurveTo(87 * keteria, 43 * keteria, 88 * keteria, 45 * keteria, 91 * keteria, 46 * keteria);
                        jessiemae.bezierCurveTo(98 * keteria, 56 * keteria, 91 * keteria, 57 * keteria, 85 * keteria, 53 * keteria);
                        jessiemae.bezierCurveTo(80 * keteria, 50 * keteria, 78 * keteria, 49 * keteria, 82 * keteria, 43 * keteria);
                        jessiemae.bezierCurveTo(83.5 * keteria, 38 * keteria, 83.5 * keteria, 38 * keteria, 85 * keteria, 33 * keteria);
                        jessiemae.closePath();
                        fill_path(jessiemae, latese[5], latese[6], 3 * keteria);
                        jessiemae.beginPath();
                        jessiemae.lineCap = "round";
                        jessiemae.lineJoin = "round";
                        jessiemae.moveTo(54 * keteria, 35 * keteria);
                        jessiemae.bezierCurveTo(61.5 * keteria, 35 * keteria, 61.5 * keteria, 35 * keteria, 69 * keteria, 35 * keteria);
                        jessiemae.bezierCurveTo(70 * keteria, 48 * keteria, 70 * keteria, 60 * keteria, 60 * keteria, 59 * keteria);
                        jessiemae.bezierCurveTo(45 * keteria, 61 * keteria, 44 * keteria, 60 * keteria, 43 * keteria, 53 * keteria);
                        jessiemae.bezierCurveTo(42 * keteria, 49 * keteria, 55 * keteria, 51 * keteria, 55 * keteria, 44 * keteria);
                        jessiemae.closePath();
                        fill_path(jessiemae, latese[7], latese[8], 3 * keteria);
                        jessiemae.beginPath();
                        jessiemae.lineCap = "round";
                        jessiemae.lineJoin = "round";
                        jessiemae.moveTo(48 * keteria, 49 * keteria);
                        jessiemae.bezierCurveTo(50 * keteria, 50 * keteria, 50 * keteria, 50 * keteria, 52 * keteria, 51 * keteria);
                        jessiemae.bezierCurveTo(50.5 * keteria, 52 * keteria, 50.5 * keteria, 52 * keteria, 49 * keteria, 53 * keteria);
                        jessiemae.bezierCurveTo(51 * keteria, 54.5 * keteria, 51 * keteria, 54.5 * keteria, 53 * keteria, 56 * keteria);
                        jessiemae.bezierCurveTo(51 * keteria, 57.5 * keteria, 51 * keteria, 57.5 * keteria, 49 * keteria, 59 * keteria);
                        jessiemae.closePath();
                        fill_path(jessiemae, undefined, latese[6], 3 * keteria);
                        jessiemae.beginPath();
                        jessiemae.lineCap = "round";
                        jessiemae.lineJoin = "round";
                        jessiemae.moveTo(54 * keteria, 39 * keteria);
                        jessiemae.bezierCurveTo(61.5 * keteria, 39.5 * keteria, 61.5 * keteria, 39.5 * keteria, 69 * keteria, 40 * keteria);
                        jessiemae.closePath();
                        fill_path(jessiemae, undefined, latese[6], 3 * keteria);
                        jessiemae.beginPath();
                        jessiemae.lineCap = "round";
                        jessiemae.lineJoin = "round";
                        jessiemae.moveTo(55 * keteria, 43 * keteria);
                        jessiemae.bezierCurveTo(61.5 * keteria, 43.5 * keteria, 61.5 * keteria, 43.5 * keteria, 68 * keteria, 44 * keteria);
                        jessiemae.closePath();
                        fill_path(jessiemae, undefined, latese[6], 3 * keteria);
                        jessiemae.translate(27 * keteria, 5 * keteria);
                        circle(jessiemae, 35 * keteria, 75 * keteria, 15 * keteria);
                        fill_path(jessiemae, latese[9]);
                        circle(jessiemae, 85 * keteria, 75 * keteria, 15 * keteria);
                        fill_path(jessiemae, latese[9]);
                        circle(jessiemae, 32 * keteria, 67 * keteria, 5 * keteria);
                        fill_path(jessiemae, latese[10]);
                        circle(jessiemae, 82 * keteria, 67 * keteria, 5 * keteria);
                        fill_path(jessiemae, latese[10]);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return stephenia;
}
function create_robotskin(onassis, mora) {
  var kadijatu = document.createElement("canvas");
  var maier = kadijatu.getContext("2d");
  kadijatu.width = 350 * onassis;
  kadijatu.height = 350 * onassis;
  maier.translate(0, 15 * onassis);
  maier.globalAlpha = .5;
  maier.save();
  maier.translate(174 * onassis, 172 * onassis);
  round_rect(maier, -81 * onassis, -60 * onassis, 162 * onassis, 120 * onassis, 26 * onassis);
  maier.restore();
  fill_path(maier, mora[0]);
  maier.translate(0, -15 * onassis);
  maier.globalAlpha = 1;
  maier.save();
  maier.translate(174 * onassis, 172 * onassis);
  round_rect(maier, -81 * onassis, -60 * onassis, 162 * onassis, 120 * onassis, 26 * onassis);
  maier.restore();
  fill_path(maier, mora[1], mora[2], 7 * onassis);
  maier.beginPath();
  maier.lineCap = "round";
  maier.lineJoin = "round";
  maier.moveTo(179 * onassis, 211 * onassis);
  maier.bezierCurveTo(183 * onassis, 204.5 * onassis, 183 * onassis, 204.5 * onassis, 187 * onassis, 198 * onassis);
  maier.bezierCurveTo(198.5 * onassis, 191.5 * onassis, 198.5 * onassis, 191.5 * onassis, 210 * onassis, 185 * onassis);
  maier.bezierCurveTo(215 * onassis, 176.5 * onassis, 215 * onassis, 176.5 * onassis, 220 * onassis, 168 * onassis);
  maier.bezierCurveTo(213 * onassis, 173.5 * onassis, 213 * onassis, 173.5 * onassis, 206 * onassis, 179 * onassis);
  maier.bezierCurveTo(195 * onassis, 184 * onassis, 195 * onassis, 184 * onassis, 184 * onassis, 189 * onassis);
  maier.closePath();
  fill_path(maier, mora[3]);
  maier.beginPath();
  maier.lineCap = "round";
  maier.lineJoin = "round";
  maier.moveTo(167 * onassis, 233 * onassis);
  maier.bezierCurveTo(167 * onassis, 207 * onassis, 167 * onassis, 207 * onassis, 167 * onassis, 181 * onassis);
  maier.bezierCurveTo(167 * onassis, 166 * onassis, 157 * onassis, 164 * onassis, 148 * onassis, 165 * onassis);
  maier.bezierCurveTo(120 * onassis, 165 * onassis, 120 * onassis, 165 * onassis, 92 * onassis, 165 * onassis);
  maier.bezierCurveTo(92 * onassis, 186.5 * onassis, 92 * onassis, 186.5 * onassis, 92 * onassis, 208 * onassis);
  maier.bezierCurveTo(93 * onassis, 222 * onassis, 102 * onassis, 234 * onassis, 119 * onassis, 233 * onassis);
  maier.closePath();
  fill_path(maier, mora[1], mora[2], 7 * onassis);
  circle(maier, 152 * onassis, 179 * onassis, 6 * onassis);
  fill_path(maier, mora[4]);
  circle(maier, 107 * onassis, 179 * onassis, 6 * onassis);
  fill_path(maier, mora[4]);
  maier.save();
  maier.translate(210 * onassis, 200 * onassis);
  maier.rotate(.2);
  round_regular_polygon(maier, 6, 32 * onassis, 10 * onassis);
  maier.restore();
  fill_path(maier, mora[5], mora[2], 7 * onassis);
  maier.save();
  maier.translate(210 * onassis, 200 * onassis);
  maier.rotate(1.0471975511965976);
  round_regular_polygon(maier, 6, 19 * onassis, 6 * onassis);
  maier.restore();
  fill_path(maier, mora[6], mora[7], 7 * onassis);
  maier.save();
  maier.translate(205 * onassis, 193 * onassis);
  maier.rotate(0);
  round_regular_polygon(maier, 6, 10 * onassis, 3 * onassis);
  maier.restore();
  fill_path(maier, mora[8]);
  maier.save();
  maier.translate(137 * onassis, 200 * onassis);
  maier.rotate(-0.5235987755982988);
  round_regular_polygon(maier, 6, 20 * onassis, 5 * onassis);
  maier.restore();
  fill_path(maier, mora[6], mora[7], 7 * onassis);
  maier.save();
  maier.translate(131 * onassis, 194 * onassis);
  round_regular_polygon(maier, 6, 10 * onassis, 3 * onassis);
  maier.restore();
  fill_path(maier, mora[8]);
  maier.save();
  maier.translate(150.5 * onassis, 120 * onassis);
  maier.rotate(0);
  round_rect(maier, -19.5 * onassis, -8 * onassis, 39 * onassis, 16 * onassis, 0 * onassis);
  maier.restore();
  fill_path(maier, undefined, mora[2], 7 * onassis);
  return kadijatu;
}
function create_skins(carlaysia, zeda, latesia) {
  var angleica = document.createElement("canvas");
  var fitzgerald = angleica.getContext("2d");
  angleica.width = 175 * carlaysia;
  angleica.height = 150 * carlaysia;
  if (latesia == 0) {
    fitzgerald.globalAlpha = .5;
    fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
    fitzgerald.save();
    fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
    round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
    fitzgerald.restore();
    fill_path(fitzgerald, zeda[0]);
    fitzgerald.globalAlpha = 1;
    fitzgerald.save();
    fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
    round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
    fitzgerald.restore();
    fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
    circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
    fill_path(fitzgerald, zeda[3]);
    circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.20360331117452 * carlaysia);
    fill_path(fitzgerald, zeda[3]);
    circle(fitzgerald, 131 * carlaysia, 194 * carlaysia, 7 * carlaysia);
    fill_path(fitzgerald, zeda[4]);
    circle(fitzgerald, 206 * carlaysia, 194 * carlaysia, 7 * carlaysia);
    fill_path(fitzgerald, zeda[4]);
    fitzgerald.translate(0, 1 * carlaysia);
    fitzgerald.save();
    fitzgerald.translate(138.5 * carlaysia, 180.5 * carlaysia);
    round_rect(fitzgerald, -22.5 * carlaysia, -11.5 * carlaysia, 45 * carlaysia, 23 * carlaysia, 0 * carlaysia);
    fitzgerald.restore();
    fill_path(fitzgerald, zeda[1]);
    fitzgerald.save();
    fitzgerald.translate(207 * carlaysia, 177.5 * carlaysia);
    round_rect(fitzgerald, -31 * carlaysia, -9.5 * carlaysia, 62 * carlaysia, 19 * carlaysia, 0 * carlaysia);
    fitzgerald.restore();
    fill_path(fitzgerald, zeda[1]);
    fitzgerald.save();
    fitzgerald.translate(171.5 * carlaysia, 220 * carlaysia);
    round_rect(fitzgerald, -52.5 * carlaysia, -2 * carlaysia, 105 * carlaysia, 4 * carlaysia, 0 * carlaysia);
    fitzgerald.restore();
    fill_path(fitzgerald, zeda[1]);
  } else {
    if (latesia == 1) {
      fitzgerald.globalAlpha = .5;
      fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
      fitzgerald.save();
      fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
      round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
      fitzgerald.restore();
      fill_path(fitzgerald, zeda[0]);
      fitzgerald.globalAlpha = 1;
      fitzgerald.save();
      fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
      round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
      fitzgerald.restore();
      fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
      fitzgerald.beginPath();
      fitzgerald.lineCap = "round";
      fitzgerald.lineJoin = "round";
      fitzgerald.moveTo(183 * carlaysia, 223 * carlaysia);
      fitzgerald.bezierCurveTo(193 * carlaysia, 187 * carlaysia, 215 * carlaysia, 193 * carlaysia, 227 * carlaysia, 159 * carlaysia);
      fitzgerald.bezierCurveTo(227 * carlaysia, 194 * carlaysia, 209 * carlaysia, 187 * carlaysia, 183 * carlaysia, 223 * carlaysia);
      fitzgerald.closePath();
      fill_path(fitzgerald, zeda[5]);
      circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
      fill_path(fitzgerald, zeda[3]);
      circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.20360331117452 * carlaysia);
      fill_path(fitzgerald, zeda[3]);
      circle(fitzgerald, 131 * carlaysia, 190 * carlaysia, 7 * carlaysia);
      fill_path(fitzgerald, zeda[4]);
      circle(fitzgerald, 204 * carlaysia, 190 * carlaysia, 7 * carlaysia);
      fill_path(fitzgerald, zeda[4]);
      fitzgerald.beginPath();
      fitzgerald.lineCap = "round";
      fitzgerald.lineJoin = "round";
      fitzgerald.moveTo(120 * carlaysia, 154 * carlaysia);
      fitzgerald.bezierCurveTo(125 * carlaysia, 146 * carlaysia, 131 * carlaysia, 143 * carlaysia, 147 * carlaysia, 137 * carlaysia);
      fitzgerald.bezierCurveTo(139 * carlaysia, 147 * carlaysia, 129 * carlaysia, 152 * carlaysia, 121 * carlaysia, 154 * carlaysia);
      fitzgerald.closePath();
      fill_path(fitzgerald, zeda[5]);
      fitzgerald.beginPath();
      fitzgerald.lineCap = "round";
      fitzgerald.lineJoin = "round";
      fitzgerald.moveTo(120 * carlaysia, 162 * carlaysia);
      fitzgerald.bezierCurveTo(134 * carlaysia, 153 * carlaysia, 139 * carlaysia, 149 * carlaysia, 150 * carlaysia, 144 * carlaysia);
      fitzgerald.bezierCurveTo(143 * carlaysia, 155 * carlaysia, 128 * carlaysia, 163 * carlaysia, 121 * carlaysia, 161 * carlaysia);
      fitzgerald.closePath();
      fill_path(fitzgerald, zeda[5]);
      fitzgerald.beginPath();
      fitzgerald.lineCap = "round";
      fitzgerald.lineJoin = "round";
      fitzgerald.moveTo(127 * carlaysia, 142 * carlaysia);
      fitzgerald.bezierCurveTo(129 * carlaysia, 151 * carlaysia, 132 * carlaysia, 157 * carlaysia, 137 * carlaysia, 162 * carlaysia);
      fitzgerald.bezierCurveTo(134 * carlaysia, 152 * carlaysia, 132 * carlaysia, 146 * carlaysia, 127 * carlaysia, 142 * carlaysia);
      fitzgerald.closePath();
      fill_path(fitzgerald, zeda[5]);
      fitzgerald.beginPath();
      fitzgerald.lineCap = "round";
      fitzgerald.lineJoin = "round";
      fitzgerald.moveTo(135 * carlaysia, 140 * carlaysia);
      fitzgerald.bezierCurveTo(141 * carlaysia, 144 * carlaysia, 143 * carlaysia, 150 * carlaysia, 143 * carlaysia, 157 * carlaysia);
      fitzgerald.bezierCurveTo(138 * carlaysia, 150 * carlaysia, 136 * carlaysia, 145 * carlaysia, 135 * carlaysia, 140 * carlaysia);
      fitzgerald.closePath();
      fill_path(fitzgerald, zeda[5]);
    } else {
      if (latesia == 2) {
        fitzgerald.globalAlpha = .5;
        fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
        fitzgerald.save();
        fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
        round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
        fitzgerald.restore();
        fill_path(fitzgerald, zeda[0]);
        fitzgerald.globalAlpha = 1;
        fitzgerald.save();
        fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
        round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
        fitzgerald.restore();
        fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
        circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
        fill_path(fitzgerald, zeda[3]);
        circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.20360331117452 * carlaysia);
        fill_path(fitzgerald, zeda[3]);
        circle(fitzgerald, 130 * carlaysia, 192 * carlaysia, 7 * carlaysia);
        fill_path(fitzgerald, zeda[4]);
        circle(fitzgerald, 203 * carlaysia, 192 * carlaysia, 7 * carlaysia);
        fill_path(fitzgerald, zeda[4]);
        fitzgerald.beginPath();
        fitzgerald.lineCap = "round";
        fitzgerald.lineJoin = "round";
        fitzgerald.moveTo(115 * carlaysia, 224 * carlaysia);
        fitzgerald.bezierCurveTo(173 * carlaysia, 223.5 * carlaysia, 173 * carlaysia, 223.5 * carlaysia, 231 * carlaysia, 223 * carlaysia);
        fitzgerald.bezierCurveTo(230 * carlaysia, 222 * carlaysia, 198 * carlaysia, 223 * carlaysia, 186 * carlaysia, 209 * carlaysia);
        fitzgerald.bezierCurveTo(173.5 * carlaysia, 209 * carlaysia, 173.5 * carlaysia, 209 * carlaysia, 161 * carlaysia, 209 * carlaysia);
        fitzgerald.bezierCurveTo(146 * carlaysia, 224 * carlaysia, 114 * carlaysia, 223 * carlaysia, 116 * carlaysia, 224 * carlaysia);
        fitzgerald.closePath();
        fill_path(fitzgerald, zeda[1]);
        fitzgerald.beginPath();
        fitzgerald.lineCap = "round";
        fitzgerald.lineJoin = "round";
        fitzgerald.moveTo(112 * carlaysia, 193 * carlaysia);
        fitzgerald.bezierCurveTo(154 * carlaysia, 182 * carlaysia, 194 * carlaysia, 183 * carlaysia, 234 * carlaysia, 192 * carlaysia);
        fitzgerald.bezierCurveTo(217 * carlaysia, 154 * carlaysia, 148 * carlaysia, 127 * carlaysia, 112 * carlaysia, 192 * carlaysia);
        fitzgerald.closePath();
        fill_path(fitzgerald, zeda[1]);
      } else {
        if (latesia == 3) {
          fitzgerald.globalAlpha = .5;
          fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
          fitzgerald.save();
          fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
          round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
          fitzgerald.restore();
          fill_path(fitzgerald, zeda[0]);
          fitzgerald.globalAlpha = 1;
          fitzgerald.save();
          fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
          round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
          fitzgerald.restore();
          fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
          circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
          fill_path(fitzgerald, zeda[3]);
          circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.20360331117452 * carlaysia);
          fill_path(fitzgerald, zeda[3]);
          circle(fitzgerald, 130 * carlaysia, 192 * carlaysia, 7 * carlaysia);
          fill_path(fitzgerald, zeda[4]);
          circle(fitzgerald, 203 * carlaysia, 192 * carlaysia, 7 * carlaysia);
          fill_path(fitzgerald, zeda[4]);
          fitzgerald.beginPath();
          fitzgerald.lineCap = "round";
          fitzgerald.lineJoin = "round";
          fitzgerald.moveTo(120 * carlaysia, 176 * carlaysia);
          fitzgerald.bezierCurveTo(175 * carlaysia, 193 * carlaysia, 147.5 * carlaysia, 184.5 * carlaysia, 175 * carlaysia, 193 * carlaysia);
          fitzgerald.bezierCurveTo(200 * carlaysia, 184.5 * carlaysia, 200 * carlaysia, 184.5 * carlaysia, 225 * carlaysia, 176 * carlaysia);
          fitzgerald.closePath();
          fill_path(fitzgerald, zeda[1]);
          fitzgerald.beginPath();
          fitzgerald.lineCap = "round";
          fitzgerald.lineJoin = "round";
          fitzgerald.moveTo(226 * carlaysia, 223 * carlaysia);
          fitzgerald.bezierCurveTo(173.5 * carlaysia, 223 * carlaysia, 173.5 * carlaysia, 223 * carlaysia, 121 * carlaysia, 223 * carlaysia);
          fitzgerald.bezierCurveTo(148 * carlaysia, 218 * carlaysia, 148 * carlaysia, 218 * carlaysia, 175 * carlaysia, 213 * carlaysia);
          fitzgerald.closePath();
          fill_path(fitzgerald, zeda[1]);
        } else {
          if (latesia == 4) {
            fitzgerald.globalAlpha = .5;
            fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
            fitzgerald.save();
            fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
            round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
            fitzgerald.restore();
            fill_path(fitzgerald, zeda[0]);
            fitzgerald.globalAlpha = 1;
            fitzgerald.save();
            fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
            fitzgerald.rotate(0);
            round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
            fitzgerald.restore();
            fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
            circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
            fill_path(fitzgerald, zeda[3]);
            circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.20360331117452 * carlaysia);
            fill_path(fitzgerald, zeda[3]);
            circle(fitzgerald, 137 * carlaysia, 203 * carlaysia, 8 * carlaysia);
            fill_path(fitzgerald, zeda[4]);
            circle(fitzgerald, 209 * carlaysia, 203 * carlaysia, 8 * carlaysia);
            fill_path(fitzgerald, zeda[4]);
            fitzgerald.save();
            fitzgerald.translate(174.5 * carlaysia, 218 * carlaysia);
            fitzgerald.rotate(0);
            round_rect(fitzgerald, -60.5 * carlaysia, -5 * carlaysia, 121 * carlaysia, 10 * carlaysia, 28 * carlaysia);
            fitzgerald.restore();
            fill_path(fitzgerald, zeda[1]);
            fitzgerald.beginPath();
            fitzgerald.lineCap = "round";
            fitzgerald.lineJoin = "round";
            fitzgerald.moveTo(113 * carlaysia, 190 * carlaysia);
            fitzgerald.bezierCurveTo(144 * carlaysia, 181.5 * carlaysia, 144 * carlaysia, 181.5 * carlaysia, 175 * carlaysia, 173 * carlaysia);
            fitzgerald.bezierCurveTo(205 * carlaysia, 182 * carlaysia, 205 * carlaysia, 182 * carlaysia, 235 * carlaysia, 191 * carlaysia);
            fitzgerald.bezierCurveTo(242 * carlaysia, 141 * carlaysia, 106 * carlaysia, 119 * carlaysia, 112 * carlaysia, 189 * carlaysia);
            fitzgerald.closePath();
            fill_path(fitzgerald, zeda[1]);
          } else {
            if (latesia == 5) {
              fitzgerald.globalAlpha = .5;
              fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
              fitzgerald.save();
              fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
              round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
              fitzgerald.restore();
              fill_path(fitzgerald, zeda[0]);
              fitzgerald.globalAlpha = 1;
              fitzgerald.save();
              fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
              fitzgerald.rotate(0);
              round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
              fitzgerald.restore();
              fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
              circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
              fill_path(fitzgerald, zeda[3]);
              circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.20360331117452 * carlaysia);
              fill_path(fitzgerald, zeda[3]);
              circle(fitzgerald, 140 * carlaysia, 196 * carlaysia, 7 * carlaysia);
              fill_path(fitzgerald, zeda[4]);
              circle(fitzgerald, 213 * carlaysia, 196 * carlaysia, 7 * carlaysia);
              fill_path(fitzgerald, zeda[4]);
              circle(fitzgerald, 131 * carlaysia, 206 * carlaysia, 3 * carlaysia);
              fill_path(fitzgerald, zeda[4]);
              circle(fitzgerald, 204 * carlaysia, 206 * carlaysia, 3 * carlaysia);
              fill_path(fitzgerald, zeda[4]);
              fitzgerald.beginPath();
              fitzgerald.lineCap = "round";
              fitzgerald.lineJoin = "round";
              fitzgerald.moveTo(113 * carlaysia, 181 * carlaysia);
              fitzgerald.bezierCurveTo(159 * carlaysia, 204 * carlaysia, 190 * carlaysia, 202 * carlaysia, 235 * carlaysia, 181 * carlaysia);
              fitzgerald.bezierCurveTo(241 * carlaysia, 137 * carlaysia, 109 * carlaysia, 130 * carlaysia, 112 * carlaysia, 180 * carlaysia);
              fitzgerald.closePath();
              fill_path(fitzgerald, zeda[1]);
              fitzgerald.save();
              fitzgerald.translate(174 * carlaysia, 220 * carlaysia);
              fitzgerald.rotate(0);
              round_rect(fitzgerald, -56 * carlaysia, -5 * carlaysia, 112 * carlaysia, 10 * carlaysia, 1 * carlaysia);
              fitzgerald.restore();
              fill_path(fitzgerald, zeda[1]);
            } else {
              if (latesia == 6) {
                fitzgerald.globalAlpha = .5;
                fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
                fitzgerald.save();
                fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
                round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
                fitzgerald.restore();
                fill_path(fitzgerald, zeda[0]);
                fitzgerald.globalAlpha = 1;
                fitzgerald.save();
                fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
                round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
                fitzgerald.restore();
                fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
                circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
                fill_path(fitzgerald, zeda[3]);
                circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.20360331117452 * carlaysia);
                fill_path(fitzgerald, zeda[3]);
                circle(fitzgerald, 133 * carlaysia, 188 * carlaysia, 7 * carlaysia);
                fill_path(fitzgerald, zeda[4]);
                circle(fitzgerald, 206 * carlaysia, 188 * carlaysia, 7 * carlaysia);
                fill_path(fitzgerald, zeda[4]);
                fitzgerald.beginPath();
                fitzgerald.lineCap = "round";
                fitzgerald.lineJoin = "round";
                fitzgerald.moveTo(110 * carlaysia, 193 * carlaysia);
                fitzgerald.bezierCurveTo(130 * carlaysia, 182 * carlaysia, 142 * carlaysia, 183 * carlaysia, 162 * carlaysia, 193 * carlaysia);
                fitzgerald.bezierCurveTo(164 * carlaysia, 176.5 * carlaysia, 164 * carlaysia, 176.5 * carlaysia, 166 * carlaysia, 160 * carlaysia);
                fitzgerald.bezierCurveTo(137 * carlaysia, 159 * carlaysia, 137 * carlaysia, 159 * carlaysia, 108 * carlaysia, 158 * carlaysia);
                fitzgerald.closePath();
                fill_path(fitzgerald, zeda[1]);
                fitzgerald.beginPath();
                fitzgerald.lineCap = "round";
                fitzgerald.lineJoin = "round";
                fitzgerald.moveTo(184 * carlaysia, 192 * carlaysia);
                fitzgerald.bezierCurveTo(205 * carlaysia, 183 * carlaysia, 216 * carlaysia, 183 * carlaysia, 234 * carlaysia, 192 * carlaysia);
                fitzgerald.bezierCurveTo(233.5 * carlaysia, 177 * carlaysia, 233.5 * carlaysia, 177 * carlaysia, 233 * carlaysia, 162 * carlaysia);
                fitzgerald.bezierCurveTo(209 * carlaysia, 161.5 * carlaysia, 186 * carlaysia, 162 * carlaysia, 185 * carlaysia, 161 * carlaysia);
                fitzgerald.closePath();
                fill_path(fitzgerald, zeda[1]);
              } else {
                if (latesia == 7) {
                  fitzgerald.globalAlpha = .5;
                  fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
                  fitzgerald.save();
                  fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
                  round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
                  fitzgerald.restore();
                  fill_path(fitzgerald, zeda[0]);
                  fitzgerald.globalAlpha = 1;
                  fitzgerald.save();
                  fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
                  round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
                  fitzgerald.restore();
                  fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
                  circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
                  fill_path(fitzgerald, zeda[3]);
                  circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.20360331117452 * carlaysia);
                  fill_path(fitzgerald, zeda[3]);
                  circle(fitzgerald, 130 * carlaysia, 206 * carlaysia, 7 * carlaysia);
                  fill_path(fitzgerald, zeda[4]);
                  circle(fitzgerald, 203 * carlaysia, 206 * carlaysia, 7 * carlaysia);
                  fill_path(fitzgerald, zeda[4]);
                  fitzgerald.beginPath();
                  fitzgerald.lineCap = "round";
                  fitzgerald.lineJoin = "round";
                  fitzgerald.moveTo(108 * carlaysia, 191 * carlaysia);
                  fitzgerald.bezierCurveTo(141 * carlaysia, 184 * carlaysia, 141 * carlaysia, 184 * carlaysia, 174 * carlaysia, 177 * carlaysia);
                  fitzgerald.bezierCurveTo(207 * carlaysia, 184 * carlaysia, 207 * carlaysia, 184 * carlaysia, 240 * carlaysia, 191 * carlaysia);
                  fitzgerald.bezierCurveTo(244 * carlaysia, 140 * carlaysia, 113 * carlaysia, 121 * carlaysia, 108 * carlaysia, 191 * carlaysia);
                  fitzgerald.closePath();
                  fill_path(fitzgerald, zeda[1]);
                } else {
                  if (latesia == 8) {
                    fitzgerald.globalAlpha = .5;
                    fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
                    fitzgerald.save();
                    fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
                    round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
                    fitzgerald.restore();
                    fill_path(fitzgerald, zeda[0]);
                    fitzgerald.globalAlpha = 1;
                    fitzgerald.save();
                    fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
                    round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
                    fitzgerald.restore();
                    fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
                    circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
                    fill_path(fitzgerald, zeda[3]);
                    circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.20360331117452 * carlaysia);
                    fill_path(fitzgerald, zeda[3]);
                    circle(fitzgerald, 127 * carlaysia, 198 * carlaysia, 7 * carlaysia);
                    fill_path(fitzgerald, zeda[4]);
                    circle(fitzgerald, 200 * carlaysia, 198 * carlaysia, 7 * carlaysia);
                    fill_path(fitzgerald, zeda[4]);
                    fitzgerald.save();
                    fitzgerald.translate(175 * carlaysia, 175.5 * carlaysia);
                    round_rect(fitzgerald, -67 * carlaysia, -13.5 * carlaysia, 134 * carlaysia, 27 * carlaysia, 0 * carlaysia);
                    fitzgerald.restore();
                    fill_path(fitzgerald, zeda[1]);
                    fitzgerald.save();
                    fitzgerald.translate(172 * carlaysia, 219 * carlaysia);
                    round_rect(fitzgerald, -60 * carlaysia, -4 * carlaysia, 120 * carlaysia, 8 * carlaysia, 0 * carlaysia);
                    fitzgerald.restore();
                    fill_path(fitzgerald, zeda[1]);
                  } else {
                    if (latesia == 9) {
                      fitzgerald.globalAlpha = .5;
                      fitzgerald.translate(-88 * carlaysia, -95 * carlaysia);
                      fitzgerald.save();
                      fitzgerald.translate(174 * carlaysia, 195.5 * carlaysia);
                      round_rect(fitzgerald, -82 * carlaysia, -46.5 * carlaysia, 164 * carlaysia, 93 * carlaysia, 30 * carlaysia);
                      fitzgerald.restore();
                      fill_path(fitzgerald, zeda[0]);
                      fitzgerald.globalAlpha = 1;
                      fitzgerald.save();
                      fitzgerald.translate(174 * carlaysia, 170.5 * carlaysia);
                      round_rect(fitzgerald, -81 * carlaysia, -59.5 * carlaysia, 162 * carlaysia, 119 * carlaysia, 28 * carlaysia);
                      fitzgerald.restore();
                      fill_path(fitzgerald, zeda[1], zeda[2], 6.5 * carlaysia);
                      circle(fitzgerald, 137 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
                      fill_path(fitzgerald, zeda[3]);
                      circle(fitzgerald, 210 * carlaysia, 200 * carlaysia, 22.090722034374522 * carlaysia);
                      fill_path(fitzgerald, zeda[3]);
                      circle(fitzgerald, 143 * carlaysia, 200 * carlaysia, 7 * carlaysia);
                      fill_path(fitzgerald, zeda[4]);
                      circle(fitzgerald, 204 * carlaysia, 200 * carlaysia, 7 * carlaysia);
                      fill_path(fitzgerald, zeda[4]);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return angleica;
}
function create_garlic(malesa, tabea, carree) {
  var ismail = document.createElement("canvas");
  var korby = ismail.getContext("2d");
  ismail.width = 264 * malesa;
  ismail.height = 246 * malesa;
  korby.translate(0, 10 * malesa);
  korby.globalAlpha = tabea ? .5 : 1;
  korby.beginPath();
  korby.lineCap = "round";
  korby.lineJoin = "round";
  korby.moveTo(75 * malesa, 54 * malesa);
  korby.bezierCurveTo(79 * malesa, 21 * malesa, 131 * malesa, 13 * malesa, 153 * malesa, 36 * malesa);
  korby.bezierCurveTo(204 * malesa, 27 * malesa, 221 * malesa, 52 * malesa, 216 * malesa, 83 * malesa);
  korby.bezierCurveTo(241 * malesa, 103 * malesa, 232 * malesa, 138 * malesa, 214 * malesa, 147 * malesa);
  korby.bezierCurveTo(223 * malesa, 184 * malesa, 201 * malesa, 200 * malesa, 175 * malesa, 199 * malesa);
  korby.bezierCurveTo(156 * malesa, 218 * malesa, 135 * malesa, 222 * malesa, 114 * malesa, 203 * malesa);
  korby.bezierCurveTo(62 * malesa, 213 * malesa, 66 * malesa, 189 * malesa, 59 * malesa, 170 * malesa);
  korby.bezierCurveTo(27 * malesa, 164 * malesa, 31 * malesa, 134 * malesa, 38 * malesa, 123 * malesa);
  korby.bezierCurveTo(11 * malesa, 80 * malesa, 51 * malesa, 52 * malesa, 75 * malesa, 54 * malesa);
  korby.closePath();
  fill_path(korby, carree[0]);
  korby.translate(0, -10 * malesa);
  korby.globalAlpha = 1;
  korby.beginPath();
  korby.lineCap = "round";
  korby.lineJoin = "round";
  korby.moveTo(75 * malesa, 54 * malesa);
  korby.bezierCurveTo(79 * malesa, 21 * malesa, 131 * malesa, 13 * malesa, 153 * malesa, 36 * malesa);
  korby.bezierCurveTo(204 * malesa, 27 * malesa, 221 * malesa, 52 * malesa, 216 * malesa, 83 * malesa);
  korby.bezierCurveTo(241 * malesa, 103 * malesa, 232 * malesa, 138 * malesa, 214 * malesa, 147 * malesa);
  korby.bezierCurveTo(223 * malesa, 184 * malesa, 201 * malesa, 200 * malesa, 175 * malesa, 199 * malesa);
  korby.bezierCurveTo(156 * malesa, 218 * malesa, 135 * malesa, 222 * malesa, 114 * malesa, 203 * malesa);
  korby.bezierCurveTo(62 * malesa, 213 * malesa, 66 * malesa, 189 * malesa, 59 * malesa, 170 * malesa);
  korby.bezierCurveTo(27 * malesa, 164 * malesa, 31 * malesa, 134 * malesa, 38 * malesa, 123 * malesa);
  korby.bezierCurveTo(11 * malesa, 80 * malesa, 51 * malesa, 52 * malesa, 75 * malesa, 54 * malesa);
  korby.closePath();
  fill_path(korby, carree[1], carree[2], 8 * malesa);
  korby.beginPath();
  korby.lineCap = "round";
  korby.lineJoin = "round";
  korby.moveTo(121 * malesa, 102 * malesa);
  korby.bezierCurveTo(111 * malesa, 80 * malesa, 110 * malesa, 66 * malesa, 108 * malesa, 51 * malesa);
  korby.bezierCurveTo(119 * malesa, 65 * malesa, 129 * malesa, 85 * malesa, 135 * malesa, 99 * malesa);
  korby.bezierCurveTo(142 * malesa, 67 * malesa, 146 * malesa, 60 * malesa, 152 * malesa, 50 * malesa);
  korby.bezierCurveTo(154 * malesa, 71 * malesa, 152 * malesa, 85 * malesa, 149 * malesa, 104 * malesa);
  korby.bezierCurveTo(166 * malesa, 88 * malesa, 175 * malesa, 83 * malesa, 188 * malesa, 78 * malesa);
  korby.bezierCurveTo(179 * malesa, 91 * malesa, 170 * malesa, 103 * malesa, 160 * malesa, 112 * malesa);
  korby.bezierCurveTo(186 * malesa, 107 * malesa, 191 * malesa, 107 * malesa, 204 * malesa, 108 * malesa);
  korby.bezierCurveTo(195 * malesa, 114 * malesa, 179 * malesa, 120 * malesa, 163 * malesa, 123 * malesa);
  korby.bezierCurveTo(183 * malesa, 130 * malesa, 186 * malesa, 135 * malesa, 192 * malesa, 140 * malesa);
  korby.bezierCurveTo(179 * malesa, 141 * malesa, 164 * malesa, 139 * malesa, 153 * malesa, 135 * malesa);
  korby.bezierCurveTo(158 * malesa, 145 * malesa, 163 * malesa, 159 * malesa, 165 * malesa, 177 * malesa);
  korby.bezierCurveTo(154 * malesa, 166 * malesa, 145 * malesa, 153 * malesa, 138 * malesa, 139 * malesa);
  korby.bezierCurveTo(133 * malesa, 155 * malesa, 125 * malesa, 170 * malesa, 117 * malesa, 182 * malesa);
  korby.bezierCurveTo(116 * malesa, 160 * malesa, 119 * malesa, 151 * malesa, 124 * malesa, 138 * malesa);
  korby.bezierCurveTo(107 * malesa, 150 * malesa, 95 * malesa, 156 * malesa, 82 * malesa, 159 * malesa);
  korby.bezierCurveTo(94 * malesa, 140 * malesa, 101 * malesa, 136 * malesa, 113 * malesa, 128 * malesa);
  korby.bezierCurveTo(78 * malesa, 123 * malesa, 75 * malesa, 121 * malesa, 67 * malesa, 118 * malesa);
  korby.bezierCurveTo(85 * malesa, 112 * malesa, 94 * malesa, 112 * malesa, 111 * malesa, 113 * malesa);
  korby.bezierCurveTo(89 * malesa, 97 * malesa, 85 * malesa, 93 * malesa, 78 * malesa, 82 * malesa);
  korby.bezierCurveTo(92 * malesa, 85 * malesa, 101 * malesa, 90 * malesa, 121 * malesa, 102 * malesa);
  korby.closePath();
  fill_path(korby, carree[2]);
  korby.beginPath();
  korby.lineCap = "round";
  korby.lineJoin = "round";
  korby.moveTo(128 * malesa, 103 * malesa);
  korby.bezierCurveTo(111 * malesa, 112 * malesa, 117 * malesa, 136 * malesa, 140 * malesa, 130 * malesa);
  korby.bezierCurveTo(151 * malesa, 126 * malesa, 156 * malesa, 115 * malesa, 155 * malesa, 107 * malesa);
  korby.bezierCurveTo(155 * malesa, 96 * malesa, 154 * malesa, 94 * malesa, 148 * malesa, 94 * malesa);
  korby.bezierCurveTo(141 * malesa, 94 * malesa, 146 * malesa, 104 * malesa, 136 * malesa, 104 * malesa);
  korby.closePath();
  fill_path(korby, carree[3], carree[4], 4 * malesa);
  return ismail;
}
function create_garland_inv(jeraldene, hideo, furkan) {
  var semiyah = document.createElement("canvas");
  var kaarin = semiyah.getContext("2d");
  semiyah.width = 70 * jeraldene;
  semiyah.height = 70 * jeraldene;
  kaarin.globalAlpha = .5;
  circle(kaarin, 26 * jeraldene, 26 * jeraldene, 9 * jeraldene);
  fill_path(kaarin, furkan[0]);
  circle(kaarin, 56 * jeraldene, 36 * jeraldene, 9 * jeraldene);
  fill_path(kaarin, furkan[1]);
  circle(kaarin, 40 * jeraldene, 50 * jeraldene, 9 * jeraldene);
  fill_path(kaarin, furkan[2]);
  kaarin.globalAlpha = 1;
  circle(kaarin, 26 * jeraldene, 26 * jeraldene, 5 * jeraldene);
  fill_path(kaarin, furkan[0]);
  circle(kaarin, 56 * jeraldene, 36 * jeraldene, 5 * jeraldene);
  fill_path(kaarin, furkan[1]);
  circle(kaarin, 40 * jeraldene, 50 * jeraldene, 5 * jeraldene);
  fill_path(kaarin, furkan[2]);
  return semiyah;
}
function create_garland(adaley, vander, estellene) {
  var aleyiah = document.createElement("canvas");
  var kenyari = aleyiah.getContext("2d");
  aleyiah.width = 22 * adaley;
  aleyiah.height = 22 * adaley;
  kenyari.globalAlpha = .4;
  circle(kenyari, 11 * adaley, 11 * adaley, 10 * adaley);
  fill_path(kenyari, estellene[0]);
  kenyari.globalAlpha = .7;
  circle(kenyari, 11 * adaley, 11 * adaley, 7 * adaley);
  fill_path(kenyari, estellene[0]);
  kenyari.globalAlpha = 1;
  circle(kenyari, 11 * adaley, 11 * adaley, 4 * adaley);
  fill_path(kenyari, estellene[0]);
  return aleyiah;
}
function create_garland_light(harun, jhakari, telisha) {
  var caldwell = document.createElement("canvas");
  var shateara = caldwell.getContext("2d");
  caldwell.width = 20 * harun;
  caldwell.height = 20 * harun;
  shateara.globalAlpha = .5;
  circle(shateara, 10 * harun, 10 * harun, 9 * harun);
  fill_path(shateara, telisha[0]);
  return caldwell;
}
function create_roof(quess, kily, dohn) {
  var jalasha = document.createElement("canvas");
  var audri = jalasha.getContext("2d");
  jalasha.width = 248 * quess;
  jalasha.height = 247 * quess;
  audri.save();
  audri.translate(69.5 * quess, 145 * quess);
  round_rect(audri, -8.5 * quess, -63 * quess, 17 * quess, 127 * quess, 1 * quess);
  audri.restore();
  fill_path(audri, dohn[0]);
  audri.save();
  audri.translate(183 * quess, 145 * quess);
  round_rect(audri, -8 * quess, -63 * quess, 16 * quess, 126 * quess, 1 * quess);
  audri.restore();
  fill_path(audri, dohn[0]);
  audri.save();
  audri.translate(123.5 * quess, 62.5 * quess);
  audri.rotate(6.28);
  round_rect(audri, -84.5 * quess, -25.5 * quess, 169 * quess, 51 * quess, 5 * quess);
  audri.restore();
  fill_path(audri, dohn[2], dohn[1], 6 * quess);
  audri.save();
  audri.translate(123.5 * quess, 118 * quess);
  audri.rotate(6.24);
  round_rect(audri, -85.5 * quess, -24 * quess, 169 * quess, 48 * quess, 5 * quess);
  audri.restore();
  fill_path(audri, dohn[3], dohn[1], 6 * quess);
  audri.save();
  audri.translate(122 * quess, 177.5 * quess);
  audri.rotate(6.32);
  round_rect(audri, -84 * quess, -23.5 * quess, 169 * quess, 47 * quess, 5 * quess);
  audri.restore();
  fill_path(audri, dohn[2], dohn[1], 6 * quess);
  audri.beginPath();
  audri.lineCap = "round";
  audri.lineJoin = "round";
  audri.moveTo(37 * quess, 157 * quess);
  audri.bezierCurveTo(49 * quess, 160 * quess, 49 * quess, 160 * quess, 61 * quess, 163 * quess);
  audri.bezierCurveTo(49.5 * quess, 165.5 * quess, 49.5 * quess, 165.5 * quess, 38 * quess, 168 * quess);
  audri.closePath();
  fill_path(audri, dohn[1]);
  audri.beginPath();
  audri.lineCap = "round";
  audri.lineJoin = "round";
  audri.moveTo(205 * quess, 175 * quess);
  audri.bezierCurveTo(192.5 * quess, 180 * quess, 192.5 * quess, 180 * quess, 180 * quess, 185 * quess);
  audri.bezierCurveTo(193 * quess, 188 * quess, 193 * quess, 188 * quess, 206 * quess, 191 * quess);
  audri.closePath();
  fill_path(audri, dohn[1]);
  return jalasha;
}
function create_roof1(jonus, kingston, medeline) {
  var perpetua = document.createElement("canvas");
  var dishita = perpetua.getContext("2d");
  perpetua.width = 248 * jonus;
  perpetua.height = 247 * jonus;
  dishita.save();
  dishita.translate(182 * jonus, 120 * jonus);
  round_rect(dishita, -8 * jonus, -67 * jonus, 16 * jonus, 134 * jonus, 1 * jonus);
  dishita.restore();
  fill_path(dishita, medeline[0]);
  dishita.save();
  dishita.translate(68.5 * jonus, 127.5 * jonus);
  round_rect(dishita, -8.5 * jonus, -70.5 * jonus, 17 * jonus, 141 * jonus, 1 * jonus);
  dishita.restore();
  fill_path(dishita, medeline[0]);
  dishita.save();
  dishita.translate(123.5 * jonus, 68 * jonus);
  round_rect(dishita, -82.5 * jonus, -24 * jonus, 165 * jonus, 48 * jonus, 4 * jonus);
  dishita.restore();
  fill_path(dishita, medeline[2], medeline[1], 6 * jonus);
  dishita.save();
  dishita.translate(123 * jonus, 179.5 * jonus);
  round_rect(dishita, -83 * jonus, -24.5 * jonus, 166 * jonus, 49 * jonus, 4 * jonus);
  dishita.restore();
  fill_path(dishita, medeline[2], medeline[1], 6 * jonus);
  dishita.save();
  dishita.translate(123.5 * jonus, 123.5 * jonus);
  dishita.rotate(6.24);
  round_rect(dishita, -82.5 * jonus, -24.5 * jonus, 165 * jonus, 49 * jonus, 4 * jonus);
  dishita.restore();
  fill_path(dishita, medeline[3], medeline[1], 6 * jonus);
  dishita.beginPath();
  dishita.lineCap = "round";
  dishita.lineJoin = "round";
  dishita.moveTo(204 * jonus, 112 * jonus);
  dishita.bezierCurveTo(149 * jonus, 121.5 * jonus, 96 * jonus, 130 * jonus, 94 * jonus, 131 * jonus);
  dishita.bezierCurveTo(149.5 * jonus, 127.5 * jonus, 149.5 * jonus, 127.5 * jonus, 205 * jonus, 124 * jonus);
  dishita.closePath();
  fill_path(dishita, medeline[1]);
  return perpetua;
}
function create_roof2(esmerie, adebayo, svend) {
  var shauntrice = document.createElement("canvas");
  var anubis = shauntrice.getContext("2d");
  shauntrice.width = 248 * esmerie;
  shauntrice.height = 247 * esmerie;
  anubis.save();
  anubis.translate(183 * esmerie, 107 * esmerie);
  round_rect(anubis, -8 * esmerie, -70.5 * esmerie, 16 * esmerie, 141 * esmerie, 1 * esmerie);
  anubis.restore();
  fill_path(anubis, svend[0]);
  anubis.save();
  anubis.translate(69.5 * esmerie, 110 * esmerie);
  round_rect(anubis, -8.5 * esmerie, -71 * esmerie, 17 * esmerie, 143 * esmerie, 1 * esmerie);
  anubis.restore();
  fill_path(anubis, svend[0]);
  anubis.save();
  anubis.translate(123.5 * esmerie, 181 * esmerie);
  round_rect(anubis, -84.5 * esmerie, -26 * esmerie, 169 * esmerie, 52 * esmerie, 5 * esmerie);
  anubis.restore();
  fill_path(anubis, svend[2], svend[1], 6 * esmerie);
  anubis.beginPath();
  anubis.lineCap = "round";
  anubis.lineJoin = "round";
  anubis.moveTo(41 * esmerie, 95 * esmerie);
  anubis.bezierCurveTo(105 * esmerie, 96 * esmerie, 113 * esmerie, 99 * esmerie, 134 * esmerie, 102 * esmerie);
  anubis.bezierCurveTo(147 * esmerie, 106 * esmerie, 173 * esmerie, 100 * esmerie, 207 * esmerie, 105 * esmerie);
  anubis.bezierCurveTo(210 * esmerie, 105 * esmerie, 207 * esmerie, 140 * esmerie, 207 * esmerie, 154 * esmerie);
  anubis.bezierCurveTo(123.5 * esmerie, 151.5 * esmerie, 123.5 * esmerie, 151.5 * esmerie, 40 * esmerie, 149 * esmerie);
  anubis.bezierCurveTo(37 * esmerie, 145 * esmerie, 39 * esmerie, 95 * esmerie, 41 * esmerie, 96 * esmerie);
  anubis.closePath();
  fill_path(anubis, svend[2], svend[1], 6 * esmerie);
  anubis.beginPath();
  anubis.lineCap = "round";
  anubis.lineJoin = "round";
  anubis.moveTo(68 * esmerie, 75 * esmerie);
  anubis.bezierCurveTo(54 * esmerie, 72.5 * esmerie, 54 * esmerie, 72.5 * esmerie, 40 * esmerie, 70 * esmerie);
  anubis.bezierCurveTo(38 * esmerie, 46 * esmerie, 40 * esmerie, 46 * esmerie, 53 * esmerie, 46 * esmerie);
  anubis.bezierCurveTo(201 * esmerie, 41 * esmerie, 201 * esmerie, 41 * esmerie, 201 * esmerie, 42 * esmerie);
  anubis.bezierCurveTo(211 * esmerie, 40 * esmerie, 208 * esmerie, 53 * esmerie, 208 * esmerie, 72 * esmerie);
  anubis.bezierCurveTo(209 * esmerie, 91 * esmerie, 210 * esmerie, 96 * esmerie, 194 * esmerie, 94 * esmerie);
  anubis.bezierCurveTo(119 * esmerie, 97 * esmerie, 119 * esmerie, 97 * esmerie, 44 * esmerie, 100 * esmerie);
  anubis.bezierCurveTo(39 * esmerie, 99 * esmerie, 40 * esmerie, 96 * esmerie, 40 * esmerie, 80 * esmerie);
  anubis.bezierCurveTo(54 * esmerie, 77.5 * esmerie, 54 * esmerie, 77.5 * esmerie, 68 * esmerie, 75 * esmerie);
  anubis.closePath();
  fill_path(anubis, svend[3], svend[1], 6 * esmerie);
  return shauntrice;
}
function create_zombie_head(onyae, moxon, madissen) {
  var cedrik = document.createElement("canvas");
  var syrene = cedrik.getContext("2d");
  cedrik.width = 191 * onyae;
  cedrik.height = 153 * onyae;
  syrene.globalAlpha = .5;
  syrene.translate(0, 10 * onyae);
  syrene.save();
  syrene.translate(97.49996948242188 * onyae, 95.12844848632812 * onyae);
  round_rect(syrene, -62.5 * onyae, -41.5 * onyae, 125 * onyae, 83 * onyae, 20 * onyae);
  syrene.restore();
  fill_path(syrene, madissen[0], madissen[0], 4 * onyae);
  syrene.globalAlpha = 1;
  syrene.translate(0, -10 * onyae);
  syrene.save();
  syrene.translate(97.49996948242188 * onyae, 95.12844848632812 * onyae);
  round_rect(syrene, -62.5 * onyae, -41.5 * onyae, 125 * onyae, 83 * onyae, 20 * onyae);
  syrene.restore();
  fill_path(syrene, madissen[1], madissen[2], 4 * onyae);
  syrene.globalCompositeOperation = "destination-out";
  syrene.beginPath();
  syrene.lineCap = "round";
  syrene.lineJoin = "round";
  syrene.moveTo(26.999969482421875 * onyae, 50.850677490234375 * onyae);
  syrene.bezierCurveTo(46.499969482421875 * onyae, 64.85067749023438 * onyae, 46.499969482421875 * onyae, 64.85067749023438 * onyae, 65.99996948242188 * onyae, 78.85067749023438 * onyae);
  syrene.bezierCurveTo(80.99996948242188 * onyae, 87.85067749023438 * onyae, 105.99996948242188 * onyae, 82.85067749023438 * onyae, 114.99996948242188 * onyae, 80.85067749023438 * onyae);
  syrene.bezierCurveTo(130.99996948242188 * onyae, 69.85067749023438 * onyae, 152.99996948242188 * onyae, 70.85067749023438 * onyae, 166.99996948242188 * onyae, 67.85067749023438 * onyae);
  syrene.bezierCurveTo(156.99996948242188 * onyae, 52.850677490234375 * onyae, 156.99996948242188 * onyae, 52.850677490234375 * onyae, 146.99996948242188 * onyae, 37.850677490234375 * onyae);
  syrene.bezierCurveTo(101.49996948242188 * onyae, 37.350677490234375 * onyae, 101.49996948242188 * onyae, 37.350677490234375 * onyae, 55.999969482421875 * onyae, 36.850677490234375 * onyae);
  syrene.closePath();
  fill_path(syrene, madissen[2], madissen[3], 4 * onyae);
  syrene.globalCompositeOperation = "source-over";
  syrene.beginPath();
  syrene.lineCap = "round";
  syrene.lineJoin = "round";
  syrene.moveTo(40.999969482421875 * onyae, 59.850677490234375 * onyae);
  syrene.bezierCurveTo(41.999969482421875 * onyae, 50.850677490234375 * onyae, 47.999969482421875 * onyae, 47.850677490234375 * onyae, 56.999969482421875 * onyae, 49.850677490234375 * onyae);
  syrene.bezierCurveTo(65.99996948242188 * onyae, 41.850677490234375 * onyae, 76.99996948242188 * onyae, 42.850677490234375 * onyae, 90.99996948242188 * onyae, 47.850677490234375 * onyae);
  syrene.bezierCurveTo(94.99996948242188 * onyae, 42.850677490234375 * onyae, 104.99996948242188 * onyae, 42.850677490234375 * onyae, 114.99996948242188 * onyae, 47.850677490234375 * onyae);
  syrene.bezierCurveTo(131.99996948242188 * onyae, 42.850677490234375 * onyae, 142.99996948242188 * onyae, 48.850677490234375 * onyae, 145.99996948242188 * onyae, 56.850677490234375 * onyae);
  syrene.bezierCurveTo(160.99996948242188 * onyae, 63.850677490234375 * onyae, 154.99996948242188 * onyae, 69.85067749023438 * onyae, 155.99996948242188 * onyae, 70.85067749023438 * onyae);
  syrene.bezierCurveTo(141.99996948242188 * onyae, 71.85067749023438 * onyae, 141.99996948242188 * onyae, 71.85067749023438 * onyae, 127.99996948242188 * onyae, 72.85067749023438 * onyae);
  syrene.bezierCurveTo(110.99996948242188 * onyae, 83.85067749023438 * onyae, 107.99996948242188 * onyae, 82.85067749023438 * onyae, 90.99996948242188 * onyae, 85.85067749023438 * onyae);
  syrene.bezierCurveTo(70.99996948242188 * onyae, 83.85067749023438 * onyae, 64.99996948242188 * onyae, 79.85067749023438 * onyae, 53.999969482421875 * onyae, 70.85067749023438 * onyae);
  syrene.closePath();
  fill_path(syrene, madissen[3], madissen[4], 4 * onyae);
  syrene.beginPath();
  syrene.lineCap = "round";
  syrene.lineJoin = "round";
  syrene.moveTo(33.999969482421875 * onyae, 65.85067749023438 * onyae);
  syrene.bezierCurveTo(36.999969482421875 * onyae, 59.850677490234375 * onyae, 34.999969482421875 * onyae, 60.850677490234375 * onyae, 39.999969482421875 * onyae, 59.850677490234375 * onyae);
  syrene.bezierCurveTo(47.999969482421875 * onyae, 61.850677490234375 * onyae, 62.999969482421875 * onyae, 76.85067749023438 * onyae, 74.99996948242188 * onyae, 79.85067749023438 * onyae);
  syrene.bezierCurveTo(93.99996948242188 * onyae, 85.85067749023438 * onyae, 111.99996948242188 * onyae, 83.85067749023438 * onyae, 124.99996948242188 * onyae, 70.85067749023438 * onyae);
  syrene.bezierCurveTo(129.99996948242188 * onyae, 67.85067749023438 * onyae, 145.99996948242188 * onyae, 65.85067749023438 * onyae, 159.99996948242188 * onyae, 67.85067749023438 * onyae);
  syrene.bezierCurveTo(159.99996948242188 * onyae, 71.85067749023438 * onyae, 159.99996948242188 * onyae, 71.85067749023438 * onyae, 159.99996948242188 * onyae, 75.85067749023438 * onyae);
  syrene.bezierCurveTo(146.99996948242188 * onyae, 72.85067749023438 * onyae, 144.99996948242188 * onyae, 75.85067749023438 * onyae, 143.99996948242188 * onyae, 82.85067749023438 * onyae);
  syrene.bezierCurveTo(144.99996948242188 * onyae, 86.85067749023438 * onyae, 140.99996948242188 * onyae, 90.85067749023438 * onyae, 137.99996948242188 * onyae, 86.85067749023438 * onyae);
  syrene.bezierCurveTo(139.99996948242188 * onyae, 72.85067749023438 * onyae, 135.99996948242188 * onyae, 72.85067749023438 * onyae, 133.99996948242188 * onyae, 82.85067749023438 * onyae);
  syrene.bezierCurveTo(127.99996948242188 * onyae, 88.85067749023438 * onyae, 124.99996948242188 * onyae, 70.85067749023438 * onyae, 116.99996948242188 * onyae, 86.85067749023438 * onyae);
  syrene.bezierCurveTo(110.99996948242188 * onyae, 91.85067749023438 * onyae, 96.99996948242188 * onyae, 81.85067749023438 * onyae, 89.99996948242188 * onyae, 90.85067749023438 * onyae);
  syrene.bezierCurveTo(85.99996948242188 * onyae, 92.85067749023438 * onyae, 81.99996948242188 * onyae, 95.85067749023438 * onyae, 76.99996948242188 * onyae, 86.85067749023438 * onyae);
  syrene.bezierCurveTo(67.99996948242188 * onyae, 93.85067749023438 * onyae, 67.99996948242188 * onyae, 91.85067749023438 * onyae, 60.999969482421875 * onyae, 79.85067749023438 * onyae);
  syrene.bezierCurveTo(53.999969482421875 * onyae, 71.85067749023438 * onyae, 52.999969482421875 * onyae, 72.85067749023438 * onyae, 46.999969482421875 * onyae, 77.85067749023438 * onyae);
  syrene.bezierCurveTo(41.999969482421875 * onyae, 78.85067749023438 * onyae, 42.999969482421875 * onyae, 69.85067749023438 * onyae, 33.999969482421875 * onyae, 65.85067749023438 * onyae);
  syrene.closePath();
  fill_path(syrene, madissen[5], madissen[6], 4 * onyae);
  circle(syrene, 68 * onyae, 111.29513549804688 * onyae, 15 * onyae);
  fill_path(syrene, madissen[7], madissen[8], 4 * onyae);
  circle(syrene, 123 * onyae, 111.29510498046875 * onyae, 15 * onyae);
  fill_path(syrene, madissen[7], madissen[8], 4 * onyae);
  circle(syrene, 63 * onyae, 106 * onyae, 5 * onyae);
  fill_path(syrene, madissen[9]);
  circle(syrene, 118 * onyae, 106 * onyae, 5 * onyae);
  fill_path(syrene, madissen[9]);
  return cedrik;
}
function create_zombie_boss(zebdee, rahzel, kayland) {
  var nizar = document.createElement("canvas");
  var nickey = nizar.getContext("2d");
  nizar.width = 191 * zebdee;
  nizar.height = 153 * zebdee;
  nickey.globalAlpha = .5;
  nickey.translate(0, 10 * zebdee);
  nickey.save();
  nickey.translate(96.49996948242188 * zebdee, 66.79510498046875 * zebdee);
  nickey.rotate(0);
  round_rect(nickey, -79.5 * zebdee, -48.5 * zebdee, 159 * zebdee, 97 * zebdee, 22 * zebdee);
  nickey.restore();
  fill_path(nickey, kayland[0], kayland[0], 4 * zebdee);
  nickey.globalAlpha = 1;
  nickey.translate(0, -10 * zebdee);
  nickey.save();
  nickey.translate(96.49996948242188 * zebdee, 66.79510498046875 * zebdee);
  nickey.rotate(0);
  round_rect(nickey, -79.5 * zebdee, -48.5 * zebdee, 159 * zebdee, 97 * zebdee, 22 * zebdee);
  nickey.restore();
  fill_path(nickey, kayland[1], kayland[2], 4 * zebdee);
  nickey.translate(2 * zebdee, 0);
  nickey.beginPath();
  nickey.lineCap = "round";
  nickey.lineJoin = "round";
  nickey.moveTo(119 * zebdee, 28 * zebdee);
  nickey.bezierCurveTo(119 * zebdee, 22 * zebdee, 119 * zebdee, 20 * zebdee, 122 * zebdee, 16 * zebdee);
  nickey.bezierCurveTo(149 * zebdee, 39 * zebdee, 149 * zebdee, 39 * zebdee, 176 * zebdee, 63 * zebdee);
  nickey.bezierCurveTo(176 * zebdee, 75 * zebdee, 176 * zebdee, 75 * zebdee, 175 * zebdee, 88 * zebdee);
  nickey.bezierCurveTo(174 * zebdee, 90 * zebdee, 174 * zebdee, 90 * zebdee, 172 * zebdee, 93 * zebdee);
  nickey.bezierCurveTo(171 * zebdee, 101 * zebdee, 169 * zebdee, 109 * zebdee, 164 * zebdee, 113 * zebdee);
  nickey.bezierCurveTo(163 * zebdee, 104 * zebdee, 163 * zebdee, 104 * zebdee, 162 * zebdee, 95 * zebdee);
  nickey.bezierCurveTo(155 * zebdee, 105 * zebdee, 155 * zebdee, 105 * zebdee, 147 * zebdee, 116 * zebdee);
  nickey.bezierCurveTo(87 * zebdee, 114 * zebdee, 87 * zebdee, 114 * zebdee, 26 * zebdee, 112 * zebdee);
  nickey.bezierCurveTo(27 * zebdee, 106 * zebdee, 27 * zebdee, 106 * zebdee, 27 * zebdee, 101 * zebdee);
  nickey.bezierCurveTo(24 * zebdee, 104 * zebdee, 24 * zebdee, 104 * zebdee, 20 * zebdee, 108 * zebdee);
  nickey.bezierCurveTo(17 * zebdee, 103 * zebdee, 20 * zebdee, 86 * zebdee, 23 * zebdee, 72 * zebdee);
  nickey.bezierCurveTo(15 * zebdee, 74 * zebdee, 14 * zebdee, 78 * zebdee, 12 * zebdee, 83 * zebdee);
  nickey.bezierCurveTo(12 * zebdee, 65 * zebdee, 12 * zebdee, 54 * zebdee, 16 * zebdee, 42 * zebdee);
  nickey.bezierCurveTo(14 * zebdee, 39 * zebdee, 14 * zebdee, 39 * zebdee, 12 * zebdee, 36 * zebdee);
  nickey.bezierCurveTo(16 * zebdee, 33 * zebdee, 16 * zebdee, 33 * zebdee, 19 * zebdee, 30 * zebdee);
  nickey.bezierCurveTo(18 * zebdee, 27 * zebdee, 18 * zebdee, 27 * zebdee, 17 * zebdee, 25 * zebdee);
  nickey.bezierCurveTo(24 * zebdee, 24 * zebdee, 31 * zebdee, 21 * zebdee, 29 * zebdee, 19 * zebdee);
  nickey.bezierCurveTo(37 * zebdee, 25 * zebdee, 37 * zebdee, 25 * zebdee, 45 * zebdee, 31 * zebdee);
  nickey.bezierCurveTo(40 * zebdee, 23 * zebdee, 40 * zebdee, 21 * zebdee, 42 * zebdee, 16 * zebdee);
  nickey.bezierCurveTo(74 * zebdee, 16 * zebdee, 74 * zebdee, 16 * zebdee, 106 * zebdee, 16 * zebdee);
  nickey.bezierCurveTo(113 * zebdee, 21 * zebdee, 113 * zebdee, 21 * zebdee, 119 * zebdee, 26 * zebdee);
  nickey.closePath();
  fill_path(nickey, kayland[3], kayland[4], 4 * zebdee);
  return nizar;
}
function create_zombie_hurt(makahia, chala) {
  var denee = document.createElement("canvas");
  var tyuana = denee.getContext("2d");
  denee.width = 191 * makahia;
  denee.height = 153 * makahia;
  tyuana.save();
  tyuana.translate(96.49996948242188 * makahia, 66.79510498046875 * makahia);
  round_rect(tyuana, -79.5 * makahia, -48.5 * makahia, 159 * makahia, 97 * makahia, 22 * makahia);
  tyuana.restore();
  fill_path(tyuana, chala[0], chala[0], 4 * makahia);
  tyuana.translate(2 * makahia, 0);
  tyuana.beginPath();
  tyuana.lineCap = "round";
  tyuana.lineJoin = "round";
  tyuana.moveTo(119 * makahia, 28 * makahia);
  tyuana.bezierCurveTo(119 * makahia, 22 * makahia, 119 * makahia, 20 * makahia, 122 * makahia, 16 * makahia);
  tyuana.bezierCurveTo(149 * makahia, 39 * makahia, 149 * makahia, 39 * makahia, 176 * makahia, 63 * makahia);
  tyuana.bezierCurveTo(176 * makahia, 75 * makahia, 176 * makahia, 75 * makahia, 175 * makahia, 88 * makahia);
  tyuana.bezierCurveTo(174 * makahia, 90 * makahia, 174 * makahia, 90 * makahia, 172 * makahia, 93 * makahia);
  tyuana.bezierCurveTo(171 * makahia, 101 * makahia, 169 * makahia, 109 * makahia, 164 * makahia, 113 * makahia);
  tyuana.bezierCurveTo(163 * makahia, 104 * makahia, 163 * makahia, 104 * makahia, 162 * makahia, 95 * makahia);
  tyuana.bezierCurveTo(155 * makahia, 105 * makahia, 155 * makahia, 105 * makahia, 147 * makahia, 116 * makahia);
  tyuana.bezierCurveTo(87 * makahia, 114 * makahia, 87 * makahia, 114 * makahia, 26 * makahia, 112 * makahia);
  tyuana.bezierCurveTo(27 * makahia, 106 * makahia, 27 * makahia, 106 * makahia, 27 * makahia, 101 * makahia);
  tyuana.bezierCurveTo(24 * makahia, 104 * makahia, 24 * makahia, 104 * makahia, 20 * makahia, 108 * makahia);
  tyuana.bezierCurveTo(17 * makahia, 103 * makahia, 20 * makahia, 86 * makahia, 23 * makahia, 72 * makahia);
  tyuana.bezierCurveTo(15 * makahia, 74 * makahia, 14 * makahia, 78 * makahia, 12 * makahia, 83 * makahia);
  tyuana.bezierCurveTo(12 * makahia, 65 * makahia, 12 * makahia, 54 * makahia, 16 * makahia, 42 * makahia);
  tyuana.bezierCurveTo(14 * makahia, 39 * makahia, 14 * makahia, 39 * makahia, 12 * makahia, 36 * makahia);
  tyuana.bezierCurveTo(16 * makahia, 33 * makahia, 16 * makahia, 33 * makahia, 19 * makahia, 30 * makahia);
  tyuana.bezierCurveTo(18 * makahia, 27 * makahia, 18 * makahia, 27 * makahia, 17 * makahia, 25 * makahia);
  tyuana.bezierCurveTo(24 * makahia, 24 * makahia, 31 * makahia, 21 * makahia, 29 * makahia, 19 * makahia);
  tyuana.bezierCurveTo(37 * makahia, 25 * makahia, 37 * makahia, 25 * makahia, 45 * makahia, 31 * makahia);
  tyuana.bezierCurveTo(40 * makahia, 23 * makahia, 40 * makahia, 21 * makahia, 42 * makahia, 16 * makahia);
  tyuana.bezierCurveTo(74 * makahia, 16 * makahia, 74 * makahia, 16 * makahia, 106 * makahia, 16 * makahia);
  tyuana.bezierCurveTo(113 * makahia, 21 * makahia, 113 * makahia, 21 * makahia, 119 * makahia, 26 * makahia);
  tyuana.closePath();
  fill_path(tyuana, chala[0], chala[0], 4 * makahia);
  tyuana.save();
  tyuana.translate(97.49996948242188 * makahia, 95.12844848632812 * makahia);
  round_rect(tyuana, -62.5 * makahia, -41.5 * makahia, 125 * makahia, 83 * makahia, 20 * makahia);
  tyuana.restore();
  fill_path(tyuana, chala[0], chala[0], 4 * makahia);
  return denee;
}
function create_plant_seed(shuvonne, xoi, opalee) {
  var jelise = document.createElement("canvas");
  var quantashia = jelise.getContext("2d");
  var ketina = shuvonne * 40;
  var marrell = shuvonne * 40;
  jelise.width = ketina;
  jelise.height = marrell;
  var saraha = shuvonne * ketina / 2;
  var valyncia = shuvonne * marrell / 2;
  var jusin = shuvonne * 15;
  quantashia.save();
  quantashia.translate(saraha, valyncia);
  quantashia.globalAlpha = 1;
  circle(quantashia, 0, 0, jusin);
  fill_path(quantashia, opalee[0]);
  var jusin = 5 * shuvonne;
  var saraha = 2 * shuvonne;
  var valyncia = 1 * shuvonne;
  quantashia.translate(saraha, valyncia);
  quantashia.globalAlpha = 1;
  circle(quantashia, 0, 0, jusin);
  fill_path(quantashia, opalee[1]);
  quantashia.restore();
  return jelise;
}
function create_fish1(vadra, maeliyah, rosser, ermine) {
  var leray = document.createElement("canvas");
  var lucette = leray.getContext("2d");
  leray.width = 185 * vadra;
  leray.height = 240 * vadra;
  lucette.globalAlpha = .5;
  lucette.translate(0, 10 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(44 * vadra, 137 * vadra);
  lucette.bezierCurveTo(60 * vadra, 87 * vadra, 68 * vadra, 66 * vadra, 92 * vadra, 67 * vadra);
  lucette.bezierCurveTo(115 * vadra, 64 * vadra, 129 * vadra, 97 * vadra, 137 * vadra, 136 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[0]);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(53 * vadra, 181 * vadra);
  lucette.bezierCurveTo(30 * vadra, 164 * vadra, 19 * vadra, 150 * vadra, 11 * vadra, 136 * vadra);
  lucette.bezierCurveTo(28 * vadra, 121 * vadra, 38 * vadra, 132 * vadra, 48 * vadra, 150 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[0]);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(63 * vadra, 208 * vadra);
  lucette.bezierCurveTo(75 * vadra, 224 * vadra, 86 * vadra, 228 * vadra, 93 * vadra, 228 * vadra);
  lucette.bezierCurveTo(104 * vadra, 229 * vadra, 116 * vadra, 219 * vadra, 122 * vadra, 205 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[0]);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(130 * vadra, 170 * vadra);
  lucette.bezierCurveTo(146 * vadra, 125 * vadra, 156 * vadra, 126 * vadra, 173 * vadra, 137 * vadra);
  lucette.bezierCurveTo(167 * vadra, 151 * vadra, 143 * vadra, 174 * vadra, 131 * vadra, 183 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[0]);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(39 * vadra, 140 * vadra);
  lucette.bezierCurveTo(75 * vadra, 126 * vadra, 113 * vadra, 127 * vadra, 143 * vadra, 137 * vadra);
  lucette.bezierCurveTo(141 * vadra, 186 * vadra, 130 * vadra, 202 * vadra, 113 * vadra, 214 * vadra);
  lucette.bezierCurveTo(85 * vadra, 228 * vadra, 56 * vadra, 219 * vadra, 48 * vadra, 173 * vadra);
  lucette.bezierCurveTo(40 * vadra, 148 * vadra, 43 * vadra, 145 * vadra, 39 * vadra, 140 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[0]);
  lucette.globalAlpha = 1;
  lucette.translate(0, -10 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(44 * vadra, 137 * vadra);
  lucette.bezierCurveTo(60 * vadra, 87 * vadra, 68 * vadra, 66 * vadra, 92 * vadra, 67 * vadra);
  lucette.bezierCurveTo(115 * vadra, 64 * vadra, 129 * vadra, 97 * vadra, 137 * vadra, 136 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[1], rosser[2], 4 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(53 * vadra, 181 * vadra);
  lucette.bezierCurveTo(30 * vadra, 164 * vadra, 19 * vadra, 150 * vadra, 11 * vadra, 136 * vadra);
  lucette.bezierCurveTo(28 * vadra, 121 * vadra, 38 * vadra, 132 * vadra, 48 * vadra, 150 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[1], rosser[2], 4 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(63 * vadra, 208 * vadra);
  lucette.bezierCurveTo(75 * vadra, 224 * vadra, 86 * vadra, 228 * vadra, 93 * vadra, 228 * vadra);
  lucette.bezierCurveTo(104 * vadra, 229 * vadra, 116 * vadra, 219 * vadra, 122 * vadra, 205 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[1], rosser[2], 4 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(130 * vadra, 170 * vadra);
  lucette.bezierCurveTo(146 * vadra, 125 * vadra, 156 * vadra, 126 * vadra, 173 * vadra, 137 * vadra);
  lucette.bezierCurveTo(167 * vadra, 151 * vadra, 143 * vadra, 174 * vadra, 131 * vadra, 183 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[1], rosser[2], 4 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(39 * vadra, 140 * vadra);
  lucette.bezierCurveTo(75 * vadra, 126 * vadra, 113 * vadra, 127 * vadra, 143 * vadra, 137 * vadra);
  lucette.bezierCurveTo(141 * vadra, 186 * vadra, 130 * vadra, 202 * vadra, 113 * vadra, 214 * vadra);
  lucette.bezierCurveTo(85 * vadra, 228 * vadra, 56 * vadra, 219 * vadra, 48 * vadra, 173 * vadra);
  lucette.bezierCurveTo(40 * vadra, 148 * vadra, 43 * vadra, 145 * vadra, 39 * vadra, 140 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[1], rosser[2], 4 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(59 * vadra, 99 * vadra);
  lucette.bezierCurveTo(71 * vadra, 68 * vadra, 81 * vadra, 68 * vadra, 94 * vadra, 67 * vadra);
  lucette.bezierCurveTo(105 * vadra, 66 * vadra, 119 * vadra, 75 * vadra, 123 * vadra, 96 * vadra);
  lucette.bezierCurveTo(104 * vadra, 91 * vadra, 101 * vadra, 94 * vadra, 94 * vadra, 97 * vadra);
  lucette.bezierCurveTo(76 * vadra, 92 * vadra, 73 * vadra, 93 * vadra, 60 * vadra, 99 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[3], rosser[2], 4 * vadra);
  if (ermine === 0) {
    lucette.beginPath();
    lucette.lineCap = "round";
    lucette.lineJoin = "round";
    lucette.moveTo(47 * vadra, 149 * vadra);
    lucette.bezierCurveTo(43 * vadra, 140 * vadra, 48 * vadra, 130 * vadra, 59 * vadra, 127 * vadra);
    lucette.bezierCurveTo(77 * vadra, 126 * vadra, 90 * vadra, 131 * vadra, 131 * vadra, 127 * vadra);
    lucette.bezierCurveTo(143 * vadra, 130 * vadra, 144 * vadra, 143 * vadra, 132 * vadra, 154 * vadra);
    lucette.bezierCurveTo(90 * vadra, 152 * vadra, 90 * vadra, 152 * vadra, 48 * vadra, 150 * vadra);
    lucette.closePath();
    fill_path(lucette, rosser[1]);
    lucette.beginPath();
    lucette.lineCap = "round";
    lucette.lineJoin = "round";
    lucette.moveTo(40 * vadra, 139 * vadra);
    lucette.bezierCurveTo(48 * vadra, 113 * vadra, 76 * vadra, 119 * vadra, 91 * vadra, 126 * vadra);
    lucette.bezierCurveTo(117 * vadra, 113 * vadra, 135 * vadra, 117 * vadra, 144 * vadra, 134 * vadra);
    lucette.bezierCurveTo(144 * vadra, 138 * vadra, 144 * vadra, 138 * vadra, 144 * vadra, 142 * vadra);
    lucette.bezierCurveTo(128 * vadra, 124 * vadra, 108 * vadra, 124 * vadra, 91 * vadra, 136 * vadra);
    lucette.bezierCurveTo(59 * vadra, 124 * vadra, 50 * vadra, 137 * vadra, 42 * vadra, 148 * vadra);
    lucette.closePath();
    fill_path(lucette, rosser[3], rosser[2], 4 * vadra);
  } else {
    lucette.beginPath();
    lucette.lineCap = "round";
    lucette.lineJoin = "round";
    lucette.moveTo(41 * vadra, 139 * vadra);
    lucette.bezierCurveTo(53 * vadra, 117 * vadra, 69 * vadra, 118 * vadra, 92 * vadra, 127 * vadra);
    lucette.bezierCurveTo(124 * vadra, 111 * vadra, 136 * vadra, 121 * vadra, 143 * vadra, 136 * vadra);
    lucette.bezierCurveTo(142 * vadra, 144 * vadra, 142 * vadra, 144 * vadra, 141 * vadra, 152 * vadra);
    lucette.bezierCurveTo(128 * vadra, 131 * vadra, 113 * vadra, 138 * vadra, 92 * vadra, 145 * vadra);
    lucette.bezierCurveTo(57 * vadra, 133 * vadra, 57 * vadra, 147 * vadra, 44 * vadra, 154 * vadra);
    lucette.closePath();
    fill_path(lucette, rosser[3], rosser[2], 4 * vadra);
  }
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(90 * vadra, 95 * vadra);
  lucette.bezierCurveTo(99 * vadra, 82 * vadra, 98 * vadra, 58 * vadra, 99 * vadra, 40 * vadra);
  lucette.bezierCurveTo(90 * vadra, 38 * vadra, 89 * vadra, 34 * vadra, 92 * vadra, 17 * vadra);
  lucette.bezierCurveTo(92 * vadra, 5 * vadra, 83 * vadra, 16 * vadra, 78 * vadra, 29 * vadra);
  lucette.bezierCurveTo(72 * vadra, 59 * vadra, 87 * vadra, 81 * vadra, 89 * vadra, 87 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[1], rosser[2], 4 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(90 * vadra, 86 * vadra);
  lucette.bezierCurveTo(95 * vadra, 74 * vadra, 95 * vadra, 62 * vadra, 95 * vadra, 43 * vadra);
  lucette.bezierCurveTo(84 * vadra, 37 * vadra, 86 * vadra, 34 * vadra, 89 * vadra, 16 * vadra);
  lucette.bezierCurveTo(75 * vadra, 29 * vadra, 80 * vadra, 58 * vadra, 90 * vadra, 85 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[1], rosser[3], 4 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(92 * vadra, 117 * vadra);
  lucette.bezierCurveTo(98 * vadra, 87 * vadra, 93 * vadra, 78 * vadra, 85 * vadra, 76 * vadra);
  lucette.bezierCurveTo(85.5 * vadra, 79.5 * vadra, 85.5 * vadra, 79.5 * vadra, 86 * vadra, 83 * vadra);
  lucette.bezierCurveTo(84 * vadra, 85.5 * vadra, 84 * vadra, 85.5 * vadra, 82 * vadra, 88 * vadra);
  lucette.bezierCurveTo(90 * vadra, 93 * vadra, 89 * vadra, 100 * vadra, 92 * vadra, 117 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[1], rosser[3], 4 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(92 * vadra, 175 * vadra);
  lucette.bezierCurveTo(95 * vadra, 135 * vadra, 98 * vadra, 125 * vadra, 109 * vadra, 121 * vadra);
  lucette.bezierCurveTo(106 * vadra, 114 * vadra, 104 * vadra, 114 * vadra, 102 * vadra, 113 * vadra);
  lucette.bezierCurveTo(103 * vadra, 106 * vadra, 104 * vadra, 103 * vadra, 107 * vadra, 96 * vadra);
  lucette.bezierCurveTo(74 * vadra, 108 * vadra, 86 * vadra, 157 * vadra, 92 * vadra, 174 * vadra);
  lucette.closePath();
  fill_path(lucette, rosser[1], rosser[3], 4 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(48 * vadra, 169 * vadra);
  lucette.bezierCurveTo(42 * vadra, 187 * vadra, 50 * vadra, 193 * vadra, 59 * vadra, 198 * vadra);
  lucette.closePath();
  fill_path(lucette, undefined, rosser[2], 5 * vadra);
  lucette.beginPath();
  lucette.lineCap = "round";
  lucette.lineJoin = "round";
  lucette.moveTo(136 * vadra, 171 * vadra);
  lucette.bezierCurveTo(139 * vadra, 186 * vadra, 138 * vadra, 191 * vadra, 124 * vadra, 199 * vadra);
  lucette.closePath();
  fill_path(lucette, undefined, rosser[2], 4 * vadra);
  circle(lucette, 63 * vadra, 180 * vadra, 15.231546211727817 * vadra);
  fill_path(lucette, rosser[4]);
  circle(lucette, 121 * vadra, 181 * vadra, 15.652475842498529 * vadra);
  fill_path(lucette, rosser[4]);
  circle(lucette, 58 * vadra, 175 * vadra, 5.656854249492381 * vadra);
  fill_path(lucette, rosser[2]);
  circle(lucette, 116 * vadra, 175 * vadra, 5.656854249492381 * vadra);
  fill_path(lucette, rosser[2]);
  return leray;
}
function create_hurt_fish1(coyote, alessondra) {
  var iskandar = document.createElement("canvas");
  var yonasan = iskandar.getContext("2d");
  iskandar.width = 185 * coyote;
  iskandar.height = 240 * coyote;
  yonasan.beginPath();
  yonasan.lineCap = "round";
  yonasan.lineJoin = "round";
  yonasan.moveTo(44 * coyote, 137 * coyote);
  yonasan.bezierCurveTo(60 * coyote, 87 * coyote, 68 * coyote, 66 * coyote, 92 * coyote, 67 * coyote);
  yonasan.bezierCurveTo(115 * coyote, 64 * coyote, 129 * coyote, 97 * coyote, 137 * coyote, 136 * coyote);
  yonasan.closePath();
  fill_path(yonasan, alessondra[0]);
  yonasan.beginPath();
  yonasan.lineCap = "round";
  yonasan.lineJoin = "round";
  yonasan.moveTo(53 * coyote, 181 * coyote);
  yonasan.bezierCurveTo(30 * coyote, 164 * coyote, 19 * coyote, 150 * coyote, 11 * coyote, 136 * coyote);
  yonasan.bezierCurveTo(28 * coyote, 121 * coyote, 38 * coyote, 132 * coyote, 48 * coyote, 150 * coyote);
  yonasan.closePath();
  fill_path(yonasan, alessondra[0]);
  yonasan.beginPath();
  yonasan.lineCap = "round";
  yonasan.lineJoin = "round";
  yonasan.moveTo(63 * coyote, 208 * coyote);
  yonasan.bezierCurveTo(75 * coyote, 224 * coyote, 86 * coyote, 228 * coyote, 93 * coyote, 228 * coyote);
  yonasan.bezierCurveTo(104 * coyote, 229 * coyote, 116 * coyote, 219 * coyote, 122 * coyote, 205 * coyote);
  yonasan.closePath();
  fill_path(yonasan, alessondra[0]);
  yonasan.beginPath();
  yonasan.lineCap = "round";
  yonasan.lineJoin = "round";
  yonasan.moveTo(130 * coyote, 170 * coyote);
  yonasan.bezierCurveTo(146 * coyote, 125 * coyote, 156 * coyote, 126 * coyote, 173 * coyote, 137 * coyote);
  yonasan.bezierCurveTo(167 * coyote, 151 * coyote, 143 * coyote, 174 * coyote, 131 * coyote, 183 * coyote);
  yonasan.closePath();
  fill_path(yonasan, alessondra[0]);
  yonasan.beginPath();
  yonasan.lineCap = "round";
  yonasan.lineJoin = "round";
  yonasan.moveTo(39 * coyote, 140 * coyote);
  yonasan.bezierCurveTo(75 * coyote, 126 * coyote, 113 * coyote, 127 * coyote, 143 * coyote, 137 * coyote);
  yonasan.bezierCurveTo(141 * coyote, 186 * coyote, 130 * coyote, 202 * coyote, 113 * coyote, 214 * coyote);
  yonasan.bezierCurveTo(85 * coyote, 228 * coyote, 56 * coyote, 219 * coyote, 48 * coyote, 173 * coyote);
  yonasan.bezierCurveTo(40 * coyote, 148 * coyote, 43 * coyote, 145 * coyote, 39 * coyote, 140 * coyote);
  yonasan.closePath();
  fill_path(yonasan, alessondra[0]);
  yonasan.beginPath();
  yonasan.lineCap = "round";
  yonasan.lineJoin = "round";
  yonasan.moveTo(90 * coyote, 95 * coyote);
  yonasan.bezierCurveTo(99 * coyote, 82 * coyote, 98 * coyote, 58 * coyote, 99 * coyote, 40 * coyote);
  yonasan.bezierCurveTo(90 * coyote, 38 * coyote, 89 * coyote, 34 * coyote, 92 * coyote, 17 * coyote);
  yonasan.bezierCurveTo(92 * coyote, 5 * coyote, 83 * coyote, 16 * coyote, 78 * coyote, 29 * coyote);
  yonasan.bezierCurveTo(72 * coyote, 59 * coyote, 87 * coyote, 81 * coyote, 89 * coyote, 87 * coyote);
  yonasan.closePath();
  fill_path(yonasan, alessondra[0]);
  yonasan.beginPath();
  yonasan.lineCap = "round";
  yonasan.lineJoin = "round";
  yonasan.moveTo(90 * coyote, 86 * coyote);
  yonasan.bezierCurveTo(95 * coyote, 74 * coyote, 95 * coyote, 62 * coyote, 95 * coyote, 43 * coyote);
  yonasan.bezierCurveTo(84 * coyote, 37 * coyote, 86 * coyote, 34 * coyote, 89 * coyote, 16 * coyote);
  yonasan.bezierCurveTo(75 * coyote, 29 * coyote, 80 * coyote, 58 * coyote, 90 * coyote, 85 * coyote);
  yonasan.closePath();
  fill_path(yonasan, alessondra[0]);
  yonasan.beginPath();
  yonasan.lineCap = "round";
  yonasan.lineJoin = "round";
  yonasan.moveTo(92 * coyote, 117 * coyote);
  yonasan.bezierCurveTo(98 * coyote, 87 * coyote, 93 * coyote, 78 * coyote, 85 * coyote, 76 * coyote);
  yonasan.bezierCurveTo(85.5 * coyote, 79.5 * coyote, 85.5 * coyote, 79.5 * coyote, 86 * coyote, 83 * coyote);
  yonasan.bezierCurveTo(84 * coyote, 85.5 * coyote, 84 * coyote, 85.5 * coyote, 82 * coyote, 88 * coyote);
  yonasan.bezierCurveTo(90 * coyote, 93 * coyote, 89 * coyote, 100 * coyote, 92 * coyote, 117 * coyote);
  yonasan.closePath();
  fill_path(yonasan, alessondra[0]);
  yonasan.beginPath();
  yonasan.lineCap = "round";
  yonasan.lineJoin = "round";
  yonasan.moveTo(92 * coyote, 175 * coyote);
  yonasan.bezierCurveTo(95 * coyote, 135 * coyote, 98 * coyote, 125 * coyote, 109 * coyote, 121 * coyote);
  yonasan.bezierCurveTo(106 * coyote, 114 * coyote, 104 * coyote, 114 * coyote, 102 * coyote, 113 * coyote);
  yonasan.bezierCurveTo(103 * coyote, 106 * coyote, 104 * coyote, 103 * coyote, 107 * coyote, 96 * coyote);
  yonasan.bezierCurveTo(74 * coyote, 108 * coyote, 86 * coyote, 157 * coyote, 92 * coyote, 174 * coyote);
  yonasan.closePath();
  fill_path(yonasan, alessondra[0]);
  return iskandar;
}
function create_fish2(helga, bitsy, flavius, eyleen) {
  var chanity = document.createElement("canvas");
  var miara = chanity.getContext("2d");
  chanity.width = 185 * helga;
  chanity.height = 240 * helga;
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(58 * helga, 205 * helga);
  miara.bezierCurveTo(74 * helga, 227 * helga, 83 * helga, 230 * helga, 92 * helga, 230 * helga);
  miara.bezierCurveTo(101 * helga, 232 * helga, 119 * helga, 219 * helga, 122 * helga, 205 * helga);
  miara.closePath();
  fill_path(miara, flavius[1], flavius[2], 4 * helga);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(46 * helga, 151 * helga);
  miara.bezierCurveTo(34 * helga, 126 * helga, 21 * helga, 130 * helga, 10 * helga, 139 * helga);
  miara.bezierCurveTo(27 * helga, 168 * helga, 48 * helga, 180 * helga, 53 * helga, 184 * helga);
  miara.closePath();
  fill_path(miara, flavius[3], flavius[2], 4 * helga);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(122 * helga, 165 * helga);
  miara.bezierCurveTo(143 * helga, 140 * helga, 154 * helga, 123 * helga, 172 * helga, 139 * helga);
  miara.bezierCurveTo(169 * helga, 149 * helga, 147 * helga, 173 * helga, 126 * helga, 192 * helga);
  miara.closePath();
  fill_path(miara, flavius[3], flavius[2], 4 * helga);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(47 * helga, 129 * helga);
  miara.bezierCurveTo(55 * helga, 90 * helga, 71 * helga, 66 * helga, 93 * helga, 69 * helga);
  miara.bezierCurveTo(116 * helga, 70 * helga, 122 * helga, 88 * helga, 136 * helga, 127 * helga);
  miara.bezierCurveTo(143 * helga, 137 * helga, 144 * helga, 137 * helga, 144 * helga, 142 * helga);
  miara.bezierCurveTo(138 * helga, 199 * helga, 128 * helga, 206 * helga, 108 * helga, 219 * helga);
  miara.bezierCurveTo(84 * helga, 228 * helga, 65 * helga, 224 * helga, 50 * helga, 191 * helga);
  miara.bezierCurveTo(41 * helga, 161 * helga, 41 * helga, 157 * helga, 39 * helga, 144 * helga);
  miara.bezierCurveTo(40 * helga, 140 * helga, 42 * helga, 137 * helga, 47 * helga, 129 * helga);
  miara.closePath();
  fill_path(miara, flavius[1], flavius[2], 4 * helga);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(47 * helga, 133 * helga);
  miara.bezierCurveTo(65 * helga, 143 * helga, 74 * helga, 162 * helga, 70 * helga, 186 * helga);
  miara.bezierCurveTo(71 * helga, 188.5 * helga, 71 * helga, 188.5 * helga, 72 * helga, 191 * helga);
  miara.bezierCurveTo(81 * helga, 185.5 * helga, 81 * helga, 185.5 * helga, 90 * helga, 180 * helga);
  miara.bezierCurveTo(99 * helga, 185 * helga, 99 * helga, 185 * helga, 108 * helga, 190 * helga);
  miara.bezierCurveTo(110.5 * helga, 184.5 * helga, 110.5 * helga, 184.5 * helga, 113 * helga, 179 * helga);
  miara.bezierCurveTo(110 * helga, 156 * helga, 121 * helga, 156 * helga, 142 * helga, 141 * helga);
  miara.bezierCurveTo(137.5 * helga, 133 * helga, 137.5 * helga, 133 * helga, 133 * helga, 125 * helga);
  miara.bezierCurveTo(116 * helga, 78 * helga, 112 * helga, 70 * helga, 91 * helga, 71 * helga);
  miara.bezierCurveTo(62 * helga, 69 * helga, 59 * helga, 107 * helga, 48 * helga, 132 * helga);
  miara.closePath();
  fill_path(miara, flavius[4]);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(93 * helga, 86 * helga);
  miara.bezierCurveTo(101 * helga, 79 * helga, 99 * helga, 56 * helga, 100 * helga, 37 * helga);
  miara.bezierCurveTo(90 * helga, 34 * helga, 90 * helga, 27 * helga, 93 * helga, 13 * helga);
  miara.bezierCurveTo(96 * helga, 0 * helga, 85 * helga, 13 * helga, 82 * helga, 26 * helga);
  miara.bezierCurveTo(78 * helga, 43 * helga, 89 * helga, 74 * helga, 93 * helga, 85 * helga);
  miara.closePath();
  fill_path(miara, flavius[3], flavius[2], 4 * helga);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(94 * helga, 86 * helga);
  miara.bezierCurveTo(120 * helga, 88 * helga, 132 * helga, 109 * helga, 122 * helga, 128 * helga);
  miara.bezierCurveTo(118 * helga, 139 * helga, 101 * helga, 146 * helga, 90 * helga, 143 * helga);
  miara.bezierCurveTo(57 * helga, 141 * helga, 49 * helga, 109 * helga, 68 * helga, 94 * helga);
  miara.bezierCurveTo(78 * helga, 85 * helga, 90 * helga, 86 * helga, 95 * helga, 86 * helga);
  miara.closePath();
  fill_path(miara, flavius[1]);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(91 * helga, 178 * helga);
  miara.bezierCurveTo(78 * helga, 136 * helga, 81 * helga, 88 * helga, 93 * helga, 87 * helga);
  miara.bezierCurveTo(101 * helga, 84 * helga, 94 * helga, 97 * helga, 94 * helga, 107 * helga);
  miara.bezierCurveTo(91 * helga, 112 * helga, 92 * helga, 117 * helga, 94 * helga, 121 * helga);
  miara.bezierCurveTo(98 * helga, 126 * helga, 102 * helga, 128 * helga, 97 * helga, 135 * helga);
  miara.bezierCurveTo(92 * helga, 140 * helga, 93 * helga, 160 * helga, 91 * helga, 179 * helga);
  miara.closePath();
  fill_path(miara, flavius[5], flavius[1], 4 * helga);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(20 * helga, 151 * helga);
  miara.bezierCurveTo(22 * helga, 147 * helga, 22 * helga, 147 * helga, 24 * helga, 143 * helga);
  miara.bezierCurveTo(27 * helga, 144.5 * helga, 27 * helga, 144.5 * helga, 30 * helga, 146 * helga);
  miara.bezierCurveTo(31 * helga, 143 * helga, 31 * helga, 143 * helga, 32 * helga, 140 * helga);
  miara.bezierCurveTo(35 * helga, 140.5 * helga, 35 * helga, 140.5 * helga, 38 * helga, 141 * helga);
  miara.bezierCurveTo(31 * helga, 132 * helga, 29 * helga, 131 * helga, 22 * helga, 132 * helga);
  miara.bezierCurveTo(14 * helga, 135 * helga, 13 * helga, 135 * helga, 11 * helga, 138 * helga);
  miara.bezierCurveTo(15.5 * helga, 144.5 * helga, 15.5 * helga, 144.5 * helga, 20 * helga, 151 * helga);
  miara.closePath();
  fill_path(miara, flavius[6]);
  circle(miara, 61 * helga, 183 * helga, 16.15549442140351 * helga);
  fill_path(miara, flavius[7]);
  circle(miara, 121 * helga, 184 * helga, 14.866068747318506 * helga);
  fill_path(miara, flavius[7]);
  circle(miara, 57 * helga, 178 * helga, 5.656854249492381 * helga);
  fill_path(miara, flavius[2]);
  circle(miara, 116 * helga, 177 * helga, 5.830951894845301 * helga);
  fill_path(miara, flavius[2]);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(162 * helga, 152 * helga);
  miara.bezierCurveTo(161.5 * helga, 148 * helga, 161.5 * helga, 148 * helga, 161 * helga, 144 * helga);
  miara.bezierCurveTo(157.5 * helga, 145 * helga, 157.5 * helga, 145 * helga, 154 * helga, 146 * helga);
  miara.bezierCurveTo(153.5 * helga, 143 * helga, 153.5 * helga, 143 * helga, 153 * helga, 140 * helga);
  miara.bezierCurveTo(149 * helga, 140.5 * helga, 149 * helga, 140.5 * helga, 145 * helga, 141 * helga);
  miara.bezierCurveTo(150 * helga, 132 * helga, 161 * helga, 131 * helga, 170 * helga, 138 * helga);
  miara.bezierCurveTo(173 * helga, 141 * helga, 165 * helga, 150 * helga, 162 * helga, 150 * helga);
  miara.closePath();
  fill_path(miara, flavius[6]);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(106 * helga, 110 * helga);
  miara.bezierCurveTo(104 * helga, 98 * helga, 112 * helga, 91 * helga, 118 * helga, 101 * helga);
  miara.bezierCurveTo(122 * helga, 115 * helga, 121 * helga, 119 * helga, 117 * helga, 124 * helga);
  miara.bezierCurveTo(112 * helga, 129 * helga, 107 * helga, 124 * helga, 106 * helga, 112 * helga);
  miara.closePath();
  fill_path(miara, flavius[1]);
  miara.beginPath();
  miara.lineCap = "round";
  miara.lineJoin = "round";
  miara.moveTo(64 * helga, 106 * helga);
  miara.bezierCurveTo(66 * helga, 97 * helga, 72 * helga, 89 * helga, 76 * helga, 98 * helga);
  miara.bezierCurveTo(78 * helga, 106 * helga, 79 * helga, 118 * helga, 72 * helga, 126 * helga);
  miara.bezierCurveTo(65 * helga, 130 * helga, 63 * helga, 117 * helga, 64 * helga, 108 * helga);
  miara.closePath();
  fill_path(miara, flavius[1]);
  return chanity;
}
function create_food_plant(ojay) {
  var odesa = document.createElement("canvas");
  var brittinay = odesa.getContext("2d");
  var shawnelle = ojay * 200;
  var rashieka = ojay * 200;
  odesa.width = shawnelle;
  odesa.height = rashieka;
  var chundra = create_plant(.35, false, ["#0e3022", "#0b8052", "#077b49"]);
  brittinay.drawImage(chundra, 10, 10);
  var chundra = create_fruit(.9, false, ["#3d2a6e", "#8255b5"]);
  brittinay.drawImage(chundra, 21, 20);
  var chundra = create_fruit(.9, false, ["#3d2a6e", "#8255b5"]);
  brittinay.drawImage(chundra, 38, 28);
  var chundra = create_fruit(.9, false, ["#3d2a6e", "#8255b5"]);
  brittinay.drawImage(chundra, 15, 37);
  var chundra = create_fruit(.9, false, ["#3d2a6e", "#8255b5"]);
  brittinay.drawImage(chundra, 32, 45);
  return odesa;
}
function create_gear(apryle, adriene) {
  var mondra = document.createElement("canvas");
  var stefenie = mondra.getContext("2d");
  var kymera = apryle * 100;
  var lewellyn = apryle * 100;
  var shinika = kymera / 2;
  var mederic = lewellyn / 2;
  mondra.width = kymera;
  mondra.height = lewellyn;
  var yaleska = apryle * 5;
  var taizlee = apryle * 28;
  var chiana = yaleska / 2;
  var grayton = taizlee / 2;
  stefenie.translate(shinika, mederic);
  for (var jyana = 0; jyana < 4; jyana++) {
    round_rect(stefenie, -chiana, -grayton, yaleska, taizlee, apryle * 2);
    stefenie.rotate(Math.PI / 4);
    fill_path(stefenie, adriene);
  }
  stefenie.arc(0, 0, 10 * apryle, 0, Math.PI * 2);
  fill_path(stefenie, adriene);
  stefenie.globalCompositeOperation = "destination-out";
  circle(stefenie, 0, 0, apryle * 4);
  stefenie.fill();
  return mondra;
}
function create_gear_option(keyonnia, zetta, eola) {
  var camiren = document.createElement("canvas");
  var leveah = camiren.getContext("2d");
  var lametra = keyonnia * 32;
  var analyz = keyonnia * 32;
  var maryjoan = lametra / 2;
  var jaelene = analyz / 2;
  camiren.width = lametra;
  camiren.height = analyz;
  var talley = keyonnia * 5;
  var depree = keyonnia * 28;
  var polet = talley / 2;
  var zamire = depree / 2;
  leveah.translate(0 * keyonnia, 0 * keyonnia);
  leveah.translate(maryjoan, jaelene);
  if (eola == 1) {
    circle(leveah, 0, 0, 10 * keyonnia, 0);
    fill_path(leveah, zetta[2], zetta[2], 3 * keyonnia);
    for (var juliea = 0; juliea < 4; juliea++) {
      round_rect(leveah, -polet, -zamire, talley, depree, keyonnia * 2);
      leveah.rotate(Math.PI / 4);
      fill_path(leveah, zetta[2], zetta[2], 4 * keyonnia);
    }
  }
  circle(leveah, 0, 0, 10 * keyonnia, 0);
  fill_path(leveah, zetta[0], zetta[1], 1.5 * keyonnia);
  for (var juliea = 0; juliea < 4; juliea++) {
    round_rect(leveah, -polet, -zamire, talley, depree, keyonnia * 2);
    leveah.rotate(Math.PI / 4);
    fill_path(leveah, zetta[0], zetta[1], 1.5 * keyonnia);
  }
  circle(leveah, 0, 0, 10 * keyonnia, 0);
  fill_path(leveah, zetta[0]);
  circle(leveah, 0, 0, 4 * keyonnia, 0);
  fill_path(leveah, zetta[2], zetta[1], 1.5 * keyonnia);
  leveah.globalCompositeOperation = "destination-out";
  circle(leveah, 0, 0, 4 * keyonnia, 0);
  fill_path(leveah, zetta[0], zetta[1], 2 * keyonnia);
  leveah.globalCompositeOperation = "source-over";
  circle(leveah, 0, 0, 4 * keyonnia, 0);
  fill_path(leveah, undefined, zetta[1], 2 * keyonnia);
  return camiren;
}
function create_minimap_object(dalesia, osten, jisell, shanquil, olanda, kyjaun, sayd) {
  if (sayd === undefined) {
    sayd = 0;
  }
  for (var jenive = kyjaun == -1 ? 0 : kyjaun; jenive >= sayd; jenive--) {
    for (var shnea = 0; shnea < 200; shnea++) {
      for (var crews = 0; crews < 200; crews++) {
        var karran = MAP.tiles[crews][shnea];
        if (!karran || !karran[shanquil]) {
          continue;
        }
        if (kyjaun == -1) {
          var shoso = karran[shanquil];
        } else {
          var shoso = karran[shanquil][jenive];
        }
        for (var wannell = 0; shoso && wannell < shoso.length; wannell++) {
          var marabel = shoso[wannell];
          dalesia.fillStyle = jisell;
          circle(dalesia, marabel.x * osten * .0095, marabel.y * osten * .0095, olanda * osten);
          dalesia.fill();
        }
      }
    }
  }
}
function create_minimap(ilham, keystle) {
  var cherianne = document.createElement("canvas");
  var wiktoria = cherianne.getContext("2d");
  cherianne.width = 200 * ilham;
  cherianne.height = 200 * ilham;
  wiktoria.translate(9 * ilham, 12 * ilham);
  wiktoria.fillStyle = keystle[0];
  wiktoria.fillRect(-2, -3, cherianne.width, cherianne.height);
  wiktoria.fillStyle = keystle[9];
  wiktoria.fillRect(0, 0, cherianne.width, cherianne.height);
  wiktoria.fillStyle = keystle[17];
  wiktoria.fillRect(0, 0, cherianne.width, cherianne.height / 2.1);
  wiktoria.fillStyle = keystle[26];
  wiktoria.fillRect(cherianne.width / 1.77, cherianne.height / 2.1, cherianne.width / 2.1, cherianne.height / 2.1);
  wiktoria.fillStyle = keystle[28];
  wiktoria.fillRect(cherianne.width / 1.77, cherianne.height / 2.1, 5, cherianne.height / 2.1);
  create_minimap_object(wiktoria, ilham, keystle[17], "so", 3, 6, 0);
  create_minimap_object(wiktoria, ilham, keystle[28], "isl", 6, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[28], "isl", 6, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[28], "isl", 6, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[5], "plm", 2, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[5], "plm", 2, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[5], "plm", 2, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[5], "t", 2, 5, 4);
  create_minimap_object(wiktoria, ilham, keystle[6], "t", 3, 3, 2);
  create_minimap_object(wiktoria, ilham, keystle[7], "t", 4, 1, 0);
  create_minimap_object(wiktoria, ilham, keystle[8], "b", 3, 3, 2);
  create_minimap_object(wiktoria, ilham, keystle[9], "b", 4, 1, 0);
  create_minimap_object(wiktoria, ilham, keystle[2], "s", 2, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[3], "s", 3, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[4], "s", 4, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[10], "g", 2, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[11], "g", 3, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[12], "g", 4, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[1], "p", 4, -1);
  create_minimap_object(wiktoria, ilham, keystle[25], "dg", 3, 6, 0);
  create_minimap_object(wiktoria, ilham, keystle[27], "cs", 2, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[27], "cs", 2, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[27], "cs", 2, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[19], "f", 2, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[20], "f", 3, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[21], "f", 4, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[22], "gw", 2, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[22], "gw", 3, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[22], "gw", 4, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[23], "dw", 3, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[23], "dw", 4, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[23], "dw", 2, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[23], "d", 3, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[23], "d", 4, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[23], "d", 2, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[24], "a", 2, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[24], "a", 3, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[24], "a", 4, 0, 0);
  create_minimap_object(wiktoria, ilham, keystle[30], "l", 4, 2, 2);
  create_minimap_object(wiktoria, ilham, keystle[30], "l", 4, 1, 1);
  create_minimap_object(wiktoria, ilham, keystle[30], "l", 4, 0, 0);
  circle(wiktoria, 0, 0, 0);
  wiktoria.globalCompositeOperation = "destination-out";
  wiktoria.translate(-9 * ilham, -4 * ilham);
  wiktoria.rect(5 * ilham, 0, cherianne.width * ilham, cherianne.height * ilham, 10 * ilham);
  wiktoria.lineWidth = 7 * ilham;
  wiktoria.strokeStyle = keystle[16];
  wiktoria.stroke();
  return cherianne;
}
function create_workbench(ariyal, cahira, wallice) {
  var baila = document.createElement("canvas");
  var kanylah = baila.getContext("2d");
  var ethelle = ariyal * 125;
  var synetra = ariyal * 95;
  var theon = ethelle / 2;
  var pattijo = synetra / 2;
  var kaleen = ariyal * 10;
  var dodie = ariyal * 8;
  var abela = ariyal * 112;
  var muneera = ariyal * 82;
  var kathey = abela / 2;
  var colden = muneera / 2;
  var dayn = ariyal * 4;
  baila.width = ethelle;
  baila.height = synetra;
  kanylah.translate(theon - 4 * ariyal, pattijo + 4 * ariyal);
  kanylah.globalAlpha = cahira ? .5 : 1;
  round_rect(kanylah, -kathey, -colden, abela, muneera, kaleen);
  fill_path(kanylah, wallice[0]);
  kanylah.globalAlpha = 1;
  kanylah.translate(0, -dodie);
  round_rect(kanylah, -kathey, -colden, abela, muneera, kaleen);
  fill_path(kanylah, wallice[1], wallice[2], dayn);
  var ethelle = 55 * ariyal;
  var synetra = 45 * ariyal;
  var kaleen = 5;
  kanylah.translate(-40 * ariyal, -30 * ariyal);
  round_rect(kanylah, 0, 0, ethelle, synetra, kaleen);
  fill_path(kanylah, wallice[3]);
  var kawehi = create_gear(.7 * ariyal, wallice[3]);
  kanylah.drawImage(kawehi, 45 * ariyal, -25 * ariyal);
  var kawehi = create_gear(.7 * ariyal, wallice[3]);
  kanylah.drawImage(kawehi, 45 * ariyal, 15 * ariyal);
  var kawehi = create_gear(1.2 * ariyal, wallice[3]);
  kanylah.drawImage(kawehi, 28 * ariyal, -30 * ariyal);
  var ethelle = 15 * ariyal;
  var synetra = 70 * ariyal;
  var kaleen = 5 * ariyal;
  kanylah.translate(78 * ariyal, -5 * ariyal);
  round_rect(kanylah, 0, 0, ethelle, synetra, kaleen);
  fill_path(kanylah, wallice[4]);
  var ethelle = 9 * ariyal;
  var synetra = 50 * ariyal;
  var kaleen = 3 * ariyal;
  kanylah.translate(-20 * ariyal, 20 * ariyal);
  kanylah.rotate(Math.PI / 5);
  kanylah.globalAlpha = .6;
  round_rect(kanylah, 0, 0, ethelle, synetra, kaleen);
  fill_path(kanylah, wallice[5]);
  kanylah.translate(-20 * ariyal, 29 * ariyal);
  kanylah.rotate(Math.PI / 5);
  kanylah.globalAlpha = .6;
  kanylah.beginPath();
  kanylah.lineJoin = "round";
  kanylah.moveTo(0, 0);
  kanylah.lineTo(0, 30 * ariyal);
  kanylah.lineTo(30 * ariyal, 30 * ariyal);
  kanylah.closePath();
  fill_path(kanylah, null, wallice[5], 8 * ariyal);
  return baila;
}
function create_rabbit(yissochor, markena) {
  var illidan = document.createElement("canvas");
  var sherrel = illidan.getContext("2d");
  var marteka = yissochor * 85;
  var quinlyn = yissochor * 115;
  var dalena = yissochor * 6;
  var khyron = yissochor * 4;
  illidan.width = marteka;
  illidan.height = quinlyn;
  sherrel.translate(-130 * yissochor, -60 * yissochor + dalena);
  sherrel.globalAlpha = .5;
  sherrel.beginPath();
  sherrel.bezierCurveTo(190 * yissochor, 87 * yissochor, 201 * yissochor, 59 * yissochor, 208 * yissochor, 64 * yissochor);
  sherrel.bezierCurveTo(213 * yissochor, 68 * yissochor, 204 * yissochor, 93 * yissochor, 195 * yissochor, 109 * yissochor);
  sherrel.bezierCurveTo(195 * yissochor, 109 * yissochor, 202 * yissochor, 124 * yissochor, 191 * yissochor, 141 * yissochor);
  sherrel.bezierCurveTo(182 * yissochor, 151 * yissochor, 164 * yissochor, 155 * yissochor, 148 * yissochor, 144 * yissochor);
  sherrel.bezierCurveTo(136 * yissochor, 135 * yissochor, 138 * yissochor, 111 * yissochor, 145 * yissochor, 104 * yissochor);
  sherrel.bezierCurveTo(140 * yissochor, 92 * yissochor, 131 * yissochor, 67 * yissochor, 138 * yissochor, 63 * yissochor);
  sherrel.bezierCurveTo(145 * yissochor, 61 * yissochor, 153 * yissochor, 82 * yissochor, 155 * yissochor, 96 * yissochor);
  sherrel.bezierCurveTo(167 * yissochor, 91 * yissochor, 178 * yissochor, 92 * yissochor, 187 * yissochor, 98 * yissochor);
  sherrel.closePath();
  fill_path(sherrel, markena[0]);
  sherrel.translate(0, -dalena);
  sherrel.globalAlpha = 1;
  sherrel.beginPath();
  sherrel.bezierCurveTo(190 * yissochor, 87 * yissochor, 201 * yissochor, 59 * yissochor, 208 * yissochor, 64 * yissochor);
  sherrel.bezierCurveTo(213 * yissochor, 68 * yissochor, 204 * yissochor, 93 * yissochor, 195 * yissochor, 109 * yissochor);
  sherrel.bezierCurveTo(195 * yissochor, 109 * yissochor, 202 * yissochor, 124 * yissochor, 191 * yissochor, 141 * yissochor);
  sherrel.bezierCurveTo(182 * yissochor, 151 * yissochor, 164 * yissochor, 155 * yissochor, 148 * yissochor, 144 * yissochor);
  sherrel.bezierCurveTo(136 * yissochor, 135 * yissochor, 138 * yissochor, 111 * yissochor, 145 * yissochor, 104 * yissochor);
  sherrel.bezierCurveTo(140 * yissochor, 92 * yissochor, 131 * yissochor, 67 * yissochor, 138 * yissochor, 63 * yissochor);
  sherrel.bezierCurveTo(145 * yissochor, 61 * yissochor, 153 * yissochor, 82 * yissochor, 155 * yissochor, 96 * yissochor);
  sherrel.bezierCurveTo(167 * yissochor, 91 * yissochor, 178 * yissochor, 92 * yissochor, 187 * yissochor, 98 * yissochor);
  sherrel.closePath();
  fill_path(sherrel, markena[1], markena[2], 4);
  var aide = yissochor * 155;
  var kylinn = yissochor * 133;
  var kiyansh = yissochor * 10;
  var udelia = yissochor * 3;
  var barclay = aide + yissochor * -3;
  var nicolasa = kylinn + yissochor * -5;
  sherrel.save();
  sherrel.translate(aide, kylinn);
  sherrel.globalAlpha = 1;
  circle(sherrel, 0, 0, kiyansh);
  fill_path(sherrel, markena[3]);
  sherrel.restore();
  sherrel.save();
  sherrel.translate(barclay, nicolasa);
  sherrel.globalAlpha = 1;
  circle(sherrel, 0, 0, udelia);
  fill_path(sherrel, markena[4]);
  sherrel.restore();
  sherrel.save();
  sherrel.translate(aide + 27 * yissochor, kylinn);
  sherrel.globalAlpha = 1;
  circle(sherrel, 0, 0, kiyansh);
  fill_path(sherrel, markena[3]);
  sherrel.restore();
  sherrel.save();
  sherrel.translate(27 * yissochor + barclay, nicolasa);
  sherrel.globalAlpha = 1;
  circle(sherrel, 0, 0, udelia);
  fill_path(sherrel, markena[4]);
  return illidan;
}
function create_hurt_rabbit(zabrian, maybeth) {
  var solon = document.createElement("canvas");
  var gin = solon.getContext("2d");
  var tramane = zabrian * 85;
  var gralyn = zabrian * 115;
  var jaymiya = zabrian * 6;
  var delmis = zabrian * 4;
  solon.width = tramane;
  solon.height = gralyn;
  gin.translate(-130 * zabrian, -60 * zabrian);
  gin.globalAlpha = 1;
  gin.beginPath();
  gin.bezierCurveTo(190 * zabrian, 87 * zabrian, 201 * zabrian, 59 * zabrian, 208 * zabrian, 64 * zabrian);
  gin.bezierCurveTo(213 * zabrian, 68 * zabrian, 204 * zabrian, 93 * zabrian, 195 * zabrian, 109 * zabrian);
  gin.bezierCurveTo(195 * zabrian, 109 * zabrian, 202 * zabrian, 124 * zabrian, 191 * zabrian, 141 * zabrian);
  gin.bezierCurveTo(182 * zabrian, 151 * zabrian, 164 * zabrian, 155 * zabrian, 148 * zabrian, 144 * zabrian);
  gin.bezierCurveTo(136 * zabrian, 135 * zabrian, 138 * zabrian, 111 * zabrian, 145 * zabrian, 104 * zabrian);
  gin.bezierCurveTo(140 * zabrian, 92 * zabrian, 131 * zabrian, 67 * zabrian, 138 * zabrian, 63 * zabrian);
  gin.bezierCurveTo(145 * zabrian, 61 * zabrian, 153 * zabrian, 82 * zabrian, 155 * zabrian, 96 * zabrian);
  gin.bezierCurveTo(167 * zabrian, 91 * zabrian, 178 * zabrian, 92 * zabrian, 187 * zabrian, 98 * zabrian);
  gin.closePath();
  fill_path(gin, maybeth, maybeth, delmis);
  return solon;
}
function create_hurt_wolf(noble, molika) {
  var tremika = document.createElement("canvas");
  var marles = tremika.getContext("2d");
  tremika.width = 188 * noble;
  tremika.height = 190 * noble;
  marles.beginPath();
  marles.lineCap = "round";
  marles.lineJoin = "round";
  marles.moveTo(33.00567626953125 * noble, 95.44320678710938 * noble);
  marles.bezierCurveTo(42.00567626953125 * noble, 87.44320678710938 * noble, 48.00567626953125 * noble, 51.443206787109375 * noble, 74.00567626953125 * noble, 47.443206787109375 * noble);
  marles.bezierCurveTo(100.00567626953125 * noble, 42.443206787109375 * noble, 118.00567626953125 * noble, 49.443206787109375 * noble, 131.00567626953125 * noble, 55.443206787109375 * noble);
  marles.bezierCurveTo(140.00567626953125 * noble, 70.44320678710938 * noble, 145.00567626953125 * noble, 87.44320678710938 * noble, 152.00567626953125 * noble, 94.44320678710938 * noble);
  marles.bezierCurveTo(149.00567626953125 * noble, 99.44320678710938 * noble, 147.00567626953125 * noble, 98.44320678710938 * noble, 141.00567626953125 * noble, 101.44320678710938 * noble);
  marles.bezierCurveTo(147.00567626953125 * noble, 108.44320678710938 * noble, 147.00567626953125 * noble, 111.44320678710938 * noble, 147.00567626953125 * noble, 112.44320678710938 * noble);
  marles.bezierCurveTo(143.00567626953125 * noble, 112.44320678710938 * noble, 141.00567626953125 * noble, 112.44320678710938 * noble, 137.00567626953125 * noble, 111.44320678710938 * noble);
  marles.bezierCurveTo(138.00567626953125 * noble, 117.44320678710938 * noble, 138.00567626953125 * noble, 120.44320678710938 * noble, 138.00567626953125 * noble, 124.44320678710938 * noble);
  marles.bezierCurveTo(125.00567626953125 * noble, 107.44320678710938 * noble, 121.00567626953125 * noble, 124.44320678710938 * noble, 110.00567626953125 * noble, 141.44320678710938 * noble);
  marles.bezierCurveTo(102.00567626953125 * noble, 158.44320678710938 * noble, 89.00567626953125 * noble, 158.44320678710938 * noble, 80.00567626953125 * noble, 144.44320678710938 * noble);
  marles.bezierCurveTo(61.00567626953125 * noble, 111.44320678710938 * noble, 56.00567626953125 * noble, 117.44320678710938 * noble, 48.00567626953125 * noble, 120.44320678710938 * noble);
  marles.bezierCurveTo(46.00567626953125 * noble, 118.44320678710938 * noble, 47.00567626953125 * noble, 112.44320678710938 * noble, 48.00567626953125 * noble, 107.44320678710938 * noble);
  marles.bezierCurveTo(43.00567626953125 * noble, 111.44320678710938 * noble, 40.00567626953125 * noble, 111.44320678710938 * noble, 37.00567626953125 * noble, 110.44320678710938 * noble);
  marles.bezierCurveTo(39.50567626953125 * noble, 104.94320678710938 * noble, 39.50567626953125 * noble, 104.94320678710938 * noble, 42.00567626953125 * noble, 99.44320678710938 * noble);
  marles.bezierCurveTo(33.00567626953125 * noble, 99.44320678710938 * noble, 33.00567626953125 * noble, 98.44320678710938 * noble, 33.00567626953125 * noble, 96.44320678710938 * noble);
  marles.closePath();
  fill_path(marles, molika[0], molika[0], 4 * noble);
  marles.beginPath();
  marles.lineCap = "round";
  marles.lineJoin = "round";
  marles.moveTo(51.00567626953125 * noble, 72.53409576416016 * noble);
  marles.bezierCurveTo(48.00567626953125 * noble, 56.534095764160156 * noble, 48.00567626953125 * noble, 49.534095764160156 * noble, 54.00567626953125 * noble, 35.534095764160156 * noble);
  marles.bezierCurveTo(58.00567626953125 * noble, 26.534095764160156 * noble, 65.00567626953125 * noble, 27.534095764160156 * noble, 73.00567626953125 * noble, 40.534095764160156 * noble);
  marles.bezierCurveTo(81.00567626953125 * noble, 49.534095764160156 * noble, 82.00567626953125 * noble, 50.534095764160156 * noble, 83.00567626953125 * noble, 51.534095764160156 * noble);
  marles.bezierCurveTo(77.00567626953125 * noble, 71.53409576416016 * noble, 64.00567626953125 * noble, 75.53409576416016 * noble, 51.00567626953125 * noble, 72.53409576416016 * noble);
  marles.closePath();
  fill_path(marles, molika[0], molika[0], 2 * noble);
  marles.beginPath();
  marles.lineCap = "round";
  marles.lineJoin = "round";
  marles.moveTo(105.00567626953125 * noble, 50.53410339355469 * noble);
  marles.bezierCurveTo(112.00567626953125 * noble, 48.53410339355469 * noble, 125.00567626953125 * noble, 21.534103393554688 * noble, 132.00567626953125 * noble, 33.53410339355469 * noble);
  marles.bezierCurveTo(138.00567626953125 * noble, 42.53410339355469 * noble, 140.00567626953125 * noble, 64.53410339355469 * noble, 136.00567626953125 * noble, 75.53410339355469 * noble);
  marles.closePath();
  fill_path(marles, molika[0], molika[0], 2 * noble);
  return tremika;
}
function create_wolf(anthonio, srinidhi) {
  var christionna = document.createElement("canvas");
  var yarleth = christionna.getContext("2d");
  christionna.width = 188 * anthonio;
  christionna.height = 190 * anthonio;
  yarleth.globalAlpha = .5;
  yarleth.translate(0, 5 * anthonio);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(33.00567626953125 * anthonio, 95.44320678710938 * anthonio);
  yarleth.bezierCurveTo(42.00567626953125 * anthonio, 87.44320678710938 * anthonio, 48.00567626953125 * anthonio, 51.443206787109375 * anthonio, 74.00567626953125 * anthonio, 47.443206787109375 * anthonio);
  yarleth.bezierCurveTo(100.00567626953125 * anthonio, 42.443206787109375 * anthonio, 118.00567626953125 * anthonio, 49.443206787109375 * anthonio, 131.00567626953125 * anthonio, 55.443206787109375 * anthonio);
  yarleth.bezierCurveTo(140.00567626953125 * anthonio, 70.44320678710938 * anthonio, 145.00567626953125 * anthonio, 87.44320678710938 * anthonio, 152.00567626953125 * anthonio, 94.44320678710938 * anthonio);
  yarleth.bezierCurveTo(149.00567626953125 * anthonio, 99.44320678710938 * anthonio, 147.00567626953125 * anthonio, 98.44320678710938 * anthonio, 141.00567626953125 * anthonio, 101.44320678710938 * anthonio);
  yarleth.bezierCurveTo(147.00567626953125 * anthonio, 108.44320678710938 * anthonio, 147.00567626953125 * anthonio, 111.44320678710938 * anthonio, 147.00567626953125 * anthonio, 112.44320678710938 * anthonio);
  yarleth.bezierCurveTo(143.00567626953125 * anthonio, 112.44320678710938 * anthonio, 141.00567626953125 * anthonio, 112.44320678710938 * anthonio, 137.00567626953125 * anthonio, 111.44320678710938 * anthonio);
  yarleth.bezierCurveTo(138.00567626953125 * anthonio, 117.44320678710938 * anthonio, 138.00567626953125 * anthonio, 120.44320678710938 * anthonio, 138.00567626953125 * anthonio, 124.44320678710938 * anthonio);
  yarleth.bezierCurveTo(125.00567626953125 * anthonio, 107.44320678710938 * anthonio, 121.00567626953125 * anthonio, 124.44320678710938 * anthonio, 110.00567626953125 * anthonio, 141.44320678710938 * anthonio);
  yarleth.bezierCurveTo(102.00567626953125 * anthonio, 158.44320678710938 * anthonio, 89.00567626953125 * anthonio, 158.44320678710938 * anthonio, 80.00567626953125 * anthonio, 144.44320678710938 * anthonio);
  yarleth.bezierCurveTo(61.00567626953125 * anthonio, 111.44320678710938 * anthonio, 56.00567626953125 * anthonio, 117.44320678710938 * anthonio, 48.00567626953125 * anthonio, 120.44320678710938 * anthonio);
  yarleth.bezierCurveTo(46.00567626953125 * anthonio, 118.44320678710938 * anthonio, 47.00567626953125 * anthonio, 112.44320678710938 * anthonio, 48.00567626953125 * anthonio, 107.44320678710938 * anthonio);
  yarleth.bezierCurveTo(43.00567626953125 * anthonio, 111.44320678710938 * anthonio, 40.00567626953125 * anthonio, 111.44320678710938 * anthonio, 37.00567626953125 * anthonio, 110.44320678710938 * anthonio);
  yarleth.bezierCurveTo(39.50567626953125 * anthonio, 104.94320678710938 * anthonio, 39.50567626953125 * anthonio, 104.94320678710938 * anthonio, 42.00567626953125 * anthonio, 99.44320678710938 * anthonio);
  yarleth.bezierCurveTo(33.00567626953125 * anthonio, 99.44320678710938 * anthonio, 33.00567626953125 * anthonio, 98.44320678710938 * anthonio, 33.00567626953125 * anthonio, 96.44320678710938 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, srinidhi[0], srinidhi[0], 4 * anthonio);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(60.00567626953125 * anthonio, 99.35227966308594 * anthonio);
  yarleth.bezierCurveTo(70.00567626953125 * anthonio, 82.35227966308594 * anthonio, 85.00567626953125 * anthonio, 86.35227966308594 * anthonio, 87.00567626953125 * anthonio, 97.35227966308594 * anthonio);
  yarleth.bezierCurveTo(89.00567626953125 * anthonio, 101.35227966308594 * anthonio, 88.00567626953125 * anthonio, 105.35227966308594 * anthonio, 87.00567626953125 * anthonio, 110.35227966308594 * anthonio);
  yarleth.bezierCurveTo(89.00567626953125 * anthonio, 111.35227966308594 * anthonio, 91.00567626953125 * anthonio, 112.35227966308594 * anthonio, 93.00567626953125 * anthonio, 115.35227966308594 * anthonio);
  yarleth.bezierCurveTo(96.00567626953125 * anthonio, 111.35227966308594 * anthonio, 99.00567626953125 * anthonio, 111.35227966308594 * anthonio, 100.00567626953125 * anthonio, 110.35227966308594 * anthonio);
  yarleth.bezierCurveTo(98.00567626953125 * anthonio, 92.35227966308594 * anthonio, 103.00567626953125 * anthonio, 86.35227966308594 * anthonio, 113.00567626953125 * anthonio, 89.35227966308594 * anthonio);
  yarleth.bezierCurveTo(122.00567626953125 * anthonio, 92.35227966308594 * anthonio, 123.00567626953125 * anthonio, 94.35227966308594 * anthonio, 126.00567626953125 * anthonio, 98.35227966308594 * anthonio);
  yarleth.bezierCurveTo(124.00567626953125 * anthonio, 102.35227966308594 * anthonio, 123.00567626953125 * anthonio, 103.35227966308594 * anthonio, 121.00567626953125 * anthonio, 104.35227966308594 * anthonio);
  yarleth.bezierCurveTo(124.00567626953125 * anthonio, 105.35227966308594 * anthonio, 126.00567626953125 * anthonio, 107.35227966308594 * anthonio, 129.00567626953125 * anthonio, 111.35227966308594 * anthonio);
  yarleth.bezierCurveTo(115.00567626953125 * anthonio, 122.35227966308594 * anthonio, 113.00567626953125 * anthonio, 145.35227966308594 * anthonio, 100.00567626953125 * anthonio, 152.35227966308594 * anthonio);
  yarleth.bezierCurveTo(91.00567626953125 * anthonio, 158.35227966308594 * anthonio, 83.00567626953125 * anthonio, 149.35227966308594 * anthonio, 76.00567626953125 * anthonio, 138.35227966308594 * anthonio);
  yarleth.bezierCurveTo(67.00567626953125 * anthonio, 114.35227966308594 * anthonio, 63.00567626953125 * anthonio, 113.35227966308594 * anthonio, 59.00567626953125 * anthonio, 111.35227966308594 * anthonio);
  yarleth.bezierCurveTo(62.00567626953125 * anthonio, 107.35227966308594 * anthonio, 64.00567626953125 * anthonio, 105.35227966308594 * anthonio, 66.00567626953125 * anthonio, 104.35227966308594 * anthonio);
  yarleth.bezierCurveTo(63.00567626953125 * anthonio, 100.35227966308594 * anthonio, 62.00567626953125 * anthonio, 100.35227966308594 * anthonio, 60.00567626953125 * anthonio, 99.35227966308594 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, srinidhi[0], srinidhi[0], 2 * anthonio);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(51.00567626953125 * anthonio, 72.53409576416016 * anthonio);
  yarleth.bezierCurveTo(48.00567626953125 * anthonio, 56.534095764160156 * anthonio, 48.00567626953125 * anthonio, 49.534095764160156 * anthonio, 54.00567626953125 * anthonio, 35.534095764160156 * anthonio);
  yarleth.bezierCurveTo(58.00567626953125 * anthonio, 26.534095764160156 * anthonio, 65.00567626953125 * anthonio, 27.534095764160156 * anthonio, 73.00567626953125 * anthonio, 40.534095764160156 * anthonio);
  yarleth.bezierCurveTo(81.00567626953125 * anthonio, 49.534095764160156 * anthonio, 82.00567626953125 * anthonio, 50.534095764160156 * anthonio, 83.00567626953125 * anthonio, 51.534095764160156 * anthonio);
  yarleth.bezierCurveTo(77.00567626953125 * anthonio, 71.53409576416016 * anthonio, 64.00567626953125 * anthonio, 75.53409576416016 * anthonio, 51.00567626953125 * anthonio, 72.53409576416016 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, srinidhi[0], srinidhi[0], 2 * anthonio);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(105.00567626953125 * anthonio, 50.53410339355469 * anthonio);
  yarleth.bezierCurveTo(112.00567626953125 * anthonio, 48.53410339355469 * anthonio, 125.00567626953125 * anthonio, 21.534103393554688 * anthonio, 132.00567626953125 * anthonio, 33.53410339355469 * anthonio);
  yarleth.bezierCurveTo(138.00567626953125 * anthonio, 42.53410339355469 * anthonio, 140.00567626953125 * anthonio, 64.53410339355469 * anthonio, 136.00567626953125 * anthonio, 75.53410339355469 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, srinidhi[0], srinidhi[0], 2 * anthonio);
  yarleth.globalAlpha = 1;
  yarleth.translate(0, -5 * anthonio);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(33.00567626953125 * anthonio, 95.44320678710938 * anthonio);
  yarleth.bezierCurveTo(42.00567626953125 * anthonio, 87.44320678710938 * anthonio, 48.00567626953125 * anthonio, 51.443206787109375 * anthonio, 74.00567626953125 * anthonio, 47.443206787109375 * anthonio);
  yarleth.bezierCurveTo(100.00567626953125 * anthonio, 42.443206787109375 * anthonio, 118.00567626953125 * anthonio, 49.443206787109375 * anthonio, 131.00567626953125 * anthonio, 55.443206787109375 * anthonio);
  yarleth.bezierCurveTo(140.00567626953125 * anthonio, 70.44320678710938 * anthonio, 145.00567626953125 * anthonio, 87.44320678710938 * anthonio, 152.00567626953125 * anthonio, 94.44320678710938 * anthonio);
  yarleth.bezierCurveTo(149.00567626953125 * anthonio, 99.44320678710938 * anthonio, 147.00567626953125 * anthonio, 98.44320678710938 * anthonio, 141.00567626953125 * anthonio, 101.44320678710938 * anthonio);
  yarleth.bezierCurveTo(147.00567626953125 * anthonio, 108.44320678710938 * anthonio, 147.00567626953125 * anthonio, 111.44320678710938 * anthonio, 147.00567626953125 * anthonio, 112.44320678710938 * anthonio);
  yarleth.bezierCurveTo(143.00567626953125 * anthonio, 112.44320678710938 * anthonio, 141.00567626953125 * anthonio, 112.44320678710938 * anthonio, 137.00567626953125 * anthonio, 111.44320678710938 * anthonio);
  yarleth.bezierCurveTo(138.00567626953125 * anthonio, 117.44320678710938 * anthonio, 138.00567626953125 * anthonio, 120.44320678710938 * anthonio, 138.00567626953125 * anthonio, 124.44320678710938 * anthonio);
  yarleth.bezierCurveTo(125.00567626953125 * anthonio, 107.44320678710938 * anthonio, 121.00567626953125 * anthonio, 124.44320678710938 * anthonio, 110.00567626953125 * anthonio, 141.44320678710938 * anthonio);
  yarleth.bezierCurveTo(102.00567626953125 * anthonio, 158.44320678710938 * anthonio, 89.00567626953125 * anthonio, 158.44320678710938 * anthonio, 80.00567626953125 * anthonio, 144.44320678710938 * anthonio);
  yarleth.bezierCurveTo(61.00567626953125 * anthonio, 111.44320678710938 * anthonio, 56.00567626953125 * anthonio, 117.44320678710938 * anthonio, 48.00567626953125 * anthonio, 120.44320678710938 * anthonio);
  yarleth.bezierCurveTo(46.00567626953125 * anthonio, 118.44320678710938 * anthonio, 47.00567626953125 * anthonio, 112.44320678710938 * anthonio, 48.00567626953125 * anthonio, 107.44320678710938 * anthonio);
  yarleth.bezierCurveTo(43.00567626953125 * anthonio, 111.44320678710938 * anthonio, 40.00567626953125 * anthonio, 111.44320678710938 * anthonio, 37.00567626953125 * anthonio, 110.44320678710938 * anthonio);
  yarleth.bezierCurveTo(39.50567626953125 * anthonio, 104.94320678710938 * anthonio, 39.50567626953125 * anthonio, 104.94320678710938 * anthonio, 42.00567626953125 * anthonio, 99.44320678710938 * anthonio);
  yarleth.bezierCurveTo(33.00567626953125 * anthonio, 99.44320678710938 * anthonio, 33.00567626953125 * anthonio, 98.44320678710938 * anthonio, 33.00567626953125 * anthonio, 96.44320678710938 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, srinidhi[1], srinidhi[2], 3 * anthonio);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(60.00567626953125 * anthonio, 99.35227966308594 * anthonio);
  yarleth.bezierCurveTo(70.00567626953125 * anthonio, 82.35227966308594 * anthonio, 85.00567626953125 * anthonio, 86.35227966308594 * anthonio, 87.00567626953125 * anthonio, 97.35227966308594 * anthonio);
  yarleth.bezierCurveTo(89.00567626953125 * anthonio, 101.35227966308594 * anthonio, 88.00567626953125 * anthonio, 105.35227966308594 * anthonio, 87.00567626953125 * anthonio, 110.35227966308594 * anthonio);
  yarleth.bezierCurveTo(89.00567626953125 * anthonio, 111.35227966308594 * anthonio, 91.00567626953125 * anthonio, 112.35227966308594 * anthonio, 93.00567626953125 * anthonio, 115.35227966308594 * anthonio);
  yarleth.bezierCurveTo(96.00567626953125 * anthonio, 111.35227966308594 * anthonio, 99.00567626953125 * anthonio, 111.35227966308594 * anthonio, 100.00567626953125 * anthonio, 110.35227966308594 * anthonio);
  yarleth.bezierCurveTo(98.00567626953125 * anthonio, 92.35227966308594 * anthonio, 103.00567626953125 * anthonio, 86.35227966308594 * anthonio, 113.00567626953125 * anthonio, 89.35227966308594 * anthonio);
  yarleth.bezierCurveTo(122.00567626953125 * anthonio, 92.35227966308594 * anthonio, 123.00567626953125 * anthonio, 94.35227966308594 * anthonio, 126.00567626953125 * anthonio, 98.35227966308594 * anthonio);
  yarleth.bezierCurveTo(124.00567626953125 * anthonio, 102.35227966308594 * anthonio, 123.00567626953125 * anthonio, 103.35227966308594 * anthonio, 121.00567626953125 * anthonio, 104.35227966308594 * anthonio);
  yarleth.bezierCurveTo(124.00567626953125 * anthonio, 105.35227966308594 * anthonio, 126.00567626953125 * anthonio, 107.35227966308594 * anthonio, 129.00567626953125 * anthonio, 111.35227966308594 * anthonio);
  yarleth.bezierCurveTo(115.00567626953125 * anthonio, 122.35227966308594 * anthonio, 113.00567626953125 * anthonio, 145.35227966308594 * anthonio, 100.00567626953125 * anthonio, 152.35227966308594 * anthonio);
  yarleth.bezierCurveTo(91.00567626953125 * anthonio, 158.35227966308594 * anthonio, 83.00567626953125 * anthonio, 149.35227966308594 * anthonio, 76.00567626953125 * anthonio, 138.35227966308594 * anthonio);
  yarleth.bezierCurveTo(67.00567626953125 * anthonio, 114.35227966308594 * anthonio, 63.00567626953125 * anthonio, 113.35227966308594 * anthonio, 59.00567626953125 * anthonio, 111.35227966308594 * anthonio);
  yarleth.bezierCurveTo(62.00567626953125 * anthonio, 107.35227966308594 * anthonio, 64.00567626953125 * anthonio, 105.35227966308594 * anthonio, 66.00567626953125 * anthonio, 104.35227966308594 * anthonio);
  yarleth.bezierCurveTo(63.00567626953125 * anthonio, 100.35227966308594 * anthonio, 62.00567626953125 * anthonio, 100.35227966308594 * anthonio, 60.00567626953125 * anthonio, 99.35227966308594 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, srinidhi[3]);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(33.00567626953125 * anthonio, 95.44320678710938 * anthonio);
  yarleth.bezierCurveTo(42.00567626953125 * anthonio, 87.44320678710938 * anthonio, 48.00567626953125 * anthonio, 51.443206787109375 * anthonio, 74.00567626953125 * anthonio, 47.443206787109375 * anthonio);
  yarleth.bezierCurveTo(100.00567626953125 * anthonio, 42.443206787109375 * anthonio, 118.00567626953125 * anthonio, 49.443206787109375 * anthonio, 131.00567626953125 * anthonio, 55.443206787109375 * anthonio);
  yarleth.bezierCurveTo(140.00567626953125 * anthonio, 70.44320678710938 * anthonio, 145.00567626953125 * anthonio, 87.44320678710938 * anthonio, 152.00567626953125 * anthonio, 94.44320678710938 * anthonio);
  yarleth.bezierCurveTo(149.00567626953125 * anthonio, 99.44320678710938 * anthonio, 147.00567626953125 * anthonio, 98.44320678710938 * anthonio, 141.00567626953125 * anthonio, 101.44320678710938 * anthonio);
  yarleth.bezierCurveTo(147.00567626953125 * anthonio, 108.44320678710938 * anthonio, 147.00567626953125 * anthonio, 111.44320678710938 * anthonio, 147.00567626953125 * anthonio, 112.44320678710938 * anthonio);
  yarleth.bezierCurveTo(143.00567626953125 * anthonio, 112.44320678710938 * anthonio, 141.00567626953125 * anthonio, 112.44320678710938 * anthonio, 137.00567626953125 * anthonio, 111.44320678710938 * anthonio);
  yarleth.bezierCurveTo(138.00567626953125 * anthonio, 117.44320678710938 * anthonio, 138.00567626953125 * anthonio, 120.44320678710938 * anthonio, 138.00567626953125 * anthonio, 124.44320678710938 * anthonio);
  yarleth.bezierCurveTo(125.00567626953125 * anthonio, 107.44320678710938 * anthonio, 121.00567626953125 * anthonio, 124.44320678710938 * anthonio, 110.00567626953125 * anthonio, 141.44320678710938 * anthonio);
  yarleth.bezierCurveTo(102.00567626953125 * anthonio, 158.44320678710938 * anthonio, 89.00567626953125 * anthonio, 158.44320678710938 * anthonio, 80.00567626953125 * anthonio, 144.44320678710938 * anthonio);
  yarleth.bezierCurveTo(61.00567626953125 * anthonio, 111.44320678710938 * anthonio, 56.00567626953125 * anthonio, 117.44320678710938 * anthonio, 48.00567626953125 * anthonio, 120.44320678710938 * anthonio);
  yarleth.bezierCurveTo(46.00567626953125 * anthonio, 118.44320678710938 * anthonio, 47.00567626953125 * anthonio, 112.44320678710938 * anthonio, 48.00567626953125 * anthonio, 107.44320678710938 * anthonio);
  yarleth.bezierCurveTo(43.00567626953125 * anthonio, 111.44320678710938 * anthonio, 40.00567626953125 * anthonio, 111.44320678710938 * anthonio, 37.00567626953125 * anthonio, 110.44320678710938 * anthonio);
  yarleth.bezierCurveTo(39.50567626953125 * anthonio, 104.94320678710938 * anthonio, 39.50567626953125 * anthonio, 104.94320678710938 * anthonio, 42.00567626953125 * anthonio, 99.44320678710938 * anthonio);
  yarleth.bezierCurveTo(33.00567626953125 * anthonio, 99.44320678710938 * anthonio, 33.00567626953125 * anthonio, 98.44320678710938 * anthonio, 33.00567626953125 * anthonio, 96.44320678710938 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, undefined, srinidhi[2], 3 * anthonio);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(51.00567626953125 * anthonio, 72.53409576416016 * anthonio);
  yarleth.bezierCurveTo(48.00567626953125 * anthonio, 56.534095764160156 * anthonio, 48.00567626953125 * anthonio, 49.534095764160156 * anthonio, 54.00567626953125 * anthonio, 35.534095764160156 * anthonio);
  yarleth.bezierCurveTo(58.00567626953125 * anthonio, 26.534095764160156 * anthonio, 65.00567626953125 * anthonio, 27.534095764160156 * anthonio, 73.00567626953125 * anthonio, 40.534095764160156 * anthonio);
  yarleth.bezierCurveTo(81.00567626953125 * anthonio, 49.534095764160156 * anthonio, 82.00567626953125 * anthonio, 50.534095764160156 * anthonio, 83.00567626953125 * anthonio, 51.534095764160156 * anthonio);
  fill_path(yarleth, srinidhi[1], srinidhi[2], 3 * anthonio);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(105.00567626953125 * anthonio, 50.53410339355469 * anthonio);
  yarleth.bezierCurveTo(112.00567626953125 * anthonio, 48.53410339355469 * anthonio, 125.00567626953125 * anthonio, 21.534103393554688 * anthonio, 132.00567626953125 * anthonio, 33.53410339355469 * anthonio);
  yarleth.bezierCurveTo(138.00567626953125 * anthonio, 42.53410339355469 * anthonio, 140.00567626953125 * anthonio, 64.53410339355469 * anthonio, 136.00567626953125 * anthonio, 75.53410339355469 * anthonio);
  fill_path(yarleth, srinidhi[1], srinidhi[2], 3 * anthonio);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(57.00567626953125 * anthonio, 68.53410339355469 * anthonio);
  yarleth.bezierCurveTo(63.00567626953125 * anthonio, 69.53410339355469 * anthonio, 69.00567626953125 * anthonio, 66.53410339355469 * anthonio, 73.00567626953125 * anthonio, 60.53410339355469 * anthonio);
  yarleth.bezierCurveTo(66.00567626953125 * anthonio, 47.53410339355469 * anthonio, 61.00567626953125 * anthonio, 42.53410339355469 * anthonio, 58.00567626953125 * anthonio, 49.53410339355469 * anthonio);
  yarleth.bezierCurveTo(56.00567626953125 * anthonio, 59.53410339355469 * anthonio, 56.00567626953125 * anthonio, 64.53410339355469 * anthonio, 57.00567626953125 * anthonio, 67.53410339355469 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, srinidhi[3]);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(115.00567626953125 * anthonio, 59.715911865234375 * anthonio);
  yarleth.bezierCurveTo(119.00567626953125 * anthonio, 48.715911865234375 * anthonio, 126.00567626953125 * anthonio, 41.715911865234375 * anthonio, 129.00567626953125 * anthonio, 48.715911865234375 * anthonio);
  yarleth.bezierCurveTo(131.00567626953125 * anthonio, 56.715911865234375 * anthonio, 133.00567626953125 * anthonio, 71.71591186523438 * anthonio, 127.00567626953125 * anthonio, 68.71591186523438 * anthonio);
  yarleth.bezierCurveTo(120.00567626953125 * anthonio, 67.71591186523438 * anthonio, 114.00567626953125 * anthonio, 59.715911865234375 * anthonio, 116.00567626953125 * anthonio, 58.715911865234375 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, srinidhi[3]);
  circle(yarleth, 77 * anthonio, 107 * anthonio, 6 * anthonio);
  fill_path(yarleth, srinidhi[2]);
  circle(yarleth, 110 * anthonio, 107 * anthonio, 6 * anthonio);
  fill_path(yarleth, srinidhi[2]);
  circle(yarleth, 75 * anthonio, 105 * anthonio, 3 * anthonio);
  fill_path(yarleth, srinidhi[4]);
  circle(yarleth, 108 * anthonio, 105 * anthonio, 3 * anthonio);
  fill_path(yarleth, srinidhi[4]);
  yarleth.beginPath();
  yarleth.lineCap = "round";
  yarleth.lineJoin = "round";
  yarleth.moveTo(88.00567626953125 * anthonio, 141.4431915283203 * anthonio);
  yarleth.bezierCurveTo(93.00567626953125 * anthonio, 137.4431915283203 * anthonio, 96.00567626953125 * anthonio, 138.4431915283203 * anthonio, 100.00567626953125 * anthonio, 141.4431915283203 * anthonio);
  yarleth.bezierCurveTo(103.00567626953125 * anthonio, 143.4431915283203 * anthonio, 101.00567626953125 * anthonio, 149.4431915283203 * anthonio, 95.00567626953125 * anthonio, 148.4431915283203 * anthonio);
  yarleth.bezierCurveTo(85.00567626953125 * anthonio, 148.4431915283203 * anthonio, 86.00567626953125 * anthonio, 145.4431915283203 * anthonio, 88.00567626953125 * anthonio, 142.4431915283203 * anthonio);
  yarleth.closePath();
  fill_path(yarleth, srinidhi[1]);
  return christionna;
}
function create_meat(nanaadwoa, maceon, kailoni) {
  var kerani = document.createElement("canvas");
  var oshane = kerani.getContext("2d");
  var kiandrea = nanaadwoa * 55;
  var amit = nanaadwoa * 55;
  var akenzie = nanaadwoa * 8;
  var markeisha = nanaadwoa * 4;
  kerani.width = kiandrea;
  kerani.height = amit;
  oshane.translate(-65 * nanaadwoa, -55 * nanaadwoa + akenzie);
  oshane.globalAlpha = 1;
  oshane.beginPath();
  oshane.moveTo(95 * nanaadwoa, 60 * nanaadwoa);
  oshane.bezierCurveTo(107 * nanaadwoa, 62 * nanaadwoa, 110 * nanaadwoa, 73 * nanaadwoa, 107 * nanaadwoa, 79 * nanaadwoa);
  oshane.bezierCurveTo(104 * nanaadwoa, 85 * nanaadwoa, 85 * nanaadwoa, 93 * nanaadwoa, 81 * nanaadwoa, 88 * nanaadwoa);
  oshane.bezierCurveTo(74 * nanaadwoa, 80 * nanaadwoa, 85 * nanaadwoa, 60 * nanaadwoa, 95 * nanaadwoa, 60 * nanaadwoa);
  oshane.closePath();
  fill_path(oshane, kailoni[0], kailoni[1], 3);
  oshane.globalAlpha = 1;
  oshane.beginPath();
  oshane.moveTo(91 * nanaadwoa, 70 * nanaadwoa);
  oshane.bezierCurveTo(91 * nanaadwoa, 75 * nanaadwoa, 100 * nanaadwoa, 76 * nanaadwoa, 100 * nanaadwoa, 73 * nanaadwoa);
  oshane.bezierCurveTo(100 * nanaadwoa, 69 * nanaadwoa, 89 * nanaadwoa, 65 * nanaadwoa, 91 * nanaadwoa, 70 * nanaadwoa);
  oshane.closePath();
  fill_path(oshane, kailoni[2], kailoni[3], 3);
  return kerani;
}
function create_hurt_spider(ilyjah, azmariah) {
  var eska = document.createElement("canvas");
  var amiyah = eska.getContext("2d");
  eska.width = 238 * ilyjah;
  eska.height = 230 * ilyjah;
  amiyah.translate(-93 * ilyjah, -110 * ilyjah);
  circle(amiyah, 213.5 * ilyjah, 256.75 * ilyjah, 75 * ilyjah);
  fill_path(amiyah, azmariah);
  circle(amiyah, 213.5 * ilyjah, 175.75 * ilyjah, 25 * ilyjah);
  fill_path(amiyah, azmariah);
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(156.5 * ilyjah, 137.75 * ilyjah);
  amiyah.bezierCurveTo(170.5 * ilyjah, 173.75 * ilyjah, 195.5 * ilyjah, 177.75 * ilyjah, 209.5 * ilyjah, 177.75 * ilyjah);
  amiyah.lineWidth = 17 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(217.5 * ilyjah, 178.75 * ilyjah);
  amiyah.bezierCurveTo(251.5 * ilyjah, 177.75 * ilyjah, 263.5 * ilyjah, 153.75 * ilyjah, 270.5 * ilyjah, 140.75 * ilyjah);
  amiyah.lineWidth = 17 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(130.5 * ilyjah, 124.75 * ilyjah);
  amiyah.bezierCurveTo(153.5 * ilyjah, 185.75 * ilyjah, 198.5 * ilyjah, 185.75 * ilyjah, 213.5 * ilyjah, 185.75 * ilyjah);
  amiyah.lineWidth = 17 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(214.5 * ilyjah, 183.75 * ilyjah);
  amiyah.bezierCurveTo(265.5 * ilyjah, 192.75 * ilyjah, 293.5 * ilyjah, 141.75 * ilyjah, 297.5 * ilyjah, 124.75 * ilyjah);
  amiyah.lineWidth = 17 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(107.5 * ilyjah, 213.75 * ilyjah);
  amiyah.bezierCurveTo(151.5 * ilyjah, 190.75 * ilyjah, 198.5 * ilyjah, 184.75 * ilyjah, 210.5 * ilyjah, 184.75 * ilyjah);
  amiyah.lineWidth = 17 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(212.5 * ilyjah, 187.75 * ilyjah);
  amiyah.bezierCurveTo(258.5 * ilyjah, 182.75 * ilyjah, 286.5 * ilyjah, 194.75 * ilyjah, 314.5 * ilyjah, 206.75 * ilyjah);
  amiyah.lineWidth = 17 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(102.5 * ilyjah, 258.75 * ilyjah);
  amiyah.bezierCurveTo(142.5 * ilyjah, 200.75 * ilyjah, 193.5 * ilyjah, 194.75 * ilyjah, 211.5 * ilyjah, 185.75 * ilyjah);
  amiyah.lineWidth = 17 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(214.5 * ilyjah, 192.75 * ilyjah);
  amiyah.bezierCurveTo(276.5 * ilyjah, 194.75 * ilyjah, 306.5 * ilyjah, 233.75 * ilyjah, 316.5 * ilyjah, 246.75 * ilyjah);
  amiyah.lineWidth = 17 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(219.5 * ilyjah, 158.75 * ilyjah);
  amiyah.bezierCurveTo(226.5 * ilyjah, 159.75 * ilyjah, 227.5 * ilyjah, 147.75 * ilyjah, 219.5 * ilyjah, 145.75 * ilyjah);
  amiyah.closePath();
  amiyah.lineWidth = 10 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  amiyah.beginPath();
  amiyah.lineCap = "round";
  amiyah.lineJoin = "round";
  amiyah.moveTo(210.5 * ilyjah, 160.75 * ilyjah);
  amiyah.bezierCurveTo(203.5 * ilyjah, 159.75 * ilyjah, 199.5 * ilyjah, 146.75 * ilyjah, 210.5 * ilyjah, 145.75 * ilyjah);
  amiyah.closePath();
  amiyah.lineWidth = 10 * ilyjah;
  amiyah.strokeStyle = azmariah;
  amiyah.stroke();
  return eska;
}
function create_spider(brittani, koreyon) {
  var makka = document.createElement("canvas");
  var loudean = makka.getContext("2d");
  makka.width = 238 * brittani;
  makka.height = 230 * brittani;
  loudean.translate(-93 * brittani, -110 * brittani + 5 * brittani);
  loudean.globalAlpha = .3;
  circle(loudean, 213.5 * brittani, 256.75 * brittani, 75 * brittani);
  fill_path(loudean, koreyon[5]);
  circle(loudean, 213.5 * brittani, 175.75 * brittani, 25 * brittani);
  fill_path(loudean, koreyon[5]);
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(156.5 * brittani, 137.75 * brittani);
  loudean.bezierCurveTo(170.5 * brittani, 173.75 * brittani, 195.5 * brittani, 177.75 * brittani, 209.5 * brittani, 177.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[5];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(217.5 * brittani, 178.75 * brittani);
  loudean.bezierCurveTo(251.5 * brittani, 177.75 * brittani, 263.5 * brittani, 153.75 * brittani, 270.5 * brittani, 140.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[5];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(130.5 * brittani, 124.75 * brittani);
  loudean.bezierCurveTo(153.5 * brittani, 185.75 * brittani, 198.5 * brittani, 185.75 * brittani, 213.5 * brittani, 185.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[5];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(214.5 * brittani, 183.75 * brittani);
  loudean.bezierCurveTo(265.5 * brittani, 192.75 * brittani, 293.5 * brittani, 141.75 * brittani, 297.5 * brittani, 124.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[5];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(107.5 * brittani, 213.75 * brittani);
  loudean.bezierCurveTo(151.5 * brittani, 190.75 * brittani, 198.5 * brittani, 184.75 * brittani, 210.5 * brittani, 184.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[5];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(212.5 * brittani, 187.75 * brittani);
  loudean.bezierCurveTo(258.5 * brittani, 182.75 * brittani, 286.5 * brittani, 194.75 * brittani, 314.5 * brittani, 206.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[5];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(102.5 * brittani, 258.75 * brittani);
  loudean.bezierCurveTo(142.5 * brittani, 200.75 * brittani, 193.5 * brittani, 194.75 * brittani, 211.5 * brittani, 185.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[5];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(214.5 * brittani, 192.75 * brittani);
  loudean.bezierCurveTo(276.5 * brittani, 194.75 * brittani, 306.5 * brittani, 233.75 * brittani, 316.5 * brittani, 246.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[5];
  loudean.stroke();
  loudean.translate(0, -5);
  loudean.globalAlpha = 1;
  circle(loudean, 213.5 * brittani, 256.75 * brittani, 75 * brittani);
  fill_path(loudean, koreyon[3]);
  circle(loudean, 213.5 * brittani, 175.75 * brittani, 25 * brittani);
  fill_path(loudean, koreyon[3]);
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(219.5 * brittani, 158.75 * brittani);
  loudean.bezierCurveTo(226.5 * brittani, 159.75 * brittani, 227.5 * brittani, 147.75 * brittani, 219.5 * brittani, 145.75 * brittani);
  loudean.closePath();
  loudean.lineWidth = 10 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(210.5 * brittani, 160.75 * brittani);
  loudean.bezierCurveTo(203.5 * brittani, 159.75 * brittani, 199.5 * brittani, 146.75 * brittani, 210.5 * brittani, 145.75 * brittani);
  loudean.closePath();
  loudean.lineWidth = 10 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(219.5 * brittani, 158.75 * brittani);
  loudean.bezierCurveTo(226.5 * brittani, 159.75 * brittani, 227.5 * brittani, 147.75 * brittani, 219.5 * brittani, 145.75 * brittani);
  loudean.closePath();
  loudean.fillStyle = koreyon[0];
  loudean.fill();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(210.5 * brittani, 160.75 * brittani);
  loudean.bezierCurveTo(203.5 * brittani, 159.75 * brittani, 199.5 * brittani, 146.75 * brittani, 210.5 * brittani, 145.75 * brittani);
  loudean.closePath();
  loudean.fillStyle = koreyon[0];
  loudean.fill();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(156.5 * brittani, 137.75 * brittani);
  loudean.bezierCurveTo(170.5 * brittani, 173.75 * brittani, 195.5 * brittani, 177.75 * brittani, 209.5 * brittani, 177.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(217.5 * brittani, 178.75 * brittani);
  loudean.bezierCurveTo(251.5 * brittani, 177.75 * brittani, 263.5 * brittani, 153.75 * brittani, 270.5 * brittani, 140.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(130.5 * brittani, 124.75 * brittani);
  loudean.bezierCurveTo(153.5 * brittani, 185.75 * brittani, 198.5 * brittani, 185.75 * brittani, 213.5 * brittani, 185.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(214.5 * brittani, 183.75 * brittani);
  loudean.bezierCurveTo(265.5 * brittani, 192.75 * brittani, 293.5 * brittani, 141.75 * brittani, 297.5 * brittani, 124.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(107.5 * brittani, 213.75 * brittani);
  loudean.bezierCurveTo(151.5 * brittani, 190.75 * brittani, 198.5 * brittani, 184.75 * brittani, 210.5 * brittani, 184.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(212.5 * brittani, 187.75 * brittani);
  loudean.bezierCurveTo(258.5 * brittani, 182.75 * brittani, 286.5 * brittani, 194.75 * brittani, 314.5 * brittani, 206.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(102.5 * brittani, 258.75 * brittani);
  loudean.bezierCurveTo(142.5 * brittani, 200.75 * brittani, 193.5 * brittani, 194.75 * brittani, 211.5 * brittani, 185.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(214.5 * brittani, 192.75 * brittani);
  loudean.bezierCurveTo(276.5 * brittani, 194.75 * brittani, 306.5 * brittani, 233.75 * brittani, 316.5 * brittani, 246.75 * brittani);
  loudean.lineWidth = 17 * brittani;
  loudean.strokeStyle = koreyon[3];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(156.5 * brittani, 137.75 * brittani);
  loudean.bezierCurveTo(170.5 * brittani, 173.75 * brittani, 195.5 * brittani, 177.75 * brittani, 209.5 * brittani, 177.75 * brittani);
  loudean.lineWidth = 8 * brittani;
  loudean.strokeStyle = koreyon[0];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(217.5 * brittani, 178.75 * brittani);
  loudean.bezierCurveTo(251.5 * brittani, 177.75 * brittani, 263.5 * brittani, 153.75 * brittani, 270.5 * brittani, 140.75 * brittani);
  loudean.lineWidth = 8 * brittani;
  loudean.strokeStyle = koreyon[0];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(130.5 * brittani, 124.75 * brittani);
  loudean.bezierCurveTo(153.5 * brittani, 185.75 * brittani, 198.5 * brittani, 185.75 * brittani, 213.5 * brittani, 185.75 * brittani);
  loudean.lineWidth = 8 * brittani;
  loudean.strokeStyle = koreyon[0];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(214.5 * brittani, 183.75 * brittani);
  loudean.bezierCurveTo(265.5 * brittani, 192.75 * brittani, 293.5 * brittani, 141.75 * brittani, 297.5 * brittani, 124.75 * brittani);
  loudean.lineWidth = 8 * brittani;
  loudean.strokeStyle = koreyon[0];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(107.5 * brittani, 213.75 * brittani);
  loudean.bezierCurveTo(151.5 * brittani, 190.75 * brittani, 198.5 * brittani, 184.75 * brittani, 210.5 * brittani, 184.75 * brittani);
  loudean.lineWidth = 8 * brittani;
  loudean.strokeStyle = koreyon[0];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(212.5 * brittani, 187.75 * brittani);
  loudean.bezierCurveTo(258.5 * brittani, 182.75 * brittani, 286.5 * brittani, 194.75 * brittani, 314.5 * brittani, 206.75 * brittani);
  loudean.lineWidth = 8 * brittani;
  loudean.strokeStyle = koreyon[0];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(102.5 * brittani, 258.75 * brittani);
  loudean.bezierCurveTo(142.5 * brittani, 200.75 * brittani, 193.5 * brittani, 194.75 * brittani, 211.5 * brittani, 185.75 * brittani);
  loudean.lineWidth = 8 * brittani;
  loudean.strokeStyle = koreyon[0];
  loudean.stroke();
  loudean.beginPath();
  loudean.lineCap = "round";
  loudean.lineJoin = "round";
  loudean.moveTo(214.5 * brittani, 192.75 * brittani);
  loudean.bezierCurveTo(276.5 * brittani, 194.75 * brittani, 306.5 * brittani, 233.75 * brittani, 316.5 * brittani, 246.75 * brittani);
  loudean.lineWidth = 8 * brittani;
  loudean.strokeStyle = koreyon[0];
  loudean.stroke();
  circle(loudean, 213.5 * brittani, 256.75 * brittani, 70 * brittani);
  fill_path(loudean, koreyon[0]);
  circle(loudean, 213.5 * brittani, 175.75 * brittani, 20 * brittani);
  fill_path(loudean, koreyon[0]);
  circle(loudean, 222 * brittani, 166 * brittani, 5 * brittani);
  loudean.fillStyle = koreyon[2];
  loudean.fill();
  circle(loudean, 205 * brittani, 166 * brittani, 5 * brittani);
  loudean.fillStyle = koreyon[2];
  loudean.fill();
  circle(loudean, 206.2 * brittani, 167 * brittani, 2.5 * brittani);
  loudean.fillStyle = koreyon[4];
  loudean.fill();
  circle(loudean, 223.2 * brittani, 167 * brittani, 2.5 * brittani);
  loudean.fillStyle = koreyon[4];
  loudean.fill();
  loudean.save();
  loudean.translate(213.5 * brittani, 293.75 * brittani);
  loudean.rotate(.76);
  round_rect(loudean, -22 * brittani, -21 * brittani, 44 * brittani, 42 * brittani, 6 * brittani);
  loudean.restore();
  loudean.fillStyle = koreyon[1];
  loudean.fill();
  loudean.save();
  loudean.translate(212.5 * brittani, 258.25 * brittani);
  loudean.rotate(.8);
  round_rect(loudean, -15 * brittani, -14.5 * brittani, 30 * brittani, 29 * brittani, 6 * brittani);
  loudean.restore();
  loudean.fillStyle = koreyon[1];
  loudean.fill();
  return makka;
}
function create_web(vayne, ruger) {
  var rahf = document.createElement("canvas");
  var kayatana = rahf.getContext("2d");
  rahf.width = 450 * vayne;
  rahf.height = 470 * vayne;
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(226.5 * vayne, 91.546875 * vayne);
  kayatana.bezierCurveTo(254.5 * vayne, 115.546875 * vayne, 261.5 * vayne, 115.546875 * vayne, 294.5 * vayne, 109.546875 * vayne);
  kayatana.bezierCurveTo(299.5 * vayne, 141.546875 * vayne, 315.5 * vayne, 151.546875 * vayne, 344.5 * vayne, 158.546875 * vayne);
  kayatana.bezierCurveTo(330.5 * vayne, 195.546875 * vayne, 341.5 * vayne, 207.546875 * vayne, 361.5 * vayne, 226.546875 * vayne);
  kayatana.bezierCurveTo(331.5 * vayne, 251.546875 * vayne, 335.5 * vayne, 270.546875 * vayne, 342.5 * vayne, 295.546875 * vayne);
  kayatana.bezierCurveTo(300.5 * vayne, 296.546875 * vayne, 293.5 * vayne, 325.546875 * vayne, 292.5 * vayne, 344.546875 * vayne);
  kayatana.bezierCurveTo(257.5 * vayne, 326.546875 * vayne, 242.5 * vayne, 338.546875 * vayne, 224.5 * vayne, 361.546875 * vayne);
  kayatana.bezierCurveTo(200.5 * vayne, 329.546875 * vayne, 180.5 * vayne, 334.546875 * vayne, 155.5 * vayne, 341.546875 * vayne);
  kayatana.bezierCurveTo(146.5 * vayne, 307.546875 * vayne, 140.5 * vayne, 302.546875 * vayne, 107.5 * vayne, 292.546875 * vayne);
  kayatana.bezierCurveTo(117.5 * vayne, 253.546875 * vayne, 109.5 * vayne, 244.546875 * vayne, 89.5 * vayne, 224.546875 * vayne);
  kayatana.bezierCurveTo(118.5 * vayne, 191.546875 * vayne, 114.5 * vayne, 182.546875 * vayne, 108.5 * vayne, 156.546875 * vayne);
  kayatana.bezierCurveTo(143.5 * vayne, 149.546875 * vayne, 150.5 * vayne, 136.546875 * vayne, 157.5 * vayne, 106.546875 * vayne);
  kayatana.bezierCurveTo(202.5 * vayne, 120.546875 * vayne, 211.5 * vayne, 103.546875 * vayne, 228.5 * vayne, 91.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(224.5 * vayne, 129.546875 * vayne);
  kayatana.bezierCurveTo(247.5 * vayne, 147.546875 * vayne, 252.5 * vayne, 143.546875 * vayne, 274.5 * vayne, 141.546875 * vayne);
  kayatana.bezierCurveTo(279.5 * vayne, 163.546875 * vayne, 289.5 * vayne, 168.546875 * vayne, 311.5 * vayne, 178.546875 * vayne);
  kayatana.bezierCurveTo(301.5 * vayne, 199.546875 * vayne, 307.5 * vayne, 213.546875 * vayne, 323.5 * vayne, 226.546875 * vayne);
  kayatana.bezierCurveTo(303.5 * vayne, 240.546875 * vayne, 303.5 * vayne, 255.546875 * vayne, 312.5 * vayne, 275.546875 * vayne);
  kayatana.bezierCurveTo(281.5 * vayne, 278.546875 * vayne, 276.5 * vayne, 291.546875 * vayne, 272.5 * vayne, 313.546875 * vayne);
  kayatana.bezierCurveTo(248.5 * vayne, 301.546875 * vayne, 239.5 * vayne, 310.546875 * vayne, 224.5 * vayne, 324.546875 * vayne);
  kayatana.bezierCurveTo(211.5 * vayne, 304.546875 * vayne, 199.5 * vayne, 301.546875 * vayne, 176.5 * vayne, 309.546875 * vayne);
  kayatana.bezierCurveTo(165.5 * vayne, 276.546875 * vayne, 159.5 * vayne, 275.546875 * vayne, 138.5 * vayne, 274.546875 * vayne);
  kayatana.bezierCurveTo(148.5 * vayne, 248.546875 * vayne, 140.5 * vayne, 237.546875 * vayne, 125.5 * vayne, 225.546875 * vayne);
  kayatana.bezierCurveTo(145.5 * vayne, 205.546875 * vayne, 146.5 * vayne, 195.546875 * vayne, 142.5 * vayne, 176.546875 * vayne);
  kayatana.bezierCurveTo(173.5 * vayne, 164.546875 * vayne, 173.5 * vayne, 155.546875 * vayne, 178.5 * vayne, 140.546875 * vayne);
  kayatana.bezierCurveTo(214.5 * vayne, 143.546875 * vayne, 214.5 * vayne, 135.546875 * vayne, 226.5 * vayne, 129.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(224.5 * vayne, 160.546875 * vayne);
  kayatana.bezierCurveTo(236.5 * vayne, 168.546875 * vayne, 239.5 * vayne, 168.546875 * vayne, 258.5 * vayne, 168.546875 * vayne);
  kayatana.bezierCurveTo(261.5 * vayne, 185.546875 * vayne, 268.5 * vayne, 187.546875 * vayne, 282.5 * vayne, 192.546875 * vayne);
  kayatana.bezierCurveTo(277.5 * vayne, 208.546875 * vayne, 283.5 * vayne, 216.546875 * vayne, 289.5 * vayne, 228.546875 * vayne);
  kayatana.bezierCurveTo(277.5 * vayne, 243.546875 * vayne, 280.5 * vayne, 253.546875 * vayne, 281.5 * vayne, 260.546875 * vayne);
  kayatana.bezierCurveTo(264.5 * vayne, 260.546875 * vayne, 259.5 * vayne, 269.546875 * vayne, 256.5 * vayne, 283.546875 * vayne);
  kayatana.bezierCurveTo(244.5 * vayne, 276.546875 * vayne, 232.5 * vayne, 283.546875 * vayne, 223.5 * vayne, 291.546875 * vayne);
  kayatana.bezierCurveTo(213.5 * vayne, 276.546875 * vayne, 205.5 * vayne, 278.546875 * vayne, 190.5 * vayne, 281.546875 * vayne);
  kayatana.bezierCurveTo(181.5 * vayne, 262.546875 * vayne, 173.5 * vayne, 259.546875 * vayne, 165.5 * vayne, 258.546875 * vayne);
  kayatana.bezierCurveTo(169.5 * vayne, 239.546875 * vayne, 167.5 * vayne, 233.546875 * vayne, 157.5 * vayne, 225.546875 * vayne);
  kayatana.bezierCurveTo(169.5 * vayne, 208.546875 * vayne, 170.5 * vayne, 203.546875 * vayne, 168.5 * vayne, 192.546875 * vayne);
  kayatana.bezierCurveTo(181.5 * vayne, 187.546875 * vayne, 188.5 * vayne, 179.546875 * vayne, 192.5 * vayne, 168.546875 * vayne);
  kayatana.bezierCurveTo(216.5 * vayne, 170.546875 * vayne, 218.5 * vayne, 163.546875 * vayne, 225.5 * vayne, 160.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(205.5 * vayne, 194.546875 * vayne);
  kayatana.bezierCurveTo(216.5 * vayne, 192.546875 * vayne, 219.5 * vayne, 191.546875 * vayne, 225.5 * vayne, 185.546875 * vayne);
  kayatana.bezierCurveTo(232.5 * vayne, 193.546875 * vayne, 237.5 * vayne, 191.546875 * vayne, 246.5 * vayne, 192.546875 * vayne);
  kayatana.bezierCurveTo(249.5 * vayne, 202.546875 * vayne, 253.5 * vayne, 205.546875 * vayne, 258.5 * vayne, 207.546875 * vayne);
  kayatana.bezierCurveTo(259.5 * vayne, 222.546875 * vayne, 256.5 * vayne, 223.546875 * vayne, 265.5 * vayne, 226.546875 * vayne);
  kayatana.bezierCurveTo(256.5 * vayne, 231.546875 * vayne, 255.5 * vayne, 241.546875 * vayne, 259.5 * vayne, 248.546875 * vayne);
  kayatana.bezierCurveTo(250.5 * vayne, 245.546875 * vayne, 245.5 * vayne, 252.546875 * vayne, 243.5 * vayne, 260.546875 * vayne);
  kayatana.bezierCurveTo(234.5 * vayne, 256.546875 * vayne, 229.5 * vayne, 258.546875 * vayne, 223.5 * vayne, 265.546875 * vayne);
  kayatana.bezierCurveTo(218.5 * vayne, 255.546875 * vayne, 213.5 * vayne, 257.546875 * vayne, 204.5 * vayne, 261.546875 * vayne);
  kayatana.bezierCurveTo(203.5 * vayne, 251.546875 * vayne, 198.5 * vayne, 248.546875 * vayne, 189.5 * vayne, 244.546875 * vayne);
  kayatana.bezierCurveTo(194.5 * vayne, 237.546875 * vayne, 192.5 * vayne, 231.546875 * vayne, 184.5 * vayne, 225.546875 * vayne);
  kayatana.bezierCurveTo(191.5 * vayne, 211.546875 * vayne, 192.5 * vayne, 209.546875 * vayne, 190.5 * vayne, 204.546875 * vayne);
  kayatana.bezierCurveTo(200.5 * vayne, 204.546875 * vayne, 204.5 * vayne, 198.546875 * vayne, 207.5 * vayne, 194.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(149.5 * vayne, 93.546875 * vayne);
  kayatana.bezierCurveTo(287.5 * vayne, 332.546875 * vayne, 226 * vayne, 225.546875 * vayne, 302.5 * vayne, 357.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(224.5 * vayne, 66.546875 * vayne);
  kayatana.bezierCurveTo(224.5 * vayne, 223.546875 * vayne, 224.5 * vayne, 223.546875 * vayne, 224.5 * vayne, 380.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(302.5 * vayne, 88.546875 * vayne);
  kayatana.bezierCurveTo(222.5 * vayne, 227.546875 * vayne, 222.5 * vayne, 227.546875 * vayne, 142.5 * vayne, 366.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(361.5 * vayne, 147.546875 * vayne);
  kayatana.bezierCurveTo(223 * vayne, 226.546875 * vayne, 223 * vayne, 226.546875 * vayne, 84.5 * vayne, 305.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(379.5 * vayne, 225.546875 * vayne);
  kayatana.bezierCurveTo(221 * vayne, 225.546875 * vayne, 221 * vayne, 225.546875 * vayne, 62.5 * vayne, 225.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  kayatana.beginPath();
  kayatana.lineCap = "round";
  kayatana.lineJoin = "round";
  kayatana.moveTo(90.5 * vayne, 147.546875 * vayne);
  kayatana.bezierCurveTo(226.5 * vayne, 226.546875 * vayne, 226.5 * vayne, 226.546875 * vayne, 362.5 * vayne, 305.546875 * vayne);
  kayatana.closePath();
  fill_path(kayatana, undefined, ruger[0], 4);
  return rahf;
}
function create_dead_box(gonzala, yamira, summer) {
  var rigsby = document.createElement("canvas");
  var bulma = rigsby.getContext("2d");
  rigsby.width = 400 * gonzala;
  rigsby.height = 400 * gonzala;
  bulma.save();
  bulma.translate(202.5 * gonzala, 147.5 * gonzala);
  round_rect(bulma, -96.5 * gonzala, -21.5 * gonzala, 193 * gonzala, 193 * gonzala, 0 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[0], yamira[1], 12 * gonzala);
  bulma.save();
  bulma.translate(202.5 * gonzala, 190.5 * gonzala);
  round_rect(bulma, 96.5 * gonzala, -21.5 * gonzala, -193 * gonzala, 43 * gonzala, 0 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[2], yamira[1], 12 * gonzala);
  bulma.save();
  bulma.save();
  bulma.translate(202.5 * gonzala, 233.5 * gonzala);
  round_rect(bulma, -96.5 * gonzala, -20.5 * gonzala, 193 * gonzala, 41 * gonzala, 0 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[3], yamira[1], 12 * gonzala);
  bulma.save();
  bulma.translate(202.5 * gonzala, 275 * gonzala);
  round_rect(bulma, 96.5 * gonzala, -21 * gonzala, -193 * gonzala, 42 * gonzala, 0 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[0], yamira[1], 12 * gonzala);
  bulma.save();
  bulma.translate(201 * gonzala, 212 * gonzala);
  bulma.rotate(8.64);
  round_rect(bulma, -116 * gonzala, -22 * gonzala, 232 * gonzala, 44 * gonzala, 10 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[3], yamira[1], 12 * gonzala);
  bulma.save();
  bulma.translate(203.5 * gonzala, 121.5 * gonzala);
  round_rect(bulma, -115.5 * gonzala, -20.5 * gonzala, 231 * gonzala, 41 * gonzala, 10 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[3], yamira[1], 12 * gonzala);
  bulma.save();
  bulma.translate(203.5 * gonzala, 299 * gonzala);
  round_rect(bulma, -115.5 * gonzala, -20 * gonzala, 231 * gonzala, 40 * gonzala, 10 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[3], yamira[1], 12 * gonzala);
  bulma.save();
  bulma.translate(298.5 * gonzala, 210 * gonzala);
  round_rect(bulma, -20.5 * gonzala, -109 * gonzala, 41 * gonzala, 218 * gonzala, 10 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[3], yamira[1], 12 * gonzala);
  bulma.save();
  bulma.translate(108.5 * gonzala, 210 * gonzala);
  round_rect(bulma, -20.5 * gonzala, -109 * gonzala, 41 * gonzala, 218 * gonzala, 10 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[3], yamira[1], 12 * gonzala);
  bulma.save();
  bulma.translate(204 * gonzala, 121.5 * gonzala);
  round_rect(bulma, -92 * gonzala, -9.5 * gonzala, 184 * gonzala, 19 * gonzala, 10 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[3], yamira[3], 10 * gonzala);
  bulma.save();
  bulma.translate(197 * gonzala, 299 * gonzala);
  round_rect(bulma, 85 * gonzala, -9 * gonzala, -170 * gonzala, 18 * gonzala, 10 * gonzala);
  bulma.restore();
  fill_path(bulma, yamira[3], yamira[3], 10 * gonzala);
  bulma.beginPath();
  bulma.lineCap = "round";
  bulma.lineJoin = "round";
  bulma.moveTo(94 * gonzala, 317 * gonzala);
  bulma.bezierCurveTo(110.5 * gonzala, 299.5 * gonzala, 110.5 * gonzala, 299.5 * gonzala, 127 * gonzala, 282 * gonzala);
  bulma.closePath();
  fill_path(bulma, undefined, yamira[1], 12 * gonzala);
  bulma.beginPath();
  bulma.lineCap = "round";
  bulma.lineJoin = "round";
  bulma.moveTo(279 * gonzala, 142 * gonzala);
  bulma.bezierCurveTo(296.5 * gonzala, 125.5 * gonzala, 296.5 * gonzala, 125.5 * gonzala, 314 * gonzala, 109 * gonzala);
  bulma.closePath();
  fill_path(bulma, undefined, yamira[1], 12 * gonzala);
  bulma.beginPath();
  bulma.lineCap = "round";
  bulma.lineJoin = "round";
  bulma.moveTo(93 * gonzala, 106 * gonzala);
  bulma.bezierCurveTo(110.5 * gonzala, 124 * gonzala, 110.5 * gonzala, 124 * gonzala, 128 * gonzala, 142 * gonzala);
  bulma.closePath();
  fill_path(bulma, undefined, yamira[1], 12 * gonzala);
  bulma.beginPath();
  bulma.lineCap = "round";
  bulma.lineJoin = "round";
  bulma.moveTo(281 * gonzala, 282 * gonzala);
  bulma.bezierCurveTo(296 * gonzala, 297.5 * gonzala, 296 * gonzala, 297.5 * gonzala, 311 * gonzala, 313 * gonzala);
  bulma.closePath();
  fill_path(bulma, undefined, yamira[1], 12 * gonzala);
  if (summer == 0) {
    bulma.scale(2, 2);
    bulma.translate(-7 * gonzala, 55 * gonzala);
    bulma.rotate(-0.5);
    bulma.beginPath();
    bulma.lineCap = "round";
    bulma.lineJoin = "round";
    bulma.moveTo(60 * gonzala, 47 * gonzala);
    bulma.bezierCurveTo(81 * gonzala, 46 * gonzala, 85 * gonzala, 47 * gonzala, 83 * gonzala, 63 * gonzala);
    bulma.bezierCurveTo(83 * gonzala, 72 * gonzala, 83 * gonzala, 75 * gonzala, 72 * gonzala, 73 * gonzala);
    bulma.bezierCurveTo(68 * gonzala, 80 * gonzala, 69 * gonzala, 82 * gonzala, 66 * gonzala, 73 * gonzala);
    bulma.bezierCurveTo(62 * gonzala, 81 * gonzala, 61 * gonzala, 82 * gonzala, 59 * gonzala, 73 * gonzala);
    bulma.bezierCurveTo(54 * gonzala, 81 * gonzala, 55 * gonzala, 81 * gonzala, 52 * gonzala, 74 * gonzala);
    bulma.bezierCurveTo(38 * gonzala, 76 * gonzala, 41 * gonzala, 74 * gonzala, 40 * gonzala, 66 * gonzala);
    bulma.bezierCurveTo(38 * gonzala, 45 * gonzala, 39 * gonzala, 49 * gonzala, 59 * gonzala, 47 * gonzala);
    bulma.closePath();
    fill_path(bulma, yamira[4], yamira[4], 5 * gonzala);
    bulma.beginPath();
    bulma.lineCap = "round";
    bulma.lineJoin = "round";
    bulma.moveTo(68 * gonzala, 54 * gonzala);
    bulma.bezierCurveTo(75 * gonzala, 54 * gonzala, 77 * gonzala, 62 * gonzala, 71 * gonzala, 64 * gonzala);
    bulma.bezierCurveTo(62 * gonzala, 65 * gonzala, 63 * gonzala, 54 * gonzala, 68 * gonzala, 54 * gonzala);
    bulma.closePath();
    fill_path(bulma, yamira[3]);
    bulma.beginPath();
    bulma.lineCap = "round";
    bulma.lineJoin = "round";
    bulma.moveTo(50 * gonzala, 55 * gonzala);
    bulma.bezierCurveTo(57 * gonzala, 55 * gonzala, 58 * gonzala, 65 * gonzala, 52 * gonzala, 65 * gonzala);
    bulma.bezierCurveTo(44 * gonzala, 66 * gonzala, 44 * gonzala, 54 * gonzala, 50 * gonzala, 55 * gonzala);
    bulma.closePath();
    fill_path(bulma, yamira[3]);
  } else {
    if (summer == 1) {
      bulma.scale(.6, .6);
      bulma.translate(185 * gonzala, 165 * gonzala);
      bulma.beginPath();
      bulma.lineCap = "round";
      bulma.lineJoin = "round";
      bulma.moveTo(108 * gonzala, 56 * gonzala);
      bulma.bezierCurveTo(136 * gonzala, 58 * gonzala, 203 * gonzala, 69 * gonzala, 234 * gonzala, 75 * gonzala);
      bulma.bezierCurveTo(246 * gonzala, 77 * gonzala, 247 * gonzala, 78 * gonzala, 245 * gonzala, 90 * gonzala);
      bulma.bezierCurveTo(238 * gonzala, 143 * gonzala, 228 * gonzala, 197 * gonzala, 214 * gonzala, 259 * gonzala);
      bulma.bezierCurveTo(212 * gonzala, 267 * gonzala, 209 * gonzala, 270 * gonzala, 189 * gonzala, 268 * gonzala);
      bulma.bezierCurveTo(142 * gonzala, 264 * gonzala, 106 * gonzala, 260 * gonzala, 75 * gonzala, 253 * gonzala);
      bulma.bezierCurveTo(60 * gonzala, 250 * gonzala, 64 * gonzala, 250 * gonzala, 66 * gonzala, 221 * gonzala);
      bulma.bezierCurveTo(71 * gonzala, 168 * gonzala, 87 * gonzala, 95 * gonzala, 98 * gonzala, 67 * gonzala);
      bulma.bezierCurveTo(101 * gonzala, 57 * gonzala, 103 * gonzala, 56 * gonzala, 106 * gonzala, 56 * gonzala);
      bulma.closePath();
      fill_path(bulma, yamira[4], yamira[4], 20 * gonzala);
      bulma.beginPath();
      bulma.lineCap = "round";
      bulma.lineJoin = "round";
      bulma.moveTo(112 * gonzala, 72 * gonzala);
      bulma.bezierCurveTo(132 * gonzala, 73 * gonzala, 227 * gonzala, 85 * gonzala, 226 * gonzala, 91 * gonzala);
      bulma.bezierCurveTo(231 * gonzala, 89 * gonzala, 217 * gonzala, 196 * gonzala, 200 * gonzala, 250 * gonzala);
      bulma.bezierCurveTo(196 * gonzala, 254 * gonzala, 175 * gonzala, 249 * gonzala, 166 * gonzala, 249 * gonzala);
      bulma.bezierCurveTo(91 * gonzala, 241 * gonzala, 82 * gonzala, 236 * gonzala, 83 * gonzala, 232 * gonzala);
      bulma.bezierCurveTo(90 * gonzala, 144 * gonzala, 108 * gonzala, 71 * gonzala, 111 * gonzala, 72 * gonzala);
      bulma.closePath();
      fill_path(bulma, undefined, yamira[0], 13 * gonzala);
      bulma.beginPath();
      bulma.lineCap = "round";
      bulma.lineJoin = "round";
      bulma.moveTo(132 * gonzala, 117 * gonzala);
      bulma.bezierCurveTo(171 * gonzala, 86 * gonzala, 191 * gonzala, 101 * gonzala, 188 * gonzala, 134 * gonzala);
      bulma.bezierCurveTo(185 * gonzala, 154 * gonzala, 170 * gonzala, 158 * gonzala, 153 * gonzala, 158 * gonzala);
      bulma.bezierCurveTo(143 * gonzala, 172 * gonzala, 146 * gonzala, 180 * gonzala, 147 * gonzala, 193 * gonzala);
      fill_path(bulma, undefined, yamira[0], 20 * gonzala);
      circle(bulma, 142 * gonzala, 221 * gonzala, 16.1245154965971 * gonzala);
      fill_path(bulma, yamira[0]);
    }
  }
  return rigsby;
}
function create_hurt_dead_box(naji, mikie) {
  var kennedee = document.createElement("canvas");
  var nykeia = kennedee.getContext("2d");
  kennedee.width = 400 * naji;
  kennedee.height = 400 * naji;
  nykeia.save();
  nykeia.translate(202.5 * naji, 147.5 * naji);
  round_rect(nykeia, -96.5 * naji, -21.5 * naji, 193 * naji, 43 * naji, 0 * naji);
  nykeia.restore();
  fill_path(nykeia, mikie[0], mikie[0], 12 * naji);
  nykeia.save();
  nykeia.translate(202.5 * naji, 190.5 * naji);
  round_rect(nykeia, 96.5 * naji, -21.5 * naji, -193 * naji, 43 * naji, 0 * naji);
  nykeia.restore();
  fill_path(nykeia, mikie[0], mikie[0], 12 * naji);
  nykeia.save();
  nykeia.translate(202.5 * naji, 233.5 * naji);
  round_rect(nykeia, -96.5 * naji, -20.5 * naji, 193 * naji, 41 * naji, 0 * naji);
  nykeia.restore();
  fill_path(nykeia, mikie[0], mikie[0], 12 * naji);
  nykeia.save();
  nykeia.translate(202.5 * naji, 275 * naji);
  round_rect(nykeia, 96.5 * naji, -21 * naji, -193 * naji, 42 * naji, 0 * naji);
  nykeia.restore();
  fill_path(nykeia, mikie[0], mikie[0], 12 * naji);
  nykeia.save();
  nykeia.translate(203.5 * naji, 121.5 * naji);
  round_rect(nykeia, -115.5 * naji, -20.5 * naji, 231 * naji, 41 * naji, 10 * naji);
  nykeia.restore();
  fill_path(nykeia, mikie[0], mikie[0], 12 * naji);
  nykeia.save();
  nykeia.translate(203.5 * naji, 299 * naji);
  round_rect(nykeia, -115.5 * naji, -20 * naji, 231 * naji, 40 * naji, 10 * naji);
  nykeia.restore();
  fill_path(nykeia, mikie[0], mikie[0], 12 * naji);
  nykeia.save();
  nykeia.translate(298.5 * naji, 210 * naji);
  round_rect(nykeia, -20.5 * naji, -109 * naji, 41 * naji, 218 * naji, 10 * naji);
  nykeia.restore();
  fill_path(nykeia, mikie[0], mikie[0], 12 * naji);
  nykeia.save();
  nykeia.translate(108.5 * naji, 210 * naji);
  round_rect(nykeia, -20.5 * naji, -109 * naji, 41 * naji, 218 * naji, 10 * naji);
  nykeia.restore();
  fill_path(nykeia, mikie[0], mikie[0], 12 * naji);
  return kennedee;
}
function create_dead_box_ui(rheanon, chasmine) {
  var jenalyn = document.createElement("canvas");
  var yesmi = jenalyn.getContext("2d");
  jenalyn.width = 650 * rheanon;
  jenalyn.height = 650 * rheanon;
  yesmi.scale(1.9, 1.9);
  yesmi.save();
  yesmi.translate(202.5 * rheanon, 147.5 * rheanon);
  round_rect(yesmi, -96.5 * rheanon, -21.5 * rheanon, 193 * rheanon, 193 * rheanon, 0 * rheanon);
  yesmi.restore();
  fill_path(yesmi, chasmine[4], chasmine[1], 12 * rheanon);
  yesmi.save();
  yesmi.translate(203.5 * rheanon, 121.5 * rheanon);
  round_rect(yesmi, -115.5 * rheanon, -20.5 * rheanon, 231 * rheanon, 41 * rheanon, 10 * rheanon);
  yesmi.restore();
  fill_path(yesmi, chasmine[3], chasmine[1], 12 * rheanon);
  yesmi.save();
  yesmi.translate(203.5 * rheanon, 299 * rheanon);
  round_rect(yesmi, -115.5 * rheanon, -20 * rheanon, 231 * rheanon, 40 * rheanon, 10 * rheanon);
  yesmi.restore();
  fill_path(yesmi, chasmine[3], chasmine[1], 12 * rheanon);
  yesmi.save();
  yesmi.translate(298.5 * rheanon, 210 * rheanon);
  round_rect(yesmi, -20.5 * rheanon, -109 * rheanon, 41 * rheanon, 218 * rheanon, 10 * rheanon);
  yesmi.restore();
  fill_path(yesmi, chasmine[3], chasmine[1], 12 * rheanon);
  yesmi.save();
  yesmi.translate(108.5 * rheanon, 210 * rheanon);
  round_rect(yesmi, -20.5 * rheanon, -109 * rheanon, 41 * rheanon, 218 * rheanon, 10 * rheanon);
  yesmi.restore();
  fill_path(yesmi, chasmine[3], chasmine[1], 12 * rheanon);
  yesmi.save();
  yesmi.translate(204 * rheanon, 121.5 * rheanon);
  round_rect(yesmi, -92 * rheanon, -9.5 * rheanon, 184 * rheanon, 19 * rheanon, 10 * rheanon);
  yesmi.restore();
  fill_path(yesmi, chasmine[3], chasmine[3], 10 * rheanon);
  yesmi.save();
  yesmi.translate(197 * rheanon, 299 * rheanon);
  round_rect(yesmi, 85 * rheanon, -9 * rheanon, -170 * rheanon, 18 * rheanon, 10 * rheanon);
  yesmi.restore();
  fill_path(yesmi, chasmine[3], chasmine[3], 10 * rheanon);
  yesmi.beginPath();
  yesmi.lineCap = "round";
  yesmi.lineJoin = "round";
  yesmi.moveTo(94 * rheanon, 317 * rheanon);
  yesmi.bezierCurveTo(110.5 * rheanon, 299.5 * rheanon, 110.5 * rheanon, 299.5 * rheanon, 127 * rheanon, 282 * rheanon);
  yesmi.closePath();
  fill_path(yesmi, undefined, chasmine[1], 12 * rheanon);
  yesmi.beginPath();
  yesmi.lineCap = "round";
  yesmi.lineJoin = "round";
  yesmi.moveTo(279 * rheanon, 142 * rheanon);
  yesmi.bezierCurveTo(296.5 * rheanon, 125.5 * rheanon, 296.5 * rheanon, 125.5 * rheanon, 314 * rheanon, 109 * rheanon);
  yesmi.closePath();
  fill_path(yesmi, undefined, chasmine[1], 12 * rheanon);
  yesmi.beginPath();
  yesmi.lineCap = "round";
  yesmi.lineJoin = "round";
  yesmi.moveTo(93 * rheanon, 106 * rheanon);
  yesmi.bezierCurveTo(110.5 * rheanon, 124 * rheanon, 110.5 * rheanon, 124 * rheanon, 128 * rheanon, 142 * rheanon);
  yesmi.closePath();
  fill_path(yesmi, undefined, chasmine[1], 12 * rheanon);
  yesmi.beginPath();
  yesmi.lineCap = "round";
  yesmi.lineJoin = "round";
  yesmi.moveTo(281 * rheanon, 282 * rheanon);
  yesmi.bezierCurveTo(296 * rheanon, 297.5 * rheanon, 296 * rheanon, 297.5 * rheanon, 311 * rheanon, 313 * rheanon);
  yesmi.closePath();
  fill_path(yesmi, undefined, chasmine[1], 12 * rheanon);
  return jenalyn;
}
function create_SANDWICH(vyolet, lakshitha, nioma) {
  var jeniyah = document.createElement("canvas");
  var mynard = jeniyah.getContext("2d");
  jeniyah.width = 400 * vyolet;
  jeniyah.height = 400 * vyolet;
  mynard.beginPath();
  mynard.lineCap = "round";
  mynard.lineJoin = "round";
  mynard.moveTo(101 * vyolet, 255 * vyolet);
  mynard.bezierCurveTo(113 * vyolet, 243 * vyolet, 179 * vyolet, 210 * vyolet, 219 * vyolet, 196 * vyolet);
  mynard.bezierCurveTo(252 * vyolet, 203 * vyolet, 288 * vyolet, 215 * vyolet, 318 * vyolet, 233 * vyolet);
  mynard.bezierCurveTo(304 * vyolet, 254 * vyolet, 258 * vyolet, 273 * vyolet, 215 * vyolet, 296 * vyolet);
  mynard.bezierCurveTo(161 * vyolet, 287 * vyolet, 119 * vyolet, 270 * vyolet, 102 * vyolet, 257 * vyolet);
  mynard.closePath();
  fill_path(mynard, nioma[0], nioma[1], 14 * vyolet);
  mynard.beginPath();
  mynard.lineCap = "round";
  mynard.lineJoin = "round";
  mynard.moveTo(99 * vyolet, 258 * vyolet);
  mynard.bezierCurveTo(99 * vyolet, 272.5 * vyolet, 99 * vyolet, 272.5 * vyolet, 99 * vyolet, 287 * vyolet);
  mynard.bezierCurveTo(166 * vyolet, 319 * vyolet, 193 * vyolet, 320 * vyolet, 212 * vyolet, 324 * vyolet);
  mynard.bezierCurveTo(292 * vyolet, 286 * vyolet, 312 * vyolet, 271 * vyolet, 319 * vyolet, 263 * vyolet);
  mynard.bezierCurveTo(320 * vyolet, 249 * vyolet, 320 * vyolet, 241 * vyolet, 318 * vyolet, 234 * vyolet);
  mynard.bezierCurveTo(300 * vyolet, 254 * vyolet, 254 * vyolet, 277 * vyolet, 216 * vyolet, 294 * vyolet);
  mynard.bezierCurveTo(190 * vyolet, 296 * vyolet, 135 * vyolet, 276 * vyolet, 102 * vyolet, 258 * vyolet);
  mynard.closePath();
  fill_path(mynard, nioma[2], nioma[1], 14 * vyolet);
  mynard.beginPath();
  mynard.lineCap = "round";
  mynard.lineJoin = "round";
  mynard.moveTo(212 * vyolet, 323 * vyolet);
  mynard.bezierCurveTo(211.5 * vyolet, 310.5 * vyolet, 211.5 * vyolet, 310.5 * vyolet, 211 * vyolet, 298 * vyolet);
  mynard.closePath();
  fill_path(mynard, undefined, nioma[1], 14 * vyolet);
  mynard.beginPath();
  mynard.lineCap = "round";
  mynard.lineJoin = "round";
  mynard.moveTo(212 * vyolet, 210 * vyolet);
  mynard.bezierCurveTo(286 * vyolet, 210 * vyolet, 331 * vyolet, 254 * vyolet, 212 * vyolet, 276 * vyolet);
  mynard.bezierCurveTo(108 * vyolet, 276 * vyolet, 112 * vyolet, 222 * vyolet, 213 * vyolet, 208 * vyolet);
  mynard.closePath();
  fill_path(mynard, nioma[3], nioma[4], 14 * vyolet);
  mynard.beginPath();
  mynard.lineCap = "round";
  mynard.lineJoin = "round";
  mynard.moveTo(98 * vyolet, 200 * vyolet);
  mynard.bezierCurveTo(126 * vyolet, 216 * vyolet, 177 * vyolet, 232 * vyolet, 213 * vyolet, 237 * vyolet);
  mynard.bezierCurveTo(266 * vyolet, 218 * vyolet, 288 * vyolet, 209 * vyolet, 318 * vyolet, 190 * vyolet);
  mynard.bezierCurveTo(269 * vyolet, 164 * vyolet, 239 * vyolet, 158 * vyolet, 214 * vyolet, 153 * vyolet);
  mynard.bezierCurveTo(148 * vyolet, 172 * vyolet, 131 * vyolet, 182 * vyolet, 98 * vyolet, 200 * vyolet);
  mynard.closePath();
  fill_path(mynard, nioma[0], nioma[1], 14 * vyolet);
  mynard.beginPath();
  mynard.lineCap = "round";
  mynard.lineJoin = "round";
  mynard.moveTo(97 * vyolet, 204 * vyolet);
  mynard.bezierCurveTo(97 * vyolet, 215.5 * vyolet, 97 * vyolet, 215.5 * vyolet, 97 * vyolet, 227 * vyolet);
  mynard.bezierCurveTo(148 * vyolet, 250 * vyolet, 179 * vyolet, 256 * vyolet, 212 * vyolet, 262 * vyolet);
  mynard.bezierCurveTo(268 * vyolet, 244 * vyolet, 281 * vyolet, 233 * vyolet, 318 * vyolet, 214 * vyolet);
  mynard.bezierCurveTo(318 * vyolet, 203 * vyolet, 318 * vyolet, 203 * vyolet, 318 * vyolet, 192 * vyolet);
  mynard.bezierCurveTo(250 * vyolet, 225 * vyolet, 236 * vyolet, 231 * vyolet, 214 * vyolet, 239 * vyolet);
  mynard.bezierCurveTo(158 * vyolet, 228 * vyolet, 126 * vyolet, 215 * vyolet, 99 * vyolet, 201 * vyolet);
  mynard.closePath();
  fill_path(mynard, nioma[2], nioma[1], 14 * vyolet);
  mynard.beginPath();
  mynard.lineCap = "round";
  mynard.lineJoin = "round";
  mynard.moveTo(212 * vyolet, 260 * vyolet);
  mynard.bezierCurveTo(212 * vyolet, 251.5 * vyolet, 212 * vyolet, 251.5 * vyolet, 212 * vyolet, 243 * vyolet);
  mynard.closePath();
  fill_path(mynard, undefined, nioma[1], 14 * vyolet);
  circle(mynard, 161 * vyolet, 201 * vyolet, 13 * vyolet);
  fill_path(mynard, nioma[5]);
  circle(mynard, 216 * vyolet, 205 * vyolet, 8.06225774829855 * vyolet);
  fill_path(mynard, nioma[5]);
  circle(mynard, 216 * vyolet, 175 * vyolet, 6.708203932499369 * vyolet);
  fill_path(mynard, nioma[5]);
  circle(mynard, 271 * vyolet, 191 * vyolet, 5.0990195135927845 * vyolet);
  fill_path(mynard, nioma[5]);
  circle(mynard, 206 * vyolet, 180 * vyolet, 11.180339887498949 * vyolet);
  fill_path(mynard, nioma[5]);
  return jeniyah;
}
function create_scales(demire, frey, donaji) {
  var raiesha = document.createElement("canvas");
  var ezreal = raiesha.getContext("2d");
  raiesha.width = 400 * demire;
  raiesha.height = 400 * demire;
  ezreal.save();
  ezreal.translate(85 * demire, 237 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 54.585977194239184 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(178 * demire, 238 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 52.53573932334064 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(270 * demire, 239 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 53.58058329516393 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(222 * demire, 312 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 52.53573932334064 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(317 * demire, 159 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 57.63465889766331 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(223.5 * demire, 139.0625 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 51.66236541235796 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(132.5 * demire, 137.0625 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 52.009614495783374 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(178.5 * demire, 58.0625 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 53.16013544000805 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(177.5 * demire, 216.0625 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 50 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(84.5 * demire, 215.0625 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 54 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(319.5 * demire, 138.0625 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 55.08175741568164 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(269.5 * demire, 216.0625 * demire);
  ezreal.rotate(1.5707963267948966);
  round_regular_polygon(ezreal, 6, 54.589376255824725 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(221.5 * demire, 293.0625 * demire);
  ezreal.rotate(.5235987755982988);
  round_regular_polygon(ezreal, 6, 49.49747468305833 * demire, 1 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[1], donaji[2], 12 * demire);
  ezreal.beginPath();
  ezreal.lineCap = "round";
  ezreal.lineJoin = "round";
  ezreal.moveTo(221.5 * demire, 342.0625 * demire);
  ezreal.bezierCurveTo(221.5 * demire, 350.5625 * demire, 221.5 * demire, 350.5625 * demire, 221.5 * demire, 359.0625 * demire);
  ezreal.closePath();
  fill_path(ezreal, undefined, donaji[2], 12 * demire);
  ezreal.beginPath();
  ezreal.lineCap = "round";
  ezreal.lineJoin = "round";
  ezreal.moveTo(84.5 * demire, 270.0625 * demire);
  ezreal.bezierCurveTo(84.5 * demire, 277.0625 * demire, 84.5 * demire, 277.0625 * demire, 84.5 * demire, 284.0625 * demire);
  ezreal.closePath();
  fill_path(ezreal, undefined, donaji[2], 12 * demire);
  ezreal.save();
  ezreal.translate(84.5 * demire, 215.0625 * demire);
  ezreal.rotate(.5235987755982988);
  round_regular_polygon(ezreal, 6, 30 * demire, 15 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[3]);
  ezreal.save();
  ezreal.translate(177.5 * demire, 215.0625 * demire);
  ezreal.rotate(.5235987755982988);
  round_regular_polygon(ezreal, 6, 30 * demire, 15 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[3]);
  ezreal.save();
  ezreal.translate(222.5 * demire, 294.0625 * demire);
  ezreal.rotate(.5235987755982988);
  round_regular_polygon(ezreal, 6, 30 * demire, 15 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[3]);
  ezreal.save();
  ezreal.translate(270.5 * demire, 216.0625 * demire);
  ezreal.rotate(.5235987755982988);
  round_regular_polygon(ezreal, 6, 30 * demire, 15 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[3]);
  ezreal.save();
  ezreal.translate(320.5 * demire, 134.0625 * demire);
  ezreal.rotate(.5235987755982988);
  round_regular_polygon(ezreal, 6, 30 * demire, 15 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[3]);
  ezreal.save();
  ezreal.translate(224.5 * demire, 138.0625 * demire);
  ezreal.rotate(.5235987755982988);
  round_regular_polygon(ezreal, 6, 30 * demire, 15 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[3]);
  ezreal.save();
  ezreal.translate(133.5 * demire, 137.0625 * demire);
  ezreal.rotate(.5235987755982988);
  round_regular_polygon(ezreal, 6, 30 * demire, 15 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[3]);
  ezreal.save();
  ezreal.translate(178.5 * demire, 56.0625 * demire);
  ezreal.rotate(.5235987755982988);
  round_regular_polygon(ezreal, 6, 30 * demire, 15 * demire);
  ezreal.restore();
  fill_path(ezreal, donaji[3]);
  return raiesha;
}
function create_wheat(jhomar, cervante, virjean) {
  var izahbella = document.createElement("canvas");
  var coronda = izahbella.getContext("2d");
  izahbella.width = 52 * jhomar;
  izahbella.height = 65 * jhomar;
  coronda.beginPath();
  coronda.lineCap = "round";
  coronda.lineJoin = "round";
  coronda.moveTo(9.833328247070312 * jhomar, 12.078125 * jhomar);
  coronda.bezierCurveTo(15.333328247070312 * jhomar, 28.078125 * jhomar, 15.333328247070312 * jhomar, 28.078125 * jhomar, 20.833328247070312 * jhomar, 44.078125 * jhomar);
  coronda.closePath();
  fill_path(coronda, undefined, virjean[1], 2 * jhomar);
  coronda.beginPath();
  coronda.lineCap = "round";
  coronda.lineJoin = "round";
  coronda.moveTo(7.8333282470703125 * jhomar, 20.078125 * jhomar);
  coronda.bezierCurveTo(16.833328247070312 * jhomar, 32.578125 * jhomar, 16.833328247070312 * jhomar, 32.578125 * jhomar, 25.833328247070312 * jhomar, 45.078125 * jhomar);
  coronda.closePath();
  fill_path(coronda, undefined, virjean[1], 2 * jhomar);
  coronda.beginPath();
  coronda.lineCap = "round";
  coronda.lineJoin = "round";
  coronda.moveTo(23.833328247070312 * jhomar, 26.078125 * jhomar);
  coronda.bezierCurveTo(25.833328247070312 * jhomar, 11.078125 * jhomar, 16.833328247070312 * jhomar, 8.078125 * jhomar, 14.833328247070312 * jhomar, 7.078125 * jhomar);
  coronda.bezierCurveTo(11.833328247070312 * jhomar, 17.078125 * jhomar, 13.833328247070312 * jhomar, 22.078125 * jhomar, 23.833328247070312 * jhomar, 27.078125 * jhomar);
  coronda.closePath();
  fill_path(coronda, virjean[0], virjean[1], 2 * jhomar);
  coronda.beginPath();
  coronda.lineCap = "round";
  coronda.lineJoin = "round";
  coronda.moveTo(35.83332824707031 * jhomar, 8.078125 * jhomar);
  coronda.bezierCurveTo(34.83332824707031 * jhomar, 27.078125 * jhomar, 28.833328247070312 * jhomar, 27.078125 * jhomar, 23.833328247070312 * jhomar, 28.078125 * jhomar);
  coronda.bezierCurveTo(21.833328247070312 * jhomar, 14.078125 * jhomar, 26.833328247070312 * jhomar, 11.078125 * jhomar, 35.83332824707031 * jhomar, 8.078125 * jhomar);
  coronda.closePath();
  fill_path(coronda, virjean[0], virjean[1], 2 * jhomar);
  coronda.beginPath();
  coronda.lineCap = "round";
  coronda.lineJoin = "round";
  coronda.moveTo(25.833328247070312 * jhomar, 39.078125 * jhomar);
  coronda.bezierCurveTo(20.833328247070312 * jhomar, 29.078125 * jhomar, 14.833328247070312 * jhomar, 27.078125 * jhomar, 5.8333282470703125 * jhomar, 29.078125 * jhomar);
  coronda.bezierCurveTo(9.833328247070312 * jhomar, 39.078125 * jhomar, 16.833328247070312 * jhomar, 42.078125 * jhomar, 25.833328247070312 * jhomar, 40.078125 * jhomar);
  coronda.closePath();
  fill_path(coronda, virjean[0], virjean[1], 2 * jhomar);
  coronda.beginPath();
  coronda.lineCap = "round";
  coronda.lineJoin = "round";
  coronda.moveTo(42.83332824707031 * jhomar, 23.078125 * jhomar);
  coronda.bezierCurveTo(35.83332824707031 * jhomar, 35.078125 * jhomar, 31.833328247070312 * jhomar, 37.078125 * jhomar, 25.833328247070312 * jhomar, 36.078125 * jhomar);
  coronda.bezierCurveTo(25.833328247070312 * jhomar, 24.078125 * jhomar, 33.83332824707031 * jhomar, 21.078125 * jhomar, 42.83332824707031 * jhomar, 23.078125 * jhomar);
  coronda.closePath();
  fill_path(coronda, virjean[0], virjean[1], 2 * jhomar);
  coronda.beginPath();
  coronda.lineCap = "round";
  coronda.lineJoin = "round";
  coronda.moveTo(23.833328247070312 * jhomar, 24.078125 * jhomar);
  coronda.bezierCurveTo(20.833328247070312 * jhomar, 34.078125 * jhomar, 23.833328247070312 * jhomar, 40.078125 * jhomar, 27.833328247070312 * jhomar, 43.078125 * jhomar);
  coronda.bezierCurveTo(37.33332824707031 * jhomar, 28.078125 * jhomar, 37.33332824707031 * jhomar, 28.078125 * jhomar, 46.83332824707031 * jhomar, 13.078125 * jhomar);
  fill_path(coronda, undefined, virjean[1], 2 * jhomar);
  coronda.beginPath();
  coronda.lineCap = "round";
  coronda.lineJoin = "round";
  coronda.moveTo(38.83332824707031 * jhomar, 14.078125 * jhomar);
  coronda.bezierCurveTo(34.83332824707031 * jhomar, 24.078125 * jhomar, 34.83332824707031 * jhomar, 24.078125 * jhomar, 30.833328247070312 * jhomar, 34.078125 * jhomar);
  fill_path(coronda, undefined, virjean[1], 2 * jhomar);
  return izahbella;
}
function create_windmill(hartman, blancha, lurleen) {
  var janiera = document.createElement("canvas");
  var avaah = janiera.getContext("2d");
  janiera.width = 170 * hartman;
  janiera.height = 173 * hartman;
  avaah.translate(5 * hartman, 5 * hartman);
  avaah.globalAlpha = blancha ? .5 : 1;
  avaah.save();
  avaah.translate(86.25 * hartman, 84.953125 * hartman);
  avaah.rotate(.32);
  round_regular_polygon(avaah, 7, 42.15447781671598 * hartman, 10 * hartman);
  avaah.restore();
  fill_path(avaah, lurleen[0]);
  avaah.globalAlpha = 1;
  avaah.translate(-5 * hartman, -5 * hartman);
  avaah.save();
  avaah.translate(86.25 * hartman, 84.953125 * hartman);
  avaah.rotate(.32);
  round_regular_polygon(avaah, 7, 42.15447781671598 * hartman, 10 * hartman);
  avaah.restore();
  fill_path(avaah, lurleen[1], lurleen[2], 4 * hartman);
  avaah.globalAlpha = blancha ? .5 : 1;
  avaah.translate(5 * hartman, 5 * hartman);
  avaah.save();
  avaah.translate(86.25 * hartman, 84.953125 * hartman);
  avaah.rotate(.28);
  round_regular_polygon(avaah, 7, 30.463092423455635 * hartman, 10 * hartman);
  avaah.restore();
  fill_path(avaah, lurleen[0]);
  avaah.globalAlpha = 1;
  avaah.translate(-5 * hartman, -5 * hartman);
  avaah.save();
  avaah.translate(86.25 * hartman, 84.953125 * hartman);
  avaah.rotate(.28);
  round_regular_polygon(avaah, 7, 30.463092423455635 * hartman, 10 * hartman);
  avaah.restore();
  fill_path(avaah, lurleen[3], lurleen[4], 4 * hartman);
  avaah.globalAlpha = blancha ? .5 : 1;
  avaah.translate(5 * hartman, 5 * hartman);
  circle(avaah, 86.25 * hartman, 84.953125 * hartman, 18.867962264113206 * hartman);
  fill_path(avaah, lurleen[0]);
  avaah.globalAlpha = 1;
  avaah.translate(-5 * hartman, -5 * hartman);
  circle(avaah, 86.25 * hartman, 84.953125 * hartman, 18.867962264113206 * hartman);
  fill_path(avaah, lurleen[5], lurleen[6], 4 * hartman);
  return janiera;
}
function create_windmill_wing(chayil, eartha, mama) {
  var presious = document.createElement("canvas");
  var nataanii = presious.getContext("2d");
  presious.width = 170 * chayil;
  presious.height = 173 * chayil;
  nataanii.globalAlpha = eartha ? .5 : 1;
  nataanii.translate(5 * chayil, 5 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(85.25 * chayil, 82.953125 * chayil);
  nataanii.bezierCurveTo(98.25 * chayil, 46.453125 * chayil, 98.25 * chayil, 46.453125 * chayil, 111.25 * chayil, 9.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, undefined, mama[0], 4 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(111.25 * chayil, 8.953125 * chayil);
  nataanii.bezierCurveTo(117.75 * chayil, 12.453125 * chayil, 117.75 * chayil, 12.453125 * chayil, 124.25 * chayil, 15.953125 * chayil);
  nataanii.bezierCurveTo(113.75 * chayil, 39.953125 * chayil, 113.75 * chayil, 39.953125 * chayil, 103.25 * chayil, 63.953125 * chayil);
  nataanii.bezierCurveTo(97.75 * chayil, 64.953125 * chayil, 97.75 * chayil, 64.953125 * chayil, 92.25 * chayil, 65.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, mama[0]);
  nataanii.globalAlpha = 1;
  nataanii.translate(-5 * chayil, -5 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(111.25 * chayil, 8.953125 * chayil);
  nataanii.bezierCurveTo(117.75 * chayil, 12.453125 * chayil, 117.75 * chayil, 12.453125 * chayil, 124.25 * chayil, 15.953125 * chayil);
  nataanii.bezierCurveTo(113.75 * chayil, 39.953125 * chayil, 113.75 * chayil, 39.953125 * chayil, 103.25 * chayil, 63.953125 * chayil);
  nataanii.bezierCurveTo(97.75 * chayil, 64.953125 * chayil, 97.75 * chayil, 64.953125 * chayil, 92.25 * chayil, 65.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, mama[7]);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(85.25 * chayil, 82.953125 * chayil);
  nataanii.bezierCurveTo(98.25 * chayil, 46.453125 * chayil, 98.25 * chayil, 46.453125 * chayil, 111.25 * chayil, 9.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, undefined, mama[6], 4 * chayil);
  nataanii.globalAlpha = eartha ? .5 : 1;
  nataanii.translate(5 * chayil, 5 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(87.25 * chayil, 84.953125 * chayil);
  nataanii.bezierCurveTo(123.75 * chayil, 100.453125 * chayil, 123.75 * chayil, 100.453125 * chayil, 160.25 * chayil, 115.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, undefined, mama[0], 4 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(160.25 * chayil, 114.953125 * chayil);
  nataanii.bezierCurveTo(156.25 * chayil, 122.453125 * chayil, 156.25 * chayil, 122.453125 * chayil, 152.25 * chayil, 129.953125 * chayil);
  nataanii.bezierCurveTo(130.25 * chayil, 117.953125 * chayil, 130.25 * chayil, 117.953125 * chayil, 108.25 * chayil, 105.953125 * chayil);
  nataanii.bezierCurveTo(107.25 * chayil, 98.953125 * chayil, 107.25 * chayil, 98.953125 * chayil, 106.25 * chayil, 91.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, mama[0]);
  nataanii.globalAlpha = 1;
  nataanii.translate(-5 * chayil, -5 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(160.25 * chayil, 114.953125 * chayil);
  nataanii.bezierCurveTo(156.25 * chayil, 122.453125 * chayil, 156.25 * chayil, 122.453125 * chayil, 152.25 * chayil, 129.953125 * chayil);
  nataanii.bezierCurveTo(130.25 * chayil, 117.953125 * chayil, 130.25 * chayil, 117.953125 * chayil, 108.25 * chayil, 105.953125 * chayil);
  nataanii.bezierCurveTo(107.25 * chayil, 98.953125 * chayil, 107.25 * chayil, 98.953125 * chayil, 106.25 * chayil, 91.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, mama[7]);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(87.25 * chayil, 84.953125 * chayil);
  nataanii.bezierCurveTo(123.75 * chayil, 100.453125 * chayil, 123.75 * chayil, 100.453125 * chayil, 160.25 * chayil, 115.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, undefined, mama[6], 4 * chayil);
  nataanii.globalAlpha = eartha ? .5 : 1;
  nataanii.translate(5 * chayil, 5 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(83.25 * chayil, 83.953125 * chayil);
  nataanii.bezierCurveTo(47.75 * chayil, 68.453125 * chayil, 47.75 * chayil, 68.453125 * chayil, 12.25 * chayil, 52.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, undefined, mama[0], 4 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(13.25 * chayil, 53.953125 * chayil);
  nataanii.bezierCurveTo(17.25 * chayil, 46.953125 * chayil, 17.25 * chayil, 46.953125 * chayil, 21.25 * chayil, 39.953125 * chayil);
  nataanii.bezierCurveTo(42.75 * chayil, 52.453125 * chayil, 42.75 * chayil, 52.453125 * chayil, 64.25 * chayil, 64.953125 * chayil);
  nataanii.bezierCurveTo(64.25 * chayil, 70.953125 * chayil, 64.25 * chayil, 70.953125 * chayil, 64.25 * chayil, 76.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, mama[0]);
  nataanii.globalAlpha = 1;
  nataanii.translate(-5 * chayil, -5 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(13.25 * chayil, 53.953125 * chayil);
  nataanii.bezierCurveTo(17.25 * chayil, 46.953125 * chayil, 17.25 * chayil, 46.953125 * chayil, 21.25 * chayil, 39.953125 * chayil);
  nataanii.bezierCurveTo(42.75 * chayil, 52.453125 * chayil, 42.75 * chayil, 52.453125 * chayil, 64.25 * chayil, 64.953125 * chayil);
  nataanii.bezierCurveTo(64.25 * chayil, 70.953125 * chayil, 64.25 * chayil, 70.953125 * chayil, 64.25 * chayil, 76.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, mama[7]);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(83.25 * chayil, 83.953125 * chayil);
  nataanii.bezierCurveTo(47.75 * chayil, 68.453125 * chayil, 47.75 * chayil, 68.453125 * chayil, 12.25 * chayil, 52.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, undefined, mama[6], 4 * chayil);
  nataanii.globalAlpha = eartha ? .5 : 1;
  nataanii.translate(5 * chayil, 5 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(84.25 * chayil, 86.953125 * chayil);
  nataanii.bezierCurveTo(70.25 * chayil, 123.953125 * chayil, 70.25 * chayil, 123.953125 * chayil, 56.25 * chayil, 160.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, undefined, mama[0], 4 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(56.25 * chayil, 159.953125 * chayil);
  nataanii.bezierCurveTo(49.25 * chayil, 155.453125 * chayil, 49.25 * chayil, 155.453125 * chayil, 42.25 * chayil, 150.953125 * chayil);
  nataanii.bezierCurveTo(54.25 * chayil, 127.953125 * chayil, 54.25 * chayil, 127.953125 * chayil, 66.25 * chayil, 104.953125 * chayil);
  nataanii.bezierCurveTo(71.25 * chayil, 104.953125 * chayil, 71.25 * chayil, 104.953125 * chayil, 76.25 * chayil, 104.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, mama[0]);
  nataanii.globalAlpha = 1;
  nataanii.translate(-5 * chayil, -5 * chayil);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(56.25 * chayil, 159.953125 * chayil);
  nataanii.bezierCurveTo(49.25 * chayil, 155.453125 * chayil, 49.25 * chayil, 155.453125 * chayil, 42.25 * chayil, 150.953125 * chayil);
  nataanii.bezierCurveTo(54.25 * chayil, 127.953125 * chayil, 54.25 * chayil, 127.953125 * chayil, 66.25 * chayil, 104.953125 * chayil);
  nataanii.bezierCurveTo(71.25 * chayil, 104.953125 * chayil, 71.25 * chayil, 104.953125 * chayil, 76.25 * chayil, 104.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, mama[7]);
  nataanii.beginPath();
  nataanii.lineCap = "round";
  nataanii.lineJoin = "round";
  nataanii.moveTo(84.25 * chayil, 86.953125 * chayil);
  nataanii.bezierCurveTo(70.25 * chayil, 123.953125 * chayil, 70.25 * chayil, 123.953125 * chayil, 56.25 * chayil, 160.953125 * chayil);
  nataanii.closePath();
  fill_path(nataanii, undefined, mama[6], 4 * chayil);
  return presious;
}
function create_windmill_head(konner, west, mckynsie) {
  var toosdhi = document.createElement("canvas");
  var octava = toosdhi.getContext("2d");
  toosdhi.width = 170 * konner;
  toosdhi.height = 173 * konner;
  octava.globalAlpha = west ? .5 : 1;
  octava.translate(5 * konner, 5 * konner);
  octava.save();
  octava.translate(86.25 * konner, 84.953125 * konner);
  round_regular_polygon(octava, 7, 9.848857801796104 * konner, 5 * konner);
  octava.restore();
  fill_path(octava, mckynsie[0]);
  octava.globalAlpha = 1;
  octava.translate(-5 * konner, -5 * konner);
  octava.save();
  octava.translate(86.25 * konner, 84.953125 * konner);
  round_regular_polygon(octava, 7, 9.848857801796104 * konner, 5 * konner);
  octava.restore();
  fill_path(octava, mckynsie[8], mckynsie[9], 4 * konner);
  return toosdhi;
}
function create_cord(floyce, amilee, benelli) {
  var goree = document.createElement("canvas");
  var aishe = goree.getContext("2d");
  var kaustubh = floyce * 75;
  var lilyiana = floyce * 55;
  var jandra = floyce * 4;
  goree.width = kaustubh;
  goree.height = lilyiana;
  aishe.translate(-30 * floyce, -40 * floyce);
  aishe.globalAlpha = 1;
  aishe.beginPath();
  aishe.bezierCurveTo(67 * floyce, 56 * floyce, 72 * floyce, 71 * floyce, 72 * floyce, 71 * floyce);
  aishe.bezierCurveTo(72 * floyce, 71 * floyce, 84 * floyce, 70 * floyce, 75 * floyce, 82 * floyce);
  aishe.bezierCurveTo(70 * floyce, 88 * floyce, 61 * floyce, 89 * floyce, 58 * floyce, 89 * floyce);
  aishe.bezierCurveTo(55 * floyce, 89 * floyce, 40 * floyce, 89 * floyce, 46 * floyce, 77 * floyce);
  aishe.bezierCurveTo(46 * floyce, 77 * floyce, 43 * floyce, 63 * floyce, 43 * floyce, 63 * floyce);
  aishe.bezierCurveTo(35 * floyce, 61 * floyce, 35 * floyce, 53 * floyce, 42 * floyce, 47 * floyce);
  aishe.bezierCurveTo(48 * floyce, 42 * floyce, 62 * floyce, 41 * floyce, 66 * floyce, 43 * floyce);
  aishe.bezierCurveTo(70 * floyce, 45 * floyce, 72 * floyce, 48 * floyce, 67 * floyce, 56 * floyce);
  aishe.closePath();
  fill_path(aishe, benelli[0]);
  aishe.beginPath();
  aishe.bezierCurveTo(68 * floyce, 61 * floyce, 72 * floyce, 76 * floyce, 72 * floyce, 76 * floyce);
  aishe.bezierCurveTo(65 * floyce, 85 * floyce, 61 * floyce, 85 * floyce, 49 * floyce, 83 * floyce);
  aishe.bezierCurveTo(49 * floyce, 83 * floyce, 44 * floyce, 63 * floyce, 44 * floyce, 63 * floyce);
  aishe.bezierCurveTo(54 * floyce, 63 * floyce, 60 * floyce, 63 * floyce, 67 * floyce, 55 * floyce);
  aishe.closePath();
  fill_path(aishe, benelli[1]);
  aishe.beginPath();
  aishe.moveTo(69 * floyce, 65 * floyce);
  aishe.bezierCurveTo(70 * floyce, 61 * floyce, 81 * floyce, 66 * floyce, 86 * floyce, 66 * floyce);
  aishe.bezierCurveTo(90 * floyce, 66 * floyce, 97 * floyce, 63 * floyce, 97 * floyce, 56 * floyce);
  aishe.bezierCurveTo(97 * floyce, 50 * floyce, 93 * floyce, 47 * floyce, 88 * floyce, 44 * floyce);
  fill_path(aishe, false, benelli[1], 2);
  aishe.beginPath();
  aishe.moveTo(50 * floyce, 48 * floyce);
  aishe.bezierCurveTo(43 * floyce, 52 * floyce, 50 * floyce, 54 * floyce, 51 * floyce, 54 * floyce);
  aishe.bezierCurveTo(54 * floyce, 54 * floyce, 59 * floyce, 52 * floyce, 59 * floyce, 49 * floyce);
  aishe.bezierCurveTo(59 * floyce, 48 * floyce, 55 * floyce, 46 * floyce, 50 * floyce, 48 * floyce);
  fill_path(aishe, benelli[2]);
  return goree;
}
function create_bandage(pierrie, alayziah, synia) {
  var tijon = document.createElement("canvas");
  var ariahnna = tijon.getContext("2d");
  var chalyn = pierrie * 195;
  var jozelyn = pierrie * 190;
  var alasia = chalyn / 2;
  var tippi = jozelyn / 2;
  tijon.width = chalyn;
  tijon.height = jozelyn;
  var areeg = pierrie * 10;
  var alonda = pierrie * 35;
  var darrold = pierrie * 150;
  var kenai = alonda / 2;
  var jyshon = darrold / 2;
  var mayetta = pierrie * 4;
  ariahnna.translate(alasia - 5 * pierrie, tippi - 5 * pierrie);
  ariahnna.rotate(-Math.PI / 1.25);
  ariahnna.globalAlpha = 1;
  round_rect(ariahnna, -kenai, -jyshon, alonda, darrold, areeg);
  fill_path(ariahnna, synia[0], synia[1], mayetta);
  ariahnna.translate(0, 0);
  ariahnna.rotate(Math.PI / 3);
  ariahnna.globalAlpha = 1;
  round_rect(ariahnna, -kenai, -jyshon, alonda, darrold, areeg);
  fill_path(ariahnna, synia[0], synia[1], mayetta);
  ariahnna.translate(0, 5);
  round_rect(ariahnna, -kenai / 2, -jyshon / 2, alonda / 2, darrold / 3, areeg - 2);
  fill_path(ariahnna, synia[1]);
  return tijon;
}
function create_craft_button(sarayah, jeniva, akerria, malcom, tymberlyn) {
  var liyah = document.createElement("canvas");
  var de = liyah.getContext("2d");
  var adwaith = sarayah * 70;
  var seri = sarayah * 70;
  var princy = sarayah * 10;
  var lefty = sarayah * 5;
  liyah.width = adwaith;
  liyah.height = seri + lefty;
  for (var finesse = 0; finesse < jeniva.length; finesse++) {
    var montry = jeniva[finesse];
    de.globalAlpha = montry.a;
    var lenay = montry.f(akerria, false, montry.c);
    de.save();
    de.translate(adwaith / 2 + montry.x * sarayah, seri / 2 + montry.y * sarayah);
    de.rotate(montry.r);
    de.drawImage(lenay, -lenay.width / 2, -lenay.height / 2);
    de.restore();
  }
  var nyomee = [];
  for (var finesse = 0; finesse < malcom.length; finesse++) {
    var lakischa = document.createElement("canvas");
    var deetta = lakischa.getContext("2d");
    lakischa.width = adwaith;
    lakischa.height = seri + lefty;
    deetta.globalAlpha = tymberlyn / 2;
    if (finesse == 2) {
      round_rect(deetta, 0, lefty, adwaith, seri, princy);
    } else {
      round_rect(deetta, 0, 0, adwaith, seri + lefty, princy);
    }
    fill_path(deetta, "#081a19");
    deetta.globalAlpha = tymberlyn;
    if (finesse == 2) {
      round_rect(deetta, 0, lefty, adwaith, seri, princy);
    } else {
      round_rect(deetta, 0, 0, adwaith, seri, princy);
    }
    fill_path(deetta, malcom[finesse]);
    deetta.globalAlpha = 1;
    if (finesse == 2) {
      deetta.drawImage(liyah, 0, lefty);
    } else {
      deetta.drawImage(liyah, 0, 0);
    }
    nyomee.push(CTI(lakischa));
  }
  return nyomee;
}
function create_bread_oven_ui(mortez, jimiya) {
  var tornell = document.createElement("canvas");
  var meredythe = tornell.getContext("2d");
  tornell.width = 149 * mortez;
  tornell.height = 356 * mortez;
  meredythe.save();
  meredythe.translate(74.5 * mortez, 177.5 * mortez);
  round_rect(meredythe, -57.5 * mortez, -161.5 * mortez, 100 * mortez, 323 * mortez, 10 * mortez);
  meredythe.restore();
  fill_path(meredythe, jimiya[0], jimiya[1], 4 * mortez);
  meredythe.save();
  meredythe.translate(74.5 * mortez, 177.5 * mortez);
  round_rect(meredythe, -57.5 * mortez, 50.5 * mortez, 100 * mortez, 105 * mortez, 10 * mortez);
  meredythe.restore();
  fill_path(meredythe, jimiya[6], jimiya[1], 4 * mortez);
  meredythe.beginPath();
  meredythe.lineCap = "round";
  meredythe.lineJoin = "round";
  meredythe.moveTo(16 * mortez, 125 * mortez);
  meredythe.bezierCurveTo(74.5 * mortez, 125 * mortez, 118 * mortez, 125 * mortez, 118 * mortez, 125 * mortez);
  meredythe.closePath();
  fill_path(meredythe, jimiya[2], jimiya[2], 10 * mortez);
  meredythe.beginPath();
  meredythe.lineCap = "round";
  meredythe.lineJoin = "round";
  meredythe.moveTo(16 * mortez, 120 * mortez);
  meredythe.bezierCurveTo(74.5 * mortez, 120 * mortez, 74.5 * mortez, 120 * mortez, 118 * mortez, 120 * mortez);
  meredythe.closePath();
  fill_path(meredythe, jimiya[3], jimiya[3], 10 * mortez);
  meredythe.beginPath();
  meredythe.lineCap = "round";
  meredythe.lineJoin = "round";
  meredythe.moveTo(16 * mortez, 228 * mortez);
  meredythe.bezierCurveTo(75 * mortez, 228.5 * mortez, 118 * mortez, 228.5 * mortez, 118 * mortez, 229 * mortez);
  meredythe.closePath();
  fill_path(meredythe, jimiya[2], jimiya[2], 10 * mortez);
  meredythe.beginPath();
  meredythe.lineCap = "round";
  meredythe.lineJoin = "round";
  meredythe.moveTo(16 * mortez, 224 * mortez);
  meredythe.bezierCurveTo(75 * mortez, 224 * mortez, 118 * mortez, 224 * mortez, 118 * mortez, 224 * mortez);
  meredythe.closePath();
  fill_path(meredythe, jimiya[3], jimiya[3], 10 * mortez);
  meredythe.save();
  meredythe.translate(72 * mortez, 68.5 * mortez);
  round_rect(meredythe, -41.5 * mortez, -36.5 * mortez, 73 * mortez, 73 * mortez, 13 * mortez);
  meredythe.restore();
  fill_path(meredythe, jimiya[4]);
  meredythe.save();
  meredythe.translate(72 * mortez, 175.5 * mortez);
  round_rect(meredythe, -41.5 * mortez, -38.5 * mortez, 73 * mortez, 73 * mortez, 13 * mortez);
  meredythe.restore();
  fill_path(meredythe, jimiya[4]);
  meredythe.save();
  meredythe.translate(72 * mortez, 279.5 * mortez);
  round_rect(meredythe, -41.5 * mortez, -40.5 * mortez, 73 * mortez, 73 * mortez, 13 * mortez);
  meredythe.restore();
  fill_path(meredythe, jimiya[4]);
  meredythe.beginPath();
  meredythe.lineCap = "round";
  meredythe.lineJoin = "round";
  meredythe.moveTo(16 * mortez, 338 * mortez);
  meredythe.bezierCurveTo(75 * mortez, 338 * mortez, 118 * mortez, 338 * mortez, 118 * mortez, 338 * mortez);
  meredythe.closePath();
  fill_path(meredythe, jimiya[2], jimiya[2], 10 * mortez);
  meredythe.beginPath();
  meredythe.lineCap = "round";
  meredythe.lineJoin = "round";
  meredythe.moveTo(16 * mortez, 333 * mortez);
  meredythe.bezierCurveTo(75 * mortez, 333 * mortez, 118 * mortez, 333 * mortez, 118 * mortez, 333 * mortez);
  meredythe.closePath();
  fill_path(meredythe, jimiya[3], jimiya[3], 10 * mortez);
  return tornell;
}
function create_big_fire_wood(tyzir, emmert, makston) {
  var vintrell = document.createElement("canvas");
  var sascha = vintrell.getContext("2d");
  var natale = tyzir * 193;
  var viliamu = tyzir * 198;
  var kenjanae = 140 * tyzir;
  var rreanna = 90 * tyzir;
  vintrell.width = natale;
  vintrell.height = viliamu;
  var genard = tyzir * 10;
  var lusiano = tyzir * 25;
  var orange = tyzir * 180;
  var nyeema = lusiano / 2;
  var kinslie = orange / 2;
  var nyrareddy = tyzir * 4;
  sascha.translate(-25 * tyzir, 1 * tyzir);
  sascha.translate(kenjanae, rreanna);
  sascha.rotate(-Math.PI / 5);
  round_rect(sascha, -nyeema, -kinslie, lusiano, orange, genard);
  fill_path(sascha, makston[0], makston[1], nyrareddy);
  sascha.translate(-30 * tyzir, -25 * tyzir);
  sascha.rotate(Math.PI / 3);
  round_rect(sascha, -nyeema, -kinslie, lusiano, orange, genard);
  fill_path(sascha, makston[0], makston[1], nyrareddy);
  sascha.translate(35 * tyzir, 30 * tyzir);
  sascha.rotate(Math.PI / 3);
  round_rect(sascha, -nyeema, -kinslie, lusiano, orange, genard);
  fill_path(sascha, makston[0], makston[1], nyrareddy);
  return vintrell;
}
function create_fire(matsuko, grieg, shanaiya) {
  var eyad = document.createElement("canvas");
  var aaliyah = eyad.getContext("2d");
  var sellers = matsuko * 145;
  var amarilys = matsuko * 145;
  var raden = sellers / 2;
  var nickisha = amarilys / 2;
  eyad.width = sellers;
  eyad.height = amarilys;
  var yerica = matsuko * 70;
  aaliyah.translate(raden, nickisha);
  aaliyah.globalAlpha = .4;
  circle(aaliyah, 0, 0, yerica);
  fill_path(aaliyah, shanaiya[0]);
  var yerica = matsuko * 50;
  aaliyah.translate(0, 0);
  aaliyah.globalAlpha = .8;
  circle(aaliyah, 0, 0, yerica);
  fill_path(aaliyah, shanaiya[0]);
  var yerica = matsuko * 35;
  aaliyah.translate(0, 0);
  aaliyah.globalAlpha = .8;
  circle(aaliyah, 0, 0, yerica);
  fill_path(aaliyah, shanaiya[1]);
  var yerica = matsuko * 20;
  aaliyah.translate(0, 0);
  aaliyah.globalAlpha = .8;
  circle(aaliyah, 0, 0, yerica);
  fill_path(aaliyah, shanaiya[2]);
  return eyad;
}
function create_wood_fire(kamiliah, dahliana, anneliese) {
  var bunk = document.createElement("canvas");
  var cricket = bunk.getContext("2d");
  var jwuan = kamiliah * 135;
  var sam = kamiliah * 190;
  var maryel = jwuan / 2;
  var shainna = sam / 2;
  bunk.width = jwuan;
  bunk.height = sam;
  var cidnee = kamiliah * 10;
  var perrine = kamiliah * 25;
  var atyia = kamiliah * 180;
  var lennia = perrine / 2;
  var skyann = atyia / 2;
  var rayshard = kamiliah * 4;
  cricket.translate(maryel, shainna);
  cricket.rotate(-Math.PI / 5);
  cricket.globalAlpha = 1;
  round_rect(cricket, -lennia, -skyann, perrine, atyia, cidnee);
  fill_path(cricket, anneliese[0], anneliese[1], rayshard);
  cricket.translate(0, 0);
  cricket.rotate(Math.PI / 5);
  cricket.globalAlpha = 1;
  round_rect(cricket, -lennia, -skyann, perrine, atyia, cidnee);
  fill_path(cricket, anneliese[0], anneliese[1], rayshard);
  return bunk;
}
function create_ground_fire(kemry, abby, dala) {
  var ajit = document.createElement("canvas");
  var sophina = ajit.getContext("2d");
  var ahleigha = kemry * 205;
  var doug = kemry * 205;
  var rishit = ahleigha / 2;
  var sicily = doug / 2;
  ajit.width = ahleigha;
  ajit.height = doug;
  var aidet = kemry * 100;
  sophina.translate(rishit, sicily);
  sophina.globalAlpha = 1;
  circle(sophina, 0, 0, aidet);
  fill_path(sophina, dala[0]);
  return ajit;
}
function create_halo_fire(keitlyn, sheka, italo) {
  var avyel = document.createElement("canvas");
  var rashmi = avyel.getContext("2d");
  var chaun = keitlyn * 370;
  var cire = keitlyn * 370;
  var dasael = chaun / 2;
  var lavee = cire / 2;
  avyel.width = chaun;
  avyel.height = cire;
  var kanesia = keitlyn * 180;
  rashmi.globalAlpha = .2;
  circle(rashmi, dasael, lavee, kanesia);
  fill_path(rashmi, italo[0]);
  return avyel;
}
function create_elf_hat(forris, verone, chareese) {
  var daetyn = document.createElement("canvas");
  var daisia = daetyn.getContext("2d");
  daetyn.width = 155 * forris;
  daetyn.height = 127 * forris;
  daisia.globalAlpha = .5;
  daisia.translate(0, 8 * forris);
  daisia.translate(-7 * forris, -20 * forris);
  daisia.beginPath();
  daisia.lineCap = "round";
  daisia.lineJoin = "round";
  daisia.moveTo(55 * forris, 68 * forris);
  daisia.bezierCurveTo(86 * forris, 64 * forris, 117 * forris, 66 * forris, 134 * forris, 68 * forris);
  daisia.bezierCurveTo(152 * forris, 69 * forris, 165 * forris, 86 * forris, 152 * forris, 104 * forris);
  daisia.bezierCurveTo(146 * forris, 87 * forris, 122 * forris, 89 * forris, 98 * forris, 90 * forris);
  daisia.bezierCurveTo(64 * forris, 89 * forris, 41 * forris, 91 * forris, 36 * forris, 106 * forris);
  daisia.bezierCurveTo(19 * forris, 92 * forris, 31 * forris, 71 * forris, 54 * forris, 69 * forris);
  daisia.closePath();
  fill_path(daisia, chareese[0]);
  daisia.globalAlpha = 1;
  daisia.translate(0, -8 * forris);
  daisia.translate(7 * forris, 20 * forris);
  daisia.beginPath();
  daisia.lineCap = "round";
  daisia.lineJoin = "round";
  daisia.moveTo(24 * forris, 28 * forris);
  daisia.bezierCurveTo(39 * forris, 30 * forris, 37 * forris, 31 * forris, 40 * forris, 32 * forris);
  daisia.bezierCurveTo(22 * forris, 45 * forris, 26 * forris, 58 * forris, 29 * forris, 66 * forris);
  daisia.bezierCurveTo(86.5 * forris, 65 * forris, 86.5 * forris, 65 * forris, 144 * forris, 64 * forris);
  daisia.bezierCurveTo(151 * forris, 42 * forris, 132 * forris, 20 * forris, 120 * forris, 16 * forris);
  daisia.bezierCurveTo(106 * forris, 12 * forris, 89 * forris, 0 * forris, 73 * forris, 3 * forris);
  daisia.bezierCurveTo(51 * forris, 5 * forris, 36 * forris, 20 * forris, 25 * forris, 28 * forris);
  daisia.closePath();
  fill_path(daisia, chareese[1], chareese[2], 4 * forris);
  daisia.beginPath();
  daisia.lineCap = "round";
  daisia.lineJoin = "round";
  daisia.moveTo(30 * forris, 41 * forris);
  daisia.bezierCurveTo(49 * forris, 31 * forris, 53 * forris, 29 * forris, 62 * forris, 27 * forris);
  daisia.bezierCurveTo(59 * forris, 24 * forris, 56 * forris, 25 * forris, 53 * forris, 24 * forris);
  daisia.bezierCurveTo(67 * forris, 15 * forris, 84 * forris, 12 * forris, 120 * forris, 16 * forris);
  daisia.bezierCurveTo(107 * forris, 11 * forris, 96 * forris, 6 * forris, 85 * forris, 2 * forris);
  daisia.bezierCurveTo(59 * forris, 3 * forris, 54 * forris, 7 * forris, 40 * forris, 17 * forris);
  daisia.bezierCurveTo(32.5 * forris, 22.5 * forris, 32.5 * forris, 22.5 * forris, 25 * forris, 28 * forris);
  daisia.bezierCurveTo(32 * forris, 30 * forris, 32 * forris, 30 * forris, 39 * forris, 32 * forris);
  daisia.closePath();
  fill_path(daisia, chareese[3]);
  daisia.beginPath();
  daisia.lineCap = "round";
  daisia.lineJoin = "round";
  daisia.moveTo(24 * forris, 28 * forris);
  daisia.bezierCurveTo(39 * forris, 30 * forris, 37 * forris, 31 * forris, 40 * forris, 32 * forris);
  daisia.bezierCurveTo(22 * forris, 45 * forris, 26 * forris, 58 * forris, 29 * forris, 66 * forris);
  daisia.bezierCurveTo(86.5 * forris, 65 * forris, 86.5 * forris, 65 * forris, 144 * forris, 64 * forris);
  daisia.bezierCurveTo(151 * forris, 42 * forris, 132 * forris, 20 * forris, 120 * forris, 16 * forris);
  daisia.bezierCurveTo(106 * forris, 12 * forris, 89 * forris, 0 * forris, 73 * forris, 3 * forris);
  daisia.bezierCurveTo(51 * forris, 5 * forris, 36 * forris, 20 * forris, 25 * forris, 28 * forris);
  daisia.closePath();
  fill_path(daisia, undefined, chareese[2], 4 * forris);
  circle(daisia, 18 * forris, 38 * forris, 14.866068747318506 * forris);
  fill_path(daisia, chareese[4], chareese[5], 4 * forris);
  daisia.beginPath();
  daisia.lineCap = "round";
  daisia.lineJoin = "round";
  daisia.moveTo(39 * forris, 30 * forris);
  daisia.bezierCurveTo(27 * forris, 38 * forris, 25 * forris, 50 * forris, 26 * forris, 60 * forris);
  daisia.bezierCurveTo(36.5 * forris, 58.5 * forris, 36.5 * forris, 58.5 * forris, 47 * forris, 57 * forris);
  fill_path(daisia, chareese[1], chareese[2], 4 * forris);
  daisia.translate(-7 * forris, -20 * forris);
  daisia.beginPath();
  daisia.lineCap = "round";
  daisia.lineJoin = "round";
  daisia.moveTo(27 * forris, 74 * forris);
  daisia.bezierCurveTo(38 * forris, 77.5 * forris, 38 * forris, 77.5 * forris, 49 * forris, 81 * forris);
  daisia.bezierCurveTo(54.5 * forris, 75.5 * forris, 54.5 * forris, 75.5 * forris, 60 * forris, 70 * forris);
  daisia.bezierCurveTo(64 * forris, 72 * forris, 64 * forris, 72 * forris, 68 * forris, 74 * forris);
  daisia.bezierCurveTo(80.5 * forris, 67.5 * forris, 80.5 * forris, 67.5 * forris, 93 * forris, 61 * forris);
  daisia.bezierCurveTo(104.5 * forris, 68 * forris, 104.5 * forris, 68 * forris, 116 * forris, 75 * forris);
  daisia.bezierCurveTo(120.5 * forris, 72.5 * forris, 120.5 * forris, 72.5 * forris, 125 * forris, 70 * forris);
  daisia.bezierCurveTo(129 * forris, 75 * forris, 129 * forris, 75 * forris, 133 * forris, 80 * forris);
  daisia.bezierCurveTo(145.5 * forris, 76.5 * forris, 145.5 * forris, 76.5 * forris, 158 * forris, 73 * forris);
  daisia.bezierCurveTo(158 * forris, 87 * forris, 158 * forris, 93 * forris, 155 * forris, 95 * forris);
  daisia.bezierCurveTo(152.5 * forris, 96 * forris, 152.5 * forris, 96 * forris, 150 * forris, 97 * forris);
  daisia.bezierCurveTo(121 * forris, 85 * forris, 108 * forris, 86 * forris, 93 * forris, 85 * forris);
  daisia.bezierCurveTo(64 * forris, 85 * forris, 52 * forris, 95 * forris, 38 * forris, 99 * forris);
  daisia.bezierCurveTo(36 * forris, 98.5 * forris, 36 * forris, 98.5 * forris, 34 * forris, 98 * forris);
  daisia.bezierCurveTo(25 * forris, 98 * forris, 27 * forris, 91 * forris, 27 * forris, 76 * forris);
  daisia.closePath();
  fill_path(daisia, chareese[6], chareese[7], 6 * forris);
  return daetyn;
}
function create_christmas_hat(aapri, goddess, eyani) {
  var fostina = document.createElement("canvas");
  var tayzen = fostina.getContext("2d");
  fostina.width = 155 * aapri;
  fostina.height = 127 * aapri;
  tayzen.globalAlpha = .5;
  tayzen.translate(0, 8 * aapri);
  tayzen.translate(-7 * aapri, -20 * aapri);
  tayzen.beginPath();
  tayzen.lineCap = "round";
  tayzen.lineJoin = "round";
  tayzen.moveTo(55 * aapri, 68 * aapri);
  tayzen.bezierCurveTo(86 * aapri, 64 * aapri, 117 * aapri, 66 * aapri, 134 * aapri, 68 * aapri);
  tayzen.bezierCurveTo(152 * aapri, 69 * aapri, 165 * aapri, 86 * aapri, 152 * aapri, 104 * aapri);
  tayzen.bezierCurveTo(146 * aapri, 87 * aapri, 122 * aapri, 89 * aapri, 98 * aapri, 90 * aapri);
  tayzen.bezierCurveTo(64 * aapri, 89 * aapri, 41 * aapri, 91 * aapri, 36 * aapri, 106 * aapri);
  tayzen.bezierCurveTo(19 * aapri, 92 * aapri, 31 * aapri, 71 * aapri, 54 * aapri, 69 * aapri);
  tayzen.closePath();
  fill_path(tayzen, eyani[0]);
  tayzen.globalAlpha = 1;
  tayzen.translate(0, -8 * aapri);
  tayzen.translate(7 * aapri, 20 * aapri);
  tayzen.beginPath();
  tayzen.lineCap = "round";
  tayzen.lineJoin = "round";
  tayzen.moveTo(24 * aapri, 28 * aapri);
  tayzen.bezierCurveTo(39 * aapri, 30 * aapri, 37 * aapri, 31 * aapri, 40 * aapri, 32 * aapri);
  tayzen.bezierCurveTo(22 * aapri, 45 * aapri, 26 * aapri, 58 * aapri, 29 * aapri, 66 * aapri);
  tayzen.bezierCurveTo(86.5 * aapri, 65 * aapri, 86.5 * aapri, 65 * aapri, 144 * aapri, 64 * aapri);
  tayzen.bezierCurveTo(151 * aapri, 42 * aapri, 132 * aapri, 20 * aapri, 120 * aapri, 16 * aapri);
  tayzen.bezierCurveTo(106 * aapri, 12 * aapri, 89 * aapri, 0 * aapri, 73 * aapri, 3 * aapri);
  tayzen.bezierCurveTo(51 * aapri, 5 * aapri, 36 * aapri, 20 * aapri, 25 * aapri, 28 * aapri);
  tayzen.closePath();
  fill_path(tayzen, eyani[1], eyani[2], 4 * aapri);
  tayzen.beginPath();
  tayzen.lineCap = "round";
  tayzen.lineJoin = "round";
  tayzen.moveTo(30 * aapri, 41 * aapri);
  tayzen.bezierCurveTo(49 * aapri, 31 * aapri, 53 * aapri, 29 * aapri, 62 * aapri, 27 * aapri);
  tayzen.bezierCurveTo(59 * aapri, 24 * aapri, 56 * aapri, 25 * aapri, 53 * aapri, 24 * aapri);
  tayzen.bezierCurveTo(67 * aapri, 15 * aapri, 84 * aapri, 12 * aapri, 120 * aapri, 16 * aapri);
  tayzen.bezierCurveTo(107 * aapri, 11 * aapri, 96 * aapri, 6 * aapri, 85 * aapri, 2 * aapri);
  tayzen.bezierCurveTo(59 * aapri, 3 * aapri, 54 * aapri, 7 * aapri, 40 * aapri, 17 * aapri);
  tayzen.bezierCurveTo(32.5 * aapri, 22.5 * aapri, 32.5 * aapri, 22.5 * aapri, 25 * aapri, 28 * aapri);
  tayzen.bezierCurveTo(32 * aapri, 30 * aapri, 32 * aapri, 30 * aapri, 39 * aapri, 32 * aapri);
  tayzen.closePath();
  fill_path(tayzen, eyani[3]);
  tayzen.beginPath();
  tayzen.lineCap = "round";
  tayzen.lineJoin = "round";
  tayzen.moveTo(24 * aapri, 28 * aapri);
  tayzen.bezierCurveTo(39 * aapri, 30 * aapri, 37 * aapri, 31 * aapri, 40 * aapri, 32 * aapri);
  tayzen.bezierCurveTo(22 * aapri, 45 * aapri, 26 * aapri, 58 * aapri, 29 * aapri, 66 * aapri);
  tayzen.bezierCurveTo(86.5 * aapri, 65 * aapri, 86.5 * aapri, 65 * aapri, 144 * aapri, 64 * aapri);
  tayzen.bezierCurveTo(151 * aapri, 42 * aapri, 132 * aapri, 20 * aapri, 120 * aapri, 16 * aapri);
  tayzen.bezierCurveTo(106 * aapri, 12 * aapri, 89 * aapri, 0 * aapri, 73 * aapri, 3 * aapri);
  tayzen.bezierCurveTo(51 * aapri, 5 * aapri, 36 * aapri, 20 * aapri, 25 * aapri, 28 * aapri);
  tayzen.closePath();
  fill_path(tayzen, undefined, eyani[2], 4 * aapri);
  circle(tayzen, 18 * aapri, 38 * aapri, 14.866068747318506 * aapri);
  fill_path(tayzen, eyani[4], eyani[5], 4 * aapri);
  tayzen.beginPath();
  tayzen.lineCap = "round";
  tayzen.lineJoin = "round";
  tayzen.moveTo(39 * aapri, 30 * aapri);
  tayzen.bezierCurveTo(27 * aapri, 38 * aapri, 25 * aapri, 50 * aapri, 26 * aapri, 60 * aapri);
  tayzen.bezierCurveTo(36.5 * aapri, 58.5 * aapri, 36.5 * aapri, 58.5 * aapri, 47 * aapri, 57 * aapri);
  fill_path(tayzen, eyani[1], eyani[2], 4 * aapri);
  tayzen.translate(-7 * aapri, -20 * aapri);
  tayzen.beginPath();
  tayzen.lineCap = "round";
  tayzen.lineJoin = "round";
  tayzen.moveTo(55 * aapri, 68 * aapri);
  tayzen.bezierCurveTo(86 * aapri, 64 * aapri, 117 * aapri, 66 * aapri, 134 * aapri, 68 * aapri);
  tayzen.bezierCurveTo(152 * aapri, 69 * aapri, 165 * aapri, 86 * aapri, 152 * aapri, 104 * aapri);
  tayzen.bezierCurveTo(146 * aapri, 87 * aapri, 122 * aapri, 89 * aapri, 98 * aapri, 90 * aapri);
  tayzen.bezierCurveTo(64 * aapri, 89 * aapri, 41 * aapri, 91 * aapri, 36 * aapri, 106 * aapri);
  tayzen.bezierCurveTo(19 * aapri, 92 * aapri, 31 * aapri, 71 * aapri, 54 * aapri, 69 * aapri);
  tayzen.closePath();
  fill_path(tayzen, eyani[4], eyani[5], 4 * aapri);
  return fostina;
}
function create_zombie_hand(charlesetta, stellar) {
  var tyvin = document.createElement("canvas");
  var drelynn = tyvin.getContext("2d");
  var chavie = charlesetta * 220;
  var normalinda = charlesetta * 220;
  var jardyn = charlesetta * 32;
  var anieyah = charlesetta * 4;
  tyvin.width = chavie;
  tyvin.height = normalinda;
  drelynn.translate(chavie / 2, normalinda / 2 + 10 * charlesetta);
  drelynn.globalAlpha = .5;
  circle(drelynn, 0, 0, jardyn);
  fill_path(drelynn, stellar[0], stellar[0]);
  drelynn.translate(0, -8 * charlesetta);
  drelynn.globalAlpha = 1;
  circle(drelynn, 0, 0, jardyn);
  fill_path(drelynn, stellar[1], stellar[2], anieyah);
  return tyvin;
}
function create_hand(scion, kanaja) {
  var adylan = document.createElement("canvas");
  var lurley = adylan.getContext("2d");
  var thien = scion * 40;
  var eltha = scion * 40;
  var annaliece = scion * 16;
  var mayliah = scion * 4;
  adylan.width = thien;
  adylan.height = eltha;
  lurley.translate(thien / 2, eltha / 2);
  lurley.globalAlpha = 1;
  circle(lurley, 0, 0, annaliece);
  fill_path(lurley, kanaja[0], kanaja[1], mayliah);
  return adylan;
}
function create_hand_shadow(zaelie, ibrahem) {
  var rundy = document.createElement("canvas");
  var musashi = rundy.getContext("2d");
  var zyell = zaelie * 220;
  var camp = zaelie * 220;
  var samuael = zaelie * 16;
  rundy.width = zyell;
  rundy.height = camp;
  musashi.translate(zyell / 2, camp / 2);
  musashi.globalAlpha = .5;
  circle(musashi, 0, 0, samuael);
  fill_path(musashi, ibrahem[0]);
  musashi.globalAlpha = 1;
  return rundy;
}
function create_apricot_tree(murael, shinya, keeron, jermani) {
  var briellah = document.createElement("canvas");
  var louden = briellah.getContext("2d");
  var onnika = murael * 210;
  var quinita = murael * 205;
  var sekani = onnika / 2;
  var geniene = quinita / 2;
  var dajanay = murael * 30;
  var cadem = murael * 20;
  var shamarr = murael * 200;
  var sybile = murael * 180;
  var tradon = murael * 80;
  var ademir = shamarr / 2;
  var verania = sybile / 2;
  briellah.width = onnika;
  briellah.height = quinita;
  briellah.width = 419 * murael;
  briellah.height = 412 * murael;
  if (jermani == 1) {
    louden.save();
    louden.translate(10 * murael, 0 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(117.99996948242188 * murael, 216.40621948242188 * murael);
    louden.bezierCurveTo(86.99996948242188 * murael, 221.40621948242188 * murael, 74.99996948242188 * murael, 217.40621948242188 * murael, 60.999969482421875 * murael, 205.40621948242188 * murael);
    fill_path(louden, undefined, shinya[4], 3 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(114.99996948242188 * murael, 227.40621948242188 * murael);
    louden.bezierCurveTo(90.99996948242188 * murael, 233.40621948242188 * murael, 66.99996948242188 * murael, 228.40621948242188 * murael, 43.999969482421875 * murael, 225.40621948242188 * murael);
    fill_path(louden, undefined, shinya[4], 3 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(110.99996948242188 * murael, 236.40621948242188 * murael);
    louden.bezierCurveTo(94.99996948242188 * murael, 244.40621948242188 * murael, 79.99996948242188 * murael, 249.40621948242188 * murael, 60.999969482421875 * murael, 249.40621948242188 * murael);
    fill_path(louden, undefined, shinya[4], 3 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(111.99996948242188 * murael, 206.29513549804688 * murael);
    louden.bezierCurveTo(91.99996948242188 * murael, 206.29513549804688 * murael, 87.99996948242188 * murael, 201.29513549804688 * murael, 79.99996948242188 * murael, 192.29513549804688 * murael);
    fill_path(louden, undefined, shinya[4], 3 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(109.99996948242188 * murael, 249.18402099609375 * murael);
    louden.bezierCurveTo(97.99996948242188 * murael, 263.18402099609375 * murael, 85.99996948242188 * murael, 271.18402099609375 * murael, 65.99996948242188 * murael, 277.18402099609375 * murael);
    fill_path(louden, undefined, shinya[4], 3 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(105.99996948242188 * murael, 192.18402099609375 * murael);
    louden.bezierCurveTo(99.49996948242188 * murael, 197.68402099609375 * murael, 99.49996948242188 * murael, 197.68402099609375 * murael, 92.99996948242188 * murael, 203.18402099609375 * murael);
    louden.bezierCurveTo(95.99996948242188 * murael, 213.18402099609375 * murael, 95.99996948242188 * murael, 215.18402099609375 * murael, 89.99996948242188 * murael, 219.18402099609375 * murael);
    louden.bezierCurveTo(91.99996948242188 * murael, 223.18402099609375 * murael, 91.99996948242188 * murael, 226.18402099609375 * murael, 87.99996948242188 * murael, 230.18402099609375 * murael);
    louden.bezierCurveTo(89.99996948242188 * murael, 234.18402099609375 * murael, 91.99996948242188 * murael, 237.18402099609375 * murael, 90.99996948242188 * murael, 244.18402099609375 * murael);
    louden.bezierCurveTo(96.99996948242188 * murael, 252.18402099609375 * murael, 96.99996948242188 * murael, 256.18402099609375 * murael, 95.99996948242188 * murael, 262.18402099609375 * murael);
    louden.bezierCurveTo(106.49996948242188 * murael, 264.18402099609375 * murael, 106.49996948242188 * murael, 264.18402099609375 * murael, 116.99996948242188 * murael, 266.18402099609375 * murael);
    fill_path(louden, undefined, shinya[4], 3 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(104.99996948242188 * murael, 183.29513549804688 * murael);
    louden.bezierCurveTo(99.99996948242188 * murael, 193.29513549804688 * murael, 93.99996948242188 * murael, 195.29513549804688 * murael, 89.99996948242188 * murael, 201.29513549804688 * murael);
    louden.bezierCurveTo(86.99996948242188 * murael, 212.29513549804688 * murael, 85.99996948242188 * murael, 214.29513549804688 * murael, 81.99996948242188 * murael, 215.29513549804688 * murael);
    louden.bezierCurveTo(83.99996948242188 * murael, 223.29513549804688 * murael, 83.99996948242188 * murael, 227.29513549804688 * murael, 79.99996948242188 * murael, 230.29513549804688 * murael);
    louden.bezierCurveTo(83.99996948242188 * murael, 235.29513549804688 * murael, 84.99996948242188 * murael, 240.29513549804688 * murael, 79.99996948242188 * murael, 246.29513549804688 * murael);
    louden.bezierCurveTo(86.99996948242188 * murael, 251.29513549804688 * murael, 91.99996948242188 * murael, 256.2951354980469 * murael, 89.99996948242188 * murael, 266.2951354980469 * murael);
    louden.bezierCurveTo(102.99996948242188 * murael, 269.2951354980469 * murael, 102.99996948242188 * murael, 269.2951354980469 * murael, 115.99996948242188 * murael, 272.2951354980469 * murael);
    fill_path(louden, undefined, shinya[4], 3 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(107.99996948242188 * murael, 177.85067749023438 * murael);
    louden.bezierCurveTo(95.99996948242188 * murael, 187.35067749023438 * murael, 95.99996948242188 * murael, 187.35067749023438 * murael, 83.99996948242188 * murael, 196.85067749023438 * murael);
    louden.bezierCurveTo(82.99996948242188 * murael, 203.85067749023438 * murael, 80.99996948242188 * murael, 209.85067749023438 * murael, 72.99996948242188 * murael, 210.85067749023438 * murael);
    louden.bezierCurveTo(73.99996948242188 * murael, 220.85067749023438 * murael, 73.99996948242188 * murael, 221.85067749023438 * murael, 66.99996948242188 * murael, 227.85067749023438 * murael);
    louden.bezierCurveTo(71.99996948242188 * murael, 235.85067749023438 * murael, 73.99996948242188 * murael, 239.85067749023438 * murael, 71.99996948242188 * murael, 247.85067749023438 * murael);
    louden.bezierCurveTo(80.99996948242188 * murael, 257.8506774902344 * murael, 81.99996948242188 * murael, 263.8506774902344 * murael, 77.99996948242188 * murael, 271.8506774902344 * murael);
    louden.bezierCurveTo(95.49996948242188 * murael, 272.8506774902344 * murael, 95.49996948242188 * murael, 272.8506774902344 * murael, 112.99996948242188 * murael, 273.8506774902344 * murael);
    fill_path(louden, undefined, shinya[4], 3 * murael);
    louden.restore();
  } else {
    if (jermani == 2) {
      louden.save();
      louden.translate(130 * murael, 35 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(170.99996948242188 * murael, 133.85067749023438 * murael);
      louden.bezierCurveTo(195.99996948242188 * murael, 129.85067749023438 * murael, 196.99996948242188 * murael, 111.85067749023438 * murael, 200.99996948242188 * murael, 88.85067749023438 * murael);
      fill_path(louden, undefined, shinya[4], 3 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(169.99996948242188 * murael, 143.85067749023438 * murael);
      louden.bezierCurveTo(189.99996948242188 * murael, 145.85067749023438 * murael, 207.99996948242188 * murael, 126.85067749023438 * murael, 222.99996948242188 * murael, 100.85067749023438 * murael);
      fill_path(louden, undefined, shinya[4], 3 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(170.99996948242188 * murael, 157.85067749023438 * murael);
      louden.bezierCurveTo(193.99996948242188 * murael, 160.85067749023438 * murael, 210.99996948242188 * murael, 151.85067749023438 * murael, 232.99996948242188 * murael, 139.85067749023438 * murael);
      fill_path(louden, undefined, shinya[4], 3 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(169.99996948242188 * murael, 168.85067749023438 * murael);
      louden.bezierCurveTo(192.99996948242188 * murael, 175.85067749023438 * murael, 203.99996948242188 * murael, 177.85067749023438 * murael, 245.99996948242188 * murael, 168.85067749023438 * murael);
      fill_path(louden, undefined, shinya[4], 3 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(167.99996948242188 * murael, 168.85067749023438 * murael);
      louden.bezierCurveTo(183.99996948242188 * murael, 189.85067749023438 * murael, 191.99996948242188 * murael, 193.85067749023438 * murael, 220.99996948242188 * murael, 196.85067749023438 * murael);
      fill_path(louden, undefined, shinya[4], 3 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(176.99996948242188 * murael, 117.85067749023438 * murael);
      louden.bezierCurveTo(181.99996948242188 * murael, 120.85067749023438 * murael, 181.99996948242188 * murael, 120.85067749023438 * murael, 186.99996948242188 * murael, 123.85067749023438 * murael);
      louden.bezierCurveTo(183.99996948242188 * murael, 137.85067749023438 * murael, 185.99996948242188 * murael, 136.85067749023438 * murael, 190.99996948242188 * murael, 136.85067749023438 * murael);
      louden.bezierCurveTo(186.99996948242188 * murael, 147.85067749023438 * murael, 189.99996948242188 * murael, 152.85067749023438 * murael, 193.99996948242188 * murael, 155.85067749023438 * murael);
      louden.bezierCurveTo(187.99996948242188 * murael, 165.85067749023438 * murael, 190.99996948242188 * murael, 169.85067749023438 * murael, 190.99996948242188 * murael, 172.85067749023438 * murael);
      louden.bezierCurveTo(186.99996948242188 * murael, 183.85067749023438 * murael, 186.99996948242188 * murael, 185.85067749023438 * murael, 189.99996948242188 * murael, 188.85067749023438 * murael);
      louden.bezierCurveTo(182.49996948242188 * murael, 195.35067749023438 * murael, 182.49996948242188 * murael, 195.35067749023438 * murael, 174.99996948242188 * murael, 201.85067749023438 * murael);
      fill_path(louden, undefined, shinya[4], 3 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(176.99996948242188 * murael, 112.18402099609375 * murael);
      louden.bezierCurveTo(183.99996948242188 * murael, 119.18402099609375 * murael, 186.99996948242188 * murael, 117.18402099609375 * murael, 192.99996948242188 * murael, 116.18402099609375 * murael);
      louden.bezierCurveTo(191.99996948242188 * murael, 126.18402099609375 * murael, 193.99996948242188 * murael, 130.18402099609375 * murael, 199.99996948242188 * murael, 130.18402099609375 * murael);
      louden.bezierCurveTo(194.99996948242188 * murael, 145.18402099609375 * murael, 197.99996948242188 * murael, 147.18402099609375 * murael, 201.99996948242188 * murael, 153.18402099609375 * murael);
      louden.bezierCurveTo(196.99996948242188 * murael, 164.18402099609375 * murael, 197.99996948242188 * murael, 169.18402099609375 * murael, 201.99996948242188 * murael, 174.18402099609375 * murael);
      louden.bezierCurveTo(194.99996948242188 * murael, 184.18402099609375 * murael, 196.99996948242188 * murael, 187.18402099609375 * murael, 200.99996948242188 * murael, 193.18402099609375 * murael);
      louden.bezierCurveTo(185.99996948242188 * murael, 195.18402099609375 * murael, 181.99996948242188 * murael, 201.18402099609375 * murael, 174.99996948242188 * murael, 210.18402099609375 * murael);
      fill_path(louden, undefined, shinya[4], 3 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(176.99996948242188 * murael, 101.29513549804688 * murael);
      louden.bezierCurveTo(181.99996948242188 * murael, 108.29513549804688 * murael, 189.99996948242188 * murael, 110.29513549804688 * murael, 195.99996948242188 * murael, 107.29513549804688 * murael);
      louden.bezierCurveTo(197.99996948242188 * murael, 121.29513549804688 * murael, 200.99996948242188 * murael, 122.29513549804688 * murael, 206.99996948242188 * murael, 122.29513549804688 * murael);
      louden.bezierCurveTo(201.99996948242188 * murael, 138.29513549804688 * murael, 204.99996948242188 * murael, 142.29513549804688 * murael, 211.99996948242188 * murael, 148.29513549804688 * murael);
      louden.bezierCurveTo(201.99996948242188 * murael, 156.29513549804688 * murael, 205.99996948242188 * murael, 167.29513549804688 * murael, 213.99996948242188 * murael, 173.29513549804688 * murael);
      louden.bezierCurveTo(204.99996948242188 * murael, 181.29513549804688 * murael, 204.99996948242188 * murael, 187.29513549804688 * murael, 205.99996948242188 * murael, 193.29513549804688 * murael);
      louden.bezierCurveTo(190.99996948242188 * murael, 198.29513549804688 * murael, 181.99996948242188 * murael, 205.29513549804688 * murael, 174.99996948242188 * murael, 214.29513549804688 * murael);
      fill_path(louden, undefined, shinya[4], 3 * murael);
      louden.restore();
    }
  }
  louden.translate(briellah.width / 2, briellah.height / 2);
  if (!jermani) {
    louden.globalAlpha = .5;
    round_rect(louden, -ademir, -verania, shamarr, sybile + cadem, dajanay);
    fill_path(louden, shinya[0]);
    if (keeron) {
      louden.rotate(Math.PI);
    }
    louden.globalAlpha = 1;
    round_rect(louden, -ademir, -verania, shamarr, sybile, dajanay);
    fill_path(louden, shinya[1], shinya[2], 4);
    louden.globalAlpha = 1;
    round_rect(louden, -ademir + 35 * murael, -verania + 20 * murael, shamarr - 50 * murael, sybile - 50 * murael, dajanay - 10 * murael);
    fill_path(louden, shinya[3]);
  }
  if (jermani == 3) {
    louden.translate(-briellah.width / 2, -briellah.height / 2);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(121 * murael, 190 * murael);
    louden.bezierCurveTo(129 * murael, 186 * murael, 137 * murael, 183 * murael, 135 * murael, 163 * murael);
    louden.bezierCurveTo(131 * murael, 135 * murael, 153 * murael, 127 * murael, 177 * murael, 124 * murael);
    louden.bezierCurveTo(198 * murael, 120 * murael, 208 * murael, 122 * murael, 226 * murael, 128 * murael);
    louden.bezierCurveTo(261 * murael, 112 * murael, 271 * murael, 126 * murael, 287 * murael, 147 * murael);
    louden.bezierCurveTo(310 * murael, 163 * murael, 304 * murael, 183 * murael, 283 * murael, 196 * murael);
    louden.bezierCurveTo(296 * murael, 249 * murael, 278 * murael, 262 * murael, 253 * murael, 263 * murael);
    louden.bezierCurveTo(210 * murael, 264 * murael, 188 * murael, 252 * murael, 177 * murael, 234 * murael);
    louden.bezierCurveTo(133 * murael, 242 * murael, 123 * murael, 241 * murael, 115 * murael, 225 * murael);
    louden.bezierCurveTo(109 * murael, 206 * murael, 115 * murael, 193 * murael, 121 * murael, 190 * murael);
    louden.closePath();
    fill_path(louden, shinya[4]);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(219 * murael, 144 * murael);
    louden.bezierCurveTo(251 * murael, 121 * murael, 277 * murael, 136 * murael, 276 * murael, 159 * murael);
    louden.bezierCurveTo(276 * murael, 176 * murael, 273 * murael, 191 * murael, 242 * murael, 193 * murael);
    louden.bezierCurveTo(226 * murael, 228 * murael, 155 * murael, 219 * murael, 150 * murael, 183 * murael);
    louden.bezierCurveTo(142 * murael, 144 * murael, 174 * murael, 127 * murael, 219 * murael, 144 * murael);
    louden.closePath();
    fill_path(louden, shinya[5]);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(123 * murael, 214 * murael);
    louden.bezierCurveTo(119 * murael, 198 * murael, 129 * murael, 189 * murael, 146 * murael, 194 * murael);
    louden.bezierCurveTo(158 * murael, 201 * murael, 165 * murael, 218 * murael, 147 * murael, 226 * murael);
    louden.bezierCurveTo(135 * murael, 230 * murael, 125 * murael, 222 * murael, 123 * murael, 214 * murael);
    louden.closePath();
    fill_path(louden, shinya[5]);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(257 * murael, 199 * murael);
    louden.bezierCurveTo(264 * murael, 199 * murael, 275 * murael, 213 * murael, 261 * murael, 220 * murael);
    louden.bezierCurveTo(246 * murael, 225 * murael, 235 * murael, 200 * murael, 257 * murael, 199 * murael);
    louden.closePath();
    fill_path(louden, shinya[5]);
    louden.translate(-5 * murael, 55 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(186 * murael, 123 * murael);
    louden.bezierCurveTo(198 * murael, 115 * murael, 219 * murael, 110 * murael, 219 * murael, 123 * murael);
    louden.bezierCurveTo(216 * murael, 135 * murael, 171 * murael, 143 * murael, 186 * murael, 123 * murael);
    louden.closePath();
    fill_path(louden, shinya[5]);
    louden.translate(5 * murael, -55 * murael);
    louden.translate(-5 * murael, 15 * murael);
    louden.beginPath();
    louden.lineCap = "round";
    louden.lineJoin = "round";
    louden.moveTo(171 * murael, 241 * murael);
    louden.bezierCurveTo(189 * murael, 234 * murael, 200 * murael, 248 * murael, 189 * murael, 254 * murael);
    louden.bezierCurveTo(179 * murael, 260 * murael, 158 * murael, 246 * murael, 171 * murael, 241 * murael);
    louden.closePath();
    fill_path(louden, shinya[5]);
  } else {
    if (jermani == 4) {
      louden.translate(-briellah.width / 2, -briellah.height / 2);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(30 * murael, 167 * murael);
      louden.bezierCurveTo(47 * murael, 144 * murael, 64 * murael, 140 * murael, 80 * murael, 147 * murael);
      louden.bezierCurveTo(95 * murael, 154 * murael, 95 * murael, 159 * murael, 100 * murael, 179 * murael);
      louden.bezierCurveTo(105 * murael, 202 * murael, 95 * murael, 218 * murael, 69 * murael, 218 * murael);
      louden.bezierCurveTo(48 * murael, 236 * murael, 26 * murael, 223 * murael, 28 * murael, 213 * murael);
      louden.bezierCurveTo(28 * murael, 205 * murael, 29 * murael, 199 * murael, 32 * murael, 195 * murael);
      louden.bezierCurveTo(21 * murael, 183 * murael, 27 * murael, 173 * murael, 30 * murael, 167 * murael);
      louden.closePath();
      fill_path(louden, shinya[4]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(26 * murael, 145 * murael);
      louden.bezierCurveTo(32 * murael, 138 * murael, 37 * murael, 137 * murael, 40 * murael, 139 * murael);
      louden.bezierCurveTo(43 * murael, 140 * murael, 41 * murael, 150 * murael, 31 * murael, 159 * murael);
      louden.bezierCurveTo(23 * murael, 166 * murael, 17 * murael, 158 * murael, 26 * murael, 145 * murael);
      louden.closePath();
      fill_path(louden, shinya[4]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(13 * murael, 193 * murael);
      louden.bezierCurveTo(21 * murael, 187 * murael, 30 * murael, 190 * murael, 20 * murael, 202 * murael);
      louden.bezierCurveTo(13 * murael, 208 * murael, 7 * murael, 202 * murael, 13 * murael, 193 * murael);
      louden.closePath();
      fill_path(louden, shinya[4]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(121 * murael, 190 * murael);
      louden.bezierCurveTo(129 * murael, 186 * murael, 137 * murael, 183 * murael, 135 * murael, 163 * murael);
      louden.bezierCurveTo(131 * murael, 135 * murael, 153 * murael, 127 * murael, 177 * murael, 124 * murael);
      louden.bezierCurveTo(198 * murael, 120 * murael, 208 * murael, 122 * murael, 226 * murael, 128 * murael);
      louden.bezierCurveTo(261 * murael, 112 * murael, 271 * murael, 126 * murael, 287 * murael, 147 * murael);
      louden.bezierCurveTo(310 * murael, 163 * murael, 304 * murael, 183 * murael, 283 * murael, 196 * murael);
      louden.bezierCurveTo(296 * murael, 249 * murael, 278 * murael, 262 * murael, 253 * murael, 263 * murael);
      louden.bezierCurveTo(210 * murael, 264 * murael, 188 * murael, 252 * murael, 177 * murael, 234 * murael);
      louden.bezierCurveTo(133 * murael, 242 * murael, 123 * murael, 241 * murael, 115 * murael, 225 * murael);
      louden.bezierCurveTo(109 * murael, 206 * murael, 115 * murael, 193 * murael, 121 * murael, 190 * murael);
      louden.closePath();
      fill_path(louden, shinya[4]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(335 * murael, 196 * murael);
      louden.bezierCurveTo(312 * murael, 208 * murael, 300 * murael, 185 * murael, 309 * murael, 167 * murael);
      louden.bezierCurveTo(314 * murael, 141 * murael, 339 * murael, 127 * murael, 359 * murael, 144 * murael);
      louden.bezierCurveTo(363 * murael, 148 * murael, 364 * murael, 150 * murael, 364 * murael, 150 * murael);
      louden.bezierCurveTo(392 * murael, 143 * murael, 396 * murael, 183 * murael, 378 * murael, 204 * murael);
      louden.bezierCurveTo(367 * murael, 215 * murael, 339 * murael, 208 * murael, 335 * murael, 196 * murael);
      louden.closePath();
      fill_path(louden, shinya[4]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(349 * murael, 212 * murael);
      louden.bezierCurveTo(339 * murael, 216 * murael, 334 * murael, 208 * murael, 341 * murael, 203 * murael);
      louden.bezierCurveTo(353 * murael, 198 * murael, 361 * murael, 205 * murael, 349 * murael, 212 * murael);
      louden.closePath();
      fill_path(louden, shinya[4]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(46 * murael, 165 * murael);
      louden.bezierCurveTo(55 * murael, 148 * murael, 85 * murael, 157 * murael, 83 * murael, 175 * murael);
      louden.bezierCurveTo(99 * murael, 185 * murael, 89 * murael, 212 * murael, 66 * murael, 204 * murael);
      louden.bezierCurveTo(55 * murael, 212 * murael, 43 * murael, 212 * murael, 41 * murael, 202 * murael);
      louden.bezierCurveTo(39 * murael, 194 * murael, 42 * murael, 187 * murael, 49 * murael, 185 * murael);
      louden.bezierCurveTo(44 * murael, 175 * murael, 45 * murael, 172 * murael, 46 * murael, 165 * murael);
      louden.closePath();
      fill_path(louden, shinya[4]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(219 * murael, 144 * murael);
      louden.bezierCurveTo(251 * murael, 121 * murael, 277 * murael, 136 * murael, 276 * murael, 159 * murael);
      louden.bezierCurveTo(276 * murael, 176 * murael, 273 * murael, 191 * murael, 242 * murael, 193 * murael);
      louden.bezierCurveTo(226 * murael, 228 * murael, 155 * murael, 219 * murael, 150 * murael, 183 * murael);
      louden.bezierCurveTo(142 * murael, 144 * murael, 174 * murael, 127 * murael, 219 * murael, 144 * murael);
      louden.closePath();
      fill_path(louden, shinya[5]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(123 * murael, 214 * murael);
      louden.bezierCurveTo(119 * murael, 198 * murael, 129 * murael, 189 * murael, 146 * murael, 194 * murael);
      louden.bezierCurveTo(158 * murael, 201 * murael, 165 * murael, 218 * murael, 147 * murael, 226 * murael);
      louden.bezierCurveTo(135 * murael, 230 * murael, 125 * murael, 222 * murael, 123 * murael, 214 * murael);
      louden.closePath();
      fill_path(louden, shinya[5]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(257 * murael, 199 * murael);
      louden.bezierCurveTo(264 * murael, 199 * murael, 275 * murael, 213 * murael, 261 * murael, 220 * murael);
      louden.bezierCurveTo(246 * murael, 225 * murael, 235 * murael, 200 * murael, 257 * murael, 199 * murael);
      louden.closePath();
      fill_path(louden, shinya[5]);
      louden.translate(-5 * murael, 55 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(186 * murael, 123 * murael);
      louden.bezierCurveTo(198 * murael, 115 * murael, 219 * murael, 110 * murael, 219 * murael, 123 * murael);
      louden.bezierCurveTo(216 * murael, 135 * murael, 171 * murael, 143 * murael, 186 * murael, 123 * murael);
      louden.closePath();
      fill_path(louden, shinya[5]);
      louden.translate(5 * murael, -55 * murael);
      louden.translate(-5 * murael, 15 * murael);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(171 * murael, 241 * murael);
      louden.bezierCurveTo(189 * murael, 234 * murael, 200 * murael, 248 * murael, 189 * murael, 254 * murael);
      louden.bezierCurveTo(179 * murael, 260 * murael, 158 * murael, 246 * murael, 171 * murael, 241 * murael);
      louden.closePath();
      fill_path(louden, shinya[5]);
      louden.beginPath();
      louden.lineCap = "round";
      louden.lineJoin = "round";
      louden.moveTo(367 * murael, 164 * murael);
      louden.bezierCurveTo(380 * murael, 160 * murael, 391 * murael, 185 * murael, 371 * murael, 189 * murael);
      louden.bezierCurveTo(362 * murael, 192 * murael, 354 * murael, 191 * murael, 350 * murael, 185 * murael);
      louden.bezierCurveTo(326 * murael, 205 * murael, 314 * murael, 182 * murael, 316 * murael, 171 * murael);
      louden.bezierCurveTo(317 * murael, 150 * murael, 332 * murael, 143 * murael, 347 * murael, 147 * murael);
      louden.bezierCurveTo(361 * murael, 151 * murael, 366 * murael, 158 * murael, 367 * murael, 164 * murael);
      louden.closePath();
      fill_path(louden, shinya[4]);
    }
  }
  return briellah;
}
function create_music_button(meldia, ineke, malenda, keitric) {
  var sinay = document.createElement("canvas");
  var keambria = sinay.getContext("2d");
  sinay.width = 121 * meldia;
  sinay.height = 130 * meldia;
  keambria.translate(0, 20 * meldia);
  if (malenda == 1) {
    keambria.beginPath();
    keambria.lineCap = "round";
    keambria.lineJoin = "round";
    keambria.moveTo(6 * meldia, 23 * meldia);
    keambria.bezierCurveTo(6 * meldia, 46 * meldia, 6 * meldia, 46 * meldia, 6 * meldia, 69 * meldia);
    keambria.bezierCurveTo(21 * meldia, 69 * meldia, 21 * meldia, 69 * meldia, 36 * meldia, 69 * meldia);
    keambria.bezierCurveTo(45.5 * meldia, 78.5 * meldia, 45.5 * meldia, 78.5 * meldia, 55 * meldia, 88 * meldia);
    keambria.bezierCurveTo(55.5 * meldia, 45.5 * meldia, 55.5 * meldia, 45.5 * meldia, 56 * meldia, 3 * meldia);
    keambria.bezierCurveTo(47 * meldia, 14 * meldia, 47 * meldia, 14 * meldia, 38 * meldia, 25 * meldia);
    keambria.bezierCurveTo(23 * meldia, 25 * meldia, 23 * meldia, 25 * meldia, 6 * meldia, 23 * meldia);
    keambria.closePath();
    fill_path(keambria, undefined, ineke[3], 13 * meldia);
  }
  keambria.beginPath();
  keambria.lineCap = "round";
  keambria.lineJoin = "round";
  keambria.moveTo(6 * meldia, 23 * meldia);
  keambria.bezierCurveTo(6 * meldia, 46 * meldia, 6 * meldia, 46 * meldia, 6 * meldia, 69 * meldia);
  keambria.bezierCurveTo(21 * meldia, 69 * meldia, 21 * meldia, 69 * meldia, 36 * meldia, 69 * meldia);
  keambria.bezierCurveTo(45.5 * meldia, 78.5 * meldia, 45.5 * meldia, 78.5 * meldia, 55 * meldia, 88 * meldia);
  keambria.bezierCurveTo(55.5 * meldia, 45.5 * meldia, 55.5 * meldia, 45.5 * meldia, 56 * meldia, 3 * meldia);
  keambria.bezierCurveTo(47 * meldia, 14 * meldia, 47 * meldia, 14 * meldia, 38 * meldia, 25 * meldia);
  keambria.bezierCurveTo(23 * meldia, 25 * meldia, 23 * meldia, 25 * meldia, 6 * meldia, 23 * meldia);
  keambria.closePath();
  fill_path(keambria, ineke[1], ineke[2], 4 * meldia);
  if (keitric == 1) {
    keambria.translate(0, 5 * meldia);
    keambria.beginPath();
    keambria.lineCap = "round";
    keambria.lineJoin = "round";
    keambria.moveTo(67 * meldia, 30 * meldia);
    keambria.bezierCurveTo(73 * meldia, 47 * meldia, 69 * meldia, 45 * meldia, 67 * meldia, 58 * meldia);
    fill_path(keambria, undefined, ineke[0], 10 * meldia);
    keambria.translate(3, 0 * meldia);
    keambria.beginPath();
    keambria.lineCap = "round";
    keambria.lineJoin = "round";
    keambria.moveTo(70 * meldia, 17 * meldia);
    keambria.bezierCurveTo(83 * meldia, 45 * meldia, 76 * meldia, 55 * meldia, 70 * meldia, 69 * meldia);
    fill_path(keambria, undefined, ineke[0], 10 * meldia);
    keambria.translate(3, 0 * meldia);
    keambria.beginPath();
    keambria.lineCap = "round";
    keambria.lineJoin = "round";
    keambria.moveTo(76 * meldia, 8 * meldia);
    keambria.bezierCurveTo(88 * meldia, 31 * meldia, 89 * meldia, 55 * meldia, 76 * meldia, 79 * meldia);
    fill_path(keambria, undefined, ineke[0], 10 * meldia);
    if (malenda == 1) {
      keambria.translate(-6 * meldia, -5 * meldia);
      keambria.beginPath();
      keambria.lineCap = "round";
      keambria.lineJoin = "round";
      keambria.moveTo(67 * meldia, 30 * meldia);
      keambria.bezierCurveTo(73 * meldia, 47 * meldia, 69 * meldia, 45 * meldia, 67 * meldia, 58 * meldia);
      fill_path(keambria, undefined, ineke[3], 18 * meldia);
      keambria.translate(3, 0 * meldia);
      keambria.beginPath();
      keambria.lineCap = "round";
      keambria.lineJoin = "round";
      keambria.moveTo(70 * meldia, 17 * meldia);
      keambria.bezierCurveTo(83 * meldia, 45 * meldia, 76 * meldia, 55 * meldia, 70 * meldia, 69 * meldia);
      fill_path(keambria, undefined, ineke[3], 18 * meldia);
      keambria.translate(3, 0 * meldia);
      keambria.beginPath();
      keambria.lineCap = "round";
      keambria.lineJoin = "round";
      keambria.moveTo(76 * meldia, 8 * meldia);
      keambria.bezierCurveTo(88 * meldia, 31 * meldia, 89 * meldia, 55 * meldia, 76 * meldia, 79 * meldia);
      fill_path(keambria, undefined, ineke[3], 18 * meldia);
      keambria.translate(-6, 0 * meldia);
    } else {
      keambria.translate(-6 * meldia, -5 * meldia);
    }
    keambria.beginPath();
    keambria.lineCap = "round";
    keambria.lineJoin = "round";
    keambria.moveTo(67 * meldia, 30 * meldia);
    keambria.bezierCurveTo(73 * meldia, 47 * meldia, 69 * meldia, 45 * meldia, 67 * meldia, 58 * meldia);
    fill_path(keambria, undefined, ineke[2], 10 * meldia);
    keambria.translate(3, 0 * meldia);
    keambria.beginPath();
    keambria.lineCap = "round";
    keambria.lineJoin = "round";
    keambria.moveTo(70 * meldia, 17 * meldia);
    keambria.bezierCurveTo(83 * meldia, 45 * meldia, 76 * meldia, 55 * meldia, 70 * meldia, 69 * meldia);
    fill_path(keambria, undefined, ineke[2], 10 * meldia);
    keambria.translate(3, 0 * meldia);
    keambria.beginPath();
    keambria.lineCap = "round";
    keambria.lineJoin = "round";
    keambria.moveTo(76 * meldia, 8 * meldia);
    keambria.bezierCurveTo(88 * meldia, 31 * meldia, 89 * meldia, 55 * meldia, 76 * meldia, 79 * meldia);
    fill_path(keambria, undefined, ineke[2], 10 * meldia);
  } else {
    if (malenda == 1) {
      keambria.beginPath();
      keambria.lineCap = "round";
      keambria.lineJoin = "round";
      keambria.moveTo(108 * meldia, 27 * meldia);
      keambria.bezierCurveTo(94 * meldia, 45.5 * meldia, 94 * meldia, 45.5 * meldia, 80 * meldia, 64 * meldia);
      keambria.closePath();
      fill_path(keambria, undefined, ineke[3], 18 * meldia);
      keambria.beginPath();
      keambria.lineCap = "round";
      keambria.lineJoin = "round";
      keambria.moveTo(79 * meldia, 30 * meldia);
      keambria.bezierCurveTo(93 * meldia, 47 * meldia, 93 * meldia, 47 * meldia, 107 * meldia, 64 * meldia);
      keambria.closePath();
      fill_path(keambria, undefined, ineke[3], 18 * meldia);
    } else {
      keambria.translate(0, -5 * meldia);
      keambria.beginPath();
      keambria.lineCap = "round";
      keambria.lineJoin = "round";
      keambria.moveTo(108 * meldia, 27 * meldia);
      keambria.bezierCurveTo(94 * meldia, 45.5 * meldia, 94 * meldia, 45.5 * meldia, 80 * meldia, 64 * meldia);
      keambria.closePath();
      fill_path(keambria, undefined, ineke[0], 7 * meldia);
      keambria.beginPath();
      keambria.lineCap = "round";
      keambria.lineJoin = "round";
      keambria.moveTo(79 * meldia, 30 * meldia);
      keambria.bezierCurveTo(93 * meldia, 47 * meldia, 93 * meldia, 47 * meldia, 107 * meldia, 64 * meldia);
      keambria.closePath();
      fill_path(keambria, undefined, ineke[0], 7 * meldia);
      keambria.translate(0, 5 * meldia);
    }
    keambria.beginPath();
    keambria.lineCap = "round";
    keambria.lineJoin = "round";
    keambria.moveTo(108 * meldia, 27 * meldia);
    keambria.bezierCurveTo(94 * meldia, 45.5 * meldia, 94 * meldia, 45.5 * meldia, 80 * meldia, 64 * meldia);
    keambria.closePath();
    fill_path(keambria, undefined, ineke[2], 7 * meldia);
    keambria.beginPath();
    keambria.lineCap = "round";
    keambria.lineJoin = "round";
    keambria.moveTo(79 * meldia, 30 * meldia);
    keambria.bezierCurveTo(93 * meldia, 47 * meldia, 93 * meldia, 47 * meldia, 107 * meldia, 64 * meldia);
    keambria.closePath();
    fill_path(keambria, undefined, ineke[2], 7 * meldia);
  }
  return sinay;
}
function create_tree_snow(dustinjames, taye, nelline) {
  var wester = document.createElement("canvas"), heatherlee = wester.getContext("2d");
  heatherlee.rotate(Math.PI / 2);
}
function create_tree_branch(tasiyah, cartlin, luthien) {
  var rondrick = document.createElement("canvas");
  var seward = rondrick.getContext("2d");
  var ellay = tasiyah * 450;
  var kristyan = tasiyah * 145;
  var davinia = ellay / 2;
  var trawn = kristyan / 2;
  var praylynn = tasiyah * 10;
  var deosha = tasiyah * 20;
  var keica = tasiyah * 300;
  var avelynn = tasiyah * 30;
  var jakeem = tasiyah * 80;
  var dwanye = keica / 2;
  var robson = avelynn / 2;
  if (luthien) {
    var ellay = tasiyah * 145;
    var kristyan = tasiyah * 450;
    rondrick.width = ellay;
    rondrick.height = kristyan;
    seward.rotate(Math.PI / 2);
    seward.save();
    seward.globalAlpha = .5;
    round_rect(seward, 100 * tasiyah, -110 * tasiyah, keica, avelynn, praylynn);
    fill_path(seward, cartlin[0]);
    seward.translate(178 * tasiyah, -98 * tasiyah);
    round_rect(seward, -dwanye, -robson - 6 * tasiyah, 100 * tasiyah, 100 * tasiyah, praylynn);
    fill_path(seward, cartlin[0]);
    seward.translate(-50 * tasiyah, 5 * tasiyah);
    round_rect(seward, 220 * tasiyah, -15 * tasiyah, 90 * tasiyah, 90 * tasiyah, praylynn);
    fill_path(seward, cartlin[0]);
    seward.restore();
    seward.save();
    seward.globalAlpha = 1;
    seward.translate(250 * tasiyah, -63 * tasiyah);
    round_rect(seward, -dwanye - 20 * tasiyah, -robson, keica, avelynn, praylynn);
    fill_path(seward, cartlin[1], cartlin[2], 4);
    seward.translate(-70 * tasiyah, -40 * tasiyah);
    round_rect(seward, -dwanye - 20 * tasiyah, -robson, 100 * tasiyah, 100 * tasiyah, praylynn);
    fill_path(seward, cartlin[3], cartlin[4], 4);
    seward.translate(-70 * tasiyah, 15 * tasiyah);
    round_rect(seward, 220 * tasiyah, -22 * tasiyah, 90 * tasiyah, 90 * tasiyah, praylynn);
    fill_path(seward, cartlin[3], cartlin[4], 4);
    round_rect(seward, 230 * tasiyah, -12 * tasiyah, 55 * tasiyah, 55 * tasiyah, praylynn);
    fill_path(seward, cartlin[5]);
    seward.translate(-70 * tasiyah, 0);
    round_rect(seward, -15 * tasiyah, -2 * tasiyah, 60 * tasiyah, 60 * tasiyah, praylynn);
    fill_path(seward, cartlin[5]);
    seward.restore();
  } else {
    rondrick.width = ellay;
    rondrick.height = kristyan;
    seward.save();
    seward.globalAlpha = .5;
    seward.translate(davinia, trawn + 10 * tasiyah);
    round_rect(seward, -dwanye, -robson, keica, avelynn, praylynn);
    fill_path(seward, cartlin[0]);
    seward.translate(-65 * tasiyah, -25 * tasiyah);
    round_rect(seward, -dwanye, -robson - 6 * tasiyah, 100 * tasiyah, 100 * tasiyah, 15 * tasiyah);
    fill_path(seward, cartlin[0]);
    seward.translate(-35 * tasiyah, -5 * tasiyah);
    round_rect(seward, 220 * tasiyah, -15 * tasiyah, 90 * tasiyah, 90 * tasiyah, 15 * tasiyah);
    fill_path(seward, cartlin[0]);
    seward.restore();
    seward.save();
    seward.globalAlpha = 1;
    seward.translate(240 * tasiyah, 70 * tasiyah);
    round_rect(seward, -dwanye, -robson, keica, avelynn, praylynn);
    fill_path(seward, cartlin[1], cartlin[2], 4);
    seward.translate(-60 * tasiyah, -40 * tasiyah);
    round_rect(seward, -dwanye - 20 * tasiyah, -robson, 100 * tasiyah, 100 * tasiyah, 15 * tasiyah);
    fill_path(seward, cartlin[3], cartlin[4], 4);
    seward.translate(-55 * tasiyah, 10 * tasiyah);
    round_rect(seward, 220 * tasiyah, -22 * tasiyah, 90 * tasiyah, 90 * tasiyah, 15 * tasiyah);
    fill_path(seward, cartlin[3], cartlin[4], 4);
    round_rect(seward, 240 * tasiyah, -12 * tasiyah, 55 * tasiyah, 55 * tasiyah, 12 * tasiyah);
    fill_path(seward, cartlin[5]);
    seward.translate(45 * tasiyah, 0 * tasiyah);
    round_rect(seward, -145 * tasiyah, -2 * tasiyah, 60 * tasiyah, 60 * tasiyah, 12 * tasiyah);
    fill_path(seward, cartlin[5]);
    seward.restore();
  }
  return rondrick;
}
function create_apricot_forest(niurka, flois) {
  var adjua = document.createElement("canvas");
  var mayara = adjua.getContext("2d");
  var mianna = Math.max(flois.width, niurka.width);
  var karely = Math.max(flois.height, niurka.height);
  adjua.width = mianna;
  adjua.height = karely;
  mayara.drawImage(niurka, (mianna - niurka.width) / 2, (karely - niurka.height) / 2);
  mayara.drawImage(flois, (mianna - flois.width) / 2, (karely - flois.height) / 2);
  return adjua;
}
function create_pickaxe(messina, atreal, christon) {
  var dareen = document.createElement("canvas");
  var johniqua = dareen.getContext("2d");
  var elfred = messina * 105;
  var luisalberto = messina * 125;
  var davidjeremiah = messina * 4;
  var abdulbasit = elfred / 2;
  var mickalla = luisalberto / 2;
  var ariele = messina * 10;
  var eiliyah = messina * 5;
  var kwamane = messina * 10;
  var ansonia = messina * 110;
  var jalil = kwamane / 2;
  var nekita = ansonia / 2;
  dareen.width = elfred;
  dareen.height = luisalberto;
  johniqua.save();
  johniqua.globalAlpha = atreal ? .5 : 1;
  johniqua.translate(elfred / 2 + 8 * messina, luisalberto / 2 + eiliyah);
  round_rect(johniqua, -jalil, -nekita, kwamane, ansonia, ariele);
  atreal ? fill_path(johniqua, christon[0]) : fill_path(johniqua, christon[1]);
  johniqua.translate(-130 * messina + eiliyah, -128 * messina + eiliyah);
  johniqua.beginPath();
  johniqua.bezierCurveTo(159 * messina, 93 * messina, 156 * messina, 99 * messina, 154 * messina, 102 * messina);
  johniqua.bezierCurveTo(128 * messina, 92 * messina, 90 * messina, 93 * messina, 72 * messina, 96 * messina);
  johniqua.bezierCurveTo(68 * messina, 84 * messina, 143 * messina, 73 * messina, 162 * messina, 86 * messina);
  johniqua.closePath();
  fill_path(johniqua, christon[2]);
  johniqua.restore();
  johniqua.translate(elfred / 2 + 8, luisalberto / 2);
  johniqua.globalAlpha = 1;
  round_rect(johniqua, -jalil, -nekita, kwamane, ansonia, ariele);
  fill_path(johniqua, christon[3], christon[4], davidjeremiah);
  johniqua.translate(-130 * messina, -125 * messina);
  johniqua.beginPath();
  johniqua.bezierCurveTo(159 * messina, 93 * messina, 156 * messina, 99 * messina, 154 * messina, 102 * messina);
  johniqua.bezierCurveTo(128 * messina, 92 * messina, 90 * messina, 93 * messina, 72 * messina, 96 * messina);
  johniqua.bezierCurveTo(68 * messina, 84 * messina, 143 * messina, 73 * messina, 162 * messina, 86 * messina);
  johniqua.closePath();
  fill_path(johniqua, christon[5], christon[6], davidjeremiah);
  return dareen;
}
function create_sword_wood(sayat, suah, gabie) {
  var endiyah = document.createElement("canvas");
  var zaily = endiyah.getContext("2d");
  endiyah.width = 170 * sayat;
  endiyah.height = 469 * sayat;
  zaily.globalAlpha = suah ? .5 : 1;
  zaily.translate(20 * sayat, 20 * sayat);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(88 * sayat, 30 * sayat);
  zaily.bezierCurveTo(96 * sayat, 49.5 * sayat, 96 * sayat, 49.5 * sayat, 104 * sayat, 69 * sayat);
  zaily.bezierCurveTo(105.5 * sayat, 41.5 * sayat, 105.5 * sayat, 41.5 * sayat, 107 * sayat, 14 * sayat);
  zaily.bezierCurveTo(114 * sayat, 9.5 * sayat, 114 * sayat, 9.5 * sayat, 121 * sayat, 5 * sayat);
  zaily.bezierCurveTo(135.5 * sayat, 27.5 * sayat, 135.5 * sayat, 27.5 * sayat, 150 * sayat, 50 * sayat);
  zaily.bezierCurveTo(110.5 * sayat, 286 * sayat, 110.5 * sayat, 286 * sayat, 103 * sayat, 331 * sayat);
  zaily.bezierCurveTo(69.5 * sayat, 325 * sayat, 69.5 * sayat, 325 * sayat, 36 * sayat, 319 * sayat);
  zaily.bezierCurveTo(56.5 * sayat, 180 * sayat, 56.5 * sayat, 180 * sayat, 77 * sayat, 41 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[0]);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(118 * sayat, 31 * sayat);
  zaily.bezierCurveTo(125 * sayat, 43 * sayat, 125 * sayat, 43 * sayat, 132 * sayat, 55 * sayat);
  zaily.bezierCurveTo(109.5 * sayat, 185.5 * sayat, 109.5 * sayat, 185.5 * sayat, 87 * sayat, 316 * sayat);
  zaily.bezierCurveTo(72 * sayat, 313.5 * sayat, 72 * sayat, 313.5 * sayat, 57 * sayat, 311 * sayat);
  zaily.bezierCurveTo(76.5 * sayat, 181 * sayat, 76.5 * sayat, 181 * sayat, 96 * sayat, 51 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[0]);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(56 * sayat, 328 * sayat);
  zaily.bezierCurveTo(47 * sayat, 385.5 * sayat, 47 * sayat, 385.5 * sayat, 38 * sayat, 443 * sayat);
  zaily.bezierCurveTo(52 * sayat, 446 * sayat, 52 * sayat, 446 * sayat, 66 * sayat, 449 * sayat);
  zaily.bezierCurveTo(76.5 * sayat, 388.5 * sayat, 76.5 * sayat, 388.5 * sayat, 87 * sayat, 328 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[0]);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(74 * sayat, 302 * sayat);
  zaily.bezierCurveTo(104 * sayat, 316.5 * sayat, 104 * sayat, 316.5 * sayat, 134 * sayat, 331 * sayat);
  zaily.bezierCurveTo(133 * sayat, 341 * sayat, 133 * sayat, 341 * sayat, 132 * sayat, 351 * sayat);
  zaily.bezierCurveTo(69.5 * sayat, 342 * sayat, 69.5 * sayat, 342 * sayat, 7 * sayat, 333 * sayat);
  zaily.bezierCurveTo(8 * sayat, 323 * sayat, 8 * sayat, 323 * sayat, 9 * sayat, 313 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[0]);
  zaily.save();
  zaily.translate(51.5 * sayat, 440.5 * sayat);
  zaily.rotate(.2);
  round_rect(zaily, -20.5 * sayat, -18.5 * sayat, 41 * sayat, 37 * sayat, 10 * sayat);
  zaily.restore();
  fill_path(zaily, gabie[0]);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(73 * sayat, 316 * sayat);
  zaily.bezierCurveTo(90 * sayat, 324.5 * sayat, 90 * sayat, 324.5 * sayat, 107 * sayat, 333 * sayat);
  zaily.bezierCurveTo(70 * sayat, 327.5 * sayat, 70 * sayat, 327.5 * sayat, 33 * sayat, 322 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[0]);
  zaily.globalAlpha = 1;
  zaily.translate(-20 * sayat, -20 * sayat);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(88 * sayat, 30 * sayat);
  zaily.bezierCurveTo(96 * sayat, 49.5 * sayat, 96 * sayat, 49.5 * sayat, 104 * sayat, 69 * sayat);
  zaily.bezierCurveTo(105.5 * sayat, 41.5 * sayat, 105.5 * sayat, 41.5 * sayat, 107 * sayat, 14 * sayat);
  zaily.bezierCurveTo(114 * sayat, 9.5 * sayat, 114 * sayat, 9.5 * sayat, 121 * sayat, 5 * sayat);
  zaily.bezierCurveTo(135.5 * sayat, 27.5 * sayat, 135.5 * sayat, 27.5 * sayat, 150 * sayat, 50 * sayat);
  zaily.bezierCurveTo(110.5 * sayat, 286 * sayat, 110.5 * sayat, 286 * sayat, 103 * sayat, 331 * sayat);
  zaily.bezierCurveTo(69.5 * sayat, 325 * sayat, 69.5 * sayat, 325 * sayat, 36 * sayat, 319 * sayat);
  zaily.bezierCurveTo(56.5 * sayat, 180 * sayat, 56.5 * sayat, 180 * sayat, 77 * sayat, 41 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[1], gabie[2], 7 * sayat);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(118 * sayat, 31 * sayat);
  zaily.bezierCurveTo(125 * sayat, 43 * sayat, 125 * sayat, 43 * sayat, 132 * sayat, 55 * sayat);
  zaily.bezierCurveTo(109.5 * sayat, 185.5 * sayat, 109.5 * sayat, 185.5 * sayat, 87 * sayat, 316 * sayat);
  zaily.bezierCurveTo(72 * sayat, 313.5 * sayat, 72 * sayat, 313.5 * sayat, 57 * sayat, 311 * sayat);
  zaily.bezierCurveTo(76.5 * sayat, 181 * sayat, 76.5 * sayat, 181 * sayat, 96 * sayat, 51 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[3]);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(88 * sayat, 30 * sayat);
  zaily.bezierCurveTo(96 * sayat, 49.5 * sayat, 96 * sayat, 49.5 * sayat, 104 * sayat, 69 * sayat);
  zaily.bezierCurveTo(105.5 * sayat, 41.5 * sayat, 105.5 * sayat, 41.5 * sayat, 107 * sayat, 14 * sayat);
  zaily.bezierCurveTo(114 * sayat, 9.5 * sayat, 114 * sayat, 9.5 * sayat, 121 * sayat, 5 * sayat);
  zaily.bezierCurveTo(135.5 * sayat, 27.5 * sayat, 135.5 * sayat, 27.5 * sayat, 150 * sayat, 50 * sayat);
  zaily.bezierCurveTo(110.5 * sayat, 286 * sayat, 110.5 * sayat, 286 * sayat, 103 * sayat, 331 * sayat);
  zaily.bezierCurveTo(69.5 * sayat, 325 * sayat, 69.5 * sayat, 325 * sayat, 36 * sayat, 319 * sayat);
  zaily.bezierCurveTo(56.5 * sayat, 180 * sayat, 56.5 * sayat, 180 * sayat, 77 * sayat, 41 * sayat);
  zaily.closePath();
  fill_path(zaily, undefined, gabie[2], 7 * sayat);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(56 * sayat, 328 * sayat);
  zaily.bezierCurveTo(47 * sayat, 385.5 * sayat, 47 * sayat, 385.5 * sayat, 38 * sayat, 443 * sayat);
  zaily.bezierCurveTo(52 * sayat, 446 * sayat, 52 * sayat, 446 * sayat, 66 * sayat, 449 * sayat);
  zaily.bezierCurveTo(76.5 * sayat, 388.5 * sayat, 76.5 * sayat, 388.5 * sayat, 87 * sayat, 328 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[4], gabie[5], 7 * sayat);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(74 * sayat, 302 * sayat);
  zaily.bezierCurveTo(104 * sayat, 316.5 * sayat, 104 * sayat, 316.5 * sayat, 134 * sayat, 331 * sayat);
  zaily.bezierCurveTo(133 * sayat, 341 * sayat, 133 * sayat, 341 * sayat, 132 * sayat, 351 * sayat);
  zaily.bezierCurveTo(69.5 * sayat, 342 * sayat, 69.5 * sayat, 342 * sayat, 7 * sayat, 333 * sayat);
  zaily.bezierCurveTo(8 * sayat, 323 * sayat, 8 * sayat, 323 * sayat, 9 * sayat, 313 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[4], gabie[5], 7 * sayat);
  zaily.save();
  zaily.translate(51.5 * sayat, 440.5 * sayat);
  zaily.rotate(.2);
  round_rect(zaily, -20.5 * sayat, -18.5 * sayat, 41 * sayat, 37 * sayat, 10 * sayat);
  zaily.restore();
  fill_path(zaily, gabie[4], gabie[5], 7 * sayat);
  zaily.beginPath();
  zaily.lineCap = "round";
  zaily.lineJoin = "round";
  zaily.moveTo(73 * sayat, 316 * sayat);
  zaily.bezierCurveTo(90 * sayat, 324.5 * sayat, 90 * sayat, 324.5 * sayat, 107 * sayat, 333 * sayat);
  zaily.bezierCurveTo(70 * sayat, 327.5 * sayat, 70 * sayat, 327.5 * sayat, 33 * sayat, 322 * sayat);
  zaily.closePath();
  fill_path(zaily, gabie[6]);
  return endiyah;
}
function create_pirate_sword(biruk, viktorya, bernadene) {
  var elizzabeth = document.createElement("canvas");
  var evaeh = elizzabeth.getContext("2d");
  elizzabeth.width = 424 * biruk;
  elizzabeth.height = 788 * biruk;
  evaeh.translate(25 * biruk, 25 * biruk);
  evaeh.globalAlpha = viktorya ? .5 : 1;
  evaeh.save();
  evaeh.translate(193.5 * biruk, 602.5 * biruk);
  evaeh.rotate(-0.12);
  round_rect(evaeh, -26.5 * biruk, -97.5 * biruk, 53 * biruk, 195 * biruk, 25 * biruk);
  evaeh.restore();
  fill_path(evaeh, bernadene[0]);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(137 * biruk, 519 * biruk);
  evaeh.bezierCurveTo(182 * biruk, 513 * biruk, 182 * biruk, 513 * biruk, 227 * biruk, 507 * biruk);
  evaeh.bezierCurveTo(214 * biruk, 417 * biruk, 189 * biruk, 304 * biruk, 221 * biruk, 180 * biruk);
  evaeh.bezierCurveTo(191 * biruk, 126 * biruk, 192 * biruk, 105 * biruk, 198 * biruk, 64 * biruk);
  evaeh.bezierCurveTo(123 * biruk, 102 * biruk, 99 * biruk, 285 * biruk, 137 * biruk, 517 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[0]);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(175 * biruk, 119 * biruk);
  evaeh.bezierCurveTo(176 * biruk, 142 * biruk, 184 * biruk, 165 * biruk, 197 * biruk, 183 * biruk);
  evaeh.bezierCurveTo(167 * biruk, 325 * biruk, 191 * biruk, 405 * biruk, 202 * biruk, 502 * biruk);
  evaeh.bezierCurveTo(180 * biruk, 503 * biruk, 180 * biruk, 503 * biruk, 158 * biruk, 504 * biruk);
  evaeh.bezierCurveTo(135 * biruk, 396 * biruk, 134 * biruk, 185 * biruk, 175 * biruk, 119 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[0]);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(110 * biruk, 518 * biruk);
  evaeh.bezierCurveTo(111.5 * biruk, 533 * biruk, 111.5 * biruk, 533 * biruk, 113 * biruk, 548 * biruk);
  evaeh.bezierCurveTo(162.5 * biruk, 544 * biruk, 162.5 * biruk, 544 * biruk, 212 * biruk, 540 * biruk);
  evaeh.bezierCurveTo(312 * biruk, 535 * biruk, 281 * biruk, 665 * biruk, 225 * biruk, 665 * biruk);
  evaeh.bezierCurveTo(227 * biruk, 686.5 * biruk, 227 * biruk, 686.5 * biruk, 229 * biruk, 708 * biruk);
  evaeh.bezierCurveTo(343 * biruk, 684 * biruk, 354 * biruk, 496 * biruk, 222 * biruk, 498 * biruk);
  evaeh.bezierCurveTo(165.5 * biruk, 503 * biruk, 165.5 * biruk, 503 * biruk, 109 * biruk, 508 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[0]);
  circle(evaeh, 204 * biruk, 693 * biruk, 36.013886210738214 * biruk);
  fill_path(evaeh, bernadene[0]);
  circle(evaeh, 105 * biruk, 518 * biruk, 30 * biruk);
  fill_path(evaeh, bernadene[0]);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(171 * biruk, 535 * biruk);
  evaeh.bezierCurveTo(139.5 * biruk, 537.5 * biruk, 139.5 * biruk, 537.5 * biruk, 108 * biruk, 540 * biruk);
  evaeh.bezierCurveTo(110 * biruk, 527.5 * biruk, 110 * biruk, 527.5 * biruk, 112 * biruk, 515 * biruk);
  evaeh.bezierCurveTo(148 * biruk, 513 * biruk, 148 * biruk, 513 * biruk, 184 * biruk, 511 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[0]);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(244 * biruk, 669 * biruk);
  evaeh.bezierCurveTo(248.5 * biruk, 680 * biruk, 248.5 * biruk, 680 * biruk, 253 * biruk, 691 * biruk);
  evaeh.bezierCurveTo(239.5 * biruk, 697 * biruk, 239.5 * biruk, 697 * biruk, 226 * biruk, 703 * biruk);
  evaeh.bezierCurveTo(223 * biruk, 691.5 * biruk, 223 * biruk, 691.5 * biruk, 220 * biruk, 680 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[0]);
  evaeh.translate(-25 * biruk, -25 * biruk);
  evaeh.globalAlpha = 1;
  evaeh.save();
  evaeh.translate(193.5 * biruk, 602.5 * biruk);
  evaeh.rotate(-0.12);
  round_rect(evaeh, -26.5 * biruk, -97.5 * biruk, 53 * biruk, 195 * biruk, 25 * biruk);
  evaeh.restore();
  fill_path(evaeh, bernadene[1], bernadene[2], 16 * biruk);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(137 * biruk, 519 * biruk);
  evaeh.bezierCurveTo(182 * biruk, 513 * biruk, 182 * biruk, 513 * biruk, 227 * biruk, 507 * biruk);
  evaeh.bezierCurveTo(214 * biruk, 417 * biruk, 189 * biruk, 304 * biruk, 221 * biruk, 180 * biruk);
  evaeh.bezierCurveTo(191 * biruk, 126 * biruk, 192 * biruk, 105 * biruk, 198 * biruk, 64 * biruk);
  evaeh.bezierCurveTo(123 * biruk, 102 * biruk, 99 * biruk, 285 * biruk, 137 * biruk, 517 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[3], bernadene[4], 16 * biruk);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(175 * biruk, 119 * biruk);
  evaeh.bezierCurveTo(176 * biruk, 142 * biruk, 184 * biruk, 165 * biruk, 197 * biruk, 183 * biruk);
  evaeh.bezierCurveTo(167 * biruk, 325 * biruk, 191 * biruk, 405 * biruk, 202 * biruk, 502 * biruk);
  evaeh.bezierCurveTo(180 * biruk, 503 * biruk, 180 * biruk, 503 * biruk, 158 * biruk, 504 * biruk);
  evaeh.bezierCurveTo(135 * biruk, 396 * biruk, 134 * biruk, 185 * biruk, 175 * biruk, 119 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[5]);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(110 * biruk, 518 * biruk);
  evaeh.bezierCurveTo(111.5 * biruk, 533 * biruk, 111.5 * biruk, 533 * biruk, 113 * biruk, 548 * biruk);
  evaeh.bezierCurveTo(162.5 * biruk, 544 * biruk, 162.5 * biruk, 544 * biruk, 212 * biruk, 540 * biruk);
  evaeh.bezierCurveTo(312 * biruk, 535 * biruk, 281 * biruk, 665 * biruk, 225 * biruk, 665 * biruk);
  evaeh.bezierCurveTo(227 * biruk, 686.5 * biruk, 227 * biruk, 686.5 * biruk, 229 * biruk, 708 * biruk);
  evaeh.bezierCurveTo(343 * biruk, 684 * biruk, 354 * biruk, 496 * biruk, 222 * biruk, 498 * biruk);
  evaeh.bezierCurveTo(165.5 * biruk, 503 * biruk, 165.5 * biruk, 503 * biruk, 109 * biruk, 508 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[6], bernadene[4], 16 * biruk);
  circle(evaeh, 204 * biruk, 693 * biruk, 36.013886210738214 * biruk);
  fill_path(evaeh, bernadene[6], bernadene[4], 16 * biruk);
  circle(evaeh, 105 * biruk, 518 * biruk, 30 * biruk);
  fill_path(evaeh, bernadene[6], bernadene[4], 16 * biruk);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(171 * biruk, 535 * biruk);
  evaeh.bezierCurveTo(139.5 * biruk, 537.5 * biruk, 139.5 * biruk, 537.5 * biruk, 108 * biruk, 540 * biruk);
  evaeh.bezierCurveTo(110 * biruk, 527.5 * biruk, 110 * biruk, 527.5 * biruk, 112 * biruk, 515 * biruk);
  evaeh.bezierCurveTo(148 * biruk, 513 * biruk, 148 * biruk, 513 * biruk, 184 * biruk, 511 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[6]);
  evaeh.beginPath();
  evaeh.lineCap = "round";
  evaeh.lineJoin = "round";
  evaeh.moveTo(244 * biruk, 669 * biruk);
  evaeh.bezierCurveTo(248.5 * biruk, 680 * biruk, 248.5 * biruk, 680 * biruk, 253 * biruk, 691 * biruk);
  evaeh.bezierCurveTo(239.5 * biruk, 697 * biruk, 239.5 * biruk, 697 * biruk, 226 * biruk, 703 * biruk);
  evaeh.bezierCurveTo(223 * biruk, 691.5 * biruk, 223 * biruk, 691.5 * biruk, 220 * biruk, 680 * biruk);
  evaeh.closePath();
  fill_path(evaeh, bernadene[6]);
  circle(evaeh, 204 * biruk, 693 * biruk, 17.029386365926403 * biruk);
  fill_path(evaeh, bernadene[7]);
  circle(evaeh, 106 * biruk, 518 * biruk, 12 * biruk);
  fill_path(evaeh, bernadene[7]);
  return elizzabeth;
}
function create_sword(jennea, wavie, voda) {
  var arti = document.createElement("canvas");
  var mearl = arti.getContext("2d");
  arti.width = 100 * jennea;
  arti.height = 250 * jennea;
  mearl.translate(-135 * jennea, -75 * jennea);
  mearl.globalAlpha = wavie ? .8 : 1;
  mearl.beginPath();
  mearl.lineCap = "round";
  mearl.lineJoin = "round";
  mearl.moveTo(178.5 * jennea, 238.03125 * jennea);
  mearl.bezierCurveTo(177 * jennea, 175.03125 * jennea, 177 * jennea, 175.03125 * jennea, 175.5 * jennea, 112.03125 * jennea);
  mearl.bezierCurveTo(184.5 * jennea, 100.53125 * jennea, 184.5 * jennea, 100.53125 * jennea, 193.5 * jennea, 89.03125 * jennea);
  mearl.bezierCurveTo(202 * jennea, 100.03125 * jennea, 202 * jennea, 100.03125 * jennea, 210.5 * jennea, 111.03125 * jennea);
  mearl.bezierCurveTo(209.5 * jennea, 174.03125 * jennea, 209.5 * jennea, 174.03125 * jennea, 208.5 * jennea, 237.03125 * jennea);
  mearl.closePath();
  fill_path(mearl, voda[0]);
  mearl.beginPath();
  mearl.lineCap = "round";
  mearl.lineJoin = "round";
  mearl.moveTo(155.5 * jennea, 239.03125 * jennea);
  mearl.bezierCurveTo(194 * jennea, 238.53125 * jennea, 194 * jennea, 238.53125 * jennea, 232.5 * jennea, 238.03125 * jennea);
  mearl.bezierCurveTo(232.5 * jennea, 243.03125 * jennea, 232.5 * jennea, 243.03125 * jennea, 232.5 * jennea, 248.03125 * jennea);
  mearl.bezierCurveTo(194 * jennea, 248.53125 * jennea, 194 * jennea, 248.53125 * jennea, 155.5 * jennea, 249.03125 * jennea);
  mearl.closePath();
  fill_path(mearl, voda[0]);
  circle(mearl, 160.5 * jennea, 243.03125 * jennea, 7 * jennea);
  fill_path(mearl, voda[0]);
  circle(mearl, 227.5 * jennea, 242.03125 * jennea, 7 * jennea);
  fill_path(mearl, voda[0]);
  mearl.beginPath();
  mearl.lineCap = "round";
  mearl.lineJoin = "round";
  mearl.moveTo(185.5 * jennea, 253.03125 * jennea);
  mearl.bezierCurveTo(193.5 * jennea, 253.03125 * jennea, 193.5 * jennea, 253.03125 * jennea, 201.5 * jennea, 253.03125 * jennea);
  mearl.bezierCurveTo(201.5 * jennea, 276.03125 * jennea, 201.5 * jennea, 276.03125 * jennea, 201.5 * jennea, 299.03125 * jennea);
  mearl.bezierCurveTo(194.5 * jennea, 299.03125 * jennea, 194.5 * jennea, 299.03125 * jennea, 187.5 * jennea, 299.03125 * jennea);
  mearl.closePath();
  fill_path(mearl, voda[0], voda[0], 5 * jennea);
  circle(mearl, 194 * jennea, 298 * jennea, 9 * jennea);
  fill_path(mearl, voda[0], voda[0], 5 * jennea);
  mearl.globalAlpha = 1;
  mearl.translate(-10 * jennea, 10 * jennea);
  mearl.beginPath();
  mearl.lineCap = "round";
  mearl.lineJoin = "round";
  mearl.moveTo(178.5 * jennea, 238.03125 * jennea);
  mearl.bezierCurveTo(177 * jennea, 175.03125 * jennea, 177 * jennea, 175.03125 * jennea, 175.5 * jennea, 112.03125 * jennea);
  mearl.bezierCurveTo(184.5 * jennea, 100.53125 * jennea, 184.5 * jennea, 100.53125 * jennea, 193.5 * jennea, 89.03125 * jennea);
  mearl.bezierCurveTo(202 * jennea, 100.03125 * jennea, 202 * jennea, 100.03125 * jennea, 210.5 * jennea, 111.03125 * jennea);
  mearl.bezierCurveTo(209.5 * jennea, 174.03125 * jennea, 209.5 * jennea, 174.03125 * jennea, 208.5 * jennea, 237.03125 * jennea);
  mearl.closePath();
  fill_path(mearl, voda[3], voda[4], 5 * jennea);
  mearl.beginPath();
  mearl.lineCap = "round";
  mearl.lineJoin = "round";
  mearl.moveTo(155.5 * jennea, 239.03125 * jennea);
  mearl.bezierCurveTo(194 * jennea, 238.53125 * jennea, 194 * jennea, 238.53125 * jennea, 232.5 * jennea, 238.03125 * jennea);
  mearl.bezierCurveTo(232.5 * jennea, 243.03125 * jennea, 232.5 * jennea, 243.03125 * jennea, 232.5 * jennea, 248.03125 * jennea);
  mearl.bezierCurveTo(194 * jennea, 248.53125 * jennea, 194 * jennea, 248.53125 * jennea, 155.5 * jennea, 249.03125 * jennea);
  mearl.closePath();
  fill_path(mearl, voda[1], voda[2], 5 * jennea);
  circle(mearl, 160.5 * jennea, 243.03125 * jennea, 7 * jennea);
  fill_path(mearl, voda[1], voda[2], 5 * jennea);
  circle(mearl, 227.5 * jennea, 242.03125 * jennea, 7 * jennea);
  fill_path(mearl, voda[1], voda[2], 5 * jennea);
  mearl.beginPath();
  mearl.lineCap = "round";
  mearl.lineJoin = "round";
  mearl.moveTo(185.5 * jennea, 253.03125 * jennea);
  mearl.bezierCurveTo(193.5 * jennea, 253.03125 * jennea, 193.5 * jennea, 253.03125 * jennea, 201.5 * jennea, 253.03125 * jennea);
  mearl.bezierCurveTo(201.5 * jennea, 276.03125 * jennea, 201.5 * jennea, 276.03125 * jennea, 201.5 * jennea, 299.03125 * jennea);
  mearl.bezierCurveTo(194.5 * jennea, 299.03125 * jennea, 194.5 * jennea, 299.03125 * jennea, 187.5 * jennea, 299.03125 * jennea);
  mearl.closePath();
  fill_path(mearl, voda[1], voda[2], 7 * jennea);
  circle(mearl, 194 * jennea, 298 * jennea, 9 * jennea);
  fill_path(mearl, voda[1], voda[2], 7 * jennea);
  return arti;
}
function create_stonesword(regi, thea, marihelen) {
  var deshion = document.createElement("canvas");
  var arleigh = deshion.getContext("2d");
  deshion.width = 290 * regi;
  deshion.height = 525 * regi;
  arleigh.globalAlpha = thea ? .5 : 1;
  arleigh.translate(20 * regi, 20 * regi);
  arleigh.beginPath();
  arleigh.lineCap = "round";
  arleigh.lineJoin = "round";
  arleigh.moveTo(111 * regi, 351 * regi);
  arleigh.bezierCurveTo(129 * regi, 218 * regi, 129 * regi, 218 * regi, 147 * regi, 85 * regi);
  arleigh.bezierCurveTo(167 * regi, 65.5 * regi, 167 * regi, 65.5 * regi, 187 * regi, 46 * regi);
  arleigh.bezierCurveTo(201.5 * regi, 70.5 * regi, 201.5 * regi, 70.5 * regi, 216 * regi, 95 * regi);
  arleigh.bezierCurveTo(194.5 * regi, 227.5 * regi, 194.5 * regi, 227.5 * regi, 173 * regi, 360 * regi);
  arleigh.closePath();
  fill_path(arleigh, marihelen[0]);
  arleigh.save();
  arleigh.translate(131 * regi, 425.5 * regi);
  arleigh.rotate(.16);
  round_rect(arleigh, -14 * regi, -56.5 * regi, 28 * regi, 113 * regi, 8 * regi);
  arleigh.restore();
  fill_path(arleigh, marihelen[0]);
  circle(arleigh, 122 * regi, 480 * regi, 18.439088914585774 * regi);
  fill_path(arleigh, marihelen[0]);
  arleigh.beginPath();
  arleigh.lineCap = "round";
  arleigh.lineJoin = "round";
  arleigh.moveTo(79 * regi, 371 * regi);
  arleigh.bezierCurveTo(131 * regi, 373 * regi, 145 * regi, 378 * regi, 197 * regi, 388 * regi);
  arleigh.bezierCurveTo(205 * regi, 382.5 * regi, 205 * regi, 382.5 * regi, 213 * regi, 377 * regi);
  arleigh.bezierCurveTo(167 * regi, 352 * regi, 117 * regi, 345 * regi, 69 * regi, 355 * regi);
  arleigh.closePath();
  fill_path(arleigh, marihelen[0]);
  arleigh.globalAlpha = 1;
  arleigh.translate(-20 * regi, -20 * regi);
  arleigh.beginPath();
  arleigh.lineCap = "round";
  arleigh.lineJoin = "round";
  arleigh.moveTo(111 * regi, 351 * regi);
  arleigh.bezierCurveTo(129 * regi, 218 * regi, 129 * regi, 218 * regi, 147 * regi, 85 * regi);
  arleigh.bezierCurveTo(167 * regi, 65.5 * regi, 167 * regi, 65.5 * regi, 187 * regi, 46 * regi);
  arleigh.bezierCurveTo(201.5 * regi, 70.5 * regi, 201.5 * regi, 70.5 * regi, 216 * regi, 95 * regi);
  arleigh.bezierCurveTo(194.5 * regi, 227.5 * regi, 194.5 * regi, 227.5 * regi, 173 * regi, 360 * regi);
  arleigh.closePath();
  fill_path(arleigh, marihelen[1], marihelen[2], 12.5 * regi);
  arleigh.save();
  arleigh.translate(131 * regi, 425.5 * regi);
  arleigh.rotate(.16);
  round_rect(arleigh, -14 * regi, -56.5 * regi, 28 * regi, 113 * regi, 8 * regi);
  arleigh.restore();
  fill_path(arleigh, marihelen[4], marihelen[5], 12.5 * regi);
  circle(arleigh, 122 * regi, 480 * regi, 18.439088914585774 * regi);
  fill_path(arleigh, marihelen[4], marihelen[5], 12.5 * regi);
  arleigh.beginPath();
  arleigh.lineCap = "round";
  arleigh.lineJoin = "round";
  arleigh.moveTo(79 * regi, 371 * regi);
  arleigh.bezierCurveTo(131 * regi, 373 * regi, 145 * regi, 378 * regi, 197 * regi, 388 * regi);
  arleigh.bezierCurveTo(205 * regi, 382.5 * regi, 205 * regi, 382.5 * regi, 213 * regi, 377 * regi);
  arleigh.bezierCurveTo(167 * regi, 352 * regi, 117 * regi, 345 * regi, 69 * regi, 355 * regi);
  arleigh.closePath();
  fill_path(arleigh, marihelen[4], marihelen[5], 12.5 * regi);
  arleigh.beginPath();
  arleigh.lineCap = "round";
  arleigh.lineJoin = "round";
  arleigh.moveTo(128 * regi, 345 * regi);
  arleigh.bezierCurveTo(142 * regi, 345 * regi, 147 * regi, 346 * regi, 158 * regi, 349 * regi);
  arleigh.bezierCurveTo(177.5 * regi, 224.5 * regi, 177.5 * regi, 224.5 * regi, 197 * regi, 100 * regi);
  arleigh.bezierCurveTo(190.5 * regi, 84.5 * regi, 190.5 * regi, 84.5 * regi, 184 * regi, 69 * regi);
  arleigh.bezierCurveTo(173.5 * regi, 82 * regi, 173.5 * regi, 82 * regi, 163 * regi, 95 * regi);
  arleigh.closePath();
  fill_path(arleigh, marihelen[3]);
  return deshion;
}
function create_crab(shamarah, cristofer, orvid, janelis) {
  var kevious = document.createElement("canvas");
  var laven = kevious.getContext("2d");
  kevious.width = 283 * shamarah;
  kevious.height = 224 * shamarah;
  laven.translate(0, 15 * shamarah);
  laven.globalAlpha = .5;
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(93 * shamarah, 55 * shamarah);
  laven.bezierCurveTo(127 * shamarah, 27 * shamarah, 195 * shamarah, 42 * shamarah, 213 * shamarah, 78 * shamarah);
  laven.bezierCurveTo(254 * shamarah, 134 * shamarah, 226 * shamarah, 198 * shamarah, 153 * shamarah, 197 * shamarah);
  laven.bezierCurveTo(59 * shamarah, 204 * shamarah, 56 * shamarah, 158 * shamarah, 51 * shamarah, 115 * shamarah);
  laven.bezierCurveTo(50 * shamarah, 93 * shamarah, 81 * shamarah, 62 * shamarah, 90 * shamarah, 57 * shamarah);
  laven.closePath();
  fill_path(laven, orvid[0]);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(100 * shamarah, 33 * shamarah);
  laven.bezierCurveTo(85 * shamarah, 62 * shamarah, 102 * shamarah, 66 * shamarah, 110 * shamarah, 83 * shamarah);
  laven.closePath();
  fill_path(laven, orvid[0]);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(181 * shamarah, 32 * shamarah);
  laven.bezierCurveTo(196 * shamarah, 62 * shamarah, 181 * shamarah, 68 * shamarah, 178 * shamarah, 69 * shamarah);
  fill_path(laven, orvid[0]);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(225 * shamarah, 52 * shamarah);
  laven.bezierCurveTo(228 * shamarah, 78 * shamarah, 207 * shamarah, 77 * shamarah, 192 * shamarah, 88 * shamarah);
  fill_path(laven, orvid[0]);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(34 * shamarah, 134 * shamarah);
  laven.bezierCurveTo(46 * shamarah, 111 * shamarah, 57 * shamarah, 111 * shamarah, 79 * shamarah, 109 * shamarah);
  fill_path(laven, orvid[0]);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(249 * shamarah, 135 * shamarah);
  laven.bezierCurveTo(233 * shamarah, 107 * shamarah, 212 * shamarah, 112 * shamarah, 202 * shamarah, 115 * shamarah);
  fill_path(laven, orvid[0]);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(56 * shamarah, 50 * shamarah);
  laven.bezierCurveTo(56 * shamarah, 82 * shamarah, 73 * shamarah, 82 * shamarah, 93 * shamarah, 89 * shamarah);
  fill_path(laven, orvid[0]);
  laven.translate(0, -15 * shamarah);
  laven.globalAlpha = 1;
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(100 * shamarah, 33 * shamarah);
  laven.bezierCurveTo(85 * shamarah, 62 * shamarah, 102 * shamarah, 66 * shamarah, 110 * shamarah, 83 * shamarah);
  fill_path(laven, undefined, orvid[2], 40 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(181 * shamarah, 32 * shamarah);
  laven.bezierCurveTo(196 * shamarah, 62 * shamarah, 181 * shamarah, 68 * shamarah, 178 * shamarah, 69 * shamarah);
  fill_path(laven, undefined, orvid[2], 40 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(225 * shamarah, 52 * shamarah);
  laven.bezierCurveTo(228 * shamarah, 78 * shamarah, 207 * shamarah, 77 * shamarah, 192 * shamarah, 88 * shamarah);
  fill_path(laven, undefined, orvid[2], 40 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(34 * shamarah, 134 * shamarah);
  laven.bezierCurveTo(46 * shamarah, 111 * shamarah, 57 * shamarah, 111 * shamarah, 79 * shamarah, 109 * shamarah);
  fill_path(laven, undefined, orvid[2], 40 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(249 * shamarah, 135 * shamarah);
  laven.bezierCurveTo(233 * shamarah, 107 * shamarah, 212 * shamarah, 112 * shamarah, 202 * shamarah, 115 * shamarah);
  fill_path(laven, undefined, orvid[2], 40 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(56 * shamarah, 50 * shamarah);
  laven.bezierCurveTo(56 * shamarah, 82 * shamarah, 73 * shamarah, 82 * shamarah, 93 * shamarah, 89 * shamarah);
  fill_path(laven, undefined, orvid[2], 40 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(93 * shamarah, 55 * shamarah);
  laven.bezierCurveTo(127 * shamarah, 27 * shamarah, 195 * shamarah, 42 * shamarah, 213 * shamarah, 78 * shamarah);
  laven.bezierCurveTo(254 * shamarah, 134 * shamarah, 226 * shamarah, 198 * shamarah, 153 * shamarah, 197 * shamarah);
  laven.bezierCurveTo(59 * shamarah, 204 * shamarah, 56 * shamarah, 158 * shamarah, 51 * shamarah, 115 * shamarah);
  laven.bezierCurveTo(50 * shamarah, 93 * shamarah, 81 * shamarah, 62 * shamarah, 90 * shamarah, 57 * shamarah);
  laven.closePath();
  fill_path(laven, orvid[1], orvid[2], 10 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(100 * shamarah, 33 * shamarah);
  laven.bezierCurveTo(85 * shamarah, 62 * shamarah, 102 * shamarah, 66 * shamarah, 110 * shamarah, 83 * shamarah);
  fill_path(laven, undefined, orvid[1], 20 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(181 * shamarah, 32 * shamarah);
  laven.bezierCurveTo(196 * shamarah, 62 * shamarah, 181 * shamarah, 68 * shamarah, 178 * shamarah, 69 * shamarah);
  fill_path(laven, undefined, orvid[1], 20 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(225 * shamarah, 52 * shamarah);
  laven.bezierCurveTo(228 * shamarah, 78 * shamarah, 207 * shamarah, 77 * shamarah, 192 * shamarah, 88 * shamarah);
  fill_path(laven, undefined, orvid[1], 20 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(34 * shamarah, 134 * shamarah);
  laven.bezierCurveTo(46 * shamarah, 111 * shamarah, 57 * shamarah, 111 * shamarah, 79 * shamarah, 109 * shamarah);
  fill_path(laven, undefined, orvid[1], 20 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(249 * shamarah, 135 * shamarah);
  laven.bezierCurveTo(233 * shamarah, 107 * shamarah, 212 * shamarah, 112 * shamarah, 202 * shamarah, 115 * shamarah);
  fill_path(laven, undefined, orvid[1], 20 * shamarah);
  laven.beginPath();
  laven.lineCap = "round";
  laven.lineJoin = "round";
  laven.moveTo(56 * shamarah, 50 * shamarah);
  laven.bezierCurveTo(56 * shamarah, 82 * shamarah, 73 * shamarah, 82 * shamarah, 93 * shamarah, 89 * shamarah);
  fill_path(laven, undefined, orvid[1], 20 * shamarah);
  circle(laven, 101 * shamarah, 155 * shamarah, 20.591260281974 * shamarah);
  fill_path(laven, orvid[3]);
  circle(laven, 180 * shamarah, 155 * shamarah, 20.591260281974 * shamarah);
  fill_path(laven, orvid[3]);
  circle(laven, 95 * shamarah, 148 * shamarah, 7.211102550927978 * shamarah);
  fill_path(laven, orvid[4]);
  circle(laven, 173 * shamarah, 148 * shamarah, 7.211102550927978 * shamarah);
  fill_path(laven, orvid[4]);
  if (janelis === 1) {
    laven.beginPath();
    laven.lineCap = "round";
    laven.lineJoin = "round";
    laven.moveTo(191 * shamarah, 107 * shamarah);
    laven.bezierCurveTo(180 * shamarah, 104 * shamarah, 175 * shamarah, 101 * shamarah, 180 * shamarah, 95 * shamarah);
    laven.bezierCurveTo(180 * shamarah, 95 * shamarah, 181 * shamarah, 99 * shamarah, 188 * shamarah, 103 * shamarah);
    laven.bezierCurveTo(191 * shamarah, 101 * shamarah, 191 * shamarah, 95 * shamarah, 190 * shamarah, 91 * shamarah);
    laven.bezierCurveTo(190 * shamarah, 91 * shamarah, 196 * shamarah, 89 * shamarah, 195 * shamarah, 99 * shamarah);
    laven.closePath();
    fill_path(laven, orvid[2]);
    laven.beginPath();
    laven.lineCap = "round";
    laven.lineJoin = "round";
    laven.moveTo(206 * shamarah, 98 * shamarah);
    laven.bezierCurveTo(203 * shamarah, 95 * shamarah, 200 * shamarah, 93 * shamarah, 198 * shamarah, 101 * shamarah);
    laven.bezierCurveTo(194 * shamarah, 109 * shamarah, 193 * shamarah, 109 * shamarah, 196 * shamarah, 110 * shamarah);
    laven.bezierCurveTo(206 * shamarah, 115 * shamarah, 209 * shamarah, 114 * shamarah, 211 * shamarah, 111 * shamarah);
    laven.bezierCurveTo(211 * shamarah, 106 * shamarah, 208 * shamarah, 108 * shamarah, 203 * shamarah, 108 * shamarah);
    laven.bezierCurveTo(193 * shamarah, 107 * shamarah, 204 * shamarah, 101 * shamarah, 206 * shamarah, 99 * shamarah);
    laven.closePath();
    fill_path(laven, orvid[2]);
    laven.beginPath();
    laven.lineCap = "round";
    laven.lineJoin = "round";
    laven.moveTo(172 * shamarah, 111 * shamarah);
    laven.bezierCurveTo(172 * shamarah, 106 * shamarah, 174 * shamarah, 105 * shamarah, 185 * shamarah, 109 * shamarah);
    laven.bezierCurveTo(190 * shamarah, 109 * shamarah, 189 * shamarah, 114 * shamarah, 185 * shamarah, 120 * shamarah);
    laven.bezierCurveTo(181 * shamarah, 125 * shamarah, 180 * shamarah, 126 * shamarah, 176 * shamarah, 122 * shamarah);
    laven.bezierCurveTo(182 * shamarah, 119 * shamarah, 187 * shamarah, 110 * shamarah, 182 * shamarah, 112 * shamarah);
    laven.closePath();
    fill_path(laven, orvid[2]);
    laven.beginPath();
    laven.lineCap = "round";
    laven.lineJoin = "round";
    laven.moveTo(202 * shamarah, 125 * shamarah);
    laven.bezierCurveTo(197 * shamarah, 117 * shamarah, 193 * shamarah, 116 * shamarah, 193 * shamarah, 120 * shamarah);
    laven.bezierCurveTo(192.5 * shamarah, 124.5 * shamarah, 192.5 * shamarah, 124.5 * shamarah, 192 * shamarah, 129 * shamarah);
    laven.bezierCurveTo(188 * shamarah, 129 * shamarah, 187 * shamarah, 124 * shamarah, 189 * shamarah, 120 * shamarah);
    laven.bezierCurveTo(191 * shamarah, 110 * shamarah, 192 * shamarah, 110 * shamarah, 200 * shamarah, 116 * shamarah);
    laven.bezierCurveTo(208 * shamarah, 120 * shamarah, 207 * shamarah, 123 * shamarah, 202 * shamarah, 125 * shamarah);
    laven.closePath();
    fill_path(laven, orvid[2]);
  }
  return kevious;
}
function create_hurt_crab(cheyanna, hadleyann) {
  var niriah = document.createElement("canvas");
  var priscylla = niriah.getContext("2d");
  niriah.width = 283 * cheyanna;
  niriah.height = 224 * cheyanna;
  priscylla.beginPath();
  priscylla.lineCap = "round";
  priscylla.lineJoin = "round";
  priscylla.moveTo(100 * cheyanna, 33 * cheyanna);
  priscylla.bezierCurveTo(85 * cheyanna, 62 * cheyanna, 102 * cheyanna, 66 * cheyanna, 110 * cheyanna, 83 * cheyanna);
  fill_path(priscylla, undefined, hadleyann[0], 40 * cheyanna);
  priscylla.beginPath();
  priscylla.lineCap = "round";
  priscylla.lineJoin = "round";
  priscylla.moveTo(181 * cheyanna, 32 * cheyanna);
  priscylla.bezierCurveTo(196 * cheyanna, 62 * cheyanna, 181 * cheyanna, 68 * cheyanna, 178 * cheyanna, 69 * cheyanna);
  fill_path(priscylla, undefined, hadleyann[0], 40 * cheyanna);
  priscylla.beginPath();
  priscylla.lineCap = "round";
  priscylla.lineJoin = "round";
  priscylla.moveTo(225 * cheyanna, 52 * cheyanna);
  priscylla.bezierCurveTo(228 * cheyanna, 78 * cheyanna, 207 * cheyanna, 77 * cheyanna, 192 * cheyanna, 88 * cheyanna);
  fill_path(priscylla, undefined, hadleyann[0], 40 * cheyanna);
  priscylla.beginPath();
  priscylla.lineCap = "round";
  priscylla.lineJoin = "round";
  priscylla.moveTo(34 * cheyanna, 134 * cheyanna);
  priscylla.bezierCurveTo(46 * cheyanna, 111 * cheyanna, 57 * cheyanna, 111 * cheyanna, 79 * cheyanna, 109 * cheyanna);
  fill_path(priscylla, undefined, hadleyann[0], 40 * cheyanna);
  priscylla.beginPath();
  priscylla.lineCap = "round";
  priscylla.lineJoin = "round";
  priscylla.moveTo(249 * cheyanna, 135 * cheyanna);
  priscylla.bezierCurveTo(233 * cheyanna, 107 * cheyanna, 212 * cheyanna, 112 * cheyanna, 202 * cheyanna, 115 * cheyanna);
  fill_path(priscylla, undefined, hadleyann[0], 40 * cheyanna);
  priscylla.beginPath();
  priscylla.lineCap = "round";
  priscylla.lineJoin = "round";
  priscylla.moveTo(56 * cheyanna, 50 * cheyanna);
  priscylla.bezierCurveTo(56 * cheyanna, 82 * cheyanna, 73 * cheyanna, 82 * cheyanna, 93 * cheyanna, 89 * cheyanna);
  fill_path(priscylla, undefined, hadleyann[0], 40 * cheyanna);
  priscylla.beginPath();
  priscylla.lineCap = "round";
  priscylla.lineJoin = "round";
  priscylla.moveTo(93 * cheyanna, 55 * cheyanna);
  priscylla.bezierCurveTo(124 * cheyanna, 29 * cheyanna, 179 * cheyanna, 44 * cheyanna, 188 * cheyanna, 52 * cheyanna);
  priscylla.bezierCurveTo(207 * cheyanna, 64 * cheyanna, 226 * cheyanna, 94 * cheyanna, 231 * cheyanna, 118 * cheyanna);
  priscylla.bezierCurveTo(236 * cheyanna, 145 * cheyanna, 222 * cheyanna, 184 * cheyanna, 193 * cheyanna, 192 * cheyanna);
  priscylla.bezierCurveTo(147 * cheyanna, 201 * cheyanna, 116 * cheyanna, 200 * cheyanna, 93 * cheyanna, 193 * cheyanna);
  priscylla.bezierCurveTo(61 * cheyanna, 180 * cheyanna, 48 * cheyanna, 147 * cheyanna, 50 * cheyanna, 123 * cheyanna);
  priscylla.bezierCurveTo(50 * cheyanna, 93 * cheyanna, 76 * cheyanna, 66 * cheyanna, 92 * cheyanna, 56 * cheyanna);
  priscylla.closePath();
  fill_path(priscylla, hadleyann[0]);
  return niriah;
}
function create_crab_claw_left(elixabeth, sabatino, kalesia) {
  var yelisa = document.createElement("canvas");
  var ghita = yelisa.getContext("2d");
  yelisa.width = 131 * elixabeth;
  yelisa.height = 121 * elixabeth;
  ghita.translate(0, 20 * elixabeth);
  ghita.beginPath();
  ghita.lineCap = "round";
  ghita.lineJoin = "round";
  ghita.moveTo(110 * elixabeth, 59 * elixabeth);
  ghita.bezierCurveTo(93 * elixabeth, 61.5 * elixabeth, 93 * elixabeth, 61.5 * elixabeth, 76 * elixabeth, 64 * elixabeth);
  ghita.bezierCurveTo(84.5 * elixabeth, 78.5 * elixabeth, 84.5 * elixabeth, 78.5 * elixabeth, 93 * elixabeth, 93 * elixabeth);
  ghita.bezierCurveTo(70 * elixabeth, 111 * elixabeth, 43 * elixabeth, 103 * elixabeth, 30 * elixabeth, 82 * elixabeth);
  ghita.bezierCurveTo(17 * elixabeth, 61 * elixabeth, 25 * elixabeth, 30 * elixabeth, 51 * elixabeth, 21 * elixabeth);
  ghita.bezierCurveTo(66 * elixabeth, 15 * elixabeth, 83 * elixabeth, 18 * elixabeth, 96 * elixabeth, 29 * elixabeth);
  ghita.bezierCurveTo(104 * elixabeth, 35 * elixabeth, 109 * elixabeth, 47 * elixabeth, 110 * elixabeth, 58 * elixabeth);
  ghita.closePath();
  fill_path(ghita, kalesia[0]);
  ghita.globalAlpha = 1;
  ghita.translate(0, -20 * elixabeth);
  ghita.beginPath();
  ghita.lineCap = "round";
  ghita.lineJoin = "round";
  ghita.moveTo(110 * elixabeth, 59 * elixabeth);
  ghita.bezierCurveTo(93 * elixabeth, 61.5 * elixabeth, 93 * elixabeth, 61.5 * elixabeth, 76 * elixabeth, 64 * elixabeth);
  ghita.bezierCurveTo(84.5 * elixabeth, 78.5 * elixabeth, 84.5 * elixabeth, 78.5 * elixabeth, 93 * elixabeth, 93 * elixabeth);
  ghita.bezierCurveTo(70 * elixabeth, 111 * elixabeth, 43 * elixabeth, 103 * elixabeth, 30 * elixabeth, 82 * elixabeth);
  ghita.bezierCurveTo(17 * elixabeth, 61 * elixabeth, 25 * elixabeth, 30 * elixabeth, 51 * elixabeth, 21 * elixabeth);
  ghita.bezierCurveTo(66 * elixabeth, 15 * elixabeth, 83 * elixabeth, 18 * elixabeth, 96 * elixabeth, 29 * elixabeth);
  ghita.bezierCurveTo(104 * elixabeth, 35 * elixabeth, 109 * elixabeth, 47 * elixabeth, 110 * elixabeth, 58 * elixabeth);
  ghita.closePath();
  fill_path(ghita, kalesia[1], kalesia[2], 10 * elixabeth);
  return yelisa;
}
function create_crab_claw_right(lyricah, felecie, domani) {
  var auryn = document.createElement("canvas");
  var takeela = auryn.getContext("2d");
  auryn.width = 104 * lyricah;
  auryn.height = 112 * lyricah;
  takeela.translate(0, 15 * lyricah);
  takeela.beginPath();
  takeela.lineCap = "round";
  takeela.lineJoin = "round";
  takeela.moveTo(16 * lyricah, 44 * lyricah);
  takeela.bezierCurveTo(30.5 * lyricah, 48 * lyricah, 30.5 * lyricah, 48 * lyricah, 45 * lyricah, 52 * lyricah);
  takeela.bezierCurveTo(36.5 * lyricah, 63 * lyricah, 36.5 * lyricah, 63 * lyricah, 28 * lyricah, 74 * lyricah);
  takeela.bezierCurveTo(32 * lyricah, 86 * lyricah, 61 * lyricah, 92 * lyricah, 78 * lyricah, 76 * lyricah);
  takeela.bezierCurveTo(93 * lyricah, 62 * lyricah, 92 * lyricah, 40 * lyricah, 80 * lyricah, 26 * lyricah);
  takeela.bezierCurveTo(65 * lyricah, 11 * lyricah, 42 * lyricah, 16 * lyricah, 34 * lyricah, 21 * lyricah);
  takeela.bezierCurveTo(22 * lyricah, 27 * lyricah, 16 * lyricah, 39 * lyricah, 16 * lyricah, 44 * lyricah);
  takeela.closePath();
  fill_path(takeela, domani[0]);
  takeela.globalAlpha = 1;
  takeela.translate(0, -15 * lyricah);
  takeela.beginPath();
  takeela.lineCap = "round";
  takeela.lineJoin = "round";
  takeela.moveTo(16 * lyricah, 44 * lyricah);
  takeela.bezierCurveTo(30.5 * lyricah, 48 * lyricah, 30.5 * lyricah, 48 * lyricah, 45 * lyricah, 52 * lyricah);
  takeela.bezierCurveTo(36.5 * lyricah, 63 * lyricah, 36.5 * lyricah, 63 * lyricah, 28 * lyricah, 74 * lyricah);
  takeela.bezierCurveTo(32 * lyricah, 86 * lyricah, 61 * lyricah, 92 * lyricah, 78 * lyricah, 76 * lyricah);
  takeela.bezierCurveTo(93 * lyricah, 62 * lyricah, 92 * lyricah, 40 * lyricah, 80 * lyricah, 26 * lyricah);
  takeela.bezierCurveTo(65 * lyricah, 11 * lyricah, 42 * lyricah, 16 * lyricah, 34 * lyricah, 21 * lyricah);
  takeela.bezierCurveTo(22 * lyricah, 27 * lyricah, 16 * lyricah, 39 * lyricah, 16 * lyricah, 44 * lyricah);
  takeela.closePath();
  fill_path(takeela, domani[1], domani[2], 8 * lyricah);
  return auryn;
}
function create_crab_stick(katelund, zyann, raymondo) {
  var carleon = document.createElement("canvas");
  var balal = carleon.getContext("2d");
  carleon.width = 321 * katelund;
  carleon.height = 284 * katelund;
  balal.translate(100 * katelund, 30 * katelund);
  balal.translate(5 * katelund, 10 * katelund);
  balal.globalAlpha = zyann ? .5 : 1;
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(58 * katelund, 33 * katelund);
  balal.bezierCurveTo(81 * katelund, 22 * katelund, 93 * katelund, 26 * katelund, 123 * katelund, 47 * katelund);
  balal.bezierCurveTo(160 * katelund, 73 * katelund, 169 * katelund, 80 * katelund, 191 * katelund, 99 * katelund);
  balal.bezierCurveTo(202 * katelund, 107 * katelund, 211 * katelund, 118 * katelund, 195 * katelund, 151 * katelund);
  balal.bezierCurveTo(181 * katelund, 183 * katelund, 157 * katelund, 192 * katelund, 129 * katelund, 174 * katelund);
  balal.bezierCurveTo(78 * katelund, 140 * katelund, 68 * katelund, 129 * katelund, 37 * katelund, 94 * katelund);
  balal.bezierCurveTo(15 * katelund, 68 * katelund, 25 * katelund, 52 * katelund, 56 * katelund, 34 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[0]);
  balal.globalAlpha = 1;
  balal.translate(-5 * katelund, -10 * katelund);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(58 * katelund, 33 * katelund);
  balal.bezierCurveTo(81 * katelund, 22 * katelund, 93 * katelund, 26 * katelund, 123 * katelund, 47 * katelund);
  balal.bezierCurveTo(160 * katelund, 73 * katelund, 169 * katelund, 80 * katelund, 191 * katelund, 99 * katelund);
  balal.bezierCurveTo(202 * katelund, 107 * katelund, 211 * katelund, 118 * katelund, 195 * katelund, 151 * katelund);
  balal.bezierCurveTo(181 * katelund, 183 * katelund, 157 * katelund, 192 * katelund, 129 * katelund, 174 * katelund);
  balal.bezierCurveTo(78 * katelund, 140 * katelund, 68 * katelund, 129 * katelund, 37 * katelund, 94 * katelund);
  balal.bezierCurveTo(15 * katelund, 68 * katelund, 25 * katelund, 52 * katelund, 56 * katelund, 34 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[1], raymondo[2], 10 * katelund);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(167 * katelund, 120 * katelund);
  balal.bezierCurveTo(196 * katelund, 106 * katelund, 207 * katelund, 111 * katelund, 199 * katelund, 135 * katelund);
  balal.bezierCurveTo(185 * katelund, 172 * katelund, 166 * katelund, 187 * katelund, 145 * katelund, 179 * katelund);
  balal.bezierCurveTo(118 * katelund, 166 * katelund, 127 * katelund, 139 * katelund, 166 * katelund, 121 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[3]);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(25 * katelund, 64 * katelund);
  balal.bezierCurveTo(59 * katelund, 96 * katelund, 97 * katelund, 128 * katelund, 129 * katelund, 151 * katelund);
  balal.bezierCurveTo(126 * katelund, 163 * katelund, 134 * katelund, 174 * katelund, 142 * katelund, 180 * katelund);
  balal.bezierCurveTo(114 * katelund, 170 * katelund, 68 * katelund, 134 * katelund, 31 * katelund, 85 * katelund);
  balal.bezierCurveTo(24 * katelund, 71 * katelund, 24 * katelund, 70 * katelund, 25 * katelund, 65 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[2]);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(161 * katelund, 141 * katelund);
  balal.bezierCurveTo(181 * katelund, 131 * katelund, 186 * katelund, 135 * katelund, 173 * katelund, 152 * katelund);
  balal.bezierCurveTo(163 * katelund, 163 * katelund, 155 * katelund, 161 * katelund, 151 * katelund, 150 * katelund);
  balal.bezierCurveTo(147 * katelund, 140 * katelund, 155 * katelund, 131 * katelund, 175 * katelund, 125 * katelund);
  balal.bezierCurveTo(190 * katelund, 120 * katelund, 196 * katelund, 121 * katelund, 189 * katelund, 143 * katelund);
  balal.bezierCurveTo(182 * katelund, 167 * katelund, 169 * katelund, 174 * katelund, 157 * katelund, 174 * katelund);
  balal.bezierCurveTo(138 * katelund, 172 * katelund, 139 * katelund, 162 * katelund, 140 * katelund, 156 * katelund);
  fill_path(balal, undefined, raymondo[4], 4 * katelund);
  balal.translate(-100 * katelund, -30 * katelund);
  balal.translate(10 * katelund, 70 * katelund);
  balal.translate(5 * katelund, 10 * katelund);
  balal.globalAlpha = zyann ? .5 : 1;
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(58 * katelund, 33 * katelund);
  balal.bezierCurveTo(81 * katelund, 22 * katelund, 93 * katelund, 26 * katelund, 123 * katelund, 47 * katelund);
  balal.bezierCurveTo(160 * katelund, 73 * katelund, 169 * katelund, 80 * katelund, 191 * katelund, 99 * katelund);
  balal.bezierCurveTo(202 * katelund, 107 * katelund, 211 * katelund, 118 * katelund, 195 * katelund, 151 * katelund);
  balal.bezierCurveTo(181 * katelund, 183 * katelund, 157 * katelund, 192 * katelund, 129 * katelund, 174 * katelund);
  balal.bezierCurveTo(78 * katelund, 140 * katelund, 68 * katelund, 129 * katelund, 37 * katelund, 94 * katelund);
  balal.bezierCurveTo(15 * katelund, 68 * katelund, 25 * katelund, 52 * katelund, 56 * katelund, 34 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[0]);
  balal.globalAlpha = 1;
  balal.translate(-5 * katelund, -10 * katelund);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(58 * katelund, 33 * katelund);
  balal.bezierCurveTo(81 * katelund, 22 * katelund, 93 * katelund, 26 * katelund, 123 * katelund, 47 * katelund);
  balal.bezierCurveTo(160 * katelund, 73 * katelund, 169 * katelund, 80 * katelund, 191 * katelund, 99 * katelund);
  balal.bezierCurveTo(202 * katelund, 107 * katelund, 211 * katelund, 118 * katelund, 195 * katelund, 151 * katelund);
  balal.bezierCurveTo(181 * katelund, 183 * katelund, 157 * katelund, 192 * katelund, 129 * katelund, 174 * katelund);
  balal.bezierCurveTo(78 * katelund, 140 * katelund, 68 * katelund, 129 * katelund, 37 * katelund, 94 * katelund);
  balal.bezierCurveTo(15 * katelund, 68 * katelund, 25 * katelund, 52 * katelund, 56 * katelund, 34 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[1], raymondo[2], 10 * katelund);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(167 * katelund, 120 * katelund);
  balal.bezierCurveTo(196 * katelund, 106 * katelund, 207 * katelund, 111 * katelund, 199 * katelund, 135 * katelund);
  balal.bezierCurveTo(185 * katelund, 172 * katelund, 166 * katelund, 187 * katelund, 145 * katelund, 179 * katelund);
  balal.bezierCurveTo(118 * katelund, 166 * katelund, 127 * katelund, 139 * katelund, 166 * katelund, 121 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[3]);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(25 * katelund, 64 * katelund);
  balal.bezierCurveTo(59 * katelund, 96 * katelund, 97 * katelund, 128 * katelund, 129 * katelund, 151 * katelund);
  balal.bezierCurveTo(126 * katelund, 163 * katelund, 134 * katelund, 174 * katelund, 142 * katelund, 180 * katelund);
  balal.bezierCurveTo(114 * katelund, 170 * katelund, 68 * katelund, 134 * katelund, 31 * katelund, 85 * katelund);
  balal.bezierCurveTo(24 * katelund, 71 * katelund, 24 * katelund, 70 * katelund, 25 * katelund, 65 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[2]);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(161 * katelund, 141 * katelund);
  balal.bezierCurveTo(181 * katelund, 131 * katelund, 186 * katelund, 135 * katelund, 173 * katelund, 152 * katelund);
  balal.bezierCurveTo(163 * katelund, 163 * katelund, 155 * katelund, 161 * katelund, 151 * katelund, 150 * katelund);
  balal.bezierCurveTo(147 * katelund, 140 * katelund, 155 * katelund, 131 * katelund, 175 * katelund, 125 * katelund);
  balal.bezierCurveTo(190 * katelund, 120 * katelund, 196 * katelund, 121 * katelund, 189 * katelund, 143 * katelund);
  balal.bezierCurveTo(182 * katelund, 167 * katelund, 169 * katelund, 174 * katelund, 157 * katelund, 174 * katelund);
  balal.bezierCurveTo(138 * katelund, 172 * katelund, 139 * katelund, 162 * katelund, 140 * katelund, 156 * katelund);
  fill_path(balal, undefined, raymondo[4], 4 * katelund);
  balal.translate(20 * katelund, -80 * katelund);
  balal.translate(5 * katelund, 10 * katelund);
  balal.globalAlpha = zyann ? .5 : 1;
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(58 * katelund, 33 * katelund);
  balal.bezierCurveTo(81 * katelund, 22 * katelund, 93 * katelund, 26 * katelund, 123 * katelund, 47 * katelund);
  balal.bezierCurveTo(160 * katelund, 73 * katelund, 169 * katelund, 80 * katelund, 191 * katelund, 99 * katelund);
  balal.bezierCurveTo(202 * katelund, 107 * katelund, 211 * katelund, 118 * katelund, 195 * katelund, 151 * katelund);
  balal.bezierCurveTo(181 * katelund, 183 * katelund, 157 * katelund, 192 * katelund, 129 * katelund, 174 * katelund);
  balal.bezierCurveTo(78 * katelund, 140 * katelund, 68 * katelund, 129 * katelund, 37 * katelund, 94 * katelund);
  balal.bezierCurveTo(15 * katelund, 68 * katelund, 25 * katelund, 52 * katelund, 56 * katelund, 34 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[0]);
  balal.globalAlpha = 1;
  balal.translate(-5 * katelund, -10 * katelund);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(58 * katelund, 33 * katelund);
  balal.bezierCurveTo(81 * katelund, 22 * katelund, 93 * katelund, 26 * katelund, 123 * katelund, 47 * katelund);
  balal.bezierCurveTo(160 * katelund, 73 * katelund, 169 * katelund, 80 * katelund, 191 * katelund, 99 * katelund);
  balal.bezierCurveTo(202 * katelund, 107 * katelund, 211 * katelund, 118 * katelund, 195 * katelund, 151 * katelund);
  balal.bezierCurveTo(181 * katelund, 183 * katelund, 157 * katelund, 192 * katelund, 129 * katelund, 174 * katelund);
  balal.bezierCurveTo(78 * katelund, 140 * katelund, 68 * katelund, 129 * katelund, 37 * katelund, 94 * katelund);
  balal.bezierCurveTo(15 * katelund, 68 * katelund, 25 * katelund, 52 * katelund, 56 * katelund, 34 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[1], raymondo[2], 10 * katelund);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(167 * katelund, 120 * katelund);
  balal.bezierCurveTo(196 * katelund, 106 * katelund, 207 * katelund, 111 * katelund, 199 * katelund, 135 * katelund);
  balal.bezierCurveTo(185 * katelund, 172 * katelund, 166 * katelund, 187 * katelund, 145 * katelund, 179 * katelund);
  balal.bezierCurveTo(118 * katelund, 166 * katelund, 127 * katelund, 139 * katelund, 166 * katelund, 121 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[3]);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(25 * katelund, 64 * katelund);
  balal.bezierCurveTo(59 * katelund, 96 * katelund, 97 * katelund, 128 * katelund, 129 * katelund, 151 * katelund);
  balal.bezierCurveTo(126 * katelund, 163 * katelund, 134 * katelund, 174 * katelund, 142 * katelund, 180 * katelund);
  balal.bezierCurveTo(114 * katelund, 170 * katelund, 68 * katelund, 134 * katelund, 31 * katelund, 85 * katelund);
  balal.bezierCurveTo(24 * katelund, 71 * katelund, 24 * katelund, 70 * katelund, 25 * katelund, 65 * katelund);
  balal.closePath();
  fill_path(balal, raymondo[2]);
  balal.beginPath();
  balal.lineCap = "round";
  balal.lineJoin = "round";
  balal.moveTo(161 * katelund, 141 * katelund);
  balal.bezierCurveTo(181 * katelund, 131 * katelund, 186 * katelund, 135 * katelund, 173 * katelund, 152 * katelund);
  balal.bezierCurveTo(163 * katelund, 163 * katelund, 155 * katelund, 161 * katelund, 151 * katelund, 150 * katelund);
  balal.bezierCurveTo(147 * katelund, 140 * katelund, 155 * katelund, 131 * katelund, 175 * katelund, 125 * katelund);
  balal.bezierCurveTo(190 * katelund, 120 * katelund, 196 * katelund, 121 * katelund, 189 * katelund, 143 * katelund);
  balal.bezierCurveTo(182 * katelund, 167 * katelund, 169 * katelund, 174 * katelund, 157 * katelund, 174 * katelund);
  balal.bezierCurveTo(138 * katelund, 172 * katelund, 139 * katelund, 162 * katelund, 140 * katelund, 156 * katelund);
  fill_path(balal, undefined, raymondo[4], 4 * katelund);
  return carleon;
}
function create_goldsword(ashelee, wadell, jamela) {
  var ishta = document.createElement("canvas");
  var derlyn = ishta.getContext("2d");
  ishta.width = 290 * ashelee;
  ishta.height = 525 * ashelee;
  derlyn.globalAlpha = wadell ? .5 : 1;
  derlyn.translate(20 * ashelee, 20 * ashelee);
  derlyn.beginPath();
  derlyn.lineCap = "round";
  derlyn.lineJoin = "round";
  derlyn.moveTo(111 * ashelee, 351 * ashelee);
  derlyn.bezierCurveTo(128.5 * ashelee, 218.5 * ashelee, 128.5 * ashelee, 218.5 * ashelee, 146 * ashelee, 86 * ashelee);
  derlyn.bezierCurveTo(166.5 * ashelee, 66.5 * ashelee, 166.5 * ashelee, 66.5 * ashelee, 187 * ashelee, 47 * ashelee);
  derlyn.bezierCurveTo(201 * ashelee, 71.5 * ashelee, 201 * ashelee, 71.5 * ashelee, 215 * ashelee, 96 * ashelee);
  derlyn.bezierCurveTo(193 * ashelee, 228.5 * ashelee, 193 * ashelee, 228.5 * ashelee, 171 * ashelee, 361 * ashelee);
  derlyn.closePath();
  fill_path(derlyn, jamela[0]);
  derlyn.save();
  derlyn.translate(129.5 * ashelee, 424 * ashelee);
  derlyn.rotate(.16);
  round_rect(derlyn, -15.5 * ashelee, -63 * ashelee, 31 * ashelee, 126 * ashelee, 10 * ashelee);
  derlyn.restore();
  fill_path(derlyn, jamela[0]);
  circle(derlyn, 121 * ashelee, 480 * ashelee, 20.396078054371138 * ashelee);
  fill_path(derlyn, jamela[0]);
  derlyn.beginPath();
  derlyn.lineCap = "round";
  derlyn.lineJoin = "round";
  derlyn.moveTo(90 * ashelee, 311 * ashelee);
  derlyn.bezierCurveTo(95 * ashelee, 324 * ashelee, 95 * ashelee, 324 * ashelee, 100 * ashelee, 337 * ashelee);
  derlyn.bezierCurveTo(141.5 * ashelee, 345.5 * ashelee, 141.5 * ashelee, 345.5 * ashelee, 183 * ashelee, 354 * ashelee);
  derlyn.bezierCurveTo(193.5 * ashelee, 342.5 * ashelee, 193.5 * ashelee, 342.5 * ashelee, 204 * ashelee, 331 * ashelee);
  derlyn.bezierCurveTo(202 * ashelee, 354 * ashelee, 202 * ashelee, 354 * ashelee, 200 * ashelee, 377 * ashelee);
  derlyn.bezierCurveTo(147 * ashelee, 388 * ashelee, 106 * ashelee, 371 * ashelee, 79 * ashelee, 356 * ashelee);
  derlyn.closePath();
  fill_path(derlyn, jamela[0]);
  derlyn.globalAlpha = 1;
  derlyn.translate(-20 * ashelee, -20 * ashelee);
  derlyn.beginPath();
  derlyn.lineCap = "round";
  derlyn.lineJoin = "round";
  derlyn.moveTo(111 * ashelee, 351 * ashelee);
  derlyn.bezierCurveTo(128.5 * ashelee, 218.5 * ashelee, 128.5 * ashelee, 218.5 * ashelee, 146 * ashelee, 86 * ashelee);
  derlyn.bezierCurveTo(166.5 * ashelee, 66.5 * ashelee, 166.5 * ashelee, 66.5 * ashelee, 187 * ashelee, 47 * ashelee);
  derlyn.bezierCurveTo(201 * ashelee, 71.5 * ashelee, 201 * ashelee, 71.5 * ashelee, 215 * ashelee, 96 * ashelee);
  derlyn.bezierCurveTo(193 * ashelee, 228.5 * ashelee, 193 * ashelee, 228.5 * ashelee, 171 * ashelee, 361 * ashelee);
  derlyn.closePath();
  fill_path(derlyn, jamela[1], jamela[2], 12.5 * ashelee);
  derlyn.save();
  derlyn.translate(129.5 * ashelee, 424 * ashelee);
  derlyn.rotate(.16);
  round_rect(derlyn, -15.5 * ashelee, -63 * ashelee, 31 * ashelee, 126 * ashelee, 10 * ashelee);
  derlyn.restore();
  fill_path(derlyn, jamela[4], jamela[5], 12.5 * ashelee);
  circle(derlyn, 121 * ashelee, 480 * ashelee, 20.396078054371138 * ashelee);
  fill_path(derlyn, jamela[4], jamela[5], 12.5 * ashelee);
  derlyn.beginPath();
  derlyn.lineCap = "round";
  derlyn.lineJoin = "round";
  derlyn.moveTo(90 * ashelee, 311 * ashelee);
  derlyn.bezierCurveTo(95 * ashelee, 324 * ashelee, 95 * ashelee, 324 * ashelee, 100 * ashelee, 337 * ashelee);
  derlyn.bezierCurveTo(141.5 * ashelee, 345.5 * ashelee, 141.5 * ashelee, 345.5 * ashelee, 183 * ashelee, 354 * ashelee);
  derlyn.bezierCurveTo(193.5 * ashelee, 342.5 * ashelee, 193.5 * ashelee, 342.5 * ashelee, 204 * ashelee, 331 * ashelee);
  derlyn.bezierCurveTo(202 * ashelee, 354 * ashelee, 202 * ashelee, 354 * ashelee, 200 * ashelee, 377 * ashelee);
  derlyn.bezierCurveTo(147 * ashelee, 388 * ashelee, 106 * ashelee, 371 * ashelee, 79 * ashelee, 356 * ashelee);
  derlyn.closePath();
  fill_path(derlyn, jamela[1], jamela[2], 12.5 * ashelee);
  return ishta;
}
function create_diamondsword(tantanea, pavel, esquire) {
  var viella = document.createElement("canvas");
  var ellwood = viella.getContext("2d");
  viella.width = 290 * tantanea;
  viella.height = 525 * tantanea;
  ellwood.globalAlpha = pavel ? .5 : 1;
  ellwood.translate(20 * tantanea, 20 * tantanea);
  ellwood.beginPath();
  ellwood.lineCap = "round";
  ellwood.lineJoin = "round";
  ellwood.moveTo(112 * tantanea, 356 * tantanea);
  ellwood.bezierCurveTo(124 * tantanea, 220.5 * tantanea, 124 * tantanea, 220.5 * tantanea, 136 * tantanea, 85 * tantanea);
  ellwood.bezierCurveTo(162.5 * tantanea, 65.5 * tantanea, 162.5 * tantanea, 65.5 * tantanea, 189 * tantanea, 46 * tantanea);
  ellwood.bezierCurveTo(208.5 * tantanea, 72.5 * tantanea, 208.5 * tantanea, 72.5 * tantanea, 228 * tantanea, 99 * tantanea);
  ellwood.bezierCurveTo(200 * tantanea, 232 * tantanea, 200 * tantanea, 232 * tantanea, 172 * tantanea, 365 * tantanea);
  ellwood.closePath();
  fill_path(ellwood, esquire[0]);
  ellwood.save();
  ellwood.translate(131 * tantanea, 423 * tantanea);
  ellwood.rotate(.16);
  round_rect(ellwood, -14 * tantanea, -53 * tantanea, 28 * tantanea, 106 * tantanea, 10 * tantanea);
  ellwood.restore();
  fill_path(ellwood, esquire[0]);
  ellwood.save();
  ellwood.translate(122 * tantanea, 480 * tantanea);
  ellwood.rotate(1.72);
  round_regular_polygon(ellwood, 4, 26.476404589747453 * tantanea, 10 * tantanea);
  ellwood.restore();
  fill_path(ellwood, esquire[0]);
  ellwood.beginPath();
  ellwood.lineCap = "round";
  ellwood.lineJoin = "round";
  ellwood.moveTo(210 * tantanea, 387 * tantanea);
  ellwood.bezierCurveTo(138 * tantanea, 376 * tantanea, 138 * tantanea, 376 * tantanea, 66 * tantanea, 365 * tantanea);
  ellwood.bezierCurveTo(76 * tantanea, 355 * tantanea, 76 * tantanea, 355 * tantanea, 86 * tantanea, 345 * tantanea);
  ellwood.bezierCurveTo(99 * tantanea, 346.5 * tantanea, 99 * tantanea, 346.5 * tantanea, 112 * tantanea, 348 * tantanea);
  ellwood.bezierCurveTo(128.5 * tantanea, 344 * tantanea, 128.5 * tantanea, 344 * tantanea, 145 * tantanea, 340 * tantanea);
  ellwood.bezierCurveTo(158 * tantanea, 348 * tantanea, 158 * tantanea, 348 * tantanea, 171 * tantanea, 356 * tantanea);
  ellwood.bezierCurveTo(184 * tantanea, 358 * tantanea, 184 * tantanea, 358 * tantanea, 197 * tantanea, 360 * tantanea);
  ellwood.closePath();
  fill_path(ellwood, esquire[0]);
  ellwood.beginPath();
  ellwood.lineCap = "round";
  ellwood.lineJoin = "round";
  ellwood.moveTo(129 * tantanea, 338 * tantanea);
  ellwood.bezierCurveTo(137 * tantanea, 336 * tantanea, 137 * tantanea, 336 * tantanea, 145 * tantanea, 334 * tantanea);
  ellwood.bezierCurveTo(152.5 * tantanea, 338 * tantanea, 152.5 * tantanea, 338 * tantanea, 160 * tantanea, 342 * tantanea);
  ellwood.bezierCurveTo(184 * tantanea, 224 * tantanea, 184 * tantanea, 224 * tantanea, 208 * tantanea, 106 * tantanea);
  ellwood.bezierCurveTo(197 * tantanea, 88 * tantanea, 187 * tantanea, 70 * tantanea, 186 * tantanea, 70 * tantanea);
  ellwood.bezierCurveTo(169.5 * tantanea, 83 * tantanea, 169.5 * tantanea, 83 * tantanea, 153 * tantanea, 96 * tantanea);
  ellwood.closePath();
  fill_path(ellwood, esquire[0]);
  ellwood.globalAlpha = 1;
  ellwood.translate(-20 * tantanea, -20 * tantanea);
  ellwood.beginPath();
  ellwood.lineCap = "round";
  ellwood.lineJoin = "round";
  ellwood.moveTo(112 * tantanea, 356 * tantanea);
  ellwood.bezierCurveTo(124 * tantanea, 220.5 * tantanea, 124 * tantanea, 220.5 * tantanea, 136 * tantanea, 85 * tantanea);
  ellwood.bezierCurveTo(162.5 * tantanea, 65.5 * tantanea, 162.5 * tantanea, 65.5 * tantanea, 189 * tantanea, 46 * tantanea);
  ellwood.bezierCurveTo(208.5 * tantanea, 72.5 * tantanea, 208.5 * tantanea, 72.5 * tantanea, 228 * tantanea, 99 * tantanea);
  ellwood.bezierCurveTo(200 * tantanea, 232 * tantanea, 200 * tantanea, 232 * tantanea, 172 * tantanea, 365 * tantanea);
  ellwood.closePath();
  fill_path(ellwood, esquire[1], esquire[2], 12.5 * tantanea);
  ellwood.save();
  ellwood.translate(131 * tantanea, 423 * tantanea);
  ellwood.rotate(.16);
  round_rect(ellwood, -14 * tantanea, -53 * tantanea, 28 * tantanea, 106 * tantanea, 10 * tantanea);
  ellwood.restore();
  fill_path(ellwood, esquire[4], esquire[5], 12.5 * tantanea);
  ellwood.save();
  ellwood.translate(122 * tantanea, 480 * tantanea);
  ellwood.rotate(1.72);
  round_regular_polygon(ellwood, 4, 26.476404589747453 * tantanea, 10 * tantanea);
  ellwood.restore();
  fill_path(ellwood, esquire[1], esquire[2], 12.5 * tantanea);
  ellwood.beginPath();
  ellwood.lineCap = "round";
  ellwood.lineJoin = "round";
  ellwood.moveTo(210 * tantanea, 387 * tantanea);
  ellwood.bezierCurveTo(138 * tantanea, 376 * tantanea, 138 * tantanea, 376 * tantanea, 66 * tantanea, 365 * tantanea);
  ellwood.bezierCurveTo(76 * tantanea, 355 * tantanea, 76 * tantanea, 355 * tantanea, 86 * tantanea, 345 * tantanea);
  ellwood.bezierCurveTo(99 * tantanea, 346.5 * tantanea, 99 * tantanea, 346.5 * tantanea, 112 * tantanea, 348 * tantanea);
  ellwood.bezierCurveTo(128.5 * tantanea, 344 * tantanea, 128.5 * tantanea, 344 * tantanea, 145 * tantanea, 340 * tantanea);
  ellwood.bezierCurveTo(158 * tantanea, 348 * tantanea, 158 * tantanea, 348 * tantanea, 171 * tantanea, 356 * tantanea);
  ellwood.bezierCurveTo(184 * tantanea, 358 * tantanea, 184 * tantanea, 358 * tantanea, 197 * tantanea, 360 * tantanea);
  ellwood.closePath();
  fill_path(ellwood, esquire[1], esquire[2], 12.5 * tantanea);
  ellwood.beginPath();
  ellwood.lineCap = "round";
  ellwood.lineJoin = "round";
  ellwood.moveTo(129 * tantanea, 338 * tantanea);
  ellwood.bezierCurveTo(137 * tantanea, 336 * tantanea, 137 * tantanea, 336 * tantanea, 145 * tantanea, 334 * tantanea);
  ellwood.bezierCurveTo(152.5 * tantanea, 338 * tantanea, 152.5 * tantanea, 338 * tantanea, 160 * tantanea, 342 * tantanea);
  ellwood.bezierCurveTo(184 * tantanea, 224 * tantanea, 184 * tantanea, 224 * tantanea, 208 * tantanea, 106 * tantanea);
  ellwood.bezierCurveTo(197 * tantanea, 88 * tantanea, 187 * tantanea, 70 * tantanea, 186 * tantanea, 70 * tantanea);
  ellwood.bezierCurveTo(169.5 * tantanea, 83 * tantanea, 169.5 * tantanea, 83 * tantanea, 153 * tantanea, 96 * tantanea);
  ellwood.closePath();
  fill_path(ellwood, esquire[3]);
  return viella;
}
function create_amesword(daliyla, allix, deus) {
  var estefanie = document.createElement("canvas");
  var banesa = estefanie.getContext("2d");
  estefanie.width = 290 * daliyla;
  estefanie.height = 525 * daliyla;
  banesa.globalAlpha = allix ? .5 : 1;
  banesa.translate(20 * daliyla, 20 * daliyla);
  banesa.translate(-20 * daliyla, -20 * daliyla);
  banesa.save();
  banesa.translate(132 * daliyla, 423 * daliyla);
  banesa.rotate(.16);
  round_rect(banesa, -14 * daliyla, -61 * daliyla, 28 * daliyla, 122 * daliyla, 10 * daliyla);
  banesa.restore();
  fill_path(banesa, deus[0]);
  banesa.beginPath();
  banesa.lineCap = "round";
  banesa.lineJoin = "round";
  banesa.moveTo(100 * daliyla, 344 * daliyla);
  banesa.bezierCurveTo(123 * daliyla, 214 * daliyla, 123 * daliyla, 214 * daliyla, 146 * daliyla, 84 * daliyla);
  banesa.bezierCurveTo(166.5 * daliyla, 65 * daliyla, 166.5 * daliyla, 65 * daliyla, 187 * daliyla, 46 * daliyla);
  banesa.bezierCurveTo(201 * daliyla, 71 * daliyla, 201 * daliyla, 71 * daliyla, 215 * daliyla, 96 * daliyla);
  banesa.bezierCurveTo(199.5 * daliyla, 226.5 * daliyla, 199.5 * daliyla, 226.5 * daliyla, 184 * daliyla, 357 * daliyla);
  banesa.bezierCurveTo(162.5 * daliyla, 362.5 * daliyla, 162.5 * daliyla, 362.5 * daliyla, 141 * daliyla, 368 * daliyla);
  banesa.closePath();
  fill_path(banesa, deus[0]);
  banesa.beginPath();
  banesa.lineCap = "round";
  banesa.lineJoin = "round";
  banesa.moveTo(75 * daliyla, 328 * daliyla);
  banesa.bezierCurveTo(88 * daliyla, 336.5 * daliyla, 88 * daliyla, 336.5 * daliyla, 101 * daliyla, 345 * daliyla);
  banesa.bezierCurveTo(123.5 * daliyla, 337.5 * daliyla, 123.5 * daliyla, 337.5 * daliyla, 146 * daliyla, 330 * daliyla);
  banesa.bezierCurveTo(165 * daliyla, 343.5 * daliyla, 165 * daliyla, 343.5 * daliyla, 184 * daliyla, 357 * daliyla);
  banesa.bezierCurveTo(198.5 * daliyla, 353 * daliyla, 198.5 * daliyla, 353 * daliyla, 213 * daliyla, 349 * daliyla);
  banesa.bezierCurveTo(200.5 * daliyla, 364.5 * daliyla, 200.5 * daliyla, 364.5 * daliyla, 188 * daliyla, 380 * daliyla);
  banesa.bezierCurveTo(163 * daliyla, 380.5 * daliyla, 163 * daliyla, 380.5 * daliyla, 138 * daliyla, 381 * daliyla);
  banesa.bezierCurveTo(112 * daliyla, 373.5 * daliyla, 112 * daliyla, 373.5 * daliyla, 86 * daliyla, 366 * daliyla);
  banesa.closePath();
  fill_path(banesa, deus[0]);
  banesa.beginPath();
  banesa.lineCap = "round";
  banesa.lineJoin = "round";
  banesa.moveTo(121 * daliyla, 332 * daliyla);
  banesa.bezierCurveTo(133.5 * daliyla, 327.5 * daliyla, 133.5 * daliyla, 327.5 * daliyla, 146 * daliyla, 323 * daliyla);
  banesa.bezierCurveTo(157 * daliyla, 330.5 * daliyla, 157 * daliyla, 330.5 * daliyla, 168 * daliyla, 338 * daliyla);
  banesa.bezierCurveTo(182.5 * daliyla, 219.5 * daliyla, 182.5 * daliyla, 219.5 * daliyla, 197 * daliyla, 101 * daliyla);
  banesa.bezierCurveTo(190 * daliyla, 84.5 * daliyla, 190 * daliyla, 84.5 * daliyla, 183 * daliyla, 68 * daliyla);
  banesa.bezierCurveTo(172.5 * daliyla, 81 * daliyla, 172.5 * daliyla, 81 * daliyla, 162 * daliyla, 94 * daliyla);
  banesa.closePath();
  fill_path(banesa, deus[0]);
  banesa.beginPath();
  banesa.lineCap = "round";
  banesa.lineJoin = "round";
  banesa.moveTo(105 * daliyla, 463 * daliyla);
  banesa.bezierCurveTo(124.5 * daliyla, 466 * daliyla, 124.5 * daliyla, 466 * daliyla, 144 * daliyla, 469 * daliyla);
  banesa.bezierCurveTo(145.5 * daliyla, 478.5 * daliyla, 145.5 * daliyla, 478.5 * daliyla, 147 * daliyla, 488 * daliyla);
  banesa.bezierCurveTo(133.5 * daliyla, 495.5 * daliyla, 133.5 * daliyla, 495.5 * daliyla, 120 * daliyla, 503 * daliyla);
  banesa.bezierCurveTo(108.5 * daliyla, 492 * daliyla, 108.5 * daliyla, 492 * daliyla, 97 * daliyla, 481 * daliyla);
  banesa.closePath();
  fill_path(banesa, deus[0]);
  banesa.globalAlpha = 1;
  banesa.translate(-20 * daliyla, -20 * daliyla);
  banesa.save();
  banesa.translate(132 * daliyla, 423 * daliyla);
  banesa.rotate(.16);
  round_rect(banesa, -14 * daliyla, -61 * daliyla, 28 * daliyla, 122 * daliyla, 10 * daliyla);
  banesa.restore();
  fill_path(banesa, deus[4], deus[5], 12.5 * daliyla);
  banesa.beginPath();
  banesa.lineCap = "round";
  banesa.lineJoin = "round";
  banesa.moveTo(100 * daliyla, 344 * daliyla);
  banesa.bezierCurveTo(123 * daliyla, 214 * daliyla, 123 * daliyla, 214 * daliyla, 146 * daliyla, 84 * daliyla);
  banesa.bezierCurveTo(166.5 * daliyla, 65 * daliyla, 166.5 * daliyla, 65 * daliyla, 187 * daliyla, 46 * daliyla);
  banesa.bezierCurveTo(201 * daliyla, 71 * daliyla, 201 * daliyla, 71 * daliyla, 215 * daliyla, 96 * daliyla);
  banesa.bezierCurveTo(199.5 * daliyla, 226.5 * daliyla, 199.5 * daliyla, 226.5 * daliyla, 184 * daliyla, 357 * daliyla);
  banesa.bezierCurveTo(162.5 * daliyla, 362.5 * daliyla, 162.5 * daliyla, 362.5 * daliyla, 141 * daliyla, 368 * daliyla);
  banesa.closePath();
  fill_path(banesa, deus[1], deus[2], 12.5 * daliyla);
  banesa.beginPath();
  banesa.lineCap = "round";
  banesa.lineJoin = "round";
  banesa.moveTo(75 * daliyla, 328 * daliyla);
  banesa.bezierCurveTo(88 * daliyla, 336.5 * daliyla, 88 * daliyla, 336.5 * daliyla, 101 * daliyla, 345 * daliyla);
  banesa.bezierCurveTo(123.5 * daliyla, 337.5 * daliyla, 123.5 * daliyla, 337.5 * daliyla, 146 * daliyla, 330 * daliyla);
  banesa.bezierCurveTo(165 * daliyla, 343.5 * daliyla, 165 * daliyla, 343.5 * daliyla, 184 * daliyla, 357 * daliyla);
  banesa.bezierCurveTo(198.5 * daliyla, 353 * daliyla, 198.5 * daliyla, 353 * daliyla, 213 * daliyla, 349 * daliyla);
  banesa.bezierCurveTo(200.5 * daliyla, 364.5 * daliyla, 200.5 * daliyla, 364.5 * daliyla, 188 * daliyla, 380 * daliyla);
  banesa.bezierCurveTo(163 * daliyla, 380.5 * daliyla, 163 * daliyla, 380.5 * daliyla, 138 * daliyla, 381 * daliyla);
  banesa.bezierCurveTo(112 * daliyla, 373.5 * daliyla, 112 * daliyla, 373.5 * daliyla, 86 * daliyla, 366 * daliyla);
  banesa.closePath();
  fill_path(banesa, deus[1], deus[2], 12.5 * daliyla);
  banesa.beginPath();
  banesa.lineCap = "round";
  banesa.lineJoin = "round";
  banesa.moveTo(121 * daliyla, 332 * daliyla);
  banesa.bezierCurveTo(133.5 * daliyla, 327.5 * daliyla, 133.5 * daliyla, 327.5 * daliyla, 146 * daliyla, 323 * daliyla);
  banesa.bezierCurveTo(157 * daliyla, 330.5 * daliyla, 157 * daliyla, 330.5 * daliyla, 168 * daliyla, 338 * daliyla);
  banesa.bezierCurveTo(182.5 * daliyla, 219.5 * daliyla, 182.5 * daliyla, 219.5 * daliyla, 197 * daliyla, 101 * daliyla);
  banesa.bezierCurveTo(190 * daliyla, 84.5 * daliyla, 190 * daliyla, 84.5 * daliyla, 183 * daliyla, 68 * daliyla);
  banesa.bezierCurveTo(172.5 * daliyla, 81 * daliyla, 172.5 * daliyla, 81 * daliyla, 162 * daliyla, 94 * daliyla);
  banesa.closePath();
  fill_path(banesa, deus[3]);
  banesa.beginPath();
  banesa.lineCap = "round";
  banesa.lineJoin = "round";
  banesa.moveTo(105 * daliyla, 463 * daliyla);
  banesa.bezierCurveTo(124.5 * daliyla, 466 * daliyla, 124.5 * daliyla, 466 * daliyla, 144 * daliyla, 469 * daliyla);
  banesa.bezierCurveTo(145.5 * daliyla, 478.5 * daliyla, 145.5 * daliyla, 478.5 * daliyla, 147 * daliyla, 488 * daliyla);
  banesa.bezierCurveTo(133.5 * daliyla, 495.5 * daliyla, 133.5 * daliyla, 495.5 * daliyla, 120 * daliyla, 503 * daliyla);
  banesa.bezierCurveTo(108.5 * daliyla, 492 * daliyla, 108.5 * daliyla, 492 * daliyla, 97 * daliyla, 481 * daliyla);
  banesa.closePath();
  fill_path(banesa, deus[1], deus[2], 12.5 * daliyla);
  banesa.globalAlpha = 1;
  banesa.beginPath();
  banesa.lineCap = "round";
  banesa.lineJoin = "round";
  banesa.moveTo(143 * daliyla, 346 * daliyla);
  banesa.bezierCurveTo(125 * daliyla, 352 * daliyla, 125 * daliyla, 352 * daliyla, 107 * daliyla, 358 * daliyla);
  banesa.bezierCurveTo(124 * daliyla, 363 * daliyla, 140 * daliyla, 368 * daliyla, 141 * daliyla, 368 * daliyla);
  banesa.bezierCurveTo(156.5 * daliyla, 367 * daliyla, 156.5 * daliyla, 367 * daliyla, 172 * daliyla, 366 * daliyla);
  banesa.closePath();
  fill_path(banesa, deus[3]);
  return estefanie;
}
function create_sugar_can(babacar, rondez, caelin) {
  var tairy = document.createElement("canvas");
  var shauntea = tairy.getContext("2d");
  tairy.width = 154 * babacar;
  tairy.height = 261 * babacar;
  shauntea.globalAlpha = rondez ? .5 : 1;
  shauntea.translate(0, 10 * babacar);
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(125 * babacar, 69 * babacar);
  shauntea.bezierCurveTo(123.5 * babacar, 141.5 * babacar, 123.5 * babacar, 141.5 * babacar, 122 * babacar, 214 * babacar);
  shauntea.bezierCurveTo(123 * babacar, 228 * babacar, 119 * babacar, 239 * babacar, 102 * babacar, 239 * babacar);
  shauntea.bezierCurveTo(90 * babacar, 238 * babacar, 86 * babacar, 225 * babacar, 89 * babacar, 197 * babacar);
  shauntea.bezierCurveTo(92 * babacar, 159 * babacar, 92 * babacar, 141 * babacar, 94 * babacar, 84 * babacar);
  shauntea.bezierCurveTo(94 * babacar, 58 * babacar, 87 * babacar, 50 * babacar, 73 * babacar, 52 * babacar);
  shauntea.bezierCurveTo(53 * babacar, 54 * babacar, 54 * babacar, 92 * babacar, 34 * babacar, 87 * babacar);
  shauntea.bezierCurveTo(13 * babacar, 85 * babacar, 22 * babacar, 58 * babacar, 34 * babacar, 40 * babacar);
  shauntea.bezierCurveTo(44 * babacar, 24 * babacar, 68 * babacar, 17 * babacar, 86 * babacar, 21 * babacar);
  shauntea.bezierCurveTo(111 * babacar, 23 * babacar, 123 * babacar, 39 * babacar, 125 * babacar, 67 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[0]);
  shauntea.globalAlpha = 1;
  shauntea.translate(0, -10 * babacar);
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(125 * babacar, 69 * babacar);
  shauntea.bezierCurveTo(123.5 * babacar, 141.5 * babacar, 123.5 * babacar, 141.5 * babacar, 122 * babacar, 214 * babacar);
  shauntea.bezierCurveTo(123 * babacar, 228 * babacar, 119 * babacar, 239 * babacar, 102 * babacar, 239 * babacar);
  shauntea.bezierCurveTo(90 * babacar, 238 * babacar, 86 * babacar, 225 * babacar, 89 * babacar, 197 * babacar);
  shauntea.bezierCurveTo(92 * babacar, 159 * babacar, 92 * babacar, 141 * babacar, 94 * babacar, 84 * babacar);
  shauntea.bezierCurveTo(94 * babacar, 58 * babacar, 87 * babacar, 50 * babacar, 73 * babacar, 52 * babacar);
  shauntea.bezierCurveTo(53 * babacar, 54 * babacar, 54 * babacar, 92 * babacar, 34 * babacar, 87 * babacar);
  shauntea.bezierCurveTo(13 * babacar, 85 * babacar, 22 * babacar, 58 * babacar, 34 * babacar, 40 * babacar);
  shauntea.bezierCurveTo(44 * babacar, 24 * babacar, 68 * babacar, 17 * babacar, 86 * babacar, 21 * babacar);
  shauntea.bezierCurveTo(111 * babacar, 23 * babacar, 123 * babacar, 39 * babacar, 125 * babacar, 67 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[1], caelin[2], 4 * babacar);
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(31 * babacar, 43 * babacar);
  shauntea.bezierCurveTo(31 * babacar, 61 * babacar, 43 * babacar, 70 * babacar, 51 * babacar, 75 * babacar);
  shauntea.bezierCurveTo(48 * babacar, 84 * babacar, 41 * babacar, 89 * babacar, 33 * babacar, 86 * babacar);
  shauntea.bezierCurveTo(23 * babacar, 88 * babacar, 20 * babacar, 76 * babacar, 23 * babacar, 62 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[3]);
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(45 * babacar, 29 * babacar);
  shauntea.bezierCurveTo(49 * babacar, 45 * babacar, 61 * babacar, 54 * babacar, 64 * babacar, 55 * babacar);
  shauntea.bezierCurveTo(67.5 * babacar, 53 * babacar, 67.5 * babacar, 53 * babacar, 71 * babacar, 51 * babacar);
  shauntea.bezierCurveTo(80 * babacar, 44 * babacar, 83 * babacar, 33 * babacar, 82 * babacar, 20 * babacar);
  shauntea.bezierCurveTo(59 * babacar, 17 * babacar, 51 * babacar, 23 * babacar, 45 * babacar, 30 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[3]);
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(86 * babacar, 56 * babacar);
  shauntea.bezierCurveTo(90 * babacar, 33 * babacar, 103 * babacar, 25 * babacar, 105 * babacar, 27 * babacar);
  shauntea.bezierCurveTo(116 * babacar, 31 * babacar, 121 * babacar, 45 * babacar, 122 * babacar, 50 * babacar);
  shauntea.bezierCurveTo(112 * babacar, 62 * babacar, 103 * babacar, 63 * babacar, 91 * babacar, 62 * babacar);
  shauntea.bezierCurveTo(89 * babacar, 59.5 * babacar, 89 * babacar, 59.5 * babacar, 87 * babacar, 57 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[3]);
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(93 * babacar, 81 * babacar);
  shauntea.bezierCurveTo(109 * babacar, 82 * babacar, 123 * babacar, 70 * babacar, 124 * babacar, 63 * babacar);
  shauntea.bezierCurveTo(124 * babacar, 75.5 * babacar, 124 * babacar, 75.5 * babacar, 124 * babacar, 88 * babacar);
  shauntea.bezierCurveTo(119 * babacar, 99 * babacar, 103 * babacar, 103 * babacar, 94 * babacar, 103 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[3]);
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(93 * babacar, 124 * babacar);
  shauntea.bezierCurveTo(108 * babacar, 125 * babacar, 122 * babacar, 113 * babacar, 124 * babacar, 106 * babacar);
  shauntea.bezierCurveTo(124 * babacar, 119 * babacar, 124 * babacar, 129 * babacar, 124 * babacar, 132 * babacar);
  shauntea.bezierCurveTo(110 * babacar, 147 * babacar, 94 * babacar, 148 * babacar, 90 * babacar, 147 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[3]);
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(90 * babacar, 170 * babacar);
  shauntea.bezierCurveTo(104 * babacar, 166 * babacar, 122 * babacar, 158 * babacar, 122 * babacar, 151 * babacar);
  shauntea.bezierCurveTo(122 * babacar, 162.5 * babacar, 122 * babacar, 162.5 * babacar, 122 * babacar, 174 * babacar);
  shauntea.bezierCurveTo(111 * babacar, 191 * babacar, 97 * babacar, 191 * babacar, 89 * babacar, 191 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[3]);
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(88 * babacar, 208 * babacar);
  shauntea.bezierCurveTo(100 * babacar, 209 * babacar, 115 * babacar, 205 * babacar, 122 * babacar, 193 * babacar);
  shauntea.bezierCurveTo(122 * babacar, 205.5 * babacar, 122 * babacar, 205.5 * babacar, 122 * babacar, 218 * babacar);
  shauntea.bezierCurveTo(115 * babacar, 229 * babacar, 103 * babacar, 235 * babacar, 90 * babacar, 228 * babacar);
  shauntea.bezierCurveTo(88 * babacar, 224 * babacar, 88 * babacar, 217 * babacar, 88 * babacar, 211 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[3]);
  shauntea.globalAlpha = .4;
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(22 * babacar, 81 * babacar);
  shauntea.bezierCurveTo(32 * babacar, 84 * babacar, 41 * babacar, 81 * babacar, 45 * babacar, 68 * babacar);
  shauntea.bezierCurveTo(50 * babacar, 50 * babacar, 62 * babacar, 40 * babacar, 79 * babacar, 43 * babacar);
  shauntea.bezierCurveTo(95 * babacar, 45 * babacar, 102 * babacar, 58 * babacar, 101 * babacar, 81 * babacar);
  shauntea.bezierCurveTo(99.5 * babacar, 120.5 * babacar, 99.5 * babacar, 120.5 * babacar, 98 * babacar, 160 * babacar);
  shauntea.bezierCurveTo(96.5 * babacar, 191.5 * babacar, 96.5 * babacar, 191.5 * babacar, 95 * babacar, 223 * babacar);
  shauntea.bezierCurveTo(93 * babacar, 232 * babacar, 101 * babacar, 235 * babacar, 108 * babacar, 238 * babacar);
  shauntea.bezierCurveTo(100 * babacar, 240 * babacar, 90 * babacar, 233 * babacar, 90 * babacar, 224 * babacar);
  shauntea.bezierCurveTo(92 * babacar, 157 * babacar, 92 * babacar, 157 * babacar, 94 * babacar, 90 * babacar);
  shauntea.bezierCurveTo(94 * babacar, 56 * babacar, 89 * babacar, 53 * babacar, 77 * babacar, 51 * babacar);
  shauntea.bezierCurveTo(58 * babacar, 50 * babacar, 54 * babacar, 59 * babacar, 49 * babacar, 75 * babacar);
  shauntea.bezierCurveTo(44 * babacar, 91 * babacar, 28 * babacar, 90 * babacar, 23 * babacar, 81 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[0]);
  shauntea.globalAlpha = 1;
  shauntea.beginPath();
  shauntea.lineCap = "round";
  shauntea.lineJoin = "round";
  shauntea.moveTo(82 * babacar, 123 * babacar);
  shauntea.bezierCurveTo(88 * babacar, 130 * babacar, 88 * babacar, 127 * babacar, 94 * babacar, 128 * babacar);
  shauntea.bezierCurveTo(91 * babacar, 136 * babacar, 94 * babacar, 137 * babacar, 99 * babacar, 142 * babacar);
  shauntea.bezierCurveTo(97 * babacar, 149 * babacar, 99 * babacar, 152 * babacar, 105 * babacar, 155 * babacar);
  shauntea.bezierCurveTo(107 * babacar, 159 * babacar, 113 * babacar, 159 * babacar, 120 * babacar, 158 * babacar);
  shauntea.bezierCurveTo(121 * babacar, 160 * babacar, 125 * babacar, 163 * babacar, 132 * babacar, 163 * babacar);
  shauntea.bezierCurveTo(133 * babacar, 166 * babacar, 136 * babacar, 169 * babacar, 138 * babacar, 170 * babacar);
  shauntea.bezierCurveTo(133 * babacar, 171 * babacar, 132 * babacar, 172 * babacar, 129 * babacar, 174 * babacar);
  shauntea.bezierCurveTo(122 * babacar, 170 * babacar, 120 * babacar, 170 * babacar, 116 * babacar, 174 * babacar);
  shauntea.bezierCurveTo(108 * babacar, 170.5 * babacar, 108 * babacar, 170.5 * babacar, 100 * babacar, 167 * babacar);
  shauntea.bezierCurveTo(95 * babacar, 172 * babacar, 94 * babacar, 179 * babacar, 95 * babacar, 184 * babacar);
  shauntea.bezierCurveTo(87 * babacar, 185 * babacar, 87 * babacar, 189 * babacar, 88 * babacar, 194 * babacar);
  shauntea.bezierCurveTo(82 * babacar, 194 * babacar, 81 * babacar, 195 * babacar, 79 * babacar, 197 * babacar);
  shauntea.bezierCurveTo(78 * babacar, 192 * babacar, 78 * babacar, 191 * babacar, 77 * babacar, 189 * babacar);
  shauntea.bezierCurveTo(81 * babacar, 185 * babacar, 82 * babacar, 183 * babacar, 80 * babacar, 176 * babacar);
  shauntea.bezierCurveTo(89 * babacar, 170 * babacar, 92 * babacar, 168 * babacar, 95 * babacar, 163 * babacar);
  shauntea.bezierCurveTo(91 * babacar, 151 * babacar, 88 * babacar, 151 * babacar, 82 * babacar, 147 * babacar);
  shauntea.bezierCurveTo(85 * babacar, 142 * babacar, 85 * babacar, 137 * babacar, 81 * babacar, 133 * babacar);
  shauntea.bezierCurveTo(84 * babacar, 127 * babacar, 84 * babacar, 125 * babacar, 82 * babacar, 124 * babacar);
  shauntea.closePath();
  fill_path(shauntea, caelin[4], caelin[5], 4 * babacar);
  circle(shauntea, 107 * babacar, 152 * babacar, 9 * babacar);
  fill_path(shauntea, caelin[6]);
  circle(shauntea, 105 * babacar, 173 * babacar, 9 * babacar);
  fill_path(shauntea, caelin[6]);
  circle(shauntea, 87 * babacar, 161 * babacar, 9 * babacar);
  fill_path(shauntea, caelin[6]);
  circle(shauntea, 106 * babacar, 147 * babacar, 4 * babacar);
  fill_path(shauntea, caelin[7]);
  circle(shauntea, 104 * babacar, 167 * babacar, 4 * babacar);
  fill_path(shauntea, caelin[7]);
  circle(shauntea, 86 * babacar, 154 * babacar, 4 * babacar);
  fill_path(shauntea, caelin[7]);
  return tairy;
}
function create_cookie(pual, bronston, akyrie) {
  var deaundre = document.createElement("canvas");
  var mikaal = deaundre.getContext("2d");
  deaundre.width = 350 * pual;
  deaundre.height = 140 * pual;
  mikaal.translate(-50 * pual, -150 * pual);
  mikaal.beginPath();
  mikaal.lineCap = "round";
  mikaal.lineJoin = "round";
  mikaal.moveTo(184.5 * pual, 222.0625 * pual);
  mikaal.bezierCurveTo(185.5 * pual, 184.0625 * pual, 302.5 * pual, 171.0625 * pual, 313.5 * pual, 222.0625 * pual);
  mikaal.bezierCurveTo(330.5 * pual, 263.0625 * pual, 181.5 * pual, 274.0625 * pual, 184.5 * pual, 223.0625 * pual);
  mikaal.closePath();
  fill_path(mikaal, akyrie[0], akyrie[1], 8 * pual);
  mikaal.beginPath();
  mikaal.lineCap = "round";
  mikaal.lineJoin = "round";
  mikaal.moveTo(131.5 * pual, 241.0625 * pual);
  mikaal.bezierCurveTo(144.5 * pual, 278.0625 * pual, 270.5 * pual, 209.0625 * pual, 228.5 * pual, 174.0625 * pual);
  mikaal.bezierCurveTo(196.5 * pual, 147.0625 * pual, 117.5 * pual, 196.0625 * pual, 131.5 * pual, 240.0625 * pual);
  mikaal.closePath();
  fill_path(mikaal, akyrie[0], akyrie[1], 8 * pual);
  circle(mikaal, 270.5 * pual, 225.0625 * pual, 15.811388300841896 * pual);
  fill_path(mikaal, akyrie[2]);
  circle(mikaal, 243.5 * pual, 225.0625 * pual, 6.082762530298219 * pual);
  fill_path(mikaal, akyrie[2]);
  circle(mikaal, 255.5 * pual, 210.0625 * pual, 10.816653826391969 * pual);
  fill_path(mikaal, akyrie[2]);
  circle(mikaal, 167.5 * pual, 215.0625 * pual, 15.297058540778355 * pual);
  fill_path(mikaal, akyrie[2]);
  circle(mikaal, 176.5 * pual, 204.0625 * pual, 7.280109889280518 * pual);
  fill_path(mikaal, akyrie[2]);
  circle(mikaal, 206.5 * pual, 189.0625 * pual, 7.280109889280518 * pual);
  fill_path(mikaal, akyrie[2]);
  mikaal.beginPath();
  mikaal.lineCap = "round";
  mikaal.lineJoin = "round";
  mikaal.moveTo(151.5 * pual, 212.0625 * pual);
  mikaal.bezierCurveTo(161.5 * pual, 204.0625 * pual, 173.5 * pual, 214.0625 * pual, 158.5 * pual, 221.0625 * pual);
  mikaal.bezierCurveTo(145.5 * pual, 228.0625 * pual, 144.5 * pual, 216.0625 * pual, 151.5 * pual, 212.0625 * pual);
  mikaal.closePath();
  fill_path(mikaal, akyrie[3], akyrie[4], 4 * pual);
  mikaal.beginPath();
  mikaal.lineCap = "round";
  mikaal.lineJoin = "round";
  mikaal.moveTo(194.5 * pual, 209.0625 * pual);
  mikaal.bezierCurveTo(205.5 * pual, 202.0625 * pual, 215.5 * pual, 207.0625 * pual, 199.5 * pual, 217.0625 * pual);
  mikaal.bezierCurveTo(187.5 * pual, 224.0625 * pual, 182.5 * pual, 217.0625 * pual, 194.5 * pual, 209.0625 * pual);
  mikaal.closePath();
  fill_path(mikaal, akyrie[3], akyrie[4], 4 * pual);
  mikaal.beginPath();
  mikaal.lineCap = "round";
  mikaal.lineJoin = "round";
  mikaal.moveTo(188.5 * pual, 183.0625 * pual);
  mikaal.bezierCurveTo(201.5 * pual, 176.0625 * pual, 213.5 * pual, 187.0625 * pual, 193.5 * pual, 193.0625 * pual);
  mikaal.bezierCurveTo(185.5 * pual, 194.0625 * pual, 175.5 * pual, 189.0625 * pual, 188.5 * pual, 183.0625 * pual);
  mikaal.closePath();
  fill_path(mikaal, akyrie[3], akyrie[4], 4 * pual);
  mikaal.beginPath();
  mikaal.lineCap = "round";
  mikaal.lineJoin = "round";
  mikaal.moveTo(261.5 * pual, 202.0625 * pual);
  mikaal.bezierCurveTo(274.5 * pual, 201.0625 * pual, 282.5 * pual, 214.0625 * pual, 261.5 * pual, 215.0625 * pual);
  mikaal.bezierCurveTo(246.5 * pual, 214.0625 * pual, 248.5 * pual, 203.0625 * pual, 261.5 * pual, 202.0625 * pual);
  mikaal.closePath();
  fill_path(mikaal, akyrie[3], akyrie[4], 4 * pual);
  mikaal.beginPath();
  mikaal.lineCap = "round";
  mikaal.lineJoin = "round";
  mikaal.moveTo(240.5 * pual, 231.0625 * pual);
  mikaal.bezierCurveTo(255.5 * pual, 231.0625 * pual, 254.5 * pual, 243.0625 * pual, 240.5 * pual, 242.0625 * pual);
  mikaal.bezierCurveTo(225.5 * pual, 239.0625 * pual, 225.5 * pual, 232.0625 * pual, 240.5 * pual, 231.0625 * pual);
  mikaal.closePath();
  fill_path(mikaal, akyrie[3], akyrie[4], 4 * pual);
  return deaundre;
}
function create_candy(zaviere, destinique, andrica) {
  var vien = document.createElement("canvas");
  var larance = vien.getContext("2d");
  vien.width = 217 * zaviere;
  vien.height = 215 * zaviere;
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(79 * zaviere, 113 * zaviere);
  larance.bezierCurveTo(135 * zaviere, 98 * zaviere, 136 * zaviere, 96 * zaviere, 142 * zaviere, 97 * zaviere);
  larance.bezierCurveTo(167 * zaviere, 106 * zaviere, 167 * zaviere, 106 * zaviere, 171 * zaviere, 109 * zaviere);
  larance.bezierCurveTo(173 * zaviere, 120 * zaviere, 173 * zaviere, 134 * zaviere, 169 * zaviere, 141 * zaviere);
  larance.bezierCurveTo(140 * zaviere, 149.5 * zaviere, 140 * zaviere, 149.5 * zaviere, 111 * zaviere, 158 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[1], andrica[2], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(154 * zaviere, 103 * zaviere);
  larance.bezierCurveTo(167 * zaviere, 91 * zaviere, 175 * zaviere, 87 * zaviere, 176 * zaviere, 94 * zaviere);
  larance.bezierCurveTo(175 * zaviere, 102 * zaviere, 176 * zaviere, 102 * zaviere, 186 * zaviere, 103 * zaviere);
  larance.bezierCurveTo(191 * zaviere, 104 * zaviere, 192 * zaviere, 105 * zaviere, 185 * zaviere, 116 * zaviere);
  larance.bezierCurveTo(183 * zaviere, 120 * zaviere, 191 * zaviere, 124 * zaviere, 189 * zaviere, 129 * zaviere);
  larance.bezierCurveTo(185 * zaviere, 139 * zaviere, 178 * zaviere, 134 * zaviere, 166 * zaviere, 131 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[1], andrica[2], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(60 * zaviere, 46 * zaviere);
  larance.bezierCurveTo(60 * zaviere, 34 * zaviere, 60 * zaviere, 29 * zaviere, 56 * zaviere, 19 * zaviere);
  larance.bezierCurveTo(52 * zaviere, 12 * zaviere, 52 * zaviere, 16 * zaviere, 49 * zaviere, 24 * zaviere);
  larance.bezierCurveTo(48 * zaviere, 27 * zaviere, 46 * zaviere, 28 * zaviere, 39 * zaviere, 27 * zaviere);
  larance.bezierCurveTo(33 * zaviere, 26 * zaviere, 34 * zaviere, 31 * zaviere, 35 * zaviere, 37 * zaviere);
  larance.bezierCurveTo(36 * zaviere, 41 * zaviere, 27 * zaviere, 46 * zaviere, 29 * zaviere, 52 * zaviere);
  larance.bezierCurveTo(36 * zaviere, 55 * zaviere, 35 * zaviere, 56 * zaviere, 31 * zaviere, 59 * zaviere);
  larance.bezierCurveTo(27 * zaviere, 65 * zaviere, 32 * zaviere, 64 * zaviere, 35 * zaviere, 62 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[4], andrica[5], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(46 * zaviere, 50 * zaviere);
  larance.bezierCurveTo(51 * zaviere, 35 * zaviere, 70 * zaviere, 32 * zaviere, 78 * zaviere, 29 * zaviere);
  larance.bezierCurveTo(84 * zaviere, 27 * zaviere, 113 * zaviere, 36 * zaviere, 127 * zaviere, 41 * zaviere);
  larance.bezierCurveTo(140 * zaviere, 47 * zaviere, 147 * zaviere, 69 * zaviere, 137 * zaviere, 73 * zaviere);
  larance.bezierCurveTo(124 * zaviere, 92 * zaviere, 117 * zaviere, 92 * zaviere, 109 * zaviere, 94 * zaviere);
  larance.bezierCurveTo(101 * zaviere, 96 * zaviere, 89 * zaviere, 92 * zaviere, 65 * zaviere, 83 * zaviere);
  larance.bezierCurveTo(54 * zaviere, 80 * zaviere, 46 * zaviere, 58 * zaviere, 46 * zaviere, 51 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[4], andrica[5], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(51 * zaviere, 40 * zaviere);
  larance.bezierCurveTo(49 * zaviere, 34 * zaviere, 49 * zaviere, 34 * zaviere, 47 * zaviere, 28 * zaviere);
  larance.bezierCurveTo(38 * zaviere, 28 * zaviere, 34 * zaviere, 27 * zaviere, 37 * zaviere, 37 * zaviere);
  larance.bezierCurveTo(43 * zaviere, 40.5 * zaviere, 43 * zaviere, 40.5 * zaviere, 49 * zaviere, 44 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[7]);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(29 * zaviere, 48 * zaviere);
  larance.bezierCurveTo(38 * zaviere, 49 * zaviere, 38 * zaviere, 49 * zaviere, 47 * zaviere, 50 * zaviere);
  larance.bezierCurveTo(46.5 * zaviere, 51.5 * zaviere, 46.5 * zaviere, 51.5 * zaviere, 46 * zaviere, 53 * zaviere);
  larance.bezierCurveTo(40 * zaviere, 53.5 * zaviere, 40 * zaviere, 53.5 * zaviere, 34 * zaviere, 54 * zaviere);
  larance.bezierCurveTo(29 * zaviere, 51 * zaviere, 32 * zaviere, 51.5 * zaviere, 30 * zaviere, 49 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[7]);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(89 * zaviere, 61 * zaviere);
  larance.bezierCurveTo(101 * zaviere, 70 * zaviere, 109 * zaviere, 90 * zaviere, 102 * zaviere, 90 * zaviere);
  larance.bezierCurveTo(97 * zaviere, 91 * zaviere, 87 * zaviere, 91 * zaviere, 60 * zaviere, 80 * zaviere);
  larance.bezierCurveTo(48 * zaviere, 65 * zaviere, 46 * zaviere, 56 * zaviere, 48 * zaviere, 53 * zaviere);
  larance.bezierCurveTo(50 * zaviere, 52 * zaviere, 66 * zaviere, 56 * zaviere, 89 * zaviere, 61 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[7]);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(99 * zaviere, 59 * zaviere);
  larance.bezierCurveTo(115 * zaviere, 45 * zaviere, 125 * zaviere, 42 * zaviere, 129 * zaviere, 47 * zaviere);
  larance.bezierCurveTo(138 * zaviere, 56 * zaviere, 140 * zaviere, 63 * zaviere, 138 * zaviere, 67 * zaviere);
  larance.bezierCurveTo(131 * zaviere, 80 * zaviere, 122 * zaviere, 87 * zaviere, 114 * zaviere, 90 * zaviere);
  larance.bezierCurveTo(105 * zaviere, 80 * zaviere, 95 * zaviere, 62 * zaviere, 98 * zaviere, 61 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[7]);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(118 * zaviere, 62 * zaviere);
  larance.bezierCurveTo(139 * zaviere, 45 * zaviere, 153 * zaviere, 40 * zaviere, 150 * zaviere, 48 * zaviere);
  larance.bezierCurveTo(145 * zaviere, 57 * zaviere, 157 * zaviere, 63 * zaviere, 157 * zaviere, 70 * zaviere);
  larance.bezierCurveTo(157 * zaviere, 74 * zaviere, 142 * zaviere, 77 * zaviere, 142 * zaviere, 85 * zaviere);
  larance.bezierCurveTo(143 * zaviere, 91 * zaviere, 141 * zaviere, 92 * zaviere, 135 * zaviere, 90 * zaviere);
  larance.bezierCurveTo(132 * zaviere, 90 * zaviere, 132 * zaviere, 96 * zaviere, 124 * zaviere, 99 * zaviere);
  larance.bezierCurveTo(118 * zaviere, 93 * zaviere, 116 * zaviere, 77 * zaviere, 116 * zaviere, 64 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[4], andrica[5], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(90 * zaviere, 130 * zaviere);
  larance.bezierCurveTo(157 * zaviere, 115 * zaviere, 165 * zaviere, 111 * zaviere, 167 * zaviere, 115 * zaviere);
  larance.bezierCurveTo(170 * zaviere, 117 * zaviere, 171 * zaviere, 135 * zaviere, 167 * zaviere, 141 * zaviere);
  larance.bezierCurveTo(135.5 * zaviere, 149.5 * zaviere, 135.5 * zaviere, 149.5 * zaviere, 104 * zaviere, 158 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[8]);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(53 * zaviere, 119 * zaviere);
  larance.bezierCurveTo(46 * zaviere, 120 * zaviere, 40 * zaviere, 118 * zaviere, 34 * zaviere, 116 * zaviere);
  larance.bezierCurveTo(28 * zaviere, 111 * zaviere, 41 * zaviere, 112 * zaviere, 39 * zaviere, 108 * zaviere);
  larance.bezierCurveTo(36 * zaviere, 100 * zaviere, 49 * zaviere, 102 * zaviere, 53 * zaviere, 95 * zaviere);
  larance.bezierCurveTo(57 * zaviere, 84 * zaviere, 58 * zaviere, 85 * zaviere, 63 * zaviere, 93 * zaviere);
  larance.bezierCurveTo(68 * zaviere, 96 * zaviere, 72 * zaviere, 94 * zaviere, 80 * zaviere, 88 * zaviere);
  larance.bezierCurveTo(80 * zaviere, 96 * zaviere, 78 * zaviere, 107 * zaviere, 66 * zaviere, 115 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[9], andrica[10], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(118 * zaviere, 64 * zaviere);
  larance.bezierCurveTo(133.5 * zaviere, 57 * zaviere, 133.5 * zaviere, 57 * zaviere, 149 * zaviere, 50 * zaviere);
  larance.bezierCurveTo(145 * zaviere, 54 * zaviere, 154 * zaviere, 65 * zaviere, 157 * zaviere, 68 * zaviere);
  larance.bezierCurveTo(138.5 * zaviere, 66.5 * zaviere, 138.5 * zaviere, 66.5 * zaviere, 120 * zaviere, 65 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[8]);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(118 * zaviere, 65 * zaviere);
  larance.bezierCurveTo(129 * zaviere, 77 * zaviere, 129 * zaviere, 77 * zaviere, 140 * zaviere, 89 * zaviere);
  larance.bezierCurveTo(131 * zaviere, 89 * zaviere, 130 * zaviere, 92 * zaviere, 128 * zaviere, 96 * zaviere);
  larance.bezierCurveTo(123.5 * zaviere, 82 * zaviere, 123.5 * zaviere, 82 * zaviere, 119 * zaviere, 68 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[8]);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(51 * zaviere, 112 * zaviere);
  larance.bezierCurveTo(63 * zaviere, 108 * zaviere, 78 * zaviere, 111 * zaviere, 88 * zaviere, 112 * zaviere);
  larance.bezierCurveTo(98 * zaviere, 122 * zaviere, 117 * zaviere, 136 * zaviere, 125 * zaviere, 157 * zaviere);
  larance.bezierCurveTo(123 * zaviere, 180 * zaviere, 123 * zaviere, 185 * zaviere, 118 * zaviere, 186 * zaviere);
  larance.bezierCurveTo(101 * zaviere, 190 * zaviere, 89 * zaviere, 191 * zaviere, 79 * zaviere, 187 * zaviere);
  larance.bezierCurveTo(53 * zaviere, 165 * zaviere, 50 * zaviere, 153 * zaviere, 47 * zaviere, 144 * zaviere);
  larance.bezierCurveTo(46 * zaviere, 128 * zaviere, 46 * zaviere, 124 * zaviere, 50 * zaviere, 112 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[9], andrica[10], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(50 * zaviere, 114 * zaviere);
  larance.bezierCurveTo(81 * zaviere, 149 * zaviere, 80 * zaviere, 147 * zaviere, 80 * zaviere, 149 * zaviere);
  larance.bezierCurveTo(82 * zaviere, 155 * zaviere, 80 * zaviere, 182 * zaviere, 74 * zaviere, 182 * zaviere);
  larance.bezierCurveTo(60 * zaviere, 172 * zaviere, 52 * zaviere, 157 * zaviere, 47 * zaviere, 144 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[11], andrica[11], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(85 * zaviere, 152 * zaviere);
  larance.bezierCurveTo(99 * zaviere, 150 * zaviere, 109 * zaviere, 152 * zaviere, 119 * zaviere, 156 * zaviere);
  larance.bezierCurveTo(122 * zaviere, 163 * zaviere, 122 * zaviere, 174 * zaviere, 117 * zaviere, 182 * zaviere);
  larance.closePath();
  larance.bezierCurveTo(93 * zaviere, 188 * zaviere, 82 * zaviere, 187 * zaviere, 83 * zaviere, 179 * zaviere);
  fill_path(larance, andrica[11], andrica[11], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(104 * zaviere, 166 * zaviere);
  larance.bezierCurveTo(133 * zaviere, 165 * zaviere, 142 * zaviere, 168 * zaviere, 137 * zaviere, 173 * zaviere);
  larance.bezierCurveTo(127 * zaviere, 177 * zaviere, 137 * zaviere, 195 * zaviere, 126 * zaviere, 196 * zaviere);
  larance.bezierCurveTo(112 * zaviere, 195 * zaviere, 112 * zaviere, 194 * zaviere, 109 * zaviere, 199 * zaviere);
  larance.bezierCurveTo(105 * zaviere, 205 * zaviere, 102 * zaviere, 195 * zaviere, 96 * zaviere, 197 * zaviere);
  larance.bezierCurveTo(84 * zaviere, 201 * zaviere, 88 * zaviere, 198 * zaviere, 90 * zaviere, 187 * zaviere);
  larance.bezierCurveTo(96 * zaviere, 171 * zaviere, 97 * zaviere, 170 * zaviere, 103 * zaviere, 167 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[9], andrica[10], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(105 * zaviere, 168 * zaviere);
  larance.bezierCurveTo(118 * zaviere, 172.5 * zaviere, 118 * zaviere, 172.5 * zaviere, 131 * zaviere, 177 * zaviere);
  larance.bezierCurveTo(133 * zaviere, 190 * zaviere, 132 * zaviere, 199 * zaviere, 116 * zaviere, 194 * zaviere);
  larance.bezierCurveTo(110 * zaviere, 182 * zaviere, 110 * zaviere, 182 * zaviere, 104 * zaviere, 170 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[10]);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(102 * zaviere, 169 * zaviere);
  larance.bezierCurveTo(100.5 * zaviere, 182 * zaviere, 100.5 * zaviere, 182 * zaviere, 99 * zaviere, 195 * zaviere);
  larance.bezierCurveTo(93.5 * zaviere, 196.5 * zaviere, 93.5 * zaviere, 196.5 * zaviere, 88 * zaviere, 198 * zaviere);
  larance.bezierCurveTo(94 * zaviere, 176 * zaviere, 96 * zaviere, 174 * zaviere, 101 * zaviere, 168 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[9], andrica[9], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(64 * zaviere, 107 * zaviere);
  larance.bezierCurveTo(64 * zaviere, 101 * zaviere, 64 * zaviere, 101 * zaviere, 64 * zaviere, 95 * zaviere);
  larance.bezierCurveTo(57 * zaviere, 86 * zaviere, 57 * zaviere, 84 * zaviere, 53 * zaviere, 97 * zaviere);
  larance.bezierCurveTo(55 * zaviere, 103.5 * zaviere, 55 * zaviere, 103.5 * zaviere, 57 * zaviere, 110 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[11], andrica[11], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(40 * zaviere, 108 * zaviere);
  larance.bezierCurveTo(46.5 * zaviere, 111 * zaviere, 46.5 * zaviere, 111 * zaviere, 53 * zaviere, 114 * zaviere);
  larance.bezierCurveTo(50.5 * zaviere, 117 * zaviere, 50.5 * zaviere, 117 * zaviere, 48 * zaviere, 120 * zaviere);
  larance.bezierCurveTo(40.5 * zaviere, 117.5 * zaviere, 40.5 * zaviere, 117.5 * zaviere, 33 * zaviere, 115 * zaviere);
  larance.bezierCurveTo(36 * zaviere, 112 * zaviere, 36 * zaviere, 112 * zaviere, 39 * zaviere, 109 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[11], andrica[11], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(189 * zaviere, 106 * zaviere);
  larance.bezierCurveTo(178.5 * zaviere, 110.5 * zaviere, 178.5 * zaviere, 110.5 * zaviere, 168 * zaviere, 115 * zaviere);
  larance.bezierCurveTo(168.5 * zaviere, 119 * zaviere, 168.5 * zaviere, 119 * zaviere, 169 * zaviere, 123 * zaviere);
  larance.bezierCurveTo(179 * zaviere, 124.5 * zaviere, 179 * zaviere, 124.5 * zaviere, 189 * zaviere, 126 * zaviere);
  larance.bezierCurveTo(182 * zaviere, 118 * zaviere, 183 * zaviere, 115 * zaviere, 188 * zaviere, 106 * zaviere);
  larance.closePath();
  fill_path(larance, andrica[8]);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(69 * zaviere, 178 * zaviere);
  larance.bezierCurveTo(69 * zaviere, 141 * zaviere, 70 * zaviere, 136 * zaviere, 77 * zaviere, 137 * zaviere);
  larance.bezierCurveTo(88 * zaviere, 133 * zaviere, 101 * zaviere, 134 * zaviere, 108 * zaviere, 137 * zaviere);
  fill_path(larance, undefined, andrica[3], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(55 * zaviere, 161 * zaviere);
  larance.bezierCurveTo(54 * zaviere, 124 * zaviere, 55 * zaviere, 119 * zaviere, 62 * zaviere, 119 * zaviere);
  larance.bezierCurveTo(74 * zaviere, 117 * zaviere, 85 * zaviere, 117 * zaviere, 93 * zaviere, 119 * zaviere);
  fill_path(larance, undefined, andrica[3], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(91 * zaviere, 29 * zaviere);
  larance.bezierCurveTo(74 * zaviere, 33 * zaviere, 62 * zaviere, 46 * zaviere, 57 * zaviere, 54 * zaviere);
  larance.bezierCurveTo(57 * zaviere, 63 * zaviere, 68 * zaviere, 76 * zaviere, 77 * zaviere, 87 * zaviere);
  fill_path(larance, undefined, andrica[6], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(107 * zaviere, 33 * zaviere);
  larance.bezierCurveTo(82 * zaviere, 51 * zaviere, 80 * zaviere, 52 * zaviere, 79 * zaviere, 59 * zaviere);
  larance.bezierCurveTo(78 * zaviere, 65 * zaviere, 93 * zaviere, 86 * zaviere, 101 * zaviere, 93 * zaviere);
  fill_path(larance, undefined, andrica[6], 4 * zaviere);
  larance.beginPath();
  larance.lineCap = "round";
  larance.lineJoin = "round";
  larance.moveTo(130 * zaviere, 98 * zaviere);
  larance.bezierCurveTo(126.5 * zaviere, 103 * zaviere, 126.5 * zaviere, 103 * zaviere, 123 * zaviere, 108 * zaviere);
  larance.bezierCurveTo(133.5 * zaviere, 107 * zaviere, 133.5 * zaviere, 107 * zaviere, 144 * zaviere, 106 * zaviere);
  larance.bezierCurveTo(138.5 * zaviere, 110 * zaviere, 138.5 * zaviere, 110 * zaviere, 133 * zaviere, 114 * zaviere);
  larance.bezierCurveTo(142 * zaviere, 114 * zaviere, 142 * zaviere, 114 * zaviere, 151 * zaviere, 114 * zaviere);
  larance.bezierCurveTo(146.5 * zaviere, 119.5 * zaviere, 146.5 * zaviere, 119.5 * zaviere, 142 * zaviere, 125 * zaviere);
  larance.bezierCurveTo(146.5 * zaviere, 127 * zaviere, 146.5 * zaviere, 127 * zaviere, 151 * zaviere, 129 * zaviere);
  larance.bezierCurveTo(147.5 * zaviere, 132 * zaviere, 147.5 * zaviere, 132 * zaviere, 144 * zaviere, 135 * zaviere);
  larance.bezierCurveTo(148 * zaviere, 137 * zaviere, 148 * zaviere, 137 * zaviere, 152 * zaviere, 139 * zaviere);
  larance.bezierCurveTo(149 * zaviere, 142.5 * zaviere, 149 * zaviere, 142.5 * zaviere, 146 * zaviere, 146 * zaviere);
  fill_path(larance, undefined, andrica[3], 4 * zaviere);
  return vien;
}
function create_ferrero_rocher(nashyah, enette, shaquera) {
  var stepen = document.createElement("canvas");
  var vermonica = stepen.getContext("2d");
  stepen.width = 118 * nashyah;
  stepen.height = 114 * nashyah;
  vermonica.translate(0, 10 * nashyah);
  circle(vermonica, 42 * nashyah, 43 * nashyah, 24.758836806279895 * nashyah);
  fill_path(vermonica, shaquera[0]);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(65 * nashyah, 90 * nashyah);
  vermonica.bezierCurveTo(72 * nashyah, 91 * nashyah, 75 * nashyah, 92 * nashyah, 71 * nashyah, 96 * nashyah);
  vermonica.bezierCurveTo(65 * nashyah, 98 * nashyah, 65 * nashyah, 94 * nashyah, 65 * nashyah, 91 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[0]);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(87 * nashyah, 45 * nashyah);
  vermonica.bezierCurveTo(108 * nashyah, 59 * nashyah, 100 * nashyah, 86 * nashyah, 85 * nashyah, 91 * nashyah);
  vermonica.bezierCurveTo(80 * nashyah, 96 * nashyah, 68 * nashyah, 95 * nashyah, 58 * nashyah, 87 * nashyah);
  vermonica.bezierCurveTo(53 * nashyah, 80 * nashyah, 61 * nashyah, 64 * nashyah, 66 * nashyah, 58 * nashyah);
  vermonica.bezierCurveTo(73 * nashyah, 48 * nashyah, 78 * nashyah, 44 * nashyah, 87 * nashyah, 45 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[0]);
  vermonica.translate(0, -10 * nashyah);
  circle(vermonica, 42 * nashyah, 43 * nashyah, 24.758836806279895 * nashyah);
  fill_path(vermonica, shaquera[1], shaquera[2], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(65 * nashyah, 90 * nashyah);
  vermonica.bezierCurveTo(72 * nashyah, 91 * nashyah, 75 * nashyah, 92 * nashyah, 71 * nashyah, 96 * nashyah);
  vermonica.bezierCurveTo(65 * nashyah, 98 * nashyah, 65 * nashyah, 94 * nashyah, 65 * nashyah, 91 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[1], shaquera[2], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(87 * nashyah, 45 * nashyah);
  vermonica.bezierCurveTo(108 * nashyah, 59 * nashyah, 100 * nashyah, 86 * nashyah, 85 * nashyah, 91 * nashyah);
  vermonica.bezierCurveTo(80 * nashyah, 96 * nashyah, 68 * nashyah, 95 * nashyah, 58 * nashyah, 87 * nashyah);
  vermonica.bezierCurveTo(53 * nashyah, 80 * nashyah, 61 * nashyah, 64 * nashyah, 66 * nashyah, 58 * nashyah);
  vermonica.bezierCurveTo(73 * nashyah, 48 * nashyah, 78 * nashyah, 44 * nashyah, 87 * nashyah, 45 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[1], shaquera[2], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(52 * nashyah, 16 * nashyah);
  vermonica.bezierCurveTo(55 * nashyah, 19 * nashyah, 54 * nashyah, 20 * nashyah, 55 * nashyah, 22 * nashyah);
  vermonica.bezierCurveTo(52 * nashyah, 24.5 * nashyah, 52 * nashyah, 24.5 * nashyah, 49 * nashyah, 27 * nashyah);
  vermonica.bezierCurveTo(45 * nashyah, 25 * nashyah, 45 * nashyah, 25 * nashyah, 41 * nashyah, 23 * nashyah);
  vermonica.bezierCurveTo(45 * nashyah, 19 * nashyah, 48 * nashyah, 16 * nashyah, 52 * nashyah, 16 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(62 * nashyah, 30 * nashyah);
  vermonica.bezierCurveTo(66 * nashyah, 29 * nashyah, 64 * nashyah, 30 * nashyah, 66 * nashyah, 30 * nashyah);
  vermonica.bezierCurveTo(67 * nashyah, 31 * nashyah, 67 * nashyah, 31 * nashyah, 68 * nashyah, 32 * nashyah);
  vermonica.bezierCurveTo(66.5 * nashyah, 33.5 * nashyah, 66.5 * nashyah, 33.5 * nashyah, 65 * nashyah, 35 * nashyah);
  vermonica.bezierCurveTo(63.5 * nashyah, 32.5 * nashyah, 63.5 * nashyah, 32.5 * nashyah, 62 * nashyah, 30 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(29 * nashyah, 21 * nashyah);
  vermonica.bezierCurveTo(31 * nashyah, 22 * nashyah, 31 * nashyah, 26 * nashyah, 29 * nashyah, 29 * nashyah);
  vermonica.bezierCurveTo(26 * nashyah, 28.5 * nashyah, 26 * nashyah, 28.5 * nashyah, 23 * nashyah, 28 * nashyah);
  vermonica.bezierCurveTo(23 * nashyah, 26.5 * nashyah, 23 * nashyah, 26.5 * nashyah, 23 * nashyah, 25 * nashyah);
  vermonica.bezierCurveTo(25 * nashyah, 23 * nashyah, 25 * nashyah, 23 * nashyah, 27 * nashyah, 21 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(18 * nashyah, 36 * nashyah);
  vermonica.bezierCurveTo(23 * nashyah, 36 * nashyah, 24 * nashyah, 42 * nashyah, 19 * nashyah, 46 * nashyah);
  vermonica.bezierCurveTo(12 * nashyah, 39 * nashyah, 15 * nashyah, 38 * nashyah, 18 * nashyah, 37 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(30 * nashyah, 34 * nashyah);
  vermonica.bezierCurveTo(35 * nashyah, 36 * nashyah, 36 * nashyah, 39 * nashyah, 32 * nashyah, 45 * nashyah);
  vermonica.bezierCurveTo(25 * nashyah, 46 * nashyah, 25 * nashyah, 44 * nashyah, 30 * nashyah, 34 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(59 * nashyah, 35 * nashyah);
  vermonica.bezierCurveTo(58 * nashyah, 27 * nashyah, 57 * nashyah, 27 * nashyah, 52 * nashyah, 31 * nashyah);
  vermonica.bezierCurveTo(50 * nashyah, 36 * nashyah, 53 * nashyah, 38 * nashyah, 58 * nashyah, 36 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(63 * nashyah, 46 * nashyah);
  vermonica.bezierCurveTo(64.5 * nashyah, 46.5 * nashyah, 64.5 * nashyah, 46.5 * nashyah, 66 * nashyah, 47 * nashyah);
  vermonica.bezierCurveTo(70 * nashyah, 50 * nashyah, 70 * nashyah, 53 * nashyah, 61 * nashyah, 55 * nashyah);
  vermonica.bezierCurveTo(62 * nashyah, 50.5 * nashyah, 62 * nashyah, 50.5 * nashyah, 63 * nashyah, 46 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(41 * nashyah, 42 * nashyah);
  vermonica.bezierCurveTo(47 * nashyah, 41 * nashyah, 53 * nashyah, 47 * nashyah, 46 * nashyah, 51 * nashyah);
  vermonica.bezierCurveTo(38 * nashyah, 49 * nashyah, 39 * nashyah, 46 * nashyah, 41 * nashyah, 43 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(44 * nashyah, 57 * nashyah);
  vermonica.bezierCurveTo(54 * nashyah, 57 * nashyah, 54 * nashyah, 58 * nashyah, 55 * nashyah, 61 * nashyah);
  vermonica.bezierCurveTo(54 * nashyah, 63 * nashyah, 52 * nashyah, 64 * nashyah, 48 * nashyah, 65 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(20 * nashyah, 52 * nashyah);
  vermonica.bezierCurveTo(25 * nashyah, 51 * nashyah, 27 * nashyah, 50 * nashyah, 28 * nashyah, 54 * nashyah);
  vermonica.bezierCurveTo(27 * nashyah, 58 * nashyah, 24 * nashyah, 58 * nashyah, 22 * nashyah, 58 * nashyah);
  vermonica.bezierCurveTo(21 * nashyah, 55.5 * nashyah, 21 * nashyah, 55.5 * nashyah, 20 * nashyah, 53 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(30 * nashyah, 61 * nashyah);
  vermonica.bezierCurveTo(37 * nashyah, 61 * nashyah, 39 * nashyah, 63 * nashyah, 39 * nashyah, 68 * nashyah);
  vermonica.bezierCurveTo(36 * nashyah, 68.5 * nashyah, 36 * nashyah, 68.5 * nashyah, 33 * nashyah, 69 * nashyah);
  vermonica.bezierCurveTo(30.5 * nashyah, 67.5 * nashyah, 30.5 * nashyah, 67.5 * nashyah, 28 * nashyah, 66 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(88 * nashyah, 45 * nashyah);
  vermonica.bezierCurveTo(90 * nashyah, 46.5 * nashyah, 90 * nashyah, 46.5 * nashyah, 92 * nashyah, 48 * nashyah);
  vermonica.bezierCurveTo(92 * nashyah, 50 * nashyah, 92 * nashyah, 50 * nashyah, 92 * nashyah, 52 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(96 * nashyah, 53 * nashyah);
  vermonica.bezierCurveTo(97.5 * nashyah, 55 * nashyah, 97.5 * nashyah, 55 * nashyah, 99 * nashyah, 57 * nashyah);
  vermonica.bezierCurveTo(97.5 * nashyah, 59.5 * nashyah, 97.5 * nashyah, 59.5 * nashyah, 96 * nashyah, 62 * nashyah);
  vermonica.bezierCurveTo(93.5 * nashyah, 60.5 * nashyah, 93.5 * nashyah, 60.5 * nashyah, 91 * nashyah, 59 * nashyah);
  vermonica.bezierCurveTo(91.5 * nashyah, 57 * nashyah, 91.5 * nashyah, 57 * nashyah, 92 * nashyah, 55 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(92 * nashyah, 71 * nashyah);
  vermonica.bezierCurveTo(94.5 * nashyah, 70.5 * nashyah, 94.5 * nashyah, 70.5 * nashyah, 97 * nashyah, 70 * nashyah);
  vermonica.bezierCurveTo(98.5 * nashyah, 72.5 * nashyah, 98.5 * nashyah, 72.5 * nashyah, 100 * nashyah, 75 * nashyah);
  vermonica.bezierCurveTo(97 * nashyah, 76.5 * nashyah, 97 * nashyah, 76.5 * nashyah, 94 * nashyah, 78 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(95 * nashyah, 82 * nashyah);
  vermonica.bezierCurveTo(96 * nashyah, 83 * nashyah, 96 * nashyah, 83 * nashyah, 97 * nashyah, 84 * nashyah);
  vermonica.bezierCurveTo(97 * nashyah, 85.5 * nashyah, 97 * nashyah, 85.5 * nashyah, 97 * nashyah, 87 * nashyah);
  vermonica.bezierCurveTo(93.5 * nashyah, 87.5 * nashyah, 93.5 * nashyah, 87.5 * nashyah, 90 * nashyah, 88 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(86 * nashyah, 72 * nashyah);
  vermonica.bezierCurveTo(89 * nashyah, 76 * nashyah, 88 * nashyah, 81 * nashyah, 85 * nashyah, 82 * nashyah);
  vermonica.bezierCurveTo(80 * nashyah, 80 * nashyah, 82 * nashyah, 78 * nashyah, 85 * nashyah, 72 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(80 * nashyah, 86 * nashyah);
  vermonica.bezierCurveTo(84 * nashyah, 88 * nashyah, 86 * nashyah, 88 * nashyah, 85 * nashyah, 93 * nashyah);
  vermonica.bezierCurveTo(80 * nashyah, 96 * nashyah, 79 * nashyah, 96 * nashyah, 76 * nashyah, 91 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[3], shaquera[4], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(84 * nashyah, 46 * nashyah);
  vermonica.bezierCurveTo(93 * nashyah, 51 * nashyah, 91 * nashyah, 62 * nashyah, 80 * nashyah, 78 * nashyah);
  vermonica.bezierCurveTo(74 * nashyah, 86 * nashyah, 66 * nashyah, 90 * nashyah, 60 * nashyah, 86 * nashyah);
  vermonica.bezierCurveTo(55 * nashyah, 79 * nashyah, 57 * nashyah, 73 * nashyah, 67 * nashyah, 57 * nashyah);
  vermonica.bezierCurveTo(71 * nashyah, 51 * nashyah, 79 * nashyah, 44 * nashyah, 84 * nashyah, 46 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[5], shaquera[6], 5 * nashyah);
  vermonica.beginPath();
  vermonica.lineCap = "round";
  vermonica.lineJoin = "round";
  vermonica.moveTo(76 * nashyah, 60 * nashyah);
  vermonica.bezierCurveTo(80 * nashyah, 66 * nashyah, 75 * nashyah, 74 * nashyah, 68 * nashyah, 74 * nashyah);
  vermonica.bezierCurveTo(60 * nashyah, 64 * nashyah, 68 * nashyah, 59 * nashyah, 76 * nashyah, 59 * nashyah);
  vermonica.closePath();
  fill_path(vermonica, shaquera[7], shaquera[8], 5 * nashyah);
  return stepen;
}
function create_seed(simren, vara, saakshi) {
  var katalea = document.createElement("canvas");
  var tarkeshia = katalea.getContext("2d");
  var larah = simren * 70;
  var dazah = simren * 90;
  var darri = simren * 4;
  var venesa = simren * 5;
  var yorlei = larah / 2;
  var johnese = dazah / 2;
  var diesel = simren * 10;
  var louese = simren * 100;
  var madesyn = simren * 100;
  var diaquan = louese / 2;
  var fumie = madesyn / 2;
  katalea.width = larah;
  katalea.height = dazah;
  tarkeshia.save();
  tarkeshia.translate(-80 * simren, -70 * simren + venesa);
  tarkeshia.globalAlpha = .5;
  tarkeshia.beginPath();
  tarkeshia.bezierCurveTo(130 * simren, 79 * simren, 132 * simren, 86 * simren, 130 * simren, 93 * simren);
  tarkeshia.bezierCurveTo(128 * simren, 100 * simren, 121 * simren, 107 * simren, 120 * simren, 107 * simren);
  tarkeshia.bezierCurveTo(120 * simren, 107 * simren, 115 * simren, 98 * simren, 115 * simren, 92 * simren);
  tarkeshia.bezierCurveTo(115 * simren, 86 * simren, 119 * simren, 76 * simren, 127 * simren, 73 * simren);
  tarkeshia.closePath();
  fill_path(tarkeshia, "#0d1b1c");
  tarkeshia.restore();
  tarkeshia.save();
  tarkeshia.translate(-80 * simren, -70 * simren + venesa);
  tarkeshia.globalAlpha = .5;
  tarkeshia.beginPath();
  tarkeshia.bezierCurveTo(112 * simren, 109 * simren, 111 * simren, 100 * simren, 106 * simren, 93 * simren);
  tarkeshia.bezierCurveTo(104 * simren, 90 * simren, 91 * simren, 87 * simren, 91 * simren, 87 * simren);
  tarkeshia.bezierCurveTo(91 * simren, 88 * simren, 91 * simren, 96 * simren, 94 * simren, 102 * simren);
  tarkeshia.bezierCurveTo(97 * simren, 108 * simren, 106 * simren, 112 * simren, 113 * simren, 112 * simren);
  tarkeshia.closePath();
  fill_path(tarkeshia, "#0d1b1c");
  tarkeshia.restore();
  tarkeshia.save();
  tarkeshia.translate(-80 * simren, -70 * simren + venesa);
  tarkeshia.globalAlpha = .5;
  tarkeshia.beginPath();
  tarkeshia.bezierCurveTo(108 * simren, 120 * simren, 100 * simren, 119 * simren, 91 * simren, 127 * simren);
  tarkeshia.bezierCurveTo(83 * simren, 134 * simren, 82 * simren, 146 * simren, 83 * simren, 146 * simren);
  tarkeshia.bezierCurveTo(84 * simren, 146 * simren, 98 * simren, 142 * simren, 103 * simren, 138 * simren);
  tarkeshia.bezierCurveTo(107 * simren, 135 * simren, 110 * simren, 130 * simren, 112 * simren, 121 * simren);
  tarkeshia.closePath();
  fill_path(tarkeshia, "#0d1b1c");
  tarkeshia.restore();
  tarkeshia.save();
  tarkeshia.translate(3 * simren, -93 * simren + venesa);
  tarkeshia.rotate(Math.PI / 5);
  tarkeshia.globalAlpha = .5;
  tarkeshia.beginPath();
  tarkeshia.bezierCurveTo(130 * simren, 79 * simren, 132 * simren, 86 * simren, 130 * simren, 93 * simren);
  tarkeshia.bezierCurveTo(128 * simren, 100 * simren, 121 * simren, 107 * simren, 120 * simren, 107 * simren);
  tarkeshia.bezierCurveTo(120 * simren, 107 * simren, 115 * simren, 98 * simren, 115 * simren, 92 * simren);
  tarkeshia.bezierCurveTo(115 * simren, 86 * simren, 119 * simren, 76 * simren, 127 * simren, 73 * simren);
  tarkeshia.closePath();
  fill_path(tarkeshia, "#0d1b1c");
  tarkeshia.restore();
  tarkeshia.save();
  tarkeshia.translate(-80 * simren, -70 * simren);
  tarkeshia.globalAlpha = 1;
  tarkeshia.beginPath();
  tarkeshia.bezierCurveTo(130 * simren, 79 * simren, 132 * simren, 86 * simren, 130 * simren, 93 * simren);
  tarkeshia.bezierCurveTo(128 * simren, 100 * simren, 121 * simren, 107 * simren, 120 * simren, 107 * simren);
  tarkeshia.bezierCurveTo(120 * simren, 107 * simren, 115 * simren, 98 * simren, 115 * simren, 92 * simren);
  tarkeshia.bezierCurveTo(115 * simren, 86 * simren, 119 * simren, 76 * simren, 127 * simren, 73 * simren);
  tarkeshia.closePath();
  fill_path(tarkeshia, saakshi[0], saakshi[1], darri);
  tarkeshia.restore();
  tarkeshia.save();
  tarkeshia.translate(-80 * simren, -70 * simren);
  tarkeshia.globalAlpha = 1;
  tarkeshia.beginPath();
  tarkeshia.bezierCurveTo(112 * simren, 109 * simren, 111 * simren, 100 * simren, 106 * simren, 93 * simren);
  tarkeshia.bezierCurveTo(104 * simren, 90 * simren, 91 * simren, 87 * simren, 91 * simren, 87 * simren);
  tarkeshia.bezierCurveTo(91 * simren, 88 * simren, 91 * simren, 96 * simren, 94 * simren, 102 * simren);
  tarkeshia.bezierCurveTo(97 * simren, 108 * simren, 106 * simren, 112 * simren, 113 * simren, 112 * simren);
  tarkeshia.closePath();
  fill_path(tarkeshia, saakshi[0], saakshi[1], darri);
  tarkeshia.restore();
  tarkeshia.save();
  tarkeshia.translate(-80 * simren, -70 * simren);
  tarkeshia.globalAlpha = 1;
  tarkeshia.beginPath();
  tarkeshia.bezierCurveTo(108 * simren, 120 * simren, 100 * simren, 119 * simren, 91 * simren, 127 * simren);
  tarkeshia.bezierCurveTo(83 * simren, 134 * simren, 82 * simren, 146 * simren, 83 * simren, 146 * simren);
  tarkeshia.bezierCurveTo(84 * simren, 146 * simren, 98 * simren, 142 * simren, 103 * simren, 138 * simren);
  tarkeshia.bezierCurveTo(107 * simren, 135 * simren, 110 * simren, 130 * simren, 112 * simren, 121 * simren);
  tarkeshia.closePath();
  fill_path(tarkeshia, saakshi[0], saakshi[1], darri);
  tarkeshia.restore();
  tarkeshia.save();
  tarkeshia.translate(3 * simren, -93 * simren);
  tarkeshia.rotate(Math.PI / 5);
  tarkeshia.globalAlpha = 1;
  tarkeshia.beginPath();
  tarkeshia.bezierCurveTo(130 * simren, 79 * simren, 132 * simren, 86 * simren, 130 * simren, 93 * simren);
  tarkeshia.bezierCurveTo(128 * simren, 100 * simren, 121 * simren, 107 * simren, 120 * simren, 107 * simren);
  tarkeshia.bezierCurveTo(120 * simren, 107 * simren, 115 * simren, 98 * simren, 115 * simren, 92 * simren);
  tarkeshia.bezierCurveTo(115 * simren, 86 * simren, 119 * simren, 76 * simren, 127 * simren, 73 * simren);
  tarkeshia.closePath();
  fill_path(tarkeshia, saakshi[0], saakshi[1], darri);
  tarkeshia.restore();
  return katalea;
}
function create_info_box(jalyla) {
  var corabella = document.createElement("canvas");
  var jenefer = corabella.getContext("2d");
  var shakaira = LANG[jalyla];
  jenefer.font = "20px Baloo Paaji";
  var jhamal = 0;
  if (shakaira.length >= 1) {
    jhamal = Math.max(0, jenefer.measureText(shakaira[0]).width);
  }
  jenefer.font = "17px Baloo Paaji";
  if (shakaira.length >= 2) {
    jhamal = Math.max(jhamal, jenefer.measureText(shakaira[1]).width);
  }
  jenefer.font = "14px Baloo Paaji";
  for (i = 2; i < shakaira.length; i++) {
    jhamal = Math.max(jhamal, jenefer.measureText(shakaira[i]).width);
  }
  var girtha = jhamal + 35;
  var altheia = 0;
  if (shakaira.length === 1) {
    altheia = 55;
  } else {
    if (shakaira.length === 2) {
      altheia = 85;
    } else {
      altheia = (shakaira.length - 2) * 26 + 85;
    }
  }
  corabella.width = girtha;
  corabella.height = altheia;
  round_rect(jenefer, 0, 0, girtha, altheia, 10);
  jenefer.fillStyle = "#000000";
  jenefer.globalAlpha = .5;
  jenefer.fill();
  shakaira.length >= 1 && (jenefer.textBaseline = "middle", jenefer.font = "20px Baloo Paaji", jenefer.globalAlpha = 1, jenefer.fillStyle = "#e2c340", jenefer.fillText(shakaira[0], 15, 28));
  shakaira.length >= 2 && (jenefer.font = "17px Baloo Paaji", jenefer.fillStyle = "#ffffff", jenefer.fillText(shakaira[1], 15, 55), altheia = 55);
  if (shakaira.length >= 3) {
    jenefer.font = "14px Baloo Paaji";
    jenefer.globalAlpha = .7;
    for (i = 2; i < shakaira.length; i++) {
      jenefer.fillText(shakaira[i], 15, altheia + 28);
      altheia += 26;
    }
  }
  return corabella;
}
function create_welcome_text(saksham) {
  var dhruthi = document.createElement("canvas");
  var mafalda = dhruthi.getContext("2d");
  mafalda.lineJoin = "round";
  while (saksham.indexOf("\\n") !== -1) {
    saksham = saksham.replace("\\n", "\n");
  }
  saksham = saksham.split("\n");
  color = [];
  var kimlee = saksham.length * 18 + 10;
  var enchantra = 0;
  mafalda.font = "14px Baloo Paaji";
  for (var vondella = 0; vondella < saksham.length; vondella++) {
    if (saksham[vondella].charAt(0) === "#") {
      color[vondella] = saksham[vondella].substring(0, 7);
      saksham[vondella] = saksham[vondella].substring(8);
    } else {
      color[vondella] = "#FFFFFF";
    }
    enchantra = Math.max(mafalda.measureText(saksham[vondella]).width + 16, enchantra);
  }
  dhruthi.height = kimlee;
  dhruthi.width = enchantra;
  for (var vondella = 0; vondella < saksham.length; vondella++) {
    var angeliki = create_text(1, saksham[vondella], 14, color[vondella], null, null, null, null, null, "#000", 6);
    mafalda.drawImage(angeliki, 8, vondella * 18 + 5);
  }
  return dhruthi;
}
function create_text(analissa, tiegen, keke, ayeh, guillermo, kenlie, tedd, maslyn, shaqueda, latrail, meladie) {
  if (meladie === undefined) {
    meladie = 0;
  }
  var kyley = document.createElement("canvas");
  var samba = kyley.getContext("2d");
  kenlie = !kenlie ? 0 : kenlie * analissa;
  var rehab = Math.floor(analissa * keke);
  samba.font = rehab + "px Baloo Paaji";
  samba.lineJoin = "round";
  maslyn = maslyn * analissa;
  var dominic = tedd ? maslyn * 2 : 0;
  if (shaqueda) {
    var ambriah = Math.min(samba.measureText(tiegen).width + 2 * analissa + dominic, shaqueda);
  } else {
    var ambriah = samba.measureText(tiegen).width + 2 * analissa + dominic + meladie * analissa * 2;
  }
  var rehab = (rehab + kenlie + meladie) * analissa + dominic;
  kyley.width = ambriah;
  kyley.height = rehab;
  tedd && (samba.fillStyle = tedd, round_rect(samba, 0, 0, ambriah, rehab, maslyn * 2), samba.fill(), samba.translate(maslyn, maslyn));
  samba.textBaseline = "middle";
  samba.font = keke + "px Baloo Paaji";
  samba.lineJoin = "round";
  guillermo && (samba.beginPath(), samba.fillStyle = guillermo, samba.fillText(tiegen, 0, rehab / 2 + kenlie - dominic / 2, ambriah));
  samba.beginPath();
  latrail && (samba.strokeStyle = latrail, samba.lineWidth = meladie, samba.strokeText(tiegen, meladie, (rehab - dominic) / 2, ambriah));
  samba.fillStyle = ayeh;
  samba.fillText(tiegen, meladie, (rehab - dominic) / 2, ambriah);
  return kyley;
}
function create_stone(jenell, demarus, adlan) {
  var ciyana = document.createElement("canvas");
  var belladonna = ciyana.getContext("2d");
  var jarrard = jenell * 220;
  var lavren = jenell * 230;
  var forbes = jenell * 100;
  var jakeriya = forbes / 4;
  var donley = jenell * 20;
  ciyana.width = jarrard;
  ciyana.height = lavren;
  belladonna.translate(jarrard / 2, lavren / 2 + donley);
  belladonna.globalAlpha = .5;
  round_regular_polygon(belladonna, 7, forbes, jakeriya);
  fill_path(belladonna, adlan[0]);
  belladonna.globalAlpha = 1;
  belladonna.translate(0, -donley);
  round_regular_polygon(belladonna, 7, forbes, jakeriya);
  fill_path(belladonna, adlan[1]);
  round_regular_polygon(belladonna, 6, forbes * .65, jakeriya * .65);
  fill_path(belladonna, adlan[2]);
  return ciyana;
}
function create_cave_stone(phalicia, kaiti, manasa, davionne) {
  var aubryn = document.createElement("canvas");
  var mealla = aubryn.getContext("2d");
  var ruthel = phalicia * 220;
  var yenitza = phalicia * 220;
  var naavya = phalicia * 100;
  var abhik = naavya / 4;
  var agigail = phalicia * 20;
  aubryn.width = ruthel;
  aubryn.height = yenitza;
  mealla.translate(ruthel / 2, yenitza / 2);
  mealla.globalAlpha = kaiti ? .5 : 1;
  if (!kaiti) {
    mealla.translate(0 * phalicia, -8 * phalicia);
  }
  round_regular_polygon(mealla, 7, naavya, abhik);
  kaiti ? fill_path(mealla, manasa[0]) : fill_path(mealla, manasa[1]);
  mealla.globalAlpha = 1;
  if (davionne == 0) {
    round_regular_polygon(mealla, 6, naavya * .65, abhik * .65);
    fill_path(mealla, manasa[2]);
  } else {
    davionne == 1 && (mealla.translate(20 * phalicia, 20 * phalicia), round_regular_polygon(mealla, 6, naavya * .45, abhik * .4), fill_path(mealla, manasa[2]));
  }
  return aubryn;
}
function create_gold(jamelia, karina, renzel) {
  var vastine = document.createElement("canvas");
  var casius = vastine.getContext("2d");
  var taurean = jamelia * 120;
  var mairyn = jamelia * 150;
  var svanik = jamelia * 60;
  var vaishnavi = svanik / 4;
  var keetan = jamelia * 15;
  vastine.width = taurean;
  vastine.height = mairyn;
  casius.save();
  casius.translate(taurean / 2 + 0 * jamelia, mairyn / 2 + 0 * jamelia + keetan);
  casius.rotate(Math.PI / 3);
  casius.globalAlpha = .5;
  round_regular_polygon(casius, 8, svanik, vaishnavi);
  fill_path(casius, renzel[0]);
  casius.restore();
  casius.save();
  casius.translate(taurean / 2 - 11 * jamelia, mairyn / 2 + 12 * jamelia);
  casius.globalAlpha = 1;
  casius.rotate(Math.PI / 3);
  casius.translate(0, -keetan);
  round_regular_polygon(casius, 8, svanik, vaishnavi);
  fill_path(casius, renzel[1]);
  casius.restore();
  casius.save();
  casius.translate(taurean / 2 - 9 * jamelia, mairyn / 2 - 12 * jamelia);
  casius.rotate(Math.PI / 2.8);
  round_regular_polygon(casius, 5, svanik * .5, vaishnavi * .4);
  fill_path(casius, renzel[2]);
  casius.restore();
  casius.save();
  casius.translate(taurean / 2 + 19 * jamelia, mairyn / 2 + 5 * jamelia);
  casius.rotate(Math.PI / 1);
  round_regular_polygon(casius, 5, svanik * .5, vaishnavi * .4);
  fill_path(casius, renzel[2]);
  casius.restore();
  casius.save();
  casius.translate(taurean / 2 - 8 * jamelia, mairyn / 2 + 20 * jamelia);
  casius.rotate(Math.PI / 2.25);
  round_regular_polygon(casius, 5, svanik * .5, vaishnavi * .4);
  fill_path(casius, renzel[2]);
  casius.restore();
  return vastine;
}
function create_diamond(boubacar, tiessa, grantland) {
  var nolawi = document.createElement("canvas");
  var broden = nolawi.getContext("2d");
  var kwyn = boubacar * 180;
  var armez = boubacar * 210;
  var kagan = boubacar * 60;
  var shozo = kagan / 4;
  var shataya = boubacar * 20;
  nolawi.width = kwyn;
  nolawi.height = armez;
  broden.save();
  broden.translate(kwyn / 2 - 0 * boubacar, armez / 2 - 35 * boubacar + shataya);
  broden.rotate(Math.PI / -1.8);
  broden.globalAlpha = .5;
  broden.translate(0 * boubacar, -20 * boubacar);
  round_regular_polygon(broden, 5, kagan, shozo);
  fill_path(broden, grantland[0]);
  broden.restore();
  broden.save();
  broden.translate(kwyn / 2 + 10 * boubacar, armez / 2 + 15 * boubacar + shataya);
  broden.rotate(Math.PI / 2);
  broden.globalAlpha = .5;
  broden.translate(0 * boubacar, -20 * boubacar);
  round_regular_polygon(broden, 5, kagan, shozo);
  fill_path(broden, grantland[0]);
  broden.restore();
  broden.save();
  broden.translate(kwyn / 2 - 50 * boubacar, armez / 2 + 40 * boubacar + shataya);
  broden.rotate(Math.PI / 3);
  broden.globalAlpha = .5;
  broden.translate(0, -20 * boubacar);
  round_regular_polygon(broden, 5, kagan, shozo);
  fill_path(broden, grantland[0]);
  broden.restore();
  broden.save();
  broden.translate(kwyn / 2 - 0 * boubacar, armez / 2 - 35 * boubacar);
  broden.rotate(Math.PI / -1.8);
  broden.globalAlpha = 1;
  broden.translate(0 * boubacar, -20 * boubacar);
  round_regular_polygon(broden, 5, kagan, shozo);
  fill_path(broden, grantland[1]);
  broden.restore();
  broden.save();
  broden.translate(kwyn / 2 + 10 * boubacar, armez / 2 + 15 * boubacar);
  broden.rotate(Math.PI / 2);
  broden.globalAlpha = 1;
  broden.translate(0, -20 * boubacar);
  round_regular_polygon(broden, 5, kagan, shozo);
  fill_path(broden, grantland[1]);
  broden.restore();
  broden.save();
  broden.translate(kwyn / 2 - 50 * boubacar, armez / 2 + 40 * boubacar);
  broden.rotate(Math.PI / 3);
  broden.globalAlpha = 1;
  broden.translate(0, -20 * boubacar);
  round_regular_polygon(broden, 5, kagan, shozo);
  fill_path(broden, grantland[1]);
  broden.restore();
  var kagan = boubacar * 30;
  var shozo = kagan / 4;
  broden.save();
  broden.translate(kwyn / 2 + 5 * boubacar, armez / 2 - 20 * boubacar);
  broden.rotate(Math.PI / -1.8);
  broden.globalAlpha = 1;
  broden.translate(0, -20 * boubacar);
  round_regular_polygon(broden, 5, kagan, shozo);
  fill_path(broden, grantland[2]);
  broden.restore();
  broden.save();
  broden.translate(kwyn / 2 + 0 * boubacar, armez / 2 + 10 * boubacar);
  broden.rotate(Math.PI / 2);
  broden.globalAlpha = 1;
  broden.translate(0, -20 * boubacar);
  round_regular_polygon(broden, 5, kagan, shozo);
  fill_path(broden, grantland[2]);
  broden.restore();
  broden.save();
  broden.translate(kwyn / 2 - 45 * boubacar, armez / 2 + 35 * boubacar);
  broden.rotate(Math.PI / 3);
  broden.globalAlpha = 1;
  broden.translate(0, -20 * boubacar);
  round_regular_polygon(broden, 5, kagan, shozo);
  fill_path(broden, grantland[2]);
  broden.restore();
  circle(broden, kwyn / 2 - 7 * boubacar, armez / 2 + 7 * boubacar, 5);
  fill_path(broden, grantland[2]);
  return nolawi;
}
function create_plant(ayaz, tsuruko, ednamay) {
  var garvin = document.createElement("canvas");
  var zamaree = garvin.getContext("2d");
  var voncil = ayaz * 140;
  var kontar = ayaz * 150;
  var esam = ayaz * 10;
  var eliannys = ayaz * 4;
  garvin.width = voncil;
  garvin.height = kontar;
  zamaree.translate(-50 * ayaz, -38 * ayaz + esam);
  zamaree.globalAlpha = tsuruko ? .5 : 1;
  zamaree.beginPath();
  zamaree.bezierCurveTo(160 * ayaz, 65 * ayaz, 160 * ayaz, 85 * ayaz, 152 * ayaz, 95 * ayaz);
  zamaree.bezierCurveTo(152 * ayaz, 95 * ayaz, 173 * ayaz, 94 * ayaz, 187 * ayaz, 102 * ayaz);
  zamaree.bezierCurveTo(187 * ayaz, 102 * ayaz, 180 * ayaz, 120 * ayaz, 155 * ayaz, 126 * ayaz);
  zamaree.bezierCurveTo(154 * ayaz, 126 * ayaz, 166 * ayaz, 138 * ayaz, 169 * ayaz, 148 * ayaz);
  zamaree.bezierCurveTo(169 * ayaz, 148 * ayaz, 148 * ayaz, 152 * ayaz, 133 * ayaz, 140 * ayaz);
  zamaree.bezierCurveTo(133 * ayaz, 140 * ayaz, 134 * ayaz, 160 * ayaz, 122 * ayaz, 175 * ayaz);
  zamaree.bezierCurveTo(122 * ayaz, 175 * ayaz, 107 * ayaz, 162 * ayaz, 107 * ayaz, 144 * ayaz);
  zamaree.bezierCurveTo(107 * ayaz, 144 * ayaz, 98 * ayaz, 164 * ayaz, 73 * ayaz, 167 * ayaz);
  zamaree.bezierCurveTo(73 * ayaz, 167 * ayaz, 72 * ayaz, 134 * ayaz, 90 * ayaz, 127 * ayaz);
  zamaree.bezierCurveTo(90 * ayaz, 127 * ayaz, 70 * ayaz, 134 * ayaz, 55 * ayaz, 123 * ayaz);
  zamaree.bezierCurveTo(55 * ayaz, 123 * ayaz, 58 * ayaz, 115 * ayaz, 75 * ayaz, 104 * ayaz);
  zamaree.bezierCurveTo(75 * ayaz, 104 * ayaz, 66 * ayaz, 96 * ayaz, 61 * ayaz, 77 * ayaz);
  zamaree.bezierCurveTo(61 * ayaz, 77 * ayaz, 83 * ayaz, 74 * ayaz, 102 * ayaz, 89 * ayaz);
  zamaree.bezierCurveTo(102 * ayaz, 89 * ayaz, 92 * ayaz, 66 * ayaz, 110 * ayaz, 41 * ayaz);
  zamaree.bezierCurveTo(111 * ayaz, 40 * ayaz, 130 * ayaz, 54 * ayaz, 130 * ayaz, 82 * ayaz);
  zamaree.bezierCurveTo(130 * ayaz, 82 * ayaz, 143 * ayaz, 67 * ayaz, 159 * ayaz, 65 * ayaz);
  zamaree.closePath();
  fill_path(zamaree, ednamay[0]);
  zamaree.translate(0, 0 - esam);
  zamaree.globalAlpha = 1;
  zamaree.beginPath();
  zamaree.bezierCurveTo(160 * ayaz, 65 * ayaz, 160 * ayaz, 85 * ayaz, 152 * ayaz, 95 * ayaz);
  zamaree.bezierCurveTo(152 * ayaz, 95 * ayaz, 173 * ayaz, 94 * ayaz, 187 * ayaz, 102 * ayaz);
  zamaree.bezierCurveTo(187 * ayaz, 102 * ayaz, 180 * ayaz, 120 * ayaz, 155 * ayaz, 126 * ayaz);
  zamaree.bezierCurveTo(154 * ayaz, 126 * ayaz, 166 * ayaz, 138 * ayaz, 169 * ayaz, 148 * ayaz);
  zamaree.bezierCurveTo(169 * ayaz, 148 * ayaz, 148 * ayaz, 152 * ayaz, 133 * ayaz, 140 * ayaz);
  zamaree.bezierCurveTo(133 * ayaz, 140 * ayaz, 134 * ayaz, 160 * ayaz, 122 * ayaz, 175 * ayaz);
  zamaree.bezierCurveTo(122 * ayaz, 175 * ayaz, 107 * ayaz, 162 * ayaz, 107 * ayaz, 144 * ayaz);
  zamaree.bezierCurveTo(107 * ayaz, 144 * ayaz, 98 * ayaz, 164 * ayaz, 73 * ayaz, 167 * ayaz);
  zamaree.bezierCurveTo(73 * ayaz, 167 * ayaz, 72 * ayaz, 134 * ayaz, 90 * ayaz, 127 * ayaz);
  zamaree.bezierCurveTo(90 * ayaz, 127 * ayaz, 70 * ayaz, 134 * ayaz, 55 * ayaz, 123 * ayaz);
  zamaree.bezierCurveTo(55 * ayaz, 123 * ayaz, 58 * ayaz, 115 * ayaz, 75 * ayaz, 104 * ayaz);
  zamaree.bezierCurveTo(75 * ayaz, 104 * ayaz, 66 * ayaz, 96 * ayaz, 61 * ayaz, 77 * ayaz);
  zamaree.bezierCurveTo(61 * ayaz, 77 * ayaz, 83 * ayaz, 74 * ayaz, 102 * ayaz, 89 * ayaz);
  zamaree.bezierCurveTo(102 * ayaz, 89 * ayaz, 92 * ayaz, 66 * ayaz, 110 * ayaz, 41 * ayaz);
  zamaree.bezierCurveTo(111 * ayaz, 40 * ayaz, 130 * ayaz, 54 * ayaz, 130 * ayaz, 82 * ayaz);
  zamaree.bezierCurveTo(130 * ayaz, 82 * ayaz, 143 * ayaz, 67 * ayaz, 159 * ayaz, 65 * ayaz);
  zamaree.closePath();
  fill_path(zamaree, ednamay[1], ednamay[2], eliannys);
  return garvin;
}
function create_fruit(kyleem, chakara, cor) {
  var shametra = document.createElement("canvas");
  var shewanda = shametra.getContext("2d");
  var jailon = kyleem * 18;
  var kizzey = kyleem * 18;
  shametra.width = jailon;
  shametra.height = kizzey;
  var honie = kyleem * 9;
  var azori = kyleem * 9;
  var yazdan = kyleem * 8;
  shewanda.save();
  shewanda.translate(honie, azori);
  shewanda.globalAlpha = 1;
  circle(shewanda, 0, 0, yazdan);
  fill_path(shewanda, cor[0]);
  var yazdan = 3 * kyleem;
  var honie = 0;
  var azori = -3 * kyleem;
  shewanda.translate(honie, azori);
  shewanda.globalAlpha = 1;
  circle(shewanda, 0, 0, yazdan);
  fill_path(shewanda, cor[1]);
  shewanda.restore();
  return shametra;
}
function create_leaf(sabian, goebel) {
  var miral = document.createElement("canvas");
  var vasilis = miral.getContext("2d");
  miral.width = 80 * sabian;
  miral.height = 100 * sabian;
  vasilis.scale(.5, .5);
  vasilis.translate(10, 15);
  vasilis.globalAlpha = .5;
  vasilis.beginPath();
  vasilis.lineCap = "round";
  vasilis.lineJoin = "round";
  vasilis.moveTo(47 * sabian, 5 * sabian);
  vasilis.bezierCurveTo(19 * sabian, 30 * sabian, 12 * sabian, 42 * sabian, 10 * sabian, 55 * sabian);
  vasilis.bezierCurveTo(11 * sabian, 75 * sabian, 27 * sabian, 76 * sabian, 36 * sabian, 72 * sabian);
  vasilis.bezierCurveTo(52 * sabian, 60 * sabian, 53 * sabian, 46 * sabian, 54 * sabian, 31 * sabian);
  vasilis.bezierCurveTo(53 * sabian, 14 * sabian, 50 * sabian, 9 * sabian, 48 * sabian, 6 * sabian);
  vasilis.closePath();
  fill_path(vasilis, goebel[0]);
  vasilis.beginPath();
  vasilis.lineCap = "round";
  vasilis.lineJoin = "round";
  vasilis.moveTo(17 * sabian, 70 * sabian);
  vasilis.bezierCurveTo(18 * sabian, 77 * sabian, 10 * sabian, 83 * sabian, 4 * sabian, 87 * sabian);
  fill_path(vasilis, undefined, goebel[0], sabian * 10);
  vasilis.translate(0, -10);
  vasilis.globalAlpha = 1;
  vasilis.beginPath();
  vasilis.lineCap = "round";
  vasilis.lineJoin = "round";
  vasilis.moveTo(47 * sabian, 5 * sabian);
  vasilis.bezierCurveTo(19 * sabian, 30 * sabian, 12 * sabian, 42 * sabian, 10 * sabian, 55 * sabian);
  vasilis.bezierCurveTo(11 * sabian, 75 * sabian, 27 * sabian, 76 * sabian, 36 * sabian, 72 * sabian);
  vasilis.bezierCurveTo(52 * sabian, 60 * sabian, 53 * sabian, 46 * sabian, 54 * sabian, 31 * sabian);
  vasilis.bezierCurveTo(53 * sabian, 14 * sabian, 50 * sabian, 9 * sabian, 48 * sabian, 6 * sabian);
  vasilis.closePath();
  fill_path(vasilis, goebel[1], goebel[2], 8 * sabian);
  vasilis.beginPath();
  vasilis.lineCap = "round";
  vasilis.lineJoin = "round";
  vasilis.moveTo(17 * sabian, 70 * sabian);
  vasilis.bezierCurveTo(18 * sabian, 77 * sabian, 10 * sabian, 83 * sabian, 4 * sabian, 87 * sabian);
  fill_path(vasilis, undefined, goebel[2], 8 * sabian);
  vasilis.globalAlpha = .5;
  vasilis.beginPath();
  vasilis.lineCap = "round";
  vasilis.lineJoin = "round";
  vasilis.moveTo(17 * sabian, 70 * sabian);
  vasilis.bezierCurveTo(33 * sabian, 52 * sabian, 39 * sabian, 33 * sabian, 48 * sabian, 7 * sabian);
  fill_path(vasilis, undefined, goebel[2], 8 * sabian);
  return miral;
}
function create_leaf(zaheed, aceion) {
  var deyanara = document.createElement("canvas");
  var antia = deyanara.getContext("2d");
  deyanara.width = 234 * zaheed;
  deyanara.height = 183 * zaheed;
  antia.beginPath();
  antia.lineCap = "round";
  antia.lineJoin = "round";
  antia.moveTo(76 * zaheed, 25 * zaheed);
  antia.bezierCurveTo(150 * zaheed, 3 * zaheed, 181 * zaheed, 22 * zaheed, 203 * zaheed, 41 * zaheed);
  antia.bezierCurveTo(225 * zaheed, 63 * zaheed, 225 * zaheed, 105 * zaheed, 198 * zaheed, 133 * zaheed);
  antia.bezierCurveTo(179 * zaheed, 157 * zaheed, 134 * zaheed, 178 * zaheed, 81 * zaheed, 164 * zaheed);
  antia.bezierCurveTo(19 * zaheed, 148 * zaheed, 6 * zaheed, 95 * zaheed, 21 * zaheed, 66 * zaheed);
  antia.bezierCurveTo(34 * zaheed, 39 * zaheed, 52 * zaheed, 33 * zaheed, 75 * zaheed, 25 * zaheed);
  antia.closePath();
  fill_path(antia, aceion[0], aceion[0], 4 * zaheed);
  return deyanara;
}
function create_herb(damitra, chandlyr, chosen, keldan, rajneesh) {
  var aquinnah = document.createElement("canvas"), ozeal = aquinnah.getContext("2d");
  if (keldan == 0) {
    var shemera = damitra * 270;
    var breyell = damitra * 250;
    aquinnah.width = shemera;
    aquinnah.height = breyell;
    ozeal.beginPath();
    ozeal.moveTo(140 * damitra, 3 * damitra);
    ozeal.translate(-25 * damitra, -20 * damitra);
    ozeal.bezierCurveTo(218 * damitra, 31 * damitra, 251 * damitra, 61 * damitra, 265 * damitra, 85 * damitra);
    ozeal.bezierCurveTo(278 * damitra, 108 * damitra, 295 * damitra, 160 * damitra, 285 * damitra, 195 * damitra);
    ozeal.bezierCurveTo(271 * damitra, 242 * damitra, 213 * damitra, 268 * damitra, 188 * damitra, 266 * damitra);
    ozeal.bezierCurveTo(139 * damitra, 262 * damitra, 70 * damitra, 244 * damitra, 47 * damitra, 204 * damitra);
    ozeal.bezierCurveTo(20 * damitra, 158 * damitra, 35 * damitra, 78 * damitra, 59 * damitra, 56 * damitra);
    ozeal.bezierCurveTo(90 * damitra, 28 * damitra, 124 * damitra, 23 * damitra, 140 * damitra, 23 * damitra);
    ozeal.closePath();
    fill_path(ozeal, chosen[0]);
  } else {
    if (keldan == 1) {
      var shemera = damitra * 430;
      var breyell = damitra * 350;
      aquinnah.width = shemera;
      aquinnah.height = breyell;
      ozeal.beginPath();
      ozeal.moveTo(180 * damitra, 5 * damitra);
      ozeal.translate(-30 * damitra, -60 * damitra);
      ozeal.bezierCurveTo(283 * damitra, 60 * damitra, 265 * damitra, 163 * damitra, 335 * damitra, 206 * damitra);
      ozeal.bezierCurveTo(376 * damitra, 231 * damitra, 492 * damitra, 299 * damitra, 434 * damitra, 357 * damitra);
      ozeal.bezierCurveTo(371 * damitra, 421 * damitra, 289 * damitra, 394 * damitra, 255 * damitra, 386 * damitra);
      ozeal.bezierCurveTo(218 * damitra, 377 * damitra, 91 * damitra, 359 * damitra, 50 * damitra, 272 * damitra);
      ozeal.bezierCurveTo(12 * damitra, 192 * damitra, 107 * damitra, 75 * damitra, 178 * damitra, 69 * damitra);
      ozeal.closePath();
      fill_path(ozeal, chosen[0]);
    } else {
      if (keldan == 2) {
        var shemera = damitra * 400;
        var breyell = damitra * 300;
        aquinnah.width = shemera;
        aquinnah.height = breyell;
        ozeal.beginPath();
        ozeal.moveTo(80 * damitra, 52 * damitra);
        ozeal.translate(-40 * damitra, -30 * damitra);
        ozeal.bezierCurveTo(124 * damitra, 77 * damitra, 241 * damitra, 22 * damitra, 311 * damitra, 65 * damitra);
        ozeal.bezierCurveTo(352 * damitra, 90 * damitra, 404 * damitra, 176 * damitra, 346 * damitra, 234 * damitra);
        ozeal.bezierCurveTo(283 * damitra, 298 * damitra, 179 * damitra, 299 * damitra, 145 * damitra, 291 * damitra);
        ozeal.bezierCurveTo(108 * damitra, 282 * damitra, 100 * damitra, 239 * damitra, 63 * damitra, 205 * damitra);
        ozeal.bezierCurveTo(37 * damitra, 181 * damitra, 45 * damitra, 131 * damitra, 80 * damitra, 107 * damitra);
        ozeal.closePath();
        fill_path(ozeal, chosen[0]);
      }
    }
  }
  return aquinnah;
}
function create_flake(badia, laurica, raiyna) {
  var angia = document.createElement("canvas");
  var emma = angia.getContext("2d");
  var tylor = badia * laurica * 2;
  var carlinda = badia * laurica * 2;
  var haizen = tylor / 2;
  var zijun = carlinda / 2;
  angia.width = tylor;
  angia.height = carlinda;
  emma.translate(haizen, zijun);
  circle(emma, 0, 0, laurica * badia, 0);
  fill_path(emma, raiyna);
  return angia;
}
function create_divingmask(darlis, shakemmia, mirakle) {
  var kimery = document.createElement("canvas");
  var karcyn = kimery.getContext("2d");
  kimery.width = 373 * darlis;
  kimery.height = 314 * darlis;
  karcyn.globalAlpha = shakemmia ? .5 : 1;
  karcyn.translate(5 * darlis, 5 * darlis);
  karcyn.save();
  karcyn.translate(184.048583984375 * darlis, 69.1805419921875 * darlis);
  round_rect(karcyn, -40 * darlis, -28.5 * darlis, 80 * darlis, 57 * darlis, 10 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[1], mirakle[2], 4 * darlis);
  karcyn.beginPath();
  karcyn.lineCap = "round";
  karcyn.lineJoin = "round";
  karcyn.moveTo(185.048583984375 * darlis, 61.6805419921875 * darlis);
  karcyn.bezierCurveTo(145.048583984375 * darlis, 59.6805419921875 * darlis, 138.048583984375 * darlis, 41.6805419921875 * darlis, 148.048583984375 * darlis, 33.6805419921875 * darlis);
  karcyn.bezierCurveTo(169.048583984375 * darlis, 17.6805419921875 * darlis, 194.048583984375 * darlis, 20.6805419921875 * darlis, 210.048583984375 * darlis, 27.6805419921875 * darlis);
  karcyn.bezierCurveTo(234.048583984375 * darlis, 40.6805419921875 * darlis, 225.048583984375 * darlis, 57.6805419921875 * darlis, 186.048583984375 * darlis, 61.6805419921875 * darlis);
  karcyn.closePath();
  fill_path(karcyn, mirakle[0], mirakle[0], 6 * darlis);
  karcyn.beginPath();
  karcyn.lineCap = "round";
  karcyn.lineJoin = "round";
  karcyn.moveTo(224.048583984375 * darlis, 56.6805419921875 * darlis);
  karcyn.bezierCurveTo(326.048583984375 * darlis, 69.6805419921875 * darlis, 363.048583984375 * darlis, 148.6805419921875 * darlis, 349.048583984375 * darlis, 206.6805419921875 * darlis);
  karcyn.bezierCurveTo(329.048583984375 * darlis, 278.6805419921875 * darlis, 252.048583984375 * darlis, 283.6805419921875 * darlis, 206.048583984375 * darlis, 275.6805419921875 * darlis);
  karcyn.bezierCurveTo(206.548583984375 * darlis, 266.6805419921875 * darlis, 206.548583984375 * darlis, 266.6805419921875 * darlis, 207.048583984375 * darlis, 257.6805419921875 * darlis);
  karcyn.bezierCurveTo(276.048583984375 * darlis, 268.6805419921875 * darlis, 308.048583984375 * darlis, 239.6805419921875 * darlis, 323.048583984375 * darlis, 208.6805419921875 * darlis);
  karcyn.bezierCurveTo(352.048583984375 * darlis, 145.6805419921875 * darlis, 292.048583984375 * darlis, 86.6805419921875 * darlis, 223.048583984375 * darlis, 74.6805419921875 * darlis);
  karcyn.closePath();
  fill_path(karcyn, mirakle[0], mirakle[0], 6 * darlis);
  karcyn.save();
  karcyn.translate(183.548583984375 * darlis, 119.6805419921875 * darlis);
  round_rect(karcyn, -121.5 * darlis, -45 * darlis, 243 * darlis, 90 * darlis, 40 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[0], mirakle[0], 6 * darlis);
  karcyn.save();
  karcyn.translate(183.048583984375 * darlis, 155.6805419921875 * darlis);
  round_rect(karcyn, -121 * darlis, -52 * darlis, 242 * darlis, 104 * darlis, 40 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[0], mirakle[0], 6 * darlis);
  karcyn.save();
  karcyn.translate(183.048583984375 * darlis, 205.1805419921875 * darlis);
  round_rect(karcyn, -121 * darlis, -50.5 * darlis, 242 * darlis, 101 * darlis, 40 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[0], mirakle[0], 6 * darlis);
  karcyn.save();
  karcyn.translate(185.048583984375 * darlis, 204.1805419921875 * darlis);
  round_rect(karcyn, -100 * darlis, -34.5 * darlis, 200 * darlis, 69 * darlis, 40 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[0], mirakle[0], 6 * darlis);
  circle(karcyn, 185.048583984375 * darlis, 257.6805419921875 * darlis, 27.018512172212592 * darlis);
  fill_path(karcyn, mirakle[0], mirakle[0], 6 * darlis);
  karcyn.globalAlpha = 1;
  karcyn.translate(-5 * darlis, -5 * darlis);
  karcyn.beginPath();
  karcyn.lineCap = "round";
  karcyn.lineJoin = "round";
  karcyn.moveTo(224.048583984375 * darlis, 56.6805419921875 * darlis);
  karcyn.bezierCurveTo(326.048583984375 * darlis, 69.6805419921875 * darlis, 363.048583984375 * darlis, 148.6805419921875 * darlis, 349.048583984375 * darlis, 206.6805419921875 * darlis);
  karcyn.bezierCurveTo(329.048583984375 * darlis, 278.6805419921875 * darlis, 252.048583984375 * darlis, 283.6805419921875 * darlis, 206.048583984375 * darlis, 275.6805419921875 * darlis);
  karcyn.bezierCurveTo(206.548583984375 * darlis, 266.6805419921875 * darlis, 206.548583984375 * darlis, 266.6805419921875 * darlis, 207.048583984375 * darlis, 257.6805419921875 * darlis);
  karcyn.bezierCurveTo(276.048583984375 * darlis, 268.6805419921875 * darlis, 308.048583984375 * darlis, 239.6805419921875 * darlis, 323.048583984375 * darlis, 208.6805419921875 * darlis);
  karcyn.bezierCurveTo(352.048583984375 * darlis, 145.6805419921875 * darlis, 292.048583984375 * darlis, 86.6805419921875 * darlis, 223.048583984375 * darlis, 74.6805419921875 * darlis);
  karcyn.closePath();
  fill_path(karcyn, mirakle[3], mirakle[4], 6 * darlis);
  karcyn.save();
  karcyn.translate(184.048583984375 * darlis, 69.1805419921875 * darlis);
  round_rect(karcyn, -40 * darlis, -28.5 * darlis, 80 * darlis, 57 * darlis, 10 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[1], mirakle[2], 4 * darlis);
  karcyn.beginPath();
  karcyn.lineCap = "round";
  karcyn.lineJoin = "round";
  karcyn.moveTo(185.048583984375 * darlis, 61.6805419921875 * darlis);
  karcyn.bezierCurveTo(145.048583984375 * darlis, 59.6805419921875 * darlis, 138.048583984375 * darlis, 41.6805419921875 * darlis, 148.048583984375 * darlis, 33.6805419921875 * darlis);
  karcyn.bezierCurveTo(169.048583984375 * darlis, 17.6805419921875 * darlis, 194.048583984375 * darlis, 20.6805419921875 * darlis, 210.048583984375 * darlis, 27.6805419921875 * darlis);
  karcyn.bezierCurveTo(234.048583984375 * darlis, 40.6805419921875 * darlis, 225.048583984375 * darlis, 57.6805419921875 * darlis, 186.048583984375 * darlis, 61.6805419921875 * darlis);
  karcyn.closePath();
  fill_path(karcyn, mirakle[1], mirakle[2], 6 * darlis);
  karcyn.save();
  karcyn.translate(183.548583984375 * darlis, 119.6805419921875 * darlis);
  round_rect(karcyn, -121.5 * darlis, -45 * darlis, 243 * darlis, 90 * darlis, 40 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[5], mirakle[4], 6 * darlis);
  karcyn.save();
  karcyn.translate(183.048583984375 * darlis, 155.6805419921875 * darlis);
  round_rect(karcyn, -121 * darlis, -52 * darlis, 242 * darlis, 104 * darlis, 40 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[3], mirakle[4], 6 * darlis);
  karcyn.save();
  karcyn.translate(183.048583984375 * darlis, 205.1805419921875 * darlis);
  round_rect(karcyn, -121 * darlis, -50.5 * darlis, 242 * darlis, 101 * darlis, 40 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[6], mirakle[4], 6 * darlis);
  karcyn.globalCompositeOperation = "destination-out";
  karcyn.save();
  karcyn.translate(185.048583984375 * darlis, 204.1805419921875 * darlis);
  round_rect(karcyn, -100 * darlis, -34.5 * darlis, 200 * darlis, 69 * darlis, 40 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[7], mirakle[8], 6 * darlis);
  karcyn.globalCompositeOperation = "source-over";
  karcyn.globalAlpha = .5;
  karcyn.save();
  karcyn.translate(185.048583984375 * darlis, 204.1805419921875 * darlis);
  round_rect(karcyn, -100 * darlis, -34.5 * darlis, 200 * darlis, 69 * darlis, 40 * darlis);
  karcyn.restore();
  fill_path(karcyn, mirakle[7], mirakle[8], 6 * darlis);
  karcyn.globalAlpha = 1;
  karcyn.save();
  circle(karcyn, 185.048583984375 * darlis, 257.6805419921875 * darlis, 27.018512172212592 * darlis);
  fill_path(karcyn, mirakle[3], mirakle[4], 6 * darlis);
  karcyn.restore();
  return kimery;
}
function create_superdivingsuit(terese, calik, jaidence) {
  var winner = document.createElement("canvas");
  var sanskriti = winner.getContext("2d");
  winner.width = 220 * terese;
  winner.height = 180 * terese;
  sanskriti.globalAlpha = calik ? .5 : 1;
  sanskriti.translate(-90 * terese, -150 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(104 * terese, 237.8000030517578 * terese);
  sanskriti.bezierCurveTo(110 * terese, 237.8000030517578 * terese, 110 * terese, 237.8000030517578 * terese, 116 * terese, 237.8000030517578 * terese);
  sanskriti.bezierCurveTo(116 * terese, 241.8000030517578 * terese, 116 * terese, 241.8000030517578 * terese, 116 * terese, 245.8000030517578 * terese);
  sanskriti.bezierCurveTo(115 * terese, 245.3000030517578 * terese, 115 * terese, 245.3000030517578 * terese, 114 * terese, 244.8000030517578 * terese);
  sanskriti.bezierCurveTo(109.5 * terese, 244.8000030517578 * terese, 109.5 * terese, 244.8000030517578 * terese, 105 * terese, 244.8000030517578 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[5], jaidence[5], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(115 * terese, 211.20000457763672 * terese);
  sanskriti.bezierCurveTo(106 * terese, 216.20000457763672 * terese, 101 * terese, 234.20000457763672 * terese, 102 * terese, 241.20000457763672 * terese);
  sanskriti.bezierCurveTo(102 * terese, 260.2000045776367 * terese, 115 * terese, 269.2000045776367 * terese, 115 * terese, 269.2000045776367 * terese);
  sanskriti.bezierCurveTo(116 * terese, 265.2000045776367 * terese, 115.5 * terese, 265.2000045776367 * terese, 116 * terese, 261.2000045776367 * terese);
  sanskriti.bezierCurveTo(112 * terese, 264 * terese, 108 * terese, 254 * terese, 106 * terese, 242 * terese);
  sanskriti.bezierCurveTo(105 * terese, 232 * terese, 110 * terese, 222 * terese, 115 * terese, 218 * terese);
  sanskriti.bezierCurveTo(116 * terese, 216.75 * terese, 115.5 * terese, 217.375 * terese, 116 * terese, 216.75 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[5], jaidence[5], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(120 * terese, 207 * terese);
  sanskriti.bezierCurveTo(115 * terese, 206 * terese, 114 * terese, 209 * terese, 114 * terese, 211 * terese);
  sanskriti.bezierCurveTo(114 * terese, 268 * terese, 114 * terese, 241 * terese, 114 * terese, 271 * terese);
  sanskriti.bezierCurveTo(115 * terese, 276 * terese, 118 * terese, 276 * terese, 120 * terese, 276 * terese);
  sanskriti.bezierCurveTo(122 * terese, 273 * terese, 120.5 * terese, 274.5 * terese, 121 * terese, 273 * terese);
  sanskriti.bezierCurveTo(121 * terese, 241 * terese, 121 * terese, 241 * terese, 121 * terese, 209 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(284 * terese, 238 * terese);
  sanskriti.bezierCurveTo(289.5 * terese, 238 * terese, 289.5 * terese, 238 * terese, 295 * terese, 238 * terese);
  sanskriti.bezierCurveTo(295 * terese, 241.5 * terese, 295 * terese, 241.5 * terese, 295 * terese, 245 * terese);
  sanskriti.bezierCurveTo(289.5 * terese, 245 * terese, 289.5 * terese, 245 * terese, 284 * terese, 245 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(283 * terese, 211 * terese);
  sanskriti.bezierCurveTo(293 * terese, 216 * terese, 297 * terese, 231 * terese, 297 * terese, 241 * terese);
  sanskriti.bezierCurveTo(298 * terese, 254 * terese, 290 * terese, 265 * terese, 284 * terese, 269 * terese);
  sanskriti.bezierCurveTo(283 * terese, 266 * terese, 283.5 * terese, 266 * terese, 283 * terese, 263 * terese);
  sanskriti.bezierCurveTo(290 * terese, 260 * terese, 292 * terese, 251 * terese, 293 * terese, 242 * terese);
  sanskriti.bezierCurveTo(292 * terese, 223 * terese, 289 * terese, 224 * terese, 284 * terese, 218 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(280 * terese, 206 * terese);
  sanskriti.bezierCurveTo(284 * terese, 206 * terese, 285 * terese, 208 * terese, 285 * terese, 211 * terese);
  sanskriti.bezierCurveTo(285 * terese, 241.5 * terese, 285 * terese, 241.5 * terese, 285 * terese, 272 * terese);
  sanskriti.bezierCurveTo(284 * terese, 275 * terese, 284 * terese, 275 * terese, 280 * terese, 275 * terese);
  sanskriti.bezierCurveTo(279 * terese, 273.5 * terese, 279 * terese, 273.5 * terese, 278 * terese, 272 * terese);
  sanskriti.bezierCurveTo(278 * terese, 240.5 * terese, 278 * terese, 240.5 * terese, 278 * terese, 209 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(138 * terese, 298.40000915527344 * terese);
  sanskriti.bezierCurveTo(141 * terese, 311.40000915527344 * terese, 151 * terese, 314.40000915527344 * terese, 162 * terese, 316.40000915527344 * terese);
  sanskriti.bezierCurveTo(224 * terese, 316.40000915527344 * terese, 200 * terese, 315.90000915527344 * terese, 238 * terese, 315.40000915527344 * terese);
  sanskriti.bezierCurveTo(254 * terese, 316.40000915527344 * terese, 261 * terese, 306.40000915527344 * terese, 264 * terese, 298.40000915527344 * terese);
  sanskriti.bezierCurveTo(255 * terese, 304.40000915527344 * terese, 250 * terese, 306.40000915527344 * terese, 244 * terese, 306.40000915527344 * terese);
  sanskriti.bezierCurveTo(201 * terese, 306.90000915527344 * terese, 201 * terese, 306.90000915527344 * terese, 158 * terese, 307.40000915527344 * terese);
  sanskriti.bezierCurveTo(150 * terese, 306.40000915527344 * terese, 148 * terese, 306.40000915527344 * terese, 139 * terese, 300.40000915527344 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(161 * terese, 177.5999984741211 * terese);
  sanskriti.bezierCurveTo(130 * terese, 175.5999984741211 * terese, 123 * terese, 190.5999984741211 * terese, 122 * terese, 205.5999984741211 * terese);
  sanskriti.bezierCurveTo(121 * terese, 277.5999984741211 * terese, 122 * terese, 242.5999984741211 * terese, 122 * terese, 279.5999984741211 * terese);
  sanskriti.bezierCurveTo(128 * terese, 297.5999984741211 * terese, 137 * terese, 299.5999984741211 * terese, 143 * terese, 300.5999984741211 * terese);
  sanskriti.bezierCurveTo(163 * terese, 301.0999984741211 * terese, 163 * terese, 301.0999984741211 * terese, 183 * terese, 301.5999984741211 * terese);
  sanskriti.bezierCurveTo(150 * terese, 300.5999984741211 * terese, 135 * terese, 290.5999984741211 * terese, 134 * terese, 267.5999984741211 * terese);
  sanskriti.bezierCurveTo(133 * terese, 245.5999984741211 * terese, 146 * terese, 235.5999984741211 * terese, 164 * terese, 235.5999984741211 * terese);
  sanskriti.bezierCurveTo(206 * terese, 236.0999984741211 * terese, 206 * terese, 236.0999984741211 * terese, 248 * terese, 236.5999984741211 * terese);
  sanskriti.bezierCurveTo(266 * terese, 243.5999984741211 * terese, 268 * terese, 259.5999984741211 * terese, 267 * terese, 266.5999984741211 * terese);
  sanskriti.bezierCurveTo(266 * terese, 288.5999984741211 * terese, 251 * terese, 294.5999984741211 * terese, 244 * terese, 297.5999984741211 * terese);
  sanskriti.bezierCurveTo(228.5 * terese, 299.5999984741211 * terese, 228.5 * terese, 299.5999984741211 * terese, 213 * terese, 301.5999984741211 * terese);
  sanskriti.bezierCurveTo(236 * terese, 301.0999984741211 * terese, 236 * terese, 301.0999984741211 * terese, 259 * terese, 300.5999984741211 * terese);
  sanskriti.bezierCurveTo(272 * terese, 295.5999984741211 * terese, 277 * terese, 288.5999984741211 * terese, 278 * terese, 271.5999984741211 * terese);
  sanskriti.bezierCurveTo(277.5 * terese, 236.5999984741211 * terese, 277.5 * terese, 236.5999984741211 * terese, 277 * terese, 201.5999984741211 * terese);
  sanskriti.bezierCurveTo(276 * terese, 186.5999984741211 * terese, 265 * terese, 178.5999984741211 * terese, 254 * terese, 177.5999984741211 * terese);
  sanskriti.bezierCurveTo(247.5 * terese, 177.5999984741211 * terese, 247.5 * terese, 177.5999984741211 * terese, 241 * terese, 177.5999984741211 * terese);
  sanskriti.bezierCurveTo(255 * terese, 202.5999984741211 * terese, 214 * terese, 217.5999984741211 * terese, 201 * terese, 215.5999984741211 * terese);
  sanskriti.bezierCurveTo(170 * terese, 215.5999984741211 * terese, 152 * terese, 197.5999984741211 * terese, 161 * terese, 178.5999984741211 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(162 * terese, 175.5999984741211 * terese);
  sanskriti.bezierCurveTo(153 * terese, 176.0999984741211 * terese, 153 * terese, 176.0999984741211 * terese, 144 * terese, 176.5999984741211 * terese);
  sanskriti.bezierCurveTo(125 * terese, 178.5999984741211 * terese, 121 * terese, 196.5999984741211 * terese, 121 * terese, 207.5999984741211 * terese);
  sanskriti.bezierCurveTo(121 * terese, 243.20000076293945 * terese, 121 * terese, 243.20000076293945 * terese, 121 * terese, 278.8000030517578 * terese);
  sanskriti.bezierCurveTo(126 * terese, 298.8000030517578 * terese, 137 * terese, 300.8000030517578 * terese, 146 * terese, 302.8000030517578 * terese);
  sanskriti.bezierCurveTo(200.5 * terese, 302.8000030517578 * terese, 200.5 * terese, 302.8000030517578 * terese, 255 * terese, 302.8000030517578 * terese);
  sanskriti.bezierCurveTo(271 * terese, 301.8000030517578 * terese, 279 * terese, 288.8000030517578 * terese, 279 * terese, 273.8000030517578 * terese);
  sanskriti.bezierCurveTo(279 * terese, 236.8000030517578 * terese, 279 * terese, 236.8000030517578 * terese, 279 * terese, 199.8000030517578 * terese);
  sanskriti.bezierCurveTo(274 * terese, 178.8000030517578 * terese, 263 * terese, 177.8000030517578 * terese, 255 * terese, 175.8000030517578 * terese);
  sanskriti.bezierCurveTo(248 * terese, 175.8000030517578 * terese, 248 * terese, 175.8000030517578 * terese, 241 * terese, 175.8000030517578 * terese);
  sanskriti.bezierCurveTo(240 * terese, 175.8000030517578 * terese, 240 * terese, 175.8000030517578 * terese, 239 * terese, 175.8000030517578 * terese);
  sanskriti.bezierCurveTo(254 * terese, 200.8000030517578 * terese, 222 * terese, 211.8000030517578 * terese, 202 * terese, 212.8000030517578 * terese);
  sanskriti.bezierCurveTo(168 * terese, 213.8000030517578 * terese, 151 * terese, 190.8000030517578 * terese, 163 * terese, 176.8000030517578 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, undefined, jaidence[4], 6 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(198 * terese, 161.4000015258789 * terese);
  sanskriti.bezierCurveTo(198 * terese, 186.9000015258789 * terese, 198 * terese, 186.9000015258789 * terese, 198 * terese, 212.4000015258789 * terese);
  sanskriti.bezierCurveTo(201 * terese, 212.4000015258789 * terese, 201 * terese, 212.4000015258789 * terese, 204 * terese, 212.4000015258789 * terese);
  sanskriti.bezierCurveTo(204 * terese, 186.9000015258789 * terese, 204 * terese, 186.9000015258789 * terese, 204 * terese, 161.4000015258789 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(161 * terese, 194 * terese);
  sanskriti.bezierCurveTo(188 * terese, 169 * terese, 231 * terese, 179 * terese, 241 * terese, 194 * terese);
  sanskriti.bezierCurveTo(239.5 * terese, 196 * terese, 239.5 * terese, 196 * terese, 238 * terese, 198 * terese);
  sanskriti.bezierCurveTo(221 * terese, 179 * terese, 182 * terese, 182 * terese, 165 * terese, 198 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(157 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(162 * terese, 150.80000019073486 * terese, 241 * terese, 150.80000019073486 * terese, 245 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(242 * terese, 224.80000019073486 * terese, 162 * terese, 228.80000019073486 * terese, 157 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(159 * terese, 188.80000019073486 * terese, 159 * terese, 188.80000019073486 * terese, 161 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(168 * terese, 216.80000019073486 * terese, 231 * terese, 218.80000019073486 * terese, 241 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(236 * terese, 156.80000019073486 * terese, 169 * terese, 152.80000019073486 * terese, 161 * terese, 188.80000019073486 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(156 * terese, 188 * terese);
  sanskriti.bezierCurveTo(160 * terese, 164 * terese, 183 * terese, 159 * terese, 201 * terese, 158 * terese);
  sanskriti.bezierCurveTo(232 * terese, 159 * terese, 244 * terese, 174 * terese, 246 * terese, 188 * terese);
  sanskriti.bezierCurveTo(245 * terese, 212 * terese, 213 * terese, 219 * terese, 201 * terese, 218 * terese);
  sanskriti.bezierCurveTo(181 * terese, 221 * terese, 158 * terese, 207 * terese, 156 * terese, 190 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, undefined, jaidence[4], 6 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(162 * terese, 189 * terese);
  sanskriti.bezierCurveTo(166 * terese, 170 * terese, 185 * terese, 165 * terese, 201 * terese, 164 * terese);
  sanskriti.bezierCurveTo(227 * terese, 165 * terese, 240 * terese, 178 * terese, 239 * terese, 188 * terese);
  sanskriti.bezierCurveTo(239 * terese, 204 * terese, 210 * terese, 210 * terese, 201 * terese, 210 * terese);
  sanskriti.bezierCurveTo(182 * terese, 211 * terese, 166 * terese, 200 * terese, 162 * terese, 190 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, undefined, jaidence[4], 6 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(131 * terese, 262 * terese);
  sanskriti.bezierCurveTo(136 * terese, 241 * terese, 144 * terese, 236 * terese, 158 * terese, 233 * terese);
  sanskriti.bezierCurveTo(200.5 * terese, 233 * terese, 229 * terese, 232 * terese, 243 * terese, 233 * terese);
  sanskriti.bezierCurveTo(259 * terese, 235 * terese, 267 * terese, 248 * terese, 269 * terese, 260 * terese);
  sanskriti.bezierCurveTo(269 * terese, 266.5 * terese, 269 * terese, 266.5 * terese, 269 * terese, 273 * terese);
  sanskriti.bezierCurveTo(265 * terese, 290 * terese, 251 * terese, 297 * terese, 242 * terese, 298 * terese);
  sanskriti.bezierCurveTo(202 * terese, 298 * terese, 202 * terese, 298 * terese, 162 * terese, 298 * terese);
  sanskriti.bezierCurveTo(148 * terese, 298 * terese, 136 * terese, 289 * terese, 132 * terese, 273 * terese);
  sanskriti.bezierCurveTo(131.5 * terese, 268 * terese, 131.5 * terese, 268 * terese, 131 * terese, 263 * terese);
  sanskriti.bezierCurveTo(135 * terese, 263 * terese, 135 * terese, 263 * terese, 139 * terese, 263 * terese);
  sanskriti.bezierCurveTo(139 * terese, 281 * terese, 151 * terese, 287 * terese, 160 * terese, 290 * terese);
  sanskriti.bezierCurveTo(200.5 * terese, 290 * terese, 200.5 * terese, 290 * terese, 241 * terese, 290 * terese);
  sanskriti.bezierCurveTo(252 * terese, 290 * terese, 257 * terese, 281 * terese, 262 * terese, 271 * terese);
  sanskriti.bezierCurveTo(261.5 * terese, 267 * terese, 261.5 * terese, 267 * terese, 261 * terese, 263 * terese);
  sanskriti.bezierCurveTo(260 * terese, 249 * terese, 251 * terese, 242 * terese, 241 * terese, 241 * terese);
  sanskriti.bezierCurveTo(240.5 * terese, 240.5 * terese, 240.5 * terese, 240.5 * terese, 240 * terese, 240 * terese);
  sanskriti.bezierCurveTo(200 * terese, 240 * terese, 200 * terese, 240 * terese, 160 * terese, 240 * terese);
  sanskriti.bezierCurveTo(145 * terese, 244 * terese, 142 * terese, 250 * terese, 139 * terese, 264 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[4], jaidence[4], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(130 * terese, 264 * terese);
  sanskriti.bezierCurveTo(132 * terese, 244 * terese, 144 * terese, 235 * terese, 157 * terese, 232 * terese);
  sanskriti.bezierCurveTo(245 * terese, 232 * terese, 201 * terese, 232 * terese, 245 * terese, 232 * terese);
  sanskriti.bezierCurveTo(264 * terese, 235 * terese, 269 * terese, 251 * terese, 270 * terese, 264 * terese);
  sanskriti.bezierCurveTo(272 * terese, 291 * terese, 248 * terese, 299 * terese, 242 * terese, 299 * terese);
  sanskriti.bezierCurveTo(200 * terese, 299 * terese, 200 * terese, 299 * terese, 158 * terese, 299 * terese);
  sanskriti.bezierCurveTo(139 * terese, 298 * terese, 130 * terese, 276 * terese, 130 * terese, 265 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, undefined, jaidence[4], 6 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(140 * terese, 265.33333587646484 * terese);
  sanskriti.bezierCurveTo(141 * terese, 250.33333587646484 * terese, 148 * terese, 244.33333587646484 * terese, 160 * terese, 241.33333587646484 * terese);
  sanskriti.bezierCurveTo(200 * terese, 241.33333587646484 * terese, 200 * terese, 241.33333587646484 * terese, 240 * terese, 241.33333587646484 * terese);
  sanskriti.bezierCurveTo(256 * terese, 243.33333587646484 * terese, 260 * terese, 255.33333587646484 * terese, 260 * terese, 265.33333587646484 * terese);
  sanskriti.bezierCurveTo(261 * terese, 281.33333587646484 * terese, 247 * terese, 289.33333587646484 * terese, 240 * terese, 289.33333587646484 * terese);
  sanskriti.bezierCurveTo(161 * terese, 289.33333587646484 * terese, 200.5 * terese, 289.33333587646484 * terese, 161 * terese, 289.33333587646484 * terese);
  sanskriti.bezierCurveTo(149 * terese, 288.33333587646484 * terese, 142 * terese, 278.33333587646484 * terese, 140 * terese, 266.33333587646484 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, undefined, jaidence[4], 6 * terese);
  sanskriti.globalAlpha = .5;
  sanskriti.scale(1, 1);
  sanskriti.translate(105 * terese, 155 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(59.27557373046875 * terese, 20.406280517578125 * terese);
  sanskriti.bezierCurveTo(74.27557373046875 * terese, 5.406280517578125 * terese, 90.27557373046875 * terese, 6.406280517578125 * terese, 99.27557373046875 * terese, 5.406280517578125 * terese);
  sanskriti.bezierCurveTo(120.27557373046875 * terese, 5.406280517578125 * terese, 126.27557373046875 * terese, 10.406280517578125 * terese, 136.27557373046875 * terese, 20.406280517578125 * terese);
  sanskriti.bezierCurveTo(157.77557373046875 * terese, 37.906280517578125 * terese, 157.77557373046875 * terese, 37.906280517578125 * terese, 179.27557373046875 * terese, 55.406280517578125 * terese);
  sanskriti.bezierCurveTo(190.27557373046875 * terese, 63.406280517578125 * terese, 192.27557373046875 * terese, 77.40628051757812 * terese, 189.27557373046875 * terese, 91.40628051757812 * terese);
  sanskriti.bezierCurveTo(183.27557373046875 * terese, 108.40628051757812 * terese, 176.27557373046875 * terese, 110.40628051757812 * terese, 169.27557373046875 * terese, 118.40628051757812 * terese);
  sanskriti.bezierCurveTo(152.27557373046875 * terese, 133.40628051757812 * terese, 152.27557373046875 * terese, 133.40628051757812 * terese, 135.27557373046875 * terese, 148.40628051757812 * terese);
  sanskriti.bezierCurveTo(87.27557373046875 * terese, 143.40628051757812 * terese, 87.27557373046875 * terese, 143.40628051757812 * terese, 39.27557373046875 * terese, 138.40628051757812 * terese);
  sanskriti.bezierCurveTo(26.77557373046875 * terese, 123.40628051757812 * terese, 26.77557373046875 * terese, 123.40628051757812 * terese, 14.27557373046875 * terese, 108.40628051757812 * terese);
  sanskriti.bezierCurveTo(2.27557373046875 * terese, 95.40628051757812 * terese, 2.27557373046875 * terese, 92.40628051757812 * terese, 3.27557373046875 * terese, 83.40628051757812 * terese);
  sanskriti.bezierCurveTo(4.27557373046875 * terese, 63.406280517578125 * terese, 12.27557373046875 * terese, 60.406280517578125 * terese, 24.27557373046875 * terese, 40.406280517578125 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[5], jaidence[5], 4 * terese);
  sanskriti.globalAlpha = 1;
  sanskriti.translate(-110 * terese, -155 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(104 * terese, 237.8000030517578 * terese);
  sanskriti.bezierCurveTo(110 * terese, 237.8000030517578 * terese, 110 * terese, 237.8000030517578 * terese, 116 * terese, 237.8000030517578 * terese);
  sanskriti.bezierCurveTo(116 * terese, 241.8000030517578 * terese, 116 * terese, 241.8000030517578 * terese, 116 * terese, 245.8000030517578 * terese);
  sanskriti.bezierCurveTo(115 * terese, 245.3000030517578 * terese, 115 * terese, 245.3000030517578 * terese, 114 * terese, 244.8000030517578 * terese);
  sanskriti.bezierCurveTo(109.5 * terese, 244.8000030517578 * terese, 109.5 * terese, 244.8000030517578 * terese, 105 * terese, 244.8000030517578 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(115 * terese, 211.20000457763672 * terese);
  sanskriti.bezierCurveTo(106 * terese, 216.20000457763672 * terese, 101 * terese, 234.20000457763672 * terese, 102 * terese, 241.20000457763672 * terese);
  sanskriti.bezierCurveTo(102 * terese, 260.2000045776367 * terese, 115 * terese, 269.2000045776367 * terese, 115 * terese, 269.2000045776367 * terese);
  sanskriti.bezierCurveTo(116 * terese, 265.2000045776367 * terese, 115.5 * terese, 265.2000045776367 * terese, 116 * terese, 261.2000045776367 * terese);
  sanskriti.bezierCurveTo(112 * terese, 264 * terese, 108 * terese, 254 * terese, 106 * terese, 242 * terese);
  sanskriti.bezierCurveTo(105 * terese, 232 * terese, 110 * terese, 222 * terese, 115 * terese, 218 * terese);
  sanskriti.bezierCurveTo(116 * terese, 216.75 * terese, 115.5 * terese, 217.375 * terese, 116 * terese, 216.75 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(120 * terese, 207 * terese);
  sanskriti.bezierCurveTo(115 * terese, 206 * terese, 114 * terese, 209 * terese, 114 * terese, 211 * terese);
  sanskriti.bezierCurveTo(114 * terese, 268 * terese, 114 * terese, 241 * terese, 114 * terese, 271 * terese);
  sanskriti.bezierCurveTo(115 * terese, 276 * terese, 118 * terese, 276 * terese, 120 * terese, 276 * terese);
  sanskriti.bezierCurveTo(122 * terese, 273 * terese, 120.5 * terese, 274.5 * terese, 121 * terese, 273 * terese);
  sanskriti.bezierCurveTo(121 * terese, 241 * terese, 121 * terese, 241 * terese, 121 * terese, 209 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(284 * terese, 238 * terese);
  sanskriti.bezierCurveTo(289.5 * terese, 238 * terese, 289.5 * terese, 238 * terese, 295 * terese, 238 * terese);
  sanskriti.bezierCurveTo(295 * terese, 241.5 * terese, 295 * terese, 241.5 * terese, 295 * terese, 245 * terese);
  sanskriti.bezierCurveTo(289.5 * terese, 245 * terese, 289.5 * terese, 245 * terese, 284 * terese, 245 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(283 * terese, 211 * terese);
  sanskriti.bezierCurveTo(293 * terese, 216 * terese, 297 * terese, 231 * terese, 297 * terese, 241 * terese);
  sanskriti.bezierCurveTo(298 * terese, 254 * terese, 290 * terese, 265 * terese, 284 * terese, 269 * terese);
  sanskriti.bezierCurveTo(283 * terese, 266 * terese, 283.5 * terese, 266 * terese, 283 * terese, 263 * terese);
  sanskriti.bezierCurveTo(290 * terese, 260 * terese, 292 * terese, 251 * terese, 293 * terese, 242 * terese);
  sanskriti.bezierCurveTo(292 * terese, 223 * terese, 289 * terese, 224 * terese, 284 * terese, 218 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(280 * terese, 206 * terese);
  sanskriti.bezierCurveTo(284 * terese, 206 * terese, 285 * terese, 208 * terese, 285 * terese, 211 * terese);
  sanskriti.bezierCurveTo(285 * terese, 241.5 * terese, 285 * terese, 241.5 * terese, 285 * terese, 272 * terese);
  sanskriti.bezierCurveTo(284 * terese, 275 * terese, 284 * terese, 275 * terese, 280 * terese, 275 * terese);
  sanskriti.bezierCurveTo(279 * terese, 273.5 * terese, 279 * terese, 273.5 * terese, 278 * terese, 272 * terese);
  sanskriti.bezierCurveTo(278 * terese, 240.5 * terese, 278 * terese, 240.5 * terese, 278 * terese, 209 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(138 * terese, 298.40000915527344 * terese);
  sanskriti.bezierCurveTo(141 * terese, 311.40000915527344 * terese, 151 * terese, 314.40000915527344 * terese, 162 * terese, 316.40000915527344 * terese);
  sanskriti.bezierCurveTo(224 * terese, 316.40000915527344 * terese, 200 * terese, 315.90000915527344 * terese, 238 * terese, 315.40000915527344 * terese);
  sanskriti.bezierCurveTo(254 * terese, 316.40000915527344 * terese, 261 * terese, 306.40000915527344 * terese, 264 * terese, 298.40000915527344 * terese);
  sanskriti.bezierCurveTo(255 * terese, 304.40000915527344 * terese, 250 * terese, 306.40000915527344 * terese, 244 * terese, 306.40000915527344 * terese);
  sanskriti.bezierCurveTo(201 * terese, 306.90000915527344 * terese, 201 * terese, 306.90000915527344 * terese, 158 * terese, 307.40000915527344 * terese);
  sanskriti.bezierCurveTo(150 * terese, 306.40000915527344 * terese, 148 * terese, 306.40000915527344 * terese, 139 * terese, 300.40000915527344 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(161 * terese, 177.5999984741211 * terese);
  sanskriti.bezierCurveTo(130 * terese, 175.5999984741211 * terese, 123 * terese, 190.5999984741211 * terese, 122 * terese, 205.5999984741211 * terese);
  sanskriti.bezierCurveTo(121 * terese, 277.5999984741211 * terese, 122 * terese, 242.5999984741211 * terese, 122 * terese, 279.5999984741211 * terese);
  sanskriti.bezierCurveTo(128 * terese, 297.5999984741211 * terese, 137 * terese, 299.5999984741211 * terese, 143 * terese, 300.5999984741211 * terese);
  sanskriti.bezierCurveTo(163 * terese, 301.0999984741211 * terese, 163 * terese, 301.0999984741211 * terese, 183 * terese, 301.5999984741211 * terese);
  sanskriti.bezierCurveTo(150 * terese, 300.5999984741211 * terese, 135 * terese, 290.5999984741211 * terese, 134 * terese, 267.5999984741211 * terese);
  sanskriti.bezierCurveTo(133 * terese, 245.5999984741211 * terese, 146 * terese, 235.5999984741211 * terese, 164 * terese, 235.5999984741211 * terese);
  sanskriti.bezierCurveTo(206 * terese, 236.0999984741211 * terese, 206 * terese, 236.0999984741211 * terese, 248 * terese, 236.5999984741211 * terese);
  sanskriti.bezierCurveTo(266 * terese, 243.5999984741211 * terese, 268 * terese, 259.5999984741211 * terese, 267 * terese, 266.5999984741211 * terese);
  sanskriti.bezierCurveTo(266 * terese, 288.5999984741211 * terese, 251 * terese, 294.5999984741211 * terese, 244 * terese, 297.5999984741211 * terese);
  sanskriti.bezierCurveTo(228.5 * terese, 299.5999984741211 * terese, 228.5 * terese, 299.5999984741211 * terese, 213 * terese, 301.5999984741211 * terese);
  sanskriti.bezierCurveTo(236 * terese, 301.0999984741211 * terese, 236 * terese, 301.0999984741211 * terese, 259 * terese, 300.5999984741211 * terese);
  sanskriti.bezierCurveTo(272 * terese, 295.5999984741211 * terese, 277 * terese, 288.5999984741211 * terese, 278 * terese, 271.5999984741211 * terese);
  sanskriti.bezierCurveTo(277.5 * terese, 236.5999984741211 * terese, 277.5 * terese, 236.5999984741211 * terese, 277 * terese, 201.5999984741211 * terese);
  sanskriti.bezierCurveTo(276 * terese, 186.5999984741211 * terese, 265 * terese, 178.5999984741211 * terese, 254 * terese, 177.5999984741211 * terese);
  sanskriti.bezierCurveTo(247.5 * terese, 177.5999984741211 * terese, 247.5 * terese, 177.5999984741211 * terese, 241 * terese, 177.5999984741211 * terese);
  sanskriti.bezierCurveTo(255 * terese, 202.5999984741211 * terese, 214 * terese, 217.5999984741211 * terese, 201 * terese, 215.5999984741211 * terese);
  sanskriti.bezierCurveTo(170 * terese, 215.5999984741211 * terese, 152 * terese, 197.5999984741211 * terese, 161 * terese, 178.5999984741211 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[2], jaidence[2], 4 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(162 * terese, 175.5999984741211 * terese);
  sanskriti.bezierCurveTo(153 * terese, 176.0999984741211 * terese, 153 * terese, 176.0999984741211 * terese, 144 * terese, 176.5999984741211 * terese);
  sanskriti.bezierCurveTo(125 * terese, 178.5999984741211 * terese, 121 * terese, 196.5999984741211 * terese, 121 * terese, 207.5999984741211 * terese);
  sanskriti.bezierCurveTo(121 * terese, 243.20000076293945 * terese, 121 * terese, 243.20000076293945 * terese, 121 * terese, 278.8000030517578 * terese);
  sanskriti.bezierCurveTo(126 * terese, 298.8000030517578 * terese, 137 * terese, 300.8000030517578 * terese, 146 * terese, 302.8000030517578 * terese);
  sanskriti.bezierCurveTo(200.5 * terese, 302.8000030517578 * terese, 200.5 * terese, 302.8000030517578 * terese, 255 * terese, 302.8000030517578 * terese);
  sanskriti.bezierCurveTo(271 * terese, 301.8000030517578 * terese, 279 * terese, 288.8000030517578 * terese, 279 * terese, 273.8000030517578 * terese);
  sanskriti.bezierCurveTo(279 * terese, 236.8000030517578 * terese, 279 * terese, 236.8000030517578 * terese, 279 * terese, 199.8000030517578 * terese);
  sanskriti.bezierCurveTo(274 * terese, 178.8000030517578 * terese, 263 * terese, 177.8000030517578 * terese, 255 * terese, 175.8000030517578 * terese);
  sanskriti.bezierCurveTo(248 * terese, 175.8000030517578 * terese, 248 * terese, 175.8000030517578 * terese, 241 * terese, 175.8000030517578 * terese);
  sanskriti.bezierCurveTo(240 * terese, 175.8000030517578 * terese, 240 * terese, 175.8000030517578 * terese, 239 * terese, 175.8000030517578 * terese);
  sanskriti.bezierCurveTo(254 * terese, 200.8000030517578 * terese, 222 * terese, 211.8000030517578 * terese, 202 * terese, 212.8000030517578 * terese);
  sanskriti.bezierCurveTo(168 * terese, 213.8000030517578 * terese, 151 * terese, 190.8000030517578 * terese, 163 * terese, 176.8000030517578 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, undefined, jaidence[3], 6 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(198 * terese, 161.4000015258789 * terese);
  sanskriti.bezierCurveTo(198 * terese, 186.9000015258789 * terese, 198 * terese, 186.9000015258789 * terese, 198 * terese, 212.4000015258789 * terese);
  sanskriti.bezierCurveTo(201 * terese, 212.4000015258789 * terese, 201 * terese, 212.4000015258789 * terese, 204 * terese, 212.4000015258789 * terese);
  sanskriti.bezierCurveTo(204 * terese, 186.9000015258789 * terese, 204 * terese, 186.9000015258789 * terese, 204 * terese, 161.4000015258789 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(161 * terese, 194 * terese);
  sanskriti.bezierCurveTo(188 * terese, 169 * terese, 231 * terese, 179 * terese, 241 * terese, 194 * terese);
  sanskriti.bezierCurveTo(239.5 * terese, 196 * terese, 239.5 * terese, 196 * terese, 238 * terese, 198 * terese);
  sanskriti.bezierCurveTo(221 * terese, 179 * terese, 182 * terese, 182 * terese, 165 * terese, 198 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(157 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(162 * terese, 150.80000019073486 * terese, 241 * terese, 150.80000019073486 * terese, 245 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(242 * terese, 224.80000019073486 * terese, 162 * terese, 228.80000019073486 * terese, 157 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(159 * terese, 188.80000019073486 * terese, 159 * terese, 188.80000019073486 * terese, 161 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(168 * terese, 216.80000019073486 * terese, 231 * terese, 218.80000019073486 * terese, 241 * terese, 188.80000019073486 * terese);
  sanskriti.bezierCurveTo(236 * terese, 156.80000019073486 * terese, 169 * terese, 152.80000019073486 * terese, 161 * terese, 188.80000019073486 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(156 * terese, 188 * terese);
  sanskriti.bezierCurveTo(160 * terese, 164 * terese, 183 * terese, 159 * terese, 201 * terese, 158 * terese);
  sanskriti.bezierCurveTo(232 * terese, 159 * terese, 244 * terese, 174 * terese, 246 * terese, 188 * terese);
  sanskriti.bezierCurveTo(245 * terese, 212 * terese, 213 * terese, 219 * terese, 201 * terese, 218 * terese);
  sanskriti.bezierCurveTo(181 * terese, 221 * terese, 158 * terese, 207 * terese, 156 * terese, 190 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, undefined, jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(162 * terese, 189 * terese);
  sanskriti.bezierCurveTo(166 * terese, 170 * terese, 185 * terese, 165 * terese, 201 * terese, 164 * terese);
  sanskriti.bezierCurveTo(227 * terese, 165 * terese, 240 * terese, 178 * terese, 239 * terese, 188 * terese);
  sanskriti.bezierCurveTo(239 * terese, 204 * terese, 210 * terese, 210 * terese, 201 * terese, 210 * terese);
  sanskriti.bezierCurveTo(182 * terese, 211 * terese, 166 * terese, 200 * terese, 162 * terese, 190 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, undefined, jaidence[1], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(131 * terese, 262 * terese);
  sanskriti.bezierCurveTo(136 * terese, 241 * terese, 144 * terese, 236 * terese, 158 * terese, 233 * terese);
  sanskriti.bezierCurveTo(200.5 * terese, 233 * terese, 229 * terese, 232 * terese, 243 * terese, 233 * terese);
  sanskriti.bezierCurveTo(259 * terese, 235 * terese, 267 * terese, 248 * terese, 269 * terese, 260 * terese);
  sanskriti.bezierCurveTo(269 * terese, 266.5 * terese, 269 * terese, 266.5 * terese, 269 * terese, 273 * terese);
  sanskriti.bezierCurveTo(265 * terese, 290 * terese, 251 * terese, 297 * terese, 242 * terese, 298 * terese);
  sanskriti.bezierCurveTo(202 * terese, 298 * terese, 202 * terese, 298 * terese, 162 * terese, 298 * terese);
  sanskriti.bezierCurveTo(148 * terese, 298 * terese, 136 * terese, 289 * terese, 132 * terese, 273 * terese);
  sanskriti.bezierCurveTo(131.5 * terese, 268 * terese, 131.5 * terese, 268 * terese, 131 * terese, 263 * terese);
  sanskriti.bezierCurveTo(135 * terese, 263 * terese, 135 * terese, 263 * terese, 139 * terese, 263 * terese);
  sanskriti.bezierCurveTo(139 * terese, 281 * terese, 151 * terese, 287 * terese, 160 * terese, 290 * terese);
  sanskriti.bezierCurveTo(200.5 * terese, 290 * terese, 200.5 * terese, 290 * terese, 241 * terese, 290 * terese);
  sanskriti.bezierCurveTo(252 * terese, 290 * terese, 257 * terese, 281 * terese, 262 * terese, 271 * terese);
  sanskriti.bezierCurveTo(261.5 * terese, 267 * terese, 261.5 * terese, 267 * terese, 261 * terese, 263 * terese);
  sanskriti.bezierCurveTo(260 * terese, 249 * terese, 251 * terese, 242 * terese, 241 * terese, 241 * terese);
  sanskriti.bezierCurveTo(240.5 * terese, 240.5 * terese, 240.5 * terese, 240.5 * terese, 240 * terese, 240 * terese);
  sanskriti.bezierCurveTo(200 * terese, 240 * terese, 200 * terese, 240 * terese, 160 * terese, 240 * terese);
  sanskriti.bezierCurveTo(145 * terese, 244 * terese, 142 * terese, 250 * terese, 139 * terese, 264 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, jaidence[0], jaidence[0], 2 * terese);
  sanskriti.beginPath();
  sanskriti.lineCap = "round";
  sanskriti.lineJoin = "round";
  sanskriti.moveTo(130 * terese, 264 * terese);
  sanskriti.bezierCurveTo(132 * terese, 244 * terese, 144 * terese, 235 * terese, 157 * terese, 232 * terese);
  sanskriti.bezierCurveTo(245 * terese, 232 * terese, 201 * terese, 232 * terese, 245 * terese, 232 * terese);
  sanskriti.bezierCurveTo(264 * terese, 235 * terese, 269 * terese, 251 * terese, 270 * terese, 264 * terese);
  sanskriti.bezierCurveTo(272 * terese, 291 * terese, 248 * terese, 299 * terese, 242 * terese, 299 * terese);
  sanskriti.bezierCurveTo(200 * terese, 299 * terese, 200 * terese, 299 * terese, 158 * terese, 299 * terese);
  sanskriti.bezierCurveTo(139 * terese, 298 * terese, 130 * terese, 276 * terese, 130 * terese, 265 * terese);
  sanskriti.closePath();
  fill_path(sanskriti, undefined, jaidence[1], 2 * terese);
  return winner;
}
function create_windmill_chest(brinli, kamonte) {
  var jamason = document.createElement("canvas");
  var delsha = jamason.getContext("2d");
  jamason.width = 243 * brinli;
  jamason.height = 172 * brinli;
  circle(delsha, 119.5 * brinli, 140.125 * brinli, 19 * brinli);
  fill_path(delsha, undefined, kamonte[1], 5 * brinli);
  delsha.beginPath();
  delsha.lineCap = "round";
  delsha.lineJoin = "round";
  delsha.moveTo(36.5 * brinli, 20.125 * brinli);
  delsha.bezierCurveTo(119.5 * brinli, 20.625 * brinli, 119.5 * brinli, 20.625 * brinli, 202.5 * brinli, 21.125 * brinli);
  delsha.bezierCurveTo(214.5 * brinli, 22.125 * brinli, 216.5 * brinli, 26.125 * brinli, 217.5 * brinli, 35.125 * brinli);
  delsha.bezierCurveTo(221 * brinli, 76.125 * brinli, 221 * brinli, 76.125 * brinli, 224.5 * brinli, 117.125 * brinli);
  delsha.bezierCurveTo(225.5 * brinli, 127.125 * brinli, 221.5 * brinli, 131.125 * brinli, 210.5 * brinli, 132.125 * brinli);
  delsha.bezierCurveTo(117.5 * brinli, 132.125 * brinli, 117.5 * brinli, 132.125 * brinli, 24.5 * brinli, 132.125 * brinli);
  delsha.bezierCurveTo(14.5 * brinli, 131.125 * brinli, 13.5 * brinli, 126.125 * brinli, 16.5 * brinli, 111.125 * brinli);
  delsha.bezierCurveTo(19.5 * brinli, 73.125 * brinli, 19.5 * brinli, 73.125 * brinli, 22.5 * brinli, 35.125 * brinli);
  delsha.bezierCurveTo(23.5 * brinli, 23.125 * brinli, 29.5 * brinli, 21.125 * brinli, 36.5 * brinli, 20.125 * brinli);
  delsha.closePath();
  fill_path(delsha, kamonte[0], kamonte[1], 4 * brinli);
  delsha.beginPath();
  delsha.lineCap = "round";
  delsha.lineJoin = "round";
  delsha.moveTo(15.5 * brinli, 138.625 * brinli);
  delsha.bezierCurveTo(120 * brinli, 138.625 * brinli, 120 * brinli, 138.625 * brinli, 224.5 * brinli, 138.625 * brinli);
  delsha.closePath();
  fill_path(delsha, undefined, kamonte[2], 10 * brinli);
  delsha.beginPath();
  delsha.lineCap = "round";
  delsha.lineJoin = "round";
  delsha.moveTo(13.5 * brinli, 131.625 * brinli);
  delsha.bezierCurveTo(119.5 * brinli, 131.625 * brinli, 119.5 * brinli, 131.625 * brinli, 225.5 * brinli, 131.625 * brinli);
  delsha.closePath();
  fill_path(delsha, undefined, kamonte[3], 10 * brinli);
  circle(delsha, 119.5 * brinli, 140.125 * brinli, 14.866068747318506 * brinli);
  fill_path(delsha, kamonte[4], kamonte[5], 4 * brinli);
  delsha.beginPath();
  delsha.lineCap = "round";
  delsha.lineJoin = "round";
  delsha.moveTo(106.5 * brinli, 146.625 * brinli);
  delsha.bezierCurveTo(116.5 * brinli, 137.625 * brinli, 118.5 * brinli, 136.625 * brinli, 123.5 * brinli, 138.625 * brinli);
  delsha.bezierCurveTo(131.5 * brinli, 145.625 * brinli, 133.5 * brinli, 148.625 * brinli, 127.5 * brinli, 152.625 * brinli);
  delsha.bezierCurveTo(115.5 * brinli, 158.625 * brinli, 111.5 * brinli, 153.625 * brinli, 106.5 * brinli, 147.625 * brinli);
  delsha.closePath();
  fill_path(delsha, kamonte[6], kamonte[7], 2 * brinli);
  delsha.beginPath();
  delsha.lineCap = "round";
  delsha.lineJoin = "round";
  delsha.moveTo(105.5 * brinli, 146.625 * brinli);
  delsha.bezierCurveTo(116.5 * brinli, 159.625 * brinli, 124.5 * brinli, 156.625 * brinli, 132.5 * brinli, 146.625 * brinli);
  fill_path(delsha, undefined, kamonte[8], 5 * brinli);
  delsha.save();
  delsha.translate(75.5 * brinli, 80.125 * brinli);
  round_rect(delsha, -39 * brinli, -40 * brinli, 78 * brinli, 78 * brinli, 10 * brinli);
  delsha.restore();
  fill_path(delsha, kamonte[9]);
  delsha.save();
  delsha.translate(167 * brinli, 80.125 * brinli);
  round_rect(delsha, -38.5 * brinli, -39 * brinli, 78 * brinli, 78 * brinli, 10 * brinli);
  delsha.restore();
  fill_path(delsha, kamonte[9]);
  return jamason;
}
function create_cake(vaiden, meir, creston) {
  var elizabeht = document.createElement("canvas");
  var slim = elizabeht.getContext("2d");
  elizabeht.width = 400 * vaiden;
  elizabeht.height = 400 * vaiden;
  slim.beginPath();
  slim.lineCap = "round";
  slim.lineJoin = "round";
  slim.moveTo(96.5 * vaiden, 277.34375 * vaiden);
  slim.bezierCurveTo(197.5 * vaiden, 259.84375 * vaiden, 197.5 * vaiden, 259.84375 * vaiden, 298.5 * vaiden, 242.34375 * vaiden);
  slim.bezierCurveTo(311.5 * vaiden, 231.34375 * vaiden, 307.5 * vaiden, 168.34375 * vaiden, 298.5 * vaiden, 150.34375 * vaiden);
  slim.bezierCurveTo(198 * vaiden, 170.34375 * vaiden, 198 * vaiden, 170.34375 * vaiden, 97.5 * vaiden, 190.34375 * vaiden);
  slim.closePath();
  fill_path(slim, creston[1], creston[2], 12 * vaiden);
  slim.beginPath();
  slim.lineCap = "round";
  slim.lineJoin = "round";
  slim.moveTo(98.5 * vaiden, 214.34375 * vaiden);
  slim.bezierCurveTo(199 * vaiden, 196.34375 * vaiden, 199 * vaiden, 196.34375 * vaiden, 299.5 * vaiden, 178.34375 * vaiden);
  slim.closePath();
  fill_path(slim, undefined, creston[2], 12 * vaiden);
  slim.beginPath();
  slim.lineCap = "round";
  slim.lineJoin = "round";
  slim.moveTo(98.5 * vaiden, 247.34375 * vaiden);
  slim.bezierCurveTo(201.5 * vaiden, 229.34375 * vaiden, 201.5 * vaiden, 229.34375 * vaiden, 304.5 * vaiden, 211.34375 * vaiden);
  slim.closePath();
  fill_path(slim, undefined, creston[2], 12 * vaiden);
  slim.beginPath();
  slim.lineCap = "round";
  slim.lineJoin = "round";
  slim.moveTo(97.5 * vaiden, 189.34375 * vaiden);
  slim.bezierCurveTo(97 * vaiden, 199.84375 * vaiden, 97 * vaiden, 199.84375 * vaiden, 96.5 * vaiden, 210.34375 * vaiden);
  slim.bezierCurveTo(110.5 * vaiden, 204.34375 * vaiden, 110.5 * vaiden, 204.34375 * vaiden, 124.5 * vaiden, 198.34375 * vaiden);
  slim.bezierCurveTo(137.5 * vaiden, 203.84375 * vaiden, 137.5 * vaiden, 203.84375 * vaiden, 150.5 * vaiden, 209.34375 * vaiden);
  slim.bezierCurveTo(172 * vaiden, 197.84375 * vaiden, 172 * vaiden, 197.84375 * vaiden, 193.5 * vaiden, 186.34375 * vaiden);
  slim.bezierCurveTo(211.5 * vaiden, 189.84375 * vaiden, 211.5 * vaiden, 189.84375 * vaiden, 229.5 * vaiden, 193.34375 * vaiden);
  slim.bezierCurveTo(240.5 * vaiden, 193.34375 * vaiden, 240.5 * vaiden, 193.34375 * vaiden, 251.5 * vaiden, 193.34375 * vaiden);
  slim.bezierCurveTo(261 * vaiden, 182.84375 * vaiden, 261 * vaiden, 182.84375 * vaiden, 270.5 * vaiden, 172.34375 * vaiden);
  slim.bezierCurveTo(287.5 * vaiden, 169.34375 * vaiden, 287.5 * vaiden, 169.34375 * vaiden, 304.5 * vaiden, 166.34375 * vaiden);
  slim.bezierCurveTo(304.5 * vaiden, 156.34375 * vaiden, 300.5 * vaiden, 145.34375 * vaiden, 298.5 * vaiden, 147.34375 * vaiden);
  slim.closePath();
  fill_path(slim, creston[3], creston[4], 12 * vaiden);
  slim.beginPath();
  slim.lineCap = "round";
  slim.lineJoin = "round";
  slim.moveTo(300.5 * vaiden, 147.34375 * vaiden);
  slim.bezierCurveTo(293.5 * vaiden, 121.34375 * vaiden, 278.5 * vaiden, 106.34375 * vaiden, 256.5 * vaiden, 101.34375 * vaiden);
  slim.bezierCurveTo(176.5 * vaiden, 145.34375 * vaiden, 176.5 * vaiden, 145.34375 * vaiden, 96.5 * vaiden, 189.34375 * vaiden);
  slim.closePath();
  fill_path(slim, creston[5], creston[6], 12 * vaiden);
  circle(slim, 252.5 * vaiden, 129.34375 * vaiden, 18.027756377319946 * vaiden);
  fill_path(slim, creston[7]);
  circle(slim, 248.5 * vaiden, 121.34375 * vaiden, 8.246211251235321 * vaiden);
  fill_path(slim, creston[8]);
  return elizabeht;
}
function create_fishfood(allan, iyiana, flava) {
  var laderian = document.createElement("canvas");
  var kristof = laderian.getContext("2d");
  laderian.width = 400 * allan;
  laderian.height = 400 * allan;
  kristof.globalAlpha = iyiana ? .5 : 1;
  kristof.translate(10 * allan, 5 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(100.5 * allan, 126.34375 * allan);
  kristof.bezierCurveTo(151.5 * allan, 104.34375 * allan, 279.5 * allan, 188.34375 * allan, 297.5 * allan, 292.34375 * allan);
  kristof.bezierCurveTo(222.5 * allan, 307.34375 * allan, 106.5 * allan, 196.34375 * allan, 100.5 * allan, 127.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[0], flava[0], 12 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(106.5 * allan, 131.34375 * allan);
  kristof.bezierCurveTo(140.5 * allan, 142.34375 * allan, 225.5 * allan, 184.34375 * allan, 290.5 * allan, 287.34375 * allan);
  kristof.bezierCurveTo(270.5 * allan, 188.34375 * allan, 152.5 * allan, 118.34375 * allan, 107.5 * allan, 131.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[0]);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(157.5 * allan, 137.34375 * allan);
  kristof.bezierCurveTo(161.5 * allan, 138.34375 * allan, 164.5 * allan, 140.34375 * allan, 168.5 * allan, 142.34375 * allan);
  kristof.bezierCurveTo(165.5 * allan, 156.34375 * allan, 141.5 * allan, 176.34375 * allan, 126.5 * allan, 179.34375 * allan);
  kristof.bezierCurveTo(123.5 * allan, 173.34375 * allan, 120.5 * allan, 169.34375 * allan, 120.5 * allan, 169.34375 * allan);
  kristof.bezierCurveTo(141.5 * allan, 161.34375 * allan, 156.5 * allan, 145.34375 * allan, 155.5 * allan, 136.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[0]);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(196.5 * allan, 151.34375 * allan);
  kristof.bezierCurveTo(211.5 * allan, 158.34375 * allan, 224.5 * allan, 171.34375 * allan, 229.5 * allan, 176.34375 * allan);
  kristof.bezierCurveTo(246.5 * allan, 163.34375 * allan, 259.5 * allan, 166.34375 * allan, 272.5 * allan, 168.34375 * allan);
  kristof.bezierCurveTo(254.5 * allan, 146.34375 * allan, 214.5 * allan, 145.34375 * allan, 198.5 * allan, 151.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[0], flava[0], 12 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(154.5 * allan, 222.34375 * allan);
  kristof.bezierCurveTo(164.5 * allan, 234.34375 * allan, 173.5 * allan, 242.34375 * allan, 178.5 * allan, 245.34375 * allan);
  kristof.bezierCurveTo(174.5 * allan, 265.34375 * allan, 180.5 * allan, 274.34375 * allan, 186.5 * allan, 283.34375 * allan);
  kristof.bezierCurveTo(165.5 * allan, 277.34375 * allan, 151.5 * allan, 245.34375 * allan, 155.5 * allan, 224.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[0], flava[0], 12 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(279.5 * allan, 294.34375 * allan);
  kristof.bezierCurveTo(286.5 * allan, 285.84375 * allan, 286.5 * allan, 285.84375 * allan, 293.5 * allan, 277.34375 * allan);
  kristof.bezierCurveTo(315.5 * allan, 280.34375 * allan, 315.5 * allan, 280.34375 * allan, 337.5 * allan, 283.34375 * allan);
  kristof.bezierCurveTo(340.5 * allan, 311.34375 * allan, 317.5 * allan, 326.34375 * allan, 307.5 * allan, 331.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[0], flava[0], 12 * allan);
  kristof.globalAlpha = 1;
  kristof.translate(-10 * allan, -5 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(100.5 * allan, 126.34375 * allan);
  kristof.bezierCurveTo(151.5 * allan, 104.34375 * allan, 279.5 * allan, 188.34375 * allan, 297.5 * allan, 292.34375 * allan);
  kristof.bezierCurveTo(222.5 * allan, 307.34375 * allan, 106.5 * allan, 196.34375 * allan, 100.5 * allan, 127.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[1], flava[2], 12 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(106.5 * allan, 131.34375 * allan);
  kristof.bezierCurveTo(140.5 * allan, 142.34375 * allan, 225.5 * allan, 184.34375 * allan, 290.5 * allan, 287.34375 * allan);
  kristof.bezierCurveTo(270.5 * allan, 188.34375 * allan, 152.5 * allan, 118.34375 * allan, 107.5 * allan, 131.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[3]);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(157.5 * allan, 137.34375 * allan);
  kristof.bezierCurveTo(161.5 * allan, 138.34375 * allan, 164.5 * allan, 140.34375 * allan, 168.5 * allan, 142.34375 * allan);
  kristof.bezierCurveTo(165.5 * allan, 156.34375 * allan, 141.5 * allan, 176.34375 * allan, 126.5 * allan, 179.34375 * allan);
  kristof.bezierCurveTo(123.5 * allan, 173.34375 * allan, 120.5 * allan, 169.34375 * allan, 120.5 * allan, 169.34375 * allan);
  kristof.bezierCurveTo(141.5 * allan, 161.34375 * allan, 156.5 * allan, 145.34375 * allan, 155.5 * allan, 136.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[4]);
  circle(kristof, 125.5 * allan, 140.34375 * allan, 11.180339887498949 * allan);
  fill_path(kristof, flava[5]);
  circle(kristof, 122.5 * allan, 135.34375 * allan, 5.0990195135927845 * allan);
  fill_path(kristof, flava[6]);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(196.5 * allan, 151.34375 * allan);
  kristof.bezierCurveTo(211.5 * allan, 158.34375 * allan, 224.5 * allan, 171.34375 * allan, 229.5 * allan, 176.34375 * allan);
  kristof.bezierCurveTo(246.5 * allan, 163.34375 * allan, 259.5 * allan, 166.34375 * allan, 272.5 * allan, 168.34375 * allan);
  kristof.bezierCurveTo(254.5 * allan, 146.34375 * allan, 214.5 * allan, 145.34375 * allan, 198.5 * allan, 151.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[7], flava[8], 12 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(154.5 * allan, 222.34375 * allan);
  kristof.bezierCurveTo(164.5 * allan, 234.34375 * allan, 173.5 * allan, 242.34375 * allan, 178.5 * allan, 245.34375 * allan);
  kristof.bezierCurveTo(174.5 * allan, 265.34375 * allan, 180.5 * allan, 274.34375 * allan, 186.5 * allan, 283.34375 * allan);
  kristof.bezierCurveTo(165.5 * allan, 277.34375 * allan, 151.5 * allan, 245.34375 * allan, 155.5 * allan, 224.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[7], flava[8], 12 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(279.5 * allan, 294.34375 * allan);
  kristof.bezierCurveTo(286.5 * allan, 285.84375 * allan, 286.5 * allan, 285.84375 * allan, 293.5 * allan, 277.34375 * allan);
  kristof.bezierCurveTo(315.5 * allan, 280.34375 * allan, 315.5 * allan, 280.34375 * allan, 337.5 * allan, 283.34375 * allan);
  kristof.bezierCurveTo(340.5 * allan, 311.34375 * allan, 317.5 * allan, 326.34375 * allan, 307.5 * allan, 331.34375 * allan);
  kristof.closePath();
  fill_path(kristof, flava[7], flava[8], 12 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(296.5 * allan, 287.34375 * allan);
  kristof.bezierCurveTo(311.5 * allan, 291.34375 * allan, 311.5 * allan, 291.34375 * allan, 326.5 * allan, 295.34375 * allan);
  kristof.closePath();
  fill_path(kristof, undefined, flava[9], 6 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(294.5 * allan, 289.34375 * allan);
  kristof.bezierCurveTo(308.5 * allan, 297.34375 * allan, 308.5 * allan, 297.34375 * allan, 322.5 * allan, 305.34375 * allan);
  kristof.closePath();
  fill_path(kristof, undefined, flava[9], 6 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(294.5 * allan, 291.34375 * allan);
  kristof.bezierCurveTo(304 * allan, 303.34375 * allan, 304 * allan, 303.34375 * allan, 313.5 * allan, 315.34375 * allan);
  kristof.closePath();
  fill_path(kristof, undefined, flava[9], 6 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(226.5 * allan, 161.34375 * allan);
  kristof.bezierCurveTo(230.5 * allan, 160.34375 * allan, 236.5 * allan, 158.34375 * allan, 238.5 * allan, 161.34375 * allan);
  kristof.bezierCurveTo(238.5 * allan, 157.34375 * allan, 228.5 * allan, 159.34375 * allan, 227.5 * allan, 161.34375 * allan);
  kristof.closePath();
  fill_path(kristof, undefined, flava[9], 4 * allan);
  kristof.beginPath();
  kristof.lineCap = "round";
  kristof.lineJoin = "round";
  kristof.moveTo(167.5 * allan, 248.34375 * allan);
  kristof.bezierCurveTo(165.5 * allan, 251.34375 * allan, 168.5 * allan, 256.34375 * allan, 168.5 * allan, 253.34375 * allan);
  kristof.bezierCurveTo(166.5 * allan, 252.34375 * allan, 168.5 * allan, 246.34375 * allan, 166.5 * allan, 247.34375 * allan);
  kristof.closePath();
  fill_path(kristof, undefined, flava[9], 3 * allan);
  return laderian;
}
function create_fishfood_cooked(rayleah, andhy, hatziry) {
  var amais = document.createElement("canvas");
  var areebah = amais.getContext("2d");
  amais.width = 309 * rayleah;
  amais.height = 287 * rayleah;
  areebah.globalAlpha = andhy ? .5 : 1;
  areebah.translate(10 * rayleah, 5 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(34.5 * rayleah, 38.53125 * rayleah);
  areebah.bezierCurveTo(91.5 * rayleah, 30.53125 * rayleah, 138.5 * rayleah, 68.53125 * rayleah, 169.5 * rayleah, 93.53125 * rayleah);
  areebah.bezierCurveTo(208.5 * rayleah, 128.53125 * rayleah, 226.5 * rayleah, 157.53125 * rayleah, 233.5 * rayleah, 209.53125 * rayleah);
  areebah.bezierCurveTo(195.5 * rayleah, 218.53125 * rayleah, 138.5 * rayleah, 191.53125 * rayleah, 105.5 * rayleah, 157.53125 * rayleah);
  areebah.bezierCurveTo(54.5 * rayleah, 112.53125 * rayleah, 41.5 * rayleah, 80.53125 * rayleah, 33.5 * rayleah, 38.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[0], hatziry[0], 10 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(143.5 * rayleah, 74.53125 * rayleah);
  areebah.bezierCurveTo(164.5 * rayleah, 73.53125 * rayleah, 159 * rayleah, 74.53125 * rayleah, 174.5 * rayleah, 74.53125 * rayleah);
  areebah.bezierCurveTo(186 * rayleah, 86.53125 * rayleah, 186 * rayleah, 86.53125 * rayleah, 197.5 * rayleah, 98.53125 * rayleah);
  areebah.bezierCurveTo(186 * rayleah, 97.03125 * rayleah, 186 * rayleah, 97.03125 * rayleah, 174.5 * rayleah, 95.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[0], hatziry[0], 10 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(87.5 * rayleah, 142.53125 * rayleah);
  areebah.bezierCurveTo(92 * rayleah, 160.03125 * rayleah, 92 * rayleah, 160.03125 * rayleah, 96.5 * rayleah, 177.53125 * rayleah);
  areebah.bezierCurveTo(108 * rayleah, 181.53125 * rayleah, 108 * rayleah, 181.53125 * rayleah, 119.5 * rayleah, 185.53125 * rayleah);
  areebah.bezierCurveTo(116.5 * rayleah, 175.53125 * rayleah, 116.5 * rayleah, 175.53125 * rayleah, 113.5 * rayleah, 165.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[0], hatziry[0], 10 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(236.5 * rayleah, 189.53125 * rayleah);
  areebah.bezierCurveTo(274.5 * rayleah, 197.53125 * rayleah, 255.5 * rayleah, 194.03125 * rayleah, 274.5 * rayleah, 198.53125 * rayleah);
  areebah.bezierCurveTo(272.5 * rayleah, 236.53125 * rayleah, 261.5 * rayleah, 237.53125 * rayleah, 242.5 * rayleah, 248.53125 * rayleah);
  areebah.bezierCurveTo(230.5 * rayleah, 231.03125 * rayleah, 230.5 * rayleah, 231.03125 * rayleah, 218.5 * rayleah, 213.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[0], hatziry[0], 10 * rayleah);
  areebah.globalAlpha = 1;
  areebah.translate(-10 * rayleah, -5 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(34.5 * rayleah, 38.53125 * rayleah);
  areebah.bezierCurveTo(91.5 * rayleah, 30.53125 * rayleah, 138.5 * rayleah, 68.53125 * rayleah, 169.5 * rayleah, 93.53125 * rayleah);
  areebah.bezierCurveTo(208.5 * rayleah, 128.53125 * rayleah, 226.5 * rayleah, 157.53125 * rayleah, 233.5 * rayleah, 209.53125 * rayleah);
  areebah.bezierCurveTo(195.5 * rayleah, 218.53125 * rayleah, 138.5 * rayleah, 191.53125 * rayleah, 105.5 * rayleah, 157.53125 * rayleah);
  areebah.bezierCurveTo(54.5 * rayleah, 112.53125 * rayleah, 41.5 * rayleah, 80.53125 * rayleah, 33.5 * rayleah, 38.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[1], hatziry[2], 10 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(143.5 * rayleah, 74.53125 * rayleah);
  areebah.bezierCurveTo(164.5 * rayleah, 73.53125 * rayleah, 159 * rayleah, 74.53125 * rayleah, 174.5 * rayleah, 74.53125 * rayleah);
  areebah.bezierCurveTo(186 * rayleah, 86.53125 * rayleah, 186 * rayleah, 86.53125 * rayleah, 197.5 * rayleah, 98.53125 * rayleah);
  areebah.bezierCurveTo(186 * rayleah, 97.03125 * rayleah, 186 * rayleah, 97.03125 * rayleah, 174.5 * rayleah, 95.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[1], hatziry[2], 10 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(87.5 * rayleah, 142.53125 * rayleah);
  areebah.bezierCurveTo(92 * rayleah, 160.03125 * rayleah, 92 * rayleah, 160.03125 * rayleah, 96.5 * rayleah, 177.53125 * rayleah);
  areebah.bezierCurveTo(108 * rayleah, 181.53125 * rayleah, 108 * rayleah, 181.53125 * rayleah, 119.5 * rayleah, 185.53125 * rayleah);
  areebah.bezierCurveTo(116.5 * rayleah, 175.53125 * rayleah, 116.5 * rayleah, 175.53125 * rayleah, 113.5 * rayleah, 165.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[1], hatziry[2], 10 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(236.5 * rayleah, 189.53125 * rayleah);
  areebah.bezierCurveTo(274.5 * rayleah, 197.53125 * rayleah, 255.5 * rayleah, 194.03125 * rayleah, 274.5 * rayleah, 198.53125 * rayleah);
  areebah.bezierCurveTo(272.5 * rayleah, 236.53125 * rayleah, 261.5 * rayleah, 237.53125 * rayleah, 242.5 * rayleah, 248.53125 * rayleah);
  areebah.bezierCurveTo(230.5 * rayleah, 231.03125 * rayleah, 230.5 * rayleah, 231.03125 * rayleah, 218.5 * rayleah, 213.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[1], hatziry[2], 10 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(109.5 * rayleah, 51.53125 * rayleah);
  areebah.bezierCurveTo(107.5 * rayleah, 92.53125 * rayleah, 91.5 * rayleah, 95.53125 * rayleah, 59.5 * rayleah, 101.53125 * rayleah);
  fill_path(areebah, hatziry[1], hatziry[2], 7 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(72.5 * rayleah, 51.53125 * rayleah);
  areebah.bezierCurveTo(71 * rayleah, 64.53125 * rayleah, 69.5 * rayleah, 76.53125 * rayleah, 69.5 * rayleah, 77.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[1], hatziry[2], 7 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(84.5 * rayleah, 63.53125 * rayleah);
  areebah.bezierCurveTo(70.5 * rayleah, 65.03125 * rayleah, 70.5 * rayleah, 65.03125 * rayleah, 56.5 * rayleah, 66.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[1], hatziry[2], 7 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(125.5 * rayleah, 84.53125 * rayleah);
  areebah.bezierCurveTo(125.5 * rayleah, 110.03125 * rayleah, 125.5 * rayleah, 110.03125 * rayleah, 125.5 * rayleah, 135.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[1], hatziry[2], 7 * rayleah);
  areebah.beginPath();
  areebah.lineCap = "round";
  areebah.lineJoin = "round";
  areebah.moveTo(149.5 * rayleah, 108.53125 * rayleah);
  areebah.bezierCurveTo(150 * rayleah, 137.03125 * rayleah, 150 * rayleah, 137.03125 * rayleah, 150.5 * rayleah, 165.53125 * rayleah);
  areebah.closePath();
  fill_path(areebah, hatziry[1], hatziry[2], 7 * rayleah);
  return amais;
}
function create_wall(sie, shaquana, parita) {
  var braley = document.createElement("canvas");
  var auguste = braley.getContext("2d");
  var sadique = sie * 130;
  var kadera = sie * 142;
  var sayge = sadique / 2;
  var tatianah = kadera / 2;
  braley.width = sadique;
  braley.height = kadera;
  auguste.translate(sayge, tatianah + 7 * sie);
  auguste.globalAlpha = shaquana ? .5 : 1;
  circle(auguste, 0, 0, 60 * sie);
  fill_path(auguste, parita[0]);
  auguste.translate(0, -7 * sie);
  auguste.globalAlpha = 1;
  circle(auguste, 0, 0, 60 * sie, 0);
  fill_path(auguste, parita[1], parita[2], 4 * sie);
  circle(auguste, 0, 0, 40 * sie);
  fill_path(auguste, parita[3]);
  circle(auguste, 0, 0, 25 * sie);
  fill_path(auguste, parita[4], parita[5], 8 * sie);
  return braley;
}
function create_delay_wall(cherelle, oday) {
  var jashonna = document.createElement("canvas");
  var javien = jashonna.getContext("2d");
  var christerfer = cherelle * 130;
  var kionah = cherelle * 142;
  var caryann = christerfer / 2;
  var beloved = kionah / 2;
  jashonna.width = christerfer;
  jashonna.height = kionah;
  circle(javien, caryann, beloved, 40 * cherelle, 0);
  fill_path(javien, undefined, oday[0], 7 * cherelle);
  circle(javien, caryann, beloved, 30 * cherelle, 0);
  fill_path(javien, undefined, oday[0], 7 * cherelle);
  circle(javien, caryann, beloved, 20 * cherelle, 0);
  fill_path(javien, oday[0]);
  return jashonna;
}
function create_wall_diamond(nayonika, jhovany, cozmo) {
  var katlynn = document.createElement("canvas");
  var cherlin = katlynn.getContext("2d");
  katlynn.width = 130 * nayonika;
  katlynn.height = 142 * nayonika;
  cherlin.globalAlpha = jhovany ? .5 : 1;
  cherlin.save();
  cherlin.translate(65 * nayonika, 80 * nayonika);
  cherlin.rotate(.2);
  round_regular_polygon(cherlin, 9, 60 * nayonika, 10 * nayonika);
  cherlin.restore();
  fill_path(cherlin, cozmo[0]);
  cherlin.globalAlpha = 1;
  cherlin.save();
  cherlin.translate(65 * nayonika, 71 * nayonika);
  cherlin.rotate(.2);
  round_regular_polygon(cherlin, 9, 60 * nayonika, 10 * nayonika);
  fill_path(cherlin, cozmo[1], cozmo[2], 4);
  cherlin.rotate(-0.32);
  round_regular_polygon(cherlin, 9, 38 * nayonika, 10 * nayonika);
  fill_path(cherlin, cozmo[3], cozmo[4], 4);
  cherlin.rotate(.68);
  round_regular_polygon(cherlin, 9, 20 * nayonika, 8 * nayonika);
  fill_path(cherlin, cozmo[5], cozmo[6], 6);
  cherlin.restore();
  return katlynn;
}
function create_palm(sahl, zuriana) {
  var autym = document.createElement("canvas");
  var calister = autym.getContext("2d");
  autym.width = 372 * sahl;
  autym.height = 375 * sahl;
  calister.globalAlpha = .5;
  calister.translate(15 * sahl, 15 * sahl);
  calister.beginPath();
  calister.lineCap = "round";
  calister.lineJoin = "round";
  calister.moveTo(313.0000305175781 * sahl, 76.58523559570312 * sahl);
  calister.bezierCurveTo(308.0000305175781 * sahl, 130.58523559570312 * sahl, 279.0000305175781 * sahl, 158.58523559570312 * sahl, 254.00003051757812 * sahl, 175.58523559570312 * sahl);
  calister.bezierCurveTo(287.0000305175781 * sahl, 182.58523559570312 * sahl, 274.0000305175781 * sahl, 181.08523559570312 * sahl, 294.0000305175781 * sahl, 186.58523559570312 * sahl);
  calister.bezierCurveTo(293.5000305175781 * sahl, 196.08523559570312 * sahl, 293.5000305175781 * sahl, 196.08523559570312 * sahl, 293.0000305175781 * sahl, 205.58523559570312 * sahl);
  calister.bezierCurveTo(304.0000305175781 * sahl, 201.08523559570312 * sahl, 304.0000305175781 * sahl, 201.08523559570312 * sahl, 315.0000305175781 * sahl, 196.58523559570312 * sahl);
  calister.bezierCurveTo(350.0000305175781 * sahl, 219.58523559570312 * sahl, 343.0000305175781 * sahl, 221.58523559570312 * sahl, 351.0000305175781 * sahl, 230.58523559570312 * sahl);
  calister.bezierCurveTo(296.0000305175781 * sahl, 260.5852355957031 * sahl, 264.0000305175781 * sahl, 256.5852355957031 * sahl, 220.00003051757812 * sahl, 236.58523559570312 * sahl);
  calister.bezierCurveTo(233.00003051757812 * sahl, 266.5852355957031 * sahl, 232.00003051757812 * sahl, 279.5852355957031 * sahl, 231.00003051757812 * sahl, 295.5852355957031 * sahl);
  calister.bezierCurveTo(222.00003051757812 * sahl, 297.5852355957031 * sahl, 222.00003051757812 * sahl, 297.5852355957031 * sahl, 213.00003051757812 * sahl, 299.5852355957031 * sahl);
  calister.bezierCurveTo(219.50003051757812 * sahl, 308.0852355957031 * sahl, 219.50003051757812 * sahl, 308.0852355957031 * sahl, 226.00003051757812 * sahl, 316.5852355957031 * sahl);
  calister.bezierCurveTo(223.00003051757812 * sahl, 344.5852355957031 * sahl, 216.00003051757812 * sahl, 350.5852355957031 * sahl, 209.00003051757812 * sahl, 363.5852355957031 * sahl);
  calister.bezierCurveTo(154.00003051757812 * sahl, 318.5852355957031 * sahl, 156.00003051757812 * sahl, 268.5852355957031 * sahl, 160.00003051757812 * sahl, 238.58523559570312 * sahl);
  calister.bezierCurveTo(135.00003051757812 * sahl, 268.5852355957031 * sahl, 125.00003051757812 * sahl, 267.5852355957031 * sahl, 112.00003051757812 * sahl, 272.5852355957031 * sahl);
  calister.bezierCurveTo(104.50003051757812 * sahl, 266.5852355957031 * sahl, 104.50003051757812 * sahl, 266.5852355957031 * sahl, 97.00003051757812 * sahl, 260.5852355957031 * sahl);
  calister.bezierCurveTo(93.00003051757812 * sahl, 271.0852355957031 * sahl, 93.00003051757812 * sahl, 271.0852355957031 * sahl, 89.00003051757812 * sahl, 281.5852355957031 * sahl);
  calister.bezierCurveTo(66.00003051757812 * sahl, 288.5852355957031 * sahl, 59.000030517578125 * sahl, 288.5852355957031 * sahl, 39.000030517578125 * sahl, 285.5852355957031 * sahl);
  calister.bezierCurveTo(56.000030517578125 * sahl, 216.58523559570312 * sahl, 91.00003051757812 * sahl, 204.58523559570312 * sahl, 129.00003051757812 * sahl, 189.58523559570312 * sahl);
  calister.bezierCurveTo(90.00003051757812 * sahl, 176.58523559570312 * sahl, 89.00003051757812 * sahl, 173.58523559570312 * sahl, 79.00003051757812 * sahl, 166.58523559570312 * sahl);
  calister.bezierCurveTo(82.00003051757812 * sahl, 155.08523559570312 * sahl, 82.00003051757812 * sahl, 155.08523559570312 * sahl, 85.00003051757812 * sahl, 143.58523559570312 * sahl);
  calister.bezierCurveTo(75.50003051757812 * sahl, 147.58523559570312 * sahl, 75.50003051757812 * sahl, 147.58523559570312 * sahl, 66.00003051757812 * sahl, 151.58523559570312 * sahl);
  calister.bezierCurveTo(44.000030517578125 * sahl, 133.58523559570312 * sahl, 41.000030517578125 * sahl, 124.58523559570312 * sahl, 34.000030517578125 * sahl, 102.58523559570312 * sahl);
  calister.bezierCurveTo(100.00003051757812 * sahl, 81.58523559570312 * sahl, 134.00003051757812 * sahl, 118.58523559570312 * sahl, 150.00003051757812 * sahl, 128.58523559570312 * sahl);
  calister.bezierCurveTo(144.00003051757812 * sahl, 102.58523559570312 * sahl, 147.00003051757812 * sahl, 90.58523559570312 * sahl, 150.00003051757812 * sahl, 80.58523559570312 * sahl);
  calister.bezierCurveTo(159.50003051757812 * sahl, 79.08523559570312 * sahl, 159.50003051757812 * sahl, 79.08523559570312 * sahl, 169.00003051757812 * sahl, 77.58523559570312 * sahl);
  calister.bezierCurveTo(163.00003051757812 * sahl, 72.58523559570312 * sahl, 163.00003051757812 * sahl, 72.58523559570312 * sahl, 157.00003051757812 * sahl, 67.58523559570312 * sahl);
  calister.bezierCurveTo(162.00003051757812 * sahl, 42.585235595703125 * sahl, 169.00003051757812 * sahl, 29.585235595703125 * sahl, 182.00003051757812 * sahl, 14.585235595703125 * sahl);
  calister.bezierCurveTo(219.00003051757812 * sahl, 48.585235595703125 * sahl, 222.00003051757812 * sahl, 92.58523559570312 * sahl, 218.00003051757812 * sahl, 112.58523559570312 * sahl);
  calister.bezierCurveTo(239.00003051757812 * sahl, 95.58523559570312 * sahl, 242.00003051757812 * sahl, 97.58523559570312 * sahl, 249.00003051757812 * sahl, 94.58523559570312 * sahl);
  calister.bezierCurveTo(255.00003051757812 * sahl, 103.08523559570312 * sahl, 255.00003051757812 * sahl, 103.08523559570312 * sahl, 261.0000305175781 * sahl, 111.58523559570312 * sahl);
  calister.bezierCurveTo(261.5000305175781 * sahl, 99.58523559570312 * sahl, 261.5000305175781 * sahl, 99.58523559570312 * sahl, 262.0000305175781 * sahl, 87.58523559570312 * sahl);
  calister.bezierCurveTo(282.0000305175781 * sahl, 77.58523559570312 * sahl, 301.0000305175781 * sahl, 74.58523559570312 * sahl, 314.0000305175781 * sahl, 76.58523559570312 * sahl);
  calister.closePath();
  fill_path(calister, zuriana[0]);
  calister.globalAlpha = 1;
  calister.translate(-15 * sahl, -15 * sahl);
  calister.beginPath();
  calister.lineCap = "round";
  calister.lineJoin = "round";
  calister.moveTo(313.0000305175781 * sahl, 76.58523559570312 * sahl);
  calister.bezierCurveTo(308.0000305175781 * sahl, 130.58523559570312 * sahl, 279.0000305175781 * sahl, 158.58523559570312 * sahl, 254.00003051757812 * sahl, 175.58523559570312 * sahl);
  calister.bezierCurveTo(287.0000305175781 * sahl, 182.58523559570312 * sahl, 274.0000305175781 * sahl, 181.08523559570312 * sahl, 294.0000305175781 * sahl, 186.58523559570312 * sahl);
  calister.bezierCurveTo(293.5000305175781 * sahl, 196.08523559570312 * sahl, 293.5000305175781 * sahl, 196.08523559570312 * sahl, 293.0000305175781 * sahl, 205.58523559570312 * sahl);
  calister.bezierCurveTo(304.0000305175781 * sahl, 201.08523559570312 * sahl, 304.0000305175781 * sahl, 201.08523559570312 * sahl, 315.0000305175781 * sahl, 196.58523559570312 * sahl);
  calister.bezierCurveTo(350.0000305175781 * sahl, 219.58523559570312 * sahl, 343.0000305175781 * sahl, 221.58523559570312 * sahl, 351.0000305175781 * sahl, 230.58523559570312 * sahl);
  calister.bezierCurveTo(296.0000305175781 * sahl, 260.5852355957031 * sahl, 264.0000305175781 * sahl, 256.5852355957031 * sahl, 220.00003051757812 * sahl, 236.58523559570312 * sahl);
  calister.bezierCurveTo(233.00003051757812 * sahl, 266.5852355957031 * sahl, 232.00003051757812 * sahl, 279.5852355957031 * sahl, 231.00003051757812 * sahl, 295.5852355957031 * sahl);
  calister.bezierCurveTo(222.00003051757812 * sahl, 297.5852355957031 * sahl, 222.00003051757812 * sahl, 297.5852355957031 * sahl, 213.00003051757812 * sahl, 299.5852355957031 * sahl);
  calister.bezierCurveTo(219.50003051757812 * sahl, 308.0852355957031 * sahl, 219.50003051757812 * sahl, 308.0852355957031 * sahl, 226.00003051757812 * sahl, 316.5852355957031 * sahl);
  calister.bezierCurveTo(223.00003051757812 * sahl, 344.5852355957031 * sahl, 216.00003051757812 * sahl, 350.5852355957031 * sahl, 209.00003051757812 * sahl, 363.5852355957031 * sahl);
  calister.bezierCurveTo(154.00003051757812 * sahl, 318.5852355957031 * sahl, 156.00003051757812 * sahl, 268.5852355957031 * sahl, 160.00003051757812 * sahl, 238.58523559570312 * sahl);
  calister.bezierCurveTo(135.00003051757812 * sahl, 268.5852355957031 * sahl, 125.00003051757812 * sahl, 267.5852355957031 * sahl, 112.00003051757812 * sahl, 272.5852355957031 * sahl);
  calister.bezierCurveTo(104.50003051757812 * sahl, 266.5852355957031 * sahl, 104.50003051757812 * sahl, 266.5852355957031 * sahl, 97.00003051757812 * sahl, 260.5852355957031 * sahl);
  calister.bezierCurveTo(93.00003051757812 * sahl, 271.0852355957031 * sahl, 93.00003051757812 * sahl, 271.0852355957031 * sahl, 89.00003051757812 * sahl, 281.5852355957031 * sahl);
  calister.bezierCurveTo(66.00003051757812 * sahl, 288.5852355957031 * sahl, 59.000030517578125 * sahl, 288.5852355957031 * sahl, 39.000030517578125 * sahl, 285.5852355957031 * sahl);
  calister.bezierCurveTo(56.000030517578125 * sahl, 216.58523559570312 * sahl, 91.00003051757812 * sahl, 204.58523559570312 * sahl, 129.00003051757812 * sahl, 189.58523559570312 * sahl);
  calister.bezierCurveTo(90.00003051757812 * sahl, 176.58523559570312 * sahl, 89.00003051757812 * sahl, 173.58523559570312 * sahl, 79.00003051757812 * sahl, 166.58523559570312 * sahl);
  calister.bezierCurveTo(82.00003051757812 * sahl, 155.08523559570312 * sahl, 82.00003051757812 * sahl, 155.08523559570312 * sahl, 85.00003051757812 * sahl, 143.58523559570312 * sahl);
  calister.bezierCurveTo(75.50003051757812 * sahl, 147.58523559570312 * sahl, 75.50003051757812 * sahl, 147.58523559570312 * sahl, 66.00003051757812 * sahl, 151.58523559570312 * sahl);
  calister.bezierCurveTo(44.000030517578125 * sahl, 133.58523559570312 * sahl, 41.000030517578125 * sahl, 124.58523559570312 * sahl, 34.000030517578125 * sahl, 102.58523559570312 * sahl);
  calister.bezierCurveTo(100.00003051757812 * sahl, 81.58523559570312 * sahl, 134.00003051757812 * sahl, 118.58523559570312 * sahl, 150.00003051757812 * sahl, 128.58523559570312 * sahl);
  calister.bezierCurveTo(144.00003051757812 * sahl, 102.58523559570312 * sahl, 147.00003051757812 * sahl, 90.58523559570312 * sahl, 150.00003051757812 * sahl, 80.58523559570312 * sahl);
  calister.bezierCurveTo(159.50003051757812 * sahl, 79.08523559570312 * sahl, 159.50003051757812 * sahl, 79.08523559570312 * sahl, 169.00003051757812 * sahl, 77.58523559570312 * sahl);
  calister.bezierCurveTo(163.00003051757812 * sahl, 72.58523559570312 * sahl, 163.00003051757812 * sahl, 72.58523559570312 * sahl, 157.00003051757812 * sahl, 67.58523559570312 * sahl);
  calister.bezierCurveTo(162.00003051757812 * sahl, 42.585235595703125 * sahl, 169.00003051757812 * sahl, 29.585235595703125 * sahl, 182.00003051757812 * sahl, 14.585235595703125 * sahl);
  calister.bezierCurveTo(219.00003051757812 * sahl, 48.585235595703125 * sahl, 222.00003051757812 * sahl, 92.58523559570312 * sahl, 218.00003051757812 * sahl, 112.58523559570312 * sahl);
  calister.bezierCurveTo(239.00003051757812 * sahl, 95.58523559570312 * sahl, 242.00003051757812 * sahl, 97.58523559570312 * sahl, 249.00003051757812 * sahl, 94.58523559570312 * sahl);
  calister.bezierCurveTo(255.00003051757812 * sahl, 103.08523559570312 * sahl, 255.00003051757812 * sahl, 103.08523559570312 * sahl, 261.0000305175781 * sahl, 111.58523559570312 * sahl);
  calister.bezierCurveTo(261.5000305175781 * sahl, 99.58523559570312 * sahl, 261.5000305175781 * sahl, 99.58523559570312 * sahl, 262.0000305175781 * sahl, 87.58523559570312 * sahl);
  calister.bezierCurveTo(282.0000305175781 * sahl, 77.58523559570312 * sahl, 301.0000305175781 * sahl, 74.58523559570312 * sahl, 314.0000305175781 * sahl, 76.58523559570312 * sahl);
  calister.closePath();
  fill_path(calister, zuriana[1], zuriana[2], 4 * sahl);
  calister.beginPath();
  calister.lineCap = "round";
  calister.lineJoin = "round";
  calister.moveTo(186.00003051757812 * sahl, 192.94886779785156 * sahl);
  calister.bezierCurveTo(185.00003051757812 * sahl, 66.94886779785156 * sahl, 184.50003051757812 * sahl, 104.94886779785156 * sahl, 183.00003051757812 * sahl, 16.948867797851562 * sahl);
  calister.bezierCurveTo(216.00003051757812 * sahl, 47.94886779785156 * sahl, 219.00003051757812 * sahl, 80.94886779785156 * sahl, 218.00003051757812 * sahl, 113.94886779785156 * sahl);
  calister.bezierCurveTo(209.00003051757812 * sahl, 165.94886779785156 * sahl, 200.00003051757812 * sahl, 176.94886779785156 * sahl, 189.00003051757812 * sahl, 192.94886779785156 * sahl);
  calister.closePath();
  fill_path(calister, zuriana[3], zuriana[3], 2 * sahl);
  calister.beginPath();
  calister.lineCap = "round";
  calister.lineJoin = "round";
  calister.moveTo(190.00003051757812 * sahl, 191.94886779785156 * sahl);
  calister.bezierCurveTo(207.00003051757812 * sahl, 348.94886779785156 * sahl, 205.00003051757812 * sahl, 323.94886779785156 * sahl, 209.00003051757812 * sahl, 358.94886779785156 * sahl);
  calister.bezierCurveTo(171.00003051757812 * sahl, 334.94886779785156 * sahl, 167.00003051757812 * sahl, 302.94886779785156 * sahl, 161.00003051757812 * sahl, 268.94886779785156 * sahl);
  calister.bezierCurveTo(160.00003051757812 * sahl, 218.94886779785156 * sahl, 181.00003051757812 * sahl, 191.94886779785156 * sahl, 189.00003051757812 * sahl, 186.94886779785156 * sahl);
  calister.closePath();
  fill_path(calister, zuriana[3], zuriana[3], 2 * sahl);
  calister.beginPath();
  calister.lineCap = "round";
  calister.lineJoin = "round";
  calister.moveTo(194.00003051757812 * sahl, 195.94886779785156 * sahl);
  calister.bezierCurveTo(116.00003051757812 * sahl, 150.94886779785156 * sahl, 116.00003051757812 * sahl, 150.94886779785156 * sahl, 38.000030517578125 * sahl, 105.94886779785156 * sahl);
  calister.bezierCurveTo(67.00003051757812 * sahl, 90.94886779785156 * sahl, 96.00003051757812 * sahl, 99.94886779785156 * sahl, 123.00003051757812 * sahl, 111.94886779785156 * sahl);
  calister.bezierCurveTo(183.00003051757812 * sahl, 152.94886779785156 * sahl, 179.00003051757812 * sahl, 180.94886779785156 * sahl, 193.00003051757812 * sahl, 194.94886779785156 * sahl);
  calister.closePath();
  fill_path(calister, zuriana[3], zuriana[3], 2 * sahl);
  calister.beginPath();
  calister.lineCap = "round";
  calister.lineJoin = "round";
  calister.moveTo(189.00003051757812 * sahl, 190.94886779785156 * sahl);
  calister.bezierCurveTo(250.00003051757812 * sahl, 133.94886779785156 * sahl, 311.0000305175781 * sahl, 78.94886779785156 * sahl, 311.0000305175781 * sahl, 76.94886779785156 * sahl);
  calister.bezierCurveTo(306.0000305175781 * sahl, 127.94886779785156 * sahl, 283.0000305175781 * sahl, 148.94886779785156 * sahl, 261.0000305175781 * sahl, 166.94886779785156 * sahl);
  calister.bezierCurveTo(220.00003051757812 * sahl, 197.94886779785156 * sahl, 191.00003051757812 * sahl, 194.94886779785156 * sahl, 189.00003051757812 * sahl, 195.94886779785156 * sahl);
  calister.closePath();
  fill_path(calister, zuriana[3], zuriana[3], 2 * sahl);
  calister.beginPath();
  calister.lineCap = "round";
  calister.lineJoin = "round";
  calister.moveTo(189.00003051757812 * sahl, 194.94886779785156 * sahl);
  calister.bezierCurveTo(268.5000305175781 * sahl, 211.94886779785156 * sahl, 268.5000305175781 * sahl, 211.94886779785156 * sahl, 348.0000305175781 * sahl, 228.94886779785156 * sahl);
  calister.bezierCurveTo(316.0000305175781 * sahl, 247.94886779785156 * sahl, 298.0000305175781 * sahl, 256.94886779785156 * sahl, 250.00003051757812 * sahl, 246.94886779785156 * sahl);
  calister.bezierCurveTo(197.00003051757812 * sahl, 229.94886779785156 * sahl, 189.00003051757812 * sahl, 202.94886779785156 * sahl, 188.00003051757812 * sahl, 199.94886779785156 * sahl);
  calister.closePath();
  fill_path(calister, zuriana[3], zuriana[3], 2 * sahl);
  calister.beginPath();
  calister.lineCap = "round";
  calister.lineJoin = "round";
  calister.moveTo(192.00003051757812 * sahl, 191.94886779785156 * sahl);
  calister.bezierCurveTo(116.50003051757812 * sahl, 238.44886779785156 * sahl, 116.50003051757812 * sahl, 238.44886779785156 * sahl, 41.000030517578125 * sahl, 284.94886779785156 * sahl);
  calister.bezierCurveTo(49.000030517578125 * sahl, 252.94886779785156 * sahl, 56.000030517578125 * sahl, 242.94886779785156 * sahl, 80.00003051757812 * sahl, 215.94886779785156 * sahl);
  calister.bezierCurveTo(125.00003051757812 * sahl, 181.94886779785156 * sahl, 174.00003051757812 * sahl, 183.94886779785156 * sahl, 192.00003051757812 * sahl, 191.94886779785156 * sahl);
  calister.closePath();
  fill_path(calister, zuriana[3], zuriana[3], 2 * sahl);
  calister.beginPath();
  calister.lineCap = "round";
  calister.lineJoin = "round";
  calister.moveTo(313.0000305175781 * sahl, 76.58523559570312 * sahl);
  calister.bezierCurveTo(308.0000305175781 * sahl, 130.58523559570312 * sahl, 279.0000305175781 * sahl, 158.58523559570312 * sahl, 254.00003051757812 * sahl, 175.58523559570312 * sahl);
  calister.bezierCurveTo(287.0000305175781 * sahl, 182.58523559570312 * sahl, 274.0000305175781 * sahl, 181.08523559570312 * sahl, 294.0000305175781 * sahl, 186.58523559570312 * sahl);
  calister.bezierCurveTo(293.5000305175781 * sahl, 196.08523559570312 * sahl, 293.5000305175781 * sahl, 196.08523559570312 * sahl, 293.0000305175781 * sahl, 205.58523559570312 * sahl);
  calister.bezierCurveTo(304.0000305175781 * sahl, 201.08523559570312 * sahl, 304.0000305175781 * sahl, 201.08523559570312 * sahl, 315.0000305175781 * sahl, 196.58523559570312 * sahl);
  calister.bezierCurveTo(350.0000305175781 * sahl, 219.58523559570312 * sahl, 343.0000305175781 * sahl, 221.58523559570312 * sahl, 351.0000305175781 * sahl, 230.58523559570312 * sahl);
  calister.bezierCurveTo(296.0000305175781 * sahl, 260.5852355957031 * sahl, 264.0000305175781 * sahl, 256.5852355957031 * sahl, 220.00003051757812 * sahl, 236.58523559570312 * sahl);
  calister.bezierCurveTo(233.00003051757812 * sahl, 266.5852355957031 * sahl, 232.00003051757812 * sahl, 279.5852355957031 * sahl, 231.00003051757812 * sahl, 295.5852355957031 * sahl);
  calister.bezierCurveTo(222.00003051757812 * sahl, 297.5852355957031 * sahl, 222.00003051757812 * sahl, 297.5852355957031 * sahl, 213.00003051757812 * sahl, 299.5852355957031 * sahl);
  calister.bezierCurveTo(219.50003051757812 * sahl, 308.0852355957031 * sahl, 219.50003051757812 * sahl, 308.0852355957031 * sahl, 226.00003051757812 * sahl, 316.5852355957031 * sahl);
  calister.bezierCurveTo(223.00003051757812 * sahl, 344.5852355957031 * sahl, 216.00003051757812 * sahl, 350.5852355957031 * sahl, 209.00003051757812 * sahl, 363.5852355957031 * sahl);
  calister.bezierCurveTo(154.00003051757812 * sahl, 318.5852355957031 * sahl, 156.00003051757812 * sahl, 268.5852355957031 * sahl, 160.00003051757812 * sahl, 238.58523559570312 * sahl);
  calister.bezierCurveTo(135.00003051757812 * sahl, 268.5852355957031 * sahl, 125.00003051757812 * sahl, 267.5852355957031 * sahl, 112.00003051757812 * sahl, 272.5852355957031 * sahl);
  calister.bezierCurveTo(104.50003051757812 * sahl, 266.5852355957031 * sahl, 104.50003051757812 * sahl, 266.5852355957031 * sahl, 97.00003051757812 * sahl, 260.5852355957031 * sahl);
  calister.bezierCurveTo(93.00003051757812 * sahl, 271.0852355957031 * sahl, 93.00003051757812 * sahl, 271.0852355957031 * sahl, 89.00003051757812 * sahl, 281.5852355957031 * sahl);
  calister.bezierCurveTo(66.00003051757812 * sahl, 288.5852355957031 * sahl, 59.000030517578125 * sahl, 288.5852355957031 * sahl, 39.000030517578125 * sahl, 285.5852355957031 * sahl);
  calister.bezierCurveTo(56.000030517578125 * sahl, 216.58523559570312 * sahl, 91.00003051757812 * sahl, 204.58523559570312 * sahl, 129.00003051757812 * sahl, 189.58523559570312 * sahl);
  calister.bezierCurveTo(90.00003051757812 * sahl, 176.58523559570312 * sahl, 89.00003051757812 * sahl, 173.58523559570312 * sahl, 79.00003051757812 * sahl, 166.58523559570312 * sahl);
  calister.bezierCurveTo(82.00003051757812 * sahl, 155.08523559570312 * sahl, 82.00003051757812 * sahl, 155.08523559570312 * sahl, 85.00003051757812 * sahl, 143.58523559570312 * sahl);
  calister.bezierCurveTo(75.50003051757812 * sahl, 147.58523559570312 * sahl, 75.50003051757812 * sahl, 147.58523559570312 * sahl, 66.00003051757812 * sahl, 151.58523559570312 * sahl);
  calister.bezierCurveTo(44.000030517578125 * sahl, 133.58523559570312 * sahl, 41.000030517578125 * sahl, 124.58523559570312 * sahl, 34.000030517578125 * sahl, 102.58523559570312 * sahl);
  calister.bezierCurveTo(100.00003051757812 * sahl, 81.58523559570312 * sahl, 134.00003051757812 * sahl, 118.58523559570312 * sahl, 150.00003051757812 * sahl, 128.58523559570312 * sahl);
  calister.bezierCurveTo(144.00003051757812 * sahl, 102.58523559570312 * sahl, 147.00003051757812 * sahl, 90.58523559570312 * sahl, 150.00003051757812 * sahl, 80.58523559570312 * sahl);
  calister.bezierCurveTo(159.50003051757812 * sahl, 79.08523559570312 * sahl, 159.50003051757812 * sahl, 79.08523559570312 * sahl, 169.00003051757812 * sahl, 77.58523559570312 * sahl);
  calister.bezierCurveTo(163.00003051757812 * sahl, 72.58523559570312 * sahl, 163.00003051757812 * sahl, 72.58523559570312 * sahl, 157.00003051757812 * sahl, 67.58523559570312 * sahl);
  calister.bezierCurveTo(162.00003051757812 * sahl, 42.585235595703125 * sahl, 169.00003051757812 * sahl, 29.585235595703125 * sahl, 182.00003051757812 * sahl, 14.585235595703125 * sahl);
  calister.bezierCurveTo(219.00003051757812 * sahl, 48.585235595703125 * sahl, 222.00003051757812 * sahl, 92.58523559570312 * sahl, 218.00003051757812 * sahl, 112.58523559570312 * sahl);
  calister.bezierCurveTo(239.00003051757812 * sahl, 95.58523559570312 * sahl, 242.00003051757812 * sahl, 97.58523559570312 * sahl, 249.00003051757812 * sahl, 94.58523559570312 * sahl);
  calister.bezierCurveTo(255.00003051757812 * sahl, 103.08523559570312 * sahl, 255.00003051757812 * sahl, 103.08523559570312 * sahl, 261.0000305175781 * sahl, 111.58523559570312 * sahl);
  calister.bezierCurveTo(261.5000305175781 * sahl, 99.58523559570312 * sahl, 261.5000305175781 * sahl, 99.58523559570312 * sahl, 262.0000305175781 * sahl, 87.58523559570312 * sahl);
  calister.bezierCurveTo(282.0000305175781 * sahl, 77.58523559570312 * sahl, 301.0000305175781 * sahl, 74.58523559570312 * sahl, 314.0000305175781 * sahl, 76.58523559570312 * sahl);
  calister.closePath();
  fill_path(calister, undefined, zuriana[2], 4 * sahl);
  return autym;
}
function create_special_fur(dawoud, ameilia, raychele) {
  var aj = document.createElement("canvas");
  var tiki = aj.getContext("2d");
  aj.width = 248 * dawoud;
  aj.height = 128 * dawoud;
  tiki.beginPath();
  tiki.lineCap = "round";
  tiki.lineJoin = "round";
  tiki.moveTo(137 * dawoud, 7 * dawoud);
  tiki.bezierCurveTo(169 * dawoud, 14 * dawoud, 212 * dawoud, 9 * dawoud, 241 * dawoud, 5 * dawoud);
  tiki.bezierCurveTo(211 * dawoud, 63 * dawoud, 158 * dawoud, 92 * dawoud, 103 * dawoud, 109 * dawoud);
  tiki.bezierCurveTo(73 * dawoud, 126 * dawoud, 54 * dawoud, 124 * dawoud, 6 * dawoud, 99 * dawoud);
  tiki.bezierCurveTo(82 * dawoud, 63 * dawoud, 113 * dawoud, 35 * dawoud, 137 * dawoud, 8 * dawoud);
  tiki.closePath();
  fill_path(tiki, raychele[0], raychele[1], 14 * dawoud);
  tiki.beginPath();
  tiki.lineCap = "round";
  tiki.lineJoin = "round";
  tiki.moveTo(73 * dawoud, 124 * dawoud);
  tiki.bezierCurveTo(111 * dawoud, 126 * dawoud, 162 * dawoud, 97 * dawoud, 203 * dawoud, 61 * dawoud);
  tiki.bezierCurveTo(156 * dawoud, 98 * dawoud, 131 * dawoud, 106 * dawoud, 105 * dawoud, 109 * dawoud);
  tiki.bezierCurveTo(99 * dawoud, 121 * dawoud, 87 * dawoud, 124 * dawoud, 72 * dawoud, 124 * dawoud);
  tiki.closePath();
  fill_path(tiki, raychele[2], raychele[3], 1 * dawoud);
  return aj;
}
function create_wall_stone(dzung, lisiate, esmerlda) {
  var griffen = document.createElement("canvas");
  var kiayanna = griffen.getContext("2d");
  griffen.width = 130 * dzung;
  griffen.height = 148 * dzung;
  kiayanna.globalAlpha = lisiate ? .5 : 1;
  kiayanna.save();
  kiayanna.translate(65 * dzung, 85 * dzung);
  kiayanna.rotate(1.4);
  round_regular_polygon(kiayanna, 7, 60 * dzung, 10 * dzung);
  kiayanna.restore();
  fill_path(kiayanna, esmerlda[0]);
  kiayanna.globalAlpha = 1;
  kiayanna.save();
  kiayanna.translate(65 * dzung, 74 * dzung);
  kiayanna.rotate(1.4);
  round_regular_polygon(kiayanna, 7, 60 * dzung, 10 * dzung);
  fill_path(kiayanna, esmerlda[1], esmerlda[2], 4);
  kiayanna.rotate(.64);
  round_regular_polygon(kiayanna, 7, 40 * dzung, 10 * dzung);
  fill_path(kiayanna, esmerlda[3], esmerlda[4], 4);
  kiayanna.rotate(.12);
  round_regular_polygon(kiayanna, 7, 23 * dzung, 5 * dzung);
  kiayanna.restore();
  fill_path(kiayanna, esmerlda[5]);
  return griffen;
}
function create_wall_gold(kymbre, jamian, garak) {
  var meiling = document.createElement("canvas");
  var jahmaad = meiling.getContext("2d");
  meiling.width = kymbre * 125;
  meiling.height = kymbre * 139;
  jahmaad.globalAlpha = jamian ? .5 : 1;
  jahmaad.save();
  jahmaad.translate(63 * kymbre, 79 * kymbre);
  jahmaad.rotate(1);
  round_regular_polygon(jahmaad, 8, 60 * kymbre, 10 * kymbre);
  fill_path(jahmaad, garak[0]);
  jahmaad.restore();
  jahmaad.globalAlpha = 1;
  jahmaad.save();
  jahmaad.translate(63 * kymbre, 69 * kymbre);
  jahmaad.rotate(1);
  round_regular_polygon(jahmaad, 8, 60 * kymbre, 10 * kymbre);
  fill_path(jahmaad, garak[1], garak[2], 4);
  jahmaad.rotate(.56);
  round_regular_polygon(jahmaad, 8, 40 * kymbre, 10 * kymbre);
  fill_path(jahmaad, garak[3], garak[4], 4);
  jahmaad.rotate(.28);
  round_regular_polygon(jahmaad, 8, 28 * kymbre, 8 * kymbre);
  fill_path(jahmaad, garak[5]);
  jahmaad.restore();
  return meiling;
}
function create_door_wood(nariya, ahmonie, teadora) {
  var lisann = document.createElement("canvas");
  var aareona = lisann.getContext("2d");
  lisann.width = 90 * nariya;
  lisann.height = 101 * nariya;
  aareona.translate(0 * nariya, 5 * nariya);
  i === 0 && (aareona.globalAlpha = ahmonie ? .5 : 1, circle(aareona, 44 * nariya, 55 * nariya, 41 * nariya), fill_path(aareona, teadora[0]));
  aareona.globalAlpha = 1;
  circle(aareona, 44 * nariya, 45 * nariya, 41 * nariya);
  fill_path(aareona, teadora[1], teadora[2], 4 * nariya);
  circle(aareona, 44 * nariya, 45 * nariya, 31 * nariya);
  fill_path(aareona, teadora[3]);
  aareona.save();
  aareona.translate(45 * nariya, 45 * nariya);
  round_rect(aareona, -9 * nariya, -25.5 * nariya, 18 * nariya, 51 * nariya, 30 * nariya);
  aareona.restore();
  fill_path(aareona, teadora[4], teadora[4], 2 * nariya);
  aareona.save();
  aareona.translate(45 * nariya, 45 * nariya);
  round_rect(aareona, -26 * nariya, -9 * nariya, 52 * nariya, 18 * nariya, 30 * nariya);
  aareona.restore();
  fill_path(aareona, teadora[4], teadora[4], 2 * nariya);
  circle(aareona, 45 * nariya, 29 * nariya, 7 * nariya);
  fill_path(aareona, teadora[5]);
  circle(aareona, 45 * nariya, 61 * nariya, 7 * nariya);
  fill_path(aareona, teadora[5]);
  circle(aareona, 28 * nariya, 45 * nariya, 7 * nariya);
  fill_path(aareona, teadora[5]);
  circle(aareona, 62 * nariya, 45 * nariya, 7 * nariya);
  fill_path(aareona, teadora[5]);
  return lisann;
}
function create_door_stone(arlynne, demeteria, johnaven) {
  var kristijan = document.createElement("canvas");
  var jeramie = kristijan.getContext("2d");
  kristijan.width = 90 * arlynne;
  kristijan.height = 98 * arlynne;
  jeramie.translate(0, 4 * arlynne);
  if (i === 0) {
    jeramie.globalAlpha = demeteria ? .5 : 1;
    jeramie.save();
    jeramie.translate(44 * arlynne, 50 * arlynne);
    jeramie.rotate(1.4);
    round_regular_polygon(jeramie, 7, 41 * arlynne, 10 * arlynne);
    jeramie.restore();
    fill_path(jeramie, johnaven[0]);
  }
  jeramie.globalAlpha = 1;
  jeramie.save();
  jeramie.translate(44 * arlynne, 44 * arlynne);
  jeramie.rotate(1.4);
  round_regular_polygon(jeramie, 7, 41 * arlynne, 10 * arlynne);
  fill_path(jeramie, johnaven[1], johnaven[2], 4 * arlynne);
  round_regular_polygon(jeramie, 7, 35 * arlynne, 10 * arlynne);
  fill_path(jeramie, johnaven[3], johnaven[4], 4 * arlynne);
  round_regular_polygon(jeramie, 7, 23 * arlynne, 5 * arlynne);
  jeramie.restore();
  fill_path(jeramie, johnaven[5]);
  jeramie.save();
  jeramie.translate(45 * arlynne, 45 * arlynne);
  jeramie.rotate(0);
  round_rect(jeramie, -9 * arlynne, -25.5 * arlynne, 18 * arlynne, 51 * arlynne, 30 * arlynne);
  jeramie.restore();
  fill_path(jeramie, johnaven[4], johnaven[4], 2 * arlynne);
  jeramie.save();
  jeramie.translate(45 * arlynne, 45 * arlynne);
  jeramie.rotate(0);
  round_rect(jeramie, -26 * arlynne, -9 * arlynne, 52 * arlynne, 18 * arlynne, 30 * arlynne);
  jeramie.restore();
  fill_path(jeramie, johnaven[4], johnaven[4], 2 * arlynne);
  circle(jeramie, 45 * arlynne, 29 * arlynne, 7 * arlynne);
  fill_path(jeramie, johnaven[5]);
  circle(jeramie, 45 * arlynne, 61 * arlynne, 7 * arlynne);
  fill_path(jeramie, johnaven[5]);
  circle(jeramie, 28 * arlynne, 45 * arlynne, 7 * arlynne);
  fill_path(jeramie, johnaven[5]);
  circle(jeramie, 62 * arlynne, 45 * arlynne, 7 * arlynne);
  fill_path(jeramie, johnaven[5]);
  return kristijan;
}
function create_door_gold(marely, letrecia, mendy) {
  var karil = document.createElement("canvas");
  var jaramie = karil.getContext("2d");
  karil.width = 90 * marely;
  karil.height = 98 * marely;
  jaramie.translate(0, 4 * marely);
  if (i === 0) {
    jaramie.globalAlpha = letrecia ? .5 : 1;
    jaramie.save();
    jaramie.translate(44 * marely, 50 * marely);
    jaramie.rotate(1);
    round_regular_polygon(jaramie, 8, 41 * marely, 10 * marely);
    fill_path(jaramie, mendy[0]);
    jaramie.restore();
  }
  jaramie.globalAlpha = 1;
  jaramie.save();
  jaramie.translate(44 * marely, 44 * marely);
  jaramie.rotate(1);
  round_regular_polygon(jaramie, 8, 41 * marely, 10 * marely);
  fill_path(jaramie, mendy[1], mendy[2], 4 * marely);
  jaramie.rotate(.56);
  round_regular_polygon(jaramie, 8, 33 * marely, 10 * marely);
  fill_path(jaramie, mendy[3], mendy[4], 4 * marely);
  jaramie.rotate(.28);
  round_regular_polygon(jaramie, 8, 24 * marely, 8 * marely);
  fill_path(jaramie, mendy[5]);
  jaramie.restore();
  jaramie.save();
  jaramie.translate(45 * marely, 45 * marely);
  jaramie.rotate(0);
  round_rect(jaramie, -9 * marely, -25.5 * marely, 18 * marely, 51 * marely, 30 * marely);
  jaramie.restore();
  fill_path(jaramie, mendy[4], mendy[4], 2 * marely);
  jaramie.save();
  jaramie.translate(45 * marely, 45 * marely);
  jaramie.rotate(0);
  round_rect(jaramie, -26 * marely, -9 * marely, 52 * marely, 18 * marely, 30 * marely);
  jaramie.restore();
  fill_path(jaramie, mendy[4], mendy[4], 2 * marely);
  circle(jaramie, 45 * marely, 29 * marely, 7 * marely);
  fill_path(jaramie, mendy[5]);
  circle(jaramie, 45 * marely, 61 * marely, 7 * marely);
  fill_path(jaramie, mendy[5]);
  circle(jaramie, 28 * marely, 45 * marely, 7 * marely);
  fill_path(jaramie, mendy[5]);
  circle(jaramie, 62 * marely, 45 * marely, 7 * marely);
  fill_path(jaramie, mendy[5]);
  return karil;
}
function create_furnace_on(maitland, paari, elaia) {
  var dolories = document.createElement("canvas");
  var sabreya = dolories.getContext("2d");
  dolories.width = 300 * maitland;
  dolories.height = 300 * maitland;
  sabreya.globalAlpha = paari ? .5 : 1;
  sabreya.save();
  sabreya.translate(150 * maitland, 160 * maitland);
  sabreya.rotate(6.28);
  round_regular_polygon(sabreya, 6, 146 * maitland, 30 * maitland);
  sabreya.restore();
  fill_path(sabreya, elaia[0]);
  sabreya.globalAlpha = 1;
  sabreya.save();
  sabreya.translate(150 * maitland, 150 * maitland);
  sabreya.rotate(6.28);
  round_regular_polygon(sabreya, 6, 146 * maitland, 30 * maitland);
  sabreya.restore();
  fill_path(sabreya, elaia[1], elaia[2], 8 * maitland);
  sabreya.save();
  sabreya.translate(150 * maitland, 150 * maitland);
  sabreya.rotate(0);
  round_regular_polygon(sabreya, 6, 105 * maitland, 30 * maitland);
  sabreya.restore();
  fill_path(sabreya, elaia[3], elaia[3], 8 * maitland);
  sabreya.save();
  sabreya.translate(150 * maitland, 150 * maitland);
  sabreya.rotate(0);
  round_regular_polygon(sabreya, 6, 66 * maitland, 30 * maitland);
  sabreya.restore();
  fill_path(sabreya, elaia[4], elaia[2], 8 * maitland);
  sabreya.save();
  sabreya.translate(150 * maitland, 150 * maitland);
  sabreya.rotate(0);
  round_regular_polygon(sabreya, 6, 31 * maitland, 30 * maitland);
  sabreya.restore();
  fill_path(sabreya, elaia[5], elaia[6], 8 * maitland);
  sabreya.beginPath();
  sabreya.lineCap = "round";
  sabreya.lineJoin = "round";
  sabreya.moveTo(150 * maitland, 207 * maitland);
  sabreya.bezierCurveTo(150 * maitland, 151 * maitland, 150 * maitland, 101 * maitland, 150 * maitland, 94 * maitland);
  sabreya.closePath();
  fill_path(sabreya, undefined, elaia[2], 8 * maitland);
  sabreya.beginPath();
  sabreya.lineCap = "round";
  sabreya.lineJoin = "round";
  sabreya.moveTo(118 * maitland, 100 * maitland);
  sabreya.bezierCurveTo(118 * maitland, 205 * maitland, 118 * maitland, 207 * maitland, 118 * maitland, 200 * maitland);
  sabreya.closePath();
  fill_path(sabreya, undefined, elaia[2], 8 * maitland);
  sabreya.beginPath();
  sabreya.lineCap = "round";
  sabreya.lineJoin = "round";
  sabreya.moveTo(183 * maitland, 100 * maitland);
  sabreya.bezierCurveTo(183 * maitland, 203 * maitland, 183 * maitland, 203 * maitland, 183 * maitland, 200 * maitland);
  sabreya.closePath();
  fill_path(sabreya, undefined, elaia[2], 8 * maitland);
  return dolories;
}
function create_furnace_off(jaiani, cully, guyneth) {
  var shamaiah = document.createElement("canvas");
  var yanisha = shamaiah.getContext("2d");
  shamaiah.width = 300 * jaiani;
  shamaiah.height = 300 * jaiani;
  yanisha.globalAlpha = cully ? .5 : 1;
  yanisha.save();
  yanisha.translate(150 * jaiani, 160 * jaiani);
  yanisha.rotate(6.28);
  round_regular_polygon(yanisha, 6, 146 * jaiani, 30 * jaiani);
  yanisha.restore();
  fill_path(yanisha, guyneth[0]);
  yanisha.globalAlpha = 1;
  yanisha.save();
  yanisha.translate(150 * jaiani, 150 * jaiani);
  yanisha.rotate(6.28);
  round_regular_polygon(yanisha, 6, 146 * jaiani, 30 * jaiani);
  yanisha.restore();
  fill_path(yanisha, guyneth[1], guyneth[2], 8 * jaiani);
  yanisha.save();
  yanisha.translate(150 * jaiani, 150 * jaiani);
  yanisha.rotate(0);
  round_regular_polygon(yanisha, 6, 105 * jaiani, 30 * jaiani);
  yanisha.restore();
  fill_path(yanisha, guyneth[3], guyneth[3], 8 * jaiani);
  yanisha.save();
  yanisha.translate(150 * jaiani, 150 * jaiani);
  yanisha.rotate(0);
  round_regular_polygon(yanisha, 6, 66 * jaiani, 30 * jaiani);
  yanisha.restore();
  fill_path(yanisha, guyneth[4], guyneth[2], 8 * jaiani);
  yanisha.save();
  yanisha.translate(131 * jaiani, 116 * jaiani);
  round_regular_polygon(yanisha, 7, 17 * jaiani, 8 * jaiani);
  yanisha.restore();
  fill_path(yanisha, guyneth[6]);
  yanisha.save();
  yanisha.translate(163 * jaiani, 168 * jaiani);
  round_regular_polygon(yanisha, 7, 25 * jaiani, 8 * jaiani);
  yanisha.restore();
  fill_path(yanisha, guyneth[6]);
  yanisha.save();
  yanisha.translate(117 * jaiani, 151 * jaiani);
  round_regular_polygon(yanisha, 7, 11 * jaiani, 8 * jaiani);
  yanisha.restore();
  fill_path(yanisha, guyneth[6]);
  yanisha.save();
  yanisha.translate(167 * jaiani, 122 * jaiani);
  round_regular_polygon(yanisha, 7, 12 * jaiani, 8 * jaiani);
  yanisha.restore();
  fill_path(yanisha, guyneth[6]);
  yanisha.beginPath();
  yanisha.lineCap = "round";
  yanisha.lineJoin = "round";
  yanisha.moveTo(150 * jaiani, 207 * jaiani);
  yanisha.bezierCurveTo(150 * jaiani, 151 * jaiani, 150 * jaiani, 101 * jaiani, 150 * jaiani, 94 * jaiani);
  yanisha.closePath();
  fill_path(yanisha, undefined, guyneth[2], 8 * jaiani);
  yanisha.beginPath();
  yanisha.lineCap = "round";
  yanisha.lineJoin = "round";
  yanisha.moveTo(118 * jaiani, 100 * jaiani);
  yanisha.bezierCurveTo(118 * jaiani, 205 * jaiani, 118 * jaiani, 207 * jaiani, 118 * jaiani, 200 * jaiani);
  yanisha.closePath();
  fill_path(yanisha, undefined, guyneth[2], 8 * jaiani);
  yanisha.beginPath();
  yanisha.lineCap = "round";
  yanisha.lineJoin = "round";
  yanisha.moveTo(183 * jaiani, 100 * jaiani);
  yanisha.bezierCurveTo(183 * jaiani, 203 * jaiani, 183 * jaiani, 203 * jaiani, 183 * jaiani, 200 * jaiani);
  yanisha.closePath();
  fill_path(yanisha, undefined, guyneth[2], 8 * jaiani);
  return shamaiah;
}
function create_furnace_slot(tyniyah, keetra, mailene) {
  var logon = document.createElement("canvas");
  var fritzi = logon.getContext("2d");
  logon.width = 118 * tyniyah;
  logon.height = 129 * tyniyah;
  fritzi.save();
  fritzi.translate(90 * tyniyah, 90 * tyniyah);
  round_rect(fritzi, -86.5 * tyniyah, -86 * tyniyah, 110 * tyniyah, 110 * tyniyah, 15 * tyniyah);
  fritzi.restore();
  fill_path(fritzi, mailene[0], mailene[1], 4);
  return logon;
}
function create_door_diamond(yenna, obama, saliya) {
  var breda = document.createElement("canvas");
  var shauntavia = breda.getContext("2d");
  breda.width = 90 * yenna;
  breda.height = 98 * yenna;
  shauntavia.translate(0, 4 * yenna);
  if (i === 0) {
    shauntavia.globalAlpha = obama ? .5 : 1;
    shauntavia.save();
    shauntavia.translate(44 * yenna, 50 * yenna);
    shauntavia.rotate(.2);
    round_regular_polygon(shauntavia, 9, 41 * yenna, 10 * yenna);
    shauntavia.restore();
    fill_path(shauntavia, saliya[0]);
  }
  shauntavia.globalAlpha = 1;
  shauntavia.save();
  shauntavia.translate(44 * yenna, 44 * yenna);
  shauntavia.rotate(.2);
  round_regular_polygon(shauntavia, 9, 41 * yenna, 10 * yenna);
  fill_path(shauntavia, saliya[1], saliya[2], 4 * yenna);
  shauntavia.rotate(-0.32);
  round_regular_polygon(shauntavia, 9, 32 * yenna, 10 * yenna);
  fill_path(shauntavia, saliya[3], saliya[4], 4 * yenna);
  shauntavia.rotate(.68);
  round_regular_polygon(shauntavia, 9, 23 * yenna, 8 * yenna);
  fill_path(shauntavia, saliya[5], saliya[6], 6 * yenna);
  shauntavia.restore();
  shauntavia.save();
  shauntavia.translate(45 * yenna, 45 * yenna);
  shauntavia.rotate(0);
  round_rect(shauntavia, -9 * yenna, -25.5 * yenna, 18 * yenna, 51 * yenna, 30 * yenna);
  shauntavia.restore();
  fill_path(shauntavia, saliya[4], saliya[4], 2 * yenna);
  shauntavia.save();
  shauntavia.translate(45 * yenna, 45 * yenna);
  shauntavia.rotate(0);
  round_rect(shauntavia, -26 * yenna, -9 * yenna, 52 * yenna, 18 * yenna, 30 * yenna);
  shauntavia.restore();
  fill_path(shauntavia, saliya[4], saliya[4], 2 * yenna);
  circle(shauntavia, 45 * yenna, 29 * yenna, 7 * yenna);
  fill_path(shauntavia, saliya[5]);
  circle(shauntavia, 45 * yenna, 61 * yenna, 7 * yenna);
  fill_path(shauntavia, saliya[5]);
  circle(shauntavia, 28 * yenna, 45 * yenna, 7 * yenna);
  fill_path(shauntavia, saliya[5]);
  circle(shauntavia, 62 * yenna, 45 * yenna, 7 * yenna);
  fill_path(shauntavia, saliya[5]);
  return breda;
}
function create_coat(salmai, komeka, tonica) {
  var timir = document.createElement("canvas");
  var kainyn = timir.getContext("2d");
  timir.width = 135 * salmai;
  timir.height = 120 * salmai;
  kainyn.beginPath();
  kainyn.lineCap = "round";
  kainyn.lineJoin = "round";
  kainyn.moveTo(3.5 * salmai, 55.25 * salmai);
  kainyn.bezierCurveTo(3.5 * salmai, 114.25 * salmai, 2.5 * salmai, 109.25 * salmai, 3.5 * salmai, 112.25 * salmai);
  kainyn.bezierCurveTo(5.5 * salmai, 119.25 * salmai, 8.5 * salmai, 119.25 * salmai, 11.5 * salmai, 119.25 * salmai);
  kainyn.bezierCurveTo(15.5 * salmai, 114.25 * salmai, 13.5 * salmai, 95.25 * salmai, 14.5 * salmai, 82.25 * salmai);
  kainyn.closePath();
  fill_path(kainyn, tonica[0], tonica[1], 7 * salmai);
  kainyn.beginPath();
  kainyn.lineCap = "round";
  kainyn.lineJoin = "round";
  kainyn.moveTo(6.5 * salmai, 43.25 * salmai);
  kainyn.bezierCurveTo(3.5 * salmai, 27.25 * salmai, 7.5 * salmai, 20.25 * salmai, 25.5 * salmai, 11.25 * salmai);
  kainyn.bezierCurveTo(45.5 * salmai, -0.75 * salmai, 73.5 * salmai, 1.25 * salmai, 107.5 * salmai, 10.25 * salmai);
  kainyn.bezierCurveTo(131.5 * salmai, 21.25 * salmai, 125.5 * salmai, 34.25 * salmai, 125.5 * salmai, 36.25 * salmai);
  kainyn.closePath();
  fill_path(kainyn, tonica[0], tonica[1], 7 * salmai);
  kainyn.beginPath();
  kainyn.lineCap = "round";
  kainyn.lineJoin = "round";
  kainyn.moveTo(120.5 * salmai, 62.25 * salmai);
  kainyn.bezierCurveTo(121.5 * salmai, 95.25 * salmai, 120.5 * salmai, 80.25 * salmai, 120.5 * salmai, 100.25 * salmai);
  kainyn.bezierCurveTo(118.5 * salmai, 119.25 * salmai, 123.5 * salmai, 118.25 * salmai, 129.5 * salmai, 113.25 * salmai);
  kainyn.bezierCurveTo(133.5 * salmai, 107.25 * salmai, 130.5 * salmai, 97.25 * salmai, 130.5 * salmai, 87.25 * salmai);
  kainyn.bezierCurveTo(129.5 * salmai, 56.25 * salmai, 130 * salmai, 70.75 * salmai, 129.5 * salmai, 54.25 * salmai);
  kainyn.closePath();
  fill_path(kainyn, tonica[0], tonica[1], 7 * salmai);
  kainyn.beginPath();
  kainyn.lineCap = "round";
  kainyn.lineJoin = "round";
  kainyn.moveTo(17.5 * salmai, 27 * salmai);
  kainyn.bezierCurveTo(48.5 * salmai, 5 * salmai, 93.5 * salmai, 14 * salmai, 118.5 * salmai, 26 * salmai);
  kainyn.bezierCurveTo(132.5 * salmai, 35 * salmai, 133.5 * salmai, 52 * salmai, 132.5 * salmai, 68 * salmai);
  kainyn.bezierCurveTo(125.5 * salmai, 87 * salmai, 116.5 * salmai, 84 * salmai, 96.5 * salmai, 75 * salmai);
  kainyn.bezierCurveTo(60.5 * salmai, 66 * salmai, 52.5 * salmai, 74 * salmai, 37.5 * salmai, 78 * salmai);
  kainyn.bezierCurveTo(2.5 * salmai, 86 * salmai, 3.5 * salmai, 78 * salmai, 1.5 * salmai, 61 * salmai);
  kainyn.bezierCurveTo(1.5 * salmai, 37 * salmai, 9.5 * salmai, 32 * salmai, 15.5 * salmai, 28 * salmai);
  kainyn.closePath();
  fill_path(kainyn, tonica[2], tonica[3], 7 * salmai);
  return timir;
}
function create_crab_crown(alneisha, milanii, kateena) {
  var farrie = document.createElement("canvas");
  var michaelann = farrie.getContext("2d");
  farrie.width = 501 * alneisha;
  farrie.height = 309 * alneisha;
  michaelann.translate(0, 6 * alneisha);
  michaelann.globalAlpha = milanii ? .5 : 1;
  michaelann.beginPath();
  michaelann.lineCap = "round";
  michaelann.lineJoin = "round";
  michaelann.moveTo(126 * alneisha, 184 * alneisha);
  michaelann.bezierCurveTo(169 * alneisha, 196 * alneisha, 194 * alneisha, 198 * alneisha, 227 * alneisha, 198 * alneisha);
  michaelann.bezierCurveTo(235 * alneisha, 222 * alneisha, 236 * alneisha, 223 * alneisha, 241 * alneisha, 226 * alneisha);
  michaelann.bezierCurveTo(245 * alneisha, 228 * alneisha, 257 * alneisha, 228 * alneisha, 263 * alneisha, 226 * alneisha);
  michaelann.bezierCurveTo(267 * alneisha, 225 * alneisha, 270 * alneisha, 211 * alneisha, 275 * alneisha, 198 * alneisha);
  michaelann.bezierCurveTo(332 * alneisha, 194 * alneisha, 347 * alneisha, 192 * alneisha, 372 * alneisha, 188 * alneisha);
  michaelann.bezierCurveTo(366 * alneisha, 174.5 * alneisha, 366 * alneisha, 174.5 * alneisha, 360 * alneisha, 161 * alneisha);
  michaelann.bezierCurveTo(253.5 * alneisha, 162 * alneisha, 253.5 * alneisha, 162 * alneisha, 147 * alneisha, 163 * alneisha);
  michaelann.closePath();
  fill_path(michaelann, kateena[0]);
  michaelann.globalAlpha = 1;
  michaelann.translate(0, -6 * alneisha);
  michaelann.beginPath();
  michaelann.lineCap = "round";
  michaelann.lineJoin = "round";
  michaelann.moveTo(100 * alneisha, 116 * alneisha);
  michaelann.bezierCurveTo(90 * alneisha, 101 * alneisha, 96 * alneisha, 89 * alneisha, 106 * alneisha, 83 * alneisha);
  michaelann.bezierCurveTo(86 * alneisha, 79 * alneisha, 86 * alneisha, 52 * alneisha, 93 * alneisha, 38 * alneisha);
  michaelann.bezierCurveTo(99 * alneisha, 51 * alneisha, 107 * alneisha, 57 * alneisha, 122 * alneisha, 63 * alneisha);
  michaelann.bezierCurveTo(130 * alneisha, 53 * alneisha, 141 * alneisha, 46 * alneisha, 161 * alneisha, 46 * alneisha);
  michaelann.bezierCurveTo(157 * alneisha, 31 * alneisha, 158 * alneisha, 20 * alneisha, 169 * alneisha, 6 * alneisha);
  michaelann.bezierCurveTo(171 * alneisha, 24 * alneisha, 186 * alneisha, 33 * alneisha, 198 * alneisha, 45 * alneisha);
  michaelann.bezierCurveTo(252 * alneisha, 45 * alneisha, 252 * alneisha, 45 * alneisha, 306 * alneisha, 45 * alneisha);
  michaelann.bezierCurveTo(323 * alneisha, 33 * alneisha, 332 * alneisha, 21 * alneisha, 335 * alneisha, 7 * alneisha);
  michaelann.bezierCurveTo(349 * alneisha, 21 * alneisha, 347 * alneisha, 36 * alneisha, 345 * alneisha, 46 * alneisha);
  michaelann.bezierCurveTo(364 * alneisha, 46 * alneisha, 369 * alneisha, 48 * alneisha, 377 * alneisha, 63 * alneisha);
  michaelann.bezierCurveTo(398 * alneisha, 58 * alneisha, 403 * alneisha, 49 * alneisha, 409 * alneisha, 40 * alneisha);
  michaelann.bezierCurveTo(419 * alneisha, 57 * alneisha, 411 * alneisha, 79 * alneisha, 398 * alneisha, 85 * alneisha);
  michaelann.bezierCurveTo(405 * alneisha, 100 * alneisha, 405 * alneisha, 106 * alneisha, 401 * alneisha, 118 * alneisha);
  michaelann.bezierCurveTo(332.5 * alneisha, 128.5 * alneisha, 332.5 * alneisha, 128.5 * alneisha, 264 * alneisha, 139 * alneisha);
  michaelann.closePath();
  fill_path(michaelann, kateena[1], kateena[2], 10 * alneisha);
  michaelann.beginPath();
  michaelann.lineCap = "round";
  michaelann.lineJoin = "round";
  michaelann.moveTo(122 * alneisha, 191 * alneisha);
  michaelann.bezierCurveTo(123 * alneisha, 237 * alneisha, 135 * alneisha, 245 * alneisha, 153 * alneisha, 259 * alneisha);
  michaelann.bezierCurveTo(167 * alneisha, 269 * alneisha, 158 * alneisha, 281 * alneisha, 118 * alneisha, 276 * alneisha);
  michaelann.bezierCurveTo(104 * alneisha, 273 * alneisha, 98 * alneisha, 268 * alneisha, 93 * alneisha, 242 * alneisha);
  michaelann.bezierCurveTo(89 * alneisha, 220 * alneisha, 92 * alneisha, 201 * alneisha, 102 * alneisha, 179 * alneisha);
  michaelann.closePath();
  fill_path(michaelann, kateena[3], kateena[2], 10 * alneisha);
  michaelann.beginPath();
  michaelann.lineCap = "round";
  michaelann.lineJoin = "round";
  michaelann.moveTo(403 * alneisha, 182 * alneisha);
  michaelann.bezierCurveTo(414 * alneisha, 215 * alneisha, 412 * alneisha, 232 * alneisha, 403 * alneisha, 260 * alneisha);
  michaelann.bezierCurveTo(395 * alneisha, 274 * alneisha, 375 * alneisha, 272 * alneisha, 356 * alneisha, 270 * alneisha);
  michaelann.bezierCurveTo(345 * alneisha, 268 * alneisha, 339 * alneisha, 262 * alneisha, 354 * alneisha, 252 * alneisha);
  michaelann.bezierCurveTo(370 * alneisha, 242 * alneisha, 380 * alneisha, 225 * alneisha, 384 * alneisha, 184 * alneisha);
  michaelann.closePath();
  fill_path(michaelann, kateena[3], kateena[2], 10 * alneisha);
  michaelann.beginPath();
  michaelann.lineCap = "round";
  michaelann.lineJoin = "round";
  michaelann.moveTo(155 * alneisha, 157 * alneisha);
  michaelann.bezierCurveTo(146 * alneisha, 189 * alneisha, 137 * alneisha, 198 * alneisha, 114 * alneisha, 219 * alneisha);
  michaelann.bezierCurveTo(104 * alneisha, 212 * alneisha, 98 * alneisha, 203 * alneisha, 89 * alneisha, 189 * alneisha);
  michaelann.bezierCurveTo(82 * alneisha, 178 * alneisha, 91 * alneisha, 164 * alneisha, 93 * alneisha, 136 * alneisha);
  michaelann.closePath();
  fill_path(michaelann, kateena[4], kateena[2], 10 * alneisha);
  michaelann.beginPath();
  michaelann.lineCap = "round";
  michaelann.lineJoin = "round";
  michaelann.moveTo(347 * alneisha, 162 * alneisha);
  michaelann.bezierCurveTo(357 * alneisha, 195 * alneisha, 376 * alneisha, 209 * alneisha, 387 * alneisha, 217 * alneisha);
  michaelann.bezierCurveTo(409 * alneisha, 201 * alneisha, 420 * alneisha, 181 * alneisha, 416 * alneisha, 166 * alneisha);
  michaelann.bezierCurveTo(410 * alneisha, 150 * alneisha, 412 * alneisha, 149 * alneisha, 408 * alneisha, 130 * alneisha);
  michaelann.closePath();
  fill_path(michaelann, kateena[4], kateena[2], 10 * alneisha);
  michaelann.beginPath();
  michaelann.lineCap = "round";
  michaelann.lineJoin = "round";
  michaelann.moveTo(86 * alneisha, 134 * alneisha);
  michaelann.bezierCurveTo(79 * alneisha, 102 * alneisha, 92 * alneisha, 84 * alneisha, 108 * alneisha, 92 * alneisha);
  michaelann.bezierCurveTo(149 * alneisha, 108 * alneisha, 184 * alneisha, 111 * alneisha, 242 * alneisha, 111 * alneisha);
  michaelann.bezierCurveTo(294 * alneisha, 108 * alneisha, 341 * alneisha, 105 * alneisha, 386 * alneisha, 98 * alneisha);
  michaelann.bezierCurveTo(412 * alneisha, 91 * alneisha, 417 * alneisha, 86 * alneisha, 415 * alneisha, 133 * alneisha);
  michaelann.bezierCurveTo(413 * alneisha, 160 * alneisha, 413 * alneisha, 160 * alneisha, 368 * alneisha, 174 * alneisha);
  michaelann.bezierCurveTo(308 * alneisha, 184 * alneisha, 291 * alneisha, 185 * alneisha, 270 * alneisha, 186 * alneisha);
  michaelann.bezierCurveTo(264 * alneisha, 206 * alneisha, 262 * alneisha, 215 * alneisha, 253 * alneisha, 215 * alneisha);
  michaelann.bezierCurveTo(239 * alneisha, 217 * alneisha, 239 * alneisha, 211 * alneisha, 231 * alneisha, 186 * alneisha);
  michaelann.bezierCurveTo(178 * alneisha, 184 * alneisha, 156 * alneisha, 179 * alneisha, 112 * alneisha, 162 * alneisha);
  michaelann.bezierCurveTo(87 * alneisha, 151 * alneisha, 90 * alneisha, 144 * alneisha, 87 * alneisha, 137 * alneisha);
  michaelann.closePath();
  fill_path(michaelann, kateena[4], kateena[2], 10 * alneisha);
  michaelann.beginPath();
  michaelann.lineCap = "round";
  michaelann.lineJoin = "round";
  michaelann.moveTo(63 * alneisha, 98 * alneisha);
  michaelann.bezierCurveTo(84 * alneisha, 121 * alneisha, 109 * alneisha, 102 * alneisha, 124 * alneisha, 117 * alneisha);
  michaelann.bezierCurveTo(138 * alneisha, 136 * alneisha, 123 * alneisha, 165 * alneisha, 94 * alneisha, 150 * alneisha);
  michaelann.bezierCurveTo(66 * alneisha, 131 * alneisha, 64 * alneisha, 115 * alneisha, 63 * alneisha, 99 * alneisha);
  michaelann.closePath();
  fill_path(michaelann, kateena[3], kateena[2], 10 * alneisha);
  michaelann.beginPath();
  michaelann.lineCap = "round";
  michaelann.lineJoin = "round";
  michaelann.moveTo(449 * alneisha, 97 * alneisha);
  michaelann.bezierCurveTo(446 * alneisha, 143 * alneisha, 415 * alneisha, 151 * alneisha, 402 * alneisha, 155 * alneisha);
  michaelann.bezierCurveTo(386 * alneisha, 157 * alneisha, 373 * alneisha, 133 * alneisha, 391 * alneisha, 116 * alneisha);
  michaelann.bezierCurveTo(402 * alneisha, 106 * alneisha, 432 * alneisha, 124 * alneisha, 449 * alneisha, 97 * alneisha);
  michaelann.closePath();
  fill_path(michaelann, kateena[3], kateena[2], 10 * alneisha);
  return farrie;
}
function create_crab_loot(vallorie, makayda, jaredd) {
  var kameria = document.createElement("canvas");
  var sharlayne = kameria.getContext("2d");
  kameria.width = 304 * vallorie;
  kameria.height = 278 * vallorie;
  sharlayne.translate(10 * vallorie, 25 * vallorie);
  sharlayne.globalAlpha = makayda ? .5 : 1;
  sharlayne.beginPath();
  sharlayne.lineCap = "round";
  sharlayne.lineJoin = "round";
  sharlayne.moveTo(128 * vallorie, 137 * vallorie);
  sharlayne.bezierCurveTo(155 * vallorie, 144 * vallorie, 223 * vallorie, 143 * vallorie, 256 * vallorie, 122 * vallorie);
  sharlayne.bezierCurveTo(249 * vallorie, 180 * vallorie, 210 * vallorie, 227 * vallorie, 164 * vallorie, 242 * vallorie);
  sharlayne.bezierCurveTo(74 * vallorie, 213 * vallorie, 99 * vallorie, 166 * vallorie, 127 * vallorie, 138 * vallorie);
  sharlayne.closePath();
  fill_path(sharlayne, jaredd[0]);
  sharlayne.beginPath();
  sharlayne.lineCap = "round";
  sharlayne.lineJoin = "round";
  sharlayne.moveTo(284 * vallorie, 52 * vallorie);
  sharlayne.bezierCurveTo(126 * vallorie, 112 * vallorie, 89 * vallorie, 177 * vallorie, 170 * vallorie, 241 * vallorie);
  sharlayne.bezierCurveTo(103 * vallorie, 275 * vallorie, 20 * vallorie, 239 * vallorie, 12 * vallorie, 159 * vallorie);
  sharlayne.bezierCurveTo(5 * vallorie, 76 * vallorie, 75 * vallorie, 4 * vallorie, 165 * vallorie, 13 * vallorie);
  sharlayne.bezierCurveTo(233 * vallorie, 15 * vallorie, 260 * vallorie, 33 * vallorie, 284 * vallorie, 52 * vallorie);
  sharlayne.closePath();
  fill_path(sharlayne, jaredd[0]);
  sharlayne.translate(-10 * vallorie, -25 * vallorie);
  sharlayne.globalAlpha = 1;
  sharlayne.beginPath();
  sharlayne.lineCap = "round";
  sharlayne.lineJoin = "round";
  sharlayne.moveTo(128 * vallorie, 137 * vallorie);
  sharlayne.bezierCurveTo(155 * vallorie, 144 * vallorie, 223 * vallorie, 143 * vallorie, 256 * vallorie, 122 * vallorie);
  sharlayne.bezierCurveTo(249 * vallorie, 180 * vallorie, 210 * vallorie, 227 * vallorie, 164 * vallorie, 242 * vallorie);
  sharlayne.bezierCurveTo(74 * vallorie, 213 * vallorie, 99 * vallorie, 166 * vallorie, 127 * vallorie, 138 * vallorie);
  sharlayne.closePath();
  fill_path(sharlayne, jaredd[1], jaredd[2], 15 * vallorie);
  sharlayne.beginPath();
  sharlayne.lineCap = "round";
  sharlayne.lineJoin = "round";
  sharlayne.moveTo(284 * vallorie, 52 * vallorie);
  sharlayne.bezierCurveTo(126 * vallorie, 112 * vallorie, 89 * vallorie, 177 * vallorie, 170 * vallorie, 241 * vallorie);
  sharlayne.bezierCurveTo(103 * vallorie, 275 * vallorie, 20 * vallorie, 239 * vallorie, 12 * vallorie, 159 * vallorie);
  sharlayne.bezierCurveTo(5 * vallorie, 76 * vallorie, 75 * vallorie, 4 * vallorie, 165 * vallorie, 13 * vallorie);
  sharlayne.bezierCurveTo(233 * vallorie, 15 * vallorie, 260 * vallorie, 33 * vallorie, 284 * vallorie, 52 * vallorie);
  sharlayne.closePath();
  fill_path(sharlayne, jaredd[3], jaredd[4], 15 * vallorie);
  return kameria;
}
function create_bed(brig, emauri, belverly) {
  var severine = document.createElement("canvas");
  var aundraya = severine.getContext("2d");
  severine.width = 175 * brig;
  severine.height = 169 * brig;
  aundraya.globalAlpha = .5;
  aundraya.translate(0, 3 * brig);
  aundraya.beginPath();
  aundraya.lineCap = "round";
  aundraya.lineJoin = "round";
  aundraya.moveTo(19 * brig, 139 * brig);
  aundraya.bezierCurveTo(18 * brig, 163 * brig, 22 * brig, 156 * brig, 53 * brig, 157 * brig);
  aundraya.bezierCurveTo(97.5 * brig, 157 * brig, 97.5 * brig, 157 * brig, 142 * brig, 157 * brig);
  aundraya.bezierCurveTo(150 * brig, 157 * brig, 153 * brig, 156 * brig, 154 * brig, 142 * brig);
  aundraya.closePath();
  fill_path(aundraya, belverly[0]);
  aundraya.globalAlpha = 1;
  aundraya.translate(0, -3 * brig);
  aundraya.save();
  aundraya.translate(86.5 * brig, 81.5 * brig);
  round_rect(aundraya, -66.5 * brig, -65.5 * brig, 133 * brig, 131 * brig, 10 * brig);
  aundraya.restore();
  fill_path(aundraya, belverly[1], belverly[2], 5 * brig);
  aundraya.save();
  aundraya.translate(84.5 * brig, 79 * brig);
  round_rect(aundraya, -50.5 * brig, -49 * brig, 101 * brig, 98 * brig, 10 * brig);
  aundraya.restore();
  fill_path(aundraya, belverly[3], belverly[2], 5 * brig);
  aundraya.beginPath();
  aundraya.lineCap = "round";
  aundraya.lineJoin = "round";
  aundraya.moveTo(42 * brig, 54 * brig);
  aundraya.bezierCurveTo(37 * brig, 48 * brig, 39 * brig, 44 * brig, 38 * brig, 41 * brig);
  aundraya.bezierCurveTo(42 * brig, 40 * brig, 45 * brig, 40 * brig, 50 * brig, 41 * brig);
  aundraya.bezierCurveTo(85 * brig, 36 * brig, 98 * brig, 37 * brig, 116 * brig, 42 * brig);
  aundraya.bezierCurveTo(132 * brig, 39 * brig, 132 * brig, 39 * brig, 133 * brig, 56 * brig);
  aundraya.bezierCurveTo(136 * brig, 73 * brig, 136 * brig, 84 * brig, 132 * brig, 106 * brig);
  aundraya.bezierCurveTo(47 * brig, 113 * brig, 85.5 * brig, 106 * brig, 39 * brig, 106 * brig);
  aundraya.bezierCurveTo(32 * brig, 81 * brig, 38 * brig, 60 * brig, 42 * brig, 55 * brig);
  aundraya.closePath();
  fill_path(aundraya, belverly[4], belverly[5], 5 * brig);
  aundraya.save();
  aundraya.translate(28 * brig, 24 * brig);
  aundraya.rotate(0);
  round_rect(aundraya, -14 * brig, -14 * brig, 28 * brig, 28 * brig, 4 * brig);
  aundraya.restore();
  fill_path(aundraya, belverly[1], belverly[2], 5 * brig);
  aundraya.save();
  aundraya.translate(143 * brig, 23 * brig);
  aundraya.rotate(0);
  round_rect(aundraya, -14 * brig, -14 * brig, 28 * brig, 28 * brig, 4 * brig);
  aundraya.restore();
  fill_path(aundraya, belverly[1], belverly[2], 5 * brig);
  aundraya.beginPath();
  aundraya.lineCap = "round";
  aundraya.lineJoin = "round";
  aundraya.moveTo(55 * brig, 80 * brig);
  aundraya.bezierCurveTo(73 * brig, 78 * brig, 84 * brig, 74 * brig, 100 * brig, 64 * brig);
  aundraya.bezierCurveTo(111 * brig, 57 * brig, 125 * brig, 67 * brig, 108 * brig, 84 * brig);
  aundraya.bezierCurveTo(96 * brig, 95 * brig, 86 * brig, 96 * brig, 70 * brig, 88 * brig);
  aundraya.bezierCurveTo(62.5 * brig, 84 * brig, 62.5 * brig, 84 * brig, 55 * brig, 80 * brig);
  aundraya.closePath();
  fill_path(aundraya, belverly[5]);
  aundraya.beginPath();
  aundraya.lineCap = "round";
  aundraya.lineJoin = "round";
  aundraya.moveTo(17 * brig, 112 * brig);
  aundraya.bezierCurveTo(14 * brig, 146 * brig, 27 * brig, 152 * brig, 37 * brig, 149 * brig);
  aundraya.bezierCurveTo(78 * brig, 155 * brig, 128 * brig, 150 * brig, 146 * brig, 150 * brig);
  aundraya.bezierCurveTo(158 * brig, 144 * brig, 158 * brig, 121 * brig, 153 * brig, 114 * brig);
  aundraya.closePath();
  fill_path(aundraya, belverly[8], belverly[9], 5 * brig);
  aundraya.beginPath();
  aundraya.lineCap = "round";
  aundraya.lineJoin = "round";
  aundraya.moveTo(127 * brig, 111 * brig);
  aundraya.bezierCurveTo(133 * brig, 136 * brig, 115 * brig, 149 * brig, 88 * brig, 150 * brig);
  aundraya.bezierCurveTo(119.5 * brig, 151 * brig, 119.5 * brig, 151 * brig, 151 * brig, 152 * brig);
  aundraya.bezierCurveTo(159 * brig, 136 * brig, 155 * brig, 126 * brig, 154 * brig, 113 * brig);
  aundraya.closePath();
  fill_path(aundraya, belverly[9]);
  aundraya.globalAlpha = .5;
  aundraya.translate(0, 3 * brig);
  aundraya.beginPath();
  aundraya.lineCap = "round";
  aundraya.lineJoin = "round";
  aundraya.moveTo(15 * brig, 117 * brig);
  aundraya.bezierCurveTo(34 * brig, 109 * brig, 61 * brig, 106 * brig, 94 * brig, 109 * brig);
  aundraya.bezierCurveTo(126 * brig, 110 * brig, 142 * brig, 113 * brig, 154 * brig, 119 * brig);
  aundraya.bezierCurveTo(154 * brig, 123 * brig, 154 * brig, 123 * brig, 154 * brig, 127 * brig);
  aundraya.bezierCurveTo(127 * brig, 118 * brig, 15 * brig, 122 * brig, 18 * brig, 129 * brig);
  aundraya.closePath();
  fill_path(aundraya, belverly[0]);
  aundraya.globalAlpha = 1;
  aundraya.translate(0, -3 * brig);
  aundraya.beginPath();
  aundraya.lineCap = "round";
  aundraya.lineJoin = "round";
  aundraya.moveTo(14 * brig, 127 * brig);
  aundraya.bezierCurveTo(13 * brig, 117 * brig, 12 * brig, 109 * brig, 15 * brig, 103 * brig);
  aundraya.bezierCurveTo(16 * brig, 95 * brig, 21 * brig, 92 * brig, 60 * brig, 93 * brig);
  aundraya.bezierCurveTo(91 * brig, 93 * brig, 118 * brig, 93 * brig, 143 * brig, 96 * brig);
  aundraya.bezierCurveTo(151 * brig, 96 * brig, 155 * brig, 99 * brig, 156 * brig, 112 * brig);
  aundraya.bezierCurveTo(157 * brig, 124 * brig, 157 * brig, 127 * brig, 156 * brig, 128 * brig);
  aundraya.bezierCurveTo(138 * brig, 112 * brig, 100 * brig, 118 * brig, 84 * brig, 118 * brig);
  aundraya.bezierCurveTo(28 * brig, 118 * brig, 20 * brig, 120 * brig, 16 * brig, 127 * brig);
  aundraya.closePath();
  fill_path(aundraya, belverly[4], belverly[5], 5 * brig);
  aundraya.save();
  aundraya.translate(27.5 * brig, 138.5 * brig);
  round_rect(aundraya, -13.5 * brig, -14.5 * brig, 27 * brig, 29 * brig, 4 * brig);
  aundraya.restore();
  fill_path(aundraya, belverly[1], belverly[2], 5 * brig);
  aundraya.save();
  aundraya.translate(143.5 * brig, 137 * brig);
  round_rect(aundraya, -13.5 * brig, -14 * brig, 27 * brig, 28 * brig, 4 * brig);
  aundraya.restore();
  fill_path(aundraya, belverly[1], belverly[2], 5 * brig);
  return severine;
}
function create_bed_top(charell, candan, zyriyah) {
  var decarlo = document.createElement("canvas");
  var jarquavious = decarlo.getContext("2d");
  decarlo.width = 175 * charell;
  decarlo.height = 169 * charell;
  jarquavious.beginPath();
  jarquavious.lineCap = "round";
  jarquavious.lineJoin = "round";
  jarquavious.moveTo(17 * charell, 112 * charell);
  jarquavious.bezierCurveTo(14 * charell, 146 * charell, 27 * charell, 152 * charell, 37 * charell, 149 * charell);
  jarquavious.bezierCurveTo(78 * charell, 155 * charell, 128 * charell, 150 * charell, 146 * charell, 150 * charell);
  jarquavious.bezierCurveTo(158 * charell, 144 * charell, 158 * charell, 121 * charell, 153 * charell, 114 * charell);
  jarquavious.closePath();
  fill_path(jarquavious, zyriyah[8], zyriyah[9], 5 * charell);
  jarquavious.beginPath();
  jarquavious.lineCap = "round";
  jarquavious.lineJoin = "round";
  jarquavious.moveTo(127 * charell, 111 * charell);
  jarquavious.bezierCurveTo(133 * charell, 136 * charell, 115 * charell, 149 * charell, 88 * charell, 150 * charell);
  jarquavious.bezierCurveTo(119.5 * charell, 151 * charell, 119.5 * charell, 151 * charell, 151 * charell, 152 * charell);
  jarquavious.bezierCurveTo(159 * charell, 136 * charell, 155 * charell, 126 * charell, 154 * charell, 113 * charell);
  jarquavious.closePath();
  fill_path(jarquavious, zyriyah[9]);
  jarquavious.globalAlpha = .5;
  jarquavious.translate(0, 3 * charell);
  jarquavious.beginPath();
  jarquavious.lineCap = "round";
  jarquavious.lineJoin = "round";
  jarquavious.moveTo(15 * charell, 117 * charell);
  jarquavious.bezierCurveTo(34 * charell, 109 * charell, 61 * charell, 106 * charell, 94 * charell, 109 * charell);
  jarquavious.bezierCurveTo(126 * charell, 110 * charell, 142 * charell, 113 * charell, 154 * charell, 119 * charell);
  jarquavious.bezierCurveTo(154 * charell, 123 * charell, 154 * charell, 123 * charell, 154 * charell, 127 * charell);
  jarquavious.bezierCurveTo(127 * charell, 118 * charell, 15 * charell, 122 * charell, 18 * charell, 129 * charell);
  jarquavious.closePath();
  fill_path(jarquavious, zyriyah[0]);
  jarquavious.globalAlpha = 1;
  jarquavious.translate(0, -3 * charell);
  jarquavious.beginPath();
  jarquavious.lineCap = "round";
  jarquavious.lineJoin = "round";
  jarquavious.moveTo(14 * charell, 127 * charell);
  jarquavious.bezierCurveTo(13 * charell, 117 * charell, 12 * charell, 109 * charell, 15 * charell, 103 * charell);
  jarquavious.bezierCurveTo(16 * charell, 95 * charell, 21 * charell, 92 * charell, 60 * charell, 93 * charell);
  jarquavious.bezierCurveTo(91 * charell, 93 * charell, 118 * charell, 93 * charell, 143 * charell, 96 * charell);
  jarquavious.bezierCurveTo(151 * charell, 96 * charell, 155 * charell, 99 * charell, 156 * charell, 112 * charell);
  jarquavious.bezierCurveTo(157 * charell, 124 * charell, 157 * charell, 127 * charell, 156 * charell, 128 * charell);
  jarquavious.bezierCurveTo(138 * charell, 112 * charell, 100 * charell, 118 * charell, 84 * charell, 118 * charell);
  jarquavious.bezierCurveTo(28 * charell, 118 * charell, 20 * charell, 120 * charell, 16 * charell, 127 * charell);
  jarquavious.closePath();
  fill_path(jarquavious, zyriyah[4], zyriyah[5], 5 * charell);
  jarquavious.save();
  jarquavious.translate(27.5 * charell, 138.5 * charell);
  round_rect(jarquavious, -13.5 * charell, -14.5 * charell, 27 * charell, 29 * charell, 4 * charell);
  jarquavious.restore();
  fill_path(jarquavious, zyriyah[1], zyriyah[2], 5 * charell);
  jarquavious.save();
  jarquavious.translate(143.5 * charell, 137 * charell);
  round_rect(jarquavious, -13.5 * charell, -14 * charell, 27 * charell, 28 * charell, 4 * charell);
  jarquavious.restore();
  fill_path(jarquavious, zyriyah[1], zyriyah[2], 5 * charell);
  return decarlo;
}
function create_crab_spear(donevin, kenli, dag) {
  var kristia = document.createElement("canvas");
  var shaenna = kristia.getContext("2d");
  kristia.width = 115 * donevin;
  kristia.height = 585 * donevin;
  shaenna.scale(-1, 1);
  shaenna.translate(-110 * donevin, 0);
  shaenna.translate(10 * donevin, 10 * donevin);
  shaenna.globalAlpha = kenli ? .5 : 1;
  shaenna.save();
  shaenna.translate(51.5 * donevin, 342 * donevin);
  round_rect(shaenna, -14.5 * donevin, -225 * donevin, 29 * donevin, 450 * donevin, 20 * donevin);
  shaenna.restore();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(54 * donevin, 83 * donevin);
  shaenna.bezierCurveTo(70 * donevin, 69 * donevin, 78 * donevin, 62 * donevin, 82 * donevin, 40 * donevin);
  shaenna.bezierCurveTo(93 * donevin, 48 * donevin, 103 * donevin, 64 * donevin, 95 * donevin, 102 * donevin);
  shaenna.bezierCurveTo(60 * donevin, 114 * donevin, 53 * donevin, 103 * donevin, 54 * donevin, 85 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(95 * donevin, 97 * donevin);
  shaenna.bezierCurveTo(56 * donevin, 102 * donevin, 43 * donevin, 77 * donevin, 71 * donevin, 6 * donevin);
  shaenna.bezierCurveTo(34 * donevin, 10 * donevin, 6 * donevin, 43 * donevin, 5 * donevin, 76 * donevin);
  shaenna.bezierCurveTo(4 * donevin, 98 * donevin, 15 * donevin, 130 * donevin, 64 * donevin, 130 * donevin);
  shaenna.bezierCurveTo(76 * donevin, 129 * donevin, 95 * donevin, 113 * donevin, 97 * donevin, 97 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(55 * donevin, 176 * donevin);
  shaenna.bezierCurveTo(74 * donevin, 175 * donevin, 82 * donevin, 169 * donevin, 96 * donevin, 155 * donevin);
  shaenna.bezierCurveTo(103 * donevin, 183 * donevin, 95 * donevin, 214 * donevin, 54 * donevin, 219 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(50 * donevin, 176 * donevin);
  shaenna.bezierCurveTo(25 * donevin, 177 * donevin, 16 * donevin, 164 * donevin, 7 * donevin, 156 * donevin);
  shaenna.bezierCurveTo(0 * donevin, 186 * donevin, 10 * donevin, 201 * donevin, 43 * donevin, 220 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(35 * donevin, 403 * donevin);
  shaenna.bezierCurveTo(47 * donevin, 412 * donevin, 58 * donevin, 412 * donevin, 67 * donevin, 403 * donevin);
  shaenna.bezierCurveTo(66.5 * donevin, 434 * donevin, 66.5 * donevin, 434 * donevin, 66 * donevin, 465 * donevin);
  shaenna.bezierCurveTo(56 * donevin, 480 * donevin, 40 * donevin, 472 * donevin, 36 * donevin, 465 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(59 * donevin, 67 * donevin);
  shaenna.bezierCurveTo(47 * donevin, 97 * donevin, 18 * donevin, 117 * donevin, 11 * donevin, 110 * donevin);
  shaenna.bezierCurveTo(11 * donevin, 115 * donevin, 15 * donevin, 122 * donevin, 23 * donevin, 124 * donevin);
  shaenna.bezierCurveTo(46 * donevin, 118 * donevin, 52 * donevin, 113 * donevin, 62 * donevin, 86 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(30 * donevin, 125 * donevin);
  shaenna.bezierCurveTo(47 * donevin, 136 * donevin, 57 * donevin, 134 * donevin, 77 * donevin, 127 * donevin);
  shaenna.bezierCurveTo(71 * donevin, 158 * donevin, 71 * donevin, 159 * donevin, 66 * donevin, 159 * donevin);
  shaenna.bezierCurveTo(50.5 * donevin, 156.5 * donevin, 50.5 * donevin, 156.5 * donevin, 35 * donevin, 154 * donevin);
  shaenna.bezierCurveTo(31 * donevin, 145 * donevin, 31 * donevin, 136 * donevin, 31 * donevin, 125 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(35 * donevin, 171 * donevin);
  shaenna.bezierCurveTo(32 * donevin, 221 * donevin, 43 * donevin, 233 * donevin, 70 * donevin, 247 * donevin);
  shaenna.bezierCurveTo(75 * donevin, 234 * donevin, 75 * donevin, 230 * donevin, 72 * donevin, 221 * donevin);
  shaenna.bezierCurveTo(48 * donevin, 206 * donevin, 54 * donevin, 188 * donevin, 50 * donevin, 176 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(60 * donevin, 68 * donevin);
  shaenna.bezierCurveTo(63 * donevin, 69 * donevin, 65 * donevin, 71 * donevin, 67 * donevin, 77 * donevin);
  shaenna.bezierCurveTo(61 * donevin, 123 * donevin, 52 * donevin, 137 * donevin, 42 * donevin, 150 * donevin);
  shaenna.bezierCurveTo(38 * donevin, 151 * donevin, 38 * donevin, 151 * donevin, 34 * donevin, 152 * donevin);
  shaenna.bezierCurveTo(33 * donevin, 146.5 * donevin, 33 * donevin, 146.5 * donevin, 32 * donevin, 141 * donevin);
  shaenna.bezierCurveTo(49 * donevin, 118 * donevin, 63 * donevin, 87 * donevin, 59 * donevin, 68 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(71 * donevin, 172 * donevin);
  shaenna.bezierCurveTo(56 * donevin, 222 * donevin, 49 * donevin, 234 * donevin, 35 * donevin, 248 * donevin);
  shaenna.bezierCurveTo(30 * donevin, 236 * donevin, 30 * donevin, 230 * donevin, 31 * donevin, 217 * donevin);
  shaenna.bezierCurveTo(44 * donevin, 202 * donevin, 49 * donevin, 191 * donevin, 52 * donevin, 172 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(35 * donevin, 151 * donevin);
  shaenna.bezierCurveTo(27 * donevin, 165 * donevin, 31 * donevin, 173 * donevin, 36 * donevin, 178 * donevin);
  shaenna.bezierCurveTo(56 * donevin, 185 * donevin, 73 * donevin, 184 * donevin, 71 * donevin, 170 * donevin);
  shaenna.bezierCurveTo(72 * donevin, 154 * donevin, 71 * donevin, 154 * donevin, 63 * donevin, 155 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[0]);
  shaenna.translate(-10 * donevin, -10 * donevin);
  shaenna.globalAlpha = 1;
  shaenna.save();
  shaenna.translate(51.5 * donevin, 342 * donevin);
  round_rect(shaenna, -14.5 * donevin, -225 * donevin, 29 * donevin, 450 * donevin, 20 * donevin);
  shaenna.restore();
  fill_path(shaenna, dag[1], dag[2], 5 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(54 * donevin, 83 * donevin);
  shaenna.bezierCurveTo(70 * donevin, 69 * donevin, 78 * donevin, 62 * donevin, 82 * donevin, 40 * donevin);
  shaenna.bezierCurveTo(93 * donevin, 48 * donevin, 103 * donevin, 64 * donevin, 95 * donevin, 102 * donevin);
  shaenna.bezierCurveTo(60 * donevin, 114 * donevin, 53 * donevin, 103 * donevin, 54 * donevin, 85 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[3], dag[4], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(95 * donevin, 97 * donevin);
  shaenna.bezierCurveTo(56 * donevin, 102 * donevin, 43 * donevin, 77 * donevin, 71 * donevin, 6 * donevin);
  shaenna.bezierCurveTo(34 * donevin, 10 * donevin, 6 * donevin, 43 * donevin, 5 * donevin, 76 * donevin);
  shaenna.bezierCurveTo(4 * donevin, 98 * donevin, 15 * donevin, 130 * donevin, 64 * donevin, 130 * donevin);
  shaenna.bezierCurveTo(76 * donevin, 129 * donevin, 95 * donevin, 113 * donevin, 97 * donevin, 97 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[5], dag[6], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(35 * donevin, 403 * donevin);
  shaenna.bezierCurveTo(47 * donevin, 412 * donevin, 58 * donevin, 412 * donevin, 67 * donevin, 403 * donevin);
  shaenna.bezierCurveTo(66.5 * donevin, 434 * donevin, 66.5 * donevin, 434 * donevin, 66 * donevin, 465 * donevin);
  shaenna.bezierCurveTo(56 * donevin, 480 * donevin, 40 * donevin, 472 * donevin, 36 * donevin, 465 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[7], dag[8], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(37 * donevin, 427 * donevin);
  shaenna.bezierCurveTo(47 * donevin, 435 * donevin, 55 * donevin, 435 * donevin, 67 * donevin, 427 * donevin);
  fill_path(shaenna, undefined, dag[8], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(36 * donevin, 448 * donevin);
  shaenna.bezierCurveTo(46 * donevin, 454 * donevin, 54 * donevin, 457 * donevin, 65 * donevin, 449 * donevin);
  fill_path(shaenna, undefined, dag[8], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(55 * donevin, 176 * donevin);
  shaenna.bezierCurveTo(74 * donevin, 175 * donevin, 82 * donevin, 169 * donevin, 96 * donevin, 155 * donevin);
  shaenna.bezierCurveTo(103 * donevin, 183 * donevin, 95 * donevin, 214 * donevin, 54 * donevin, 219 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[3], dag[4], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(50 * donevin, 176 * donevin);
  shaenna.bezierCurveTo(25 * donevin, 177 * donevin, 16 * donevin, 164 * donevin, 7 * donevin, 156 * donevin);
  shaenna.bezierCurveTo(0 * donevin, 186 * donevin, 10 * donevin, 201 * donevin, 43 * donevin, 220 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[3], dag[4], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(59 * donevin, 67 * donevin);
  shaenna.bezierCurveTo(47 * donevin, 97 * donevin, 18 * donevin, 117 * donevin, 11 * donevin, 110 * donevin);
  shaenna.bezierCurveTo(11 * donevin, 115 * donevin, 15 * donevin, 122 * donevin, 23 * donevin, 124 * donevin);
  shaenna.bezierCurveTo(46 * donevin, 118 * donevin, 52 * donevin, 113 * donevin, 62 * donevin, 86 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[7], dag[8], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(30 * donevin, 125 * donevin);
  shaenna.bezierCurveTo(47 * donevin, 136 * donevin, 57 * donevin, 134 * donevin, 77 * donevin, 127 * donevin);
  shaenna.bezierCurveTo(71 * donevin, 158 * donevin, 71 * donevin, 159 * donevin, 66 * donevin, 159 * donevin);
  shaenna.bezierCurveTo(50.5 * donevin, 156.5 * donevin, 50.5 * donevin, 156.5 * donevin, 35 * donevin, 154 * donevin);
  shaenna.bezierCurveTo(31 * donevin, 145 * donevin, 31 * donevin, 136 * donevin, 31 * donevin, 125 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[7], dag[8], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(35 * donevin, 171 * donevin);
  shaenna.bezierCurveTo(32 * donevin, 221 * donevin, 43 * donevin, 233 * donevin, 70 * donevin, 247 * donevin);
  shaenna.bezierCurveTo(75 * donevin, 234 * donevin, 75 * donevin, 230 * donevin, 72 * donevin, 221 * donevin);
  shaenna.bezierCurveTo(48 * donevin, 206 * donevin, 54 * donevin, 188 * donevin, 50 * donevin, 176 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[7], dag[8], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(60 * donevin, 68 * donevin);
  shaenna.bezierCurveTo(63 * donevin, 69 * donevin, 65 * donevin, 71 * donevin, 67 * donevin, 77 * donevin);
  shaenna.bezierCurveTo(61 * donevin, 123 * donevin, 52 * donevin, 137 * donevin, 42 * donevin, 150 * donevin);
  shaenna.bezierCurveTo(38 * donevin, 151 * donevin, 38 * donevin, 151 * donevin, 34 * donevin, 152 * donevin);
  shaenna.bezierCurveTo(33 * donevin, 146.5 * donevin, 33 * donevin, 146.5 * donevin, 32 * donevin, 141 * donevin);
  shaenna.bezierCurveTo(49 * donevin, 118 * donevin, 63 * donevin, 87 * donevin, 59 * donevin, 68 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[7], dag[8], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(71 * donevin, 172 * donevin);
  shaenna.bezierCurveTo(56 * donevin, 222 * donevin, 49 * donevin, 234 * donevin, 35 * donevin, 248 * donevin);
  shaenna.bezierCurveTo(30 * donevin, 236 * donevin, 30 * donevin, 230 * donevin, 31 * donevin, 217 * donevin);
  shaenna.bezierCurveTo(44 * donevin, 202 * donevin, 49 * donevin, 191 * donevin, 52 * donevin, 172 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[7], dag[8], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(35 * donevin, 151 * donevin);
  shaenna.bezierCurveTo(27 * donevin, 165 * donevin, 31 * donevin, 173 * donevin, 36 * donevin, 178 * donevin);
  shaenna.bezierCurveTo(56 * donevin, 185 * donevin, 73 * donevin, 184 * donevin, 71 * donevin, 170 * donevin);
  shaenna.bezierCurveTo(72 * donevin, 154 * donevin, 71 * donevin, 154 * donevin, 63 * donevin, 155 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[7], dag[8], 6 * donevin);
  shaenna.beginPath();
  shaenna.lineCap = "round";
  shaenna.lineJoin = "round";
  shaenna.moveTo(53 * donevin, 113 * donevin);
  shaenna.bezierCurveTo(65 * donevin, 140 * donevin, 75 * donevin, 166 * donevin, 52 * donevin, 169 * donevin);
  shaenna.bezierCurveTo(29 * donevin, 168 * donevin, 41 * donevin, 143 * donevin, 53 * donevin, 112 * donevin);
  shaenna.closePath();
  fill_path(shaenna, dag[3], dag[4], 6 * donevin);
  return kristia;
}
function create_wood_spear(kalisha, gabel, rie) {
  var nomi = document.createElement("canvas");
  var geordan = nomi.getContext("2d");
  nomi.width = 81 * kalisha;
  nomi.height = 626 * kalisha;
  geordan.translate(20 * kalisha, 20 * kalisha);
  geordan.globalAlpha = gabel ? .5 : 1;
  geordan.beginPath();
  geordan.lineCap = "round";
  geordan.lineJoin = "round";
  geordan.moveTo(55 * kalisha, 565 * kalisha);
  geordan.bezierCurveTo(56 * kalisha, 586 * kalisha, 53 * kalisha, 591 * kalisha, 40 * kalisha, 592 * kalisha);
  geordan.bezierCurveTo(28 * kalisha, 591 * kalisha, 27 * kalisha, 583 * kalisha, 28 * kalisha, 557 * kalisha);
  geordan.bezierCurveTo(27.5 * kalisha, 346 * kalisha, 27.5 * kalisha, 346 * kalisha, 27 * kalisha, 135 * kalisha);
  geordan.bezierCurveTo(26 * kalisha, 74 * kalisha, 36 * kalisha, 26 * kalisha, 41 * kalisha, 15 * kalisha);
  geordan.bezierCurveTo(54 * kalisha, 51 * kalisha, 54 * kalisha, 81 * kalisha, 55 * kalisha, 128 * kalisha);
  geordan.closePath();
  fill_path(geordan, rie[0]);
  geordan.translate(-20 * kalisha, -20 * kalisha);
  geordan.globalAlpha = 1;
  geordan.beginPath();
  geordan.lineCap = "round";
  geordan.lineJoin = "round";
  geordan.moveTo(55 * kalisha, 565 * kalisha);
  geordan.bezierCurveTo(56 * kalisha, 586 * kalisha, 53 * kalisha, 591 * kalisha, 40 * kalisha, 592 * kalisha);
  geordan.bezierCurveTo(28 * kalisha, 591 * kalisha, 27 * kalisha, 583 * kalisha, 28 * kalisha, 557 * kalisha);
  geordan.bezierCurveTo(27.5 * kalisha, 346 * kalisha, 27.5 * kalisha, 346 * kalisha, 27 * kalisha, 135 * kalisha);
  geordan.bezierCurveTo(26 * kalisha, 74 * kalisha, 36 * kalisha, 26 * kalisha, 41 * kalisha, 15 * kalisha);
  geordan.bezierCurveTo(54 * kalisha, 51 * kalisha, 54 * kalisha, 81 * kalisha, 55 * kalisha, 128 * kalisha);
  geordan.closePath();
  fill_path(geordan, rie[1], rie[2], 8 * kalisha);
  geordan.beginPath();
  geordan.lineCap = "round";
  geordan.lineJoin = "round";
  geordan.moveTo(27 * kalisha, 129 * kalisha);
  geordan.bezierCurveTo(32 * kalisha, 135 * kalisha, 48 * kalisha, 136 * kalisha, 53 * kalisha, 129 * kalisha);
  geordan.bezierCurveTo(56 * kalisha, 97 * kalisha, 53 * kalisha, 82 * kalisha, 52 * kalisha, 64 * kalisha);
  geordan.bezierCurveTo(49 * kalisha, 33 * kalisha, 44 * kalisha, 27 * kalisha, 41 * kalisha, 21 * kalisha);
  geordan.bezierCurveTo(31 * kalisha, 40 * kalisha, 28 * kalisha, 84 * kalisha, 27 * kalisha, 127 * kalisha);
  geordan.closePath();
  fill_path(geordan, rie[3]);
  geordan.beginPath();
  geordan.lineCap = "round";
  geordan.lineJoin = "round";
  geordan.moveTo(55 * kalisha, 565 * kalisha);
  geordan.bezierCurveTo(56 * kalisha, 586 * kalisha, 53 * kalisha, 591 * kalisha, 40 * kalisha, 592 * kalisha);
  geordan.bezierCurveTo(28 * kalisha, 591 * kalisha, 27 * kalisha, 583 * kalisha, 28 * kalisha, 557 * kalisha);
  geordan.bezierCurveTo(27.5 * kalisha, 346 * kalisha, 27.5 * kalisha, 346 * kalisha, 27 * kalisha, 135 * kalisha);
  geordan.bezierCurveTo(26 * kalisha, 74 * kalisha, 36 * kalisha, 26 * kalisha, 41 * kalisha, 15 * kalisha);
  geordan.bezierCurveTo(54 * kalisha, 51 * kalisha, 54 * kalisha, 81 * kalisha, 55 * kalisha, 128 * kalisha);
  geordan.closePath();
  fill_path(geordan, undefined, rie[2], 8 * kalisha);
  geordan.beginPath();
  geordan.lineCap = "round";
  geordan.lineJoin = "round";
  geordan.moveTo(28 * kalisha, 475 * kalisha);
  geordan.bezierCurveTo(38 * kalisha, 482 * kalisha, 48 * kalisha, 480 * kalisha, 54 * kalisha, 474 * kalisha);
  geordan.bezierCurveTo(54 * kalisha, 509.5 * kalisha, 54 * kalisha, 509.5 * kalisha, 54 * kalisha, 545 * kalisha);
  geordan.bezierCurveTo(46 * kalisha, 554 * kalisha, 36 * kalisha, 552 * kalisha, 28 * kalisha, 545 * kalisha);
  geordan.closePath();
  fill_path(geordan, rie[4], rie[5], 8 * kalisha);
  geordan.beginPath();
  geordan.lineCap = "round";
  geordan.lineJoin = "round";
  geordan.moveTo(28 * kalisha, 496 * kalisha);
  geordan.bezierCurveTo(39 * kalisha, 506 * kalisha, 49 * kalisha, 503 * kalisha, 54 * kalisha, 496 * kalisha);
  fill_path(geordan, undefined, rie[5], 8 * kalisha);
  geordan.beginPath();
  geordan.lineCap = "round";
  geordan.lineJoin = "round";
  geordan.moveTo(28 * kalisha, 521 * kalisha);
  geordan.bezierCurveTo(41 * kalisha, 529 * kalisha, 49 * kalisha, 524 * kalisha, 54 * kalisha, 520 * kalisha);
  fill_path(geordan, undefined, rie[5], 8 * kalisha);
  return nomi;
}
function create_stonespear(rossie, lanikki, kenaria) {
  var evontae = document.createElement("canvas");
  var fidensio = evontae.getContext("2d");
  evontae.width = 100 * rossie;
  evontae.height = 648 * rossie;
  fidensio.translate(20 * rossie, 20 * rossie);
  fidensio.globalAlpha = lanikki ? .5 : 1;
  fidensio.save();
  fidensio.translate(50.5 * rossie, 349.5 * rossie);
  round_rect(fidensio, -13.5 * rossie, -249.5 * rossie, 27 * rossie, 499 * rossie, 10 * rossie);
  fidensio.restore();
  fill_path(fidensio, kenaria[0]);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(36 * rossie, 538 * rossie);
  fidensio.bezierCurveTo(49.5 * rossie, 538 * rossie, 49.5 * rossie, 538 * rossie, 63 * rossie, 538 * rossie);
  fidensio.bezierCurveTo(63.5 * rossie, 568 * rossie, 63.5 * rossie, 568 * rossie, 64 * rossie, 598 * rossie);
  fidensio.bezierCurveTo(50 * rossie, 598 * rossie, 50 * rossie, 598 * rossie, 36 * rossie, 598 * rossie);
  fidensio.bezierCurveTo(36 * rossie, 568.5 * rossie, 36 * rossie, 568.5 * rossie, 36 * rossie, 539 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[0]);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(36 * rossie, 554 * rossie);
  fidensio.bezierCurveTo(45 * rossie, 561 * rossie, 56 * rossie, 558 * rossie, 63 * rossie, 554 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[0]);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(32 * rossie, 569 * rossie);
  fidensio.bezierCurveTo(44 * rossie, 576 * rossie, 58 * rossie, 574 * rossie, 68 * rossie, 569 * rossie);
  fidensio.bezierCurveTo(68 * rossie, 584 * rossie, 68 * rossie, 584 * rossie, 68 * rossie, 599 * rossie);
  fidensio.bezierCurveTo(68 * rossie, 608 * rossie, 65 * rossie, 618 * rossie, 49 * rossie, 617 * rossie);
  fidensio.bezierCurveTo(34 * rossie, 617 * rossie, 32 * rossie, 610 * rossie, 32 * rossie, 598 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[0]);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(41 * rossie, 581 * rossie);
  fidensio.bezierCurveTo(48 * rossie, 584 * rossie, 55 * rossie, 583 * rossie, 60 * rossie, 581 * rossie);
  fidensio.bezierCurveTo(60 * rossie, 589.5 * rossie, 60 * rossie, 589.5 * rossie, 60 * rossie, 598 * rossie);
  fidensio.bezierCurveTo(60 * rossie, 604 * rossie, 59 * rossie, 609 * rossie, 48 * rossie, 608 * rossie);
  fidensio.bezierCurveTo(40 * rossie, 607 * rossie, 40 * rossie, 606 * rossie, 41 * rossie, 581 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[0]);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(31 * rossie, 106 * rossie);
  fidensio.bezierCurveTo(31 * rossie, 124.5 * rossie, 31 * rossie, 124.5 * rossie, 31 * rossie, 143 * rossie);
  fidensio.bezierCurveTo(31 * rossie, 163 * rossie, 38 * rossie, 169 * rossie, 48 * rossie, 168 * rossie);
  fidensio.bezierCurveTo(57 * rossie, 168 * rossie, 67 * rossie, 165 * rossie, 67 * rossie, 148 * rossie);
  fidensio.bezierCurveTo(67 * rossie, 123.5 * rossie, 67 * rossie, 123.5 * rossie, 67 * rossie, 99 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[0]);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(49 * rossie, 27 * rossie);
  fidensio.bezierCurveTo(64 * rossie, 62.5 * rossie, 64 * rossie, 62.5 * rossie, 79 * rossie, 98 * rossie);
  fidensio.bezierCurveTo(74 * rossie, 113 * rossie, 63 * rossie, 121 * rossie, 50 * rossie, 122 * rossie);
  fidensio.bezierCurveTo(35 * rossie, 123 * rossie, 22 * rossie, 109 * rossie, 20 * rossie, 98 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[0]);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(49 * rossie, 43 * rossie);
  fidensio.bezierCurveTo(61 * rossie, 70 * rossie, 61 * rossie, 70 * rossie, 73 * rossie, 97 * rossie);
  fidensio.bezierCurveTo(66 * rossie, 116 * rossie, 43 * rossie, 122 * rossie, 26 * rossie, 99 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[0]);
  fidensio.translate(-20 * rossie, -20 * rossie);
  fidensio.globalAlpha = 1;
  fidensio.save();
  fidensio.translate(50.5 * rossie, 349.5 * rossie);
  round_rect(fidensio, -13.5 * rossie, -249.5 * rossie, 27 * rossie, 499 * rossie, 10 * rossie);
  fidensio.restore();
  fill_path(fidensio, kenaria[1], kenaria[2], 8 * rossie);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(36 * rossie, 538 * rossie);
  fidensio.bezierCurveTo(49.5 * rossie, 538 * rossie, 49.5 * rossie, 538 * rossie, 63 * rossie, 538 * rossie);
  fidensio.bezierCurveTo(63.5 * rossie, 568 * rossie, 63.5 * rossie, 568 * rossie, 64 * rossie, 598 * rossie);
  fidensio.bezierCurveTo(50 * rossie, 598 * rossie, 50 * rossie, 598 * rossie, 36 * rossie, 598 * rossie);
  fidensio.bezierCurveTo(36 * rossie, 568.5 * rossie, 36 * rossie, 568.5 * rossie, 36 * rossie, 539 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[3], kenaria[4], 8 * rossie);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(36 * rossie, 554 * rossie);
  fidensio.bezierCurveTo(45 * rossie, 561 * rossie, 56 * rossie, 558 * rossie, 63 * rossie, 554 * rossie);
  fidensio.closePath();
  fill_path(fidensio, undefined, kenaria[4], 8 * rossie);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(32 * rossie, 569 * rossie);
  fidensio.bezierCurveTo(44 * rossie, 576 * rossie, 58 * rossie, 574 * rossie, 68 * rossie, 569 * rossie);
  fidensio.bezierCurveTo(68 * rossie, 584 * rossie, 68 * rossie, 584 * rossie, 68 * rossie, 599 * rossie);
  fidensio.bezierCurveTo(68 * rossie, 608 * rossie, 65 * rossie, 618 * rossie, 49 * rossie, 617 * rossie);
  fidensio.bezierCurveTo(34 * rossie, 617 * rossie, 32 * rossie, 610 * rossie, 32 * rossie, 598 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[5], kenaria[6], 8 * rossie);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(41 * rossie, 581 * rossie);
  fidensio.bezierCurveTo(48 * rossie, 584 * rossie, 55 * rossie, 583 * rossie, 60 * rossie, 581 * rossie);
  fidensio.bezierCurveTo(60 * rossie, 589.5 * rossie, 60 * rossie, 589.5 * rossie, 60 * rossie, 598 * rossie);
  fidensio.bezierCurveTo(60 * rossie, 604 * rossie, 59 * rossie, 609 * rossie, 48 * rossie, 608 * rossie);
  fidensio.bezierCurveTo(40 * rossie, 607 * rossie, 40 * rossie, 606 * rossie, 41 * rossie, 581 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[7]);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(31 * rossie, 106 * rossie);
  fidensio.bezierCurveTo(31 * rossie, 124.5 * rossie, 31 * rossie, 124.5 * rossie, 31 * rossie, 143 * rossie);
  fidensio.bezierCurveTo(31 * rossie, 163 * rossie, 38 * rossie, 169 * rossie, 48 * rossie, 168 * rossie);
  fidensio.bezierCurveTo(57 * rossie, 168 * rossie, 67 * rossie, 165 * rossie, 67 * rossie, 148 * rossie);
  fidensio.bezierCurveTo(67 * rossie, 123.5 * rossie, 67 * rossie, 123.5 * rossie, 67 * rossie, 99 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[5], kenaria[6], 8 * rossie);
  fidensio.save();
  fidensio.translate(-46 * rossie, -50 * rossie);
  fidensio.scale(2, 2);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(51 * rossie, 80 * rossie);
  fidensio.bezierCurveTo(51 * rossie, 89.5 * rossie, 51 * rossie, 89.5 * rossie, 51 * rossie, 99 * rossie);
  fidensio.bezierCurveTo(49 * rossie, 103 * rossie, 46 * rossie, 105 * rossie, 44 * rossie, 99 * rossie);
  fidensio.bezierCurveTo(44 * rossie, 88.5 * rossie, 44 * rossie, 88.5 * rossie, 44 * rossie, 78 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[8]);
  fidensio.restore();
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(49 * rossie, 27 * rossie);
  fidensio.bezierCurveTo(64 * rossie, 62.5 * rossie, 64 * rossie, 62.5 * rossie, 79 * rossie, 98 * rossie);
  fidensio.bezierCurveTo(74 * rossie, 113 * rossie, 63 * rossie, 121 * rossie, 50 * rossie, 122 * rossie);
  fidensio.bezierCurveTo(35 * rossie, 123 * rossie, 22 * rossie, 109 * rossie, 20 * rossie, 98 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[8], kenaria[9], 8 * rossie);
  fidensio.scale(2, 2);
  fidensio.translate(-23 * rossie, -20 * rossie);
  fidensio.beginPath();
  fidensio.lineCap = "round";
  fidensio.lineJoin = "round";
  fidensio.moveTo(57 * rossie, 69 * rossie);
  fidensio.bezierCurveTo(50 * rossie, 76 * rossie, 43 * rossie, 75 * rossie, 38 * rossie, 69 * rossie);
  fidensio.bezierCurveTo(43 * rossie, 57 * rossie, 43 * rossie, 57 * rossie, 48 * rossie, 45 * rossie);
  fidensio.closePath();
  fill_path(fidensio, kenaria[10]);
  return evontae;
}
function create_goldspear(annibelle, orie, ridgley) {
  var billyjoe = document.createElement("canvas");
  var shandria = billyjoe.getContext("2d");
  billyjoe.width = 88 * annibelle;
  billyjoe.height = 647 * annibelle;
  shandria.translate(20 * annibelle, 20 * annibelle);
  shandria.globalAlpha = orie ? .5 : 1;
  shandria.save();
  shandria.translate(45 * annibelle, 384.5 * annibelle);
  round_rect(shandria, -15 * annibelle, -216.5 * annibelle, 30 * annibelle, 433 * annibelle, 10 * annibelle);
  shandria.restore();
  fill_path(shandria, ridgley[0]);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(27 * annibelle, 572 * annibelle);
  shandria.bezierCurveTo(44 * annibelle, 580 * annibelle, 55 * annibelle, 576 * annibelle, 62 * annibelle, 572 * annibelle);
  shandria.bezierCurveTo(65 * annibelle, 585.5 * annibelle, 65 * annibelle, 585.5 * annibelle, 68 * annibelle, 599 * annibelle);
  shandria.bezierCurveTo(71 * annibelle, 612 * annibelle, 68 * annibelle, 618 * annibelle, 34 * annibelle, 616 * annibelle);
  shandria.bezierCurveTo(14 * annibelle, 615 * annibelle, 19 * annibelle, 607 * annibelle, 27 * annibelle, 573 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[0]);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(32 * annibelle, 587 * annibelle);
  shandria.bezierCurveTo(39 * annibelle, 590 * annibelle, 48 * annibelle, 588 * annibelle, 54 * annibelle, 587 * annibelle);
  shandria.bezierCurveTo(57 * annibelle, 604 * annibelle, 59 * annibelle, 609 * annibelle, 46 * annibelle, 609 * annibelle);
  shandria.bezierCurveTo(27 * annibelle, 609 * annibelle, 28 * annibelle, 605 * annibelle, 33 * annibelle, 588 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[0]);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(31 * annibelle, 113 * annibelle);
  shandria.bezierCurveTo(27 * annibelle, 139 * annibelle, 27 * annibelle, 139 * annibelle, 23 * annibelle, 165 * annibelle);
  shandria.bezierCurveTo(18 * annibelle, 187 * annibelle, 39 * annibelle, 195 * annibelle, 57 * annibelle, 186 * annibelle);
  shandria.bezierCurveTo(68 * annibelle, 180 * annibelle, 65 * annibelle, 171 * annibelle, 62 * annibelle, 153 * annibelle);
  shandria.bezierCurveTo(58.5 * annibelle, 131 * annibelle, 58.5 * annibelle, 131 * annibelle, 55 * annibelle, 109 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[0]);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(39 * annibelle, 139 * annibelle);
  shandria.bezierCurveTo(43 * annibelle, 139 * annibelle, 43 * annibelle, 139 * annibelle, 47 * annibelle, 139 * annibelle);
  shandria.bezierCurveTo(51 * annibelle, 158 * annibelle, 56 * annibelle, 176 * annibelle, 44 * annibelle, 175 * annibelle);
  shandria.bezierCurveTo(33 * annibelle, 177 * annibelle, 34 * annibelle, 167 * annibelle, 39 * annibelle, 140 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[0]);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(44 * annibelle, 29 * annibelle);
  shandria.bezierCurveTo(57 * annibelle, 63 * annibelle, 57 * annibelle, 63 * annibelle, 70 * annibelle, 97 * annibelle);
  shandria.bezierCurveTo(60 * annibelle, 111 * annibelle, 60 * annibelle, 111 * annibelle, 50 * annibelle, 125 * annibelle);
  shandria.bezierCurveTo(45 * annibelle, 128 * annibelle, 41 * annibelle, 128 * annibelle, 35 * annibelle, 124 * annibelle);
  shandria.bezierCurveTo(26.5 * annibelle, 110 * annibelle, 26.5 * annibelle, 110 * annibelle, 18 * annibelle, 96 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[0]);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(44 * annibelle, 54 * annibelle);
  shandria.bezierCurveTo(50 * annibelle, 72 * annibelle, 50 * annibelle, 72 * annibelle, 56 * annibelle, 90 * annibelle);
  shandria.bezierCurveTo(58 * annibelle, 94 * annibelle, 59 * annibelle, 98 * annibelle, 53 * annibelle, 105 * annibelle);
  shandria.bezierCurveTo(47 * annibelle, 113 * annibelle, 43 * annibelle, 113 * annibelle, 36 * annibelle, 103 * annibelle);
  shandria.bezierCurveTo(29 * annibelle, 96 * annibelle, 31 * annibelle, 94 * annibelle, 35 * annibelle, 83 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[0]);
  shandria.translate(-20 * annibelle, -20 * annibelle);
  shandria.globalAlpha = 1;
  shandria.save();
  shandria.translate(45 * annibelle, 384.5 * annibelle);
  round_rect(shandria, -15 * annibelle, -216.5 * annibelle, 30 * annibelle, 433 * annibelle, 10 * annibelle);
  shandria.restore();
  fill_path(shandria, ridgley[1], ridgley[2], 8 * annibelle);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(27 * annibelle, 572 * annibelle);
  shandria.bezierCurveTo(44 * annibelle, 580 * annibelle, 55 * annibelle, 576 * annibelle, 62 * annibelle, 572 * annibelle);
  shandria.bezierCurveTo(65 * annibelle, 585.5 * annibelle, 65 * annibelle, 585.5 * annibelle, 68 * annibelle, 599 * annibelle);
  shandria.bezierCurveTo(71 * annibelle, 612 * annibelle, 68 * annibelle, 618 * annibelle, 34 * annibelle, 616 * annibelle);
  shandria.bezierCurveTo(14 * annibelle, 615 * annibelle, 19 * annibelle, 607 * annibelle, 27 * annibelle, 573 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[3], ridgley[4], 8 * annibelle);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(32 * annibelle, 587 * annibelle);
  shandria.bezierCurveTo(39 * annibelle, 590 * annibelle, 48 * annibelle, 588 * annibelle, 54 * annibelle, 587 * annibelle);
  shandria.bezierCurveTo(57 * annibelle, 604 * annibelle, 59 * annibelle, 609 * annibelle, 46 * annibelle, 609 * annibelle);
  shandria.bezierCurveTo(27 * annibelle, 609 * annibelle, 28 * annibelle, 605 * annibelle, 33 * annibelle, 588 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[5]);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(31 * annibelle, 113 * annibelle);
  shandria.bezierCurveTo(27 * annibelle, 139 * annibelle, 27 * annibelle, 139 * annibelle, 23 * annibelle, 165 * annibelle);
  shandria.bezierCurveTo(18 * annibelle, 187 * annibelle, 39 * annibelle, 195 * annibelle, 57 * annibelle, 186 * annibelle);
  shandria.bezierCurveTo(68 * annibelle, 180 * annibelle, 65 * annibelle, 171 * annibelle, 62 * annibelle, 153 * annibelle);
  shandria.bezierCurveTo(58.5 * annibelle, 131 * annibelle, 58.5 * annibelle, 131 * annibelle, 55 * annibelle, 109 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[3], ridgley[4], 8 * annibelle);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(39 * annibelle, 139 * annibelle);
  shandria.bezierCurveTo(43 * annibelle, 139 * annibelle, 43 * annibelle, 139 * annibelle, 47 * annibelle, 139 * annibelle);
  shandria.bezierCurveTo(51 * annibelle, 158 * annibelle, 56 * annibelle, 176 * annibelle, 44 * annibelle, 175 * annibelle);
  shandria.bezierCurveTo(33 * annibelle, 177 * annibelle, 34 * annibelle, 167 * annibelle, 39 * annibelle, 140 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[5]);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(44 * annibelle, 29 * annibelle);
  shandria.bezierCurveTo(57 * annibelle, 63 * annibelle, 57 * annibelle, 63 * annibelle, 70 * annibelle, 97 * annibelle);
  shandria.bezierCurveTo(60 * annibelle, 111 * annibelle, 60 * annibelle, 111 * annibelle, 50 * annibelle, 125 * annibelle);
  shandria.bezierCurveTo(45 * annibelle, 128 * annibelle, 41 * annibelle, 128 * annibelle, 35 * annibelle, 124 * annibelle);
  shandria.bezierCurveTo(26.5 * annibelle, 110 * annibelle, 26.5 * annibelle, 110 * annibelle, 18 * annibelle, 96 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[6], ridgley[7], 8 * annibelle);
  shandria.beginPath();
  shandria.lineCap = "round";
  shandria.lineJoin = "round";
  shandria.moveTo(44 * annibelle, 54 * annibelle);
  shandria.bezierCurveTo(50 * annibelle, 72 * annibelle, 50 * annibelle, 72 * annibelle, 56 * annibelle, 90 * annibelle);
  shandria.bezierCurveTo(58 * annibelle, 94 * annibelle, 59 * annibelle, 98 * annibelle, 53 * annibelle, 105 * annibelle);
  shandria.bezierCurveTo(47 * annibelle, 113 * annibelle, 43 * annibelle, 113 * annibelle, 36 * annibelle, 103 * annibelle);
  shandria.bezierCurveTo(29 * annibelle, 96 * annibelle, 31 * annibelle, 94 * annibelle, 35 * annibelle, 83 * annibelle);
  shandria.closePath();
  fill_path(shandria, ridgley[8]);
  return billyjoe;
}
function create_diamondspear(nadine, potter, kaise) {
  var fantaisa = document.createElement("canvas");
  var sekena = fantaisa.getContext("2d");
  fantaisa.width = 106 * nadine;
  fantaisa.height = 681 * nadine;
  sekena.translate(20 * nadine, 20 * nadine);
  sekena.globalAlpha = potter ? .5 : 1;
  sekena.save();
  sekena.translate(52.5 * nadine, 395 * nadine);
  sekena.rotate(0);
  round_rect(sekena, -11.5 * nadine, -226 * nadine, 23 * nadine, 452 * nadine, 10 * nadine);
  sekena.restore();
  fill_path(sekena, kaise[0]);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(35 * nadine, 588 * nadine);
  sekena.bezierCurveTo(47 * nadine, 596 * nadine, 61 * nadine, 594 * nadine, 69 * nadine, 588 * nadine);
  sekena.bezierCurveTo(79 * nadine, 615 * nadine, 78 * nadine, 632 * nadine, 59 * nadine, 643 * nadine);
  sekena.bezierCurveTo(41 * nadine, 650 * nadine, 27 * nadine, 632 * nadine, 30 * nadine, 610 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[0]);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(52 * nadine, 135 * nadine);
  sekena.bezierCurveTo(61.5 * nadine, 142 * nadine, 61.5 * nadine, 142 * nadine, 71 * nadine, 149 * nadine);
  sekena.bezierCurveTo(69.5 * nadine, 166 * nadine, 69.5 * nadine, 166 * nadine, 68 * nadine, 183 * nadine);
  sekena.bezierCurveTo(60.5 * nadine, 187.5 * nadine, 60.5 * nadine, 187.5 * nadine, 53 * nadine, 192 * nadine);
  sekena.bezierCurveTo(45 * nadine, 187.5 * nadine, 45 * nadine, 187.5 * nadine, 37 * nadine, 183 * nadine);
  sekena.bezierCurveTo(35.5 * nadine, 167 * nadine, 35.5 * nadine, 167 * nadine, 34 * nadine, 151 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[0]);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(64 * nadine, 150 * nadine);
  sekena.bezierCurveTo(63 * nadine, 164 * nadine, 63 * nadine, 164 * nadine, 62 * nadine, 178 * nadine);
  sekena.bezierCurveTo(58 * nadine, 181 * nadine, 58 * nadine, 181 * nadine, 54 * nadine, 184 * nadine);
  sekena.bezierCurveTo(48.5 * nadine, 181.5 * nadine, 48.5 * nadine, 181.5 * nadine, 43 * nadine, 179 * nadine);
  sekena.bezierCurveTo(42 * nadine, 164.5 * nadine, 42 * nadine, 164.5 * nadine, 41 * nadine, 150 * nadine);
  sekena.bezierCurveTo(46 * nadine, 152.5 * nadine, 46 * nadine, 152.5 * nadine, 51 * nadine, 155 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[0]);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(52 * nadine, 39 * nadine);
  sekena.bezierCurveTo(65.5 * nadine, 82 * nadine, 65.5 * nadine, 82 * nadine, 79 * nadine, 125 * nadine);
  sekena.bezierCurveTo(66 * nadine, 137.5 * nadine, 66 * nadine, 137.5 * nadine, 53 * nadine, 150 * nadine);
  sekena.bezierCurveTo(39 * nadine, 138 * nadine, 39 * nadine, 138 * nadine, 25 * nadine, 126 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[0]);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(52 * nadine, 64 * nadine);
  sekena.bezierCurveTo(60 * nadine, 92.5 * nadine, 60 * nadine, 92.5 * nadine, 68 * nadine, 121 * nadine);
  sekena.bezierCurveTo(61 * nadine, 127.5 * nadine, 61 * nadine, 127.5 * nadine, 54 * nadine, 134 * nadine);
  sekena.bezierCurveTo(46.5 * nadine, 127.5 * nadine, 46.5 * nadine, 127.5 * nadine, 39 * nadine, 121 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[0]);
  sekena.translate(-20 * nadine, -20 * nadine);
  sekena.globalAlpha = 1;
  sekena.save();
  sekena.translate(52.5 * nadine, 395 * nadine);
  sekena.rotate(0);
  round_rect(sekena, -11.5 * nadine, -226 * nadine, 23 * nadine, 452 * nadine, 10 * nadine);
  sekena.restore();
  fill_path(sekena, kaise[1], kaise[2], 8 * nadine);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(35 * nadine, 588 * nadine);
  sekena.bezierCurveTo(47 * nadine, 596 * nadine, 61 * nadine, 594 * nadine, 69 * nadine, 588 * nadine);
  sekena.bezierCurveTo(79 * nadine, 615 * nadine, 78 * nadine, 632 * nadine, 59 * nadine, 643 * nadine);
  sekena.bezierCurveTo(41 * nadine, 650 * nadine, 27 * nadine, 632 * nadine, 30 * nadine, 610 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[3], kaise[4], 8 * nadine);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(52 * nadine, 135 * nadine);
  sekena.bezierCurveTo(61.5 * nadine, 142 * nadine, 61.5 * nadine, 142 * nadine, 71 * nadine, 149 * nadine);
  sekena.bezierCurveTo(69.5 * nadine, 166 * nadine, 69.5 * nadine, 166 * nadine, 68 * nadine, 183 * nadine);
  sekena.bezierCurveTo(60.5 * nadine, 187.5 * nadine, 60.5 * nadine, 187.5 * nadine, 53 * nadine, 192 * nadine);
  sekena.bezierCurveTo(45 * nadine, 187.5 * nadine, 45 * nadine, 187.5 * nadine, 37 * nadine, 183 * nadine);
  sekena.bezierCurveTo(35.5 * nadine, 167 * nadine, 35.5 * nadine, 167 * nadine, 34 * nadine, 151 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[3], kaise[4], 8 * nadine);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(64 * nadine, 150 * nadine);
  sekena.bezierCurveTo(63 * nadine, 164 * nadine, 63 * nadine, 164 * nadine, 62 * nadine, 178 * nadine);
  sekena.bezierCurveTo(58 * nadine, 181 * nadine, 58 * nadine, 181 * nadine, 54 * nadine, 184 * nadine);
  sekena.bezierCurveTo(48.5 * nadine, 181.5 * nadine, 48.5 * nadine, 181.5 * nadine, 43 * nadine, 179 * nadine);
  sekena.bezierCurveTo(42 * nadine, 164.5 * nadine, 42 * nadine, 164.5 * nadine, 41 * nadine, 150 * nadine);
  sekena.bezierCurveTo(46 * nadine, 152.5 * nadine, 46 * nadine, 152.5 * nadine, 51 * nadine, 155 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[5]);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(52 * nadine, 39 * nadine);
  sekena.bezierCurveTo(65.5 * nadine, 82 * nadine, 65.5 * nadine, 82 * nadine, 79 * nadine, 125 * nadine);
  sekena.bezierCurveTo(66 * nadine, 137.5 * nadine, 66 * nadine, 137.5 * nadine, 53 * nadine, 150 * nadine);
  sekena.bezierCurveTo(39 * nadine, 138 * nadine, 39 * nadine, 138 * nadine, 25 * nadine, 126 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[6], kaise[7], 8 * nadine);
  sekena.beginPath();
  sekena.lineCap = "round";
  sekena.lineJoin = "round";
  sekena.moveTo(52 * nadine, 64 * nadine);
  sekena.bezierCurveTo(60 * nadine, 92.5 * nadine, 60 * nadine, 92.5 * nadine, 68 * nadine, 121 * nadine);
  sekena.bezierCurveTo(61 * nadine, 127.5 * nadine, 61 * nadine, 127.5 * nadine, 54 * nadine, 134 * nadine);
  sekena.bezierCurveTo(46.5 * nadine, 127.5 * nadine, 46.5 * nadine, 127.5 * nadine, 39 * nadine, 121 * nadine);
  sekena.closePath();
  fill_path(sekena, kaise[8]);
  return fantaisa;
}
function create_amespear(espen, yzabel, sakariye) {
  var anderew = document.createElement("canvas");
  var madissyn = anderew.getContext("2d");
  anderew.width = 108 * espen;
  anderew.height = 669 * espen;
  madissyn.translate(20 * espen, 20 * espen);
  madissyn.globalAlpha = yzabel ? .5 : 1;
  madissyn.save();
  madissyn.translate(54 * espen, 389.5 * espen);
  round_rect(madissyn, -15 * espen, -228.5 * espen, 30 * espen, 457 * espen, 10 * espen);
  madissyn.restore();
  fill_path(madissyn, sakariye[0]);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(35 * espen, 579 * espen);
  madissyn.bezierCurveTo(47 * espen, 587 * espen, 61 * espen, 584 * espen, 71 * espen, 579 * espen);
  madissyn.bezierCurveTo(75 * espen, 597.5 * espen, 75 * espen, 597.5 * espen, 79 * espen, 616 * espen);
  madissyn.bezierCurveTo(66.5 * espen, 628 * espen, 66.5 * espen, 628 * espen, 54 * espen, 640 * espen);
  madissyn.bezierCurveTo(41 * espen, 628.5 * espen, 41 * espen, 628.5 * espen, 28 * espen, 617 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[0]);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(30 * espen, 141 * espen);
  madissyn.bezierCurveTo(40 * espen, 136 * espen, 40 * espen, 136 * espen, 50 * espen, 131 * espen);
  madissyn.bezierCurveTo(63 * espen, 136 * espen, 63 * espen, 136 * espen, 76 * espen, 141 * espen);
  madissyn.bezierCurveTo(72.5 * espen, 161.5 * espen, 72.5 * espen, 161.5 * espen, 69 * espen, 182 * espen);
  madissyn.bezierCurveTo(61.5 * espen, 186.5 * espen, 61.5 * espen, 186.5 * espen, 54 * espen, 191 * espen);
  madissyn.bezierCurveTo(45 * espen, 186.5 * espen, 45 * espen, 186.5 * espen, 36 * espen, 182 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[0]);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(42 * espen, 152 * espen);
  madissyn.bezierCurveTo(53 * espen, 152 * espen, 53 * espen, 152 * espen, 64 * espen, 152 * espen);
  madissyn.bezierCurveTo(62 * espen, 171 * espen, 62 * espen, 176 * espen, 55 * espen, 177 * espen);
  madissyn.bezierCurveTo(42 * espen, 176 * espen, 45 * espen, 174 * espen, 42 * espen, 152 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[0]);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(52 * espen, 28 * espen);
  madissyn.bezierCurveTo(67.5 * espen, 55 * espen, 67.5 * espen, 55 * espen, 83 * espen, 82 * espen);
  madissyn.bezierCurveTo(80 * espen, 106.5 * espen, 80 * espen, 106.5 * espen, 77 * espen, 131 * espen);
  madissyn.bezierCurveTo(58 * espen, 147 * espen, 44 * espen, 141 * espen, 29 * espen, 131 * espen);
  madissyn.bezierCurveTo(26.5 * espen, 106.5 * espen, 26.5 * espen, 106.5 * espen, 24 * espen, 82 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[0]);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(53 * espen, 53 * espen);
  madissyn.bezierCurveTo(61 * espen, 70 * espen, 61 * espen, 70 * espen, 69 * espen, 87 * espen);
  madissyn.bezierCurveTo(67 * espen, 106 * espen, 67 * espen, 106 * espen, 65 * espen, 125 * espen);
  madissyn.bezierCurveTo(54 * espen, 130 * espen, 51 * espen, 130 * espen, 41 * espen, 125 * espen);
  madissyn.bezierCurveTo(39 * espen, 105 * espen, 39 * espen, 105 * espen, 37 * espen, 85 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[0]);
  madissyn.translate(-20 * espen, -20 * espen);
  madissyn.globalAlpha = 1;
  madissyn.save();
  madissyn.translate(54 * espen, 389.5 * espen);
  madissyn.rotate(0);
  round_rect(madissyn, -15 * espen, -228.5 * espen, 30 * espen, 457 * espen, 10 * espen);
  madissyn.restore();
  fill_path(madissyn, sakariye[1], sakariye[2], 8 * espen);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(35 * espen, 579 * espen);
  madissyn.bezierCurveTo(47 * espen, 587 * espen, 61 * espen, 584 * espen, 71 * espen, 579 * espen);
  madissyn.bezierCurveTo(75 * espen, 597.5 * espen, 75 * espen, 597.5 * espen, 79 * espen, 616 * espen);
  madissyn.bezierCurveTo(66.5 * espen, 628 * espen, 66.5 * espen, 628 * espen, 54 * espen, 640 * espen);
  madissyn.bezierCurveTo(41 * espen, 628.5 * espen, 41 * espen, 628.5 * espen, 28 * espen, 617 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[3], sakariye[4], 8 * espen);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(30 * espen, 141 * espen);
  madissyn.bezierCurveTo(40 * espen, 136 * espen, 40 * espen, 136 * espen, 50 * espen, 131 * espen);
  madissyn.bezierCurveTo(63 * espen, 136 * espen, 63 * espen, 136 * espen, 76 * espen, 141 * espen);
  madissyn.bezierCurveTo(72.5 * espen, 161.5 * espen, 72.5 * espen, 161.5 * espen, 69 * espen, 182 * espen);
  madissyn.bezierCurveTo(61.5 * espen, 186.5 * espen, 61.5 * espen, 186.5 * espen, 54 * espen, 191 * espen);
  madissyn.bezierCurveTo(45 * espen, 186.5 * espen, 45 * espen, 186.5 * espen, 36 * espen, 182 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[3], sakariye[4], 8 * espen);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(42 * espen, 152 * espen);
  madissyn.bezierCurveTo(53 * espen, 152 * espen, 53 * espen, 152 * espen, 64 * espen, 152 * espen);
  madissyn.bezierCurveTo(62 * espen, 171 * espen, 62 * espen, 176 * espen, 55 * espen, 177 * espen);
  madissyn.bezierCurveTo(42 * espen, 176 * espen, 45 * espen, 174 * espen, 42 * espen, 152 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[5]);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(52 * espen, 28 * espen);
  madissyn.bezierCurveTo(67.5 * espen, 55 * espen, 67.5 * espen, 55 * espen, 83 * espen, 82 * espen);
  madissyn.bezierCurveTo(80 * espen, 106.5 * espen, 80 * espen, 106.5 * espen, 77 * espen, 131 * espen);
  madissyn.bezierCurveTo(58 * espen, 147 * espen, 44 * espen, 141 * espen, 29 * espen, 131 * espen);
  madissyn.bezierCurveTo(26.5 * espen, 106.5 * espen, 26.5 * espen, 106.5 * espen, 24 * espen, 82 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[6], sakariye[7], 8 * espen);
  madissyn.beginPath();
  madissyn.lineCap = "round";
  madissyn.lineJoin = "round";
  madissyn.moveTo(53 * espen, 53 * espen);
  madissyn.bezierCurveTo(61 * espen, 70 * espen, 61 * espen, 70 * espen, 69 * espen, 87 * espen);
  madissyn.bezierCurveTo(67 * espen, 106 * espen, 67 * espen, 106 * espen, 65 * espen, 125 * espen);
  madissyn.bezierCurveTo(54 * espen, 130 * espen, 51 * espen, 130 * espen, 41 * espen, 125 * espen);
  madissyn.bezierCurveTo(39 * espen, 105 * espen, 39 * espen, 105 * espen, 37 * espen, 85 * espen);
  madissyn.closePath();
  fill_path(madissyn, sakariye[8]);
  return anderew;
}
function create_spear(joleen, raeghan, avia) {
  var amitabh = document.createElement("canvas");
  var lendra = amitabh.getContext("2d");
  amitabh.width = 81 * joleen;
  amitabh.height = 350 * joleen;
  lendra.globalAlpha = raeghan ? .6 : 1;
  lendra.translate(0, 5 * joleen);
  lendra.save();
  lendra.translate(35 * joleen, 160 * joleen);
  lendra.rotate(0);
  round_rect(lendra, -6 * joleen, -100.5 * joleen, 12 * joleen, 240 * joleen, 10 * joleen);
  lendra.restore();
  fill_path(lendra, avia[0]);
  lendra.translate(0, -5 * joleen);
  lendra.beginPath();
  lendra.lineCap = "round";
  lendra.lineJoin = "round";
  lendra.save();
  lendra.translate(-6 * joleen, 11 * joleen);
  lendra.moveTo(26.0714111328125 * joleen, 50.9 * joleen);
  lendra.bezierCurveTo(32.0714111328125 * joleen, 35.892852783203125 * joleen, 39.0714111328125 * joleen, 18.892852783203125 * joleen, 45.0714111328125 * joleen, 7.892852783203125 * joleen);
  lendra.bezierCurveTo(51.0714111328125 * joleen, 13.892852783203125 * joleen, 56.0714111328125 * joleen, 36.892852783203125 * joleen, 60.0714111328125 * joleen, 50.892852783203125 * joleen);
  lendra.bezierCurveTo(52.5714111328125 * joleen, 58.892852783203125 * joleen, 52.5714111328125 * joleen, 58.892852783203125 * joleen, 45.0714111328125 * joleen, 66.89285278320312 * joleen);
  lendra.bezierCurveTo(37.0714111328125 * joleen, 58.892852783203125 * joleen, 37.0714111328125 * joleen, 58.892852783203125 * joleen, 29.0714111328125 * joleen, 50.892852783203125 * joleen);
  lendra.closePath();
  fill_path(lendra, avia[0]);
  lendra.restore();
  lendra.globalAlpha = 1;
  lendra.save();
  lendra.translate(0, -10 * joleen);
  lendra.translate(45.0714111328125 * joleen, 149.39285278320312 * joleen);
  lendra.rotate(0);
  round_rect(lendra, -6 * joleen, -94.5 * joleen, 12 * joleen, 250 * joleen, 10 * joleen);
  lendra.restore();
  fill_path(lendra, avia[1], avia[2], 6 * joleen);
  lendra.translate(0, 0 * joleen);
  lendra.beginPath();
  lendra.lineCap = "round";
  lendra.lineJoin = "round";
  lendra.moveTo(29.0714111328125 * joleen, 50.9 * joleen);
  lendra.bezierCurveTo(32.0714111328125 * joleen, 35.892852783203125 * joleen, 39.0714111328125 * joleen, 18.892852783203125 * joleen, 45.0714111328125 * joleen, 7.892852783203125 * joleen);
  lendra.bezierCurveTo(51.0714111328125 * joleen, 13.892852783203125 * joleen, 56.0714111328125 * joleen, 36.892852783203125 * joleen, 60.0714111328125 * joleen, 50.892852783203125 * joleen);
  lendra.bezierCurveTo(52.5714111328125 * joleen, 58.892852783203125 * joleen, 52.5714111328125 * joleen, 58.892852783203125 * joleen, 45.0714111328125 * joleen, 66.89285278320312 * joleen);
  lendra.bezierCurveTo(37.0714111328125 * joleen, 58.892852783203125 * joleen, 37.0714111328125 * joleen, 58.892852783203125 * joleen, 29.0714111328125 * joleen, 50.892852783203125 * joleen);
  lendra.closePath();
  fill_path(lendra, avia[3], avia[4], 6 * joleen);
  return amitabh;
}
function create_dragon_spear(jerelle, conred, nakeisha) {
  var dausen = document.createElement("canvas");
  var deshauna = dausen.getContext("2d");
  dausen.width = 43 * jerelle;
  dausen.height = 209 * jerelle;
  deshauna.globalAlpha = conred ? .5 : 1;
  deshauna.translate(0, 10 * jerelle);
  deshauna.translate(5 * jerelle, 5 * jerelle);
  deshauna.save();
  deshauna.translate(21 * jerelle, 102.5 * jerelle);
  round_rect(deshauna, -4 * jerelle, -76.5 * jerelle, 8 * jerelle, 163 * jerelle, 10 * jerelle);
  deshauna.restore();
  fill_path(deshauna, nakeisha[0]);
  deshauna.translate(0, 10 * jerelle);
  deshauna.beginPath();
  deshauna.lineCap = "round";
  deshauna.lineJoin = "round";
  deshauna.moveTo(20 * jerelle, 10 * jerelle);
  deshauna.bezierCurveTo(25 * jerelle, 25.5 * jerelle, 25 * jerelle, 25.5 * jerelle, 30 * jerelle, 41 * jerelle);
  deshauna.bezierCurveTo(25.5 * jerelle, 38.5 * jerelle, 25.5 * jerelle, 38.5 * jerelle, 21 * jerelle, 36 * jerelle);
  deshauna.bezierCurveTo(16 * jerelle, 38.5 * jerelle, 16 * jerelle, 38.5 * jerelle, 11 * jerelle, 41 * jerelle);
  deshauna.closePath();
  fill_path(deshauna, nakeisha[0]);
  deshauna.beginPath();
  deshauna.lineCap = "round";
  deshauna.lineJoin = "round";
  deshauna.moveTo(21 * jerelle, 1 * jerelle);
  deshauna.bezierCurveTo(28 * jerelle, 18 * jerelle, 28 * jerelle, 18 * jerelle, 35 * jerelle, 35 * jerelle);
  deshauna.bezierCurveTo(28.5 * jerelle, 32 * jerelle, 28.5 * jerelle, 32 * jerelle, 22 * jerelle, 29 * jerelle);
  deshauna.bezierCurveTo(14.5 * jerelle, 32.5 * jerelle, 14.5 * jerelle, 32.5 * jerelle, 7 * jerelle, 36 * jerelle);
  deshauna.closePath();
  fill_path(deshauna, nakeisha[0]);
  deshauna.beginPath();
  deshauna.lineCap = "round";
  deshauna.lineJoin = "round";
  deshauna.moveTo(14 * jerelle, 146 * jerelle);
  deshauna.bezierCurveTo(21 * jerelle, 146 * jerelle, 21 * jerelle, 146 * jerelle, 28 * jerelle, 146 * jerelle);
  deshauna.bezierCurveTo(27.5 * jerelle, 147.5 * jerelle, 27.5 * jerelle, 147.5 * jerelle, 27 * jerelle, 149 * jerelle);
  deshauna.bezierCurveTo(27 * jerelle, 160 * jerelle, 27 * jerelle, 160 * jerelle, 27 * jerelle, 171 * jerelle);
  deshauna.bezierCurveTo(27.5 * jerelle, 171.5 * jerelle, 27.5 * jerelle, 171.5 * jerelle, 28 * jerelle, 172 * jerelle);
  deshauna.bezierCurveTo(21 * jerelle, 172 * jerelle, 21 * jerelle, 172 * jerelle, 14 * jerelle, 172 * jerelle);
  deshauna.bezierCurveTo(14 * jerelle, 171.5 * jerelle, 14 * jerelle, 171.5 * jerelle, 14 * jerelle, 171 * jerelle);
  deshauna.bezierCurveTo(14.5 * jerelle, 171.5 * jerelle, 14.5 * jerelle, 171.5 * jerelle, 15 * jerelle, 172 * jerelle);
  deshauna.bezierCurveTo(15 * jerelle, 160.5 * jerelle, 15 * jerelle, 160.5 * jerelle, 15 * jerelle, 149 * jerelle);
  deshauna.closePath();
  fill_path(deshauna, nakeisha[0]);
  deshauna.beginPath();
  deshauna.lineCap = "round";
  deshauna.lineJoin = "round";
  deshauna.moveTo(21 * jerelle, 6 * jerelle);
  deshauna.bezierCurveTo(26.5 * jerelle, 18.5 * jerelle, 26.5 * jerelle, 18.5 * jerelle, 32 * jerelle, 31 * jerelle);
  deshauna.bezierCurveTo(27 * jerelle, 29 * jerelle, 27 * jerelle, 29 * jerelle, 22 * jerelle, 27 * jerelle);
  deshauna.closePath();
  fill_path(deshauna, nakeisha[0]);
  deshauna.translate(0, -20 * jerelle);
  deshauna.globalAlpha = 1;
  deshauna.translate(0, 10 * jerelle);
  deshauna.translate(-5 * jerelle, -5 * jerelle);
  deshauna.save();
  deshauna.translate(21 * jerelle, 102.5 * jerelle);
  round_rect(deshauna, -4 * jerelle, -76.5 * jerelle, 8 * jerelle, 163 * jerelle, 10 * jerelle);
  deshauna.restore();
  fill_path(deshauna, nakeisha[1], nakeisha[2], 4 * jerelle);
  deshauna.translate(0, 10 * jerelle);
  deshauna.beginPath();
  deshauna.lineCap = "round";
  deshauna.lineJoin = "round";
  deshauna.moveTo(20 * jerelle, 10 * jerelle);
  deshauna.bezierCurveTo(25 * jerelle, 25.5 * jerelle, 25 * jerelle, 25.5 * jerelle, 30 * jerelle, 41 * jerelle);
  deshauna.bezierCurveTo(25.5 * jerelle, 38.5 * jerelle, 25.5 * jerelle, 38.5 * jerelle, 21 * jerelle, 36 * jerelle);
  deshauna.bezierCurveTo(16 * jerelle, 38.5 * jerelle, 16 * jerelle, 38.5 * jerelle, 11 * jerelle, 41 * jerelle);
  deshauna.closePath();
  fill_path(deshauna, nakeisha[3], nakeisha[4], 4 * jerelle);
  deshauna.beginPath();
  deshauna.lineCap = "round";
  deshauna.lineJoin = "round";
  deshauna.moveTo(21 * jerelle, 1 * jerelle);
  deshauna.bezierCurveTo(28 * jerelle, 18 * jerelle, 28 * jerelle, 18 * jerelle, 35 * jerelle, 35 * jerelle);
  deshauna.bezierCurveTo(28.5 * jerelle, 32 * jerelle, 28.5 * jerelle, 32 * jerelle, 22 * jerelle, 29 * jerelle);
  deshauna.bezierCurveTo(14.5 * jerelle, 32.5 * jerelle, 14.5 * jerelle, 32.5 * jerelle, 7 * jerelle, 36 * jerelle);
  deshauna.closePath();
  fill_path(deshauna, nakeisha[5], nakeisha[6], 4 * jerelle);
  deshauna.translate(0, 0 * jerelle);
  deshauna.beginPath();
  deshauna.lineCap = "round";
  deshauna.lineJoin = "round";
  deshauna.moveTo(14 * jerelle, 146 * jerelle);
  deshauna.bezierCurveTo(21 * jerelle, 146 * jerelle, 21 * jerelle, 146 * jerelle, 28 * jerelle, 146 * jerelle);
  deshauna.bezierCurveTo(27.5 * jerelle, 147.5 * jerelle, 27.5 * jerelle, 147.5 * jerelle, 27 * jerelle, 149 * jerelle);
  deshauna.bezierCurveTo(27 * jerelle, 160 * jerelle, 27 * jerelle, 160 * jerelle, 27 * jerelle, 171 * jerelle);
  deshauna.bezierCurveTo(27.5 * jerelle, 171.5 * jerelle, 27.5 * jerelle, 171.5 * jerelle, 28 * jerelle, 172 * jerelle);
  deshauna.bezierCurveTo(21 * jerelle, 172 * jerelle, 21 * jerelle, 172 * jerelle, 14 * jerelle, 172 * jerelle);
  deshauna.bezierCurveTo(14 * jerelle, 171.5 * jerelle, 14 * jerelle, 171.5 * jerelle, 14 * jerelle, 171 * jerelle);
  deshauna.bezierCurveTo(14.5 * jerelle, 171.5 * jerelle, 14.5 * jerelle, 171.5 * jerelle, 15 * jerelle, 172 * jerelle);
  deshauna.bezierCurveTo(15 * jerelle, 160.5 * jerelle, 15 * jerelle, 160.5 * jerelle, 15 * jerelle, 149 * jerelle);
  deshauna.closePath();
  fill_path(deshauna, nakeisha[1], nakeisha[2], 4 * jerelle);
  deshauna.beginPath();
  deshauna.lineCap = "round";
  deshauna.lineJoin = "round";
  deshauna.moveTo(21 * jerelle, 6 * jerelle);
  deshauna.bezierCurveTo(26.5 * jerelle, 18.5 * jerelle, 26.5 * jerelle, 18.5 * jerelle, 32 * jerelle, 31 * jerelle);
  deshauna.bezierCurveTo(27 * jerelle, 29 * jerelle, 27 * jerelle, 29 * jerelle, 22 * jerelle, 27 * jerelle);
  deshauna.closePath();
  fill_path(deshauna, nakeisha[8]);
  return dausen;
}
function create_plus_chest(brighley, aarynn, latresia) {
  var rhyin = document.createElement("canvas");
  var zaiah = rhyin.getContext("2d");
  rhyin.width = 200 * brighley;
  rhyin.height = 200 * brighley;
  zaiah.save();
  zaiah.translate(112 * brighley, 158 * brighley);
  round_rect(zaiah, -86.5 * brighley, -86 * brighley, 150 * brighley, 35 * brighley, 20 * brighley);
  zaiah.restore();
  fill_path(zaiah, latresia[0]);
  zaiah.save();
  zaiah.translate(170 * brighley, 100 * brighley);
  round_rect(zaiah, -86.5 * brighley, -86 * brighley, 35 * brighley, 150 * brighley, 20 * brighley);
  zaiah.restore();
  fill_path(zaiah, latresia[0]);
  return rhyin;
}
function create_chest_slot(arliana, cyndra, riven) {
  var climon = document.createElement("canvas");
  var raiyaan = climon.getContext("2d");
  climon.width = 118 * arliana;
  climon.height = 129 * arliana;
  raiyaan.save();
  raiyaan.translate(90 * arliana, 90 * arliana);
  round_rect(raiyaan, -86.5 * arliana, -86 * arliana, 110 * arliana, 110 * arliana, 15 * arliana);
  raiyaan.restore();
  fill_path(raiyaan, riven[0], riven[1], 4);
  raiyaan.save();
  round_rect(raiyaan, 30 * arliana, 115 * arliana, 60 * arliana, 5 * arliana, 15 * arliana);
  raiyaan.restore();
  fill_path(raiyaan, riven[2], riven[3], 4);
  raiyaan.save();
  round_rect(raiyaan, 50 * arliana, 117 * arliana, 20 * arliana, 10 * arliana, 15 * arliana);
  raiyaan.restore();
  fill_path(raiyaan, riven[2]);
  return climon;
}
function create_chest(rhandy, narissa, yadira) {
  var girtrude = document.createElement("canvas");
  var kaniela = girtrude.getContext("2d");
  girtrude.width = 165 * rhandy;
  girtrude.height = 123 * rhandy;
  kaniela.save();
  kaniela.translate(81 * rhandy, 65 * rhandy);
  round_rect(kaniela, -78 * rhandy, -54.5 * rhandy, 156 * rhandy, 109 * rhandy, 20 * rhandy);
  kaniela.restore();
  fill_path(kaniela, yadira[0]);
  kaniela.save();
  kaniela.translate(81 * rhandy, 58 * rhandy);
  round_rect(kaniela, -78 * rhandy, -54.5 * rhandy, 156 * rhandy, 109 * rhandy, 20 * rhandy);
  kaniela.restore();
  fill_path(kaniela, yadira[1], yadira[2], 4);
  kaniela.save();
  kaniela.translate(81 * rhandy, 58 * rhandy);
  round_rect(kaniela, -69 * rhandy, -47 * rhandy, 138 * rhandy, 93 * rhandy, 15 * rhandy);
  kaniela.restore();
  fill_path(kaniela, yadira[3], yadira[4], 4);
  kaniela.save();
  kaniela.translate(79 * rhandy, 54 * rhandy);
  round_rect(kaniela, -34 * rhandy, -40 * rhandy, 68 * rhandy, 88 * rhandy, 13 * rhandy);
  kaniela.restore();
  fill_path(kaniela, undefined, yadira[5], 4);
  kaniela.beginPath();
  kaniela.lineCap = "round";
  kaniela.lineJoin = "round";
  kaniela.moveTo(44 * rhandy, 13 * rhandy);
  kaniela.bezierCurveTo(43.5 * rhandy, 55 * rhandy, 43.5 * rhandy, 55 * rhandy, 43 * rhandy, 101 * rhandy);
  kaniela.closePath();
  fill_path(kaniela, undefined, yadira[6], 4);
  kaniela.beginPath();
  kaniela.lineCap = "round";
  kaniela.lineJoin = "round";
  kaniela.moveTo(115 * rhandy, 13 * rhandy);
  kaniela.bezierCurveTo(115 * rhandy, 56 * rhandy, 115 * rhandy, 56 * rhandy, 115 * rhandy, 101 * rhandy);
  kaniela.closePath();
  fill_path(kaniela, undefined, yadira[6], 4);
  kaniela.beginPath();
  kaniela.lineCap = "round";
  kaniela.lineJoin = "round";
  kaniela.moveTo(35 * rhandy, 6 * rhandy);
  kaniela.bezierCurveTo(35 * rhandy, 56 * rhandy, 36 * rhandy, 109 * rhandy, 35 * rhandy, 110 * rhandy);
  kaniela.closePath();
  fill_path(kaniela, undefined, yadira[7], 4);
  kaniela.beginPath();
  kaniela.lineCap = "round";
  kaniela.lineJoin = "round";
  kaniela.moveTo(123 * rhandy, 6 * rhandy);
  kaniela.bezierCurveTo(123 * rhandy, 56 * rhandy, 123 * rhandy, 56 * rhandy, 123 * rhandy, 110 * rhandy);
  kaniela.closePath();
  fill_path(kaniela, undefined, yadira[7], 4);
  kaniela.save();
  kaniela.translate(79 * rhandy, 113 * rhandy);
  round_rect(kaniela, -18 * rhandy, -2 * rhandy, 36 * rhandy, 4 * rhandy, 20 * rhandy);
  kaniela.restore();
  fill_path(kaniela, undefined, yadira[8], 4);
  kaniela.save();
  kaniela.translate(75 * rhandy, 118 * rhandy);
  round_rect(kaniela, -6 * rhandy, -2.5 * rhandy, 20 * rhandy, 5 * rhandy, 20 * rhandy);
  kaniela.restore();
  fill_path(kaniela, yadira[8]);
  return girtrude;
}
function create_bag(marialys, jynelle, farmer) {
  var harron = document.createElement("canvas");
  var anarosa = harron.getContext("2d");
  harron.width = 86 * marialys;
  harron.height = 45 * marialys;
  anarosa.beginPath();
  anarosa.lineCap = "round";
  anarosa.lineJoin = "round";
  anarosa.moveTo(15 * marialys, 15 * marialys);
  anarosa.bezierCurveTo(16 * marialys, 15 * marialys, 19.5 * marialys, 9 * marialys, 24 * marialys, 2 * marialys);
  anarosa.bezierCurveTo(41 * marialys, 2 * marialys, 41 * marialys, 2 * marialys, 58 * marialys, 2 * marialys);
  anarosa.bezierCurveTo(64 * marialys, 13 * marialys, 61 * marialys, 8 * marialys, 65 * marialys, 13 * marialys);
  anarosa.closePath();
  fill_path(anarosa, farmer[0], farmer[1], 4);
  anarosa.save();
  anarosa.translate(43 * marialys, 27 * marialys);
  anarosa.rotate(0);
  round_rect(anarosa, -40 * marialys, -15 * marialys, 80 * marialys, 30 * marialys, 10 * marialys);
  anarosa.restore();
  fill_path(anarosa, farmer[0], farmer[1], 4);
  anarosa.save();
  anarosa.translate(43 * marialys, 33 * marialys);
  anarosa.rotate(0);
  round_rect(anarosa, -17 * marialys, -4.5 * marialys, 34 * marialys, 9 * marialys, 10 * marialys);
  anarosa.restore();
  fill_path(anarosa, farmer[0], farmer[1], 4);
  return harron;
}
function create_fur(latai, caydn, angeleta) {
  var yandier = document.createElement("canvas");
  var noralie = yandier.getContext("2d");
  yandier.width = 92 * latai;
  yandier.height = 108 * latai;
  noralie.beginPath();
  noralie.lineCap = "round";
  noralie.lineJoin = "round";
  noralie.moveTo(31 * latai, 10 * latai);
  noralie.bezierCurveTo(37 * latai, 2 * latai, 49 * latai, 0 * latai, 61 * latai, 15 * latai);
  noralie.bezierCurveTo(81 * latai, 31 * latai, 78 * latai, 25 * latai, 79 * latai, 37 * latai);
  noralie.bezierCurveTo(76 * latai, 44 * latai, 81 * latai, 56 * latai, 85 * latai, 63 * latai);
  noralie.bezierCurveTo(91 * latai, 71 * latai, 90 * latai, 78 * latai, 83 * latai, 84 * latai);
  noralie.bezierCurveTo(60 * latai, 98 * latai, 67 * latai, 95 * latai, 57 * latai, 102 * latai);
  noralie.bezierCurveTo(47 * latai, 106 * latai, 43 * latai, 106 * latai, 31 * latai, 98 * latai);
  noralie.bezierCurveTo(22 * latai, 91 * latai, 17 * latai, 89 * latai, 7 * latai, 84 * latai);
  noralie.bezierCurveTo(1 * latai, 77 * latai, 4 * latai, 73 * latai, 7 * latai, 60 * latai);
  noralie.bezierCurveTo(11 * latai, 50 * latai, 5 * latai, 32 * latai, 15 * latai, 27 * latai);
  noralie.bezierCurveTo(26 * latai, 18 * latai, 26 * latai, 24 * latai, 31 * latai, 10 * latai);
  noralie.closePath();
  fill_path(noralie, angeleta[0], angeleta[1], 4);
  return yandier;
}
function create_verified(linna, deiana) {
  var nohea = document.createElement("canvas");
  var aryah = nohea.getContext("2d");
  nohea.width = 60 * linna;
  nohea.height = 60 * linna;
  aryah.translate(-25 * linna, -25 * linna);
  aryah.translate(0, 5 * linna);
  aryah.beginPath();
  aryah.lineCap = "round";
  aryah.lineJoin = "round";
  aryah.moveTo(24 * linna, 50 * linna);
  aryah.bezierCurveTo(32.5 * linna, 54.5 * linna, 32.5 * linna, 54.5 * linna, 41 * linna, 59 * linna);
  aryah.bezierCurveTo(57 * linna, 47 * linna, 57 * linna, 47 * linna, 73 * linna, 35 * linna);
  aryah.bezierCurveTo(57 * linna, 53 * linna, 57 * linna, 53 * linna, 41 * linna, 71 * linna);
  aryah.closePath();
  fill_path(aryah, deiana[0]);
  aryah.translate(0, -5 * linna);
  aryah.beginPath();
  aryah.lineCap = "round";
  aryah.lineJoin = "round";
  aryah.moveTo(24 * linna, 50 * linna);
  aryah.bezierCurveTo(32.5 * linna, 54.5 * linna, 32.5 * linna, 54.5 * linna, 41 * linna, 59 * linna);
  aryah.bezierCurveTo(57 * linna, 47 * linna, 57 * linna, 47 * linna, 73 * linna, 35 * linna);
  aryah.bezierCurveTo(57 * linna, 53 * linna, 57 * linna, 53 * linna, 41 * linna, 71 * linna);
  aryah.closePath();
  fill_path(aryah, deiana[1]);
  return nohea;
}
function create_earmuff(darynne, gequan, tremarion) {
  var leda = document.createElement("canvas");
  var ronnal = leda.getContext("2d");
  leda.width = 151 * darynne;
  leda.height = 80 * darynne;
  ronnal.beginPath();
  ronnal.lineCap = "round";
  ronnal.lineJoin = "round";
  ronnal.moveTo(133 * darynne, 54 * darynne);
  ronnal.bezierCurveTo(136 * darynne, 18 * darynne, 129 * darynne, 18 * darynne, 114 * darynne, 13 * darynne);
  ronnal.bezierCurveTo(51 * darynne, 0 * darynne, 36 * darynne, 16 * darynne, 34 * darynne, 16 * darynne);
  ronnal.bezierCurveTo(8 * darynne, 28 * darynne, 22 * darynne, 56 * darynne, 21 * darynne, 57 * darynne);
  ronnal.closePath();
  fill_path(ronnal, tremarion[2], tremarion[3], 4);
  ronnal.beginPath();
  ronnal.lineCap = "round";
  ronnal.lineJoin = "round";
  ronnal.moveTo(130 * darynne, 40 * darynne);
  ronnal.bezierCurveTo(132 * darynne, 35 * darynne, 132 * darynne, 30 * darynne, 132 * darynne, 29 * darynne);
  ronnal.bezierCurveTo(145 * darynne, 38 * darynne, 144 * darynne, 43 * darynne, 137 * darynne, 54 * darynne);
  ronnal.closePath();
  fill_path(ronnal, tremarion[0], tremarion[1], 4);
  ronnal.beginPath();
  ronnal.lineCap = "round";
  ronnal.lineJoin = "round";
  ronnal.moveTo(20 * darynne, 33 * darynne);
  ronnal.bezierCurveTo(24 * darynne, 44 * darynne, 215 * darynne, 39 * darynne, 23 * darynne, 44 * darynne);
  ronnal.bezierCurveTo(19 * darynne, 49 * darynne, 19 * darynne, 49 * darynne, 15 * darynne, 54 * darynne);
  ronnal.bezierCurveTo(4 * darynne, 43 * darynne, 10 * darynne, 35 * darynne, 20 * darynne, 32 * darynne);
  ronnal.closePath();
  fill_path(ronnal, tremarion[0], tremarion[1], 4);
  ronnal.beginPath();
  ronnal.lineCap = "round";
  ronnal.lineJoin = "round";
  ronnal.moveTo(18 * darynne, 52 * darynne);
  ronnal.bezierCurveTo(24 * darynne, 31 * darynne, 34 * darynne, 25 * darynne, 75 * darynne, 23 * darynne);
  ronnal.bezierCurveTo(130 * darynne, 24 * darynne, 129 * darynne, 32 * darynne, 134 * darynne, 51 * darynne);
  ronnal.bezierCurveTo(138 * darynne, 70 * darynne, 126 * darynne, 72 * darynne, 90 * darynne, 73 * darynne);
  ronnal.bezierCurveTo(18 * darynne, 72 * darynne, 15 * darynne, 68 * darynne, 18 * darynne, 54 * darynne);
  ronnal.closePath();
  fill_path(ronnal, tremarion[0], tremarion[1], 4);
  return leda;
}
function create_cap_scarf(drelan, senchal, dipali) {
  var zaevyn = document.createElement("canvas");
  var zyeir = zaevyn.getContext("2d");
  zaevyn.width = 138 * drelan;
  zaevyn.height = 133 * drelan;
  zyeir.globalAlpha = senchal ? .3 : 1;
  zyeir.translate(0, 5 * drelan);
  zyeir.beginPath();
  zyeir.lineCap = "round";
  zyeir.lineJoin = "round";
  zyeir.moveTo(26 * drelan, 79.640625 * drelan);
  zyeir.bezierCurveTo(13 * drelan, 84.640625 * drelan, 9 * drelan, 86.640625 * drelan, 7 * drelan, 78.640625 * drelan);
  zyeir.bezierCurveTo(6 * drelan, 69.640625 * drelan, 15 * drelan, 67.640625 * drelan, 31 * drelan, 62.640625 * drelan);
  zyeir.bezierCurveTo(63 * drelan, 55.640625 * drelan, 85 * drelan, 57.640625 * drelan, 104 * drelan, 63.640625 * drelan);
  zyeir.bezierCurveTo(131 * drelan, 69.640625 * drelan, 132 * drelan, 71.640625 * drelan, 131 * drelan, 78.640625 * drelan);
  zyeir.bezierCurveTo(131 * drelan, 91.640625 * drelan, 112 * drelan, 80.640625 * drelan, 91 * drelan, 75.640625 * drelan);
  zyeir.bezierCurveTo(51 * drelan, 70.640625 * drelan, 45 * drelan, 74.640625 * drelan, 28 * drelan, 78.640625 * drelan);
  zyeir.closePath();
  fill_path(zyeir, dipali[0]);
  zyeir.beginPath();
  zyeir.lineCap = "round";
  zyeir.lineJoin = "round";
  zyeir.moveTo(8 * drelan, 82.640625 * drelan);
  zyeir.bezierCurveTo(40 * drelan, 107.640625 * drelan, 53 * drelan, 104.640625 * drelan, 67 * drelan, 106.640625 * drelan);
  zyeir.bezierCurveTo(101 * drelan, 103.640625 * drelan, 117 * drelan, 93.640625 * drelan, 127 * drelan, 84.640625 * drelan);
  zyeir.bezierCurveTo(135 * drelan, 95.640625 * drelan, 131 * drelan, 107.640625 * drelan, 110 * drelan, 118.640625 * drelan);
  zyeir.bezierCurveTo(78 * drelan, 129.640625 * drelan, 67 * drelan, 130.640625 * drelan, 27 * drelan, 119.640625 * drelan);
  zyeir.bezierCurveTo(0 * drelan, 105.640625 * drelan, 8 * drelan, 83.640625 * drelan, 10 * drelan, 84.640625 * drelan);
  zyeir.closePath();
  fill_path(zyeir, dipali[0]);
  zyeir.globalAlpha = 1;
  zyeir.translate(0, -5 * drelan);
  zyeir.beginPath();
  zyeir.lineCap = "round";
  zyeir.lineJoin = "round";
  zyeir.moveTo(8 * drelan, 73.640625 * drelan);
  zyeir.bezierCurveTo(7 * drelan, 23.640625 * drelan, 33 * drelan, 19.640625 * drelan, 71 * drelan, 17.640625 * drelan);
  zyeir.bezierCurveTo(129 * drelan, 19.640625 * drelan, 130 * drelan, 45.640625 * drelan, 130 * drelan, 76.640625 * drelan);
  zyeir.bezierCurveTo(90 * drelan, 63.640625 * drelan, 85 * drelan, 63.640625 * drelan, 73 * drelan, 63.640625 * drelan);
  zyeir.bezierCurveTo(38 * drelan, 63.640625 * drelan, 33 * drelan, 66.640625 * drelan, 8 * drelan, 73.640625 * drelan);
  zyeir.closePath();
  fill_path(zyeir, dipali[1], dipali[2], 4 * drelan);
  zyeir.beginPath();
  zyeir.lineCap = "round";
  zyeir.lineJoin = "round";
  zyeir.moveTo(72 * drelan, 28.640625 * drelan);
  zyeir.bezierCurveTo(51 * drelan, 25.640625 * drelan, 56 * drelan, 7.640625 * drelan, 70 * drelan, 5.640625 * drelan);
  zyeir.bezierCurveTo(94 * drelan, 7.640625 * drelan, 87 * drelan, 29.640625 * drelan, 72 * drelan, 28.640625 * drelan);
  zyeir.closePath();
  fill_path(zyeir, dipali[3], dipali[2], 4 * drelan);
  zyeir.beginPath();
  zyeir.lineCap = "round";
  zyeir.lineJoin = "round";
  zyeir.moveTo(51 * drelan, 26.640625 * drelan);
  zyeir.bezierCurveTo(42 * drelan, 29.640625 * drelan, 43 * drelan, 31.640625 * drelan, 42 * drelan, 37.640625 * drelan);
  fill_path(zyeir, undefined, dipali[2], 4 * drelan);
  zyeir.beginPath();
  zyeir.lineCap = "round";
  zyeir.lineJoin = "round";
  zyeir.moveTo(90 * drelan, 26.640625 * drelan);
  zyeir.bezierCurveTo(100 * drelan, 28.640625 * drelan, 98 * drelan, 34.640625 * drelan, 99 * drelan, 38.640625 * drelan);
  fill_path(zyeir, undefined, dipali[2], 4 * drelan);
  zyeir.beginPath();
  zyeir.lineCap = "round";
  zyeir.lineJoin = "round";
  zyeir.moveTo(26 * drelan, 79.640625 * drelan);
  zyeir.bezierCurveTo(13 * drelan, 84.640625 * drelan, 9 * drelan, 86.640625 * drelan, 7 * drelan, 78.640625 * drelan);
  zyeir.bezierCurveTo(6 * drelan, 69.640625 * drelan, 15 * drelan, 67.640625 * drelan, 31 * drelan, 62.640625 * drelan);
  zyeir.bezierCurveTo(63 * drelan, 55.640625 * drelan, 85 * drelan, 57.640625 * drelan, 104 * drelan, 63.640625 * drelan);
  zyeir.bezierCurveTo(131 * drelan, 69.640625 * drelan, 132 * drelan, 71.640625 * drelan, 131 * drelan, 78.640625 * drelan);
  zyeir.bezierCurveTo(131 * drelan, 91.640625 * drelan, 112 * drelan, 80.640625 * drelan, 91 * drelan, 75.640625 * drelan);
  zyeir.bezierCurveTo(51 * drelan, 70.640625 * drelan, 45 * drelan, 74.640625 * drelan, 28 * drelan, 78.640625 * drelan);
  zyeir.closePath();
  fill_path(zyeir, dipali[3], dipali[4], 4 * drelan);
  zyeir.beginPath();
  zyeir.lineCap = "round";
  zyeir.lineJoin = "round";
  zyeir.moveTo(8 * drelan, 82.640625 * drelan);
  zyeir.bezierCurveTo(40 * drelan, 107.640625 * drelan, 53 * drelan, 104.640625 * drelan, 67 * drelan, 106.640625 * drelan);
  zyeir.bezierCurveTo(101 * drelan, 103.640625 * drelan, 117 * drelan, 93.640625 * drelan, 127 * drelan, 84.640625 * drelan);
  zyeir.bezierCurveTo(135 * drelan, 95.640625 * drelan, 131 * drelan, 107.640625 * drelan, 110 * drelan, 118.640625 * drelan);
  zyeir.bezierCurveTo(78 * drelan, 129.640625 * drelan, 67 * drelan, 130.640625 * drelan, 27 * drelan, 119.640625 * drelan);
  zyeir.bezierCurveTo(0 * drelan, 105.640625 * drelan, 8 * drelan, 83.640625 * drelan, 10 * drelan, 84.640625 * drelan);
  zyeir.closePath();
  fill_path(zyeir, dipali[3], dipali[4], 4 * drelan);
  return zaevyn;
}
function create_spike(milauni, amith, toru) {
  var jamarreon = document.createElement("canvas");
  var ahjanae = jamarreon.getContext("2d");
  var jayanthony = milauni * 170;
  var syriana = milauni * 172;
  var arlyne = jayanthony / 2;
  var regenald = syriana / 2;
  jamarreon.width = jayanthony;
  jamarreon.height = syriana;
  ahjanae.translate(arlyne, regenald + 7 * milauni);
  ahjanae.globalAlpha = amith ? .5 : 0;
  circle(ahjanae, 0, 0, 60 * milauni);
  fill_path(ahjanae, toru[0]);
  ahjanae.globalAlpha = 1;
  ahjanae.translate(0, -7 * milauni);
  ahjanae.save();
  for (var dariusz = 0; dariusz < 10; dariusz++) {
    ahjanae.rotate(Math.PI / 5);
    ahjanae.save();
    ahjanae.translate(65 * milauni, 0);
    round_regular_polygon(ahjanae, 3, 20 * milauni, 4 * milauni);
    fill_path(ahjanae, toru[1], toru[2], 4 * milauni);
    ahjanae.restore();
  }
  ahjanae.restore();
  circle(ahjanae, 0, 0, 60 * milauni, 0);
  fill_path(ahjanae, toru[3], toru[4], 4 * milauni);
  circle(ahjanae, 0, 0, 40 * milauni);
  fill_path(ahjanae, toru[5]);
  circle(ahjanae, 0, 0, 25 * milauni);
  fill_path(ahjanae, toru[6], toru[7], 8 * milauni);
  return jamarreon;
}
function create_spiketimer(jaade, shakera) {
  var detrina = document.createElement("canvas");
  var khory = detrina.getContext("2d");
  var moreno = jaade * 170;
  var eleesia = jaade * 172;
  var dajohn = moreno / 2;
  var gwyned = eleesia / 2;
  detrina.width = moreno;
  detrina.height = eleesia;
  khory.translate(dajohn, gwyned);
  khory.save();
  for (var avajade = 0; avajade < 10; avajade++) {
    khory.rotate(Math.PI / 5);
    khory.save();
    khory.translate(65 * jaade, 0);
    round_regular_polygon(khory, 3, 18 * jaade, 4 * jaade);
    fill_path(khory, shakera[0]);
    khory.restore();
  }
  khory.restore();
  circle(khory, 0, 0, 40 * jaade, 0);
  fill_path(khory, undefined, shakera[0], 6 * jaade);
  circle(khory, 0, 0, 20 * jaade, 0);
  fill_path(khory, shakera[0]);
  return detrina;
}
function create_spike_stone(samuel, decarlos, lamaar) {
  var keyandrea = document.createElement("canvas");
  var isibella = keyandrea.getContext("2d");
  keyandrea.width = 170 * samuel;
  keyandrea.height = 170 * samuel;
  isibella.globalAlpha = decarlos ? .5 : 1;
  isibella.translate(0, 5 * samuel);
  isibella.save();
  isibella.translate(85 * samuel, 88 * samuel);
  isibella.rotate(1.4);
  round_regular_polygon(isibella, 7, 60 * samuel, 10 * samuel);
  isibella.restore();
  fill_path(isibella, lamaar[0]);
  isibella.globalAlpha = 1;
  isibella.translate(85 * samuel, 80 * samuel);
  for (var tresure = 0; tresure < 10; tresure++) {
    isibella.rotate(Math.PI / 5);
    isibella.save();
    isibella.translate(65 * samuel, 0);
    round_regular_polygon(isibella, 3, 21 * samuel, 4 * samuel);
    fill_path(isibella, lamaar[1], lamaar[2], 4 * samuel);
    isibella.restore();
  }
  isibella.save();
  isibella.translate(0 * samuel, 0 * samuel);
  isibella.rotate(1.4);
  round_regular_polygon(isibella, 7, 60 * samuel, 10 * samuel);
  fill_path(isibella, lamaar[3], lamaar[4], 4 * samuel);
  isibella.rotate(.64);
  round_regular_polygon(isibella, 7, 40 * samuel, 10 * samuel);
  fill_path(isibella, lamaar[5], lamaar[6], 4 * samuel);
  isibella.rotate(.12);
  round_regular_polygon(isibella, 7, 23 * samuel, 5 * samuel);
  isibella.restore();
  fill_path(isibella, lamaar[7]);
  return keyandrea;
}
function create_spike_gold(shamire, kenyon, manouchka) {
  var zahava = document.createElement("canvas");
  var bobbyjo = zahava.getContext("2d");
  zahava.width = 170 * shamire;
  zahava.height = 170 * shamire;
  bobbyjo.globalAlpha = kenyon ? .5 : 1;
  bobbyjo.translate(0, 3 * shamire);
  bobbyjo.save();
  bobbyjo.translate(85 * shamire, 95 * shamire);
  bobbyjo.rotate(1.4);
  round_regular_polygon(bobbyjo, 7, 60 * shamire, 10 * shamire);
  bobbyjo.restore();
  fill_path(bobbyjo, manouchka[0]);
  bobbyjo.globalAlpha = 1;
  bobbyjo.translate(85 * shamire, 82 * shamire);
  for (var rozae = 0; rozae < 10; rozae++) {
    bobbyjo.rotate(Math.PI / 5);
    bobbyjo.save();
    bobbyjo.translate(65 * shamire, 0);
    round_regular_polygon(bobbyjo, 3, 21 * shamire, 4 * shamire);
    fill_path(bobbyjo, manouchka[1], manouchka[2], 4 * shamire);
    bobbyjo.restore();
  }
  bobbyjo.save();
  bobbyjo.translate(0 * shamire, 0 * shamire);
  bobbyjo.rotate(1);
  round_regular_polygon(bobbyjo, 8, 60 * shamire, 10 * shamire);
  fill_path(bobbyjo, manouchka[3], manouchka[4], 4 * shamire);
  bobbyjo.rotate(.56);
  round_regular_polygon(bobbyjo, 8, 40 * shamire, 10 * shamire);
  fill_path(bobbyjo, manouchka[5], manouchka[6], 4 * shamire);
  bobbyjo.rotate(.28);
  round_regular_polygon(bobbyjo, 8, 28 * shamire, 8 * shamire);
  fill_path(bobbyjo, manouchka[7]);
  bobbyjo.restore();
  return zahava;
}
function create_spike_diamond(jannia, chie, kaleis) {
  var sumukh = document.createElement("canvas");
  var ivell = sumukh.getContext("2d");
  sumukh.width = 170 * jannia;
  sumukh.height = 170 * jannia;
  ivell.translate(0, 3 * jannia);
  ivell.globalAlpha = chie ? .5 : 1;
  ivell.save();
  ivell.translate(85 * jannia, 95 * jannia);
  ivell.rotate(1.4);
  round_regular_polygon(ivell, 7, 60 * jannia, 10 * jannia);
  ivell.restore();
  fill_path(ivell, kaleis[0]);
  ivell.globalAlpha = 1;
  ivell.translate(85 * jannia, 82 * jannia);
  for (var eldyn = 0; eldyn < 10; eldyn++) {
    ivell.rotate(Math.PI / 5);
    ivell.save();
    ivell.translate(65 * jannia, 0);
    round_regular_polygon(ivell, 3, 21 * jannia, 4 * jannia);
    fill_path(ivell, kaleis[1], kaleis[2], 4 * jannia);
    ivell.restore();
  }
  ivell.save();
  ivell.translate(0 * jannia, 0 * jannia);
  ivell.rotate(.2);
  round_regular_polygon(ivell, 9, 60 * jannia, 10 * jannia);
  fill_path(ivell, kaleis[3], kaleis[4], 4 * jannia);
  ivell.rotate(-0.32);
  round_regular_polygon(ivell, 9, 38 * jannia, 10 * jannia);
  fill_path(ivell, kaleis[5], kaleis[6], 4 * jannia);
  ivell.rotate(.68);
  round_regular_polygon(ivell, 9, 20 * jannia, 8 * jannia);
  fill_path(ivell, kaleis[7], kaleis[8], 6 * jannia);
  ivell.restore();
  return sumukh;
}
function create_hammer(khol, shastelin, burford) {
  var jurnie = document.createElement("canvas");
  var kerrianne = jurnie.getContext("2d");
  jurnie.width = 69 * khol;
  jurnie.height = 120 * khol;
  kerrianne.globalAlpha = shastelin ? .5 : 1;
  kerrianne.save();
  kerrianne.translate(30 * khol, 84 * khol);
  round_rect(kerrianne, -6 * khol, -66.5 * khol, 8 * khol, 100 * khol, 10 * khol);
  kerrianne.restore();
  fill_path(kerrianne, burford[0]);
  kerrianne.save();
  kerrianne.translate(30 * khol, 45 * khol);
  round_rect(kerrianne, -9.5 * khol, -6.5 * khol, 16 * khol, 13 * khol, 10 * khol);
  kerrianne.restore();
  fill_path(kerrianne, burford[0]);
  kerrianne.save();
  kerrianne.translate(30 * khol, 17 * khol);
  round_rect(kerrianne, -7.5 * khol, -5.5 * khol, 12 * khol, 11 * khol, 10 * khol);
  kerrianne.restore();
  fill_path(kerrianne, burford[0]);
  kerrianne.save();
  kerrianne.translate(30 * khol, 31 * khol);
  round_rect(kerrianne, -26 * khol, -14.5 * khol, 52 * khol, 29 * khol, 5 * khol);
  kerrianne.restore();
  fill_path(kerrianne, burford[0]);
  kerrianne.globalAlpha = 1;
  kerrianne.save();
  kerrianne.translate(36 * khol, 79.140625 * khol);
  round_rect(kerrianne, -6 * khol, -66.5 * khol, 8 * khol, 100 * khol, 10 * khol);
  kerrianne.restore();
  fill_path(kerrianne, burford[1], burford[2], 3 * khol);
  kerrianne.save();
  kerrianne.translate(35 * khol, 40.140625 * khol);
  round_rect(kerrianne, -9.5 * khol, -6.5 * khol, 16 * khol, 13 * khol, 10 * khol);
  kerrianne.restore();
  fill_path(kerrianne, burford[3], burford[4], 3 * khol);
  kerrianne.save();
  kerrianne.translate(35 * khol, 12.140625 * khol);
  round_rect(kerrianne, -7.5 * khol, -5.5 * khol, 12 * khol, 11 * khol, 10 * khol);
  kerrianne.restore();
  fill_path(kerrianne, burford[3], burford[4], 3 * khol);
  kerrianne.save();
  kerrianne.translate(34.5 * khol, 26.140625 * khol);
  round_rect(kerrianne, -26 * khol, -14.5 * khol, 52 * khol, 29 * khol, 5 * khol);
  kerrianne.restore();
  fill_path(kerrianne, burford[3], burford[4], 3 * khol);
  return jurnie;
}
function create_clock_day(shiyanne) {
  var rosebelle = document.createElement("canvas");
  var ziyan = rosebelle.getContext("2d");
  rosebelle.width = 321 * shiyanne;
  rosebelle.height = 345 * shiyanne;
  ziyan.translate(0, 5 * shiyanne);
  ziyan.translate(0, 20 * shiyanne);
  circle(ziyan, 160.5 * shiyanne, 159.5 * shiyanne, 156.39595138242822 * shiyanne);
  fill_path(ziyan, "#322413", "#322413", 4 * shiyanne);
  ziyan.translate(0, -20 * shiyanne);
  circle(ziyan, 160.5 * shiyanne, 159.5 * shiyanne, 156.39595138242822 * shiyanne);
  fill_path(ziyan, "#392C16", "#5E3E1A", 10 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(31.999969482421875 * shiyanne, 163.07290649414062 * shiyanne);
  ziyan.bezierCurveTo(22.999969482421875 * shiyanne, 67.07290649414062 * shiyanne, 106 * shiyanne, 20.072906494140625 * shiyanne, 162 * shiyanne, 23.072906494140625 * shiyanne);
  ziyan.bezierCurveTo(269.9999694824219 * shiyanne, 31.072906494140625 * shiyanne, 292.9999694824219 * shiyanne, 120.07290649414062 * shiyanne, 294.9999694824219 * shiyanne, 161.07290649414062 * shiyanne);
  ziyan.bezierCurveTo(165.49996948242188 * shiyanne, 162.07290649414062 * shiyanne, 165.49996948242188 * shiyanne, 162.07290649414062 * shiyanne, 35.999969482421875 * shiyanne, 163.07290649414062 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, "#12432D");
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(32.999969482421875 * shiyanne, 165.07290649414062 * shiyanne);
  ziyan.bezierCurveTo(16.999969482421875 * shiyanne, 221.07290649414062 * shiyanne, 85 * shiyanne, 289.0729064941406 * shiyanne, 156 * shiyanne, 294.0729064941406 * shiyanne);
  ziyan.bezierCurveTo(263.9999694824219 * shiyanne, 293.0729064941406 * shiyanne, 295.9999694824219 * shiyanne, 199.07290649414062 * shiyanne, 294.9999694824219 * shiyanne, 159.07290649414062 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, "#3A2A0D");
  circle(ziyan, 161 * shiyanne, 158.07290649414062 * shiyanne, 133.4053971921676 * shiyanne);
  fill_path(ziyan, undefined, "#5E3E1A", 10 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(31.999969482421875 * shiyanne, 161.62844848632812 * shiyanne);
  ziyan.bezierCurveTo(162.49996948242188 * shiyanne, 161.62844848632812 * shiyanne, 162.49996948242188 * shiyanne, 161.62844848632812 * shiyanne, 292.9999694824219 * shiyanne, 161.62844848632812 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#5E3E1A", 12 * shiyanne);
  ziyan.translate(0, 8 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(66 * shiyanne, 158.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(86 * shiyanne, 158.29513549804688 * shiyanne, 86 * shiyanne, 158.29513549804688 * shiyanne, 106 * shiyanne, 158.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#c7a726", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(57.999969482421875 * shiyanne, 117.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(85 * shiyanne, 128.29513549804688 * shiyanne, 85 * shiyanne, 128.29513549804688 * shiyanne, 113 * shiyanne, 139.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#c7a726", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(95 * shiyanne, 90.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(112 * shiyanne, 105.79513549804688 * shiyanne, 112 * shiyanne, 105.79513549804688 * shiyanne, 129 * shiyanne, 121.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#c7a726", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(116 * shiyanne, 52.850677490234375 * shiyanne);
  ziyan.bezierCurveTo(130 * shiyanne, 83.85067749023438 * shiyanne, 130 * shiyanne, 83.85067749023438 * shiyanne, 144 * shiyanne, 114.85067749023438 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#c7a726", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(159 * shiyanne, 61.295135498046875 * shiyanne);
  ziyan.bezierCurveTo(160.49996948242188 * shiyanne, 92.29513549804688 * shiyanne, 160.49996948242188 * shiyanne, 92.29513549804688 * shiyanne, 160 * shiyanne, 123.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#c7a726", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(203 * shiyanne, 51.295135498046875 * shiyanne);
  ziyan.bezierCurveTo(190.49996948242188 * shiyanne, 83.29513549804688 * shiyanne, 190.49996948242188 * shiyanne, 83.29513549804688 * shiyanne, 176 * shiyanne, 115.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#c7a726", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(225 * shiyanne, 89.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(210.49996948242188 * shiyanne, 104.79513549804688 * shiyanne, 210.49996948242188 * shiyanne, 104.79513549804688 * shiyanne, 194 * shiyanne, 120.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#c7a726", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(266.9999694824219 * shiyanne, 112.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(233.49996948242188 * shiyanne, 127.29513549804688 * shiyanne, 233.49996948242188 * shiyanne, 127.29513549804688 * shiyanne, 199 * shiyanne, 142.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#c7a726", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(256.9999694824219 * shiyanne, 155.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(238.49996948242188 * shiyanne, 156.29513549804688 * shiyanne, 238.49996948242188 * shiyanne, 156.29513549804688 * shiyanne, 219 * shiyanne, 157.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#c7a726", 12 * shiyanne);
  ziyan.translate(0, -8 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(66 * shiyanne, 158.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(86 * shiyanne, 158.29513549804688 * shiyanne, 86 * shiyanne, 158.29513549804688 * shiyanne, 106 * shiyanne, 158.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#EDCE4F", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(57.999969482421875 * shiyanne, 117.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(85 * shiyanne, 128.29513549804688 * shiyanne, 85 * shiyanne, 128.29513549804688 * shiyanne, 113 * shiyanne, 139.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#EDCE4F", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(95 * shiyanne, 90.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(112 * shiyanne, 105.79513549804688 * shiyanne, 112 * shiyanne, 105.79513549804688 * shiyanne, 129 * shiyanne, 121.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#EDCE4F", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(116 * shiyanne, 52.850677490234375 * shiyanne);
  ziyan.bezierCurveTo(130 * shiyanne, 83.85067749023438 * shiyanne, 130 * shiyanne, 83.85067749023438 * shiyanne, 144 * shiyanne, 114.85067749023438 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#EDCE4F", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(159 * shiyanne, 61.295135498046875 * shiyanne);
  ziyan.bezierCurveTo(160.49996948242188 * shiyanne, 92.29513549804688 * shiyanne, 160.49996948242188 * shiyanne, 92.29513549804688 * shiyanne, 160 * shiyanne, 123.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#EDCE4F", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(203 * shiyanne, 51.295135498046875 * shiyanne);
  ziyan.bezierCurveTo(190.49996948242188 * shiyanne, 83.29513549804688 * shiyanne, 190.49996948242188 * shiyanne, 83.29513549804688 * shiyanne, 176 * shiyanne, 115.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#EDCE4F", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(225 * shiyanne, 89.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(210.49996948242188 * shiyanne, 104.79513549804688 * shiyanne, 210.49996948242188 * shiyanne, 104.79513549804688 * shiyanne, 194 * shiyanne, 120.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#EDCE4F", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(266.9999694824219 * shiyanne, 112.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(233.49996948242188 * shiyanne, 127.29513549804688 * shiyanne, 233.49996948242188 * shiyanne, 127.29513549804688 * shiyanne, 199 * shiyanne, 142.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#EDCE4F", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(256.9999694824219 * shiyanne, 155.29513549804688 * shiyanne);
  ziyan.bezierCurveTo(238.49996948242188 * shiyanne, 156.29513549804688 * shiyanne, 238.49996948242188 * shiyanne, 156.29513549804688 * shiyanne, 219 * shiyanne, 157.29513549804688 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, undefined, "#EDCE4F", 12 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(94.00003051757812 * shiyanne, 164.40341186523438 * shiyanne);
  ziyan.bezierCurveTo(162.50003051757812 * shiyanne, 164.40341186523438 * shiyanne, 230.00003051757812 * shiyanne, 165.40341186523438 * shiyanne, 231.00003051757812 * shiyanne, 164.40341186523438 * shiyanne);
  ziyan.bezierCurveTo(214.00003051757812 * shiyanne, 267.4034118652344 * shiyanne, 92.00003051757812 * shiyanne, 243.40341186523438 * shiyanne, 93.00003051757812 * shiyanne, 165.40341186523438 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, "#704618", "#5D3D1A", 8 * shiyanne);
  ziyan.beginPath();
  ziyan.lineCap = "round";
  ziyan.lineJoin = "round";
  ziyan.moveTo(96 * shiyanne, 166 * shiyanne);
  ziyan.bezierCurveTo(88 * shiyanne, 117 * shiyanne, 129 * shiyanne, 92 * shiyanne, 161 * shiyanne, 91 * shiyanne);
  ziyan.bezierCurveTo(201 * shiyanne, 90 * shiyanne, 223 * shiyanne, 121 * shiyanne, 230 * shiyanne, 161 * shiyanne);
  ziyan.closePath();
  fill_path(ziyan, "#ECBE35", "#EDCE4F", 8 * shiyanne);
  circle(ziyan, 160.00003051757812 * shiyanne, 166.49432373046875 * shiyanne, 28.30194339616981 * shiyanne);
  fill_path(ziyan, "#392C16", "#5E3E1A", 10 * shiyanne);
  return rosebelle;
}
function create_clock_night(reeselyn) {
  var jacquolyn = document.createElement("canvas");
  var dylon = jacquolyn.getContext("2d");
  jacquolyn.width = 321 * reeselyn;
  jacquolyn.height = 345 * reeselyn;
  dylon.translate(0, 5 * reeselyn);
  dylon.translate(0, 20 * reeselyn);
  circle(dylon, 160.5 * reeselyn, 159.5 * reeselyn, 156.39595138242822 * reeselyn);
  fill_path(dylon, "#322413", "#322413", 4 * reeselyn);
  dylon.translate(0, -20 * reeselyn);
  circle(dylon, 160.5 * reeselyn, 159.5 * reeselyn, 156.39595138242822 * reeselyn);
  fill_path(dylon, "#392C16", "#5E3E1A", 10 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(31.999969482421875 * reeselyn, 163.07290649414062 * reeselyn);
  dylon.bezierCurveTo(22.999969482421875 * reeselyn, 67.07290649414062 * reeselyn, 106 * reeselyn, 20.072906494140625 * reeselyn, 162 * reeselyn, 23.072906494140625 * reeselyn);
  dylon.bezierCurveTo(269.9999694824219 * reeselyn, 31.072906494140625 * reeselyn, 292.9999694824219 * reeselyn, 120.07290649414062 * reeselyn, 294.9999694824219 * reeselyn, 161.07290649414062 * reeselyn);
  dylon.bezierCurveTo(165.49996948242188 * reeselyn, 162.07290649414062 * reeselyn, 165.49996948242188 * reeselyn, 162.07290649414062 * reeselyn, 35.999969482421875 * reeselyn, 163.07290649414062 * reeselyn);
  dylon.closePath();
  fill_path(dylon, "#3A2A0D");
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(32.999969482421875 * reeselyn, 165.07290649414062 * reeselyn);
  dylon.bezierCurveTo(16.999969482421875 * reeselyn, 221.07290649414062 * reeselyn, 85 * reeselyn, 289.0729064941406 * reeselyn, 156 * reeselyn, 294.0729064941406 * reeselyn);
  dylon.bezierCurveTo(263.9999694824219 * reeselyn, 293.0729064941406 * reeselyn, 295.9999694824219 * reeselyn, 199.07290649414062 * reeselyn, 294.9999694824219 * reeselyn, 159.07290649414062 * reeselyn);
  dylon.closePath();
  fill_path(dylon, "#071A1B");
  circle(dylon, 161 * reeselyn, 158.07290649414062 * reeselyn, 133.4053971921676 * reeselyn);
  fill_path(dylon, undefined, "#5E3E1A", 10 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(31.999969482421875 * reeselyn, 161.62844848632812 * reeselyn);
  dylon.bezierCurveTo(162.49996948242188 * reeselyn, 161.62844848632812 * reeselyn, 162.49996948242188 * reeselyn, 161.62844848632812 * reeselyn, 292.9999694824219 * reeselyn, 161.62844848632812 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3E1A", 12 * reeselyn);
  dylon.translate(0, 8 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(66 * reeselyn, 158.29513549804688 * reeselyn);
  dylon.bezierCurveTo(86 * reeselyn, 158.29513549804688 * reeselyn, 86 * reeselyn, 158.29513549804688 * reeselyn, 106 * reeselyn, 158.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#281C08", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(57.999969482421875 * reeselyn, 117.29513549804688 * reeselyn);
  dylon.bezierCurveTo(85 * reeselyn, 128.29513549804688 * reeselyn, 85 * reeselyn, 128.29513549804688 * reeselyn, 113 * reeselyn, 139.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#281C08", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(95 * reeselyn, 90.29513549804688 * reeselyn);
  dylon.bezierCurveTo(112 * reeselyn, 105.79513549804688 * reeselyn, 112 * reeselyn, 105.79513549804688 * reeselyn, 129 * reeselyn, 121.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#281C08", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(116 * reeselyn, 52.850677490234375 * reeselyn);
  dylon.bezierCurveTo(130 * reeselyn, 83.85067749023438 * reeselyn, 130 * reeselyn, 83.85067749023438 * reeselyn, 144 * reeselyn, 114.85067749023438 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#281C08", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(159 * reeselyn, 61.295135498046875 * reeselyn);
  dylon.bezierCurveTo(160.49996948242188 * reeselyn, 92.29513549804688 * reeselyn, 160.49996948242188 * reeselyn, 92.29513549804688 * reeselyn, 160 * reeselyn, 123.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#281C08", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(203 * reeselyn, 51.295135498046875 * reeselyn);
  dylon.bezierCurveTo(190.49996948242188 * reeselyn, 83.29513549804688 * reeselyn, 190.49996948242188 * reeselyn, 83.29513549804688 * reeselyn, 176 * reeselyn, 115.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#281C08", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(225 * reeselyn, 89.29513549804688 * reeselyn);
  dylon.bezierCurveTo(210.49996948242188 * reeselyn, 104.79513549804688 * reeselyn, 210.49996948242188 * reeselyn, 104.79513549804688 * reeselyn, 194 * reeselyn, 120.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#281C08", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(266.9999694824219 * reeselyn, 112.29513549804688 * reeselyn);
  dylon.bezierCurveTo(233.49996948242188 * reeselyn, 127.29513549804688 * reeselyn, 233.49996948242188 * reeselyn, 127.29513549804688 * reeselyn, 199 * reeselyn, 142.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#281C08", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(256.9999694824219 * reeselyn, 155.29513549804688 * reeselyn);
  dylon.bezierCurveTo(238.49996948242188 * reeselyn, 156.29513549804688 * reeselyn, 238.49996948242188 * reeselyn, 156.29513549804688 * reeselyn, 219 * reeselyn, 157.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#281C08", 12 * reeselyn);
  dylon.translate(0, -8 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(66 * reeselyn, 158.29513549804688 * reeselyn);
  dylon.bezierCurveTo(86 * reeselyn, 158.29513549804688 * reeselyn, 86 * reeselyn, 158.29513549804688 * reeselyn, 106 * reeselyn, 158.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3C10", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(57.999969482421875 * reeselyn, 117.29513549804688 * reeselyn);
  dylon.bezierCurveTo(85 * reeselyn, 128.29513549804688 * reeselyn, 85 * reeselyn, 128.29513549804688 * reeselyn, 113 * reeselyn, 139.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3C10", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(95 * reeselyn, 90.29513549804688 * reeselyn);
  dylon.bezierCurveTo(112 * reeselyn, 105.79513549804688 * reeselyn, 112 * reeselyn, 105.79513549804688 * reeselyn, 129 * reeselyn, 121.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3C10", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(116 * reeselyn, 52.850677490234375 * reeselyn);
  dylon.bezierCurveTo(130 * reeselyn, 83.85067749023438 * reeselyn, 130 * reeselyn, 83.85067749023438 * reeselyn, 144 * reeselyn, 114.85067749023438 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3C10", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(159 * reeselyn, 61.295135498046875 * reeselyn);
  dylon.bezierCurveTo(160.49996948242188 * reeselyn, 92.29513549804688 * reeselyn, 160.49996948242188 * reeselyn, 92.29513549804688 * reeselyn, 160 * reeselyn, 123.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3C10", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(203 * reeselyn, 51.295135498046875 * reeselyn);
  dylon.bezierCurveTo(190.49996948242188 * reeselyn, 83.29513549804688 * reeselyn, 190.49996948242188 * reeselyn, 83.29513549804688 * reeselyn, 176 * reeselyn, 115.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3C10", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(225 * reeselyn, 89.29513549804688 * reeselyn);
  dylon.bezierCurveTo(210.49996948242188 * reeselyn, 104.79513549804688 * reeselyn, 210.49996948242188 * reeselyn, 104.79513549804688 * reeselyn, 194 * reeselyn, 120.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3C10", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(266.9999694824219 * reeselyn, 112.29513549804688 * reeselyn);
  dylon.bezierCurveTo(233.49996948242188 * reeselyn, 127.29513549804688 * reeselyn, 233.49996948242188 * reeselyn, 127.29513549804688 * reeselyn, 199 * reeselyn, 142.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3C10", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(256.9999694824219 * reeselyn, 155.29513549804688 * reeselyn);
  dylon.bezierCurveTo(238.49996948242188 * reeselyn, 156.29513549804688 * reeselyn, 238.49996948242188 * reeselyn, 156.29513549804688 * reeselyn, 219 * reeselyn, 157.29513549804688 * reeselyn);
  dylon.closePath();
  fill_path(dylon, undefined, "#5E3C10", 12 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(96 * reeselyn, 166 * reeselyn);
  dylon.bezierCurveTo(88 * reeselyn, 117 * reeselyn, 129 * reeselyn, 92 * reeselyn, 161 * reeselyn, 91 * reeselyn);
  dylon.bezierCurveTo(201 * reeselyn, 90 * reeselyn, 223 * reeselyn, 121 * reeselyn, 230 * reeselyn, 161 * reeselyn);
  dylon.closePath();
  fill_path(dylon, "#704618", "#5D3D1A", 8 * reeselyn);
  dylon.beginPath();
  dylon.lineCap = "round";
  dylon.lineJoin = "round";
  dylon.moveTo(94.00003051757812 * reeselyn, 164.40341186523438 * reeselyn);
  dylon.bezierCurveTo(162.50003051757812 * reeselyn, 164.40341186523438 * reeselyn, 230.00003051757812 * reeselyn, 165.40341186523438 * reeselyn, 231.00003051757812 * reeselyn, 164.40341186523438 * reeselyn);
  dylon.bezierCurveTo(214.00003051757812 * reeselyn, 267.4034118652344 * reeselyn, 92.00003051757812 * reeselyn, 243.40341186523438 * reeselyn, 93.00003051757812 * reeselyn, 165.40341186523438 * reeselyn);
  dylon.closePath();
  fill_path(dylon, "#E1DDD5", "#EAE7E4", 8 * reeselyn);
  circle(dylon, 160.00003051757812 * reeselyn, 166.49432373046875 * reeselyn, 28.30194339616981 * reeselyn);
  fill_path(dylon, "#392C16", "#5E3E1A", 10 * reeselyn);
  return jacquolyn;
}
function create_arrow_clock(rix) {
  var socheat = document.createElement("canvas");
  var nicson = socheat.getContext("2d");
  socheat.width = 321 * rix;
  socheat.height = 345 * rix;
  nicson.translate(0, 5 * rix);
  circle(nicson, 161.00003051757812 * rix, 165.40341186523438 * rix, 20.808652046684813 * rix);
  fill_path(nicson, "#C09D6F", "#A37943", 10 * rix);
  nicson.beginPath();
  nicson.lineCap = "round";
  nicson.lineJoin = "round";
  nicson.moveTo(162.00003051757812 * rix, 48.403411865234375 * rix);
  nicson.bezierCurveTo(172.50003051757812 * rix, 67.40341186523438 * rix, 172.50003051757812 * rix, 67.40341186523438 * rix, 183.00003051757812 * rix, 86.40341186523438 * rix);
  nicson.bezierCurveTo(160.50003051757812 * rix, 86.40341186523438 * rix, 160.50003051757812 * rix, 86.40341186523438 * rix, 138.00003051757812 * rix, 86.40341186523438 * rix);
  nicson.closePath();
  fill_path(nicson, "#C09D6F", "#A37943", 10 * rix);
  nicson.save();
  nicson.translate(161.50003051757812 * rix, 117.90341186523438 * rix);
  round_rect(nicson, -5.5 * rix, -37.5 * rix, 11 * rix, 75 * rix, 10 * rix);
  nicson.restore();
  fill_path(nicson, "#C09D6F", "#A37943", 10 * rix);
  nicson.save();
  nicson.translate(162.00003051757812 * rix, 78.90341186523438 * rix);
  round_rect(nicson, -10 * rix, -5.5 * rix, 20 * rix, 11 * rix, 1 * rix);
  nicson.restore();
  fill_path(nicson, "#C09D6F");
  circle(nicson, 161.00003051757812 * rix, 163.6761474609375 * rix, 17.08800749063506 * rix);
  fill_path(nicson, "#C09D6F");
  return socheat;
}
function create_island(acacia, trevin, thrisha) {
  var janett = document.createElement("canvas"), elizet = janett.getContext("2d");
  if (thrisha == 0) {
    janett.width = 566 * acacia;
    janett.height = 429 * acacia;
    elizet.beginPath();
    elizet.lineCap = "round";
    elizet.lineJoin = "round";
    elizet.moveTo(312.625 * acacia, 39.046875 * acacia);
    elizet.bezierCurveTo(456.625 * acacia, 60.046875 * acacia, 521.625 * acacia, 134.046875 * acacia, 528.625 * acacia, 199.046875 * acacia);
    elizet.bezierCurveTo(540.625 * acacia, 298.046875 * acacia, 491.625 * acacia, 364.046875 * acacia, 405.625 * acacia, 394.046875 * acacia);
    elizet.bezierCurveTo(270.625 * acacia, 429.046875 * acacia, 182.625 * acacia, 395.046875 * acacia, 100.625 * acacia, 344.046875 * acacia);
    elizet.bezierCurveTo(15.625 * acacia, 283.046875 * acacia, 20.625 * acacia, 195.046875 * acacia, 33.625 * acacia, 158.046875 * acacia);
    elizet.bezierCurveTo(56.625 * acacia, 80.046875 * acacia, 102.625 * acacia, 46.046875 * acacia, 183.625 * acacia, 33.046875 * acacia);
    elizet.bezierCurveTo(225.625 * acacia, 25.046875 * acacia, 270.625 * acacia, 30.046875 * acacia, 312.625 * acacia, 39.046875 * acacia);
    elizet.closePath();
    fill_path(elizet, trevin[0]);
  } else {
    if (thrisha == 1) {
      var janett = document.createElement("canvas");
      var elizet = janett.getContext("2d");
      janett.width = 511 * acacia;
      janett.height = 408 * acacia;
      elizet.beginPath();
      elizet.lineCap = "round";
      elizet.lineJoin = "round";
      elizet.moveTo(141.625 * acacia, 49.296875 * acacia);
      elizet.bezierCurveTo(225.625 * acacia, 10.296875 * acacia, 320.625 * acacia, 16.296875 * acacia, 390.625 * acacia, 39.296875 * acacia);
      elizet.bezierCurveTo(476.625 * acacia, 71.296875 * acacia, 483.625 * acacia, 142.296875 * acacia, 486.625 * acacia, 197.296875 * acacia);
      elizet.bezierCurveTo(491.625 * acacia, 289.296875 * acacia, 462.625 * acacia, 317.296875 * acacia, 417.625 * acacia, 351.296875 * acacia);
      elizet.bezierCurveTo(367.625 * acacia, 385.296875 * acacia, 313.625 * acacia, 404.296875 * acacia, 218.625 * acacia, 395.296875 * acacia);
      elizet.bezierCurveTo(108.625 * acacia, 381.296875 * acacia, 81.625 * acacia, 350.296875 * acacia, 52.625 * acacia, 305.296875 * acacia);
      elizet.bezierCurveTo(16.625 * acacia, 244.296875 * acacia, 23.625 * acacia, 171.296875 * acacia, 37.625 * acacia, 145.296875 * acacia);
      elizet.bezierCurveTo(65.625 * acacia, 84.296875 * acacia, 97.625 * acacia, 74.296875 * acacia, 141.625 * acacia, 49.296875 * acacia);
      elizet.closePath();
      fill_path(elizet, trevin[0]);
    } else {
      if (thrisha == 2) {
        var janett = document.createElement("canvas");
        var elizet = janett.getContext("2d");
        janett.width = 504 * acacia;
        janett.height = 408 * acacia;
        elizet.beginPath();
        elizet.lineCap = "round";
        elizet.lineJoin = "round";
        elizet.moveTo(153.625 * acacia, 46.296875 * acacia);
        elizet.bezierCurveTo(271.625 * acacia, 17.296875 * acacia, 345.625 * acacia, 35.296875 * acacia, 410.625 * acacia, 71.296875 * acacia);
        elizet.bezierCurveTo(473.625 * acacia, 109.296875 * acacia, 478.625 * acacia, 167.296875 * acacia, 473.625 * acacia, 205.296875 * acacia);
        elizet.bezierCurveTo(462.625 * acacia, 295.296875 * acacia, 438.625 * acacia, 316.296875 * acacia, 388.625 * acacia, 345.296875 * acacia);
        elizet.bezierCurveTo(331.625 * acacia, 374.296875 * acacia, 273.625 * acacia, 392.296875 * acacia, 180.625 * acacia, 387.296875 * acacia);
        elizet.bezierCurveTo(111.625 * acacia, 380.296875 * acacia, 86.625 * acacia, 360.296875 * acacia, 51.625 * acacia, 309.296875 * acacia);
        elizet.bezierCurveTo(23.625 * acacia, 267.296875 * acacia, 25.625 * acacia, 226.296875 * acacia, 27.625 * acacia, 175.296875 * acacia);
        elizet.bezierCurveTo(37.625 * acacia, 99.296875 * acacia, 88.625 * acacia, 57.296875 * acacia, 153.625 * acacia, 46.296875 * acacia);
        elizet.closePath();
        fill_path(elizet, trevin[0]);
      }
    }
  }
  return janett;
}
function create_sign(chapin, shelagh, mane) {
  var laibah = document.createElement("canvas");
  var quenita = laibah.getContext("2d");
  laibah.width = 450 * chapin;
  laibah.height = 260 * chapin;
  quenita.translate(10 * chapin, 10 * chapin);
  quenita.globalAlpha = shelagh ? .5 : 1;
  quenita.translate(20 * chapin, 20 * chapin);
  round_rect(quenita, 0, 0, 400 * chapin, 220 * chapin, 30 * chapin);
  fill_path(quenita, mane[0]);
  quenita.globalAlpha = 1;
  quenita.translate(-20 * chapin, -20 * chapin);
  quenita.beginPath();
  quenita.lineCap = "round";
  quenita.lineJoin = "round";
  quenita.moveTo(9 * chapin, 5 * chapin);
  quenita.bezierCurveTo(381 * chapin, 2 * chapin, 197 * chapin, 4.5 * chapin, 385 * chapin, 4 * chapin);
  quenita.bezierCurveTo(397 * chapin, 4 * chapin, 401 * chapin, 4 * chapin, 399 * chapin, 23 * chapin);
  quenita.bezierCurveTo(367 * chapin, 27 * chapin, 367 * chapin, 27 * chapin, 335 * chapin, 31 * chapin);
  quenita.bezierCurveTo(366.5 * chapin, 33.5 * chapin, 366.5 * chapin, 33.5 * chapin, 398 * chapin, 36 * chapin);
  quenita.bezierCurveTo(398 * chapin, 41.5 * chapin, 398 * chapin, 41.5 * chapin, 398 * chapin, 47 * chapin);
  quenita.bezierCurveTo(398 * chapin, 56 * chapin, 399 * chapin, 56 * chapin, 386 * chapin, 56 * chapin);
  quenita.bezierCurveTo(200.5 * chapin, 56.5 * chapin, 200.5 * chapin, 56.5 * chapin, 15 * chapin, 57 * chapin);
  quenita.bezierCurveTo(2 * chapin, 55 * chapin, 4 * chapin, 52 * chapin, 4 * chapin, 43 * chapin);
  quenita.bezierCurveTo(4 * chapin, 30.5 * chapin, 4 * chapin, 30.5 * chapin, 4 * chapin, 18 * chapin);
  quenita.bezierCurveTo(16 * chapin, 18.5 * chapin, 16 * chapin, 18.5 * chapin, 28 * chapin, 19 * chapin);
  quenita.bezierCurveTo(18.5 * chapin, 12 * chapin, 18.5 * chapin, 12 * chapin, 9 * chapin, 5 * chapin);
  quenita.closePath();
  fill_path(quenita, mane[2], mane[1], 12 * chapin);
  quenita.beginPath();
  quenita.lineCap = "round";
  quenita.lineJoin = "round";
  quenita.moveTo(5 * chapin, 70 * chapin);
  quenita.bezierCurveTo(5 * chapin, 58 * chapin, 5 * chapin, 55 * chapin, 17 * chapin, 57 * chapin);
  quenita.bezierCurveTo(203 * chapin, 57 * chapin, 203 * chapin, 57 * chapin, 389 * chapin, 57 * chapin);
  quenita.bezierCurveTo(400 * chapin, 57 * chapin, 400 * chapin, 59 * chapin, 400 * chapin, 69 * chapin);
  quenita.bezierCurveTo(400.5 * chapin, 83.5 * chapin, 400.5 * chapin, 83.5 * chapin, 401 * chapin, 98 * chapin);
  quenita.bezierCurveTo(402 * chapin, 108 * chapin, 401 * chapin, 108 * chapin, 388 * chapin, 108 * chapin);
  quenita.bezierCurveTo(201.5 * chapin, 108 * chapin, 201.5 * chapin, 108 * chapin, 15 * chapin, 108 * chapin);
  quenita.bezierCurveTo(1 * chapin, 106 * chapin, 5 * chapin, 106 * chapin, 5 * chapin, 87 * chapin);
  quenita.bezierCurveTo(33 * chapin, 84.5 * chapin, 33 * chapin, 84.5 * chapin, 61 * chapin, 82 * chapin);
  quenita.bezierCurveTo(33.5 * chapin, 76.5 * chapin, 33.5 * chapin, 76.5 * chapin, 6 * chapin, 71 * chapin);
  quenita.closePath();
  fill_path(quenita, mane[3], mane[1], 12 * chapin);
  quenita.beginPath();
  quenita.lineCap = "round";
  quenita.lineJoin = "round";
  quenita.moveTo(19 * chapin, 158 * chapin);
  quenita.bezierCurveTo(2 * chapin, 159 * chapin, 4 * chapin, 156 * chapin, 5 * chapin, 118 * chapin);
  quenita.bezierCurveTo(4 * chapin, 110 * chapin, 6 * chapin, 107 * chapin, 26 * chapin, 109 * chapin);
  quenita.bezierCurveTo(206.5 * chapin, 109 * chapin, 206.5 * chapin, 109 * chapin, 387 * chapin, 109 * chapin);
  quenita.bezierCurveTo(400 * chapin, 108 * chapin, 400 * chapin, 108 * chapin, 398 * chapin, 127 * chapin);
  quenita.bezierCurveTo(384.5 * chapin, 130 * chapin, 384.5 * chapin, 130 * chapin, 371 * chapin, 133 * chapin);
  quenita.bezierCurveTo(385.5 * chapin, 138 * chapin, 385.5 * chapin, 138 * chapin, 400 * chapin, 143 * chapin);
  quenita.bezierCurveTo(402 * chapin, 156 * chapin, 402 * chapin, 162 * chapin, 385 * chapin, 160 * chapin);
  quenita.closePath();
  fill_path(quenita, mane[2], mane[1], 12 * chapin);
  quenita.beginPath();
  quenita.lineCap = "round";
  quenita.lineJoin = "round";
  quenita.moveTo(4 * chapin, 183 * chapin);
  quenita.bezierCurveTo(1 * chapin, 163 * chapin, 4 * chapin, 158 * chapin, 28 * chapin, 161 * chapin);
  quenita.bezierCurveTo(207.5 * chapin, 161 * chapin, 207.5 * chapin, 161 * chapin, 387 * chapin, 161 * chapin);
  quenita.bezierCurveTo(401 * chapin, 159 * chapin, 400 * chapin, 164 * chapin, 400 * chapin, 177 * chapin);
  quenita.bezierCurveTo(364.5 * chapin, 184 * chapin, 364.5 * chapin, 184 * chapin, 329 * chapin, 191 * chapin);
  quenita.bezierCurveTo(364.5 * chapin, 192.5 * chapin, 364.5 * chapin, 192.5 * chapin, 400 * chapin, 194 * chapin);
  quenita.bezierCurveTo(403 * chapin, 209 * chapin, 401 * chapin, 214 * chapin, 385 * chapin, 213 * chapin);
  quenita.bezierCurveTo(201.5 * chapin, 213 * chapin, 201.5 * chapin, 213 * chapin, 18 * chapin, 213 * chapin);
  quenita.bezierCurveTo(3 * chapin, 213 * chapin, 2 * chapin, 213 * chapin, 4 * chapin, 198 * chapin);
  quenita.bezierCurveTo(12.5 * chapin, 193 * chapin, 12.5 * chapin, 193 * chapin, 21 * chapin, 188 * chapin);
  quenita.closePath();
  fill_path(quenita, mane[3], mane[1], 12 * chapin);
  circle(quenita, 41 * chapin, 30 * chapin, 14.7648230602334 * chapin);
  fill_path(quenita, mane[3], mane[1], 12 * chapin);
  circle(quenita, 369 * chapin, 30 * chapin, 15.556349186104045 * chapin);
  fill_path(quenita, mane[3], mane[1], 12 * chapin);
  circle(quenita, 364 * chapin, 190 * chapin, 15.620499351813308 * chapin);
  fill_path(quenita, mane[3], mane[1], 12 * chapin);
  circle(quenita, 41 * chapin, 186 * chapin, 15.556349186104045 * chapin);
  fill_path(quenita, mane[3], mane[1], 12 * chapin);
  return laibah;
}
function create_sign_button(ceres, annabellelee, wialliam) {
  var willard = document.createElement("canvas");
  var jacquez = willard.getContext("2d");
  willard.width = 450 * ceres;
  willard.height = 260 * ceres;
  jacquez.translate(10 * ceres, 10 * ceres);
  if (wialliam == 1) {
    jacquez.beginPath();
    jacquez.lineCap = "round";
    jacquez.lineJoin = "round";
    jacquez.moveTo(9 * ceres, 5 * ceres);
    jacquez.bezierCurveTo(381 * ceres, 2 * ceres, 197 * ceres, 4.5 * ceres, 385 * ceres, 4 * ceres);
    jacquez.bezierCurveTo(397 * ceres, 4 * ceres, 401 * ceres, 4 * ceres, 399 * ceres, 23 * ceres);
    jacquez.bezierCurveTo(367 * ceres, 27 * ceres, 367 * ceres, 27 * ceres, 335 * ceres, 31 * ceres);
    jacquez.bezierCurveTo(366.5 * ceres, 33.5 * ceres, 366.5 * ceres, 33.5 * ceres, 398 * ceres, 36 * ceres);
    jacquez.bezierCurveTo(398 * ceres, 41.5 * ceres, 398 * ceres, 41.5 * ceres, 398 * ceres, 47 * ceres);
    jacquez.bezierCurveTo(398 * ceres, 56 * ceres, 399 * ceres, 56 * ceres, 386 * ceres, 56 * ceres);
    jacquez.bezierCurveTo(200.5 * ceres, 56.5 * ceres, 200.5 * ceres, 56.5 * ceres, 15 * ceres, 57 * ceres);
    jacquez.bezierCurveTo(2 * ceres, 55 * ceres, 4 * ceres, 52 * ceres, 4 * ceres, 43 * ceres);
    jacquez.bezierCurveTo(4 * ceres, 30.5 * ceres, 4 * ceres, 30.5 * ceres, 4 * ceres, 18 * ceres);
    jacquez.bezierCurveTo(16 * ceres, 18.5 * ceres, 16 * ceres, 18.5 * ceres, 28 * ceres, 19 * ceres);
    jacquez.bezierCurveTo(18.5 * ceres, 12 * ceres, 18.5 * ceres, 12 * ceres, 9 * ceres, 5 * ceres);
    jacquez.closePath();
    fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
    jacquez.beginPath();
    jacquez.lineCap = "round";
    jacquez.lineJoin = "round";
    jacquez.moveTo(5 * ceres, 70 * ceres);
    jacquez.bezierCurveTo(5 * ceres, 58 * ceres, 5 * ceres, 55 * ceres, 17 * ceres, 57 * ceres);
    jacquez.bezierCurveTo(203 * ceres, 57 * ceres, 203 * ceres, 57 * ceres, 389 * ceres, 57 * ceres);
    jacquez.bezierCurveTo(400 * ceres, 57 * ceres, 400 * ceres, 59 * ceres, 400 * ceres, 69 * ceres);
    jacquez.bezierCurveTo(400.5 * ceres, 83.5 * ceres, 400.5 * ceres, 83.5 * ceres, 401 * ceres, 98 * ceres);
    jacquez.bezierCurveTo(402 * ceres, 108 * ceres, 401 * ceres, 108 * ceres, 388 * ceres, 108 * ceres);
    jacquez.bezierCurveTo(201.5 * ceres, 108 * ceres, 201.5 * ceres, 108 * ceres, 15 * ceres, 108 * ceres);
    jacquez.bezierCurveTo(1 * ceres, 106 * ceres, 5 * ceres, 106 * ceres, 5 * ceres, 87 * ceres);
    jacquez.bezierCurveTo(33 * ceres, 84.5 * ceres, 33 * ceres, 84.5 * ceres, 61 * ceres, 82 * ceres);
    jacquez.bezierCurveTo(33.5 * ceres, 76.5 * ceres, 33.5 * ceres, 76.5 * ceres, 6 * ceres, 71 * ceres);
    jacquez.closePath();
    fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
    jacquez.beginPath();
    jacquez.lineCap = "round";
    jacquez.lineJoin = "round";
    jacquez.moveTo(19 * ceres, 158 * ceres);
    jacquez.bezierCurveTo(2 * ceres, 159 * ceres, 4 * ceres, 156 * ceres, 5 * ceres, 118 * ceres);
    jacquez.bezierCurveTo(4 * ceres, 110 * ceres, 6 * ceres, 107 * ceres, 26 * ceres, 109 * ceres);
    jacquez.bezierCurveTo(206.5 * ceres, 109 * ceres, 206.5 * ceres, 109 * ceres, 387 * ceres, 109 * ceres);
    jacquez.bezierCurveTo(400 * ceres, 108 * ceres, 400 * ceres, 108 * ceres, 398 * ceres, 127 * ceres);
    jacquez.bezierCurveTo(384.5 * ceres, 130 * ceres, 384.5 * ceres, 130 * ceres, 371 * ceres, 133 * ceres);
    jacquez.bezierCurveTo(385.5 * ceres, 138 * ceres, 385.5 * ceres, 138 * ceres, 400 * ceres, 143 * ceres);
    jacquez.bezierCurveTo(402 * ceres, 156 * ceres, 402 * ceres, 162 * ceres, 385 * ceres, 160 * ceres);
    jacquez.closePath();
    fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
    jacquez.beginPath();
    jacquez.lineCap = "round";
    jacquez.lineJoin = "round";
    jacquez.moveTo(4 * ceres, 183 * ceres);
    jacquez.bezierCurveTo(1 * ceres, 163 * ceres, 4 * ceres, 158 * ceres, 28 * ceres, 161 * ceres);
    jacquez.bezierCurveTo(207.5 * ceres, 161 * ceres, 207.5 * ceres, 161 * ceres, 387 * ceres, 161 * ceres);
    jacquez.bezierCurveTo(401 * ceres, 159 * ceres, 400 * ceres, 164 * ceres, 400 * ceres, 177 * ceres);
    jacquez.bezierCurveTo(364.5 * ceres, 184 * ceres, 364.5 * ceres, 184 * ceres, 329 * ceres, 191 * ceres);
    jacquez.bezierCurveTo(364.5 * ceres, 192.5 * ceres, 364.5 * ceres, 192.5 * ceres, 400 * ceres, 194 * ceres);
    jacquez.bezierCurveTo(403 * ceres, 209 * ceres, 401 * ceres, 214 * ceres, 385 * ceres, 213 * ceres);
    jacquez.bezierCurveTo(201.5 * ceres, 213 * ceres, 201.5 * ceres, 213 * ceres, 18 * ceres, 213 * ceres);
    jacquez.bezierCurveTo(3 * ceres, 213 * ceres, 2 * ceres, 213 * ceres, 4 * ceres, 198 * ceres);
    jacquez.bezierCurveTo(12.5 * ceres, 193 * ceres, 12.5 * ceres, 193 * ceres, 21 * ceres, 188 * ceres);
    jacquez.closePath();
    fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
    circle(jacquez, 41 * ceres, 30 * ceres, 14.7648230602334 * ceres);
    fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
    circle(jacquez, 369 * ceres, 30 * ceres, 15.556349186104045 * ceres);
    fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
    circle(jacquez, 364 * ceres, 190 * ceres, 15.620499351813308 * ceres);
    fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
    circle(jacquez, 41 * ceres, 186 * ceres, 15.556349186104045 * ceres);
    fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
  } else {
    if (wialliam == 2) {
      jacquez.beginPath();
      jacquez.lineCap = "round";
      jacquez.lineJoin = "round";
      jacquez.moveTo(9 * ceres, 5 * ceres);
      jacquez.bezierCurveTo(381 * ceres, 2 * ceres, 197 * ceres, 4.5 * ceres, 385 * ceres, 4 * ceres);
      jacquez.bezierCurveTo(397 * ceres, 4 * ceres, 401 * ceres, 4 * ceres, 399 * ceres, 23 * ceres);
      jacquez.bezierCurveTo(367 * ceres, 27 * ceres, 367 * ceres, 27 * ceres, 335 * ceres, 31 * ceres);
      jacquez.bezierCurveTo(366.5 * ceres, 33.5 * ceres, 366.5 * ceres, 33.5 * ceres, 398 * ceres, 36 * ceres);
      jacquez.bezierCurveTo(398 * ceres, 41.5 * ceres, 398 * ceres, 41.5 * ceres, 398 * ceres, 47 * ceres);
      jacquez.bezierCurveTo(398 * ceres, 56 * ceres, 399 * ceres, 56 * ceres, 386 * ceres, 56 * ceres);
      jacquez.bezierCurveTo(200.5 * ceres, 56.5 * ceres, 200.5 * ceres, 56.5 * ceres, 15 * ceres, 57 * ceres);
      jacquez.bezierCurveTo(2 * ceres, 55 * ceres, 4 * ceres, 52 * ceres, 4 * ceres, 43 * ceres);
      jacquez.bezierCurveTo(4 * ceres, 30.5 * ceres, 4 * ceres, 30.5 * ceres, 4 * ceres, 18 * ceres);
      jacquez.bezierCurveTo(16 * ceres, 18.5 * ceres, 16 * ceres, 18.5 * ceres, 28 * ceres, 19 * ceres);
      jacquez.bezierCurveTo(18.5 * ceres, 12 * ceres, 18.5 * ceres, 12 * ceres, 9 * ceres, 5 * ceres);
      jacquez.closePath();
      fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
      jacquez.beginPath();
      jacquez.lineCap = "round";
      jacquez.lineJoin = "round";
      jacquez.moveTo(5 * ceres, 70 * ceres);
      jacquez.bezierCurveTo(5 * ceres, 58 * ceres, 5 * ceres, 55 * ceres, 17 * ceres, 57 * ceres);
      jacquez.bezierCurveTo(203 * ceres, 57 * ceres, 203 * ceres, 57 * ceres, 389 * ceres, 57 * ceres);
      jacquez.bezierCurveTo(400 * ceres, 57 * ceres, 400 * ceres, 59 * ceres, 400 * ceres, 69 * ceres);
      jacquez.bezierCurveTo(400.5 * ceres, 83.5 * ceres, 400.5 * ceres, 83.5 * ceres, 401 * ceres, 98 * ceres);
      jacquez.bezierCurveTo(402 * ceres, 108 * ceres, 401 * ceres, 108 * ceres, 388 * ceres, 108 * ceres);
      jacquez.bezierCurveTo(201.5 * ceres, 108 * ceres, 201.5 * ceres, 108 * ceres, 15 * ceres, 108 * ceres);
      jacquez.bezierCurveTo(1 * ceres, 106 * ceres, 5 * ceres, 106 * ceres, 5 * ceres, 87 * ceres);
      jacquez.bezierCurveTo(33 * ceres, 84.5 * ceres, 33 * ceres, 84.5 * ceres, 61 * ceres, 82 * ceres);
      jacquez.bezierCurveTo(33.5 * ceres, 76.5 * ceres, 33.5 * ceres, 76.5 * ceres, 6 * ceres, 71 * ceres);
      jacquez.closePath();
      fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
      jacquez.beginPath();
      jacquez.lineCap = "round";
      jacquez.lineJoin = "round";
      jacquez.moveTo(19 * ceres, 158 * ceres);
      jacquez.bezierCurveTo(2 * ceres, 159 * ceres, 4 * ceres, 156 * ceres, 5 * ceres, 118 * ceres);
      jacquez.bezierCurveTo(4 * ceres, 110 * ceres, 6 * ceres, 107 * ceres, 26 * ceres, 109 * ceres);
      jacquez.bezierCurveTo(206.5 * ceres, 109 * ceres, 206.5 * ceres, 109 * ceres, 387 * ceres, 109 * ceres);
      jacquez.bezierCurveTo(400 * ceres, 108 * ceres, 400 * ceres, 108 * ceres, 398 * ceres, 127 * ceres);
      jacquez.bezierCurveTo(384.5 * ceres, 130 * ceres, 384.5 * ceres, 130 * ceres, 371 * ceres, 133 * ceres);
      jacquez.bezierCurveTo(385.5 * ceres, 138 * ceres, 385.5 * ceres, 138 * ceres, 400 * ceres, 143 * ceres);
      jacquez.bezierCurveTo(402 * ceres, 156 * ceres, 402 * ceres, 162 * ceres, 385 * ceres, 160 * ceres);
      jacquez.closePath();
      fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
      jacquez.beginPath();
      jacquez.lineCap = "round";
      jacquez.lineJoin = "round";
      jacquez.moveTo(4 * ceres, 183 * ceres);
      jacquez.bezierCurveTo(1 * ceres, 163 * ceres, 4 * ceres, 158 * ceres, 28 * ceres, 161 * ceres);
      jacquez.bezierCurveTo(207.5 * ceres, 161 * ceres, 207.5 * ceres, 161 * ceres, 387 * ceres, 161 * ceres);
      jacquez.bezierCurveTo(401 * ceres, 159 * ceres, 400 * ceres, 164 * ceres, 400 * ceres, 177 * ceres);
      jacquez.bezierCurveTo(364.5 * ceres, 184 * ceres, 364.5 * ceres, 184 * ceres, 329 * ceres, 191 * ceres);
      jacquez.bezierCurveTo(364.5 * ceres, 192.5 * ceres, 364.5 * ceres, 192.5 * ceres, 400 * ceres, 194 * ceres);
      jacquez.bezierCurveTo(403 * ceres, 209 * ceres, 401 * ceres, 214 * ceres, 385 * ceres, 213 * ceres);
      jacquez.bezierCurveTo(201.5 * ceres, 213 * ceres, 201.5 * ceres, 213 * ceres, 18 * ceres, 213 * ceres);
      jacquez.bezierCurveTo(3 * ceres, 213 * ceres, 2 * ceres, 213 * ceres, 4 * ceres, 198 * ceres);
      jacquez.bezierCurveTo(12.5 * ceres, 193 * ceres, 12.5 * ceres, 193 * ceres, 21 * ceres, 188 * ceres);
      jacquez.closePath();
      fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
      circle(jacquez, 41 * ceres, 30 * ceres, 14.7648230602334 * ceres);
      fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
      circle(jacquez, 369 * ceres, 30 * ceres, 15.556349186104045 * ceres);
      fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
      circle(jacquez, 364 * ceres, 190 * ceres, 15.620499351813308 * ceres);
      fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
      circle(jacquez, 41 * ceres, 186 * ceres, 15.556349186104045 * ceres);
      fill_path(jacquez, annabellelee[3], annabellelee[3], 32 * ceres);
    }
  }
  jacquez.beginPath();
  jacquez.lineCap = "round";
  jacquez.lineJoin = "round";
  jacquez.moveTo(9 * ceres, 5 * ceres);
  jacquez.bezierCurveTo(381 * ceres, 2 * ceres, 197 * ceres, 4.5 * ceres, 385 * ceres, 4 * ceres);
  jacquez.bezierCurveTo(397 * ceres, 4 * ceres, 401 * ceres, 4 * ceres, 399 * ceres, 23 * ceres);
  jacquez.bezierCurveTo(367 * ceres, 27 * ceres, 367 * ceres, 27 * ceres, 335 * ceres, 31 * ceres);
  jacquez.bezierCurveTo(366.5 * ceres, 33.5 * ceres, 366.5 * ceres, 33.5 * ceres, 398 * ceres, 36 * ceres);
  jacquez.bezierCurveTo(398 * ceres, 41.5 * ceres, 398 * ceres, 41.5 * ceres, 398 * ceres, 47 * ceres);
  jacquez.bezierCurveTo(398 * ceres, 56 * ceres, 399 * ceres, 56 * ceres, 386 * ceres, 56 * ceres);
  jacquez.bezierCurveTo(200.5 * ceres, 56.5 * ceres, 200.5 * ceres, 56.5 * ceres, 15 * ceres, 57 * ceres);
  jacquez.bezierCurveTo(2 * ceres, 55 * ceres, 4 * ceres, 52 * ceres, 4 * ceres, 43 * ceres);
  jacquez.bezierCurveTo(4 * ceres, 30.5 * ceres, 4 * ceres, 30.5 * ceres, 4 * ceres, 18 * ceres);
  jacquez.bezierCurveTo(16 * ceres, 18.5 * ceres, 16 * ceres, 18.5 * ceres, 28 * ceres, 19 * ceres);
  jacquez.bezierCurveTo(18.5 * ceres, 12 * ceres, 18.5 * ceres, 12 * ceres, 9 * ceres, 5 * ceres);
  jacquez.closePath();
  fill_path(jacquez, annabellelee[1], annabellelee[0], 12 * ceres);
  jacquez.beginPath();
  jacquez.lineCap = "round";
  jacquez.lineJoin = "round";
  jacquez.moveTo(5 * ceres, 70 * ceres);
  jacquez.bezierCurveTo(5 * ceres, 58 * ceres, 5 * ceres, 55 * ceres, 17 * ceres, 57 * ceres);
  jacquez.bezierCurveTo(203 * ceres, 57 * ceres, 203 * ceres, 57 * ceres, 389 * ceres, 57 * ceres);
  jacquez.bezierCurveTo(400 * ceres, 57 * ceres, 400 * ceres, 59 * ceres, 400 * ceres, 69 * ceres);
  jacquez.bezierCurveTo(400.5 * ceres, 83.5 * ceres, 400.5 * ceres, 83.5 * ceres, 401 * ceres, 98 * ceres);
  jacquez.bezierCurveTo(402 * ceres, 108 * ceres, 401 * ceres, 108 * ceres, 388 * ceres, 108 * ceres);
  jacquez.bezierCurveTo(201.5 * ceres, 108 * ceres, 201.5 * ceres, 108 * ceres, 15 * ceres, 108 * ceres);
  jacquez.bezierCurveTo(1 * ceres, 106 * ceres, 5 * ceres, 106 * ceres, 5 * ceres, 87 * ceres);
  jacquez.bezierCurveTo(33 * ceres, 84.5 * ceres, 33 * ceres, 84.5 * ceres, 61 * ceres, 82 * ceres);
  jacquez.bezierCurveTo(33.5 * ceres, 76.5 * ceres, 33.5 * ceres, 76.5 * ceres, 6 * ceres, 71 * ceres);
  jacquez.closePath();
  fill_path(jacquez, annabellelee[2], annabellelee[0], 12 * ceres);
  jacquez.beginPath();
  jacquez.lineCap = "round";
  jacquez.lineJoin = "round";
  jacquez.moveTo(19 * ceres, 158 * ceres);
  jacquez.bezierCurveTo(2 * ceres, 159 * ceres, 4 * ceres, 156 * ceres, 5 * ceres, 118 * ceres);
  jacquez.bezierCurveTo(4 * ceres, 110 * ceres, 6 * ceres, 107 * ceres, 26 * ceres, 109 * ceres);
  jacquez.bezierCurveTo(206.5 * ceres, 109 * ceres, 206.5 * ceres, 109 * ceres, 387 * ceres, 109 * ceres);
  jacquez.bezierCurveTo(400 * ceres, 108 * ceres, 400 * ceres, 108 * ceres, 398 * ceres, 127 * ceres);
  jacquez.bezierCurveTo(384.5 * ceres, 130 * ceres, 384.5 * ceres, 130 * ceres, 371 * ceres, 133 * ceres);
  jacquez.bezierCurveTo(385.5 * ceres, 138 * ceres, 385.5 * ceres, 138 * ceres, 400 * ceres, 143 * ceres);
  jacquez.bezierCurveTo(402 * ceres, 156 * ceres, 402 * ceres, 162 * ceres, 385 * ceres, 160 * ceres);
  jacquez.closePath();
  fill_path(jacquez, annabellelee[1], annabellelee[0], 12 * ceres);
  jacquez.beginPath();
  jacquez.lineCap = "round";
  jacquez.lineJoin = "round";
  jacquez.moveTo(4 * ceres, 183 * ceres);
  jacquez.bezierCurveTo(1 * ceres, 163 * ceres, 4 * ceres, 158 * ceres, 28 * ceres, 161 * ceres);
  jacquez.bezierCurveTo(207.5 * ceres, 161 * ceres, 207.5 * ceres, 161 * ceres, 387 * ceres, 161 * ceres);
  jacquez.bezierCurveTo(401 * ceres, 159 * ceres, 400 * ceres, 164 * ceres, 400 * ceres, 177 * ceres);
  jacquez.bezierCurveTo(364.5 * ceres, 184 * ceres, 364.5 * ceres, 184 * ceres, 329 * ceres, 191 * ceres);
  jacquez.bezierCurveTo(364.5 * ceres, 192.5 * ceres, 364.5 * ceres, 192.5 * ceres, 400 * ceres, 194 * ceres);
  jacquez.bezierCurveTo(403 * ceres, 209 * ceres, 401 * ceres, 214 * ceres, 385 * ceres, 213 * ceres);
  jacquez.bezierCurveTo(201.5 * ceres, 213 * ceres, 201.5 * ceres, 213 * ceres, 18 * ceres, 213 * ceres);
  jacquez.bezierCurveTo(3 * ceres, 213 * ceres, 2 * ceres, 213 * ceres, 4 * ceres, 198 * ceres);
  jacquez.bezierCurveTo(12.5 * ceres, 193 * ceres, 12.5 * ceres, 193 * ceres, 21 * ceres, 188 * ceres);
  jacquez.closePath();
  fill_path(jacquez, annabellelee[2], annabellelee[0], 12 * ceres);
  circle(jacquez, 41 * ceres, 30 * ceres, 14.7648230602334 * ceres);
  fill_path(jacquez, annabellelee[2], annabellelee[0], 12 * ceres);
  circle(jacquez, 369 * ceres, 30 * ceres, 15.556349186104045 * ceres);
  fill_path(jacquez, annabellelee[2], annabellelee[0], 12 * ceres);
  circle(jacquez, 364 * ceres, 190 * ceres, 15.620499351813308 * ceres);
  fill_path(jacquez, annabellelee[2], annabellelee[0], 12 * ceres);
  circle(jacquez, 41 * ceres, 186 * ceres, 15.556349186104045 * ceres);
  fill_path(jacquez, annabellelee[2], annabellelee[0], 12 * ceres);
  return willard;
}
function create_symbols(lorren, johnnae, agim, graecyn) {
  var sammie = document.createElement("canvas");
  var mohib = sammie.getContext("2d");
  sammie.width = 450 * lorren;
  sammie.height = 260 * lorren;
  var jabraylin = create_sign(1 * lorren, true, agim);
  mohib.drawImage(jabraylin, 0 * lorren, 0 * lorren);
  if (graecyn == 1) {
    mohib.translate(100 * lorren, 0 * lorren);
    circle(mohib, 113 * lorren, 120 * lorren, 66 * lorren);
    fill_path(mohib, undefined, agim[4], 13 * lorren);
    var jabraylin = create_sword(.65 * lorren, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
    mohib.rotate(.7);
    mohib.drawImage(jabraylin, 133 * lorren, -64 * lorren);
    mohib.rotate(-0.7);
    mohib.beginPath();
    mohib.lineCap = "round";
    mohib.lineJoin = "round";
    mohib.moveTo(70 * lorren, 70 * lorren);
    mohib.bezierCurveTo(113 * lorren, 120.5 * lorren, 113 * lorren, 120.5 * lorren, 156 * lorren, 171 * lorren);
    mohib.closePath();
    fill_path(mohib, undefined, agim[4], 13 * lorren);
  } else {
    if (graecyn == 2) {
      mohib.translate(100 * lorren, 0 * lorren);
      circle(mohib, 113 * lorren, 120 * lorren, 66 * lorren);
      fill_path(mohib, undefined, agim[4], 13 * lorren);
      mohib.translate(30 * lorren, 40 * lorren);
      mohib.save();
      mohib.translate(83.5 * lorren, 66.5 * lorren);
      round_rect(mohib, -40.5 * lorren, -29.5 * lorren, 81 * lorren, 59 * lorren, 15 * lorren);
      mohib.restore();
      fill_path(mohib, "#dff2f7", "#187484", 7 * lorren);
      circle(mohib, 22 * lorren, 82 * lorren, 12 * lorren);
      fill_path(mohib, "#dff2f7", "#187484", 7 * lorren);
      circle(mohib, 145 * lorren, 82 * lorren, 12 * lorren);
      fill_path(mohib, "#dff2f7", "#187484", 7 * lorren);
      var jabraylin = create_plant(.5 * lorren, true, ["#80500b", "#7c4908"]);
      mohib.drawImage(jabraylin, 10 * lorren, 85 * lorren);
      var jabraylin = create_plant(.5 * lorren, true, ["#80500b", "#7c4908"]);
      mohib.drawImage(jabraylin, 50 * lorren, 85 * lorren);
      var jabraylin = create_plant(.5 * lorren, true, ["#80500b", "#7c4908"]);
      mohib.drawImage(jabraylin, 90 * lorren, 85 * lorren);
      var jabraylin = create_fruit(1 * lorren, true, ["#3d2a6e", "#8255b5"]);
      mohib.drawImage(jabraylin, 90 * lorren, 105 * lorren);
      var jabraylin = create_fruit(1 * lorren, true, ["#3d2a6e", "#8255b5"]);
      mohib.drawImage(jabraylin, 90 * lorren, 105 * lorren);
      var jabraylin = create_fruit(1 * lorren, true, ["#3d2a6e", "#8255b5"]);
      mohib.drawImage(jabraylin, 30 * lorren, 125 * lorren);
      var jabraylin = create_fruit(1 * lorren, true, ["#3d2a6e", "#8255b5"]);
      mohib.drawImage(jabraylin, 50 * lorren, 115 * lorren);
      var jabraylin = create_fruit(1 * lorren, true, ["#3d2a6e", "#8255b5"]);
      mohib.drawImage(jabraylin, 30 * lorren, 100 * lorren);
      var jabraylin = create_fruit(1 * lorren, true, ["#3d2a6e", "#8255b5"]);
      mohib.drawImage(jabraylin, 80 * lorren, 120 * lorren);
      var jabraylin = create_fruit(1 * lorren, true, ["#3d2a6e", "#8255b5"]);
      mohib.drawImage(jabraylin, 110 * lorren, 125 * lorren);
      var jabraylin = create_fruit(1 * lorren, true, ["#3d2a6e", "#8255b5"]);
      mohib.drawImage(jabraylin, 120 * lorren, 105 * lorren);
    } else {
      if (graecyn == 3) {
        mohib.translate(100 * lorren, 0 * lorren);
        circle(mohib, 113 * lorren, 120 * lorren, 66 * lorren);
        fill_path(mohib, undefined, agim[4], 13 * lorren);
        mohib.translate(40 * lorren, 50 * lorren);
        mohib.save();
        mohib.translate(71 * lorren, 69 * lorren);
        round_rect(mohib, -30 * lorren, -42 * lorren, 60 * lorren, 84 * lorren, 10 * lorren);
        mohib.restore();
        fill_path(mohib, undefined, agim[5], 4 * lorren);
        mohib.beginPath();
        mohib.lineCap = "round";
        mohib.lineJoin = "round";
        mohib.moveTo(42 * lorren, 28 * lorren);
        mohib.bezierCurveTo(60 * lorren, 31 * lorren, 60 * lorren, 31 * lorren, 78 * lorren, 34 * lorren);
        mohib.bezierCurveTo(82 * lorren, 34 * lorren, 84 * lorren, 37 * lorren, 83 * lorren, 45 * lorren);
        mohib.bezierCurveTo(83 * lorren, 80 * lorren, 83 * lorren, 80 * lorren, 83 * lorren, 115 * lorren);
        mohib.bezierCurveTo(83 * lorren, 120 * lorren, 80 * lorren, 122 * lorren, 73 * lorren, 120 * lorren);
        mohib.bezierCurveTo(42 * lorren, 111 * lorren, 43 * lorren, 109 * lorren, 41 * lorren, 102 * lorren);
        mohib.bezierCurveTo(41 * lorren, 71 * lorren, 41 * lorren, 71 * lorren, 41 * lorren, 40 * lorren);
        mohib.closePath();
        fill_path(mohib, agim[5], agim[5], 4 * lorren);
        mohib.translate(-40 * lorren, -50 * lorren);
        mohib.beginPath();
        mohib.lineCap = "round";
        mohib.lineJoin = "round";
        mohib.moveTo(70 * lorren, 70 * lorren);
        mohib.bezierCurveTo(113 * lorren, 120.5 * lorren, 113 * lorren, 120.5 * lorren, 156 * lorren, 171 * lorren);
        mohib.closePath();
        fill_path(mohib, undefined, agim[4], 13 * lorren);
      } else {
        if (graecyn == 4) {
          mohib.scale(1, 1);
          mohib.translate(70 * lorren, 50 * lorren);
          mohib.beginPath();
          mohib.lineCap = "round";
          mohib.lineJoin = "round";
          mohib.moveTo(23 * lorren, 6 * lorren);
          mohib.bezierCurveTo(25.5 * lorren, 56 * lorren, 25.5 * lorren, 56 * lorren, 28 * lorren, 106 * lorren);
          fill_path(mohib, undefined, agim[5], 14 * lorren);
          mohib.beginPath();
          mohib.lineCap = "round";
          mohib.lineJoin = "round";
          mohib.moveTo(59 * lorren, 10 * lorren);
          mohib.bezierCurveTo(61 * lorren, 51.5 * lorren, 61 * lorren, 51.5 * lorren, 63 * lorren, 93 * lorren);
          fill_path(mohib, undefined, agim[5], 14 * lorren);
          mohib.beginPath();
          mohib.lineCap = "round";
          mohib.lineJoin = "round";
          mohib.moveTo(7 * lorren, 55 * lorren);
          mohib.bezierCurveTo(33.5 * lorren, 55 * lorren, 33.5 * lorren, 55 * lorren, 60 * lorren, 55 * lorren);
          fill_path(mohib, undefined, agim[5], 14 * lorren);
          mohib.translate(10 * lorren, 0 * lorren);
          mohib.beginPath();
          mohib.lineCap = "round";
          mohib.lineJoin = "round";
          mohib.moveTo(123 * lorren, 16 * lorren);
          mohib.bezierCurveTo(103 * lorren, 16.5 * lorren, 103 * lorren, 16.5 * lorren, 83 * lorren, 17 * lorren);
          mohib.bezierCurveTo(83.5 * lorren, 61 * lorren, 83.5 * lorren, 61 * lorren, 84 * lorren, 105 * lorren);
          mohib.bezierCurveTo(106 * lorren, 105 * lorren, 106 * lorren, 105 * lorren, 128 * lorren, 105 * lorren);
          fill_path(mohib, undefined, agim[5], 14 * lorren);
          mohib.beginPath();
          mohib.lineCap = "round";
          mohib.lineJoin = "round";
          mohib.moveTo(72 * lorren, 63 * lorren);
          mohib.bezierCurveTo(88.5 * lorren, 62.5 * lorren, 88.5 * lorren, 62.5 * lorren, 105 * lorren, 62 * lorren);
          fill_path(mohib, undefined, agim[5], 14 * lorren);
          mohib.translate(10 * lorren, 10 * lorren);
          mohib.beginPath();
          mohib.lineCap = "round";
          mohib.lineJoin = "round";
          mohib.moveTo(141 * lorren, 8 * lorren);
          mohib.bezierCurveTo(143 * lorren, 50 * lorren, 143 * lorren, 50 * lorren, 145 * lorren, 92 * lorren);
          mohib.bezierCurveTo(169 * lorren, 88.5 * lorren, 169 * lorren, 88.5 * lorren, 193 * lorren, 85 * lorren);
          fill_path(mohib, undefined, agim[5], 14 * lorren);
          mohib.translate(10 * lorren, -10 * lorren);
          mohib.beginPath();
          mohib.lineCap = "round";
          mohib.lineJoin = "round";
          mohib.moveTo(205 * lorren, 124 * lorren);
          mohib.bezierCurveTo(205 * lorren, 69 * lorren, 205 * lorren, 69 * lorren, 205 * lorren, 14 * lorren);
          mohib.bezierCurveTo(239 * lorren, 15 * lorren, 250 * lorren, 37 * lorren, 249 * lorren, 49 * lorren);
          mohib.bezierCurveTo(251 * lorren, 65 * lorren, 242 * lorren, 76 * lorren, 206 * lorren, 75 * lorren);
          fill_path(mohib, undefined, agim[5], 14 * lorren);
        }
      }
    }
  }
  return sammie;
}
function create_dragon_helmet(lorianne, fedora, takijah) {
  var pamalia = document.createElement("canvas");
  var twilah = pamalia.getContext("2d");
  pamalia.width = 345 * lorianne;
  pamalia.height = 250 * lorianne;
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(105 * lorianne, 58 * lorianne);
  twilah.bezierCurveTo(100.5 * lorianne, 43 * lorianne, 100.5 * lorianne, 43 * lorianne, 96 * lorianne, 28 * lorianne);
  twilah.bezierCurveTo(119.5 * lorianne, 33.5 * lorianne, 119.5 * lorianne, 33.5 * lorianne, 143 * lorianne, 39 * lorianne);
  twilah.bezierCurveTo(170 * lorianne, 37 * lorianne, 177 * lorianne, 37 * lorianne, 188 * lorianne, 40 * lorianne);
  twilah.bezierCurveTo(213 * lorianne, 33.5 * lorianne, 213 * lorianne, 33.5 * lorianne, 238 * lorianne, 27 * lorianne);
  twilah.bezierCurveTo(231 * lorianne, 52 * lorianne, 234 * lorianne, 42.5 * lorianne, 230 * lorianne, 58 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[1], takijah[2], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(108 * lorianne, 51 * lorianne);
  twilah.bezierCurveTo(91 * lorianne, 55 * lorianne, 85 * lorianne, 44 * lorianne, 86 * lorianne, 29 * lorianne);
  twilah.bezierCurveTo(62 * lorianne, 50 * lorianne, 78 * lorianne, 69 * lorianne, 92 * lorianne, 75 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[3], takijah[4], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(249 * lorianne, 27 * lorianne);
  twilah.bezierCurveTo(273 * lorianne, 49 * lorianne, 262 * lorianne, 68 * lorianne, 246 * lorianne, 77 * lorianne);
  twilah.bezierCurveTo(231 * lorianne, 59 * lorianne, 236 * lorianne, 66.5 * lorianne, 226 * lorianne, 56 * lorianne);
  twilah.bezierCurveTo(243 * lorianne, 53 * lorianne, 252 * lorianne, 43 * lorianne, 249 * lorianne, 28 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[3], takijah[4], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(87 * lorianne, 78 * lorianne);
  twilah.bezierCurveTo(87 * lorianne, 59 * lorianne, 98 * lorianne, 46 * lorianne, 127 * lorianne, 48 * lorianne);
  twilah.bezierCurveTo(176 * lorianne, 48.5 * lorianne, 176 * lorianne, 48.5 * lorianne, 225 * lorianne, 49 * lorianne);
  twilah.bezierCurveTo(243 * lorianne, 49 * lorianne, 253 * lorianne, 59 * lorianne, 253 * lorianne, 76 * lorianne);
  twilah.bezierCurveTo(211 * lorianne, 85.5 * lorianne, 211 * lorianne, 85.5 * lorianne, 169 * lorianne, 95 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[5], takijah[6], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(56 * lorianne, 105 * lorianne);
  twilah.bezierCurveTo(56 * lorianne, 92 * lorianne, 59 * lorianne, 86 * lorianne, 65 * lorianne, 73 * lorianne);
  twilah.bezierCurveTo(62.5 * lorianne, 61.5 * lorianne, 62.5 * lorianne, 61.5 * lorianne, 60 * lorianne, 50 * lorianne);
  twilah.bezierCurveTo(99.5 * lorianne, 64.5 * lorianne, 99.5 * lorianne, 64.5 * lorianne, 139 * lorianne, 79 * lorianne);
  twilah.bezierCurveTo(164 * lorianne, 77 * lorianne, 177 * lorianne, 76 * lorianne, 203 * lorianne, 78 * lorianne);
  twilah.bezierCurveTo(242 * lorianne, 63.5 * lorianne, 242 * lorianne, 63.5 * lorianne, 281 * lorianne, 49 * lorianne);
  twilah.bezierCurveTo(279 * lorianne, 60.5 * lorianne, 279 * lorianne, 60.5 * lorianne, 277 * lorianne, 72 * lorianne);
  twilah.bezierCurveTo(286 * lorianne, 88 * lorianne, 286 * lorianne, 96 * lorianne, 287 * lorianne, 104 * lorianne);
  twilah.bezierCurveTo(228.5 * lorianne, 127 * lorianne, 228.5 * lorianne, 127 * lorianne, 170 * lorianne, 150 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[1], takijah[2], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(48 * lorianne, 130 * lorianne);
  twilah.bezierCurveTo(61 * lorianne, 155 * lorianne, 63 * lorianne, 165 * lorianne, 56 * lorianne, 171 * lorianne);
  twilah.bezierCurveTo(48 * lorianne, 177 * lorianne, 40 * lorianne, 171 * lorianne, 38 * lorianne, 178 * lorianne);
  twilah.bezierCurveTo(33 * lorianne, 180 * lorianne, 37 * lorianne, 188 * lorianne, 47 * lorianne, 208 * lorianne);
  twilah.bezierCurveTo(52 * lorianne, 221 * lorianne, 55 * lorianne, 222 * lorianne, 75 * lorianne, 229 * lorianne);
  twilah.bezierCurveTo(91 * lorianne, 213 * lorianne, 98 * lorianne, 212 * lorianne, 112 * lorianne, 219 * lorianne);
  twilah.bezierCurveTo(167 * lorianne, 225 * lorianne, 187 * lorianne, 224 * lorianne, 222 * lorianne, 220 * lorianne);
  twilah.bezierCurveTo(244 * lorianne, 214 * lorianne, 247 * lorianne, 213 * lorianne, 263 * lorianne, 229 * lorianne);
  twilah.bezierCurveTo(295 * lorianne, 220 * lorianne, 291 * lorianne, 215 * lorianne, 301 * lorianne, 194 * lorianne);
  twilah.bezierCurveTo(308 * lorianne, 178 * lorianne, 309 * lorianne, 176 * lorianne, 302 * lorianne, 173 * lorianne);
  twilah.bezierCurveTo(290 * lorianne, 177 * lorianne, 289 * lorianne, 177 * lorianne, 283 * lorianne, 169 * lorianne);
  twilah.bezierCurveTo(279 * lorianne, 163 * lorianne, 279 * lorianne, 161 * lorianne, 290 * lorianne, 130 * lorianne);
  twilah.bezierCurveTo(270 * lorianne, 127 * lorianne, 270 * lorianne, 127 * lorianne, 250 * lorianne, 124 * lorianne);
  twilah.bezierCurveTo(209 * lorianne, 137.5 * lorianne, 209 * lorianne, 137.5 * lorianne, 168 * lorianne, 151 * lorianne);
  twilah.bezierCurveTo(121 * lorianne, 135 * lorianne, 121 * lorianne, 135 * lorianne, 74 * lorianne, 119 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[1], takijah[2], 8 * lorianne);
  twilah.globalCompositeOperation = "destination-out";
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(133 * lorianne, 158 * lorianne);
  twilah.bezierCurveTo(152 * lorianne, 193 * lorianne, 158 * lorianne, 205 * lorianne, 140 * lorianne, 203 * lorianne);
  twilah.bezierCurveTo(99 * lorianne, 195 * lorianne, 96 * lorianne, 189 * lorianne, 86 * lorianne, 173 * lorianne);
  twilah.bezierCurveTo(80 * lorianne, 159 * lorianne, 88 * lorianne, 145 * lorianne, 104 * lorianne, 141 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[7], takijah[8], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(215 * lorianne, 146 * lorianne);
  twilah.bezierCurveTo(204 * lorianne, 167 * lorianne, 204 * lorianne, 167 * lorianne, 193 * lorianne, 188 * lorianne);
  twilah.bezierCurveTo(187 * lorianne, 201 * lorianne, 191 * lorianne, 209 * lorianne, 213 * lorianne, 201 * lorianne);
  twilah.bezierCurveTo(247 * lorianne, 192 * lorianne, 253 * lorianne, 181 * lorianne, 257 * lorianne, 169 * lorianne);
  twilah.bezierCurveTo(260 * lorianne, 157 * lorianne, 254 * lorianne, 149 * lorianne, 243 * lorianne, 141 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[7], takijah[8], 8 * lorianne);
  twilah.globalCompositeOperation = "source-over";
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(133 * lorianne, 158 * lorianne);
  twilah.bezierCurveTo(152 * lorianne, 193 * lorianne, 158 * lorianne, 205 * lorianne, 140 * lorianne, 203 * lorianne);
  twilah.bezierCurveTo(99 * lorianne, 195 * lorianne, 96 * lorianne, 189 * lorianne, 86 * lorianne, 173 * lorianne);
  twilah.bezierCurveTo(80 * lorianne, 159 * lorianne, 88 * lorianne, 145 * lorianne, 104 * lorianne, 141 * lorianne);
  twilah.closePath();
  fill_path(twilah, undefined, takijah[8], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(215 * lorianne, 146 * lorianne);
  twilah.bezierCurveTo(204 * lorianne, 167 * lorianne, 204 * lorianne, 167 * lorianne, 193 * lorianne, 188 * lorianne);
  twilah.bezierCurveTo(187 * lorianne, 201 * lorianne, 191 * lorianne, 209 * lorianne, 213 * lorianne, 201 * lorianne);
  twilah.bezierCurveTo(247 * lorianne, 192 * lorianne, 253 * lorianne, 181 * lorianne, 257 * lorianne, 169 * lorianne);
  twilah.bezierCurveTo(260 * lorianne, 157 * lorianne, 254 * lorianne, 149 * lorianne, 243 * lorianne, 141 * lorianne);
  twilah.closePath();
  fill_path(twilah, undefined, takijah[8], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(39 * lorianne, 66 * lorianne);
  twilah.bezierCurveTo(57 * lorianne, 107 * lorianne, 63 * lorianne, 96 * lorianne, 120 * lorianne, 106 * lorianne);
  twilah.bezierCurveTo(154 * lorianne, 112 * lorianne, 163 * lorianne, 116 * lorianne, 174 * lorianne, 135 * lorianne);
  twilah.bezierCurveTo(180 * lorianne, 109 * lorianne, 191 * lorianne, 113 * lorianne, 237 * lorianne, 103 * lorianne);
  twilah.bezierCurveTo(276 * lorianne, 100 * lorianne, 289 * lorianne, 94 * lorianne, 301 * lorianne, 67 * lorianne);
  twilah.bezierCurveTo(317 * lorianne, 112 * lorianne, 301 * lorianne, 141 * lorianne, 274 * lorianne, 139 * lorianne);
  twilah.bezierCurveTo(204 * lorianne, 166 * lorianne, 197 * lorianne, 169 * lorianne, 173 * lorianne, 183 * lorianne);
  twilah.bezierCurveTo(170 * lorianne, 183 * lorianne, 170 * lorianne, 183 * lorianne, 167 * lorianne, 183 * lorianne);
  twilah.bezierCurveTo(132 * lorianne, 160 * lorianne, 112 * lorianne, 156 * lorianne, 73 * lorianne, 141 * lorianne);
  twilah.bezierCurveTo(43 * lorianne, 146 * lorianne, 27 * lorianne, 120 * lorianne, 39 * lorianne, 66 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[7], takijah[8], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(115 * lorianne, 185 * lorianne);
  twilah.bezierCurveTo(115 * lorianne, 200 * lorianne, 118 * lorianne, 206 * lorianne, 124 * lorianne, 212 * lorianne);
  twilah.bezierCurveTo(133 * lorianne, 223 * lorianne, 132 * lorianne, 231 * lorianne, 121 * lorianne, 230 * lorianne);
  twilah.bezierCurveTo(108 * lorianne, 226 * lorianne, 108 * lorianne, 215 * lorianne, 107 * lorianne, 209 * lorianne);
  twilah.bezierCurveTo(106 * lorianne, 201 * lorianne, 110 * lorianne, 196 * lorianne, 114 * lorianne, 185 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[3], takijah[4], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(226 * lorianne, 186 * lorianne);
  twilah.bezierCurveTo(234 * lorianne, 201 * lorianne, 238 * lorianne, 209 * lorianne, 228 * lorianne, 225 * lorianne);
  twilah.bezierCurveTo(223 * lorianne, 233 * lorianne, 213 * lorianne, 233 * lorianne, 211 * lorianne, 226 * lorianne);
  twilah.bezierCurveTo(206 * lorianne, 219 * lorianne, 217 * lorianne, 216 * lorianne, 221 * lorianne, 207 * lorianne);
  twilah.bezierCurveTo(225 * lorianne, 196 * lorianne, 225 * lorianne, 191 * lorianne, 226 * lorianne, 186 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[3], takijah[4], 8 * lorianne);
  twilah.beginPath();
  twilah.lineCap = "round";
  twilah.lineJoin = "round";
  twilah.moveTo(172 * lorianne, 110 * lorianne);
  twilah.bezierCurveTo(189 * lorianne, 153 * lorianne, 192 * lorianne, 160 * lorianne, 188 * lorianne, 175 * lorianne);
  twilah.bezierCurveTo(183 * lorianne, 190 * lorianne, 176 * lorianne, 197 * lorianne, 165 * lorianne, 191 * lorianne);
  twilah.bezierCurveTo(153 * lorianne, 181 * lorianne, 152 * lorianne, 166 * lorianne, 157 * lorianne, 151 * lorianne);
  twilah.bezierCurveTo(164.5 * lorianne, 131 * lorianne, 164.5 * lorianne, 131 * lorianne, 172 * lorianne, 111 * lorianne);
  twilah.closePath();
  fill_path(twilah, takijah[3], takijah[4], 8 * lorianne);
  return pamalia;
}
function create_fir_one(kaelia, lateafa) {
  var veera = document.createElement("canvas");
  var rain = veera.getContext("2d");
  veera.width = 149 * kaelia;
  veera.height = 153 * kaelia;
  rain.globalAlpha = .5;
  circle(rain, 74.5 * kaelia, 85 * kaelia, 66 * kaelia);
  fill_path(rain, lateafa[0]);
  rain.globalAlpha = 1;
  circle(rain, 75.5 * kaelia, 72.5 * kaelia, 67 * kaelia);
  fill_path(rain, lateafa[1], lateafa[2], 4 * kaelia);
  circle(rain, 75.5 * kaelia, 73.5 * kaelia, 54 * kaelia);
  fill_path(rain, lateafa[3]);
  rain.globalAlpha = .5;
  circle(rain, 74.5 * kaelia, 80.5 * kaelia, 39 * kaelia);
  fill_path(rain, lateafa[4]);
  rain.globalAlpha = 1;
  circle(rain, 74.5 * kaelia, 74.5 * kaelia, 37 * kaelia);
  fill_path(rain, lateafa[5]);
  return veera;
}
function create_fir_two(jakerra, jakkson) {
  var josafat = document.createElement("canvas");
  var jode = josafat.getContext("2d");
  josafat.width = 173 * jakerra;
  josafat.height = 178 * jakerra;
  jode.globalAlpha = .5;
  circle(jode, 86.5 * jakerra, 98 * jakerra, 80 * jakerra);
  fill_path(jode, jakkson[0]);
  jode.globalAlpha = 1;
  circle(jode, 86.5 * jakerra, 89 * jakerra, 81 * jakerra);
  fill_path(jode, jakkson[1], jakkson[2], 4 * jakerra);
  circle(jode, 86.5 * jakerra, 86 * jakerra, 59 * jakerra);
  fill_path(jode, jakkson[3], jakkson[4], 4 * jakerra);
  jode.globalAlpha = .5;
  circle(jode, 86.5 * jakerra, 95 * jakerra, 34 * jakerra);
  fill_path(jode, jakkson[0]);
  jode.globalAlpha = 1;
  circle(jode, 86.5 * jakerra, 89 * jakerra, 34 * jakerra);
  fill_path(jode, jakkson[5]);
  return josafat;
}
function create_fir_three(azana, serriah) {
  var berek = document.createElement("canvas");
  var makynzee = berek.getContext("2d");
  berek.width = 253 * azana;
  berek.height = 260 * azana;
  makynzee.globalAlpha = .5;
  circle(makynzee, 126.5 * azana, 134 * azana, 119 * azana);
  fill_path(makynzee, serriah[0]);
  makynzee.globalAlpha = 1;
  circle(makynzee, 126.5 * azana, 124 * azana, 119 * azana);
  fill_path(makynzee, serriah[1], serriah[2], 4 * azana);
  circle(makynzee, 126.5 * azana, 127 * azana, 100 * azana);
  fill_path(makynzee, serriah[3]);
  makynzee.globalAlpha = .5;
  circle(makynzee, 126.5 * azana, 135 * azana, 81 * azana);
  fill_path(makynzee, serriah[0]);
  makynzee.globalAlpha = 1;
  circle(makynzee, 126.5 * azana, 125 * azana, 84 * azana);
  fill_path(makynzee, serriah[4], serriah[5], 4 * azana);
  circle(makynzee, 126.5 * azana, 125 * azana, 61 * azana);
  fill_path(makynzee, serriah[6], serriah[7], 4 * azana);
  makynzee.globalAlpha = .5;
  circle(makynzee, 126.5 * azana, 134 * azana, 40 * azana);
  fill_path(makynzee, serriah[8]);
  makynzee.globalAlpha = 1;
  circle(makynzee, 126.5 * azana, 125 * azana, 40 * azana);
  fill_path(makynzee, serriah[9]);
  return berek;
}
function create_amethyst(anmar, jaslinn, blondina) {
  var marcie = document.createElement("canvas");
  var hennessi = marcie.getContext("2d");
  marcie.width = 139 * anmar;
  marcie.height = 135 * anmar;
  hennessi.translate(0, 10 * anmar);
  hennessi.globalAlpha = jaslinn ? .5 : 1;
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(32 * anmar, 77 * anmar);
  hennessi.bezierCurveTo(6 * anmar, 41 * anmar, 6 * anmar, 33 * anmar, 12 * anmar, 27 * anmar);
  hennessi.bezierCurveTo(27 * anmar, 6 * anmar, 28 * anmar, 6 * anmar, 37 * anmar, 6 * anmar);
  hennessi.bezierCurveTo(62 * anmar, 3 * anmar, 64 * anmar, 5 * anmar, 67 * anmar, 13 * anmar);
  hennessi.bezierCurveTo(80 * anmar, 36 * anmar, 73.5 * anmar, 25 * anmar, 80 * anmar, 37 * anmar);
  hennessi.bezierCurveTo(73.5 * anmar, 54 * anmar, 65 * anmar, 74 * anmar, 67 * anmar, 71 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[0]);
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(65 * anmar, 37 * anmar);
  hennessi.bezierCurveTo(105 * anmar, 40 * anmar, 113 * anmar, 39 * anmar, 117 * anmar, 48 * anmar);
  hennessi.bezierCurveTo(126 * anmar, 70 * anmar, 128 * anmar, 72 * anmar, 124 * anmar, 80 * anmar);
  hennessi.bezierCurveTo(112 * anmar, 101 * anmar, 110 * anmar, 104 * anmar, 99 * anmar, 104 * anmar);
  hennessi.bezierCurveTo(59 * anmar, 100 * anmar, 55 * anmar, 99 * anmar, 56 * anmar, 99 * anmar);
  hennessi.bezierCurveTo(47.5 * anmar, 79 * anmar, 45 * anmar, 66 * anmar, 39 * anmar, 59 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[0]);
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(30 * anmar, 63 * anmar);
  hennessi.bezierCurveTo(5 * anmar, 99 * anmar, 5 * anmar, 101 * anmar, 8 * anmar, 103 * anmar);
  hennessi.bezierCurveTo(19 * anmar, 123 * anmar, 22 * anmar, 125 * anmar, 28 * anmar, 126 * anmar);
  hennessi.bezierCurveTo(57 * anmar, 127 * anmar, 55 * anmar, 127 * anmar, 58 * anmar, 120 * anmar);
  hennessi.bezierCurveTo(82 * anmar, 86 * anmar, 83 * anmar, 78 * anmar, 82 * anmar, 87 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[0]);
  hennessi.translate(0, -10 * anmar);
  hennessi.globalAlpha = 1;
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(32 * anmar, 77 * anmar);
  hennessi.bezierCurveTo(6 * anmar, 41 * anmar, 6 * anmar, 33 * anmar, 12 * anmar, 27 * anmar);
  hennessi.bezierCurveTo(27 * anmar, 6 * anmar, 28 * anmar, 6 * anmar, 37 * anmar, 6 * anmar);
  hennessi.bezierCurveTo(62 * anmar, 3 * anmar, 64 * anmar, 5 * anmar, 67 * anmar, 13 * anmar);
  hennessi.bezierCurveTo(80 * anmar, 36 * anmar, 73.5 * anmar, 25 * anmar, 80 * anmar, 37 * anmar);
  hennessi.bezierCurveTo(73.5 * anmar, 54 * anmar, 65 * anmar, 74 * anmar, 67 * anmar, 71 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[1]);
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(65 * anmar, 37 * anmar);
  hennessi.bezierCurveTo(105 * anmar, 40 * anmar, 113 * anmar, 39 * anmar, 117 * anmar, 48 * anmar);
  hennessi.bezierCurveTo(126 * anmar, 70 * anmar, 128 * anmar, 72 * anmar, 124 * anmar, 80 * anmar);
  hennessi.bezierCurveTo(112 * anmar, 101 * anmar, 110 * anmar, 104 * anmar, 99 * anmar, 104 * anmar);
  hennessi.bezierCurveTo(59 * anmar, 100 * anmar, 55 * anmar, 99 * anmar, 56 * anmar, 99 * anmar);
  hennessi.bezierCurveTo(47.5 * anmar, 79 * anmar, 45 * anmar, 66 * anmar, 39 * anmar, 59 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[1]);
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(30 * anmar, 63 * anmar);
  hennessi.bezierCurveTo(5 * anmar, 99 * anmar, 5 * anmar, 101 * anmar, 8 * anmar, 103 * anmar);
  hennessi.bezierCurveTo(19 * anmar, 123 * anmar, 22 * anmar, 125 * anmar, 28 * anmar, 126 * anmar);
  hennessi.bezierCurveTo(57 * anmar, 127 * anmar, 55 * anmar, 127 * anmar, 58 * anmar, 120 * anmar);
  hennessi.bezierCurveTo(82 * anmar, 86 * anmar, 83 * anmar, 78 * anmar, 82 * anmar, 87 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[1]);
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(80 * anmar, 38 * anmar);
  hennessi.bezierCurveTo(72.5 * anmar, 52 * anmar, 72.5 * anmar, 52 * anmar, 65 * anmar, 66 * anmar);
  hennessi.bezierCurveTo(47.5 * anmar, 37 * anmar, 47.5 * anmar, 37 * anmar, 30 * anmar, 7 * anmar);
  hennessi.bezierCurveTo(48 * anmar, 4 * anmar, 57 * anmar, 4 * anmar, 64 * anmar, 10 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[2]);
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(65 * anmar, 65 * anmar);
  hennessi.bezierCurveTo(125 * anmar, 73 * anmar, 95.5 * anmar, 69 * anmar, 126 * anmar, 73 * anmar);
  hennessi.bezierCurveTo(119 * anmar, 98 * anmar, 106 * anmar, 104 * anmar, 98 * anmar, 103 * anmar);
  hennessi.bezierCurveTo(84.5 * anmar, 102 * anmar, 84.5 * anmar, 102 * anmar, 71 * anmar, 101 * anmar);
  hennessi.bezierCurveTo(64 * anmar, 86 * anmar, 64 * anmar, 86 * anmar, 57 * anmar, 70 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[2]);
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(27 * anmar, 69 * anmar);
  hennessi.bezierCurveTo(64 * anmar, 65 * anmar, 46 * anmar, 67 * anmar, 65 * anmar, 65 * anmar);
  hennessi.bezierCurveTo(43.5 * anmar, 94 * anmar, 43.5 * anmar, 94 * anmar, 22 * anmar, 123 * anmar);
  hennessi.bezierCurveTo(8 * anmar, 103 * anmar, 8 * anmar, 103 * anmar, 9 * anmar, 103 * anmar);
  hennessi.bezierCurveTo(5 * anmar, 98 * anmar, 11 * anmar, 89 * anmar, 26 * anmar, 70 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[2]);
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(26 * anmar, 69 * anmar);
  hennessi.bezierCurveTo(65 * anmar, 60 * anmar, 45 * anmar, 65 * anmar, 64 * anmar, 60 * anmar);
  hennessi.bezierCurveTo(63 * anmar, 65 * anmar, 63 * anmar, 65 * anmar, 62 * anmar, 70 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[2]);
  hennessi.beginPath();
  hennessi.lineCap = "round";
  hennessi.lineJoin = "round";
  hennessi.moveTo(80 * anmar, 38 * anmar);
  hennessi.bezierCurveTo(68 * anmar, 70 * anmar, 75 * anmar, 53 * anmar, 70 * anmar, 68 * anmar);
  hennessi.bezierCurveTo(65 * anmar, 67 * anmar, 65 * anmar, 67 * anmar, 60 * anmar, 65 * anmar);
  hennessi.closePath();
  fill_path(hennessi, blondina[2]);
  return marcie;
}
function create_dragon_ground(rushi, latif) {
  var aiyan = document.createElement("canvas");
  var pike = aiyan.getContext("2d");
  aiyan.width = 100 * rushi;
  aiyan.height = 100 * rushi;
  pike.globalAlpha = .5;
  pike.fillStyle = latif[0];
  pike.fillRect(0, 0, aiyan.width, aiyan.height);
  return aiyan;
}
function create_snow_one(rope, kiali) {
  var zeshaun = document.createElement("canvas");
  var chakelia = zeshaun.getContext("2d");
  zeshaun.width = 120 * rope;
  zeshaun.height = 300 * rope;
  chakelia.translate(-80 * rope, -20);
  chakelia.beginPath();
  chakelia.lineCap = "round";
  chakelia.lineJoin = "round";
  chakelia.moveTo(200.5 * rope, 14.953125 * rope);
  chakelia.bezierCurveTo(203 * rope, 171.953125 * rope, 203 * rope, 171.953125 * rope, 205.5 * rope, 328.953125 * rope);
  chakelia.bezierCurveTo(188.5 * rope, 257.953125 * rope, 164.5 * rope, 216.953125 * rope, 166.5 * rope, 176.953125 * rope);
  chakelia.bezierCurveTo(168.5 * rope, 133.953125 * rope, 198.5 * rope, 98.953125 * rope, 200.5 * rope, 14.953125 * rope);
  chakelia.closePath();
  fill_path(chakelia, kiali[0]);
  return zeshaun;
}
function create_snow_two(ned, vyacheslav) {
  var ladia = document.createElement("canvas");
  var goodness = ladia.getContext("2d");
  ladia.width = 120 * ned;
  ladia.height = 300 * ned;
  goodness.translate(-200 * ned, -40 * ned);
  goodness.beginPath();
  goodness.lineCap = "round";
  goodness.lineJoin = "round";
  goodness.moveTo(344 * ned, 18.40625 * ned);
  goodness.bezierCurveTo(345 * ned, 361.40625 * ned, 344 * ned, 191.40625 * ned, 344 * ned, 364.40625 * ned);
  goodness.bezierCurveTo(261 * ned, 275.40625 * ned, 274 * ned, 259.40625 * ned, 229 * ned, 213.40625 * ned);
  goodness.bezierCurveTo(199 * ned, 187.40625 * ned, 222 * ned, 133.40625 * ned, 273 * ned, 100.40625 * ned);
  goodness.bezierCurveTo(321 * ned, 71.40625 * ned, 327 * ned, 34.40625 * ned, 344 * ned, 18.40625 * ned);
  goodness.closePath();
  fill_path(goodness, vyacheslav[0]);
  goodness.beginPath();
  goodness.lineCap = "round";
  goodness.lineJoin = "round";
  goodness.moveTo(335 * ned, 38.072906494140625 * ned);
  goodness.bezierCurveTo(307 * ned, 62.072906494140625 * ned, 291 * ned, 60.072906494140625 * ned, 262 * ned, 68.07290649414062 * ned);
  goodness.bezierCurveTo(223 * ned, 80.07290649414062 * ned, 225 * ned, 111.07290649414062 * ned, 264 * ned, 139.07290649414062 * ned);
  goodness.closePath();
  fill_path(goodness, vyacheslav[0]);
  return ladia;
}
function create_snow_three(kyan, katrice) {
  var shavona = document.createElement("canvas");
  var ishaan = shavona.getContext("2d");
  shavona.width = 120 * kyan;
  shavona.height = 320 * kyan;
  ishaan.translate(-60 * kyan, -15 * kyan);
  ishaan.beginPath();
  ishaan.lineCap = "round";
  ishaan.lineJoin = "round";
  ishaan.moveTo(188.5 * kyan, 3.953125 * kyan);
  ishaan.bezierCurveTo(188.5 * kyan, 171.453125 * kyan, 188.5 * kyan, 171.453125 * kyan, 188.5 * kyan, 338.953125 * kyan);
  ishaan.bezierCurveTo(162.5 * kyan, 268.953125 * kyan, 145.5 * kyan, 265.953125 * kyan, 116.5 * kyan, 244.953125 * kyan);
  ishaan.bezierCurveTo(67.5 * kyan, 204.953125 * kyan, 87.5 * kyan, 160.953125 * kyan, 113.5 * kyan, 125.953125 * kyan);
  ishaan.bezierCurveTo(141.5 * kyan, 90.953125 * kyan, 176.5 * kyan, 56.953125 * kyan, 188.5 * kyan, 3.953125 * kyan);
  ishaan.closePath();
  fill_path(ishaan, katrice[0]);
  return shavona;
}
function create_snow_four(keiontay, hermond) {
  var deyshawn = document.createElement("canvas");
  var lerae = deyshawn.getContext("2d");
  deyshawn.width = 120 * keiontay;
  deyshawn.height = 330 * keiontay;
  lerae.translate(-60 * keiontay, -10 * keiontay);
  lerae.beginPath();
  lerae.lineCap = "round";
  lerae.lineJoin = "round";
  lerae.moveTo(188.5 * keiontay, 7.953125 * keiontay);
  lerae.bezierCurveTo(188.5 * keiontay, 334.953125 * keiontay, 188.5 * keiontay, 332.953125 * keiontay, 188.5 * keiontay, 339.953125 * keiontay);
  lerae.bezierCurveTo(166.5 * keiontay, 295.953125 * keiontay, 145.5 * keiontay, 295.953125 * keiontay, 139.5 * keiontay, 282.953125 * keiontay);
  lerae.bezierCurveTo(124.5 * keiontay, 244.953125 * keiontay, 139.5 * keiontay, 243.953125 * keiontay, 131.5 * keiontay, 212.953125 * keiontay);
  lerae.bezierCurveTo(118.5 * keiontay, 161.953125 * keiontay, 69.5 * keiontay, 156.953125 * keiontay, 74.5 * keiontay, 92.953125 * keiontay);
  lerae.bezierCurveTo(85.5 * keiontay, 41.953125 * keiontay, 158.5 * keiontay, 49.953125 * keiontay, 188.5 * keiontay, 7.953125 * keiontay);
  lerae.closePath();
  fill_path(lerae, hermond[0]);
  return deyshawn;
}
function create_snow_five(shalini, starrla) {
  var linsie = document.createElement("canvas");
  var jerimi = linsie.getContext("2d");
  linsie.width = 48 * shalini;
  linsie.height = 47 * shalini;
  jerimi.beginPath();
  jerimi.lineCap = "round";
  jerimi.lineJoin = "round";
  jerimi.moveTo(7.1875 * shalini, 25.434661865234375 * shalini);
  jerimi.bezierCurveTo(11.1875 * shalini, 13.434661865234375 * shalini, 18.1875 * shalini, 8.434661865234375 * shalini, 32.1875 * shalini, 10.434661865234375 * shalini);
  jerimi.bezierCurveTo(45.1875 * shalini, 14.434661865234375 * shalini, 41.1875 * shalini, 24.434661865234375 * shalini, 36.1875 * shalini, 30.434661865234375 * shalini);
  jerimi.bezierCurveTo(22.1875 * shalini, 42.434661865234375 * shalini, 2.1875 * shalini, 41.434661865234375 * shalini, 7.1875 * shalini, 25.434661865234375 * shalini);
  jerimi.closePath();
  fill_path(jerimi, starrla[0]);
  return linsie;
}
function create_snow_six(tylerjames, jeliel) {
  var gabria = document.createElement("canvas");
  var zennie = gabria.getContext("2d");
  gabria.width = 120 * tylerjames;
  gabria.height = 280 * tylerjames;
  zennie.translate(-100 * tylerjames, -20 * tylerjames);
  zennie.beginPath();
  zennie.lineCap = "round";
  zennie.lineJoin = "round";
  zennie.moveTo(228.5 * tylerjames, 331.953125 * tylerjames);
  zennie.bezierCurveTo(228.5 * tylerjames, 12.953125 * tylerjames, 228.5 * tylerjames, 171.453125 * tylerjames, 228.5 * tylerjames, 10.953125 * tylerjames);
  zennie.bezierCurveTo(196.5 * tylerjames, 76.953125 * tylerjames, 206.5 * tylerjames, 78.953125 * tylerjames, 191.5 * tylerjames, 114.953125 * tylerjames);
  zennie.bezierCurveTo(162.5 * tylerjames, 170.953125 * tylerjames, 206.5 * tylerjames, 220.953125 * tylerjames, 210.5 * tylerjames, 251.953125 * tylerjames);
  zennie.bezierCurveTo(218.5 * tylerjames, 287.953125 * tylerjames, 220.5 * tylerjames, 291.953125 * tylerjames, 228.5 * tylerjames, 331.953125 * tylerjames);
  zennie.closePath();
  fill_path(zennie, jeliel[0]);
  return gabria;
}
function create_snow_sept(sushant, vonya) {
  var nalaya = document.createElement("canvas");
  var toinette = nalaya.getContext("2d");
  nalaya.width = 33 * sushant;
  nalaya.height = 35 * sushant;
  toinette.beginPath();
  toinette.lineCap = "round";
  toinette.lineJoin = "round";
  toinette.moveTo(12.75 * sushant, 7.1328125 * sushant);
  toinette.bezierCurveTo(26.75 * sushant, 8.1328125 * sushant, 27.75 * sushant, 14.1328125 * sushant, 24.75 * sushant, 23.1328125 * sushant);
  toinette.bezierCurveTo(19.75 * sushant, 31.1328125 * sushant, 15.75 * sushant, 33.1328125 * sushant, 6.75 * sushant, 26.1328125 * sushant);
  toinette.bezierCurveTo(.75 * sushant, 19.1328125 * sushant, 4.75 * sushant, 8.1328125 * sushant, 12.75 * sushant, 7.1328125 * sushant);
  toinette.closePath();
  fill_path(toinette, vonya[0]);
  return nalaya;
}
function create_snow_step(waris, katrianna) {
  var anilah = document.createElement("canvas");
  var shealee = anilah.getContext("2d");
  anilah.width = 20 * waris;
  anilah.height = 35 * waris;
  round_rect(shealee, 0, 0, 20, 35, 7);
  fill_path(shealee, katrianna[0]);
  return anilah;
}
function create_winter_fox(ziyani, aamarion) {
  var kelhani = document.createElement("canvas");
  var rogel = kelhani.getContext("2d");
  kelhani.width = 161 * ziyani;
  kelhani.height = 190 * ziyani;
  rogel.globalAlpha = .5;
  rogel.translate(0, 8);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(9 * ziyani, 93 * ziyani);
  rogel.bezierCurveTo(17 * ziyani, 95 * ziyani, 19 * ziyani, 95 * ziyani, 21 * ziyani, 95 * ziyani);
  rogel.bezierCurveTo(9 * ziyani, 83 * ziyani, 17 * ziyani, 93 * ziyani, 4 * ziyani, 76 * ziyani);
  rogel.bezierCurveTo(11 * ziyani, 75 * ziyani, 11 * ziyani, 75 * ziyani, 18 * ziyani, 75 * ziyani);
  rogel.bezierCurveTo(13 * ziyani, 67 * ziyani, 13 * ziyani, 67 * ziyani, 7 * ziyani, 59 * ziyani);
  rogel.bezierCurveTo(14 * ziyani, 59 * ziyani, 14 * ziyani, 59 * ziyani, 21 * ziyani, 59 * ziyani);
  rogel.bezierCurveTo(46 * ziyani, 35 * ziyani, 35 * ziyani, 45 * ziyani, 49 * ziyani, 31 * ziyani);
  rogel.bezierCurveTo(53 * ziyani, 24 * ziyani, 51 * ziyani, 21 * ziyani, 51 * ziyani, 16 * ziyani);
  rogel.bezierCurveTo(63 * ziyani, 23 * ziyani, 63 * ziyani, 24 * ziyani, 69 * ziyani, 29 * ziyani);
  rogel.bezierCurveTo(76 * ziyani, 7 * ziyani, 75 * ziyani, 11 * ziyani, 76 * ziyani, 6 * ziyani);
  rogel.bezierCurveTo(81 * ziyani, 12 * ziyani, 84 * ziyani, 18 * ziyani, 89 * ziyani, 27 * ziyani);
  rogel.bezierCurveTo(95 * ziyani, 25 * ziyani, 100 * ziyani, 16 * ziyani, 105 * ziyani, 14 * ziyani);
  rogel.bezierCurveTo(103 * ziyani, 25 * ziyani, 111 * ziyani, 33 * ziyani, 110 * ziyani, 34 * ziyani);
  rogel.bezierCurveTo(123 * ziyani, 48 * ziyani, 123 * ziyani, 48 * ziyani, 136 * ziyani, 62 * ziyani);
  rogel.bezierCurveTo(142 * ziyani, 60 * ziyani, 147 * ziyani, 59 * ziyani, 155 * ziyani, 58 * ziyani);
  rogel.bezierCurveTo(147 * ziyani, 65 * ziyani, 147 * ziyani, 65 * ziyani, 139 * ziyani, 73 * ziyani);
  rogel.bezierCurveTo(145 * ziyani, 73 * ziyani, 145 * ziyani, 73 * ziyani, 151 * ziyani, 73 * ziyani);
  rogel.bezierCurveTo(145 * ziyani, 80 * ziyani, 145 * ziyani, 80 * ziyani, 138 * ziyani, 87 * ziyani);
  rogel.bezierCurveTo(144 * ziyani, 88 * ziyani, 144 * ziyani, 88 * ziyani, 150 * ziyani, 89 * ziyani);
  rogel.bezierCurveTo(125 * ziyani, 103 * ziyani, 125 * ziyani, 125 * ziyani, 113 * ziyani, 141 * ziyani);
  rogel.bezierCurveTo(92 * ziyani, 178 * ziyani, 85 * ziyani, 177 * ziyani, 76 * ziyani, 178 * ziyani);
  rogel.bezierCurveTo(64 * ziyani, 179 * ziyani, 51 * ziyani, 164 * ziyani, 35 * ziyani, 131 * ziyani);
  rogel.bezierCurveTo(18 * ziyani, 95 * ziyani, 13 * ziyani, 99 * ziyani, 8 * ziyani, 93 * ziyani);
  rogel.closePath();
  fill_path(rogel, aamarion[0]);
  rogel.globalAlpha = 1;
  rogel.translate(0, -8);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(9 * ziyani, 93 * ziyani);
  rogel.bezierCurveTo(17 * ziyani, 95 * ziyani, 19 * ziyani, 95 * ziyani, 21 * ziyani, 95 * ziyani);
  rogel.bezierCurveTo(9 * ziyani, 83 * ziyani, 17 * ziyani, 93 * ziyani, 4 * ziyani, 76 * ziyani);
  rogel.bezierCurveTo(11 * ziyani, 75 * ziyani, 11 * ziyani, 75 * ziyani, 18 * ziyani, 75 * ziyani);
  rogel.bezierCurveTo(13 * ziyani, 67 * ziyani, 13 * ziyani, 67 * ziyani, 7 * ziyani, 59 * ziyani);
  rogel.bezierCurveTo(14 * ziyani, 59 * ziyani, 14 * ziyani, 59 * ziyani, 21 * ziyani, 59 * ziyani);
  rogel.bezierCurveTo(46 * ziyani, 35 * ziyani, 35 * ziyani, 45 * ziyani, 49 * ziyani, 31 * ziyani);
  rogel.bezierCurveTo(53 * ziyani, 24 * ziyani, 51 * ziyani, 21 * ziyani, 51 * ziyani, 16 * ziyani);
  rogel.bezierCurveTo(63 * ziyani, 23 * ziyani, 63 * ziyani, 24 * ziyani, 69 * ziyani, 29 * ziyani);
  rogel.bezierCurveTo(76 * ziyani, 7 * ziyani, 75 * ziyani, 11 * ziyani, 76 * ziyani, 6 * ziyani);
  rogel.bezierCurveTo(81 * ziyani, 12 * ziyani, 84 * ziyani, 18 * ziyani, 89 * ziyani, 27 * ziyani);
  rogel.bezierCurveTo(95 * ziyani, 25 * ziyani, 100 * ziyani, 16 * ziyani, 105 * ziyani, 14 * ziyani);
  rogel.bezierCurveTo(103 * ziyani, 25 * ziyani, 111 * ziyani, 33 * ziyani, 110 * ziyani, 34 * ziyani);
  rogel.bezierCurveTo(123 * ziyani, 48 * ziyani, 123 * ziyani, 48 * ziyani, 136 * ziyani, 62 * ziyani);
  rogel.bezierCurveTo(142 * ziyani, 60 * ziyani, 147 * ziyani, 59 * ziyani, 155 * ziyani, 58 * ziyani);
  rogel.bezierCurveTo(147 * ziyani, 65 * ziyani, 147 * ziyani, 65 * ziyani, 139 * ziyani, 73 * ziyani);
  rogel.bezierCurveTo(145 * ziyani, 73 * ziyani, 145 * ziyani, 73 * ziyani, 151 * ziyani, 73 * ziyani);
  rogel.bezierCurveTo(145 * ziyani, 80 * ziyani, 145 * ziyani, 80 * ziyani, 138 * ziyani, 87 * ziyani);
  rogel.bezierCurveTo(144 * ziyani, 88 * ziyani, 144 * ziyani, 88 * ziyani, 150 * ziyani, 89 * ziyani);
  rogel.bezierCurveTo(125 * ziyani, 103 * ziyani, 125 * ziyani, 125 * ziyani, 113 * ziyani, 141 * ziyani);
  rogel.bezierCurveTo(92 * ziyani, 178 * ziyani, 85 * ziyani, 177 * ziyani, 76 * ziyani, 178 * ziyani);
  rogel.bezierCurveTo(64 * ziyani, 179 * ziyani, 51 * ziyani, 164 * ziyani, 35 * ziyani, 131 * ziyani);
  rogel.bezierCurveTo(18 * ziyani, 95 * ziyani, 13 * ziyani, 99 * ziyani, 8 * ziyani, 93 * ziyani);
  rogel.closePath();
  fill_path(rogel, aamarion[1]);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(28 * ziyani, 63 * ziyani);
  rogel.bezierCurveTo(23 * ziyani, 54 * ziyani, 24 * ziyani, 47 * ziyani, 26 * ziyani, 37 * ziyani);
  rogel.bezierCurveTo(28 * ziyani, 29 * ziyani, 31 * ziyani, 31 * ziyani, 41 * ziyani, 35 * ziyani);
  rogel.bezierCurveTo(52 * ziyani, 45 * ziyani, 55 * ziyani, 51 * ziyani, 57 * ziyani, 53 * ziyani);
  rogel.bezierCurveTo(50 * ziyani, 50 * ziyani, 44 * ziyani, 47 * ziyani, 43 * ziyani, 48 * ziyani);
  rogel.bezierCurveTo(43 * ziyani, 52 * ziyani, 43 * ziyani, 52 * ziyani, 42 * ziyani, 57 * ziyani);
  rogel.bezierCurveTo(38 * ziyani, 54 * ziyani, 38 * ziyani, 54 * ziyani, 33 * ziyani, 51 * ziyani);
  rogel.bezierCurveTo(34 * ziyani, 56 * ziyani, 34 * ziyani, 56 * ziyani, 34 * ziyani, 61 * ziyani);
  rogel.closePath();
  fill_path(rogel, aamarion[3]);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(99 * ziyani, 55 * ziyani);
  rogel.bezierCurveTo(107 * ziyani, 43 * ziyani, 113 * ziyani, 39 * ziyani, 121 * ziyani, 34 * ziyani);
  rogel.bezierCurveTo(130 * ziyani, 29 * ziyani, 130 * ziyani, 34 * ziyani, 130 * ziyani, 42 * ziyani);
  rogel.bezierCurveTo(131 * ziyani, 57 * ziyani, 128 * ziyani, 61 * ziyani, 129 * ziyani, 63 * ziyani);
  rogel.bezierCurveTo(124 * ziyani, 62 * ziyani, 124 * ziyani, 62 * ziyani, 119 * ziyani, 61 * ziyani);
  rogel.bezierCurveTo(119 * ziyani, 56 * ziyani, 120 * ziyani, 61 * ziyani, 118 * ziyani, 52 * ziyani);
  rogel.bezierCurveTo(115 * ziyani, 55 * ziyani, 111 * ziyani, 59 * ziyani, 111 * ziyani, 58 * ziyani);
  rogel.bezierCurveTo(110 * ziyani, 54 * ziyani, 109 * ziyani, 57 * ziyani, 109 * ziyani, 51 * ziyani);
  rogel.closePath();
  fill_path(rogel, aamarion[3]);
  circle(rogel, 103 * ziyani, 110 * ziyani, 11 * ziyani);
  fill_path(rogel, aamarion[4]);
  circle(rogel, 55 * ziyani, 111 * ziyani, 11 * ziyani);
  fill_path(rogel, aamarion[4]);
  circle(rogel, 99 * ziyani, 107 * ziyani, 5 * ziyani);
  fill_path(rogel, aamarion[1]);
  circle(rogel, 51 * ziyani, 108 * ziyani, 5 * ziyani);
  fill_path(rogel, aamarion[1]);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(31 * ziyani, 121 * ziyani);
  rogel.bezierCurveTo(45 * ziyani, 128 * ziyani, 51 * ziyani, 133 * ziyani, 53 * ziyani, 141 * ziyani);
  rogel.bezierCurveTo(59 * ziyani, 161 * ziyani, 70 * ziyani, 173 * ziyani, 80 * ziyani, 169 * ziyani);
  rogel.bezierCurveTo(89 * ziyani, 172 * ziyani, 99 * ziyani, 149 * ziyani, 107 * ziyani, 133 * ziyani);
  rogel.bezierCurveTo(114 * ziyani, 122 * ziyani, 119 * ziyani, 123 * ziyani, 124 * ziyani, 119 * ziyani);
  rogel.bezierCurveTo(109 * ziyani, 148 * ziyani, 117 * ziyani, 133 * ziyani, 109 * ziyani, 147 * ziyani);
  rogel.bezierCurveTo(87 * ziyani, 180 * ziyani, 84 * ziyani, 179 * ziyani, 76 * ziyani, 178 * ziyani);
  rogel.bezierCurveTo(49 * ziyani, 173 * ziyani, 44 * ziyani, 149 * ziyani, 31 * ziyani, 121 * ziyani);
  rogel.closePath();
  fill_path(rogel, aamarion[5]);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.translate(-2, 0);
  rogel.moveTo(71 * ziyani, 162 * ziyani);
  rogel.bezierCurveTo(80 * ziyani, 155 * ziyani, 85 * ziyani, 159 * ziyani, 89 * ziyani, 164 * ziyani);
  rogel.bezierCurveTo(90 * ziyani, 171 * ziyani, 86 * ziyani, 173 * ziyani, 79 * ziyani, 173 * ziyani);
  rogel.bezierCurveTo(67 * ziyani, 172 * ziyani, 67 * ziyani, 168 * ziyani, 71 * ziyani, 162 * ziyani);
  rogel.closePath();
  fill_path(rogel, aamarion[3]);
  rogel.translate(2, 0);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(9 * ziyani, 93 * ziyani);
  rogel.bezierCurveTo(17 * ziyani, 95 * ziyani, 19 * ziyani, 95 * ziyani, 21 * ziyani, 95 * ziyani);
  rogel.bezierCurveTo(9 * ziyani, 83 * ziyani, 17 * ziyani, 93 * ziyani, 4 * ziyani, 76 * ziyani);
  rogel.bezierCurveTo(11 * ziyani, 75 * ziyani, 11 * ziyani, 75 * ziyani, 18 * ziyani, 75 * ziyani);
  rogel.bezierCurveTo(13 * ziyani, 67 * ziyani, 13 * ziyani, 67 * ziyani, 7 * ziyani, 59 * ziyani);
  rogel.bezierCurveTo(14 * ziyani, 59 * ziyani, 14 * ziyani, 59 * ziyani, 21 * ziyani, 59 * ziyani);
  rogel.bezierCurveTo(46 * ziyani, 35 * ziyani, 35 * ziyani, 45 * ziyani, 49 * ziyani, 31 * ziyani);
  rogel.bezierCurveTo(53 * ziyani, 24 * ziyani, 51 * ziyani, 21 * ziyani, 51 * ziyani, 16 * ziyani);
  rogel.bezierCurveTo(63 * ziyani, 23 * ziyani, 63 * ziyani, 24 * ziyani, 69 * ziyani, 29 * ziyani);
  rogel.bezierCurveTo(76 * ziyani, 7 * ziyani, 75 * ziyani, 11 * ziyani, 76 * ziyani, 6 * ziyani);
  rogel.bezierCurveTo(81 * ziyani, 12 * ziyani, 84 * ziyani, 18 * ziyani, 89 * ziyani, 27 * ziyani);
  rogel.bezierCurveTo(95 * ziyani, 25 * ziyani, 100 * ziyani, 16 * ziyani, 105 * ziyani, 14 * ziyani);
  rogel.bezierCurveTo(103 * ziyani, 25 * ziyani, 111 * ziyani, 33 * ziyani, 110 * ziyani, 34 * ziyani);
  rogel.bezierCurveTo(123 * ziyani, 48 * ziyani, 123 * ziyani, 48 * ziyani, 136 * ziyani, 62 * ziyani);
  rogel.bezierCurveTo(142 * ziyani, 60 * ziyani, 147 * ziyani, 59 * ziyani, 155 * ziyani, 58 * ziyani);
  rogel.bezierCurveTo(147 * ziyani, 65 * ziyani, 147 * ziyani, 65 * ziyani, 139 * ziyani, 73 * ziyani);
  rogel.bezierCurveTo(145 * ziyani, 73 * ziyani, 145 * ziyani, 73 * ziyani, 151 * ziyani, 73 * ziyani);
  rogel.bezierCurveTo(145 * ziyani, 80 * ziyani, 145 * ziyani, 80 * ziyani, 138 * ziyani, 87 * ziyani);
  rogel.bezierCurveTo(144 * ziyani, 88 * ziyani, 144 * ziyani, 88 * ziyani, 150 * ziyani, 89 * ziyani);
  rogel.bezierCurveTo(125 * ziyani, 103 * ziyani, 125 * ziyani, 125 * ziyani, 113 * ziyani, 141 * ziyani);
  rogel.bezierCurveTo(92 * ziyani, 178 * ziyani, 85 * ziyani, 177 * ziyani, 76 * ziyani, 178 * ziyani);
  rogel.bezierCurveTo(64 * ziyani, 179 * ziyani, 51 * ziyani, 164 * ziyani, 35 * ziyani, 131 * ziyani);
  rogel.bezierCurveTo(18 * ziyani, 95 * ziyani, 13 * ziyani, 99 * ziyani, 8 * ziyani, 93 * ziyani);
  rogel.closePath();
  fill_path(rogel, undefined, aamarion[2], 4 * ziyani);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(25 * ziyani, 63 * ziyani);
  rogel.bezierCurveTo(16 * ziyani, 58 * ziyani, 17 * ziyani, 51 * ziyani, 17 * ziyani, 33 * ziyani);
  rogel.bezierCurveTo(19 * ziyani, 12 * ziyani, 21 * ziyani, 12 * ziyani, 32 * ziyani, 17 * ziyani);
  rogel.bezierCurveTo(63 * ziyani, 31 * ziyani, 66 * ziyani, 45 * ziyani, 66 * ziyani, 54 * ziyani);
  fill_path(rogel, aamarion[1], aamarion[2], 4 * ziyani);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(91 * ziyani, 53 * ziyani);
  rogel.bezierCurveTo(91 * ziyani, 40 * ziyani, 98 * ziyani, 33 * ziyani, 121 * ziyani, 20 * ziyani);
  rogel.bezierCurveTo(137 * ziyani, 12 * ziyani, 137 * ziyani, 16 * ziyani, 139 * ziyani, 27 * ziyani);
  rogel.bezierCurveTo(141 * ziyani, 49 * ziyani, 140 * ziyani, 57 * ziyani, 134 * ziyani, 64 * ziyani);
  fill_path(rogel, aamarion[1], aamarion[2], 4 * ziyani);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(31 * ziyani, 63 * ziyani);
  rogel.bezierCurveTo(23 * ziyani, 54 * ziyani, 24 * ziyani, 47 * ziyani, 26 * ziyani, 37 * ziyani);
  rogel.bezierCurveTo(28 * ziyani, 29 * ziyani, 31 * ziyani, 31 * ziyani, 41 * ziyani, 35 * ziyani);
  rogel.bezierCurveTo(52 * ziyani, 45 * ziyani, 55 * ziyani, 51 * ziyani, 57 * ziyani, 53 * ziyani);
  rogel.bezierCurveTo(50 * ziyani, 50 * ziyani, 44 * ziyani, 47 * ziyani, 43 * ziyani, 48 * ziyani);
  rogel.bezierCurveTo(43 * ziyani, 52 * ziyani, 43 * ziyani, 52 * ziyani, 42 * ziyani, 57 * ziyani);
  rogel.bezierCurveTo(38 * ziyani, 54 * ziyani, 38 * ziyani, 54 * ziyani, 33 * ziyani, 51 * ziyani);
  rogel.bezierCurveTo(34 * ziyani, 56 * ziyani, 34 * ziyani, 56 * ziyani, 34 * ziyani, 61 * ziyani);
  rogel.closePath();
  fill_path(rogel, aamarion[3]);
  rogel.beginPath();
  rogel.lineCap = "round";
  rogel.lineJoin = "round";
  rogel.moveTo(99 * ziyani, 55 * ziyani);
  rogel.bezierCurveTo(107 * ziyani, 43 * ziyani, 113 * ziyani, 39 * ziyani, 121 * ziyani, 34 * ziyani);
  rogel.bezierCurveTo(130 * ziyani, 29 * ziyani, 130 * ziyani, 34 * ziyani, 130 * ziyani, 42 * ziyani);
  rogel.bezierCurveTo(131 * ziyani, 57 * ziyani, 128 * ziyani, 61 * ziyani, 129 * ziyani, 63 * ziyani);
  rogel.bezierCurveTo(124 * ziyani, 62 * ziyani, 124 * ziyani, 62 * ziyani, 119 * ziyani, 61 * ziyani);
  rogel.bezierCurveTo(119 * ziyani, 56 * ziyani, 120 * ziyani, 61 * ziyani, 118 * ziyani, 52 * ziyani);
  rogel.bezierCurveTo(115 * ziyani, 55 * ziyani, 111 * ziyani, 59 * ziyani, 111 * ziyani, 58 * ziyani);
  rogel.bezierCurveTo(110 * ziyani, 54 * ziyani, 109 * ziyani, 57 * ziyani, 109 * ziyani, 51 * ziyani);
  rogel.closePath();
  fill_path(rogel, aamarion[3]);
  return kelhani;
}
function create_hurt_fox_winter(evyonne, hermosa) {
  var shakonda = document.createElement("canvas");
  var maleeah = shakonda.getContext("2d");
  shakonda.width = 161 * evyonne;
  shakonda.height = 190 * evyonne;
  maleeah.beginPath();
  maleeah.lineCap = "round";
  maleeah.lineJoin = "round";
  maleeah.moveTo(9 * evyonne, 93 * evyonne);
  maleeah.bezierCurveTo(17 * evyonne, 95 * evyonne, 19 * evyonne, 95 * evyonne, 21 * evyonne, 95 * evyonne);
  maleeah.bezierCurveTo(9 * evyonne, 83 * evyonne, 17 * evyonne, 93 * evyonne, 4 * evyonne, 76 * evyonne);
  maleeah.bezierCurveTo(11 * evyonne, 75 * evyonne, 11 * evyonne, 75 * evyonne, 18 * evyonne, 75 * evyonne);
  maleeah.bezierCurveTo(13 * evyonne, 67 * evyonne, 13 * evyonne, 67 * evyonne, 7 * evyonne, 59 * evyonne);
  maleeah.bezierCurveTo(14 * evyonne, 59 * evyonne, 14 * evyonne, 59 * evyonne, 21 * evyonne, 59 * evyonne);
  maleeah.bezierCurveTo(46 * evyonne, 35 * evyonne, 35 * evyonne, 45 * evyonne, 49 * evyonne, 31 * evyonne);
  maleeah.bezierCurveTo(53 * evyonne, 24 * evyonne, 51 * evyonne, 21 * evyonne, 51 * evyonne, 16 * evyonne);
  maleeah.bezierCurveTo(63 * evyonne, 23 * evyonne, 63 * evyonne, 24 * evyonne, 69 * evyonne, 29 * evyonne);
  maleeah.bezierCurveTo(76 * evyonne, 7 * evyonne, 75 * evyonne, 11 * evyonne, 76 * evyonne, 6 * evyonne);
  maleeah.bezierCurveTo(81 * evyonne, 12 * evyonne, 84 * evyonne, 18 * evyonne, 89 * evyonne, 27 * evyonne);
  maleeah.bezierCurveTo(95 * evyonne, 25 * evyonne, 100 * evyonne, 16 * evyonne, 105 * evyonne, 14 * evyonne);
  maleeah.bezierCurveTo(103 * evyonne, 25 * evyonne, 111 * evyonne, 33 * evyonne, 110 * evyonne, 34 * evyonne);
  maleeah.bezierCurveTo(123 * evyonne, 48 * evyonne, 123 * evyonne, 48 * evyonne, 136 * evyonne, 62 * evyonne);
  maleeah.bezierCurveTo(142 * evyonne, 60 * evyonne, 147 * evyonne, 59 * evyonne, 155 * evyonne, 58 * evyonne);
  maleeah.bezierCurveTo(147 * evyonne, 65 * evyonne, 147 * evyonne, 65 * evyonne, 139 * evyonne, 73 * evyonne);
  maleeah.bezierCurveTo(145 * evyonne, 73 * evyonne, 145 * evyonne, 73 * evyonne, 151 * evyonne, 73 * evyonne);
  maleeah.bezierCurveTo(145 * evyonne, 80 * evyonne, 145 * evyonne, 80 * evyonne, 138 * evyonne, 87 * evyonne);
  maleeah.bezierCurveTo(144 * evyonne, 88 * evyonne, 144 * evyonne, 88 * evyonne, 150 * evyonne, 89 * evyonne);
  maleeah.bezierCurveTo(125 * evyonne, 103 * evyonne, 125 * evyonne, 125 * evyonne, 113 * evyonne, 141 * evyonne);
  maleeah.bezierCurveTo(92 * evyonne, 178 * evyonne, 85 * evyonne, 177 * evyonne, 76 * evyonne, 178 * evyonne);
  maleeah.bezierCurveTo(64 * evyonne, 179 * evyonne, 51 * evyonne, 164 * evyonne, 35 * evyonne, 131 * evyonne);
  maleeah.bezierCurveTo(18 * evyonne, 95 * evyonne, 13 * evyonne, 99 * evyonne, 8 * evyonne, 93 * evyonne);
  maleeah.closePath();
  fill_path(maleeah, hermosa, hermosa, 4 * evyonne);
  maleeah.beginPath();
  maleeah.lineCap = "round";
  maleeah.lineJoin = "round";
  maleeah.moveTo(25 * evyonne, 63 * evyonne);
  maleeah.bezierCurveTo(16 * evyonne, 58 * evyonne, 17 * evyonne, 51 * evyonne, 17 * evyonne, 33 * evyonne);
  maleeah.bezierCurveTo(19 * evyonne, 12 * evyonne, 21 * evyonne, 12 * evyonne, 32 * evyonne, 17 * evyonne);
  maleeah.bezierCurveTo(63 * evyonne, 31 * evyonne, 66 * evyonne, 45 * evyonne, 66 * evyonne, 54 * evyonne);
  fill_path(maleeah, hermosa, hermosa, 4 * evyonne);
  maleeah.beginPath();
  maleeah.lineCap = "round";
  maleeah.lineJoin = "round";
  maleeah.moveTo(91 * evyonne, 53 * evyonne);
  maleeah.bezierCurveTo(91 * evyonne, 40 * evyonne, 98 * evyonne, 33 * evyonne, 121 * evyonne, 20 * evyonne);
  maleeah.bezierCurveTo(137 * evyonne, 12 * evyonne, 137 * evyonne, 16 * evyonne, 139 * evyonne, 27 * evyonne);
  maleeah.bezierCurveTo(141 * evyonne, 49 * evyonne, 140 * evyonne, 57 * evyonne, 134 * evyonne, 64 * evyonne);
  fill_path(maleeah, hermosa, hermosa, 4 * evyonne);
  return shakonda;
}
function create_polar_bear(efthimios, esaias) {
  var rebia = document.createElement("canvas");
  var ambra = rebia.getContext("2d");
  rebia.width = 147 * efthimios;
  rebia.height = 172 * efthimios;
  ambra.globalAlpha = .5;
  ambra.translate(0, 8 * efthimios);
  ambra.beginPath();
  ambra.lineCap = "round";
  ambra.lineJoin = "round";
  ambra.moveTo(8 * efthimios, 50 * efthimios);
  ambra.bezierCurveTo(15 * efthimios, 16 * efthimios, 49 * efthimios, 6 * efthimios, 67 * efthimios, 6 * efthimios);
  ambra.bezierCurveTo(121 * efthimios, 3 * efthimios, 128 * efthimios, 32 * efthimios, 135 * efthimios, 48 * efthimios);
  ambra.bezierCurveTo(146 * efthimios, 96 * efthimios, 124 * efthimios, 131 * efthimios, 96 * efthimios, 135 * efthimios);
  ambra.bezierCurveTo(96 * efthimios, 158 * efthimios, 79 * efthimios, 156 * efthimios, 75 * efthimios, 156 * efthimios);
  ambra.bezierCurveTo(50 * efthimios, 154 * efthimios, 53 * efthimios, 150 * efthimios, 52 * efthimios, 135 * efthimios);
  ambra.bezierCurveTo(2 * efthimios, 127 * efthimios, 3 * efthimios, 87 * efthimios, 8 * efthimios, 50 * efthimios);
  ambra.closePath();
  fill_path(ambra, esaias[0]);
  ambra.translate(0, -8 * efthimios);
  ambra.globalAlpha = 1;
  ambra.beginPath();
  ambra.lineCap = "round";
  ambra.lineJoin = "round";
  ambra.moveTo(8 * efthimios, 50 * efthimios);
  ambra.bezierCurveTo(15 * efthimios, 16 * efthimios, 49 * efthimios, 6 * efthimios, 67 * efthimios, 6 * efthimios);
  ambra.bezierCurveTo(121 * efthimios, 3 * efthimios, 128 * efthimios, 32 * efthimios, 135 * efthimios, 48 * efthimios);
  ambra.bezierCurveTo(146 * efthimios, 96 * efthimios, 124 * efthimios, 131 * efthimios, 96 * efthimios, 135 * efthimios);
  ambra.bezierCurveTo(96 * efthimios, 158 * efthimios, 79 * efthimios, 156 * efthimios, 75 * efthimios, 156 * efthimios);
  ambra.bezierCurveTo(50 * efthimios, 154 * efthimios, 53 * efthimios, 150 * efthimios, 52 * efthimios, 135 * efthimios);
  ambra.bezierCurveTo(2 * efthimios, 127 * efthimios, 3 * efthimios, 87 * efthimios, 8 * efthimios, 50 * efthimios);
  ambra.closePath();
  fill_path(ambra, esaias[1], esaias[2], 4 * efthimios);
  ambra.beginPath();
  ambra.lineCap = "round";
  ambra.lineJoin = "round";
  ambra.moveTo(14 * efthimios, 57 * efthimios);
  ambra.bezierCurveTo(2 * efthimios, 50 * efthimios, 5 * efthimios, 22 * efthimios, 24 * efthimios, 22 * efthimios);
  ambra.bezierCurveTo(41 * efthimios, 21 * efthimios, 54 * efthimios, 32 * efthimios, 55 * efthimios, 48 * efthimios);
  fill_path(ambra, esaias[1], esaias[2], 4 * efthimios);
  ambra.beginPath();
  ambra.lineCap = "round";
  ambra.lineJoin = "round";
  ambra.moveTo(93 * efthimios, 47 * efthimios);
  ambra.bezierCurveTo(94 * efthimios, 24 * efthimios, 116 * efthimios, 21 * efthimios, 120 * efthimios, 20 * efthimios);
  ambra.bezierCurveTo(144 * efthimios, 17 * efthimios, 146 * efthimios, 52 * efthimios, 133 * efthimios, 58 * efthimios);
  fill_path(ambra, esaias[1], esaias[2], 4 * efthimios);
  circle(ambra, 51 * efthimios, 91 * efthimios, 9 * efthimios);
  fill_path(ambra, esaias[3]);
  circle(ambra, 95 * efthimios, 91 * efthimios, 9 * efthimios);
  fill_path(ambra, esaias[3]);
  circle(ambra, 91 * efthimios, 89 * efthimios, 4 * efthimios);
  fill_path(ambra, esaias[4]);
  circle(ambra, 47 * efthimios, 89 * efthimios, 4 * efthimios);
  fill_path(ambra, esaias[4]);
  ambra.beginPath();
  ambra.lineCap = "round";
  ambra.lineJoin = "round";
  ambra.moveTo(54 * efthimios, 133 * efthimios);
  ambra.bezierCurveTo(56 * efthimios, 108 * efthimios, 64 * efthimios, 99 * efthimios, 73 * efthimios, 98 * efthimios);
  ambra.bezierCurveTo(86 * efthimios, 97 * efthimios, 91 * efthimios, 119 * efthimios, 93 * efthimios, 133 * efthimios);
  ambra.bezierCurveTo(94 * efthimios, 155 * efthimios, 90 * efthimios, 150 * efthimios, 74 * efthimios, 155 * efthimios);
  ambra.bezierCurveTo(50 * efthimios, 152 * efthimios, 55 * efthimios, 145 * efthimios, 54 * efthimios, 134 * efthimios);
  ambra.closePath();
  fill_path(ambra, esaias[5]);
  ambra.beginPath();
  ambra.lineCap = "round";
  ambra.lineJoin = "round";
  ambra.moveTo(65.25 * efthimios, 135 * efthimios);
  ambra.bezierCurveTo(75.25 * efthimios, 128 * efthimios, 83.25 * efthimios, 133 * efthimios, 83.25 * efthimios, 138 * efthimios);
  ambra.bezierCurveTo(88.25 * efthimios, 148 * efthimios, 61.25 * efthimios, 149 * efthimios, 64.25 * efthimios, 137 * efthimios);
  ambra.closePath();
  fill_path(ambra, esaias[6]);
  ambra.beginPath();
  ambra.lineCap = "round";
  ambra.lineJoin = "round";
  ambra.moveTo(74 * efthimios, 145 * efthimios);
  ambra.bezierCurveTo(74 * efthimios, 148 * efthimios, 74 * efthimios, 148 * efthimios, 74 * efthimios, 151 * efthimios);
  ambra.closePath();
  fill_path(ambra, undefined, esaias[6], 2 * efthimios);
  ambra.beginPath();
  ambra.lineCap = "round";
  ambra.lineJoin = "round";
  ambra.moveTo(19 * efthimios, 58 * efthimios);
  ambra.bezierCurveTo(10 * efthimios, 38 * efthimios, 18 * efthimios, 33 * efthimios, 28 * efthimios, 34 * efthimios);
  ambra.bezierCurveTo(41 * efthimios, 39 * efthimios, 45 * efthimios, 45 * efthimios, 50 * efthimios, 51 * efthimios);
  ambra.closePath();
  fill_path(ambra, esaias[6]);
  ambra.beginPath();
  ambra.lineCap = "round";
  ambra.lineJoin = "round";
  ambra.moveTo(100 * efthimios, 51 * efthimios);
  ambra.bezierCurveTo(106 * efthimios, 36 * efthimios, 119 * efthimios, 31 * efthimios, 128 * efthimios, 36 * efthimios);
  ambra.bezierCurveTo(137 * efthimios, 49 * efthimios, 128 * efthimios, 58 * efthimios, 128 * efthimios, 60 * efthimios);
  ambra.closePath();
  fill_path(ambra, esaias[6]);
  return rebia;
}
function create_hurt_polar_bear(parveen, ailiyah) {
  var anaih = document.createElement("canvas");
  var kmani = anaih.getContext("2d");
  anaih.width = 147 * parveen;
  anaih.height = 172 * parveen;
  kmani.beginPath();
  kmani.lineCap = "round";
  kmani.lineJoin = "round";
  kmani.moveTo(8 * parveen, 50 * parveen);
  kmani.bezierCurveTo(15 * parveen, 16 * parveen, 49 * parveen, 6 * parveen, 67 * parveen, 6 * parveen);
  kmani.bezierCurveTo(121 * parveen, 3 * parveen, 128 * parveen, 32 * parveen, 135 * parveen, 48 * parveen);
  kmani.bezierCurveTo(146 * parveen, 96 * parveen, 124 * parveen, 131 * parveen, 96 * parveen, 135 * parveen);
  kmani.bezierCurveTo(96 * parveen, 158 * parveen, 79 * parveen, 156 * parveen, 75 * parveen, 156 * parveen);
  kmani.bezierCurveTo(50 * parveen, 154 * parveen, 53 * parveen, 150 * parveen, 52 * parveen, 135 * parveen);
  kmani.bezierCurveTo(2 * parveen, 127 * parveen, 3 * parveen, 87 * parveen, 8 * parveen, 50 * parveen);
  kmani.closePath();
  fill_path(kmani, ailiyah, ailiyah, 4 * parveen);
  kmani.beginPath();
  kmani.lineCap = "round";
  kmani.lineJoin = "round";
  kmani.moveTo(14 * parveen, 57 * parveen);
  kmani.bezierCurveTo(2 * parveen, 50 * parveen, 5 * parveen, 22 * parveen, 24 * parveen, 22 * parveen);
  kmani.bezierCurveTo(41 * parveen, 21 * parveen, 54 * parveen, 32 * parveen, 55 * parveen, 48 * parveen);
  fill_path(kmani, ailiyah, ailiyah, 4 * parveen);
  kmani.beginPath();
  kmani.lineCap = "round";
  kmani.lineJoin = "round";
  kmani.moveTo(93 * parveen, 47 * parveen);
  kmani.bezierCurveTo(94 * parveen, 24 * parveen, 116 * parveen, 21 * parveen, 120 * parveen, 20 * parveen);
  kmani.bezierCurveTo(144 * parveen, 17 * parveen, 146 * parveen, 52 * parveen, 133 * parveen, 58 * parveen);
  fill_path(kmani, ailiyah, ailiyah, 4 * parveen);
  return anaih;
}
function create_dragon(chayla, verly) {
  var gretchen = document.createElement("canvas");
  var neeya = gretchen.getContext("2d");
  gretchen.width = 271 * chayla;
  gretchen.height = 366 * chayla;
  neeya.globalAlpha = .5;
  neeya.translate(0, 10 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(133 * chayla, 99 * chayla);
  neeya.bezierCurveTo(186 * chayla, 123 * chayla, 199 * chayla, 152 * chayla, 209 * chayla, 169 * chayla);
  neeya.bezierCurveTo(228 * chayla, 205 * chayla, 224 * chayla, 245 * chayla, 190 * chayla, 276 * chayla);
  neeya.bezierCurveTo(161 * chayla, 296 * chayla, 99 * chayla, 292 * chayla, 79 * chayla, 274 * chayla);
  neeya.bezierCurveTo(49 * chayla, 253 * chayla, 47 * chayla, 214 * chayla, 50 * chayla, 197 * chayla);
  neeya.bezierCurveTo(61 * chayla, 143 * chayla, 102 * chayla, 113 * chayla, 131 * chayla, 99 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(73 * chayla, 270 * chayla);
  neeya.bezierCurveTo(79 * chayla, 280 * chayla, 77 * chayla, 280 * chayla, 78 * chayla, 287 * chayla);
  neeya.bezierCurveTo(78 * chayla, 290 * chayla, 83 * chayla, 291 * chayla, 82 * chayla, 299 * chayla);
  neeya.bezierCurveTo(81 * chayla, 301 * chayla, 87 * chayla, 301 * chayla, 92 * chayla, 314 * chayla);
  neeya.bezierCurveTo(94 * chayla, 319 * chayla, 100 * chayla, 321 * chayla, 107 * chayla, 320 * chayla);
  neeya.bezierCurveTo(111 * chayla, 323 * chayla, 114 * chayla, 324 * chayla, 119 * chayla, 320 * chayla);
  neeya.bezierCurveTo(137 * chayla, 321 * chayla, 146 * chayla, 323 * chayla, 139 * chayla, 320 * chayla);
  neeya.bezierCurveTo(141 * chayla, 324 * chayla, 150 * chayla, 324 * chayla, 153 * chayla, 320 * chayla);
  neeya.bezierCurveTo(168 * chayla, 319 * chayla, 171 * chayla, 316 * chayla, 173 * chayla, 307 * chayla);
  neeya.bezierCurveTo(180 * chayla, 305 * chayla, 180 * chayla, 301 * chayla, 178 * chayla, 296 * chayla);
  neeya.bezierCurveTo(183 * chayla, 296 * chayla, 185 * chayla, 289 * chayla, 188 * chayla, 279 * chayla);
  neeya.bezierCurveTo(171 * chayla, 286 * chayla, 149 * chayla, 290 * chayla, 132 * chayla, 289 * chayla);
  neeya.bezierCurveTo(101 * chayla, 290 * chayla, 86 * chayla, 280 * chayla, 74 * chayla, 271 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(76 * chayla, 252 * chayla);
  neeya.bezierCurveTo(85 * chayla, 294 * chayla, 96 * chayla, 314 * chayla, 103 * chayla, 314 * chayla);
  neeya.bezierCurveTo(106 * chayla, 316 * chayla, 151 * chayla, 314 * chayla, 156 * chayla, 314 * chayla);
  neeya.bezierCurveTo(169 * chayla, 317 * chayla, 182 * chayla, 285 * chayla, 191 * chayla, 256 * chayla);
  neeya.bezierCurveTo(134.5 * chayla, 254 * chayla, 134.5 * chayla, 254 * chayla, 78 * chayla, 252 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(84 * chayla, 257 * chayla);
  neeya.bezierCurveTo(122 * chayla, 273 * chayla, 146 * chayla, 268 * chayla, 179 * chayla, 261 * chayla);
  neeya.bezierCurveTo(190 * chayla, 258 * chayla, 187 * chayla, 266 * chayla, 178 * chayla, 272 * chayla);
  neeya.bezierCurveTo(160 * chayla, 284 * chayla, 123 * chayla, 282 * chayla, 100 * chayla, 277 * chayla);
  neeya.bezierCurveTo(73 * chayla, 260 * chayla, 79 * chayla, 257 * chayla, 84 * chayla, 257 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(125 * chayla, 65 * chayla);
  neeya.bezierCurveTo(133 * chayla, 45 * chayla, 136 * chayla, 42 * chayla, 141 * chayla, 55 * chayla);
  neeya.bezierCurveTo(151 * chayla, 96 * chayla, 164 * chayla, 117 * chayla, 175 * chayla, 134 * chayla);
  neeya.bezierCurveTo(203 * chayla, 181 * chayla, 207 * chayla, 182 * chayla, 208 * chayla, 215 * chayla);
  neeya.bezierCurveTo(206 * chayla, 240 * chayla, 205 * chayla, 246 * chayla, 184 * chayla, 258 * chayla);
  neeya.bezierCurveTo(161 * chayla, 267 * chayla, 131 * chayla, 272 * chayla, 86 * chayla, 258 * chayla);
  neeya.bezierCurveTo(67 * chayla, 252 * chayla, 68 * chayla, 239 * chayla, 64 * chayla, 216 * chayla);
  neeya.bezierCurveTo(62 * chayla, 194 * chayla, 72 * chayla, 169 * chayla, 92 * chayla, 142 * chayla);
  neeya.bezierCurveTo(106 * chayla, 121 * chayla, 114 * chayla, 101 * chayla, 125 * chayla, 65 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(115 * chayla, 37 * chayla);
  neeya.bezierCurveTo(116 * chayla, 28 * chayla, 119 * chayla, 27 * chayla, 126 * chayla, 37 * chayla);
  neeya.bezierCurveTo(134 * chayla, 48 * chayla, 134 * chayla, 49 * chayla, 132 * chayla, 59 * chayla);
  neeya.bezierCurveTo(131 * chayla, 67 * chayla, 127 * chayla, 65 * chayla, 120 * chayla, 56 * chayla);
  neeya.bezierCurveTo(114 * chayla, 49 * chayla, 113 * chayla, 43 * chayla, 115 * chayla, 38 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(146 * chayla, 34 * chayla);
  neeya.bezierCurveTo(152 * chayla, 28 * chayla, 155 * chayla, 27 * chayla, 157 * chayla, 39 * chayla);
  neeya.bezierCurveTo(157 * chayla, 45 * chayla, 157 * chayla, 49 * chayla, 150 * chayla, 56 * chayla);
  neeya.bezierCurveTo(141 * chayla, 66 * chayla, 138 * chayla, 66 * chayla, 138 * chayla, 57 * chayla);
  neeya.bezierCurveTo(137 * chayla, 50 * chayla, 137 * chayla, 47 * chayla, 141 * chayla, 42 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(143 * chayla, 69 * chayla);
  neeya.bezierCurveTo(148 * chayla, 56 * chayla, 156 * chayla, 50 * chayla, 158 * chayla, 58 * chayla);
  neeya.bezierCurveTo(159 * chayla, 64 * chayla, 160 * chayla, 67 * chayla, 153 * chayla, 77 * chayla);
  neeya.bezierCurveTo(148 * chayla, 83 * chayla, 145 * chayla, 84 * chayla, 143 * chayla, 77 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(149 * chayla, 92 * chayla);
  neeya.bezierCurveTo(149 * chayla, 89 * chayla, 151 * chayla, 84 * chayla, 156 * chayla, 79 * chayla);
  neeya.bezierCurveTo(161 * chayla, 73 * chayla, 163 * chayla, 78 * chayla, 162 * chayla, 86 * chayla);
  neeya.bezierCurveTo(161 * chayla, 91 * chayla, 155 * chayla, 99 * chayla, 152 * chayla, 98 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(111 * chayla, 61 * chayla);
  neeya.bezierCurveTo(114 * chayla, 51 * chayla, 117 * chayla, 51 * chayla, 124 * chayla, 64 * chayla);
  neeya.bezierCurveTo(128 * chayla, 68 * chayla, 128 * chayla, 76 * chayla, 126 * chayla, 79 * chayla);
  neeya.bezierCurveTo(123 * chayla, 84 * chayla, 122 * chayla, 82 * chayla, 115 * chayla, 74 * chayla);
  neeya.bezierCurveTo(112 * chayla, 67 * chayla, 115 * chayla, 74 * chayla, 115 * chayla, 74 * chayla);
  neeya.bezierCurveTo(111 * chayla, 68 * chayla, 111 * chayla, 66 * chayla, 111 * chayla, 62 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(107 * chayla, 81 * chayla);
  neeya.bezierCurveTo(108 * chayla, 74 * chayla, 112 * chayla, 73 * chayla, 118 * chayla, 84 * chayla);
  neeya.bezierCurveTo(122 * chayla, 88 * chayla, 122 * chayla, 93 * chayla, 121 * chayla, 98 * chayla);
  neeya.bezierCurveTo(114 * chayla, 98 * chayla, 113 * chayla, 98 * chayla, 109 * chayla, 90 * chayla);
  neeya.bezierCurveTo(107 * chayla, 87 * chayla, 106 * chayla, 85 * chayla, 107 * chayla, 82 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[0]);
  neeya.globalAlpha = 1;
  neeya.translate(0, -10 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(133 * chayla, 99 * chayla);
  neeya.bezierCurveTo(186 * chayla, 123 * chayla, 199 * chayla, 152 * chayla, 209 * chayla, 169 * chayla);
  neeya.bezierCurveTo(228 * chayla, 205 * chayla, 224 * chayla, 245 * chayla, 190 * chayla, 276 * chayla);
  neeya.bezierCurveTo(161 * chayla, 296 * chayla, 99 * chayla, 292 * chayla, 79 * chayla, 274 * chayla);
  neeya.bezierCurveTo(49 * chayla, 253 * chayla, 47 * chayla, 214 * chayla, 50 * chayla, 197 * chayla);
  neeya.bezierCurveTo(61 * chayla, 143 * chayla, 102 * chayla, 113 * chayla, 131 * chayla, 99 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(73 * chayla, 270 * chayla);
  neeya.bezierCurveTo(79 * chayla, 280 * chayla, 77 * chayla, 280 * chayla, 78 * chayla, 287 * chayla);
  neeya.bezierCurveTo(78 * chayla, 290 * chayla, 83 * chayla, 291 * chayla, 82 * chayla, 299 * chayla);
  neeya.bezierCurveTo(81 * chayla, 301 * chayla, 87 * chayla, 301 * chayla, 92 * chayla, 314 * chayla);
  neeya.bezierCurveTo(94 * chayla, 319 * chayla, 100 * chayla, 321 * chayla, 107 * chayla, 320 * chayla);
  neeya.bezierCurveTo(111 * chayla, 323 * chayla, 114 * chayla, 324 * chayla, 119 * chayla, 320 * chayla);
  neeya.bezierCurveTo(137 * chayla, 321 * chayla, 146 * chayla, 323 * chayla, 139 * chayla, 320 * chayla);
  neeya.bezierCurveTo(141 * chayla, 324 * chayla, 150 * chayla, 324 * chayla, 153 * chayla, 320 * chayla);
  neeya.bezierCurveTo(168 * chayla, 319 * chayla, 171 * chayla, 316 * chayla, 173 * chayla, 307 * chayla);
  neeya.bezierCurveTo(180 * chayla, 305 * chayla, 180 * chayla, 301 * chayla, 178 * chayla, 296 * chayla);
  neeya.bezierCurveTo(183 * chayla, 296 * chayla, 185 * chayla, 289 * chayla, 188 * chayla, 279 * chayla);
  neeya.bezierCurveTo(171 * chayla, 286 * chayla, 149 * chayla, 290 * chayla, 132 * chayla, 289 * chayla);
  neeya.bezierCurveTo(101 * chayla, 290 * chayla, 86 * chayla, 280 * chayla, 74 * chayla, 271 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(76 * chayla, 252 * chayla);
  neeya.bezierCurveTo(85 * chayla, 294 * chayla, 96 * chayla, 314 * chayla, 103 * chayla, 314 * chayla);
  neeya.bezierCurveTo(106 * chayla, 316 * chayla, 151 * chayla, 314 * chayla, 156 * chayla, 314 * chayla);
  neeya.bezierCurveTo(169 * chayla, 317 * chayla, 182 * chayla, 285 * chayla, 191 * chayla, 256 * chayla);
  neeya.bezierCurveTo(134.5 * chayla, 254 * chayla, 134.5 * chayla, 254 * chayla, 78 * chayla, 252 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(84 * chayla, 257 * chayla);
  neeya.bezierCurveTo(122 * chayla, 273 * chayla, 146 * chayla, 268 * chayla, 179 * chayla, 261 * chayla);
  neeya.bezierCurveTo(190 * chayla, 258 * chayla, 187 * chayla, 266 * chayla, 178 * chayla, 272 * chayla);
  neeya.bezierCurveTo(160 * chayla, 284 * chayla, 123 * chayla, 282 * chayla, 100 * chayla, 277 * chayla);
  neeya.bezierCurveTo(73 * chayla, 260 * chayla, 79 * chayla, 257 * chayla, 84 * chayla, 257 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(125 * chayla, 65 * chayla);
  neeya.bezierCurveTo(133 * chayla, 45 * chayla, 136 * chayla, 42 * chayla, 141 * chayla, 55 * chayla);
  neeya.bezierCurveTo(151 * chayla, 96 * chayla, 164 * chayla, 117 * chayla, 175 * chayla, 134 * chayla);
  neeya.bezierCurveTo(203 * chayla, 181 * chayla, 207 * chayla, 182 * chayla, 208 * chayla, 215 * chayla);
  neeya.bezierCurveTo(206 * chayla, 240 * chayla, 205 * chayla, 246 * chayla, 184 * chayla, 258 * chayla);
  neeya.bezierCurveTo(161 * chayla, 267 * chayla, 131 * chayla, 272 * chayla, 86 * chayla, 258 * chayla);
  neeya.bezierCurveTo(67 * chayla, 252 * chayla, 68 * chayla, 239 * chayla, 64 * chayla, 216 * chayla);
  neeya.bezierCurveTo(62 * chayla, 194 * chayla, 72 * chayla, 169 * chayla, 92 * chayla, 142 * chayla);
  neeya.bezierCurveTo(106 * chayla, 121 * chayla, 114 * chayla, 101 * chayla, 125 * chayla, 65 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(115 * chayla, 37 * chayla);
  neeya.bezierCurveTo(116 * chayla, 28 * chayla, 119 * chayla, 27 * chayla, 126 * chayla, 37 * chayla);
  neeya.bezierCurveTo(134 * chayla, 48 * chayla, 134 * chayla, 49 * chayla, 132 * chayla, 59 * chayla);
  neeya.bezierCurveTo(131 * chayla, 67 * chayla, 127 * chayla, 65 * chayla, 120 * chayla, 56 * chayla);
  neeya.bezierCurveTo(114 * chayla, 49 * chayla, 113 * chayla, 43 * chayla, 115 * chayla, 38 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(146 * chayla, 34 * chayla);
  neeya.bezierCurveTo(152 * chayla, 28 * chayla, 155 * chayla, 27 * chayla, 157 * chayla, 39 * chayla);
  neeya.bezierCurveTo(157 * chayla, 45 * chayla, 157 * chayla, 49 * chayla, 150 * chayla, 56 * chayla);
  neeya.bezierCurveTo(141 * chayla, 66 * chayla, 138 * chayla, 66 * chayla, 138 * chayla, 57 * chayla);
  neeya.bezierCurveTo(137 * chayla, 50 * chayla, 137 * chayla, 47 * chayla, 141 * chayla, 42 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(143 * chayla, 69 * chayla);
  neeya.bezierCurveTo(148 * chayla, 56 * chayla, 156 * chayla, 50 * chayla, 158 * chayla, 58 * chayla);
  neeya.bezierCurveTo(159 * chayla, 64 * chayla, 160 * chayla, 67 * chayla, 153 * chayla, 77 * chayla);
  neeya.bezierCurveTo(148 * chayla, 83 * chayla, 145 * chayla, 84 * chayla, 143 * chayla, 77 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(149 * chayla, 92 * chayla);
  neeya.bezierCurveTo(149 * chayla, 89 * chayla, 151 * chayla, 84 * chayla, 156 * chayla, 79 * chayla);
  neeya.bezierCurveTo(161 * chayla, 73 * chayla, 163 * chayla, 78 * chayla, 162 * chayla, 86 * chayla);
  neeya.bezierCurveTo(161 * chayla, 91 * chayla, 155 * chayla, 99 * chayla, 152 * chayla, 98 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(111 * chayla, 61 * chayla);
  neeya.bezierCurveTo(114 * chayla, 51 * chayla, 117 * chayla, 51 * chayla, 124 * chayla, 64 * chayla);
  neeya.bezierCurveTo(128 * chayla, 68 * chayla, 128 * chayla, 76 * chayla, 126 * chayla, 79 * chayla);
  neeya.bezierCurveTo(123 * chayla, 84 * chayla, 122 * chayla, 82 * chayla, 115 * chayla, 74 * chayla);
  neeya.bezierCurveTo(112 * chayla, 67 * chayla, 115 * chayla, 74 * chayla, 115 * chayla, 74 * chayla);
  neeya.bezierCurveTo(111 * chayla, 68 * chayla, 111 * chayla, 66 * chayla, 111 * chayla, 62 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(107 * chayla, 81 * chayla);
  neeya.bezierCurveTo(108 * chayla, 74 * chayla, 112 * chayla, 73 * chayla, 118 * chayla, 84 * chayla);
  neeya.bezierCurveTo(122 * chayla, 88 * chayla, 122 * chayla, 93 * chayla, 121 * chayla, 98 * chayla);
  neeya.bezierCurveTo(114 * chayla, 98 * chayla, 113 * chayla, 98 * chayla, 109 * chayla, 90 * chayla);
  neeya.bezierCurveTo(107 * chayla, 87 * chayla, 106 * chayla, 85 * chayla, 107 * chayla, 82 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[3], verly[3], 8 * chayla);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(133 * chayla, 99 * chayla);
  neeya.bezierCurveTo(186 * chayla, 123 * chayla, 199 * chayla, 152 * chayla, 209 * chayla, 169 * chayla);
  neeya.bezierCurveTo(228 * chayla, 205 * chayla, 224 * chayla, 245 * chayla, 190 * chayla, 276 * chayla);
  neeya.bezierCurveTo(161 * chayla, 296 * chayla, 99 * chayla, 292 * chayla, 79 * chayla, 274 * chayla);
  neeya.bezierCurveTo(49 * chayla, 253 * chayla, 47 * chayla, 214 * chayla, 50 * chayla, 197 * chayla);
  neeya.bezierCurveTo(61 * chayla, 143 * chayla, 102 * chayla, 113 * chayla, 131 * chayla, 99 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[1]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(73 * chayla, 270 * chayla);
  neeya.bezierCurveTo(79 * chayla, 280 * chayla, 77 * chayla, 280 * chayla, 78 * chayla, 287 * chayla);
  neeya.bezierCurveTo(78 * chayla, 290 * chayla, 83 * chayla, 291 * chayla, 82 * chayla, 299 * chayla);
  neeya.bezierCurveTo(81 * chayla, 301 * chayla, 87 * chayla, 301 * chayla, 92 * chayla, 314 * chayla);
  neeya.bezierCurveTo(94 * chayla, 319 * chayla, 100 * chayla, 321 * chayla, 107 * chayla, 320 * chayla);
  neeya.bezierCurveTo(111 * chayla, 323 * chayla, 114 * chayla, 324 * chayla, 119 * chayla, 320 * chayla);
  neeya.bezierCurveTo(137 * chayla, 321 * chayla, 146 * chayla, 323 * chayla, 139 * chayla, 320 * chayla);
  neeya.bezierCurveTo(141 * chayla, 324 * chayla, 150 * chayla, 324 * chayla, 153 * chayla, 320 * chayla);
  neeya.bezierCurveTo(168 * chayla, 319 * chayla, 171 * chayla, 316 * chayla, 173 * chayla, 307 * chayla);
  neeya.bezierCurveTo(180 * chayla, 305 * chayla, 180 * chayla, 301 * chayla, 178 * chayla, 296 * chayla);
  neeya.bezierCurveTo(183 * chayla, 296 * chayla, 185 * chayla, 289 * chayla, 188 * chayla, 279 * chayla);
  neeya.bezierCurveTo(171 * chayla, 286 * chayla, 149 * chayla, 290 * chayla, 132 * chayla, 289 * chayla);
  neeya.bezierCurveTo(101 * chayla, 290 * chayla, 86 * chayla, 280 * chayla, 74 * chayla, 271 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[5]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(76 * chayla, 252 * chayla);
  neeya.bezierCurveTo(85 * chayla, 294 * chayla, 96 * chayla, 314 * chayla, 103 * chayla, 314 * chayla);
  neeya.bezierCurveTo(106 * chayla, 316 * chayla, 151 * chayla, 314 * chayla, 156 * chayla, 314 * chayla);
  neeya.bezierCurveTo(169 * chayla, 317 * chayla, 182 * chayla, 285 * chayla, 191 * chayla, 256 * chayla);
  neeya.bezierCurveTo(134.5 * chayla, 254 * chayla, 134.5 * chayla, 254 * chayla, 78 * chayla, 252 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[2]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(84 * chayla, 257 * chayla);
  neeya.bezierCurveTo(122 * chayla, 273 * chayla, 146 * chayla, 268 * chayla, 179 * chayla, 261 * chayla);
  neeya.bezierCurveTo(190 * chayla, 258 * chayla, 187 * chayla, 266 * chayla, 178 * chayla, 272 * chayla);
  neeya.bezierCurveTo(160 * chayla, 284 * chayla, 123 * chayla, 282 * chayla, 100 * chayla, 277 * chayla);
  neeya.bezierCurveTo(73 * chayla, 260 * chayla, 79 * chayla, 257 * chayla, 84 * chayla, 257 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[1]);
  circle(neeya, 102 * chayla, 269 * chayla, 11 * chayla);
  fill_path(neeya, verly[3]);
  circle(neeya, 98 * chayla, 266 * chayla, 5 * chayla);
  fill_path(neeya, verly[6]);
  circle(neeya, 168 * chayla, 269 * chayla, 11 * chayla);
  fill_path(neeya, verly[3]);
  circle(neeya, 164 * chayla, 266 * chayla, 5 * chayla);
  fill_path(neeya, verly[6]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(125 * chayla, 65 * chayla);
  neeya.bezierCurveTo(133 * chayla, 45 * chayla, 136 * chayla, 42 * chayla, 141 * chayla, 55 * chayla);
  neeya.bezierCurveTo(151 * chayla, 96 * chayla, 164 * chayla, 117 * chayla, 175 * chayla, 134 * chayla);
  neeya.bezierCurveTo(203 * chayla, 181 * chayla, 207 * chayla, 182 * chayla, 208 * chayla, 215 * chayla);
  neeya.bezierCurveTo(206 * chayla, 240 * chayla, 205 * chayla, 246 * chayla, 184 * chayla, 258 * chayla);
  neeya.bezierCurveTo(161 * chayla, 267 * chayla, 131 * chayla, 272 * chayla, 86 * chayla, 258 * chayla);
  neeya.bezierCurveTo(67 * chayla, 252 * chayla, 68 * chayla, 239 * chayla, 64 * chayla, 216 * chayla);
  neeya.bezierCurveTo(62 * chayla, 194 * chayla, 72 * chayla, 169 * chayla, 92 * chayla, 142 * chayla);
  neeya.bezierCurveTo(106 * chayla, 121 * chayla, 114 * chayla, 101 * chayla, 125 * chayla, 65 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[2]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(115 * chayla, 235 * chayla);
  neeya.bezierCurveTo(118 * chayla, 258 * chayla, 137 * chayla, 268 * chayla, 148 * chayla, 246 * chayla);
  neeya.bezierCurveTo(156 * chayla, 228 * chayla, 152 * chayla, 169 * chayla, 150 * chayla, 140 * chayla);
  neeya.bezierCurveTo(147 * chayla, 87 * chayla, 143 * chayla, 69 * chayla, 142 * chayla, 60 * chayla);
  neeya.bezierCurveTo(136 * chayla, 44 * chayla, 132 * chayla, 43 * chayla, 127 * chayla, 62 * chayla);
  neeya.bezierCurveTo(119 * chayla, 116 * chayla, 119 * chayla, 140 * chayla, 116 * chayla, 166 * chayla);
  neeya.bezierCurveTo(113 * chayla, 202 * chayla, 113 * chayla, 223 * chayla, 115 * chayla, 233 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[4]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(132 * chayla, 219 * chayla);
  neeya.bezierCurveTo(140 * chayla, 229 * chayla, 142 * chayla, 231 * chayla, 145 * chayla, 237 * chayla);
  neeya.bezierCurveTo(145 * chayla, 245 * chayla, 139 * chayla, 249 * chayla, 133 * chayla, 249 * chayla);
  neeya.bezierCurveTo(123 * chayla, 248 * chayla, 123 * chayla, 243 * chayla, 121 * chayla, 239 * chayla);
  neeya.bezierCurveTo(126 * chayla, 227 * chayla, 129 * chayla, 223 * chayla, 132 * chayla, 219 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(133 * chayla, 179 * chayla);
  neeya.bezierCurveTo(140 * chayla, 188.5 * chayla, 140 * chayla, 188.5 * chayla, 147 * chayla, 198 * chayla);
  neeya.bezierCurveTo(148 * chayla, 209 * chayla, 142 * chayla, 214 * chayla, 133 * chayla, 214 * chayla);
  neeya.bezierCurveTo(121 * chayla, 211 * chayla, 121 * chayla, 207 * chayla, 120 * chayla, 200 * chayla);
  neeya.bezierCurveTo(126.5 * chayla, 189.5 * chayla, 126.5 * chayla, 189.5 * chayla, 133 * chayla, 179 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(133 * chayla, 143 * chayla);
  neeya.bezierCurveTo(139 * chayla, 151.5 * chayla, 139 * chayla, 151.5 * chayla, 145 * chayla, 160 * chayla);
  neeya.bezierCurveTo(143 * chayla, 167 * chayla, 140 * chayla, 170 * chayla, 134 * chayla, 170 * chayla);
  neeya.bezierCurveTo(128 * chayla, 169 * chayla, 124 * chayla, 167 * chayla, 123 * chayla, 161 * chayla);
  neeya.bezierCurveTo(128 * chayla, 152 * chayla, 128 * chayla, 152 * chayla, 133 * chayla, 143 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(133 * chayla, 115 * chayla);
  neeya.bezierCurveTo(137.5 * chayla, 121.5 * chayla, 137.5 * chayla, 121.5 * chayla, 142 * chayla, 128 * chayla);
  neeya.bezierCurveTo(141 * chayla, 133 * chayla, 138 * chayla, 135 * chayla, 133 * chayla, 135 * chayla);
  neeya.bezierCurveTo(129 * chayla, 135 * chayla, 125 * chayla, 132 * chayla, 125 * chayla, 129 * chayla);
  neeya.bezierCurveTo(129 * chayla, 122 * chayla, 129 * chayla, 122 * chayla, 133 * chayla, 115 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(133 * chayla, 94 * chayla);
  neeya.bezierCurveTo(136.5 * chayla, 98.5 * chayla, 136.5 * chayla, 98.5 * chayla, 140 * chayla, 103 * chayla);
  neeya.bezierCurveTo(139 * chayla, 109 * chayla, 137 * chayla, 109 * chayla, 133 * chayla, 110 * chayla);
  neeya.bezierCurveTo(127 * chayla, 108 * chayla, 129 * chayla, 107 * chayla, 127 * chayla, 105 * chayla);
  neeya.bezierCurveTo(130 * chayla, 99.5 * chayla, 130 * chayla, 99.5 * chayla, 133 * chayla, 94 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(130 * chayla, 279 * chayla);
  neeya.bezierCurveTo(136.5 * chayla, 287.5 * chayla, 136.5 * chayla, 287.5 * chayla, 143 * chayla, 296 * chayla);
  neeya.bezierCurveTo(143 * chayla, 302 * chayla, 139 * chayla, 309 * chayla, 131 * chayla, 308 * chayla);
  neeya.bezierCurveTo(123 * chayla, 306 * chayla, 121 * chayla, 303 * chayla, 120 * chayla, 297 * chayla);
  neeya.bezierCurveTo(125.5 * chayla, 288.5 * chayla, 125.5 * chayla, 288.5 * chayla, 131 * chayla, 280 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(147 * chayla, 303 * chayla);
  neeya.bezierCurveTo(151 * chayla, 311 * chayla, 151 * chayla, 319 * chayla, 147 * chayla, 321 * chayla);
  neeya.bezierCurveTo(138 * chayla, 320 * chayla, 145 * chayla, 308 * chayla, 147 * chayla, 303 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(115 * chayla, 303 * chayla);
  neeya.bezierCurveTo(115 * chayla, 312 * chayla, 118 * chayla, 319 * chayla, 115 * chayla, 319 * chayla);
  neeya.bezierCurveTo(112 * chayla, 324 * chayla, 109 * chayla, 318 * chayla, 109 * chayla, 314 * chayla);
  neeya.bezierCurveTo(109 * chayla, 308 * chayla, 112 * chayla, 303 * chayla, 115 * chayla, 303 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(89 * chayla, 280 * chayla);
  neeya.bezierCurveTo(83 * chayla, 279 * chayla, 80 * chayla, 281 * chayla, 81 * chayla, 286 * chayla);
  neeya.bezierCurveTo(83 * chayla, 290 * chayla, 84 * chayla, 290 * chayla, 87 * chayla, 286 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(94 * chayla, 290 * chayla);
  neeya.bezierCurveTo(93 * chayla, 294 * chayla, 90 * chayla, 303 * chayla, 86 * chayla, 298 * chayla);
  neeya.bezierCurveTo(84 * chayla, 295 * chayla, 84 * chayla, 291 * chayla, 89 * chayla, 291 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(163 * chayla, 295 * chayla);
  neeya.bezierCurveTo(175 * chayla, 294 * chayla, 176 * chayla, 296 * chayla, 175 * chayla, 301 * chayla);
  neeya.bezierCurveTo(174 * chayla, 305 * chayla, 171 * chayla, 305 * chayla, 166 * chayla, 300 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(172 * chayla, 286 * chayla);
  neeya.bezierCurveTo(180 * chayla, 285 * chayla, 181 * chayla, 285 * chayla, 180 * chayla, 291 * chayla);
  neeya.bezierCurveTo(176 * chayla, 295 * chayla, 174 * chayla, 294 * chayla, 172 * chayla, 286 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[8]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(115 * chayla, 37 * chayla);
  neeya.bezierCurveTo(116 * chayla, 28 * chayla, 119 * chayla, 27 * chayla, 126 * chayla, 37 * chayla);
  neeya.bezierCurveTo(134 * chayla, 48 * chayla, 134 * chayla, 49 * chayla, 132 * chayla, 59 * chayla);
  neeya.bezierCurveTo(131 * chayla, 67 * chayla, 127 * chayla, 65 * chayla, 120 * chayla, 56 * chayla);
  neeya.bezierCurveTo(114 * chayla, 49 * chayla, 113 * chayla, 43 * chayla, 115 * chayla, 38 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[7]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(146 * chayla, 34 * chayla);
  neeya.bezierCurveTo(152 * chayla, 28 * chayla, 155 * chayla, 27 * chayla, 157 * chayla, 39 * chayla);
  neeya.bezierCurveTo(157 * chayla, 45 * chayla, 157 * chayla, 49 * chayla, 150 * chayla, 56 * chayla);
  neeya.bezierCurveTo(141 * chayla, 66 * chayla, 138 * chayla, 66 * chayla, 138 * chayla, 57 * chayla);
  neeya.bezierCurveTo(137 * chayla, 50 * chayla, 137 * chayla, 47 * chayla, 141 * chayla, 42 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[7]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(143 * chayla, 69 * chayla);
  neeya.bezierCurveTo(148 * chayla, 56 * chayla, 156 * chayla, 50 * chayla, 158 * chayla, 58 * chayla);
  neeya.bezierCurveTo(159 * chayla, 64 * chayla, 160 * chayla, 67 * chayla, 153 * chayla, 77 * chayla);
  neeya.bezierCurveTo(148 * chayla, 83 * chayla, 145 * chayla, 84 * chayla, 143 * chayla, 77 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[7]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(149 * chayla, 92 * chayla);
  neeya.bezierCurveTo(149 * chayla, 89 * chayla, 151 * chayla, 84 * chayla, 156 * chayla, 79 * chayla);
  neeya.bezierCurveTo(161 * chayla, 73 * chayla, 163 * chayla, 78 * chayla, 162 * chayla, 86 * chayla);
  neeya.bezierCurveTo(161 * chayla, 91 * chayla, 155 * chayla, 99 * chayla, 152 * chayla, 98 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[7]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(111 * chayla, 61 * chayla);
  neeya.bezierCurveTo(114 * chayla, 51 * chayla, 117 * chayla, 51 * chayla, 124 * chayla, 64 * chayla);
  neeya.bezierCurveTo(128 * chayla, 68 * chayla, 128 * chayla, 76 * chayla, 126 * chayla, 79 * chayla);
  neeya.bezierCurveTo(123 * chayla, 84 * chayla, 122 * chayla, 82 * chayla, 115 * chayla, 74 * chayla);
  neeya.bezierCurveTo(112 * chayla, 67 * chayla, 115 * chayla, 74 * chayla, 115 * chayla, 74 * chayla);
  neeya.bezierCurveTo(111 * chayla, 68 * chayla, 111 * chayla, 66 * chayla, 111 * chayla, 62 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[7]);
  neeya.beginPath();
  neeya.lineCap = "round";
  neeya.lineJoin = "round";
  neeya.moveTo(107 * chayla, 81 * chayla);
  neeya.bezierCurveTo(108 * chayla, 74 * chayla, 112 * chayla, 73 * chayla, 118 * chayla, 84 * chayla);
  neeya.bezierCurveTo(122 * chayla, 88 * chayla, 122 * chayla, 93 * chayla, 121 * chayla, 98 * chayla);
  neeya.bezierCurveTo(114 * chayla, 98 * chayla, 113 * chayla, 98 * chayla, 109 * chayla, 90 * chayla);
  neeya.bezierCurveTo(107 * chayla, 87 * chayla, 106 * chayla, 85 * chayla, 107 * chayla, 82 * chayla);
  neeya.closePath();
  fill_path(neeya, verly[7]);
  return gretchen;
}
function create_hurt_dragon(bristin, bryndal) {
  var dominigue = document.createElement("canvas");
  var abrial = dominigue.getContext("2d");
  dominigue.width = 271 * bristin;
  dominigue.height = 366 * bristin;
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(133 * bristin, 99 * bristin);
  abrial.bezierCurveTo(186 * bristin, 123 * bristin, 199 * bristin, 152 * bristin, 209 * bristin, 169 * bristin);
  abrial.bezierCurveTo(228 * bristin, 205 * bristin, 224 * bristin, 245 * bristin, 190 * bristin, 276 * bristin);
  abrial.bezierCurveTo(161 * bristin, 296 * bristin, 99 * bristin, 292 * bristin, 79 * bristin, 274 * bristin);
  abrial.bezierCurveTo(49 * bristin, 253 * bristin, 47 * bristin, 214 * bristin, 50 * bristin, 197 * bristin);
  abrial.bezierCurveTo(61 * bristin, 143 * bristin, 102 * bristin, 113 * bristin, 131 * bristin, 99 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(73 * bristin, 270 * bristin);
  abrial.bezierCurveTo(79 * bristin, 280 * bristin, 77 * bristin, 280 * bristin, 78 * bristin, 287 * bristin);
  abrial.bezierCurveTo(78 * bristin, 290 * bristin, 83 * bristin, 291 * bristin, 82 * bristin, 299 * bristin);
  abrial.bezierCurveTo(81 * bristin, 301 * bristin, 87 * bristin, 301 * bristin, 92 * bristin, 314 * bristin);
  abrial.bezierCurveTo(94 * bristin, 319 * bristin, 100 * bristin, 321 * bristin, 107 * bristin, 320 * bristin);
  abrial.bezierCurveTo(111 * bristin, 323 * bristin, 114 * bristin, 324 * bristin, 119 * bristin, 320 * bristin);
  abrial.bezierCurveTo(137 * bristin, 321 * bristin, 146 * bristin, 323 * bristin, 139 * bristin, 320 * bristin);
  abrial.bezierCurveTo(141 * bristin, 324 * bristin, 150 * bristin, 324 * bristin, 153 * bristin, 320 * bristin);
  abrial.bezierCurveTo(168 * bristin, 319 * bristin, 171 * bristin, 316 * bristin, 173 * bristin, 307 * bristin);
  abrial.bezierCurveTo(180 * bristin, 305 * bristin, 180 * bristin, 301 * bristin, 178 * bristin, 296 * bristin);
  abrial.bezierCurveTo(183 * bristin, 296 * bristin, 185 * bristin, 289 * bristin, 188 * bristin, 279 * bristin);
  abrial.bezierCurveTo(171 * bristin, 286 * bristin, 149 * bristin, 290 * bristin, 132 * bristin, 289 * bristin);
  abrial.bezierCurveTo(101 * bristin, 290 * bristin, 86 * bristin, 280 * bristin, 74 * bristin, 271 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(76 * bristin, 252 * bristin);
  abrial.bezierCurveTo(85 * bristin, 294 * bristin, 96 * bristin, 314 * bristin, 103 * bristin, 314 * bristin);
  abrial.bezierCurveTo(106 * bristin, 316 * bristin, 151 * bristin, 314 * bristin, 156 * bristin, 314 * bristin);
  abrial.bezierCurveTo(169 * bristin, 317 * bristin, 182 * bristin, 285 * bristin, 191 * bristin, 256 * bristin);
  abrial.bezierCurveTo(134.5 * bristin, 254 * bristin, 134.5 * bristin, 254 * bristin, 78 * bristin, 252 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(84 * bristin, 257 * bristin);
  abrial.bezierCurveTo(122 * bristin, 273 * bristin, 146 * bristin, 268 * bristin, 179 * bristin, 261 * bristin);
  abrial.bezierCurveTo(190 * bristin, 258 * bristin, 187 * bristin, 266 * bristin, 178 * bristin, 272 * bristin);
  abrial.bezierCurveTo(160 * bristin, 284 * bristin, 123 * bristin, 282 * bristin, 100 * bristin, 277 * bristin);
  abrial.bezierCurveTo(73 * bristin, 260 * bristin, 79 * bristin, 257 * bristin, 84 * bristin, 257 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(125 * bristin, 65 * bristin);
  abrial.bezierCurveTo(133 * bristin, 45 * bristin, 136 * bristin, 42 * bristin, 141 * bristin, 55 * bristin);
  abrial.bezierCurveTo(151 * bristin, 96 * bristin, 164 * bristin, 117 * bristin, 175 * bristin, 134 * bristin);
  abrial.bezierCurveTo(203 * bristin, 181 * bristin, 207 * bristin, 182 * bristin, 208 * bristin, 215 * bristin);
  abrial.bezierCurveTo(206 * bristin, 240 * bristin, 205 * bristin, 246 * bristin, 184 * bristin, 258 * bristin);
  abrial.bezierCurveTo(161 * bristin, 267 * bristin, 131 * bristin, 272 * bristin, 86 * bristin, 258 * bristin);
  abrial.bezierCurveTo(67 * bristin, 252 * bristin, 68 * bristin, 239 * bristin, 64 * bristin, 216 * bristin);
  abrial.bezierCurveTo(62 * bristin, 194 * bristin, 72 * bristin, 169 * bristin, 92 * bristin, 142 * bristin);
  abrial.bezierCurveTo(106 * bristin, 121 * bristin, 114 * bristin, 101 * bristin, 125 * bristin, 65 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(115 * bristin, 37 * bristin);
  abrial.bezierCurveTo(116 * bristin, 28 * bristin, 119 * bristin, 27 * bristin, 126 * bristin, 37 * bristin);
  abrial.bezierCurveTo(134 * bristin, 48 * bristin, 134 * bristin, 49 * bristin, 132 * bristin, 59 * bristin);
  abrial.bezierCurveTo(131 * bristin, 67 * bristin, 127 * bristin, 65 * bristin, 120 * bristin, 56 * bristin);
  abrial.bezierCurveTo(114 * bristin, 49 * bristin, 113 * bristin, 43 * bristin, 115 * bristin, 38 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(146 * bristin, 34 * bristin);
  abrial.bezierCurveTo(152 * bristin, 28 * bristin, 155 * bristin, 27 * bristin, 157 * bristin, 39 * bristin);
  abrial.bezierCurveTo(157 * bristin, 45 * bristin, 157 * bristin, 49 * bristin, 150 * bristin, 56 * bristin);
  abrial.bezierCurveTo(141 * bristin, 66 * bristin, 138 * bristin, 66 * bristin, 138 * bristin, 57 * bristin);
  abrial.bezierCurveTo(137 * bristin, 50 * bristin, 137 * bristin, 47 * bristin, 141 * bristin, 42 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(143 * bristin, 69 * bristin);
  abrial.bezierCurveTo(148 * bristin, 56 * bristin, 156 * bristin, 50 * bristin, 158 * bristin, 58 * bristin);
  abrial.bezierCurveTo(159 * bristin, 64 * bristin, 160 * bristin, 67 * bristin, 153 * bristin, 77 * bristin);
  abrial.bezierCurveTo(148 * bristin, 83 * bristin, 145 * bristin, 84 * bristin, 143 * bristin, 77 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(149 * bristin, 92 * bristin);
  abrial.bezierCurveTo(149 * bristin, 89 * bristin, 151 * bristin, 84 * bristin, 156 * bristin, 79 * bristin);
  abrial.bezierCurveTo(161 * bristin, 73 * bristin, 163 * bristin, 78 * bristin, 162 * bristin, 86 * bristin);
  abrial.bezierCurveTo(161 * bristin, 91 * bristin, 155 * bristin, 99 * bristin, 152 * bristin, 98 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(111 * bristin, 61 * bristin);
  abrial.bezierCurveTo(114 * bristin, 51 * bristin, 117 * bristin, 51 * bristin, 124 * bristin, 64 * bristin);
  abrial.bezierCurveTo(128 * bristin, 68 * bristin, 128 * bristin, 76 * bristin, 126 * bristin, 79 * bristin);
  abrial.bezierCurveTo(123 * bristin, 84 * bristin, 122 * bristin, 82 * bristin, 115 * bristin, 74 * bristin);
  abrial.bezierCurveTo(112 * bristin, 67 * bristin, 115 * bristin, 74 * bristin, 115 * bristin, 74 * bristin);
  abrial.bezierCurveTo(111 * bristin, 68 * bristin, 111 * bristin, 66 * bristin, 111 * bristin, 62 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  abrial.beginPath();
  abrial.lineCap = "round";
  abrial.lineJoin = "round";
  abrial.moveTo(107 * bristin, 81 * bristin);
  abrial.bezierCurveTo(108 * bristin, 74 * bristin, 112 * bristin, 73 * bristin, 118 * bristin, 84 * bristin);
  abrial.bezierCurveTo(122 * bristin, 88 * bristin, 122 * bristin, 93 * bristin, 121 * bristin, 98 * bristin);
  abrial.bezierCurveTo(114 * bristin, 98 * bristin, 113 * bristin, 98 * bristin, 109 * bristin, 90 * bristin);
  abrial.bezierCurveTo(107 * bristin, 87 * bristin, 106 * bristin, 85 * bristin, 107 * bristin, 82 * bristin);
  abrial.closePath();
  fill_path(abrial, bryndal[0]);
  return dominigue;
}
function create_wingleft(xsavier, pansy) {
  var akirah = document.createElement("canvas");
  var uriella = akirah.getContext("2d");
  akirah.width = 85 * xsavier;
  akirah.height = 145 * xsavier;
  uriella.translate(-20 * xsavier, -95 * xsavier);
  uriella.beginPath();
  uriella.lineCap = "round";
  uriella.lineJoin = "round";
  uriella.moveTo(50 * xsavier, 105 * xsavier);
  uriella.bezierCurveTo(52 * xsavier, 119 * xsavier, 64 * xsavier, 137 * xsavier, 71 * xsavier, 146 * xsavier);
  uriella.bezierCurveTo(71 * xsavier, 161 * xsavier, 74 * xsavier, 169 * xsavier, 79 * xsavier, 179 * xsavier);
  uriella.bezierCurveTo(68 * xsavier, 192 * xsavier, 70 * xsavier, 204 * xsavier, 69 * xsavier, 216 * xsavier);
  uriella.bezierCurveTo(50 * xsavier, 189.5 * xsavier, 50 * xsavier, 189.5 * xsavier, 31 * xsavier, 163 * xsavier);
  uriella.closePath();
  fill_path(uriella, pansy[1]);
  uriella.beginPath();
  uriella.lineCap = "round";
  uriella.lineJoin = "round";
  uriella.moveTo(44 * xsavier, 106 * xsavier);
  uriella.bezierCurveTo(49 * xsavier, 90 * xsavier, 58 * xsavier, 104 * xsavier, 51 * xsavier, 121 * xsavier);
  uriella.bezierCurveTo(45 * xsavier, 143 * xsavier, 41 * xsavier, 151 * xsavier, 37 * xsavier, 162 * xsavier);
  uriella.bezierCurveTo(48 * xsavier, 180 * xsavier, 58 * xsavier, 188 * xsavier, 76 * xsavier, 205 * xsavier);
  uriella.bezierCurveTo(104 * xsavier, 209 * xsavier, 105 * xsavier, 229 * xsavier, 92 * xsavier, 235 * xsavier);
  uriella.bezierCurveTo(76 * xsavier, 239 * xsavier, 75 * xsavier, 232 * xsavier, 56 * xsavier, 213 * xsavier);
  uriella.bezierCurveTo(31 * xsavier, 187 * xsavier, 28 * xsavier, 176 * xsavier, 23 * xsavier, 162 * xsavier);
  uriella.bezierCurveTo(38 * xsavier, 131 * xsavier, 40 * xsavier, 120 * xsavier, 44 * xsavier, 106 * xsavier);
  uriella.closePath();
  fill_path(uriella, pansy[2], pansy[3], 4 * xsavier);
  uriella.beginPath();
  uriella.lineCap = "round";
  uriella.lineJoin = "round";
  uriella.moveTo(30 * xsavier, 159 * xsavier);
  uriella.bezierCurveTo(46 * xsavier, 157 * xsavier, 59 * xsavier, 152 * xsavier, 68 * xsavier, 148 * xsavier);
  uriella.bezierCurveTo(63 * xsavier, 155 * xsavier, 52 * xsavier, 160 * xsavier, 44 * xsavier, 164 * xsavier);
  uriella.bezierCurveTo(59 * xsavier, 169 * xsavier, 66 * xsavier, 174 * xsavier, 75 * xsavier, 178 * xsavier);
  uriella.bezierCurveTo(58 * xsavier, 178 * xsavier, 49 * xsavier, 175 * xsavier, 37 * xsavier, 174 * xsavier);
  uriella.closePath();
  fill_path(uriella, pansy[2]);
  return akirah;
}
function create_hurt_wingleft(braham, chimaobi) {
  var audric = document.createElement("canvas");
  var gracelen = audric.getContext("2d");
  audric.width = 85 * braham;
  audric.height = 145 * braham;
  gracelen.translate(-20 * braham, -95 * braham);
  gracelen.beginPath();
  gracelen.lineCap = "round";
  gracelen.lineJoin = "round";
  gracelen.moveTo(50 * braham, 105 * braham);
  gracelen.bezierCurveTo(52 * braham, 119 * braham, 64 * braham, 137 * braham, 71 * braham, 146 * braham);
  gracelen.bezierCurveTo(71 * braham, 161 * braham, 74 * braham, 169 * braham, 79 * braham, 179 * braham);
  gracelen.bezierCurveTo(68 * braham, 192 * braham, 70 * braham, 204 * braham, 69 * braham, 216 * braham);
  gracelen.bezierCurveTo(50 * braham, 189.5 * braham, 50 * braham, 189.5 * braham, 31 * braham, 163 * braham);
  gracelen.closePath();
  fill_path(gracelen, chimaobi);
  gracelen.beginPath();
  gracelen.lineCap = "round";
  gracelen.lineJoin = "round";
  gracelen.moveTo(44 * braham, 106 * braham);
  gracelen.bezierCurveTo(49 * braham, 90 * braham, 58 * braham, 104 * braham, 51 * braham, 121 * braham);
  gracelen.bezierCurveTo(45 * braham, 143 * braham, 41 * braham, 151 * braham, 37 * braham, 162 * braham);
  gracelen.bezierCurveTo(48 * braham, 180 * braham, 58 * braham, 188 * braham, 76 * braham, 205 * braham);
  gracelen.bezierCurveTo(104 * braham, 209 * braham, 105 * braham, 229 * braham, 92 * braham, 235 * braham);
  gracelen.bezierCurveTo(76 * braham, 239 * braham, 75 * braham, 232 * braham, 56 * braham, 213 * braham);
  gracelen.bezierCurveTo(31 * braham, 187 * braham, 28 * braham, 176 * braham, 23 * braham, 162 * braham);
  gracelen.bezierCurveTo(38 * braham, 131 * braham, 40 * braham, 120 * braham, 44 * braham, 106 * braham);
  gracelen.closePath();
  fill_path(gracelen, chimaobi, chimaobi, 4 * braham);
  gracelen.beginPath();
  gracelen.lineCap = "round";
  gracelen.lineJoin = "round";
  gracelen.moveTo(30 * braham, 159 * braham);
  gracelen.bezierCurveTo(46 * braham, 157 * braham, 59 * braham, 152 * braham, 68 * braham, 148 * braham);
  gracelen.bezierCurveTo(63 * braham, 155 * braham, 52 * braham, 160 * braham, 44 * braham, 164 * braham);
  gracelen.bezierCurveTo(59 * braham, 169 * braham, 66 * braham, 174 * braham, 75 * braham, 178 * braham);
  gracelen.bezierCurveTo(58 * braham, 178 * braham, 49 * braham, 175 * braham, 37 * braham, 174 * braham);
  gracelen.closePath();
  fill_path(gracelen, chimaobi);
  return audric;
}
function create_wingright(zonda, christopherjohn) {
  var shemya = document.createElement("canvas");
  var aadan = shemya.getContext("2d");
  shemya.width = 85 * zonda;
  shemya.height = 145 * zonda;
  aadan.translate(-165 * zonda, -95 * zonda);
  aadan.beginPath();
  aadan.lineCap = "round";
  aadan.lineJoin = "round";
  aadan.moveTo(217 * zonda, 103 * zonda);
  aadan.bezierCurveTo(209 * zonda, 129 * zonda, 203 * zonda, 137 * zonda, 195 * zonda, 146 * zonda);
  aadan.bezierCurveTo(195 * zonda, 159 * zonda, 194 * zonda, 167 * zonda, 189 * zonda, 178 * zonda);
  aadan.bezierCurveTo(193 * zonda, 186 * zonda, 196 * zonda, 195 * zonda, 198 * zonda, 216 * zonda);
  aadan.bezierCurveTo(217.5 * zonda, 189.5 * zonda, 217.5 * zonda, 189.5 * zonda, 237 * zonda, 163 * zonda);
  aadan.closePath();
  fill_path(aadan, christopherjohn[1]);
  aadan.beginPath();
  aadan.lineCap = "round";
  aadan.lineJoin = "round";
  aadan.moveTo(231 * zonda, 163 * zonda);
  aadan.bezierCurveTo(221 * zonda, 139 * zonda, 218 * zonda, 128 * zonda, 215 * zonda, 114 * zonda);
  aadan.bezierCurveTo(213 * zonda, 102 * zonda, 220 * zonda, 92 * zonda, 222 * zonda, 107 * zonda);
  aadan.bezierCurveTo(224 * zonda, 118 * zonda, 233 * zonda, 138 * zonda, 244 * zonda, 161 * zonda);
  aadan.bezierCurveTo(235 * zonda, 188 * zonda, 224 * zonda, 198 * zonda, 204 * zonda, 221 * zonda);
  aadan.bezierCurveTo(190 * zonda, 233 * zonda, 190 * zonda, 235 * zonda, 180 * zonda, 235 * zonda);
  aadan.bezierCurveTo(167 * zonda, 235 * zonda, 164 * zonda, 216 * zonda, 175 * zonda, 211 * zonda);
  aadan.bezierCurveTo(176 * zonda, 208 * zonda, 181 * zonda, 207 * zonda, 191 * zonda, 205 * zonda);
  aadan.bezierCurveTo(213 * zonda, 186 * zonda, 218 * zonda, 180 * zonda, 230 * zonda, 163 * zonda);
  aadan.closePath();
  fill_path(aadan, christopherjohn[2], christopherjohn[3], 4 * zonda);
  aadan.beginPath();
  aadan.lineCap = "round";
  aadan.lineJoin = "round";
  aadan.moveTo(234 * zonda, 154 * zonda);
  aadan.bezierCurveTo(227 * zonda, 156 * zonda, 222 * zonda, 156 * zonda, 199 * zonda, 148 * zonda);
  aadan.bezierCurveTo(201 * zonda, 151 * zonda, 216 * zonda, 159 * zonda, 224 * zonda, 162 * zonda);
  aadan.bezierCurveTo(209 * zonda, 169.5 * zonda, 209 * zonda, 169.5 * zonda, 194 * zonda, 177 * zonda);
  aadan.bezierCurveTo(213.5 * zonda, 175 * zonda, 213.5 * zonda, 175 * zonda, 233 * zonda, 173 * zonda);
  aadan.closePath();
  fill_path(aadan, christopherjohn[2]);
  return shemya;
}
function create_hurt_wingright(keondric, elyria) {
  var jodina = document.createElement("canvas");
  var cheisea = jodina.getContext("2d");
  jodina.width = 85 * keondric;
  jodina.height = 145 * keondric;
  cheisea.translate(-165 * keondric, -95 * keondric);
  cheisea.beginPath();
  cheisea.lineCap = "round";
  cheisea.lineJoin = "round";
  cheisea.moveTo(217 * keondric, 103 * keondric);
  cheisea.bezierCurveTo(209 * keondric, 129 * keondric, 203 * keondric, 137 * keondric, 195 * keondric, 146 * keondric);
  cheisea.bezierCurveTo(195 * keondric, 159 * keondric, 194 * keondric, 167 * keondric, 189 * keondric, 178 * keondric);
  cheisea.bezierCurveTo(193 * keondric, 186 * keondric, 196 * keondric, 195 * keondric, 198 * keondric, 216 * keondric);
  cheisea.bezierCurveTo(217.5 * keondric, 189.5 * keondric, 217.5 * keondric, 189.5 * keondric, 237 * keondric, 163 * keondric);
  cheisea.closePath();
  fill_path(cheisea, elyria);
  cheisea.beginPath();
  cheisea.lineCap = "round";
  cheisea.lineJoin = "round";
  cheisea.moveTo(231 * keondric, 163 * keondric);
  cheisea.bezierCurveTo(221 * keondric, 139 * keondric, 218 * keondric, 128 * keondric, 215 * keondric, 114 * keondric);
  cheisea.bezierCurveTo(213 * keondric, 102 * keondric, 220 * keondric, 92 * keondric, 222 * keondric, 107 * keondric);
  cheisea.bezierCurveTo(224 * keondric, 118 * keondric, 233 * keondric, 138 * keondric, 244 * keondric, 161 * keondric);
  cheisea.bezierCurveTo(235 * keondric, 188 * keondric, 224 * keondric, 198 * keondric, 204 * keondric, 221 * keondric);
  cheisea.bezierCurveTo(190 * keondric, 233 * keondric, 190 * keondric, 235 * keondric, 180 * keondric, 235 * keondric);
  cheisea.bezierCurveTo(167 * keondric, 235 * keondric, 164 * keondric, 216 * keondric, 175 * keondric, 211 * keondric);
  cheisea.bezierCurveTo(176 * keondric, 208 * keondric, 181 * keondric, 207 * keondric, 191 * keondric, 205 * keondric);
  cheisea.bezierCurveTo(213 * keondric, 186 * keondric, 218 * keondric, 180 * keondric, 230 * keondric, 163 * keondric);
  cheisea.closePath();
  fill_path(cheisea, elyria, elyria, 4 * keondric);
  cheisea.beginPath();
  cheisea.lineCap = "round";
  cheisea.lineJoin = "round";
  cheisea.moveTo(234 * keondric, 154 * keondric);
  cheisea.bezierCurveTo(227 * keondric, 156 * keondric, 222 * keondric, 156 * keondric, 199 * keondric, 148 * keondric);
  cheisea.bezierCurveTo(201 * keondric, 151 * keondric, 216 * keondric, 159 * keondric, 224 * keondric, 162 * keondric);
  cheisea.bezierCurveTo(209 * keondric, 169.5 * keondric, 209 * keondric, 169.5 * keondric, 194 * keondric, 177 * keondric);
  cheisea.bezierCurveTo(213.5 * keondric, 175 * keondric, 213.5 * keondric, 175 * keondric, 233 * keondric, 173 * keondric);
  cheisea.closePath();
  fill_path(cheisea, elyria);
  return jodina;
}
function create_explorer_hat(niven, tamilyn, heitor) {
  var tyriel = document.createElement("canvas");
  var emillion = tyriel.getContext("2d");
  tyriel.width = 187 * niven;
  tyriel.height = 119 * niven;
  emillion.globalAlpha = tamilyn ? .5 : 1;
  emillion.beginPath();
  emillion.lineCap = "round";
  emillion.lineJoin = "round";
  emillion.translate(0, 3);
  emillion.moveTo(53 * niven, 45 * niven);
  emillion.bezierCurveTo(3 * niven, 60 * niven, 11 * niven, 72 * niven, 19 * niven, 81 * niven);
  emillion.bezierCurveTo(28 * niven, 82 * niven, 24 * niven, 81 * niven, 29 * niven, 82 * niven);
  emillion.bezierCurveTo(26 * niven, 87 * niven, 28 * niven, 84 * niven, 28 * niven, 87 * niven);
  emillion.bezierCurveTo(63 * niven, 101 * niven, 92 * niven, 100 * niven, 138 * niven, 93 * niven);
  emillion.bezierCurveTo(172 * niven, 87 * niven, 180 * niven, 72 * niven, 168 * niven, 62 * niven);
  emillion.bezierCurveTo(154 * niven, 51 * niven, 150 * niven, 50 * niven, 148 * niven, 49 * niven);
  emillion.bezierCurveTo(132 * niven, 42 * niven, 90 * niven, 40 * niven, 55 * niven, 45 * niven);
  emillion.closePath();
  fill_path(emillion, heitor[5]);
  emillion.globalAlpha = 1;
  emillion.beginPath();
  emillion.lineCap = "round";
  emillion.lineJoin = "round";
  emillion.translate(0, -3);
  emillion.moveTo(53 * niven, 45 * niven);
  emillion.bezierCurveTo(3 * niven, 60 * niven, 11 * niven, 72 * niven, 19 * niven, 81 * niven);
  emillion.bezierCurveTo(28 * niven, 82 * niven, 24 * niven, 81 * niven, 29 * niven, 82 * niven);
  emillion.bezierCurveTo(26 * niven, 87 * niven, 28 * niven, 84 * niven, 28 * niven, 87 * niven);
  emillion.bezierCurveTo(63 * niven, 101 * niven, 92 * niven, 100 * niven, 138 * niven, 93 * niven);
  emillion.bezierCurveTo(172 * niven, 87 * niven, 180 * niven, 72 * niven, 168 * niven, 62 * niven);
  emillion.bezierCurveTo(154 * niven, 51 * niven, 150 * niven, 50 * niven, 148 * niven, 49 * niven);
  emillion.bezierCurveTo(132 * niven, 42 * niven, 90 * niven, 40 * niven, 55 * niven, 45 * niven);
  emillion.closePath();
  fill_path(emillion, heitor[0], heitor[1], 4 * niven);
  emillion.beginPath();
  emillion.lineCap = "round";
  emillion.lineJoin = "round";
  emillion.moveTo(151 * niven, 60 * niven);
  emillion.bezierCurveTo(140 * niven, 36 * niven, 137 * niven, 32 * niven, 124 * niven, 29 * niven);
  emillion.bezierCurveTo(98 * niven, 22 * niven, 80 * niven, 24 * niven, 62 * niven, 28 * niven);
  emillion.bezierCurveTo(42 * niven, 35 * niven, 38 * niven, 46 * niven, 34 * niven, 58 * niven);
  emillion.bezierCurveTo(53 * niven, 74 * niven, 76 * niven, 76 * niven, 91 * niven, 78 * niven);
  emillion.closePath();
  fill_path(emillion, heitor[0], heitor[1], 4 * niven);
  emillion.beginPath();
  emillion.lineCap = "round";
  emillion.lineJoin = "round";
  emillion.moveTo(37 * niven, 53 * niven);
  emillion.bezierCurveTo(30 * niven, 56 * niven, 29 * niven, 67 * niven, 30 * niven, 68 * niven);
  emillion.bezierCurveTo(94 * niven, 108 * niven, 150 * niven, 76 * niven, 155 * niven, 70 * niven);
  emillion.bezierCurveTo(154 * niven, 60 * niven, 151 * niven, 54 * niven, 149 * niven, 53 * niven);
  emillion.bezierCurveTo(101 * niven, 74 * niven, 66 * niven, 66 * niven, 37 * niven, 53 * niven);
  emillion.closePath();
  fill_path(emillion, heitor[2], heitor[3], 4 * niven);
  emillion.beginPath();
  emillion.lineCap = "round";
  emillion.lineJoin = "round";
  emillion.moveTo(100 * niven, 36 * niven);
  emillion.bezierCurveTo(92 * niven, 25 * niven, 86 * niven, 28 * niven, 82 * niven, 34 * niven);
  emillion.bezierCurveTo(88 * niven, 40 * niven, 93 * niven, 40 * niven, 98 * niven, 36 * niven);
  emillion.closePath();
  fill_path(emillion, heitor[0], heitor[1], 4 * niven);
  emillion.beginPath();
  emillion.lineCap = "round";
  emillion.lineJoin = "round";
  emillion.moveTo(80 * niven, 43 * niven);
  emillion.bezierCurveTo(69 * niven, 46 * niven, 67 * niven, 52 * niven, 69 * niven, 58 * niven);
  fill_path(emillion, undefined, heitor[1], 4 * niven);
  circle(emillion, 58 * niven, 50 * niven, 5 * niven);
  fill_path(emillion, heitor[4]);
  circle(emillion, 43 * niven, 65 * niven, 5 * niven);
  fill_path(emillion, heitor[4]);
  circle(emillion, 58 * niven, 73 * niven, 5 * niven);
  fill_path(emillion, heitor[4]);
  circle(emillion, 58 * niven, 50 * niven, 2 * niven);
  fill_path(emillion, heitor[5]);
  circle(emillion, 43 * niven, 65 * niven, 2 * niven);
  fill_path(emillion, heitor[5]);
  circle(emillion, 58 * niven, 73 * niven, 2 * niven);
  fill_path(emillion, heitor[5]);
  return tyriel;
}
function create_wooden_helmet(cionne, indianna, justn) {
  var luqmaan = document.createElement("canvas");
  var jileen = luqmaan.getContext("2d");
  luqmaan.width = 180 * cionne;
  luqmaan.height = 120 * cionne;
  jileen.translate(-65 * cionne, -35 * cionne);
  jileen.globalAlpha = indianna ? .5 : 1;
  jileen.translate(0, 10 * cionne);
  jileen.save();
  jileen.translate(150.5 * cionne, 63.84375 * cionne);
  round_rect(jileen, -67 * cionne, -16.5 * cionne, 134 * cionne, 33 * cionne, 5 * cionne);
  jileen.restore();
  fill_path(jileen, justn[0]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(80.5 * cionne, 75.34375 * cionne);
  jileen.bezierCurveTo(83 * cionne, 106.34375 * cionne, 83 * cionne, 106.34375 * cionne, 85.5 * cionne, 137.34375 * cionne);
  jileen.bezierCurveTo(93 * cionne, 135.84375 * cionne, 93 * cionne, 135.84375 * cionne, 100.5 * cionne, 134.34375 * cionne);
  jileen.bezierCurveTo(99.5 * cionne, 100.84375 * cionne, 99.5 * cionne, 100.84375 * cionne, 98.5 * cionne, 67.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[0]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(206.5 * cionne, 71.34375 * cionne);
  jileen.bezierCurveTo(203.5 * cionne, 104.34375 * cionne, 203.5 * cionne, 104.34375 * cionne, 200.5 * cionne, 137.34375 * cionne);
  jileen.bezierCurveTo(208.5 * cionne, 137.34375 * cionne, 208.5 * cionne, 137.34375 * cionne, 216.5 * cionne, 137.34375 * cionne);
  jileen.bezierCurveTo(219 * cionne, 102.84375 * cionne, 219 * cionne, 102.84375 * cionne, 221.5 * cionne, 68.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[0]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(136.5 * cionne, 75.34375 * cionne);
  jileen.bezierCurveTo(139 * cionne, 94.34375 * cionne, 139 * cionne, 94.34375 * cionne, 141.5 * cionne, 113.34375 * cionne);
  jileen.bezierCurveTo(149.5 * cionne, 115.34375 * cionne, 149.5 * cionne, 115.34375 * cionne, 157.5 * cionne, 117.34375 * cionne);
  jileen.bezierCurveTo(162 * cionne, 97.34375 * cionne, 162 * cionne, 97.34375 * cionne, 166.5 * cionne, 77.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[0]);
  jileen.save();
  jileen.translate(152.5 * cionne, 80.84375 * cionne);
  jileen.rotate(3.12);
  round_rect(jileen, -73 * cionne, -20.5 * cionne, 146 * cionne, 41 * cionne, 5 * cionne);
  jileen.restore();
  fill_path(jileen, justn[0]);
  jileen.globalAlpha = 1;
  jileen.translate(0, -10 * cionne);
  jileen.save();
  jileen.translate(150.5 * cionne, 63.84375 * cionne);
  round_rect(jileen, -67 * cionne, -16.5 * cionne, 134 * cionne, 33 * cionne, 5 * cionne);
  jileen.restore();
  fill_path(jileen, justn[1], justn[2], 4 * cionne);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(80.5 * cionne, 75.34375 * cionne);
  jileen.bezierCurveTo(83 * cionne, 106.34375 * cionne, 83 * cionne, 106.34375 * cionne, 85.5 * cionne, 137.34375 * cionne);
  jileen.bezierCurveTo(93 * cionne, 135.84375 * cionne, 93 * cionne, 135.84375 * cionne, 100.5 * cionne, 134.34375 * cionne);
  jileen.bezierCurveTo(99.5 * cionne, 100.84375 * cionne, 99.5 * cionne, 100.84375 * cionne, 98.5 * cionne, 67.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[1], justn[2], 4 * cionne);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(206.5 * cionne, 71.34375 * cionne);
  jileen.bezierCurveTo(203.5 * cionne, 104.34375 * cionne, 203.5 * cionne, 104.34375 * cionne, 200.5 * cionne, 137.34375 * cionne);
  jileen.bezierCurveTo(208.5 * cionne, 137.34375 * cionne, 208.5 * cionne, 137.34375 * cionne, 216.5 * cionne, 137.34375 * cionne);
  jileen.bezierCurveTo(219 * cionne, 102.84375 * cionne, 219 * cionne, 102.84375 * cionne, 221.5 * cionne, 68.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[1], justn[2], 4 * cionne);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(136.5 * cionne, 75.34375 * cionne);
  jileen.bezierCurveTo(139 * cionne, 94.34375 * cionne, 139 * cionne, 94.34375 * cionne, 141.5 * cionne, 113.34375 * cionne);
  jileen.bezierCurveTo(149.5 * cionne, 115.34375 * cionne, 149.5 * cionne, 115.34375 * cionne, 157.5 * cionne, 117.34375 * cionne);
  jileen.bezierCurveTo(162 * cionne, 97.34375 * cionne, 162 * cionne, 97.34375 * cionne, 166.5 * cionne, 77.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[1], justn[2], 4 * cionne);
  jileen.save();
  jileen.translate(152.5 * cionne, 80.84375 * cionne);
  jileen.rotate(3.12);
  round_rect(jileen, -73 * cionne, -20.5 * cionne, 146 * cionne, 41 * cionne, 5 * cionne);
  jileen.restore();
  fill_path(jileen, justn[1], justn[2], 4 * cionne);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(83.5 * cionne, 73.34375 * cionne);
  jileen.bezierCurveTo(93.5 * cionne, 70.34375 * cionne, 105.5 * cionne, 70.34375 * cionne, 124.5 * cionne, 72.34375 * cionne);
  jileen.bezierCurveTo(132.5 * cionne, 78.34375 * cionne, 162.5 * cionne, 80.34375 * cionne, 176.5 * cionne, 76.34375 * cionne);
  jileen.bezierCurveTo(194.5 * cionne, 69.34375 * cionne, 192.5 * cionne, 68.34375 * cionne, 199.5 * cionne, 63.34375 * cionne);
  jileen.bezierCurveTo(204.5 * cionne, 63.34375 * cionne, 204.5 * cionne, 63.34375 * cionne, 209.5 * cionne, 63.34375 * cionne);
  jileen.bezierCurveTo(153.5 * cionne, 82.34375 * cionne, 157.5 * cionne, 85.34375 * cionne, 209.5 * cionne, 63.34375 * cionne);
  jileen.bezierCurveTo(194.5 * cionne, 88.34375 * cionne, 162.5 * cionne, 87.34375 * cionne, 149.5 * cionne, 88.34375 * cionne);
  jileen.bezierCurveTo(129.5 * cionne, 81.34375 * cionne, 103.5 * cionne, 75.34375 * cionne, 83.5 * cionne, 82.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[3]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(137.5 * cionne, 65.34375 * cionne);
  jileen.bezierCurveTo(150.5 * cionne, 76.34375 * cionne, 170.5 * cionne, 71.34375 * cionne, 174.5 * cionne, 65.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[3]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(221.5 * cionne, 85.34375 * cionne);
  jileen.bezierCurveTo(211.5 * cionne, 79.34375 * cionne, 191.5 * cionne, 88.34375 * cionne, 181.5 * cionne, 96.34375 * cionne);
  jileen.bezierCurveTo(201.5 * cionne, 96.34375 * cionne, 201.5 * cionne, 96.34375 * cionne, 221.5 * cionne, 96.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[3]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(84.5 * cionne, 89.34375 * cionne);
  jileen.bezierCurveTo(102.5 * cionne, 87.34375 * cionne, 112.5 * cionne, 88.34375 * cionne, 119.5 * cionne, 97.34375 * cionne);
  jileen.bezierCurveTo(102 * cionne, 98.34375 * cionne, 102 * cionne, 98.34375 * cionne, 84.5 * cionne, 99.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[3]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(208.5 * cionne, 104.34375 * cionne);
  jileen.bezierCurveTo(208.5 * cionne, 110.34375 * cionne, 208.5 * cionne, 110.34375 * cionne, 208.5 * cionne, 116.34375 * cionne);
  jileen.bezierCurveTo(211.5 * cionne, 110.34375 * cionne, 211.5 * cionne, 110.34375 * cionne, 214.5 * cionne, 104.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[3]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(87.5 * cionne, 117.34375 * cionne);
  jileen.bezierCurveTo(92 * cionne, 118.84375 * cionne, 92 * cionne, 118.84375 * cionne, 96.5 * cionne, 120.34375 * cionne);
  jileen.bezierCurveTo(93 * cionne, 123.84375 * cionne, 93 * cionne, 123.84375 * cionne, 89.5 * cionne, 127.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[3]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(107.5 * cionne, 51.34375 * cionne);
  jileen.bezierCurveTo(122.5 * cionne, 54.34375 * cionne, 122.5 * cionne, 54.34375 * cionne, 137.5 * cionne, 57.34375 * cionne);
  jileen.bezierCurveTo(118 * cionne, 57.34375 * cionne, 118 * cionne, 57.34375 * cionne, 98.5 * cionne, 57.34375 * cionne);
  jileen.bezierCurveTo(94.5 * cionne, 54.84375 * cionne, 94.5 * cionne, 54.84375 * cionne, 90.5 * cionne, 52.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[3]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(170.5 * cionne, 52.34375 * cionne);
  jileen.bezierCurveTo(179.5 * cionne, 51.84375 * cionne, 179.5 * cionne, 51.84375 * cionne, 188.5 * cionne, 51.34375 * cionne);
  jileen.bezierCurveTo(187.5 * cionne, 53.84375 * cionne, 187.5 * cionne, 53.84375 * cionne, 186.5 * cionne, 56.34375 * cionne);
  jileen.bezierCurveTo(177 * cionne, 56.34375 * cionne, 177 * cionne, 56.34375 * cionne, 167.5 * cionne, 56.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[3]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(80.5 * cionne, 69.34375 * cionne);
  jileen.bezierCurveTo(86.5 * cionne, 70.34375 * cionne, 86.5 * cionne, 70.34375 * cionne, 92.5 * cionne, 71.34375 * cionne);
  jileen.bezierCurveTo(86 * cionne, 73.34375 * cionne, 86 * cionne, 73.34375 * cionne, 79.5 * cionne, 75.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[2]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(222.5 * cionne, 75.34375 * cionne);
  jileen.bezierCurveTo(214.5 * cionne, 76.34375 * cionne, 214.5 * cionne, 76.34375 * cionne, 206.5 * cionne, 77.34375 * cionne);
  jileen.bezierCurveTo(216.5 * cionne, 79.34375 * cionne, 216.5 * cionne, 79.34375 * cionne, 226.5 * cionne, 81.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[2]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(116.5 * cionne, 100.34375 * cionne);
  jileen.bezierCurveTo(128 * cionne, 97.34375 * cionne, 128 * cionne, 97.34375 * cionne, 139.5 * cionne, 94.34375 * cionne);
  jileen.bezierCurveTo(140 * cionne, 96.84375 * cionne, 140 * cionne, 96.84375 * cionne, 140.5 * cionne, 99.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[2]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(112.5 * cionne, 48.34375 * cionne);
  jileen.bezierCurveTo(115.5 * cionne, 50.84375 * cionne, 115.5 * cionne, 50.84375 * cionne, 118.5 * cionne, 53.34375 * cionne);
  jileen.bezierCurveTo(131 * cionne, 50.84375 * cionne, 131 * cionne, 50.84375 * cionne, 143.5 * cionne, 48.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[2]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(216.5 * cionne, 109.34375 * cionne);
  jileen.bezierCurveTo(213 * cionne, 114.84375 * cionne, 213 * cionne, 114.84375 * cionne, 209.5 * cionne, 120.34375 * cionne);
  jileen.bezierCurveTo(212 * cionne, 118.84375 * cionne, 212 * cionne, 118.84375 * cionne, 214.5 * cionne, 117.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[2]);
  jileen.beginPath();
  jileen.lineCap = "round";
  jileen.lineJoin = "round";
  jileen.moveTo(86.5 * cionne, 133.34375 * cionne);
  jileen.bezierCurveTo(89 * cionne, 127.34375 * cionne, 89 * cionne, 127.34375 * cionne, 91.5 * cionne, 121.34375 * cionne);
  jileen.bezierCurveTo(92.5 * cionne, 127.34375 * cionne, 92.5 * cionne, 127.34375 * cionne, 93.5 * cionne, 133.34375 * cionne);
  jileen.closePath();
  fill_path(jileen, justn[2]);
  return luqmaan;
}
function create_viking_hat(jennamarie, yuly, laterria) {
  var zebadiah = document.createElement("canvas");
  var nicos = zebadiah.getContext("2d");
  zebadiah.width = 175 * jennamarie;
  zebadiah.height = 106 * jennamarie;
  nicos.globalAlpha = yuly ? .5 : 1;
  nicos.translate(0, 8 * jennamarie);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(28 * jennamarie, 67 * jennamarie);
  nicos.bezierCurveTo(55 * jennamarie, 80 * jennamarie, 126 * jennamarie, 74 * jennamarie, 144 * jennamarie, 68 * jennamarie);
  nicos.bezierCurveTo(144.5 * jennamarie, 75 * jennamarie, 144.5 * jennamarie, 75 * jennamarie, 145 * jennamarie, 82 * jennamarie);
  nicos.bezierCurveTo(114 * jennamarie, 94 * jennamarie, 47 * jennamarie, 91 * jennamarie, 28 * jennamarie, 82 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[0]);
  nicos.globalAlpha = 1;
  nicos.translate(0, -8 * jennamarie);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(145 * jennamarie, 75 * jennamarie);
  nicos.bezierCurveTo(143 * jennamarie, 51 * jennamarie, 133 * jennamarie, 29 * jennamarie, 100 * jennamarie, 27 * jennamarie);
  nicos.bezierCurveTo(52 * jennamarie, 21 * jennamarie, 37 * jennamarie, 37 * jennamarie, 31 * jennamarie, 54 * jennamarie);
  nicos.bezierCurveTo(23 * jennamarie, 78 * jennamarie, 28 * jennamarie, 77 * jennamarie, 36 * jennamarie, 79 * jennamarie);
  nicos.bezierCurveTo(80 * jennamarie, 87 * jennamarie, 120 * jennamarie, 81 * jennamarie, 145 * jennamarie, 76 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[1]);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(38 * jennamarie, 46 * jennamarie);
  nicos.bezierCurveTo(52 * jennamarie, 37 * jennamarie, 69 * jennamarie, 36 * jennamarie, 85 * jennamarie, 36 * jennamarie);
  nicos.bezierCurveTo(118 * jennamarie, 38 * jennamarie, 129 * jennamarie, 42 * jennamarie, 137 * jennamarie, 48 * jennamarie);
  nicos.bezierCurveTo(135 * jennamarie, 45 * jennamarie, 135 * jennamarie, 45 * jennamarie, 133 * jennamarie, 42 * jennamarie);
  nicos.bezierCurveTo(124 * jennamarie, 32 * jennamarie, 116 * jennamarie, 28 * jennamarie, 88 * jennamarie, 25 * jennamarie);
  nicos.bezierCurveTo(47 * jennamarie, 28 * jennamarie, 40 * jennamarie, 32 * jennamarie, 36 * jennamarie, 44 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[5]);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(145 * jennamarie, 75 * jennamarie);
  nicos.bezierCurveTo(143 * jennamarie, 51 * jennamarie, 133 * jennamarie, 29 * jennamarie, 100 * jennamarie, 27 * jennamarie);
  nicos.bezierCurveTo(52 * jennamarie, 21 * jennamarie, 37 * jennamarie, 37 * jennamarie, 31 * jennamarie, 54 * jennamarie);
  nicos.bezierCurveTo(23 * jennamarie, 78 * jennamarie, 28 * jennamarie, 77 * jennamarie, 36 * jennamarie, 79 * jennamarie);
  nicos.bezierCurveTo(80 * jennamarie, 87 * jennamarie, 120 * jennamarie, 81 * jennamarie, 145 * jennamarie, 76 * jennamarie);
  nicos.closePath();
  fill_path(nicos, undefined, laterria[2], 4 * jennamarie);
  nicos.translate(0, -3 * jennamarie);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(28 * jennamarie, 67 * jennamarie);
  nicos.bezierCurveTo(55 * jennamarie, 80 * jennamarie, 126 * jennamarie, 74 * jennamarie, 144 * jennamarie, 68 * jennamarie);
  nicos.bezierCurveTo(144.5 * jennamarie, 75 * jennamarie, 144.5 * jennamarie, 75 * jennamarie, 145 * jennamarie, 82 * jennamarie);
  nicos.bezierCurveTo(114 * jennamarie, 94 * jennamarie, 47 * jennamarie, 91 * jennamarie, 28 * jennamarie, 82 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[10], laterria[10], 4 * jennamarie);
  nicos.translate(0, 3 * jennamarie);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(131 * jennamarie, 43 * jennamarie);
  nicos.bezierCurveTo(145 * jennamarie, 40 * jennamarie, 148 * jennamarie, 32 * jennamarie, 147 * jennamarie, 17 * jennamarie);
  nicos.bezierCurveTo(166 * jennamarie, 39 * jennamarie, 155 * jennamarie, 62 * jennamarie, 140 * jennamarie, 67 * jennamarie);
  nicos.bezierCurveTo(128 * jennamarie, 65 * jennamarie, 128 * jennamarie, 52 * jennamarie, 131 * jennamarie, 45 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[3]);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(41 * jennamarie, 43 * jennamarie);
  nicos.bezierCurveTo(30 * jennamarie, 42 * jennamarie, 24 * jennamarie, 33 * jennamarie, 25 * jennamarie, 17 * jennamarie);
  nicos.bezierCurveTo(7 * jennamarie, 34 * jennamarie, 17 * jennamarie, 63 * jennamarie, 33 * jennamarie, 66 * jennamarie);
  nicos.bezierCurveTo(45 * jennamarie, 59 * jennamarie, 44 * jennamarie, 53 * jennamarie, 42 * jennamarie, 44 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[3]);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(24 * jennamarie, 19 * jennamarie);
  nicos.bezierCurveTo(24 * jennamarie, 35 * jennamarie, 35 * jennamarie, 42 * jennamarie, 42 * jennamarie, 44 * jennamarie);
  nicos.bezierCurveTo(43 * jennamarie, 51 * jennamarie, 43 * jennamarie, 48 * jennamarie, 43 * jennamarie, 56 * jennamarie);
  nicos.bezierCurveTo(25 * jennamarie, 47 * jennamarie, 17 * jennamarie, 36 * jennamarie, 23 * jennamarie, 20 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[6]);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(148 * jennamarie, 18 * jennamarie);
  nicos.bezierCurveTo(159 * jennamarie, 44 * jennamarie, 139 * jennamarie, 52 * jennamarie, 130 * jennamarie, 55 * jennamarie);
  nicos.bezierCurveTo(129 * jennamarie, 48 * jennamarie, 129 * jennamarie, 46 * jennamarie, 131 * jennamarie, 43 * jennamarie);
  nicos.bezierCurveTo(144 * jennamarie, 37 * jennamarie, 148 * jennamarie, 35 * jennamarie, 147 * jennamarie, 18 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[6]);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(131 * jennamarie, 43 * jennamarie);
  nicos.bezierCurveTo(145 * jennamarie, 40 * jennamarie, 148 * jennamarie, 32 * jennamarie, 147 * jennamarie, 17 * jennamarie);
  nicos.bezierCurveTo(166 * jennamarie, 39 * jennamarie, 155 * jennamarie, 62 * jennamarie, 140 * jennamarie, 67 * jennamarie);
  nicos.bezierCurveTo(128 * jennamarie, 65 * jennamarie, 128 * jennamarie, 52 * jennamarie, 131 * jennamarie, 45 * jennamarie);
  nicos.closePath();
  fill_path(nicos, undefined, laterria[4], 4 * jennamarie);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(41 * jennamarie, 43 * jennamarie);
  nicos.bezierCurveTo(30 * jennamarie, 42 * jennamarie, 24 * jennamarie, 33 * jennamarie, 25 * jennamarie, 17 * jennamarie);
  nicos.bezierCurveTo(7 * jennamarie, 34 * jennamarie, 17 * jennamarie, 63 * jennamarie, 33 * jennamarie, 66 * jennamarie);
  nicos.bezierCurveTo(45 * jennamarie, 59 * jennamarie, 44 * jennamarie, 53 * jennamarie, 42 * jennamarie, 44 * jennamarie);
  nicos.closePath();
  fill_path(nicos, undefined, laterria[4], 4 * jennamarie);
  nicos.save();
  nicos.translate(87 * jennamarie, 34.5 * jennamarie);
  nicos.rotate(0);
  round_rect(nicos, -8 * jennamarie, -10.5 * jennamarie, 16 * jennamarie, 21 * jennamarie, 10 * jennamarie);
  nicos.restore();
  fill_path(nicos, laterria[7], laterria[2], 4 * jennamarie);
  nicos.save();
  nicos.translate(87 * jennamarie, 57 * jennamarie);
  nicos.rotate(0);
  round_rect(nicos, -8 * jennamarie, -23 * jennamarie, 16 * jennamarie, 46 * jennamarie, 10 * jennamarie);
  nicos.restore();
  fill_path(nicos, laterria[8], laterria[2], 4 * jennamarie);
  circle(nicos, 87 * jennamarie, 39 * jennamarie, 4.123105625617661 * jennamarie);
  fill_path(nicos, laterria[9], laterria[2], 4 * jennamarie);
  circle(nicos, 87 * jennamarie, 60 * jennamarie, 4.242640687119285 * jennamarie);
  fill_path(nicos, laterria[9], laterria[2], 4 * jennamarie);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(28 * jennamarie, 67 * jennamarie);
  nicos.bezierCurveTo(55 * jennamarie, 80 * jennamarie, 126 * jennamarie, 74 * jennamarie, 144 * jennamarie, 68 * jennamarie);
  nicos.bezierCurveTo(144.5 * jennamarie, 75 * jennamarie, 144.5 * jennamarie, 75 * jennamarie, 145 * jennamarie, 82 * jennamarie);
  nicos.bezierCurveTo(114 * jennamarie, 94 * jennamarie, 47 * jennamarie, 91 * jennamarie, 28 * jennamarie, 82 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[8], laterria[2], 4 * jennamarie);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(27 * jennamarie, 69 * jennamarie);
  nicos.bezierCurveTo(13 * jennamarie, 77 * jennamarie, 16 * jennamarie, 74 * jennamarie, 27 * jennamarie, 80 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[9], laterria[2], 4 * jennamarie);
  nicos.beginPath();
  nicos.lineCap = "round";
  nicos.lineJoin = "round";
  nicos.moveTo(145 * jennamarie, 70 * jennamarie);
  nicos.bezierCurveTo(149.5 * jennamarie, 72 * jennamarie, 149.5 * jennamarie, 72 * jennamarie, 154 * jennamarie, 74 * jennamarie);
  nicos.bezierCurveTo(150 * jennamarie, 77 * jennamarie, 150 * jennamarie, 77 * jennamarie, 146 * jennamarie, 80 * jennamarie);
  nicos.closePath();
  fill_path(nicos, laterria[9], laterria[2], 4 * jennamarie);
  circle(nicos, 50 * jennamarie, 80 * jennamarie, 5 * jennamarie);
  fill_path(nicos, laterria[9], laterria[2], 4 * jennamarie);
  circle(nicos, 86.01141357421875 * jennamarie, 81.76705932617188 * jennamarie, 5 * jennamarie);
  fill_path(nicos, laterria[9], laterria[2], 4 * jennamarie);
  circle(nicos, 119.01141357421875 * jennamarie, 80.13069152832031 * jennamarie, 5 * jennamarie);
  fill_path(nicos, laterria[9], laterria[2], 4 * jennamarie);
  return zebadiah;
}
function create_gold_helmet(malyssa, jenele, dougles) {
  var yarelin = document.createElement("canvas");
  var sanetta = yarelin.getContext("2d");
  yarelin.width = 142 * malyssa;
  yarelin.height = 118 * malyssa;
  sanetta.save();
  sanetta.translate(70.16665649414062 * malyssa, 38.20831298828125 * malyssa);
  round_rect(sanetta, -58.5 * malyssa, -27.5 * malyssa, 117 * malyssa, 55 * malyssa, 20 * malyssa);
  sanetta.restore();
  fill_path(sanetta, dougles[0], dougles[1], 4 * malyssa);
  sanetta.save();
  sanetta.translate(70 * malyssa, 42.70831298828125 * malyssa);
  round_rect(sanetta, -61 * malyssa, -20 * malyssa, 122 * malyssa, 40 * malyssa, 20 * malyssa);
  sanetta.restore();
  fill_path(sanetta, dougles[2], dougles[1], 4 * malyssa);
  sanetta.beginPath();
  sanetta.lineCap = "round";
  sanetta.lineJoin = "round";
  sanetta.moveTo(123 * malyssa, 70.375 * malyssa);
  sanetta.bezierCurveTo(115 * malyssa, 99.375 * malyssa, 119 * malyssa, 85.375 * malyssa, 115 * malyssa, 100.375 * malyssa);
  sanetta.bezierCurveTo(112 * malyssa, 116.375 * malyssa, 117 * malyssa, 109.375 * malyssa, 131 * malyssa, 100.375 * malyssa);
  sanetta.bezierCurveTo(131 * malyssa, 83.375 * malyssa, 131 * malyssa, 83.375 * malyssa, 131 * malyssa, 66.375 * malyssa);
  sanetta.closePath();
  fill_path(sanetta, dougles[2], dougles[1], 4 * malyssa);
  sanetta.beginPath();
  sanetta.lineCap = "round";
  sanetta.lineJoin = "round";
  sanetta.moveTo(11 * malyssa, 68.375 * malyssa);
  sanetta.bezierCurveTo(11.166656494140625 * malyssa, 84.375 * malyssa, 9 * malyssa, 99.375 * malyssa, 10 * malyssa, 100.375 * malyssa);
  sanetta.bezierCurveTo(35 * malyssa, 113.375 * malyssa, 27 * malyssa, 110.375 * malyssa, 25 * malyssa, 95.375 * malyssa);
  sanetta.bezierCurveTo(16 * malyssa, 68.375 * malyssa, 17 * malyssa, 69.375 * malyssa, 17 * malyssa, 68.375 * malyssa);
  sanetta.closePath();
  fill_path(sanetta, dougles[2], dougles[1], 4 * malyssa);
  sanetta.beginPath();
  sanetta.lineCap = "round";
  sanetta.lineJoin = "round";
  sanetta.moveTo(46 * malyssa, 32.375 * malyssa);
  sanetta.bezierCurveTo(43 * malyssa, 8.375 * malyssa, 45 * malyssa, 7.375 * malyssa, 56 * malyssa, 6.375 * malyssa);
  sanetta.bezierCurveTo(105 * malyssa, 4.375 * malyssa, 102 * malyssa, 6.375 * malyssa, 97 * malyssa, 32.375 * malyssa);
  sanetta.bezierCurveTo(138 * malyssa, 43.375 * malyssa, 133 * malyssa, 45.375 * malyssa, 133 * malyssa, 58.375 * malyssa);
  sanetta.bezierCurveTo(133 * malyssa, 85.375 * malyssa, 125 * malyssa, 74.375 * malyssa, 111 * malyssa, 70.375 * malyssa);
  sanetta.bezierCurveTo(70 * malyssa, 69.875 * malyssa, 29 * malyssa, 69.375 * malyssa, 29 * malyssa, 69.375 * malyssa);
  sanetta.bezierCurveTo(7 * malyssa, 84.375 * malyssa, 7 * malyssa, 70.375 * malyssa, 7 * malyssa, 59.375 * malyssa);
  sanetta.bezierCurveTo(6 * malyssa, 28.375 * malyssa, 32 * malyssa, 39.375 * malyssa, 44 * malyssa, 32.375 * malyssa);
  sanetta.closePath();
  fill_path(sanetta, dougles[2], dougles[1], 4 * malyssa);
  circle(sanetta, 71 * malyssa, 44.375 * malyssa, 16.55294535724685 * malyssa);
  fill_path(sanetta, dougles[2], dougles[1], 4 * malyssa);
  circle(sanetta, 71 * malyssa, 43.70831298828125 * malyssa, 8.94427190999916 * malyssa);
  fill_path(sanetta, dougles[2], dougles[1], 4 * malyssa);
  return yarelin;
}
function create_diamond_helmet(gai, timea, zoia) {
  var cristyn = document.createElement("canvas");
  var sragvi = cristyn.getContext("2d");
  cristyn.width = 142 * gai;
  cristyn.height = 118 * gai;
  sragvi.beginPath();
  sragvi.lineCap = "round";
  sragvi.lineJoin = "round";
  sragvi.moveTo(111 * gai, 27.3671875 * gai);
  sragvi.bezierCurveTo(128 * gai, 9.3671875 * gai, 125 * gai, 13.3671875 * gai, 126 * gai, 21.3671875 * gai);
  sragvi.bezierCurveTo(126 * gai, 33.3671875 * gai, 119 * gai, 43.3671875 * gai, 118 * gai, 42.3671875 * gai);
  sragvi.closePath();
  fill_path(sragvi, zoia[3], zoia[4], 4 * gai);
  sragvi.beginPath();
  sragvi.lineCap = "round";
  sragvi.lineJoin = "round";
  sragvi.moveTo(31 * gai, 23.3671875 * gai);
  sragvi.bezierCurveTo(17 * gai, 15.3671875 * gai, 16 * gai, 14.3671875 * gai, 17 * gai, 20.3671875 * gai);
  sragvi.bezierCurveTo(22 * gai, 33.3671875 * gai, 20 * gai, 27.3671875 * gai, 24 * gai, 34.3671875 * gai);
  sragvi.closePath();
  fill_path(sragvi, zoia[3], zoia[4], 4 * gai);
  sragvi.save();
  sragvi.translate(70.5 * gai, 34.8671875 * gai);
  sragvi.rotate(0);
  round_rect(sragvi, -49.5 * gai, -21.5 * gai, 99 * gai, 43 * gai, 15 * gai);
  sragvi.restore();
  fill_path(sragvi, zoia[0], zoia[1], 4 * gai);
  sragvi.save();
  sragvi.translate(71 * gai, 40.8671875 * gai);
  sragvi.rotate(0);
  round_rect(sragvi, -49 * gai, -12.5 * gai, 98 * gai, 25 * gai, 15 * gai);
  sragvi.restore();
  fill_path(sragvi, zoia[2], zoia[1], 4 * gai);
  sragvi.beginPath();
  sragvi.lineCap = "round";
  sragvi.lineJoin = "round";
  sragvi.moveTo(19.800003051757812 * gai, 75.95625305175781 * gai);
  sragvi.bezierCurveTo(19.300003051757812 * gai, 82.95625305175781 * gai, 19.300003051757812 * gai, 82.95625305175781 * gai, 18.800003051757812 * gai, 89.95625305175781 * gai);
  sragvi.bezierCurveTo(38.80000305175781 * gai, 115.95625305175781 * gai, 37.80000305175781 * gai, 104.95625305175781 * gai, 31.800003051757812 * gai, 91.95625305175781 * gai);
  sragvi.closePath();
  fill_path(sragvi, zoia[2], zoia[1], 4 * gai);
  sragvi.beginPath();
  sragvi.lineCap = "round";
  sragvi.lineJoin = "round";
  sragvi.moveTo(119.80000305175781 * gai, 75.95625305175781 * gai);
  sragvi.bezierCurveTo(120.80000305175781 * gai, 82.95625305175781 * gai, 120.80000305175781 * gai, 82.95625305175781 * gai, 121.80000305175781 * gai, 89.95625305175781 * gai);
  sragvi.bezierCurveTo(101.80000305175781 * gai, 111.95625305175781 * gai, 99.80000305175781 * gai, 111.95625305175781 * gai, 112.80000305175781 * gai, 81.95625305175781 * gai);
  sragvi.closePath();
  fill_path(sragvi, zoia[2], zoia[1], 4 * gai);
  sragvi.beginPath();
  sragvi.lineCap = "round";
  sragvi.lineJoin = "round";
  sragvi.moveTo(17.800003051757812 * gai, 49.15625 * gai);
  sragvi.bezierCurveTo(17.800003051757812 * gai, 64.15625 * gai, 17.800003051757812 * gai, 64.15625 * gai, 17.800003051757812 * gai, 79.15625 * gai);
  sragvi.bezierCurveTo(23.300003051757812 * gai, 85.15625 * gai, 23.300003051757812 * gai, 85.15625 * gai, 28.800003051757812 * gai, 91.15625 * gai);
  sragvi.bezierCurveTo(36.80000305175781 * gai, 96.15625 * gai, 32.80000305175781 * gai, 91.15625 * gai, 28.800003051757812 * gai, 77.15625 * gai);
  sragvi.bezierCurveTo(33.80000305175781 * gai, 65.15625 * gai, 33.80000305175781 * gai, 65.15625 * gai, 38.80000305175781 * gai, 53.15625 * gai);
  sragvi.closePath();
  fill_path(sragvi, zoia[3], zoia[4], 4 * gai);
  sragvi.beginPath();
  sragvi.lineCap = "round";
  sragvi.lineJoin = "round";
  sragvi.moveTo(123.80000305175781 * gai, 53.95625305175781 * gai);
  sragvi.bezierCurveTo(121.80000305175781 * gai, 77.95625305175781 * gai, 121.80000305175781 * gai, 74.95625305175781 * gai, 121.80000305175781 * gai, 78.95625305175781 * gai);
  sragvi.bezierCurveTo(115.80000305175781 * gai, 84.95625305175781 * gai, 115.80000305175781 * gai, 84.95625305175781 * gai, 109.80000305175781 * gai, 90.95625305175781 * gai);
  sragvi.bezierCurveTo(102.80000305175781 * gai, 93.95625305175781 * gai, 105.80000305175781 * gai, 86.95625305175781 * gai, 110.80000305175781 * gai, 76.95625305175781 * gai);
  sragvi.bezierCurveTo(107.30000305175781 * gai, 65.45625305175781 * gai, 103.80000305175781 * gai, 53.95625305175781 * gai, 103.80000305175781 * gai, 53.95625305175781 * gai);
  sragvi.closePath();
  fill_path(sragvi, zoia[3], zoia[4], 4 * gai);
  sragvi.beginPath();
  sragvi.lineCap = "round";
  sragvi.lineJoin = "round";
  sragvi.moveTo(18 * gai, 56.3671875 * gai);
  sragvi.bezierCurveTo(70 * gai, 56.8671875 * gai, 70 * gai, 56.8671875 * gai, 122 * gai, 57.3671875 * gai);
  sragvi.bezierCurveTo(137 * gai, 20.3671875 * gai, 137 * gai, 16.3671875 * gai, 126 * gai, 22.3671875 * gai);
  sragvi.bezierCurveTo(115.5 * gai, 34.3671875 * gai, 115.5 * gai, 34.3671875 * gai, 105 * gai, 46.3671875 * gai);
  sragvi.bezierCurveTo(70.5 * gai, 46.3671875 * gai, 70.5 * gai, 46.3671875 * gai, 36 * gai, 46.3671875 * gai);
  sragvi.bezierCurveTo(4 * gai, 14.3671875 * gai, 7 * gai, 18.3671875 * gai, 8 * gai, 27.3671875 * gai);
  sragvi.bezierCurveTo(12.5 * gai, 41.8671875 * gai, 12.5 * gai, 41.8671875 * gai, 17 * gai, 56.3671875 * gai);
  sragvi.closePath();
  fill_path(sragvi, zoia[3], zoia[4], 4 * gai);
  sragvi.save();
  sragvi.translate(68.30000305175781 * gai, 41.45625305175781 * gai);
  sragvi.rotate(.76);
  round_rect(sragvi, -20.5 * gai, -20.5 * gai, 41 * gai, 41 * gai, 10 * gai);
  sragvi.restore();
  fill_path(sragvi, undefined, zoia[5], 4 * gai);
  sragvi.save();
  sragvi.translate(68.80000305175781 * gai, 44.45625305175781 * gai);
  sragvi.rotate(.76);
  round_rect(sragvi, -21 * gai, -20.5 * gai, 42 * gai, 41 * gai, 10 * gai);
  sragvi.restore();
  fill_path(sragvi, zoia[3], zoia[4], 4 * gai);
  sragvi.save();
  sragvi.translate(69.80000305175781 * gai, 44.556243896484375 * gai);
  sragvi.rotate(.76);
  round_rect(sragvi, -10 * gai, -10 * gai, 20 * gai, 20 * gai, 5 * gai);
  sragvi.restore();
  fill_path(sragvi, zoia[6], zoia[7], 4 * gai);
  return cristyn;
}
function create_amethyst_helmet(niles, marieanna, demarrion) {
  var costella = document.createElement("canvas");
  var zeplin = costella.getContext("2d");
  costella.width = 145 * niles;
  costella.height = 120 * niles;
  zeplin.beginPath();
  zeplin.scale(.6, .6);
  zeplin.lineCap = "round";
  zeplin.lineJoin = "round";
  zeplin.translate(18 * niles, -8 * niles);
  zeplin.moveTo(101 * niles, 72 * niles);
  zeplin.bezierCurveTo(144 * niles, 69 * niles, 149 * niles, 58 * niles, 162 * niles, 49 * niles);
  zeplin.bezierCurveTo(174 * niles, 31 * niles, 173 * niles, 38 * niles, 172 * niles, 45 * niles);
  zeplin.bezierCurveTo(168 * niles, 73 * niles, 158 * niles, 75 * niles, 152 * niles, 78 * niles);
  zeplin.bezierCurveTo(106 * niles, 89 * niles, 107 * niles, 91 * niles, 107 * niles, 94 * niles);
  zeplin.bezierCurveTo(107 * niles, 100 * niles, 107 * niles, 107 * niles, 107 * niles, 107 * niles);
  zeplin.bezierCurveTo(99 * niles, 112 * niles, 98 * niles, 110 * niles, 93 * niles, 107 * niles);
  zeplin.bezierCurveTo(94 * niles, 107 * niles, 93 * niles, 107 * niles, 93 * niles, 107 * niles);
  zeplin.bezierCurveTo(93 * niles, 100 * niles, 93 * niles, 100 * niles, 92 * niles, 94 * niles);
  zeplin.bezierCurveTo(92 * niles, 89 * niles, 90 * niles, 90 * niles, 73 * niles, 86 * niles);
  zeplin.bezierCurveTo(45 * niles, 81 * niles, 40 * niles, 77 * niles, 35 * niles, 68 * niles);
  zeplin.bezierCurveTo(23 * niles, 36 * niles, 28 * niles, 34 * niles, 36 * niles, 46 * niles);
  zeplin.bezierCurveTo(45 * niles, 58 * niles, 83 * niles, 72 * niles, 98 * niles, 72 * niles);
  zeplin.closePath();
  fill_path(zeplin, demarrion[4], demarrion[5], 4 * niles);
  zeplin.beginPath();
  zeplin.scale(1.1, 1.1);
  zeplin.lineCap = "round";
  zeplin.lineJoin = "round";
  zeplin.translate(-9 * niles, 4 * niles);
  zeplin.moveTo(101 * niles, 72 * niles);
  zeplin.bezierCurveTo(144 * niles, 69 * niles, 149 * niles, 58 * niles, 162 * niles, 49 * niles);
  zeplin.bezierCurveTo(174 * niles, 31 * niles, 173 * niles, 38 * niles, 172 * niles, 45 * niles);
  zeplin.bezierCurveTo(168 * niles, 73 * niles, 158 * niles, 75 * niles, 152 * niles, 78 * niles);
  zeplin.bezierCurveTo(106 * niles, 89 * niles, 107 * niles, 91 * niles, 107 * niles, 94 * niles);
  zeplin.bezierCurveTo(107 * niles, 100 * niles, 107 * niles, 107 * niles, 107 * niles, 107 * niles);
  zeplin.bezierCurveTo(99 * niles, 112 * niles, 98 * niles, 110 * niles, 93 * niles, 107 * niles);
  zeplin.bezierCurveTo(94 * niles, 107 * niles, 93 * niles, 107 * niles, 93 * niles, 107 * niles);
  zeplin.bezierCurveTo(93 * niles, 100 * niles, 93 * niles, 100 * niles, 92 * niles, 94 * niles);
  zeplin.bezierCurveTo(92 * niles, 89 * niles, 90 * niles, 90 * niles, 73 * niles, 86 * niles);
  zeplin.bezierCurveTo(45 * niles, 81 * niles, 40 * niles, 77 * niles, 35 * niles, 68 * niles);
  zeplin.bezierCurveTo(23 * niles, 36 * niles, 28 * niles, 34 * niles, 36 * niles, 46 * niles);
  zeplin.bezierCurveTo(45 * niles, 58 * niles, 83 * niles, 72 * niles, 98 * niles, 72 * niles);
  zeplin.closePath();
  fill_path(zeplin, demarrion[4], demarrion[5], 4 * niles);
  zeplin.scale(1.1, 1.1);
  zeplin.translate(-9 * niles, 4 * niles);
  zeplin.save();
  zeplin.translate(100 * niles, 73.06874084472656 * niles);
  zeplin.rotate(0);
  round_rect(zeplin, -61 * niles, -38.5 * niles, 122 * niles, 40 * niles, 20 * niles);
  zeplin.restore();
  fill_path(zeplin, demarrion[1], demarrion[2], 4 * niles);
  zeplin.save();
  zeplin.translate(100 * niles, 71.36874389648438 * niles);
  zeplin.rotate(0);
  round_rect(zeplin, -60.5 * niles, -18 * niles, 121 * niles, 30 * niles, 20 * niles);
  zeplin.restore();
  fill_path(zeplin, demarrion[3], demarrion[2], 4 * niles);
  zeplin.beginPath();
  zeplin.lineCap = "round";
  zeplin.lineJoin = "round";
  zeplin.moveTo(144 * niles, 80 * niles);
  zeplin.bezierCurveTo(152 * niles, 100 * niles, 152 * niles, 101 * niles, 153 * niles, 102 * niles);
  zeplin.bezierCurveTo(159 * niles, 100 * niles, 159 * niles, 100 * niles, 160 * niles, 100 * niles);
  zeplin.bezierCurveTo(161 * niles, 84 * niles, 161 * niles, 84 * niles, 162 * niles, 68 * niles);
  zeplin.closePath();
  fill_path(zeplin, demarrion[2]);
  zeplin.beginPath();
  zeplin.lineCap = "round";
  zeplin.lineJoin = "round";
  zeplin.moveTo(57 * niles, 75 * niles);
  zeplin.bezierCurveTo(48 * niles, 101 * niles, 53 * niles, 89 * niles, 48 * niles, 102 * niles);
  zeplin.bezierCurveTo(44 * niles, 100 * niles, 44 * niles, 100 * niles, 39 * niles, 97 * niles);
  zeplin.bezierCurveTo(39 * niles, 83 * niles, 39 * niles, 83 * niles, 39 * niles, 69 * niles);
  zeplin.closePath();
  fill_path(zeplin, demarrion[2]);
  zeplin.beginPath();
  zeplin.lineCap = "round";
  zeplin.lineJoin = "round";
  zeplin.moveTo(101 * niles, 72 * niles);
  zeplin.bezierCurveTo(144 * niles, 69 * niles, 149 * niles, 58 * niles, 162 * niles, 49 * niles);
  zeplin.bezierCurveTo(174 * niles, 31 * niles, 173 * niles, 38 * niles, 172 * niles, 45 * niles);
  zeplin.bezierCurveTo(168 * niles, 73 * niles, 158 * niles, 75 * niles, 152 * niles, 78 * niles);
  zeplin.bezierCurveTo(106 * niles, 89 * niles, 107 * niles, 91 * niles, 107 * niles, 94 * niles);
  zeplin.bezierCurveTo(107 * niles, 100 * niles, 107 * niles, 107 * niles, 107 * niles, 107 * niles);
  zeplin.bezierCurveTo(99 * niles, 112 * niles, 98 * niles, 110 * niles, 93 * niles, 107 * niles);
  zeplin.bezierCurveTo(94 * niles, 107 * niles, 93 * niles, 107 * niles, 93 * niles, 107 * niles);
  zeplin.bezierCurveTo(93 * niles, 100 * niles, 93 * niles, 100 * niles, 92 * niles, 94 * niles);
  zeplin.bezierCurveTo(92 * niles, 89 * niles, 90 * niles, 90 * niles, 73 * niles, 86 * niles);
  zeplin.bezierCurveTo(45 * niles, 81 * niles, 40 * niles, 77 * niles, 35 * niles, 68 * niles);
  zeplin.bezierCurveTo(23 * niles, 36 * niles, 28 * niles, 34 * niles, 36 * niles, 46 * niles);
  zeplin.bezierCurveTo(45 * niles, 58 * niles, 83 * niles, 72 * niles, 98 * niles, 72 * niles);
  zeplin.closePath();
  fill_path(zeplin, demarrion[4], demarrion[5], 4 * niles);
  zeplin.translate(0, 0);
  zeplin.beginPath();
  zeplin.lineCap = "round";
  zeplin.lineJoin = "round";
  zeplin.moveTo(115.5 * niles, 116.07290649414062 * niles);
  zeplin.bezierCurveTo(159.5 * niles, 99.07290649414062 * niles, 159.5 * niles, 98.07290649414062 * niles, 159.5 * niles, 98.07290649414062 * niles);
  zeplin.bezierCurveTo(155.5 * niles, 116.07290649414062 * niles, 159.5 * niles, 116.07290649414062 * niles, 159.5 * niles, 118.07290649414062 * niles);
  zeplin.bezierCurveTo(147.5 * niles, 130.07290649414062 * niles, 136.5 * niles, 132.07290649414062 * niles, 115.5 * niles, 138.07290649414062 * niles);
  zeplin.closePath();
  fill_path(zeplin, demarrion[3], demarrion[2], 4 * niles);
  zeplin.beginPath();
  zeplin.lineCap = "round";
  zeplin.lineJoin = "round";
  zeplin.moveTo(39.5 * niles, 96.07290649414062 * niles);
  zeplin.bezierCurveTo(85.5 * niles, 114.07290649414062 * niles, 62.5 * niles, 105.57290649414062 * niles, 85.5 * niles, 115.07290649414062 * niles);
  zeplin.bezierCurveTo(85.5 * niles, 125.57290649414062 * niles, 85.5 * niles, 125.57290649414062 * niles, 85.5 * niles, 136.07290649414062 * niles);
  zeplin.bezierCurveTo(51.5 * niles, 129.07290649414062 * niles, 51.5 * niles, 125.07290649414062 * niles, 41.5 * niles, 118.07290649414062 * niles);
  zeplin.bezierCurveTo(44.5 * niles, 106.07290649414062 * niles, 42.5 * niles, 103.07290649414062 * niles, 40.5 * niles, 96.07290649414062 * niles);
  zeplin.closePath();
  fill_path(zeplin, demarrion[3], demarrion[2], 4 * niles);
  zeplin.beginPath();
  zeplin.lineCap = "round";
  zeplin.lineJoin = "round";
  zeplin.moveTo(86 * niles, 80 * niles);
  zeplin.bezierCurveTo(97 * niles, 88 * niles, 106 * niles, 84 * niles, 112 * niles, 80 * niles);
  zeplin.bezierCurveTo(112 * niles, 62 * niles, 106 * niles, 59 * niles, 99 * niles, 54 * niles);
  zeplin.bezierCurveTo(86 * niles, 62 * niles, 86 * niles, 73 * niles, 86 * niles, 80 * niles);
  zeplin.closePath();
  fill_path(zeplin, demarrion[3], demarrion[2], 4 * niles);
  zeplin.scale(.5, .5);
  zeplin.translate(100 * niles, 71 * niles);
  zeplin.beginPath();
  zeplin.lineCap = "round";
  zeplin.lineJoin = "round";
  zeplin.moveTo(86 * niles, 80 * niles);
  zeplin.bezierCurveTo(97 * niles, 88 * niles, 106 * niles, 84 * niles, 112 * niles, 80 * niles);
  zeplin.bezierCurveTo(112 * niles, 62 * niles, 106 * niles, 59 * niles, 99 * niles, 54 * niles);
  zeplin.bezierCurveTo(86 * niles, 62 * niles, 86 * niles, 73 * niles, 86 * niles, 80 * niles);
  zeplin.closePath();
  fill_path(zeplin, demarrion[6], demarrion[2], 4 * niles);
  return costella;
}
function create_book(myron, jnaya, gelinda) {
  var kaydi = document.createElement("canvas");
  var meridel = kaydi.getContext("2d");
  kaydi.width = 400 * myron;
  kaydi.height = 400 * myron;
  meridel.save();
  meridel.translate(204 * myron, 195.0833282470703 * myron);
  meridel.rotate(10.16);
  round_rect(meridel, -97.5 * myron, -134.5 * myron, 195 * myron, 269 * myron, 10 * myron);
  meridel.restore();
  fill_path(meridel, gelinda[0], gelinda[1], 8 * myron);
  meridel.beginPath();
  meridel.lineCap = "round";
  meridel.lineJoin = "round";
  meridel.moveTo(58.5 * myron, 226.5833282470703 * myron);
  meridel.bezierCurveTo(120.5 * myron, 281.5833282470703 * myron, 120.5 * myron, 281.5833282470703 * myron, 182.5 * myron, 336.5833282470703 * myron);
  meridel.bezierCurveTo(263 * myron, 248.5833282470703 * myron, 263 * myron, 248.5833282470703 * myron, 343.5 * myron, 160.5833282470703 * myron);
  meridel.bezierCurveTo(280.5 * myron, 104.58332824707031 * myron, 280.5 * myron, 104.58332824707031 * myron, 217.5 * myron, 48.58332824707031 * myron);
  meridel.closePath();
  fill_path(meridel, gelinda[2], gelinda[3], 4 * myron);
  meridel.save();
  meridel.translate(197 * myron, 169.0833282470703 * myron);
  meridel.rotate(10.16);
  round_rect(meridel, -93.5 * myron, -126.5 * myron, 187 * myron, 253 * myron, 10 * myron);
  meridel.restore();
  fill_path(meridel, gelinda[4], gelinda[1], 8 * myron);
  meridel.beginPath();
  meridel.lineCap = "round";
  meridel.lineJoin = "round";
  meridel.moveTo(226.5 * myron, 24.583328247070312 * myron);
  meridel.bezierCurveTo(58.5 * myron, 207.5833282470703 * myron, 143 * myron, 116.58332824707031 * myron, 59.5 * myron, 208.5833282470703 * myron);
  meridel.closePath();
  fill_path(meridel, undefined, gelinda[1], 8 * myron);
  meridel.beginPath();
  meridel.lineCap = "round";
  meridel.lineJoin = "round";
  meridel.moveTo(46.133331298828125 * myron, 202.64999389648438 * myron);
  meridel.bezierCurveTo(46.133331298828125 * myron, 215.64999389648438 * myron, 46.133331298828125 * myron, 215.64999389648438 * myron, 46.133331298828125 * myron, 228.64999389648438 * myron);
  meridel.closePath();
  fill_path(meridel, gelinda[4], gelinda[1], 8 * myron);
  meridel.beginPath();
  meridel.lineCap = "round";
  meridel.lineJoin = "round";
  meridel.moveTo(55.133331298828125 * myron, 211.64999389648438 * myron);
  meridel.bezierCurveTo(55.133331298828125 * myron, 225.14999389648438 * myron, 55.133331298828125 * myron, 225.14999389648438 * myron, 55.133331298828125 * myron, 238.64999389648438 * myron);
  meridel.bezierCurveTo(50.133331298828125 * myron, 235.64999389648438 * myron, 50.133331298828125 * myron, 235.64999389648438 * myron, 45.133331298828125 * myron, 232.64999389648438 * myron);
  meridel.bezierCurveTo(45.133331298828125 * myron, 216.64999389648438 * myron, 45.133331298828125 * myron, 216.64999389648438 * myron, 45.133331298828125 * myron, 200.64999389648438 * myron);
  meridel.closePath();
  fill_path(meridel, gelinda[4], gelinda[1], 8 * myron);
  meridel.beginPath();
  meridel.lineCap = "round";
  meridel.lineJoin = "round";
  meridel.moveTo(46.133331298828125 * myron, 198.39999389648438 * myron);
  meridel.bezierCurveTo(46.133331298828125 * myron, 199.89999389648438 * myron, 46.133331298828125 * myron, 199.89999389648438 * myron, 46.133331298828125 * myron, 201.39999389648438 * myron);
  meridel.closePath();
  fill_path(meridel, gelinda[4], gelinda[1], 8 * myron);
  meridel.save();
  meridel.translate(249.63333129882812 * myron, 120.89999389648438 * myron);
  meridel.rotate(7.04);
  round_rect(meridel, -58.5 * myron, -32 * myron, 117 * myron, 64 * myron, 10 * myron);
  meridel.restore();
  fill_path(meridel, gelinda[5]);
  return kaydi;
}
function create_paper(jauquan, yeimy, mayo) {
  var amontae = document.createElement("canvas");
  var resean = amontae.getContext("2d");
  amontae.width = 170 * jauquan;
  amontae.height = 170 * jauquan;
  resean.globalAlpha = yeimy ? .5 : 1;
  resean.translate(-10 * jauquan, 10 * jauquan);
  resean.beginPath();
  resean.lineCap = "round";
  resean.lineJoin = "round";
  resean.moveTo(72.5 * jauquan, 4.109375 * jauquan);
  resean.bezierCurveTo(117 * jauquan, 9.609375 * jauquan, 117 * jauquan, 9.609375 * jauquan, 161.5 * jauquan, 15.109375 * jauquan);
  resean.bezierCurveTo(134.5 * jauquan, 106.109375 * jauquan, 110.5 * jauquan, 130.109375 * jauquan, 63.5 * jauquan, 145.109375 * jauquan);
  resean.bezierCurveTo(33.5 * jauquan, 120.609375 * jauquan, 33.5 * jauquan, 120.609375 * jauquan, 3.5 * jauquan, 96.109375 * jauquan);
  resean.bezierCurveTo(82.5 * jauquan, 75.109375 * jauquan, 69.5 * jauquan, 29.109375 * jauquan, 71.5 * jauquan, 6.109375 * jauquan);
  resean.closePath();
  fill_path(resean, mayo[0]);
  resean.globalAlpha = 1;
  resean.translate(10 * jauquan, -10 * jauquan);
  resean.beginPath();
  resean.lineCap = "round";
  resean.lineJoin = "round";
  resean.moveTo(72.5 * jauquan, 4.109375 * jauquan);
  resean.bezierCurveTo(117 * jauquan, 9.609375 * jauquan, 117 * jauquan, 9.609375 * jauquan, 161.5 * jauquan, 15.109375 * jauquan);
  resean.bezierCurveTo(134.5 * jauquan, 106.109375 * jauquan, 110.5 * jauquan, 130.109375 * jauquan, 63.5 * jauquan, 145.109375 * jauquan);
  resean.bezierCurveTo(33.5 * jauquan, 120.609375 * jauquan, 33.5 * jauquan, 120.609375 * jauquan, 3.5 * jauquan, 96.109375 * jauquan);
  resean.bezierCurveTo(82.5 * jauquan, 75.109375 * jauquan, 69.5 * jauquan, 29.109375 * jauquan, 71.5 * jauquan, 6.109375 * jauquan);
  resean.closePath();
  fill_path(resean, mayo[1], mayo[2], 10 * jauquan);
  return amontae;
}
function create_lock(natoyia, valaysia, albirta) {
  var jahmai = document.createElement("canvas");
  var arvillia = jahmai.getContext("2d");
  jahmai.width = 47 * natoyia;
  jahmai.height = 60 * natoyia;
  var jahmai = document.createElement("canvas");
  var arvillia = jahmai.getContext("2d");
  jahmai.width = 47 * natoyia;
  jahmai.height = 60 * natoyia;
  circle(arvillia, 23.5 * natoyia, 20.734375 * natoyia, 15.132745950421556 * natoyia);
  fill_path(arvillia, undefined, albirta[2], 4 * natoyia);
  circle(arvillia, 23.5 * natoyia, 20.734375 * natoyia, 18.601075237738275 * natoyia);
  fill_path(arvillia, undefined, albirta[1], 4 * natoyia);
  circle(arvillia, 23.5 * natoyia, 20.734375 * natoyia, 11.40175425099138 * natoyia);
  fill_path(arvillia, undefined, albirta[1], 4 * natoyia);
  arvillia.save();
  arvillia.translate(23 * natoyia, 38.734375 * natoyia);
  arvillia.rotate(0);
  round_rect(arvillia, -21.5 * natoyia, -19 * natoyia, 43 * natoyia, 38 * natoyia, 10 * natoyia);
  arvillia.restore();
  fill_path(arvillia, albirta[2], albirta[1], 4 * natoyia);
  arvillia.save();
  arvillia.translate(23.5 * natoyia, 43.734375 * natoyia);
  arvillia.rotate(.5235987755982988);
  round_regular_polygon(arvillia, 3, 8.06225774829855 * natoyia, 0 * natoyia);
  arvillia.restore();
  fill_path(arvillia, albirta[3]);
  circle(arvillia, 23.5 * natoyia, 35.734375 * natoyia, 7.0710678118654755 * natoyia);
  fill_path(arvillia, albirta[3]);
  return jahmai;
}
function create_tronctotem(ranger, reyelle, ansley) {
  var akir = document.createElement("canvas");
  var aliyas = akir.getContext("2d");
  akir.width = 201 * ranger;
  akir.height = 164 * ranger;
  aliyas.translate(0, 5 * ranger);
  aliyas.globalAlpha = reyelle ? .5 : 1;
  circle(aliyas, 100.5 * ranger, 82 * ranger, 74.92746655359852 * ranger);
  fill_path(aliyas, ansley[0], ansley[0], 4 * ranger);
  circle(aliyas, 100.5 * ranger, 82 * ranger, 65.9417374971317 * ranger);
  fill_path(aliyas, ansley[0], ansley[0], 4 * ranger);
  aliyas.translate(0, -5);
  aliyas.globalAlpha = 1;
  circle(aliyas, 100.5 * ranger, 82 * ranger, 74.92746655359852 * ranger);
  fill_path(aliyas, ansley[1], ansley[3], 4 * ranger);
  circle(aliyas, 100.5 * ranger, 82 * ranger, 65.9417374971317 * ranger);
  fill_path(aliyas, ansley[1], ansley[2], 4 * ranger);
  circle(aliyas, 100.5 * ranger, 82 * ranger, 35.9417374971317 * ranger);
  fill_path(aliyas, ansley[1], ansley[2], 20 * ranger);
  circle(aliyas, 100.5 * ranger, 82 * ranger, 15.9417374971317 * ranger);
  fill_path(aliyas, ansley[1], ansley[2], 6 * ranger);
  return akir;
}
function create_headtotem(quinnlan, cardie, ethie, edengrace) {
  var anyi = document.createElement("canvas");
  var hyder = anyi.getContext("2d");
  anyi.width = 501 * quinnlan;
  anyi.height = 564 * quinnlan;
  hyder.scale(.5, .5);
  hyder.translate(240 * quinnlan, 255 * quinnlan);
  hyder.rotate(edengrace);
  hyder.globalAlpha = cardie ? .5 : .2;
  circle(hyder, 174 * quinnlan, 87.984375 * quinnlan, 20.8806130178211 * quinnlan);
  fill_path(hyder, ethie[0], ethie[0], 8 * quinnlan);
  circle(hyder, 174 * quinnlan, 87.984375 * quinnlan, 12.165525060596439 * quinnlan);
  fill_path(hyder, ethie[0], ethie[0], 8 * quinnlan);
  circle(hyder, 174 * quinnlan, 87.484375 * quinnlan, 6 * quinnlan);
  fill_path(hyder, ethie[0]);
  circle(hyder, 30 * quinnlan, 87.984375 * quinnlan, 20.8806130178211 * quinnlan);
  fill_path(hyder, ethie[0], ethie[0], 4 * quinnlan);
  circle(hyder, 30 * quinnlan, 87.984375 * quinnlan, 12.165525060596439 * quinnlan);
  fill_path(hyder, ethie[0], ethie[0], 4 * quinnlan);
  circle(hyder, 30 * quinnlan, 87.484375 * quinnlan, 6 * quinnlan);
  fill_path(hyder, ethie[0]);
  circle(hyder, 100 * quinnlan, 30 * quinnlan, 20.8806130178211 * quinnlan);
  fill_path(hyder, ethie[0], ethie[0], 4 * quinnlan);
  circle(hyder, 100 * quinnlan, 30 * quinnlan, 12.165525060596439 * quinnlan);
  fill_path(hyder, ethie[0], ethie[0], 4 * quinnlan);
  circle(hyder, 100 * quinnlan, 30 * quinnlan, 6 * quinnlan);
  fill_path(hyder, ethie[0]);
  circle(hyder, 100 * quinnlan, 130 * quinnlan, 20.8806130178211 * quinnlan);
  fill_path(hyder, ethie[0], ethie[0], 4 * quinnlan);
  circle(hyder, 100 * quinnlan, 130 * quinnlan, 12.165525060596439 * quinnlan);
  fill_path(hyder, ethie[0], ethie[0], 4 * quinnlan);
  circle(hyder, 100 * quinnlan, 130 * quinnlan, 6 * quinnlan);
  fill_path(hyder, ethie[0]);
  hyder.save();
  hyder.translate(102 * quinnlan, 81.984375 * quinnlan);
  hyder.rotate(0);
  round_rect(hyder, -74 * quinnlan, -57 * quinnlan, 148 * quinnlan, 114 * quinnlan, 23 * quinnlan);
  hyder.restore();
  fill_path(hyder, ethie[0], ethie[0], 4 * quinnlan);
  hyder.save();
  hyder.translate(101 * quinnlan, 64.984375 * quinnlan);
  hyder.rotate(0);
  round_rect(hyder, -33 * quinnlan, -10 * quinnlan, 66 * quinnlan, 20 * quinnlan, 15 * quinnlan);
  hyder.restore();
  fill_path(hyder, ethie[0], ethie[0], 4 * quinnlan);
  hyder.save();
  hyder.translate(102 * quinnlan, 63.484375 * quinnlan);
  hyder.rotate(0);
  round_rect(hyder, -9 * quinnlan, -27.5 * quinnlan, 18 * quinnlan, 55 * quinnlan, 15 * quinnlan);
  hyder.restore();
  hyder.translate(5, -5);
  hyder.globalAlpha = 1;
  circle(hyder, 174 * quinnlan, 87.984375 * quinnlan, 20.8806130178211 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 174 * quinnlan, 87.984375 * quinnlan, 12.165525060596439 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 174 * quinnlan, 87.484375 * quinnlan, 6 * quinnlan);
  fill_path(hyder, ethie[2]);
  circle(hyder, 30 * quinnlan, 87.984375 * quinnlan, 20.8806130178211 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 30 * quinnlan, 87.984375 * quinnlan, 12.165525060596439 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 30 * quinnlan, 87.484375 * quinnlan, 6 * quinnlan);
  fill_path(hyder, ethie[2]);
  circle(hyder, 102 * quinnlan, 30 * quinnlan, 20.8806130178211 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 102 * quinnlan, 30 * quinnlan, 12.165525060596439 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 102 * quinnlan, 30 * quinnlan, 6 * quinnlan);
  fill_path(hyder, ethie[1]);
  circle(hyder, 102 * quinnlan, 130 * quinnlan, 20.8806130178211 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 102 * quinnlan, 130 * quinnlan, 12.165525060596439 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 102 * quinnlan, 130 * quinnlan, 6 * quinnlan);
  fill_path(hyder, ethie[1]);
  hyder.save();
  hyder.translate(102 * quinnlan, 81.984375 * quinnlan);
  round_rect(hyder, -74 * quinnlan, -57 * quinnlan, 148 * quinnlan, 114 * quinnlan, 23 * quinnlan);
  hyder.restore();
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  hyder.save();
  hyder.translate(101 * quinnlan, 64.984375 * quinnlan);
  round_rect(hyder, -33 * quinnlan, -10 * quinnlan, 66 * quinnlan, 20 * quinnlan, 15 * quinnlan);
  hyder.restore();
  fill_path(hyder, ethie[2], ethie[1], 8 * quinnlan);
  hyder.save();
  hyder.translate(102 * quinnlan, 63.484375 * quinnlan);
  round_rect(hyder, -9 * quinnlan, -27.5 * quinnlan, 18 * quinnlan, 55 * quinnlan, 15 * quinnlan);
  hyder.restore();
  fill_path(hyder, ethie[2], ethie[1], 8 * quinnlan);
  circle(hyder, 135 * quinnlan, 107.36605834960938 * quinnlan, 21.095023109728988 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 135 * quinnlan, 107.36605834960938 * quinnlan, 13 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 135 * quinnlan, 107.36605834960938 * quinnlan, 6.082762530298219 * quinnlan);
  fill_path(hyder, ethie[2]);
  circle(hyder, 70 * quinnlan, 107.36605834960938 * quinnlan, 21.095023109728988 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 70 * quinnlan, 107.36605834960938 * quinnlan, 13 * quinnlan);
  fill_path(hyder, ethie[1], ethie[3], 8 * quinnlan);
  circle(hyder, 70 * quinnlan, 107.36605834960938 * quinnlan, 6.082762530298219 * quinnlan);
  fill_path(hyder, ethie[2]);
  return anyi;
}
function create_icon_team(khadesia, sutter, kaylanne) {
  var dyvonne = document.createElement("canvas");
  var kaycen = dyvonne.getContext("2d");
  dyvonne.width = 95 * khadesia;
  dyvonne.height = 85 * khadesia;
  if (kaylanne == 0) {
    kaycen.translate(7 * khadesia, 15 * khadesia);
    kaycen.scale(.9, .9);
    kaycen.save();
    round_rect(kaycen, 0 * khadesia, 5 * khadesia, 90 * khadesia, 60 * khadesia, 10);
    fill_path(kaycen, sutter[0]);
    kaycen.globalCompositeOperation = "destination-out";
    circle(kaycen, 25 * khadesia, 40 * khadesia, 10 * khadesia);
    kaycen.fill();
    circle(kaycen, 65 * khadesia, 40 * khadesia, 10 * khadesia);
    kaycen.fill();
    kaycen.restore();
    kaycen.save();
    round_rect(kaycen, 0, 0, 90 * khadesia, 60 * khadesia, 10 * khadesia);
    fill_path(kaycen, sutter[1]);
    kaycen.globalCompositeOperation = "destination-out";
    circle(kaycen, 25 * khadesia, 40 * khadesia, 10 * khadesia);
    kaycen.fill();
    circle(kaycen, 65 * khadesia, 40 * khadesia, 10 * khadesia);
    kaycen.fill();
    kaycen.restore();
  } else {
    if (kaylanne == 1) {
      kaycen.scale(.8, .8);
      kaycen.translate(15 * khadesia, 33 * khadesia);
      kaycen.save();
      kaycen.scale(.56, .56);
      kaycen.translate(-39 * khadesia, -60 * khadesia);
      kaycen.beginPath();
      kaycen.lineCap = "round";
      kaycen.lineJoin = "round";
      kaycen.moveTo(32.5 * khadesia, 50.642852783203125 * khadesia);
      kaycen.bezierCurveTo(83 * khadesia, 69.64285278320312 * khadesia, 83 * khadesia, 69.64285278320312 * khadesia, 133.5 * khadesia, 88.64285278320312 * khadesia);
      kaycen.bezierCurveTo(93 * khadesia, 92.64285278320312 * khadesia, 93 * khadesia, 92.64285278320312 * khadesia, 52.5 * khadesia, 96.64285278320312 * khadesia);
      kaycen.bezierCurveTo(30.5 * khadesia, 100.64285278320312 * khadesia, 36.5 * khadesia, 94.64285278320312 * khadesia, 32.5 * khadesia, 84.64285278320312 * khadesia);
      kaycen.bezierCurveTo(21.5 * khadesia, 45.642852783203125 * khadesia, 24.5 * khadesia, 48.642852783203125 * khadesia, 31.5 * khadesia, 50.642852783203125 * khadesia);
      kaycen.closePath();
      fill_path(kaycen, sutter[1]);
      kaycen.beginPath();
      kaycen.lineCap = "round";
      kaycen.lineJoin = "round";
      kaycen.moveTo(116.5 * khadesia, 85.64285278320312 * khadesia);
      kaycen.bezierCurveTo(160.5 * khadesia, 67.14285278320312 * khadesia, 160.5 * khadesia, 67.14285278320312 * khadesia, 204.5 * khadesia, 48.642852783203125 * khadesia);
      kaycen.bezierCurveTo(220.5 * khadesia, 42.642852783203125 * khadesia, 208.5 * khadesia, 68.64285278320312 * khadesia, 205.5 * khadesia, 85.64285278320312 * khadesia);
      kaycen.bezierCurveTo(202.5 * khadesia, 98.64285278320312 * khadesia, 199.5 * khadesia, 98.64285278320312 * khadesia, 188.5 * khadesia, 100.64285278320312 * khadesia);
      kaycen.closePath();
      fill_path(kaycen, sutter[1]);
      kaycen.beginPath();
      kaycen.lineCap = "round";
      kaycen.lineJoin = "round";
      kaycen.moveTo(166.5 * khadesia, 68.64285278320312 * khadesia);
      kaycen.bezierCurveTo(147.5 * khadesia, 72.64285278320312 * khadesia, 145.5 * khadesia, 73.64285278320312 * khadesia, 142.5 * khadesia, 62.642852783203125 * khadesia);
      kaycen.bezierCurveTo(121.5 * khadesia, 12.642852783203125 * khadesia, 122.5 * khadesia, 5.642852783203125 * khadesia, 117.5 * khadesia, 15.642852783203125 * khadesia);
      kaycen.bezierCurveTo(105.5 * khadesia, 40.642852783203125 * khadesia, 105.5 * khadesia, 40.642852783203125 * khadesia, 93.5 * khadesia, 65.64285278320312 * khadesia);
      kaycen.bezierCurveTo(89.5 * khadesia, 74.64285278320312 * khadesia, 84.5 * khadesia, 72.64285278320312 * khadesia, 73.5 * khadesia, 74.64285278320312 * khadesia);
      kaycen.bezierCurveTo(98 * khadesia, 87.64285278320312 * khadesia, 98 * khadesia, 87.64285278320312 * khadesia, 122.5 * khadesia, 100.64285278320312 * khadesia);
      kaycen.closePath();
      fill_path(kaycen, sutter[1]);
      kaycen.restore();
      kaycen.save();
      round_rect(kaycen, 0, 15 * khadesia, 90 * khadesia, 50 * khadesia, 10 * khadesia);
      fill_path(kaycen, sutter[0]);
      round_rect(kaycen, 0, 10 * khadesia, 90 * khadesia, 50 * khadesia, 10 * khadesia);
      fill_path(kaycen, sutter[1]);
      kaycen.globalCompositeOperation = "destination-out";
      circle(kaycen, 25 * khadesia, 40 * khadesia, 10 * khadesia);
      kaycen.fill();
      circle(kaycen, 65 * khadesia, 40 * khadesia, 10 * khadesia);
      kaycen.fill();
      kaycen.restore();
    }
  }
  return dyvonne;
}
function create_team_button(owenn, armor, armistice) {
  var nayli = document.createElement("canvas");
  var najada = nayli.getContext("2d");
  nayli.width = 120 * owenn;
  nayli.height = 100 * owenn;
  round_rect(najada, 10 * owenn, 10 * owenn, 95 * owenn, 80 * owenn, 10 * owenn);
  fill_path(najada, armor[2]);
  round_rect(najada, 10 * owenn, 5 * owenn, 95 * owenn, 80 * owenn, 10 * owenn);
  fill_path(najada, armor[3], armor[4], 4 * owenn);
  if (armistice == 0) {
    var latroyia = create_icon_team(.75 * owenn, armor, 0);
    najada.drawImage(latroyia, 22 * owenn, 18 * owenn);
  } else {
    if (armistice == 1) {
      var latroyia = create_icon_team(.75 * owenn, armor, 1);
      najada.drawImage(latroyia, 22 * owenn, 18 * owenn);
    }
  }
  return nayli;
}
function create_totem(hassana, artavious, zita) {
  var adleigh = document.createElement("canvas");
  var brenleigh = adleigh.getContext("2d");
  adleigh.width = 185 * hassana;
  adleigh.height = 164 * hassana;
  brenleigh.translate(0, 0);
  var berlynn = create_tronctotem(hassana, artavious, zita);
  brenleigh.drawImage(berlynn, -10 * hassana, 0 * hassana);
  var berlynn = create_headtotem(hassana, artavious, zita, 0);
  brenleigh.drawImage(berlynn, -83 * hassana, -40 * hassana);
  var berlynn = create_headtotem(hassana, artavious, zita, Math.PI / 1.4);
  brenleigh.drawImage(berlynn, -15 * hassana, -88 * hassana);
  var berlynn = create_headtotem(hassana, artavious, zita, Math.PI / -1.4);
  brenleigh.drawImage(berlynn, 15 * hassana, -8 * hassana);
  return adleigh;
}
function create_lockpick(shamim, evoni, shamso) {
  var mannon = document.createElement("canvas");
  var shanmukh = mannon.getContext("2d");
  mannon.width = 450 * shamim;
  mannon.height = 790 * shamim;
  shanmukh.translate(5 * shamim, 5 * shamim);
  shanmukh.globalAlpha = evoni ? 0 : 0;
  circle(shanmukh, 178.5 * shamim, 172.828125 * shamim, 150 * shamim);
  fill_path(shanmukh, undefined, shamso[0], 65 * shamim);
  circle(shanmukh, 178.5 * shamim, 172.828125 * shamim, 150 * shamim);
  fill_path(shanmukh, undefined, shamso[0], 55 * shamim);
  shanmukh.closePath();
  shanmukh.save();
  shanmukh.translate(177 * shamim, 512.328125 * shamim);
  round_rect(shanmukh, -25 * shamim, -202.5 * shamim, 65 * shamim, 405 * shamim, 25 * shamim);
  shanmukh.restore();
  fill_path(shanmukh, shamso[0]);
  shanmukh.save();
  shanmukh.translate(136 * shamim, 581.828125 * shamim);
  round_rect(shanmukh, -39 * shamim, -23 * shamim, 78 * shamim, 46 * shamim, 25 * shamim);
  shanmukh.restore();
  fill_path(shanmukh, shamso[0]);
  shanmukh.save();
  shanmukh.translate(135.5 * shamim, 663.828125 * shamim);
  round_rect(shanmukh, -39.5 * shamim, -22 * shamim, 79 * shamim, 44 * shamim, 25 * shamim);
  shanmukh.restore();
  fill_path(shanmukh, shamso[0]);
  shanmukh.beginPath();
  shanmukh.lineCap = "round";
  shanmukh.lineJoin = "round";
  shanmukh.moveTo(114 * shamim, 594.828125 * shamim);
  shanmukh.bezierCurveTo(175 * shamim, 596.828125 * shamim, 163 * shamim, 596.828125 * shamim, 172 * shamim, 594.828125 * shamim);
  shanmukh.bezierCurveTo(171.5 * shamim, 633.828125 * shamim, 171.5 * shamim, 633.828125 * shamim, 171 * shamim, 672.828125 * shamim);
  shanmukh.bezierCurveTo(110 * shamim, 673.828125 * shamim, 140.5 * shamim, 673.328125 * shamim, 110 * shamim, 673.828125 * shamim);
  shanmukh.bezierCurveTo(110.5 * shamim, 661.828125 * shamim, 110.5 * shamim, 661.828125 * shamim, 111 * shamim, 649.828125 * shamim);
  shanmukh.bezierCurveTo(157 * shamim, 633.828125 * shamim, 134 * shamim, 607.828125 * shamim, 114 * shamim, 594.828125 * shamim);
  shanmukh.closePath();
  fill_path(shanmukh, shamso[0]);
  shanmukh.beginPath();
  shanmukh.lineCap = "round";
  shanmukh.lineJoin = "round";
  shanmukh.translate(0, 5 * shamim);
  shanmukh.moveTo(140 * shamim, 294.828125 * shamim);
  shanmukh.bezierCurveTo(212 * shamim, 295.828125 * shamim, 176.5 * shamim, 295.328125 * shamim, 213 * shamim, 295.828125 * shamim);
  shanmukh.bezierCurveTo(201.5 * shamim, 325.328125 * shamim, 201.5 * shamim, 325.328125 * shamim, 190 * shamim, 354.828125 * shamim);
  shanmukh.bezierCurveTo(175.5 * shamim, 355.828125 * shamim, 175.5 * shamim, 355.828125 * shamim, 161 * shamim, 356.828125 * shamim);
  shanmukh.bezierCurveTo(154.5 * shamim, 328.828125 * shamim, 154.5 * shamim, 328.828125 * shamim, 148 * shamim, 300.828125 * shamim);
  shanmukh.closePath();
  fill_path(shanmukh, shamso[0]);
  shanmukh.translate(3, -5 * shamim);
  shanmukh.beginPath();
  shanmukh.lineCap = "round";
  shanmukh.lineJoin = "round";
  shanmukh.moveTo(159 * shamim, 679.828125 * shamim);
  shanmukh.bezierCurveTo(180 * shamim, 665.828125 * shamim, 155 * shamim, 675.828125 * shamim, 151 * shamim, 671.828125 * shamim);
  shanmukh.bezierCurveTo(154.5 * shamim, 685.328125 * shamim, 154.5 * shamim, 685.328125 * shamim, 158 * shamim, 698.828125 * shamim);
  shanmukh.bezierCurveTo(171 * shamim, 699.828125 * shamim, 171 * shamim, 699.828125 * shamim, 184 * shamim, 700.828125 * shamim);
  shanmukh.closePath();
  fill_path(shanmukh, shamso[0]);
  shanmukh.save();
  shanmukh.beginPath();
  shanmukh.lineCap = "round";
  shanmukh.lineJoin = "round";
  shanmukh.moveTo(157 * shamim, 548.828125 * shamim);
  shanmukh.bezierCurveTo(157 * shamim, 561.828125 * shamim, 157 * shamim, 561.828125 * shamim, 157 * shamim, 574.828125 * shamim);
  shanmukh.bezierCurveTo(132.5 * shamim, 580.828125 * shamim, 132.5 * shamim, 580.828125 * shamim, 108 * shamim, 586.828125 * shamim);
  shanmukh.bezierCurveTo(112 * shamim, 599.828125 * shamim, 111 * shamim, 593.828125 * shamim, 112 * shamim, 599.828125 * shamim);
  shanmukh.bezierCurveTo(159 * shamim, 603.828125 * shamim, 126.5 * shamim, 601.328125 * shamim, 141 * shamim, 602.828125 * shamim);
  shanmukh.bezierCurveTo(145 * shamim, 641.828125 * shamim, 143.5 * shamim, 623.828125 * shamim, 146 * shamim, 644.828125 * shamim);
  shanmukh.bezierCurveTo(129.5 * shamim, 645.328125 * shamim, 129.5 * shamim, 645.328125 * shamim, 113 * shamim, 645.828125 * shamim);
  shanmukh.bezierCurveTo(107.5 * shamim, 652.828125 * shamim, 107.5 * shamim, 652.828125 * shamim, 102 * shamim, 659.828125 * shamim);
  shanmukh.bezierCurveTo(104 * shamim, 669.328125 * shamim, 104 * shamim, 669.328125 * shamim, 106 * shamim, 678.828125 * shamim);
  shanmukh.bezierCurveTo(145 * shamim, 679.328125 * shamim, 145 * shamim, 679.328125 * shamim, 184 * shamim, 679.828125 * shamim);
  shanmukh.bezierCurveTo(185 * shamim, 615.828125 * shamim, 185 * shamim, 615.828125 * shamim, 186 * shamim, 551.828125 * shamim);
  shanmukh.bezierCurveTo(172.5 * shamim, 551.328125 * shamim, 172.5 * shamim, 551.328125 * shamim, 159 * shamim, 550.828125 * shamim);
  shanmukh.closePath();
  fill_path(shanmukh, shamso[0], shamso[0], 7 * shamim);
  shanmukh.restore();
  shanmukh.globalAlpha = 1;
  shanmukh.translate(15 * shamim, 35 * shamim);
  circle(shanmukh, 178.5 * shamim, 172.828125 * shamim, 150 * shamim);
  fill_path(shanmukh, undefined, shamso[2], 95 * shamim);
  circle(shanmukh, 178.5 * shamim, 172.828125 * shamim, 150 * shamim);
  fill_path(shanmukh, undefined, shamso[1], 55 * shamim);
  shanmukh.closePath();
  shanmukh.save();
  shanmukh.translate(177 * shamim, 512.328125 * shamim);
  round_rect(shanmukh, -25 * shamim, -202.5 * shamim, 65 * shamim, 405 * shamim, 25 * shamim);
  shanmukh.restore();
  fill_path(shanmukh, shamso[1], shamso[2], 20 * shamim);
  shanmukh.save();
  shanmukh.translate(136 * shamim, 581.828125 * shamim);
  round_rect(shanmukh, -39 * shamim, -23 * shamim, 78 * shamim, 46 * shamim, 25 * shamim);
  shanmukh.restore();
  fill_path(shanmukh, shamso[1], shamso[2], 20 * shamim);
  shanmukh.save();
  shanmukh.translate(135.5 * shamim, 663.828125 * shamim);
  round_rect(shanmukh, -39.5 * shamim, -22 * shamim, 79 * shamim, 44 * shamim, 25 * shamim);
  shanmukh.restore();
  fill_path(shanmukh, shamso[1], shamso[2], 20 * shamim);
  shanmukh.beginPath();
  shanmukh.lineCap = "round";
  shanmukh.lineJoin = "round";
  shanmukh.moveTo(114 * shamim, 594.828125 * shamim);
  shanmukh.bezierCurveTo(175 * shamim, 596.828125 * shamim, 163 * shamim, 596.828125 * shamim, 172 * shamim, 594.828125 * shamim);
  shanmukh.bezierCurveTo(171.5 * shamim, 633.828125 * shamim, 171.5 * shamim, 633.828125 * shamim, 171 * shamim, 672.828125 * shamim);
  shanmukh.bezierCurveTo(110 * shamim, 673.828125 * shamim, 140.5 * shamim, 673.328125 * shamim, 110 * shamim, 673.828125 * shamim);
  shanmukh.bezierCurveTo(110.5 * shamim, 661.828125 * shamim, 110.5 * shamim, 661.828125 * shamim, 111 * shamim, 649.828125 * shamim);
  shanmukh.bezierCurveTo(157 * shamim, 633.828125 * shamim, 134 * shamim, 607.828125 * shamim, 114 * shamim, 594.828125 * shamim);
  shanmukh.closePath();
  fill_path(shanmukh, shamso[1]);
  shanmukh.beginPath();
  shanmukh.lineCap = "round";
  shanmukh.lineJoin = "round";
  shanmukh.translate(0, 5 * shamim);
  shanmukh.moveTo(123 * shamim, 294.828125 * shamim);
  shanmukh.bezierCurveTo(212 * shamim, 295.828125 * shamim, 190.5 * shamim, 295.328125 * shamim, 250 * shamim, 295.828125 * shamim);
  shanmukh.bezierCurveTo(231.5 * shamim, 325.328125 * shamim, 231.5 * shamim, 325.328125 * shamim, 220 * shamim, 354.828125 * shamim);
  shanmukh.bezierCurveTo(175.5 * shamim, 355.828125 * shamim, 175.5 * shamim, 355.828125 * shamim, 140 * shamim, 356.828125 * shamim);
  shanmukh.bezierCurveTo(123.5 * shamim, 328.828125 * shamim, 123.5 * shamim, 328.828125 * shamim, 123 * shamim, 294.828125 * shamim);
  shanmukh.closePath();
  fill_path(shanmukh, shamso[1]);
  shanmukh.translate(0, -5 * shamim);
  shanmukh.beginPath();
  shanmukh.lineCap = "round";
  shanmukh.lineJoin = "round";
  shanmukh.moveTo(159 * shamim, 679.828125 * shamim);
  shanmukh.bezierCurveTo(180 * shamim, 665.828125 * shamim, 155 * shamim, 675.828125 * shamim, 151 * shamim, 671.828125 * shamim);
  shanmukh.bezierCurveTo(154.5 * shamim, 685.328125 * shamim, 154.5 * shamim, 685.328125 * shamim, 158 * shamim, 698.828125 * shamim);
  shanmukh.bezierCurveTo(171 * shamim, 699.828125 * shamim, 171 * shamim, 699.828125 * shamim, 184 * shamim, 700.828125 * shamim);
  shanmukh.closePath();
  fill_path(shanmukh, shamso[1]);
  shanmukh.save();
  shanmukh.beginPath();
  shanmukh.lineCap = "round";
  shanmukh.lineJoin = "round";
  shanmukh.moveTo(157 * shamim, 548.828125 * shamim);
  shanmukh.bezierCurveTo(157 * shamim, 561.828125 * shamim, 157 * shamim, 561.828125 * shamim, 157 * shamim, 574.828125 * shamim);
  shanmukh.bezierCurveTo(132.5 * shamim, 580.828125 * shamim, 132.5 * shamim, 580.828125 * shamim, 108 * shamim, 586.828125 * shamim);
  shanmukh.bezierCurveTo(112 * shamim, 599.828125 * shamim, 111 * shamim, 593.828125 * shamim, 112 * shamim, 599.828125 * shamim);
  shanmukh.bezierCurveTo(159 * shamim, 603.828125 * shamim, 126.5 * shamim, 601.328125 * shamim, 141 * shamim, 602.828125 * shamim);
  shanmukh.bezierCurveTo(145 * shamim, 641.828125 * shamim, 143.5 * shamim, 623.828125 * shamim, 146 * shamim, 644.828125 * shamim);
  shanmukh.bezierCurveTo(129.5 * shamim, 645.328125 * shamim, 129.5 * shamim, 645.328125 * shamim, 113 * shamim, 645.828125 * shamim);
  shanmukh.bezierCurveTo(107.5 * shamim, 652.828125 * shamim, 107.5 * shamim, 652.828125 * shamim, 102 * shamim, 659.828125 * shamim);
  shanmukh.bezierCurveTo(104 * shamim, 669.328125 * shamim, 104 * shamim, 669.328125 * shamim, 106 * shamim, 678.828125 * shamim);
  shanmukh.bezierCurveTo(145 * shamim, 679.328125 * shamim, 145 * shamim, 679.328125 * shamim, 184 * shamim, 679.828125 * shamim);
  shanmukh.bezierCurveTo(185 * shamim, 615.828125 * shamim, 185 * shamim, 615.828125 * shamim, 186 * shamim, 551.828125 * shamim);
  shanmukh.bezierCurveTo(172.5 * shamim, 551.328125 * shamim, 172.5 * shamim, 551.328125 * shamim, 159 * shamim, 550.828125 * shamim);
  shanmukh.closePath();
  fill_path(shanmukh, shamso[1], shamso[1], 7 * shamim);
  shanmukh.restore();
  return mannon;
}
function create_resurrection_ground(alexx, liana, jiana) {
  var kalkidan = document.createElement("canvas");
  var narumi = kalkidan.getContext("2d");
  kalkidan.width = 202 * alexx;
  kalkidan.height = 202 * alexx;
  narumi.translate(2 * alexx, 1 * alexx);
  narumi.globalAlpha = .3;
  circle(narumi, 98 * alexx, 99 * alexx, 100 * alexx);
  fill_path(narumi, jiana[0]);
  narumi.globalAlpha = .5;
  circle(narumi, 98 * alexx, 99 * alexx, 90 * alexx);
  fill_path(narumi, jiana[1]);
  return kalkidan;
}
function create_resurrection_hole(ashana, krystah, analiha) {
  var lynder = document.createElement("canvas");
  var deneta = lynder.getContext("2d");
  lynder.width = 89 * ashana;
  lynder.height = 89 * ashana;
  deneta.save();
  deneta.translate(44.5 * ashana, 44.5 * ashana);
  round_regular_polygon(deneta, 6, 40 * ashana, 10 * ashana);
  deneta.restore();
  fill_path(deneta, analiha[0], analiha[1], 5 * ashana);
  deneta.save();
  deneta.translate(44.5 * ashana, 44.5 * ashana);
  round_regular_polygon(deneta, 6, 25.11521001172521 * ashana, 10 * ashana);
  deneta.restore();
  fill_path(deneta, analiha[2], analiha[3], 5 * ashana);
  return lynder;
}
function create_resurrection_rotate(perfecto, ramo, johnjames) {
  var honor = document.createElement("canvas");
  var brigit = honor.getContext("2d");
  honor.width = 88 * perfecto;
  honor.height = 88 * perfecto;
  brigit.save();
  brigit.translate(44 * perfecto, 44 * perfecto);
  brigit.rotate(.52);
  round_regular_polygon(brigit, 6, 43 * perfecto, 10 * perfecto);
  brigit.restore();
  fill_path(brigit, johnjames[0], johnjames[1], 3 * perfecto);
  return honor;
}
function create_resurrection(malaja, kerek, deneco) {
  var janieya = document.createElement("canvas");
  var aldena = janieya.getContext("2d");
  janieya.width = 202 * malaja;
  janieya.height = 202 * malaja;
  aldena.translate(2 * malaja, 1 * malaja);
  aldena.globalAlpha = kerek ? .5 : 1;
  aldena.translate(0, 10 * malaja);
  aldena.save();
  aldena.translate(98 * malaja, 41.15177917480469 * malaja);
  aldena.rotate(.8);
  round_rect(aldena, -16 * malaja, -16.5 * malaja, 32 * malaja, 33 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[2]);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(98 * malaja, 22.5089111328125 * malaja);
  aldena.bezierCurveTo(97.5 * malaja, 41.5089111328125 * malaja, 97.5 * malaja, 41.5089111328125 * malaja, 97 * malaja, 60.5089111328125 * malaja);
  fill_path(aldena, deneco[2]);
  aldena.save();
  aldena.translate(147.5 * malaja, 69.5089111328125 * malaja);
  aldena.rotate(.2);
  round_rect(aldena, -15.5 * malaja, -16 * malaja, 31 * malaja, 32 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[2]);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(163 * malaja, 59.50892639160156 * malaja);
  aldena.bezierCurveTo(147 * malaja, 69.50892639160156 * malaja, 127 * malaja, 82.50892639160156 * malaja, 131 * malaja, 79.50892639160156 * malaja);
  fill_path(aldena, deneco[2]);
  aldena.save();
  aldena.translate(143.5 * malaja, 128.2946319580078 * malaja);
  aldena.rotate(1.24);
  round_rect(aldena, -16.5 * malaja, -17.5 * malaja, 33 * malaja, 35 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[2]);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(162 * malaja, 135.93748474121094 * malaja);
  aldena.bezierCurveTo(143.5 * malaja, 128.43748474121094 * malaja, 129 * malaja, 120.93748474121094 * malaja, 125 * malaja, 120.93748474121094 * malaja);
  fill_path(aldena, deneco[2]);
  aldena.save();
  aldena.translate(99 * malaja, 156.08035278320312 * malaja);
  aldena.rotate(.84);
  round_rect(aldena, -18 * malaja, -18 * malaja, 36 * malaja, 36 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[2]);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(98 * malaja, 136.08035278320312 * malaja);
  aldena.bezierCurveTo(98 * malaja, 156.08035278320312 * malaja, 98 * malaja, 156.08035278320312 * malaja, 98 * malaja, 176.08035278320312 * malaja);
  fill_path(aldena, deneco[2]);
  aldena.save();
  aldena.translate(54 * malaja, 72.22320556640625 * malaja);
  aldena.rotate(1.32);
  round_rect(aldena, -18 * malaja, -19 * malaja, 36 * malaja, 38 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[2]);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(34 * malaja, 60.79463195800781 * malaja);
  aldena.bezierCurveTo(53.5 * malaja, 72.29463195800781 * malaja, 69 * malaja, 79.79463195800781 * malaja, 73 * malaja, 83.79463195800781 * malaja);
  fill_path(aldena, deneco[2]);
  aldena.save();
  aldena.translate(49 * malaja, 127.29463195800781 * malaja);
  aldena.rotate(1.76);
  round_rect(aldena, -20 * malaja, -17.5 * malaja, 40 * malaja, 35 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[2]);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(30 * malaja, 141.7946319580078 * malaja);
  aldena.bezierCurveTo(47 * malaja, 130.2946319580078 * malaja, 64 * malaja, 119.79463195800781 * malaja, 64 * malaja, 118.79463195800781 * malaja);
  fill_path(aldena, deneco[2]);
  aldena.globalAlpha = 1;
  aldena.translate(0, -10 * malaja);
  aldena.save();
  aldena.translate(98 * malaja, 41.15177917480469 * malaja);
  aldena.rotate(.8);
  round_rect(aldena, -16 * malaja, -16.5 * malaja, 32 * malaja, 33 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[3], deneco[4], 5 * malaja);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(98 * malaja, 22.5089111328125 * malaja);
  aldena.bezierCurveTo(97.5 * malaja, 41.5089111328125 * malaja, 97.5 * malaja, 41.5089111328125 * malaja, 97 * malaja, 60.5089111328125 * malaja);
  fill_path(aldena, undefined, deneco[4], 5 * malaja);
  aldena.save();
  aldena.translate(147.5 * malaja, 69.5089111328125 * malaja);
  aldena.rotate(.2);
  round_rect(aldena, -15.5 * malaja, -16 * malaja, 31 * malaja, 32 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[3], deneco[4], 5 * malaja);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(163 * malaja, 59.50892639160156 * malaja);
  aldena.bezierCurveTo(147 * malaja, 69.50892639160156 * malaja, 127 * malaja, 82.50892639160156 * malaja, 131 * malaja, 79.50892639160156 * malaja);
  fill_path(aldena, undefined, deneco[4], 5 * malaja);
  aldena.save();
  aldena.translate(143.5 * malaja, 128.2946319580078 * malaja);
  aldena.rotate(1.24);
  round_rect(aldena, -16.5 * malaja, -17.5 * malaja, 33 * malaja, 35 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[3], deneco[4], 5 * malaja);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(162 * malaja, 135.93748474121094 * malaja);
  aldena.bezierCurveTo(143.5 * malaja, 128.43748474121094 * malaja, 129 * malaja, 120.93748474121094 * malaja, 125 * malaja, 120.93748474121094 * malaja);
  fill_path(aldena, undefined, deneco[4], 5 * malaja);
  aldena.save();
  aldena.translate(99 * malaja, 156.08035278320312 * malaja);
  aldena.rotate(.84);
  round_rect(aldena, -18 * malaja, -18 * malaja, 36 * malaja, 36 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[3], deneco[4], 5 * malaja);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(98 * malaja, 136.08035278320312 * malaja);
  aldena.bezierCurveTo(98 * malaja, 156.08035278320312 * malaja, 98 * malaja, 156.08035278320312 * malaja, 98 * malaja, 176.08035278320312 * malaja);
  fill_path(aldena, undefined, deneco[4], 5 * malaja);
  aldena.save();
  aldena.translate(54 * malaja, 72.22320556640625 * malaja);
  aldena.rotate(1.32);
  round_rect(aldena, -18 * malaja, -19 * malaja, 36 * malaja, 38 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[3], deneco[4], 5 * malaja);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(34 * malaja, 60.79463195800781 * malaja);
  aldena.bezierCurveTo(53.5 * malaja, 72.29463195800781 * malaja, 69 * malaja, 79.79463195800781 * malaja, 73 * malaja, 83.79463195800781 * malaja);
  fill_path(aldena, undefined, deneco[4], 5 * malaja);
  aldena.save();
  aldena.translate(49 * malaja, 127.29463195800781 * malaja);
  aldena.rotate(1.76);
  round_rect(aldena, -20 * malaja, -17.5 * malaja, 40 * malaja, 35 * malaja, 7 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[3], deneco[4], 5 * malaja);
  aldena.beginPath();
  aldena.lineCap = "round";
  aldena.lineJoin = "round";
  aldena.moveTo(30 * malaja, 141.7946319580078 * malaja);
  aldena.bezierCurveTo(47 * malaja, 130.2946319580078 * malaja, 64 * malaja, 119.79463195800781 * malaja, 64 * malaja, 118.79463195800781 * malaja);
  fill_path(aldena, undefined, deneco[4], 5 * malaja);
  aldena.globalAlpha = kerek ? .5 : 1;
  aldena.translate(0, 10 * malaja);
  aldena.save();
  aldena.translate(98 * malaja, 99 * malaja);
  round_regular_polygon(aldena, 6, 70.28669492273468 * malaja, 10 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[2]);
  aldena.save();
  aldena.translate(98 * malaja, 99 * malaja);
  round_regular_polygon(aldena, 6, 56.455940020351264 * malaja, 10 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[2]);
  aldena.globalAlpha = 1;
  aldena.translate(0, -10 * malaja);
  aldena.save();
  aldena.translate(98 * malaja, 99 * malaja);
  round_regular_polygon(aldena, 6, 70.28669492273468 * malaja, 10 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[5], deneco[6], 5 * malaja);
  aldena.save();
  aldena.translate(98 * malaja, 99 * malaja);
  round_regular_polygon(aldena, 6, 56.455940020351264 * malaja, 10 * malaja);
  aldena.restore();
  fill_path(aldena, deneco[7], deneco[8], 7 * malaja);
  return janieya;
}
function create_dragon_heart(legacie, antawn, jatzibe) {
  var markees = document.createElement("canvas");
  var kestra = markees.getContext("2d");
  markees.width = 161 * legacie;
  markees.height = 184 * legacie;
  kestra.translate(0, 10 * legacie);
  kestra.globalAlpha = 1;
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(105.5 * legacie, 34.609375 * legacie);
  kestra.bezierCurveTo(48.5 * legacie, 7.609375 * legacie, 11.5 * legacie, 58.609375 * legacie, 20.5 * legacie, 97.609375 * legacie);
  kestra.bezierCurveTo(44.5 * legacie, 161.609375 * legacie, 70.5 * legacie, 171.609375 * legacie, 88.5 * legacie, 156.609375 * legacie);
  kestra.bezierCurveTo(120.5 * legacie, 129.609375 * legacie, 123.5 * legacie, 105.609375 * legacie, 128.5 * legacie, 83.609375 * legacie);
  kestra.bezierCurveTo(137.5 * legacie, 79.609375 * legacie, 141.5 * legacie, 79.609375 * legacie, 146.5 * legacie, 81.609375 * legacie);
  kestra.bezierCurveTo(153.5 * legacie, 70.609375 * legacie, 151.5 * legacie, 65.609375 * legacie, 148.5 * legacie, 61.609375 * legacie);
  kestra.bezierCurveTo(134.5 * legacie, 60.609375 * legacie, 131.5 * legacie, 63.609375 * legacie, 127.5 * legacie, 66.609375 * legacie);
  kestra.bezierCurveTo(127.5 * legacie, 55.609375 * legacie, 125.5 * legacie, 54.609375 * legacie, 120.5 * legacie, 51.609375 * legacie);
  kestra.bezierCurveTo(128.5 * legacie, 42.609375 * legacie, 136.5 * legacie, 38.609375 * legacie, 147.5 * legacie, 39.609375 * legacie);
  kestra.bezierCurveTo(152.5 * legacie, 23.609375 * legacie, 147.5 * legacie, 21.609375 * legacie, 140.5 * legacie, 17.609375 * legacie);
  kestra.bezierCurveTo(120.5 * legacie, 17.609375 * legacie, 114.5 * legacie, 27.609375 * legacie, 106.5 * legacie, 35.609375 * legacie);
  kestra.closePath();
  fill_path(kestra, jatzibe[0]);
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(45.5 * legacie, 144.609375 * legacie);
  kestra.bezierCurveTo(35.5 * legacie, 155.609375 * legacie, 37 * legacie, 152.109375 * legacie, 28.5 * legacie, 159.609375 * legacie);
  kestra.bezierCurveTo(16.5 * legacie, 154.609375 * legacie, 16.5 * legacie, 151.609375 * legacie, 17.5 * legacie, 141.609375 * legacie);
  kestra.bezierCurveTo(25.5 * legacie, 134.109375 * legacie, 25.5 * legacie, 134.109375 * legacie, 33.5 * legacie, 126.609375 * legacie);
  fill_path(kestra, jatzibe[0]);
  kestra.translate(0, -10 * legacie);
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(45.5 * legacie, 144.609375 * legacie);
  kestra.bezierCurveTo(35.5 * legacie, 155.609375 * legacie, 37 * legacie, 152.109375 * legacie, 28.5 * legacie, 159.609375 * legacie);
  kestra.bezierCurveTo(16.5 * legacie, 154.609375 * legacie, 16.5 * legacie, 151.609375 * legacie, 17.5 * legacie, 141.609375 * legacie);
  kestra.bezierCurveTo(25.5 * legacie, 134.109375 * legacie, 25.5 * legacie, 134.109375 * legacie, 33.5 * legacie, 126.609375 * legacie);
  fill_path(kestra, jatzibe[1], jatzibe[2], 8 * legacie);
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(105.5 * legacie, 34.609375 * legacie);
  kestra.bezierCurveTo(48.5 * legacie, 7.609375 * legacie, 11.5 * legacie, 58.609375 * legacie, 20.5 * legacie, 97.609375 * legacie);
  kestra.bezierCurveTo(44.5 * legacie, 161.609375 * legacie, 70.5 * legacie, 171.609375 * legacie, 88.5 * legacie, 156.609375 * legacie);
  kestra.bezierCurveTo(120.5 * legacie, 129.609375 * legacie, 123.5 * legacie, 105.609375 * legacie, 128.5 * legacie, 83.609375 * legacie);
  kestra.bezierCurveTo(137.5 * legacie, 79.609375 * legacie, 141.5 * legacie, 79.609375 * legacie, 146.5 * legacie, 81.609375 * legacie);
  kestra.bezierCurveTo(153.5 * legacie, 70.609375 * legacie, 151.5 * legacie, 65.609375 * legacie, 148.5 * legacie, 61.609375 * legacie);
  kestra.bezierCurveTo(134.5 * legacie, 60.609375 * legacie, 131.5 * legacie, 63.609375 * legacie, 127.5 * legacie, 66.609375 * legacie);
  kestra.bezierCurveTo(127.5 * legacie, 55.609375 * legacie, 125.5 * legacie, 54.609375 * legacie, 120.5 * legacie, 51.609375 * legacie);
  kestra.bezierCurveTo(128.5 * legacie, 42.609375 * legacie, 136.5 * legacie, 38.609375 * legacie, 147.5 * legacie, 39.609375 * legacie);
  kestra.bezierCurveTo(152.5 * legacie, 23.609375 * legacie, 147.5 * legacie, 21.609375 * legacie, 140.5 * legacie, 17.609375 * legacie);
  kestra.bezierCurveTo(120.5 * legacie, 17.609375 * legacie, 114.5 * legacie, 27.609375 * legacie, 106.5 * legacie, 35.609375 * legacie);
  kestra.closePath();
  fill_path(kestra, jatzibe[1], jatzibe[2], 8 * legacie);
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(104.5 * legacie, 35.609375 * legacie);
  kestra.bezierCurveTo(71.5 * legacie, 36.609375 * legacie, 57.5 * legacie, 52.609375 * legacie, 58.5 * legacie, 81.609375 * legacie);
  kestra.bezierCurveTo(59.5 * legacie, 103.609375 * legacie, 66.5 * legacie, 107.609375 * legacie, 66.5 * legacie, 116.609375 * legacie);
  kestra.bezierCurveTo(67.5 * legacie, 128.609375 * legacie, 65.5 * legacie, 131.609375 * legacie, 63.5 * legacie, 137.609375 * legacie);
  fill_path(kestra, undefined, jatzibe[2], 8 * legacie);
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(59.5 * legacie, 72.609375 * legacie);
  kestra.bezierCurveTo(38.5 * legacie, 80.609375 * legacie, 43.5 * legacie, 81.609375 * legacie, 37.5 * legacie, 89.609375 * legacie);
  fill_path(kestra, undefined, jatzibe[2], 4 * legacie);
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(60.5 * legacie, 85.609375 * legacie);
  kestra.bezierCurveTo(75.5 * legacie, 91.609375 * legacie, 76.5 * legacie, 96.609375 * legacie, 81.5 * legacie, 104.609375 * legacie);
  fill_path(kestra, undefined, jatzibe[2], 4 * legacie);
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(68.5 * legacie, 122.609375 * legacie);
  kestra.bezierCurveTo(79.5 * legacie, 130.609375 * legacie, 74.5 * legacie, 128.609375 * legacie, 80.5 * legacie, 134.609375 * legacie);
  fill_path(kestra, jatzibe[1], jatzibe[2], 4 * legacie);
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(142.5 * legacie, 18.609375 * legacie);
  kestra.bezierCurveTo(151.5 * legacie, 28.609375 * legacie, 151.5 * legacie, 32.609375 * legacie, 146.5 * legacie, 40.609375 * legacie);
  kestra.bezierCurveTo(137.5 * legacie, 26.609375 * legacie, 138.5 * legacie, 24.609375 * legacie, 142.5 * legacie, 19.609375 * legacie);
  kestra.closePath();
  fill_path(kestra, jatzibe[3]);
  kestra.beginPath();
  kestra.lineCap = "round";
  kestra.lineJoin = "round";
  kestra.moveTo(146.5 * legacie, 61.50892639160156 * legacie);
  kestra.bezierCurveTo(157.5 * legacie, 69.50892639160156 * legacie, 150.5 * legacie, 79.50892639160156 * legacie, 145.5 * legacie, 81.50892639160156 * legacie);
  kestra.bezierCurveTo(140.5 * legacie, 65.50892639160156 * legacie, 144.5 * legacie, 64.50892639160156 * legacie, 146.5 * legacie, 62.50892639160156 * legacie);
  kestra.closePath();
  fill_path(kestra, jatzibe[3]);
  return markees;
}
function create_ghost(jaytee, ramsses, loreene) {
  var mikenzie = document.createElement("canvas");
  var anyeli = mikenzie.getContext("2d");
  mikenzie.width = 254 * jaytee;
  mikenzie.height = 288 * jaytee;
  anyeli.translate(0, 5);
  anyeli.globalAlpha = .5;
  anyeli.beginPath();
  anyeli.lineCap = "round";
  anyeli.lineJoin = "round";
  anyeli.moveTo(218 * jaytee, 84.640625 * jaytee);
  anyeli.bezierCurveTo(150 * jaytee, 13.640625 * jaytee, 186 * jaytee, 92.640625 * jaytee, 168 * jaytee, 103.640625 * jaytee);
  anyeli.bezierCurveTo(151 * jaytee, 107.640625 * jaytee, 150 * jaytee, 61.640625 * jaytee, 144 * jaytee, 39.640625 * jaytee);
  anyeli.bezierCurveTo(135 * jaytee, 1.640625 * jaytee, 113 * jaytee, 2.640625 * jaytee, 110 * jaytee, 40.640625 * jaytee);
  anyeli.bezierCurveTo(106 * jaytee, 97.640625 * jaytee, 98 * jaytee, 102.640625 * jaytee, 83 * jaytee, 100.640625 * jaytee);
  anyeli.bezierCurveTo(68 * jaytee, 98.640625 * jaytee, 67 * jaytee, 77.640625 * jaytee, 70 * jaytee, 55.640625 * jaytee);
  anyeli.bezierCurveTo(75 * jaytee, 16.640625 * jaytee, 47 * jaytee, 52.640625 * jaytee, 38 * jaytee, 67.640625 * jaytee);
  anyeli.bezierCurveTo(10 * jaytee, 113.640625 * jaytee, 10 * jaytee, 181.640625 * jaytee, 23 * jaytee, 213.640625 * jaytee);
  anyeli.bezierCurveTo(45 * jaytee, 266.640625 * jaytee, 97 * jaytee, 277.640625 * jaytee, 147 * jaytee, 269.640625 * jaytee);
  anyeli.bezierCurveTo(217 * jaytee, 259.640625 * jaytee, 236 * jaytee, 221.640625 * jaytee, 239 * jaytee, 166.640625 * jaytee);
  anyeli.bezierCurveTo(239 * jaytee, 113.640625 * jaytee, 223 * jaytee, 90.640625 * jaytee, 219 * jaytee, 86.640625 * jaytee);
  anyeli.closePath();
  fill_path(anyeli, loreene[0], loreene[0], 4 * jaytee);
  circle(anyeli, 175 * jaytee, 220.640625 * jaytee, 29.546573405388315 * jaytee);
  fill_path(anyeli, loreene[0]);
  circle(anyeli, 79 * jaytee, 222.640625 * jaytee, 28.178005607210743 * jaytee);
  fill_path(anyeli, loreene[0]);
  circle(anyeli, 175 * jaytee, 214.640625 * jaytee, 27.892651361962706 * jaytee);
  fill_path(anyeli, loreene[0], loreene[0], 4 * jaytee);
  circle(anyeli, 79 * jaytee, 215.640625 * jaytee, 26.570660511172846 * jaytee);
  fill_path(anyeli, loreene[0], loreene[0], 4 * jaytee);
  anyeli.translate(0, -5);
  anyeli.globalAlpha = 1;
  anyeli.beginPath();
  anyeli.lineCap = "round";
  anyeli.lineJoin = "round";
  anyeli.moveTo(218 * jaytee, 84.640625 * jaytee);
  anyeli.bezierCurveTo(150 * jaytee, 13.640625 * jaytee, 186 * jaytee, 92.640625 * jaytee, 168 * jaytee, 103.640625 * jaytee);
  anyeli.bezierCurveTo(151 * jaytee, 107.640625 * jaytee, 150 * jaytee, 61.640625 * jaytee, 144 * jaytee, 39.640625 * jaytee);
  anyeli.bezierCurveTo(135 * jaytee, 1.640625 * jaytee, 113 * jaytee, 2.640625 * jaytee, 110 * jaytee, 40.640625 * jaytee);
  anyeli.bezierCurveTo(106 * jaytee, 97.640625 * jaytee, 98 * jaytee, 102.640625 * jaytee, 83 * jaytee, 100.640625 * jaytee);
  anyeli.bezierCurveTo(68 * jaytee, 98.640625 * jaytee, 67 * jaytee, 77.640625 * jaytee, 70 * jaytee, 55.640625 * jaytee);
  anyeli.bezierCurveTo(75 * jaytee, 16.640625 * jaytee, 47 * jaytee, 52.640625 * jaytee, 38 * jaytee, 67.640625 * jaytee);
  anyeli.bezierCurveTo(10 * jaytee, 113.640625 * jaytee, 10 * jaytee, 181.640625 * jaytee, 23 * jaytee, 213.640625 * jaytee);
  anyeli.bezierCurveTo(45 * jaytee, 266.640625 * jaytee, 97 * jaytee, 277.640625 * jaytee, 147 * jaytee, 269.640625 * jaytee);
  anyeli.bezierCurveTo(217 * jaytee, 259.640625 * jaytee, 236 * jaytee, 221.640625 * jaytee, 239 * jaytee, 166.640625 * jaytee);
  anyeli.bezierCurveTo(239 * jaytee, 113.640625 * jaytee, 223 * jaytee, 90.640625 * jaytee, 219 * jaytee, 86.640625 * jaytee);
  anyeli.closePath();
  fill_path(anyeli, loreene[1], loreene[2], 4 * jaytee);
  circle(anyeli, 175 * jaytee, 222.640625 * jaytee, 26.546573405388315 * jaytee);
  fill_path(anyeli, loreene[3]);
  circle(anyeli, 79 * jaytee, 222.640625 * jaytee, 26.178005607210743 * jaytee);
  fill_path(anyeli, loreene[3]);
  circle(anyeli, 175 * jaytee, 210.640625 * jaytee, 26.892651361962706 * jaytee);
  fill_path(anyeli, loreene[4], loreene[5], 8 * jaytee);
  circle(anyeli, 79 * jaytee, 210.640625 * jaytee, 26.570660511172846 * jaytee);
  fill_path(anyeli, loreene[4], loreene[5], 8 * jaytee);
  return mikenzie;
}
function create_gemme_green(sherae, amaurion, kemauri) {
  var malaila = document.createElement("canvas");
  var seria = malaila.getContext("2d");
  malaila.width = 104 * sherae;
  malaila.height = 117 * sherae;
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(4 * sherae, 90 * sherae);
  seria.bezierCurveTo(20 * sherae, 99.5 * sherae, 20 * sherae, 99.5 * sherae, 36 * sherae, 109 * sherae);
  seria.bezierCurveTo(67 * sherae, 92 * sherae, 67 * sherae, 92 * sherae, 98 * sherae, 75 * sherae);
  seria.bezierCurveTo(91 * sherae, 27 * sherae, 91 * sherae, 27 * sherae, 91 * sherae, 28 * sherae);
  seria.bezierCurveTo(72.5 * sherae, 16 * sherae, 72.5 * sherae, 16 * sherae, 54 * sherae, 4 * sherae);
  seria.bezierCurveTo(33.5 * sherae, 10 * sherae, 33.5 * sherae, 10 * sherae, 13 * sherae, 16 * sherae);
  seria.closePath();
  fill_path(seria, kemauri[0]);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(6 * sherae, 76 * sherae);
  seria.bezierCurveTo(13.5 * sherae, 51.5 * sherae, 13.5 * sherae, 51.5 * sherae, 21 * sherae, 27 * sherae);
  seria.bezierCurveTo(37.5 * sherae, 17 * sherae, 37.5 * sherae, 17 * sherae, 54 * sherae, 7 * sherae);
  seria.bezierCurveTo(33.5 * sherae, 12.5 * sherae, 33.5 * sherae, 12.5 * sherae, 13 * sherae, 18 * sherae);
  seria.closePath();
  fill_path(seria, kemauri[1]);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(24 * sherae, 62 * sherae);
  seria.bezierCurveTo(28.5 * sherae, 53 * sherae, 28.5 * sherae, 53 * sherae, 33 * sherae, 44 * sherae);
  seria.bezierCurveTo(41.5 * sherae, 41 * sherae, 41.5 * sherae, 41 * sherae, 50 * sherae, 38 * sherae);
  seria.bezierCurveTo(52.5 * sherae, 35 * sherae, 52.5 * sherae, 35 * sherae, 55 * sherae, 32 * sherae);
  seria.bezierCurveTo(52 * sherae, 30 * sherae, 52 * sherae, 30 * sherae, 49 * sherae, 28 * sherae);
  seria.bezierCurveTo(38 * sherae, 31.5 * sherae, 38 * sherae, 31.5 * sherae, 27 * sherae, 35 * sherae);
  seria.closePath();
  fill_path(seria, kemauri[1]);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(36 * sherae, 107 * sherae);
  seria.bezierCurveTo(66 * sherae, 90.5 * sherae, 66 * sherae, 90.5 * sherae, 96 * sherae, 74 * sherae);
  seria.bezierCurveTo(93 * sherae, 52.5 * sherae, 93 * sherae, 52.5 * sherae, 90 * sherae, 31 * sherae);
  seria.bezierCurveTo(87 * sherae, 48 * sherae, 87 * sherae, 48 * sherae, 84 * sherae, 65 * sherae);
  seria.closePath();
  fill_path(seria, kemauri[2]);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(1 * sherae, 89 * sherae);
  seria.bezierCurveTo(18 * sherae, 100 * sherae, 34 * sherae, 110 * sherae, 35 * sherae, 111 * sherae);
  seria.bezierCurveTo(67 * sherae, 93 * sherae, 67 * sherae, 93 * sherae, 99 * sherae, 75 * sherae);
  seria.bezierCurveTo(100 * sherae, 78.5 * sherae, 100 * sherae, 78.5 * sherae, 101 * sherae, 82 * sherae);
  seria.bezierCurveTo(68 * sherae, 99 * sherae, 68 * sherae, 99 * sherae, 35 * sherae, 116 * sherae);
  seria.bezierCurveTo(18 * sherae, 106.5 * sherae, 18 * sherae, 106.5 * sherae, 1 * sherae, 97 * sherae);
  seria.closePath();
  fill_path(seria, kemauri[3]);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(36 * sherae, 107 * sherae);
  seria.bezierCurveTo(66.5 * sherae, 91.5 * sherae, 66.5 * sherae, 91.5 * sherae, 97 * sherae, 76 * sherae);
  seria.bezierCurveTo(94.5 * sherae, 52 * sherae, 94.5 * sherae, 52 * sherae, 92 * sherae, 28 * sherae);
  seria.bezierCurveTo(73 * sherae, 15.5 * sherae, 73 * sherae, 15.5 * sherae, 54 * sherae, 3 * sherae);
  seria.bezierCurveTo(33 * sherae, 9.5 * sherae, 33 * sherae, 9.5 * sherae, 12 * sherae, 16 * sherae);
  seria.bezierCurveTo(8 * sherae, 53 * sherae, 8 * sherae, 53 * sherae, 4 * sherae, 90 * sherae);
  seria.bezierCurveTo(18.5 * sherae, 99 * sherae, 18.5 * sherae, 99 * sherae, 33 * sherae, 108 * sherae);
  seria.closePath();
  fill_path(seria, undefined, kemauri[4], 6 * sherae);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(22 * sherae, 71 * sherae);
  seria.bezierCurveTo(30 * sherae, 76.5 * sherae, 30 * sherae, 76.5 * sherae, 38 * sherae, 82 * sherae);
  seria.bezierCurveTo(53 * sherae, 72 * sherae, 53 * sherae, 72 * sherae, 68 * sherae, 62 * sherae);
  seria.bezierCurveTo(68 * sherae, 52 * sherae, 68 * sherae, 52 * sherae, 68 * sherae, 42 * sherae);
  seria.bezierCurveTo(59.5 * sherae, 35.5 * sherae, 59.5 * sherae, 35.5 * sherae, 51 * sherae, 29 * sherae);
  seria.bezierCurveTo(39.5 * sherae, 32 * sherae, 39.5 * sherae, 32 * sherae, 28 * sherae, 35 * sherae);
  seria.bezierCurveTo(25 * sherae, 52 * sherae, 25 * sherae, 52 * sherae, 22 * sherae, 69 * sherae);
  seria.closePath();
  fill_path(seria, undefined, kemauri[4], 6 * sherae);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(5 * sherae, 89 * sherae);
  seria.bezierCurveTo(20 * sherae, 73 * sherae, 12.5 * sherae, 80.5 * sherae, 20 * sherae, 72 * sherae);
  seria.closePath();
  fill_path(seria, undefined, kemauri[4], 6 * sherae);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(35 * sherae, 102 * sherae);
  seria.bezierCurveTo(36 * sherae, 92.5 * sherae, 36 * sherae, 92.5 * sherae, 37 * sherae, 83 * sherae);
  seria.closePath();
  fill_path(seria, undefined, kemauri[4], 6 * sherae);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(68 * sherae, 62 * sherae);
  seria.bezierCurveTo(81 * sherae, 67.5 * sherae, 81 * sherae, 67.5 * sherae, 94 * sherae, 73 * sherae);
  seria.closePath();
  fill_path(seria, undefined, kemauri[4], 6 * sherae);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(70 * sherae, 41 * sherae);
  seria.bezierCurveTo(80 * sherae, 35.5 * sherae, 80 * sherae, 35.5 * sherae, 90 * sherae, 30 * sherae);
  seria.closePath();
  fill_path(seria, undefined, kemauri[4], 6 * sherae);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(28 * sherae, 33 * sherae);
  seria.bezierCurveTo(21.5 * sherae, 26.5 * sherae, 21.5 * sherae, 26.5 * sherae, 15 * sherae, 20 * sherae);
  seria.closePath();
  fill_path(seria, undefined, kemauri[4], 6 * sherae);
  seria.beginPath();
  seria.lineCap = "round";
  seria.lineJoin = "round";
  seria.moveTo(51 * sherae, 28 * sherae);
  seria.bezierCurveTo(53 * sherae, 17 * sherae, 53 * sherae, 17 * sherae, 55 * sherae, 6 * sherae);
  seria.closePath();
  fill_path(seria, undefined, kemauri[4], 6 * sherae);
  return malaila;
}
function create_superhammer(kerryann, tarris, shamonica) {
  var shatiqua = document.createElement("canvas");
  var tuongvy = shatiqua.getContext("2d");
  shatiqua.width = 105 * kerryann;
  shatiqua.height = 144 * kerryann;
  tuongvy.globalAlpha = tarris ? .5 : 1;
  tuongvy.translate(-5 * kerryann, 0 * kerryann);
  tuongvy.save();
  tuongvy.translate(52.5 * kerryann, 91.5 * kerryann);
  round_rect(tuongvy, -4.5 * kerryann, -39 * kerryann, 9 * kerryann, 78 * kerryann, 5 * kerryann);
  tuongvy.restore();
  fill_path(tuongvy, shamonica[0], shamonica[0], 3 * kerryann);
  tuongvy.save();
  tuongvy.translate(53 * kerryann, 36 * kerryann);
  round_rect(tuongvy, -29 * kerryann, -17.5 * kerryann, 58 * kerryann, 35 * kerryann, 5 * kerryann);
  tuongvy.restore();
  fill_path(tuongvy, shamonica[0], shamonica[0], 4 * kerryann);
  tuongvy.save();
  tuongvy.translate(53.5 * kerryann, 35.5 * kerryann);
  round_rect(tuongvy, -26.5 * kerryann, -15 * kerryann, 53 * kerryann, 30 * kerryann, 5 * kerryann);
  tuongvy.restore();
  fill_path(tuongvy, shamonica[0], shamonica[0], 4 * kerryann);
  tuongvy.translate(5 * kerryann, 0 * kerryann);
  tuongvy.globalAlpha = 1;
  tuongvy.save();
  tuongvy.translate(52.5 * kerryann, 91.5 * kerryann);
  round_rect(tuongvy, -4.5 * kerryann, -39 * kerryann, 9 * kerryann, 78 * kerryann, 5 * kerryann);
  tuongvy.restore();
  fill_path(tuongvy, shamonica[1], shamonica[2], 3 * kerryann);
  tuongvy.save();
  tuongvy.translate(53 * kerryann, 36 * kerryann);
  round_rect(tuongvy, -29 * kerryann, -17.5 * kerryann, 58 * kerryann, 35 * kerryann, 5 * kerryann);
  tuongvy.restore();
  fill_path(tuongvy, shamonica[3], shamonica[4], 4 * kerryann);
  tuongvy.save();
  tuongvy.translate(53.5 * kerryann, 35.5 * kerryann);
  round_rect(tuongvy, -26.5 * kerryann, -15 * kerryann, 53 * kerryann, 30 * kerryann, 5 * kerryann);
  tuongvy.restore();
  fill_path(tuongvy, shamonica[5], shamonica[6], 4 * kerryann);
  tuongvy.beginPath();
  tuongvy.lineCap = "round";
  tuongvy.lineJoin = "round";
  tuongvy.moveTo(49 * kerryann, 60.5 * kerryann);
  tuongvy.bezierCurveTo(44 * kerryann, 56.5 * kerryann, 44 * kerryann, 56.5 * kerryann, 39 * kerryann, 52.5 * kerryann);
  tuongvy.bezierCurveTo(39 * kerryann, 46.5 * kerryann, 39 * kerryann, 46.5 * kerryann, 39 * kerryann, 40.5 * kerryann);
  tuongvy.bezierCurveTo(44 * kerryann, 44 * kerryann, 44 * kerryann, 44 * kerryann, 49 * kerryann, 47.5 * kerryann);
  tuongvy.bezierCurveTo(49 * kerryann, 54 * kerryann, 49 * kerryann, 54 * kerryann, 49 * kerryann, 60.5 * kerryann);
  tuongvy.closePath();
  fill_path(tuongvy, shamonica[7], shamonica[6], 3 * kerryann);
  tuongvy.beginPath();
  tuongvy.lineCap = "round";
  tuongvy.lineJoin = "round";
  tuongvy.moveTo(66 * kerryann, 40.5 * kerryann);
  tuongvy.bezierCurveTo(66 * kerryann, 46.5 * kerryann, 66 * kerryann, 46.5 * kerryann, 66 * kerryann, 52.5 * kerryann);
  tuongvy.bezierCurveTo(60.5 * kerryann, 56.5 * kerryann, 60.5 * kerryann, 56.5 * kerryann, 55 * kerryann, 60.5 * kerryann);
  tuongvy.bezierCurveTo(56 * kerryann, 53 * kerryann, 56 * kerryann, 53 * kerryann, 57 * kerryann, 45.5 * kerryann);
  tuongvy.bezierCurveTo(61.5 * kerryann, 43 * kerryann, 61.5 * kerryann, 43 * kerryann, 66 * kerryann, 40.5 * kerryann);
  tuongvy.closePath();
  fill_path(tuongvy, shamonica[7], shamonica[6], 3 * kerryann);
  tuongvy.beginPath();
  tuongvy.lineCap = "round";
  tuongvy.lineJoin = "round";
  tuongvy.moveTo(52 * kerryann, 33.5 * kerryann);
  tuongvy.bezierCurveTo(55.5 * kerryann, 41 * kerryann, 55.5 * kerryann, 41 * kerryann, 59 * kerryann, 48.5 * kerryann);
  tuongvy.bezierCurveTo(56 * kerryann, 58 * kerryann, 56 * kerryann, 58 * kerryann, 53 * kerryann, 67.5 * kerryann);
  tuongvy.bezierCurveTo(49 * kerryann, 58 * kerryann, 49 * kerryann, 58 * kerryann, 45 * kerryann, 48.5 * kerryann);
  tuongvy.bezierCurveTo(48.5 * kerryann, 41 * kerryann, 48.5 * kerryann, 41 * kerryann, 52 * kerryann, 33.5 * kerryann);
  tuongvy.closePath();
  fill_path(tuongvy, shamonica[9], shamonica[8], 3 * kerryann);
  tuongvy.beginPath();
  tuongvy.lineCap = "round";
  tuongvy.lineJoin = "round";
  tuongvy.moveTo(52 * kerryann, 47.5 * kerryann);
  tuongvy.bezierCurveTo(54.5 * kerryann, 50.5 * kerryann, 54.5 * kerryann, 50.5 * kerryann, 57 * kerryann, 53.5 * kerryann);
  tuongvy.bezierCurveTo(55 * kerryann, 60 * kerryann, 55 * kerryann, 60 * kerryann, 53 * kerryann, 66.5 * kerryann);
  tuongvy.bezierCurveTo(50.5 * kerryann, 61 * kerryann, 50.5 * kerryann, 61 * kerryann, 48 * kerryann, 55.5 * kerryann);
  tuongvy.bezierCurveTo(50 * kerryann, 52 * kerryann, 50 * kerryann, 52 * kerryann, 52 * kerryann, 48.5 * kerryann);
  tuongvy.closePath();
  fill_path(tuongvy, shamonica[11], shamonica[10], 3 * kerryann);
  return shatiqua;
}
function create_dragon_sword(shannell, obed, taevyn) {
  var harshan = document.createElement("canvas");
  var sametria = harshan.getContext("2d");
  harshan.width = 46 * shannell;
  harshan.height = 140 * shannell;
  sametria.scale(-1 * shannell, 1 * shannell);
  sametria.translate(-50 * shannell, 40 * shannell);
  sametria.translate(-20 * shannell, 0);
  sametria.globalAlpha = obed ? .5 : 1;
  sametria.translate(10 * shannell, 0);
  sametria.beginPath();
  sametria.lineCap = "round";
  sametria.lineJoin = "round";
  sametria.moveTo(22.599990844726562 * shannell, 85.94999694824219 * shannell);
  sametria.bezierCurveTo(17.599990844726562 * shannell, 83.94999694824219 * shannell, 17.599990844726562 * shannell, 83.94999694824219 * shannell, 12.599990844726562 * shannell, 81.94999694824219 * shannell);
  sametria.bezierCurveTo(19.599990844726562 * shannell, 73.94999694824219 * shannell, 2.5999908447265625 * shannell, 22.949996948242188 * shannell, 33.59999084472656 * shannell, 7.9499969482421875 * shannell);
  sametria.bezierCurveTo(27.599990844726562 * shannell, 28.949996948242188 * shannell, 33.59999084472656 * shannell, 26.949996948242188 * shannell, 35.59999084472656 * shannell, 32.94999694824219 * shannell);
  sametria.bezierCurveTo(25.599990844726562 * shannell, 59.94999694824219 * shannell, 26.599990844726562 * shannell, 69.94999694824219 * shannell, 29.599990844726562 * shannell, 82.94999694824219 * shannell);
  sametria.closePath();
  fill_path(sametria, taevyn[0]);
  sametria.beginPath();
  sametria.lineCap = "round";
  sametria.lineJoin = "round";
  sametria.translate(-1 * shannell, 0);
  sametria.moveTo(17.599990844726562 * shannell, 89.75 * shannell);
  sametria.bezierCurveTo(24.599990844726562 * shannell, 99.75 * shannell, 24.599990844726562 * shannell, 101.75 * shannell, 20.599990844726562 * shannell, 111.75 * shannell);
  sametria.bezierCurveTo(28.599990844726562 * shannell, 110.75 * shannell, 26.599990844726562 * shannell, 112.75 * shannell, 28.599990844726562 * shannell, 111.75 * shannell);
  sametria.bezierCurveTo(30.599990844726562 * shannell, 96.75 * shannell, 32.59999084472656 * shannell, 96.75 * shannell, 30.599990844726562 * shannell, 87.75 * shannell);
  sametria.closePath();
  fill_path(sametria, taevyn[0]);
  sametria.beginPath();
  sametria.lineCap = "round";
  sametria.lineJoin = "round";
  sametria.translate(1 * shannell, 0);
  sametria.moveTo(7.5999908447265625 * shannell, 86.34999084472656 * shannell);
  sametria.bezierCurveTo(12.599990844726562 * shannell, 85.34999084472656 * shannell, 14.599990844726562 * shannell, 84.34999084472656 * shannell, 13.599990844726562 * shannell, 84.34999084472656 * shannell);
  sametria.bezierCurveTo(21.599990844726562 * shannell, 83.34999084472656 * shannell, 21.599990844726562 * shannell, 83.34999084472656 * shannell, 29.599990844726562 * shannell, 82.34999084472656 * shannell);
  sametria.bezierCurveTo(33.59999084472656 * shannell, 85.84999084472656 * shannell, 33.59999084472656 * shannell, 85.84999084472656 * shannell, 37.59999084472656 * shannell, 89.34999084472656 * shannell);
  sametria.bezierCurveTo(34.09999084472656 * shannell, 91.84999084472656 * shannell, 34.09999084472656 * shannell, 91.84999084472656 * shannell, 30.599990844726562 * shannell, 94.34999084472656 * shannell);
  sametria.bezierCurveTo(21.099990844726562 * shannell, 93.34999084472656 * shannell, 21.099990844726562 * shannell, 93.34999084472656 * shannell, 11.599990844726562 * shannell, 92.34999084472656 * shannell);
  sametria.closePath();
  fill_path(sametria, taevyn[0]);
  sametria.save();
  sametria.translate(23.599990844726562 * shannell, 110.94999694824219 * shannell);
  sametria.rotate(0);
  round_rect(sametria, -7 * shannell, -4 * shannell, 14 * shannell, 8 * shannell, 10 * shannell);
  sametria.restore();
  fill_path(sametria, taevyn[0]);
  sametria.translate(0 * shannell, 0);
  sametria.globalAlpha = 1;
  sametria.translate(10 * shannell, 0);
  sametria.beginPath();
  sametria.lineCap = "round";
  sametria.lineJoin = "round";
  sametria.moveTo(22.599990844726562 * shannell, 85.94999694824219 * shannell);
  sametria.bezierCurveTo(17.599990844726562 * shannell, 83.94999694824219 * shannell, 17.599990844726562 * shannell, 83.94999694824219 * shannell, 12.599990844726562 * shannell, 81.94999694824219 * shannell);
  sametria.bezierCurveTo(19.599990844726562 * shannell, 73.94999694824219 * shannell, 2.5999908447265625 * shannell, 22.949996948242188 * shannell, 33.59999084472656 * shannell, 7.9499969482421875 * shannell);
  sametria.bezierCurveTo(27.599990844726562 * shannell, 28.949996948242188 * shannell, 33.59999084472656 * shannell, 26.949996948242188 * shannell, 35.59999084472656 * shannell, 32.94999694824219 * shannell);
  sametria.bezierCurveTo(25.599990844726562 * shannell, 59.94999694824219 * shannell, 26.599990844726562 * shannell, 69.94999694824219 * shannell, 29.599990844726562 * shannell, 82.94999694824219 * shannell);
  sametria.closePath();
  fill_path(sametria, taevyn[3], taevyn[4], 3 * shannell);
  sametria.beginPath();
  sametria.lineCap = "round";
  sametria.lineJoin = "round";
  sametria.translate(-1 * shannell, 0);
  sametria.moveTo(17.599990844726562 * shannell, 89.75 * shannell);
  sametria.bezierCurveTo(24.599990844726562 * shannell, 99.75 * shannell, 24.599990844726562 * shannell, 101.75 * shannell, 20.599990844726562 * shannell, 111.75 * shannell);
  sametria.bezierCurveTo(28.599990844726562 * shannell, 110.75 * shannell, 26.599990844726562 * shannell, 112.75 * shannell, 28.599990844726562 * shannell, 111.75 * shannell);
  sametria.bezierCurveTo(30.599990844726562 * shannell, 96.75 * shannell, 32.59999084472656 * shannell, 96.75 * shannell, 30.599990844726562 * shannell, 87.75 * shannell);
  sametria.closePath();
  fill_path(sametria, taevyn[1], taevyn[2], 3 * shannell);
  sametria.beginPath();
  sametria.lineCap = "round";
  sametria.lineJoin = "round";
  sametria.translate(1 * shannell, 0);
  sametria.moveTo(7.5999908447265625 * shannell, 86.34999084472656 * shannell);
  sametria.bezierCurveTo(12.599990844726562 * shannell, 85.34999084472656 * shannell, 14.599990844726562 * shannell, 84.34999084472656 * shannell, 13.599990844726562 * shannell, 84.34999084472656 * shannell);
  sametria.bezierCurveTo(21.599990844726562 * shannell, 83.34999084472656 * shannell, 21.599990844726562 * shannell, 83.34999084472656 * shannell, 29.599990844726562 * shannell, 82.34999084472656 * shannell);
  sametria.bezierCurveTo(33.59999084472656 * shannell, 85.84999084472656 * shannell, 33.59999084472656 * shannell, 85.84999084472656 * shannell, 37.59999084472656 * shannell, 89.34999084472656 * shannell);
  sametria.bezierCurveTo(34.09999084472656 * shannell, 91.84999084472656 * shannell, 34.09999084472656 * shannell, 91.84999084472656 * shannell, 30.599990844726562 * shannell, 94.34999084472656 * shannell);
  sametria.bezierCurveTo(21.099990844726562 * shannell, 93.34999084472656 * shannell, 21.099990844726562 * shannell, 93.34999084472656 * shannell, 11.599990844726562 * shannell, 92.34999084472656 * shannell);
  sametria.closePath();
  fill_path(sametria, taevyn[1], taevyn[2], 3 * shannell);
  sametria.save();
  sametria.translate(23.599990844726562 * shannell, 110.94999694824219 * shannell);
  sametria.rotate(0);
  round_rect(sametria, -7 * shannell, -4 * shannell, 14 * shannell, 8 * shannell, 10 * shannell);
  sametria.restore();
  fill_path(sametria, taevyn[1], taevyn[2], 3 * shannell);
  return harshan;
}
function create_cursed_sword(jemal, unique, shereda) {
  var zyaire = document.createElement("canvas");
  var lariel = zyaire.getContext("2d");
  zyaire.width = 65 * jemal;
  zyaire.height = 131 * jemal;
  lariel.globalAlpha = unique ? .5 : 1;
  lariel.translate(3, 0);
  lariel.beginPath();
  lariel.lineCap = "round";
  lariel.lineJoin = "round";
  lariel.moveTo(21.25 * jemal, 88.9375 * jemal);
  lariel.bezierCurveTo(19.25 * jemal, 57.9375 * jemal, 19.25 * jemal, 57.9375 * jemal, 17.25 * jemal, 26.9375 * jemal);
  lariel.bezierCurveTo(24.25 * jemal, 20.9375 * jemal, 24.25 * jemal, 20.9375 * jemal, 31.25 * jemal, 14.9375 * jemal);
  lariel.bezierCurveTo(32.75 * jemal, 54.4375 * jemal, 32.75 * jemal, 54.4375 * jemal, 34.25 * jemal, 93.9375 * jemal);
  lariel.closePath();
  fill_path(lariel, shereda[0]);
  lariel.beginPath();
  lariel.lineCap = "round";
  lariel.lineJoin = "round";
  lariel.moveTo(30.25 * jemal, 5.9375 * jemal);
  lariel.bezierCurveTo(39.25 * jemal, 14.9375 * jemal, 39.25 * jemal, 14.9375 * jemal, 48.25 * jemal, 23.9375 * jemal);
  lariel.bezierCurveTo(44.75 * jemal, 56.4375 * jemal, 44.75 * jemal, 56.4375 * jemal, 41.25 * jemal, 88.9375 * jemal);
  lariel.bezierCurveTo(36.25 * jemal, 88.9375 * jemal, 36.25 * jemal, 88.9375 * jemal, 31.25 * jemal, 88.9375 * jemal);
  lariel.bezierCurveTo(30.75 * jemal, 47.9375 * jemal, 30.75 * jemal, 47.9375 * jemal, 30.25 * jemal, 6.9375 * jemal);
  lariel.closePath();
  fill_path(lariel, shereda[0], shereda[0], 4 * jemal);
  lariel.beginPath();
  lariel.lineCap = "round";
  lariel.lineJoin = "round";
  lariel.moveTo(7.25 * jemal, 85.4375 * jemal);
  lariel.bezierCurveTo(31.75 * jemal, 85.4375 * jemal, 31.75 * jemal, 85.4375 * jemal, 56.25 * jemal, 85.4375 * jemal);
  lariel.bezierCurveTo(51.25 * jemal, 91.9375 * jemal, 51.25 * jemal, 91.9375 * jemal, 46.25 * jemal, 98.4375 * jemal);
  lariel.bezierCurveTo(30.25 * jemal, 98.4375 * jemal, 30.25 * jemal, 98.4375 * jemal, 14.25 * jemal, 98.4375 * jemal);
  lariel.closePath();
  fill_path(lariel, shereda[0], shereda[0], 4 * jemal);
  lariel.save();
  lariel.translate(31.25 * jemal, 108.9375 * jemal);
  round_rect(lariel, -6 * jemal, -14.5 * jemal, 12 * jemal, 29 * jemal, 10 * jemal);
  lariel.restore();
  lariel.globalAlpha = 1;
  lariel.translate(-3, 0);
  lariel.beginPath();
  lariel.lineCap = "round";
  lariel.lineJoin = "round";
  lariel.moveTo(21.25 * jemal, 88.9375 * jemal);
  lariel.bezierCurveTo(19.25 * jemal, 57.9375 * jemal, 19.25 * jemal, 57.9375 * jemal, 17.25 * jemal, 26.9375 * jemal);
  lariel.bezierCurveTo(24.25 * jemal, 20.9375 * jemal, 24.25 * jemal, 20.9375 * jemal, 31.25 * jemal, 14.9375 * jemal);
  lariel.bezierCurveTo(32.75 * jemal, 54.4375 * jemal, 32.75 * jemal, 54.4375 * jemal, 34.25 * jemal, 93.9375 * jemal);
  lariel.closePath();
  fill_path(lariel, shereda[1]);
  lariel.beginPath();
  lariel.lineCap = "round";
  lariel.lineJoin = "round";
  lariel.moveTo(30.25 * jemal, 5.9375 * jemal);
  lariel.bezierCurveTo(39.25 * jemal, 14.9375 * jemal, 39.25 * jemal, 14.9375 * jemal, 48.25 * jemal, 23.9375 * jemal);
  lariel.bezierCurveTo(44.75 * jemal, 56.4375 * jemal, 44.75 * jemal, 56.4375 * jemal, 41.25 * jemal, 88.9375 * jemal);
  lariel.bezierCurveTo(36.25 * jemal, 88.9375 * jemal, 36.25 * jemal, 88.9375 * jemal, 31.25 * jemal, 88.9375 * jemal);
  lariel.bezierCurveTo(30.75 * jemal, 47.9375 * jemal, 30.75 * jemal, 47.9375 * jemal, 30.25 * jemal, 6.9375 * jemal);
  lariel.closePath();
  fill_path(lariel, shereda[2], shereda[1], 4 * jemal);
  lariel.beginPath();
  lariel.lineCap = "round";
  lariel.lineJoin = "round";
  lariel.moveTo(7.25 * jemal, 85.4375 * jemal);
  lariel.bezierCurveTo(31.75 * jemal, 85.4375 * jemal, 31.75 * jemal, 85.4375 * jemal, 56.25 * jemal, 85.4375 * jemal);
  lariel.bezierCurveTo(51.25 * jemal, 91.9375 * jemal, 51.25 * jemal, 91.9375 * jemal, 46.25 * jemal, 98.4375 * jemal);
  lariel.bezierCurveTo(30.25 * jemal, 98.4375 * jemal, 30.25 * jemal, 98.4375 * jemal, 14.25 * jemal, 98.4375 * jemal);
  lariel.closePath();
  fill_path(lariel, shereda[4], shereda[5], 4 * jemal);
  lariel.save();
  lariel.translate(31.25 * jemal, 108.9375 * jemal);
  round_rect(lariel, -6 * jemal, -14.5 * jemal, 12 * jemal, 29 * jemal, 10 * jemal);
  lariel.restore();
  fill_path(lariel, shereda[4], shereda[5], 4 * jemal);
  lariel.beginPath();
  lariel.lineCap = "round";
  lariel.lineJoin = "round";
  lariel.moveTo(31.25 * jemal, 73.4375 * jemal);
  lariel.bezierCurveTo(33.25 * jemal, 77.9375 * jemal, 33.25 * jemal, 77.9375 * jemal, 35.25 * jemal, 82.4375 * jemal);
  lariel.bezierCurveTo(33.25 * jemal, 87.4375 * jemal, 33.25 * jemal, 87.4375 * jemal, 31.25 * jemal, 92.4375 * jemal);
  lariel.bezierCurveTo(29.25 * jemal, 87.9375 * jemal, 29.25 * jemal, 87.9375 * jemal, 27.25 * jemal, 83.4375 * jemal);
  lariel.closePath();
  fill_path(lariel, shereda[3], shereda[1], 2 * jemal);
  return zyaire;
}
function create_shop(montavius, jorgejr) {
  var jamareon = document.createElement("canvas");
  var oziel = jamareon.getContext("2d");
  var lakeda = montavius * 120;
  var caily = montavius * 140;
  jamareon.width = lakeda;
  jamareon.height = caily;
  jamareon.width = 130 * montavius;
  jamareon.height = 120 * montavius;
  round_rect(oziel, 10 * montavius, 12 * montavius, 110 * montavius, 90 * montavius, 10 * montavius);
  fill_path(oziel, jorgejr[0]);
  round_rect(oziel, 10 * montavius, 5 * montavius, 110 * montavius, 90 * montavius, 10 * montavius);
  fill_path(oziel, jorgejr[1], jorgejr[2], 4 * montavius);
  var elisabetta = create_rotated_img(-Math.PI / 5, create_pickaxe(montavius * .5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
  oziel.drawImage(elisabetta, 12 * montavius, 18 * montavius);
  var elisabetta = create_rotated_img(Math.PI / 4, create_hammer(montavius * .55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
  oziel.drawImage(elisabetta, 36 * montavius, 16 * montavius);
  return jamareon;
}
function create_blue_orb(shanque, elizer, zaidy) {
  var sibyl = document.createElement("canvas");
  var shailynn = sibyl.getContext("2d");
  sibyl.width = 137 * shanque;
  sibyl.height = 129 * shanque;
  shailynn.globalAlpha = .5;
  circle(shailynn, 69 * shanque, 64 * shanque, 48.16637831516918 * shanque);
  fill_path(shailynn, zaidy[1]);
  shailynn.globalAlpha = .7;
  circle(shailynn, 69 * shanque, 64 * shanque, 38.23105625617661 * shanque);
  fill_path(shailynn, zaidy[2]);
  shailynn.globalAlpha = .7;
  circle(shailynn, 69 * shanque, 64 * shanque, 32.01562118716424 * shanque);
  fill_path(shailynn, zaidy[2], zaidy[3], 4 * shanque);
  shailynn.beginPath();
  shailynn.lineCap = "round";
  shailynn.lineJoin = "round";
  shailynn.moveTo(72 * shanque, 41 * shanque);
  shailynn.bezierCurveTo(52 * shanque, 41 * shanque, 48 * shanque, 50 * shanque, 45 * shanque, 58 * shanque);
  shailynn.bezierCurveTo(43 * shanque, 67 * shanque, 45 * shanque, 68 * shanque, 46 * shanque, 72 * shanque);
  shailynn.bezierCurveTo(52 * shanque, 53 * shanque, 60 * shanque, 48 * shanque, 72 * shanque, 42 * shanque);
  shailynn.closePath();
  fill_path(shailynn, zaidy[3]);
  shailynn.beginPath();
  shailynn.lineCap = "round";
  shailynn.lineJoin = "round";
  shailynn.moveTo(93 * shanque, 62 * shanque);
  shailynn.bezierCurveTo(95 * shanque, 72 * shanque, 90 * shanque, 81 * shanque, 81 * shanque, 87 * shanque);
  shailynn.bezierCurveTo(74 * shanque, 91 * shanque, 69 * shanque, 89 * shanque, 64 * shanque, 88 * shanque);
  shailynn.bezierCurveTo(77 * shanque, 83 * shanque, 84 * shanque, 82 * shanque, 92 * shanque, 62 * shanque);
  shailynn.closePath();
  fill_path(shailynn, zaidy[3]);
  return sibyl;
}
function create_dragon_cube(tykeriah, harleequinn, noviah) {
  var erskine = document.createElement("canvas");
  var sigel = erskine.getContext("2d");
  erskine.width = 137 * tykeriah;
  erskine.height = 129 * tykeriah;
  sigel.globalAlpha = .4;
  sigel.beginPath();
  sigel.lineCap = "round";
  sigel.lineJoin = "round";
  sigel.moveTo(42.000030517578125 * tykeriah, 41.17047119140625 * tykeriah);
  sigel.bezierCurveTo(45.000030517578125 * tykeriah, 38.17047119140625 * tykeriah, 49.000030517578125 * tykeriah, 37.17047119140625 * tykeriah, 62.000030517578125 * tykeriah, 38.17047119140625 * tykeriah);
  sigel.bezierCurveTo(78.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 78.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 94.00003051757812 * tykeriah, 38.17047119140625 * tykeriah);
  sigel.bezierCurveTo(100.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 102.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 101.00003051757812 * tykeriah, 47.17047119140625 * tykeriah);
  sigel.bezierCurveTo(101.00003051757812 * tykeriah, 63.67047119140625 * tykeriah, 101.00003051757812 * tykeriah, 63.67047119140625 * tykeriah, 101.00003051757812 * tykeriah, 80.17047119140625 * tykeriah);
  sigel.bezierCurveTo(102.00003051757812 * tykeriah, 84.17047119140625 * tykeriah, 100.00003051757812 * tykeriah, 86.17047119140625 * tykeriah, 95.00003051757812 * tykeriah, 88.17047119140625 * tykeriah);
  sigel.bezierCurveTo(84.00003051757812 * tykeriah, 94.17047119140625 * tykeriah, 89.00003051757812 * tykeriah, 94.17047119140625 * tykeriah, 79.00003051757812 * tykeriah, 94.17047119140625 * tykeriah);
  sigel.bezierCurveTo(59.500030517578125 * tykeriah, 94.17047119140625 * tykeriah, 59.500030517578125 * tykeriah, 94.17047119140625 * tykeriah, 40.000030517578125 * tykeriah, 94.17047119140625 * tykeriah);
  sigel.bezierCurveTo(33.000030517578125 * tykeriah, 94.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 94.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 86.17047119140625 * tykeriah);
  sigel.bezierCurveTo(34.000030517578125 * tykeriah, 69.67047119140625 * tykeriah, 34.000030517578125 * tykeriah, 69.67047119140625 * tykeriah, 34.000030517578125 * tykeriah, 53.17047119140625 * tykeriah);
  sigel.bezierCurveTo(33.000030517578125 * tykeriah, 47.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 47.17047119140625 * tykeriah, 40.000030517578125 * tykeriah, 42.17047119140625 * tykeriah);
  sigel.closePath();
  fill_path(sigel, undefined, noviah[2], 40 * tykeriah);
  sigel.globalAlpha = .4;
  sigel.beginPath();
  sigel.lineCap = "round";
  sigel.lineJoin = "round";
  sigel.moveTo(42.000030517578125 * tykeriah, 41.17047119140625 * tykeriah);
  sigel.bezierCurveTo(45.000030517578125 * tykeriah, 38.17047119140625 * tykeriah, 49.000030517578125 * tykeriah, 37.17047119140625 * tykeriah, 62.000030517578125 * tykeriah, 38.17047119140625 * tykeriah);
  sigel.bezierCurveTo(78.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 78.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 94.00003051757812 * tykeriah, 38.17047119140625 * tykeriah);
  sigel.bezierCurveTo(100.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 102.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 101.00003051757812 * tykeriah, 47.17047119140625 * tykeriah);
  sigel.bezierCurveTo(101.00003051757812 * tykeriah, 63.67047119140625 * tykeriah, 101.00003051757812 * tykeriah, 63.67047119140625 * tykeriah, 101.00003051757812 * tykeriah, 80.17047119140625 * tykeriah);
  sigel.bezierCurveTo(102.00003051757812 * tykeriah, 84.17047119140625 * tykeriah, 100.00003051757812 * tykeriah, 86.17047119140625 * tykeriah, 95.00003051757812 * tykeriah, 88.17047119140625 * tykeriah);
  sigel.bezierCurveTo(84.00003051757812 * tykeriah, 94.17047119140625 * tykeriah, 89.00003051757812 * tykeriah, 94.17047119140625 * tykeriah, 79.00003051757812 * tykeriah, 94.17047119140625 * tykeriah);
  sigel.bezierCurveTo(59.500030517578125 * tykeriah, 94.17047119140625 * tykeriah, 59.500030517578125 * tykeriah, 94.17047119140625 * tykeriah, 40.000030517578125 * tykeriah, 94.17047119140625 * tykeriah);
  sigel.bezierCurveTo(33.000030517578125 * tykeriah, 94.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 94.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 86.17047119140625 * tykeriah);
  sigel.bezierCurveTo(34.000030517578125 * tykeriah, 69.67047119140625 * tykeriah, 34.000030517578125 * tykeriah, 69.67047119140625 * tykeriah, 34.000030517578125 * tykeriah, 53.17047119140625 * tykeriah);
  sigel.bezierCurveTo(33.000030517578125 * tykeriah, 47.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 47.17047119140625 * tykeriah, 40.000030517578125 * tykeriah, 42.17047119140625 * tykeriah);
  sigel.closePath();
  fill_path(sigel, undefined, noviah[1], 20 * tykeriah);
  sigel.globalAlpha = .8;
  sigel.beginPath();
  sigel.lineCap = "round";
  sigel.lineJoin = "round";
  sigel.moveTo(42.000030517578125 * tykeriah, 41.17047119140625 * tykeriah);
  sigel.bezierCurveTo(45.000030517578125 * tykeriah, 38.17047119140625 * tykeriah, 49.000030517578125 * tykeriah, 37.17047119140625 * tykeriah, 62.000030517578125 * tykeriah, 38.17047119140625 * tykeriah);
  sigel.bezierCurveTo(78.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 78.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 94.00003051757812 * tykeriah, 38.17047119140625 * tykeriah);
  sigel.bezierCurveTo(100.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 102.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 101.00003051757812 * tykeriah, 47.17047119140625 * tykeriah);
  sigel.bezierCurveTo(101.00003051757812 * tykeriah, 63.67047119140625 * tykeriah, 101.00003051757812 * tykeriah, 63.67047119140625 * tykeriah, 101.00003051757812 * tykeriah, 80.17047119140625 * tykeriah);
  sigel.bezierCurveTo(102.00003051757812 * tykeriah, 84.17047119140625 * tykeriah, 100.00003051757812 * tykeriah, 86.17047119140625 * tykeriah, 95.00003051757812 * tykeriah, 88.17047119140625 * tykeriah);
  sigel.bezierCurveTo(84.00003051757812 * tykeriah, 94.17047119140625 * tykeriah, 89.00003051757812 * tykeriah, 94.17047119140625 * tykeriah, 79.00003051757812 * tykeriah, 94.17047119140625 * tykeriah);
  sigel.bezierCurveTo(59.500030517578125 * tykeriah, 94.17047119140625 * tykeriah, 59.500030517578125 * tykeriah, 94.17047119140625 * tykeriah, 40.000030517578125 * tykeriah, 94.17047119140625 * tykeriah);
  sigel.bezierCurveTo(33.000030517578125 * tykeriah, 94.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 94.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 86.17047119140625 * tykeriah);
  sigel.bezierCurveTo(34.000030517578125 * tykeriah, 69.67047119140625 * tykeriah, 34.000030517578125 * tykeriah, 69.67047119140625 * tykeriah, 34.000030517578125 * tykeriah, 53.17047119140625 * tykeriah);
  sigel.bezierCurveTo(33.000030517578125 * tykeriah, 47.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 47.17047119140625 * tykeriah, 40.000030517578125 * tykeriah, 42.17047119140625 * tykeriah);
  sigel.closePath();
  fill_path(sigel, noviah[0], noviah[1], 4 * tykeriah);
  sigel.beginPath();
  sigel.lineCap = "round";
  sigel.lineJoin = "round";
  sigel.moveTo(51.000030517578125 * tykeriah, 37.9886474609375 * tykeriah);
  sigel.bezierCurveTo(51.000030517578125 * tykeriah, 61.9886474609375 * tykeriah, 51.000030517578125 * tykeriah, 61.9886474609375 * tykeriah, 51.000030517578125 * tykeriah, 85.9886474609375 * tykeriah);
  sigel.bezierCurveTo(75.50003051757812 * tykeriah, 85.9886474609375 * tykeriah, 75.50003051757812 * tykeriah, 85.9886474609375 * tykeriah, 100.00003051757812 * tykeriah, 85.9886474609375 * tykeriah);
  sigel.bezierCurveTo(100.00003051757812 * tykeriah, 61.9886474609375 * tykeriah, 100.00003051757812 * tykeriah, 61.9886474609375 * tykeriah, 100.00003051757812 * tykeriah, 37.9886474609375 * tykeriah);
  sigel.bezierCurveTo(76.00003051757812 * tykeriah, 37.9886474609375 * tykeriah, 76.00003051757812 * tykeriah, 37.9886474609375 * tykeriah, 52.000030517578125 * tykeriah, 37.9886474609375 * tykeriah);
  sigel.closePath();
  fill_path(sigel, noviah[1], noviah[2], 4 * tykeriah);
  sigel.beginPath();
  sigel.lineCap = "round";
  sigel.lineJoin = "round";
  sigel.moveTo(99.00003051757812 * tykeriah, 38.9886474609375 * tykeriah);
  sigel.bezierCurveTo(93.50003051757812 * tykeriah, 44.9886474609375 * tykeriah, 93.50003051757812 * tykeriah, 44.9886474609375 * tykeriah, 88.00003051757812 * tykeriah, 50.9886474609375 * tykeriah);
  sigel.bezierCurveTo(88.00003051757812 * tykeriah, 72.4886474609375 * tykeriah, 88.00003051757812 * tykeriah, 72.4886474609375 * tykeriah, 88.00003051757812 * tykeriah, 93.9886474609375 * tykeriah);
  sigel.bezierCurveTo(94.00003051757812 * tykeriah, 90.4886474609375 * tykeriah, 94.00003051757812 * tykeriah, 90.4886474609375 * tykeriah, 100.00003051757812 * tykeriah, 86.9886474609375 * tykeriah);
  sigel.closePath();
  fill_path(sigel, noviah[1], noviah[2], 4 * tykeriah);
  sigel.beginPath();
  sigel.lineCap = "round";
  sigel.lineJoin = "round";
  sigel.moveTo(87.00003051757812 * tykeriah, 49.625 * tykeriah);
  sigel.bezierCurveTo(61.000030517578125 * tykeriah, 49.625 * tykeriah, 61.000030517578125 * tykeriah, 49.625 * tykeriah, 35.000030517578125 * tykeriah, 49.625 * tykeriah);
  sigel.bezierCurveTo(35.000030517578125 * tykeriah, 70.625 * tykeriah, 35.000030517578125 * tykeriah, 70.625 * tykeriah, 35.000030517578125 * tykeriah, 91.625 * tykeriah);
  sigel.bezierCurveTo(60.500030517578125 * tykeriah, 91.625 * tykeriah, 60.500030517578125 * tykeriah, 91.625 * tykeriah, 86.00003051757812 * tykeriah, 91.625 * tykeriah);
  sigel.bezierCurveTo(86.50003051757812 * tykeriah, 70.625 * tykeriah, 86.50003051757812 * tykeriah, 70.625 * tykeriah, 87.00003051757812 * tykeriah, 49.625 * tykeriah);
  sigel.closePath();
  fill_path(sigel, noviah[1], noviah[3], 4 * tykeriah);
  sigel.beginPath();
  sigel.lineCap = "round";
  sigel.lineJoin = "round";
  sigel.moveTo(47.000030517578125 * tykeriah, 36.625 * tykeriah);
  sigel.bezierCurveTo(73.00003051757812 * tykeriah, 37.125 * tykeriah, 73.00003051757812 * tykeriah, 37.125 * tykeriah, 99.00003051757812 * tykeriah, 37.625 * tykeriah);
  sigel.bezierCurveTo(93.50003051757812 * tykeriah, 44.125 * tykeriah, 93.50003051757812 * tykeriah, 44.125 * tykeriah, 88.00003051757812 * tykeriah, 50.625 * tykeriah);
  sigel.bezierCurveTo(60.500030517578125 * tykeriah, 50.125 * tykeriah, 60.500030517578125 * tykeriah, 50.125 * tykeriah, 33.000030517578125 * tykeriah, 49.625 * tykeriah);
  sigel.closePath();
  fill_path(sigel, noviah[1], noviah[3], 4 * tykeriah);
  sigel.beginPath();
  sigel.lineCap = "round";
  sigel.lineJoin = "round";
  sigel.moveTo(53.000030517578125 * tykeriah, 52.625 * tykeriah);
  sigel.bezierCurveTo(40.000030517578125 * tykeriah, 54.625 * tykeriah, 39.000030517578125 * tykeriah, 59.625 * tykeriah, 40.000030517578125 * tykeriah, 67.625 * tykeriah);
  sigel.bezierCurveTo(45.000030517578125 * tykeriah, 59.625 * tykeriah, 48.000030517578125 * tykeriah, 58.625 * tykeriah, 54.000030517578125 * tykeriah, 53.625 * tykeriah);
  sigel.closePath();
  fill_path(sigel, noviah[3]);
  sigel.globalAlpha = 1;
  sigel.beginPath();
  sigel.lineCap = "round";
  sigel.lineJoin = "round";
  sigel.moveTo(42.000030517578125 * tykeriah, 41.17047119140625 * tykeriah);
  sigel.bezierCurveTo(45.000030517578125 * tykeriah, 38.17047119140625 * tykeriah, 49.000030517578125 * tykeriah, 37.17047119140625 * tykeriah, 62.000030517578125 * tykeriah, 38.17047119140625 * tykeriah);
  sigel.bezierCurveTo(78.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 78.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 94.00003051757812 * tykeriah, 38.17047119140625 * tykeriah);
  sigel.bezierCurveTo(100.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 102.00003051757812 * tykeriah, 38.17047119140625 * tykeriah, 101.00003051757812 * tykeriah, 47.17047119140625 * tykeriah);
  sigel.bezierCurveTo(101.00003051757812 * tykeriah, 63.67047119140625 * tykeriah, 101.00003051757812 * tykeriah, 63.67047119140625 * tykeriah, 101.00003051757812 * tykeriah, 80.17047119140625 * tykeriah);
  sigel.bezierCurveTo(102.00003051757812 * tykeriah, 84.17047119140625 * tykeriah, 100.00003051757812 * tykeriah, 86.17047119140625 * tykeriah, 95.00003051757812 * tykeriah, 88.17047119140625 * tykeriah);
  sigel.bezierCurveTo(84.00003051757812 * tykeriah, 94.17047119140625 * tykeriah, 89.00003051757812 * tykeriah, 94.17047119140625 * tykeriah, 79.00003051757812 * tykeriah, 94.17047119140625 * tykeriah);
  sigel.bezierCurveTo(59.500030517578125 * tykeriah, 94.17047119140625 * tykeriah, 59.500030517578125 * tykeriah, 94.17047119140625 * tykeriah, 40.000030517578125 * tykeriah, 94.17047119140625 * tykeriah);
  sigel.bezierCurveTo(33.000030517578125 * tykeriah, 94.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 94.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 86.17047119140625 * tykeriah);
  sigel.bezierCurveTo(34.000030517578125 * tykeriah, 69.67047119140625 * tykeriah, 34.000030517578125 * tykeriah, 69.67047119140625 * tykeriah, 34.000030517578125 * tykeriah, 53.17047119140625 * tykeriah);
  sigel.bezierCurveTo(33.000030517578125 * tykeriah, 47.17047119140625 * tykeriah, 34.000030517578125 * tykeriah, 47.17047119140625 * tykeriah, 40.000030517578125 * tykeriah, 42.17047119140625 * tykeriah);
  sigel.closePath();
  fill_path(sigel, undefined, noviah[3], 4 * tykeriah);
  return erskine;
}
function create_lake_edge(yuan, raydene, bevely) {
  var livingston = document.createElement("canvas"), surrey = livingston.getContext("2d");
  if (bevely == 0) {
    livingston.width = 543 * yuan;
    livingston.height = 393 * yuan;
    surrey.beginPath();
    surrey.lineCap = "round";
    surrey.lineJoin = "round";
    surrey.moveTo(164.23297119140625 * yuan, 72.80398559570312 * yuan);
    surrey.bezierCurveTo(289.23297119140625 * yuan, 41.803985595703125 * yuan, 413.23297119140625 * yuan, 86.80398559570312 * yuan, 441.23297119140625 * yuan, 105.80398559570312 * yuan);
    surrey.bezierCurveTo(513.2329711914062 * yuan, 149.80398559570312 * yuan, 475.23297119140625 * yuan, 224.80398559570312 * yuan, 451.23297119140625 * yuan, 258.8039855957031 * yuan);
    surrey.bezierCurveTo(410.23297119140625 * yuan, 315.8039855957031 * yuan, 380.23297119140625 * yuan, 314.8039855957031 * yuan, 289.23297119140625 * yuan, 320.8039855957031 * yuan);
    surrey.bezierCurveTo(160.23297119140625 * yuan, 329.8039855957031 * yuan, 102.23297119140625 * yuan, 312.8039855957031 * yuan, 72.23297119140625 * yuan, 258.8039855957031 * yuan);
    surrey.bezierCurveTo(32.23297119140625 * yuan, 156.80398559570312 * yuan, 93.23297119140625 * yuan, 92.80398559570312 * yuan, 164.23297119140625 * yuan, 72.80398559570312 * yuan);
    surrey.closePath();
    fill_path(surrey, raydene[0]);
  } else {
    if (bevely == 1) {
      livingston.width = 543 * yuan;
      livingston.height = 470 * yuan;
      surrey.beginPath();
      surrey.lineCap = "round";
      surrey.lineJoin = "round";
      surrey.moveTo(238.23297119140625 * yuan, 34.622161865234375 * yuan);
      surrey.bezierCurveTo(423.23297119140625 * yuan, 21.622161865234375 * yuan, 474.23297119140625 * yuan, 96.62216186523438 * yuan, 499.23297119140625 * yuan, 167.62216186523438 * yuan);
      surrey.bezierCurveTo(536.2329711914062 * yuan, 288.6221618652344 * yuan, 487.23297119140625 * yuan, 367.6221618652344 * yuan, 403.23297119140625 * yuan, 412.6221618652344 * yuan);
      surrey.bezierCurveTo(287.23297119140625 * yuan, 466.6221618652344 * yuan, 127.23297119140625 * yuan, 424.6221618652344 * yuan, 50.23297119140625 * yuan, 318.6221618652344 * yuan);
      surrey.bezierCurveTo(-0.76702880859375 * yuan, 239.62216186523438 * yuan, 30.23297119140625 * yuan, 110.62216186523438 * yuan, 73.23297119140625 * yuan, 77.62216186523438 * yuan);
      surrey.bezierCurveTo(128.23297119140625 * yuan, 29.622161865234375 * yuan, 202.23297119140625 * yuan, 40.622161865234375 * yuan, 238.23297119140625 * yuan, 34.622161865234375 * yuan);
      surrey.closePath();
      fill_path(surrey, raydene[0]);
    } else {
      livingston.width = 543 * yuan;
      livingston.height = 470 * yuan;
      surrey.beginPath();
      surrey.lineCap = "round";
      surrey.lineJoin = "round";
      surrey.moveTo(268.23297119140625 * yuan, 23.349441528320312 * yuan);
      surrey.bezierCurveTo(424.23297119140625 * yuan, -0.6505584716796875 * yuan, 524.2329711914062 * yuan, 44.34944152832031 * yuan, 519.2329711914062 * yuan, 186.3494415283203 * yuan);
      surrey.bezierCurveTo(515.2329711914062 * yuan, 341.3494415283203 * yuan, 431.23297119140625 * yuan, 409.3494415283203 * yuan, 357.23297119140625 * yuan, 442.3494415283203 * yuan);
      surrey.bezierCurveTo(278.23297119140625 * yuan, 469.3494415283203 * yuan, 144.23297119140625 * yuan, 460.3494415283203 * yuan, 51.23297119140625 * yuan, 348.3494415283203 * yuan);
      surrey.bezierCurveTo(3.23297119140625 * yuan, 274.3494415283203 * yuan, 45.23297119140625 * yuan, 87.34944152832031 * yuan, 268.23297119140625 * yuan, 23.349441528320312 * yuan);
      surrey.closePath();
      fill_path(surrey, raydene[0]);
    }
  }
  return livingston;
}
function create_lake_deep(siraya, shantora, ehren) {
  var keunte = document.createElement("canvas"), stephanee = keunte.getContext("2d");
  if (ehren == 0) {
    keunte.width = 543 * siraya;
    keunte.height = 393 * siraya;
    stephanee.beginPath();
    stephanee.lineCap = "round";
    stephanee.lineJoin = "round";
    stephanee.moveTo(109.5 * siraya, 154.046875 * siraya);
    stephanee.bezierCurveTo(143.5 * siraya, 96.046875 * siraya, 208.5 * siraya, 92.046875 * siraya, 288.5 * siraya, 97.046875 * siraya);
    stephanee.bezierCurveTo(357.5 * siraya, 104.046875 * siraya, 414.5 * siraya, 132.046875 * siraya, 422.5 * siraya, 166.046875 * siraya);
    stephanee.bezierCurveTo(431.5 * siraya, 192.046875 * siraya, 400.5 * siraya, 261.046875 * siraya, 332.5 * siraya, 271.046875 * siraya);
    stephanee.bezierCurveTo(272.5 * siraya, 279.046875 * siraya, 159.5 * siraya, 285.046875 * siraya, 126.5 * siraya, 260.046875 * siraya);
    stephanee.bezierCurveTo(99.5 * siraya, 238.046875 * siraya, 95.5 * siraya, 183.046875 * siraya, 109.5 * siraya, 154.046875 * siraya);
    stephanee.closePath();
    fill_path(stephanee, shantora[0]);
  } else {
    if (ehren == 1) {
      keunte.width = 543 * siraya;
      keunte.height = 470 * siraya;
      stephanee.beginPath();
      stephanee.lineCap = "round";
      stephanee.lineJoin = "round";
      stephanee.moveTo(216.23297119140625 * siraya, 100.34944152832031 * siraya);
      stephanee.bezierCurveTo(349.23297119140625 * siraya, 110.34944152832031 * siraya, 422.23297119140625 * siraya, 142.3494415283203 * siraya, 434.23297119140625 * siraya, 194.3494415283203 * siraya);
      stephanee.bezierCurveTo(451.23297119140625 * siraya, 268.3494415283203 * siraya, 397.23297119140625 * siraya, 367.3494415283203 * siraya, 313.23297119140625 * siraya, 351.3494415283203 * siraya);
      stephanee.bezierCurveTo(148.23297119140625 * siraya, 330.3494415283203 * siraya, 106.23297119140625 * siraya, 319.3494415283203 * siraya, 87.23297119140625 * siraya, 248.3494415283203 * siraya);
      stephanee.bezierCurveTo(63.23297119140625 * siraya, 164.3494415283203 * siraya, 102.23297119140625 * siraya, 90.34944152832031 * siraya, 216.23297119140625 * siraya, 100.34944152832031 * siraya);
      stephanee.closePath();
      fill_path(stephanee, shantora[0]);
    } else {
      keunte.width = 543 * siraya;
      keunte.height = 470 * siraya;
      stephanee.beginPath();
      stephanee.lineCap = "round";
      stephanee.lineJoin = "round";
      stephanee.moveTo(155.23297119140625 * siraya, 126.71307373046875 * siraya);
      stephanee.bezierCurveTo(232.23297119140625 * siraya, 76.71307373046875 * siraya, 340.23297119140625 * siraya, 67.71307373046875 * siraya, 411.23297119140625 * siraya, 106.71307373046875 * siraya);
      stephanee.bezierCurveTo(458.23297119140625 * siraya, 131.71307373046875 * siraya, 465.23297119140625 * siraya, 280.71307373046875 * siraya, 353.23297119140625 * siraya, 363.71307373046875 * siraya);
      stephanee.bezierCurveTo(299.23297119140625 * siraya, 404.71307373046875 * siraya, 143.23297119140625 * siraya, 415.71307373046875 * siraya, 88.23297119140625 * siraya, 327.71307373046875 * siraya);
      stephanee.bezierCurveTo(48.23297119140625 * siraya, 256.71307373046875 * siraya, 93.23297119140625 * siraya, 171.71307373046875 * siraya, 155.23297119140625 * siraya, 126.71307373046875 * siraya);
      stephanee.closePath();
      fill_path(stephanee, shantora[0]);
    }
  }
  return keunte;
}
function create_lake(donnesha, tjay, saarth) {
  var tamra = document.createElement("canvas"), earon = tamra.getContext("2d");
  if (saarth == 0) {
    tamra.width = 543 * donnesha;
    tamra.height = 393 * donnesha;
    earon.beginPath();
    earon.lineCap = "round";
    earon.lineJoin = "round";
    earon.moveTo(196.23297119140625 * donnesha, 77.8948974609375 * donnesha);
    earon.bezierCurveTo(276.23297119140625 * donnesha, 69.8948974609375 * donnesha, 360.23297119140625 * donnesha, 87.8948974609375 * donnesha, 431.23297119140625 * donnesha, 121.8948974609375 * donnesha);
    earon.bezierCurveTo(474.23297119140625 * donnesha, 146.8948974609375 * donnesha, 463.23297119140625 * donnesha, 184.8948974609375 * donnesha, 437.23297119140625 * donnesha, 235.8948974609375 * donnesha);
    earon.bezierCurveTo(413.23297119140625 * donnesha, 277.8948974609375 * donnesha, 383.23297119140625 * donnesha, 289.8948974609375 * donnesha, 303.23297119140625 * donnesha, 289.8948974609375 * donnesha);
    earon.bezierCurveTo(178.23297119140625 * donnesha, 292.8948974609375 * donnesha, 127.23297119140625 * donnesha, 301.8948974609375 * donnesha, 92.23297119140625 * donnesha, 268.8948974609375 * donnesha);
    earon.bezierCurveTo(55.23297119140625 * donnesha, 234.8948974609375 * donnesha, 59.23297119140625 * donnesha, 147.8948974609375 * donnesha, 100.23297119140625 * donnesha, 112.8948974609375 * donnesha);
    earon.bezierCurveTo(133.23297119140625 * donnesha, 83.8948974609375 * donnesha, 167.23297119140625 * donnesha, 82.8948974609375 * donnesha, 196.23297119140625 * donnesha, 77.8948974609375 * donnesha);
    earon.closePath();
    fill_path(earon, tjay[0]);
  } else {
    if (saarth == 1) {
      tamra.width = 543 * donnesha;
      tamra.height = 470 * donnesha;
      earon.beginPath();
      earon.lineCap = "round";
      earon.lineJoin = "round";
      earon.moveTo(285.23297119140625 * donnesha, 51.803985595703125 * donnesha);
      earon.bezierCurveTo(408.23297119140625 * donnesha, 57.803985595703125 * donnesha, 463.23297119140625 * donnesha, 107.80398559570312 * donnesha, 480.23297119140625 * donnesha, 183.80398559570312 * donnesha);
      earon.bezierCurveTo(500.23297119140625 * donnesha, 282.8039855957031 * donnesha, 473.23297119140625 * donnesha, 351.8039855957031 * donnesha, 373.23297119140625 * donnesha, 390.8039855957031 * donnesha);
      earon.bezierCurveTo(286.23297119140625 * donnesha, 420.8039855957031 * donnesha, 173.23297119140625 * donnesha, 396.8039855957031 * donnesha, 86.23297119140625 * donnesha, 331.8039855957031 * donnesha);
      earon.bezierCurveTo(13.23297119140625 * donnesha, 267.8039855957031 * donnesha, 19.23297119140625 * donnesha, 79.80398559570312 * donnesha, 143.23297119140625 * donnesha, 50.803985595703125 * donnesha);
      earon.bezierCurveTo(175.23297119140625 * donnesha, 41.803985595703125 * donnesha, 263.23297119140625 * donnesha, 51.803985595703125 * donnesha, 285.23297119140625 * donnesha, 51.803985595703125 * donnesha);
      earon.closePath();
      fill_path(earon, tjay[0]);
    } else {
      tamra.width = 543 * donnesha;
      tamra.height = 470 * donnesha;
      earon.beginPath();
      earon.lineCap = "round";
      earon.lineJoin = "round";
      earon.moveTo(492.23297119140625 * donnesha, 170.0767059326172 * donnesha);
      earon.bezierCurveTo(493.23297119140625 * donnesha, 300.16761779785156 * donnesha, 411.23297119140625 * donnesha, 382.16761779785156 * donnesha, 321.23297119140625 * donnesha, 419.16761779785156 * donnesha);
      earon.bezierCurveTo(251.23297119140625 * donnesha, 444.16761779785156 * donnesha, 125.23297119140625 * donnesha, 422.16761779785156 * donnesha, 63.23297119140625 * donnesha, 347.16761779785156 * donnesha);
      earon.bezierCurveTo(22.23297119140625 * donnesha, 282.16761779785156 * donnesha, 53.23297119140625 * donnesha, 152.16761779785156 * donnesha, 179.23297119140625 * donnesha, 79.16761779785156 * donnesha);
      earon.bezierCurveTo(237.23297119140625 * donnesha, 46.16761779785156 * donnesha, 326.23297119140625 * donnesha, 27.167617797851562 * donnesha, 409.23297119140625 * donnesha, 50.16761779785156 * donnesha);
      earon.bezierCurveTo(470.23297119140625 * donnesha, 66.16761779785156 * donnesha, 493.23297119140625 * donnesha, 104.16761779785156 * donnesha, 492.23297119140625 * donnesha, 170.0767059326172 * donnesha);
      earon.closePath();
      fill_path(earon, tjay[0]);
    }
  }
  return tamra;
}
function create_shingle(elijia, decklynn, deprince) {
  var cheenue = document.createElement("canvas");
  var ece = cheenue.getContext("2d");
  if (deprince == 0) {
    cheenue.width = 543 * elijia;
    cheenue.height = 393 * elijia;
    ece.translate(40 * elijia, 60 * elijia);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(176 * elijia, 10.25 * elijia);
    ece.bezierCurveTo(188 * elijia, 16.25 * elijia, 187 * elijia, 25.25 * elijia, 183 * elijia, 26.25 * elijia);
    ece.bezierCurveTo(177 * elijia, 26.25 * elijia, 175 * elijia, 21.25 * elijia, 173 * elijia, 19.25 * elijia);
    ece.bezierCurveTo(170 * elijia, 14.25 * elijia, 170 * elijia, 10.25 * elijia, 176 * elijia, 10.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(176 * elijia, 10.25 * elijia);
    ece.bezierCurveTo(188 * elijia, 16.25 * elijia, 187 * elijia, 25.25 * elijia, 183 * elijia, 26.25 * elijia);
    ece.bezierCurveTo(177 * elijia, 26.25 * elijia, 175 * elijia, 21.25 * elijia, 173 * elijia, 19.25 * elijia);
    ece.bezierCurveTo(170 * elijia, 14.25 * elijia, 170 * elijia, 10.25 * elijia, 176 * elijia, 10.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(274 * elijia, 8 * elijia);
    ece.bezierCurveTo(276 * elijia, 12 * elijia, 271 * elijia, 23 * elijia, 266 * elijia, 20 * elijia);
    ece.bezierCurveTo(264 * elijia, 19 * elijia, 262 * elijia, 15 * elijia, 267 * elijia, 9 * elijia);
    ece.bezierCurveTo(271 * elijia, 5 * elijia, 274 * elijia, 5 * elijia, 274 * elijia, 8 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(274 * elijia, 8 * elijia);
    ece.bezierCurveTo(276 * elijia, 12 * elijia, 271 * elijia, 23 * elijia, 266 * elijia, 20 * elijia);
    ece.bezierCurveTo(264 * elijia, 19 * elijia, 262 * elijia, 15 * elijia, 267 * elijia, 9 * elijia);
    ece.bezierCurveTo(271 * elijia, 5 * elijia, 274 * elijia, 5 * elijia, 274 * elijia, 8 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(282 * elijia, 23.25 * elijia);
    ece.bezierCurveTo(275 * elijia, 25.25 * elijia, 272 * elijia, 29.25 * elijia, 274 * elijia, 36.25 * elijia);
    ece.bezierCurveTo(277 * elijia, 40.25 * elijia, 280 * elijia, 37.25 * elijia, 283 * elijia, 32.25 * elijia);
    ece.bezierCurveTo(286 * elijia, 26.25 * elijia, 286 * elijia, 25.25 * elijia, 282 * elijia, 23.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(282 * elijia, 23.25 * elijia);
    ece.bezierCurveTo(275 * elijia, 25.25 * elijia, 272 * elijia, 29.25 * elijia, 274 * elijia, 36.25 * elijia);
    ece.bezierCurveTo(277 * elijia, 40.25 * elijia, 280 * elijia, 37.25 * elijia, 283 * elijia, 32.25 * elijia);
    ece.bezierCurveTo(286 * elijia, 26.25 * elijia, 286 * elijia, 25.25 * elijia, 282 * elijia, 23.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(343.75 * elijia, 18.25 * elijia);
    ece.bezierCurveTo(346.75 * elijia, 27.25 * elijia, 346.75 * elijia, 32.25 * elijia, 339.75 * elijia, 31.25 * elijia);
    ece.bezierCurveTo(336.75 * elijia, 29.25 * elijia, 335.75 * elijia, 27.25 * elijia, 336.75 * elijia, 22.25 * elijia);
    ece.bezierCurveTo(336.75 * elijia, 16.25 * elijia, 338.75 * elijia, 15.25 * elijia, 343.75 * elijia, 18.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(343.75 * elijia, 18.25 * elijia);
    ece.bezierCurveTo(346.75 * elijia, 27.25 * elijia, 346.75 * elijia, 32.25 * elijia, 339.75 * elijia, 31.25 * elijia);
    ece.bezierCurveTo(336.75 * elijia, 29.25 * elijia, 335.75 * elijia, 27.25 * elijia, 336.75 * elijia, 22.25 * elijia);
    ece.bezierCurveTo(336.75 * elijia, 16.25 * elijia, 338.75 * elijia, 15.25 * elijia, 343.75 * elijia, 18.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(364.75 * elijia, 22.25 * elijia);
    ece.bezierCurveTo(368.75 * elijia, 27.25 * elijia, 362.75 * elijia, 36.25 * elijia, 356.75 * elijia, 39.25 * elijia);
    ece.bezierCurveTo(346.75 * elijia, 43.25 * elijia, 346.75 * elijia, 34.25 * elijia, 348.75 * elijia, 31.25 * elijia);
    ece.bezierCurveTo(352.75 * elijia, 23.25 * elijia, 360.75 * elijia, 20.25 * elijia, 363.75 * elijia, 22.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(364.75 * elijia, 22.25 * elijia);
    ece.bezierCurveTo(368.75 * elijia, 27.25 * elijia, 362.75 * elijia, 36.25 * elijia, 356.75 * elijia, 39.25 * elijia);
    ece.bezierCurveTo(346.75 * elijia, 43.25 * elijia, 346.75 * elijia, 34.25 * elijia, 348.75 * elijia, 31.25 * elijia);
    ece.bezierCurveTo(352.75 * elijia, 23.25 * elijia, 360.75 * elijia, 20.25 * elijia, 363.75 * elijia, 22.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(350.75 * elijia, 52.25 * elijia);
    ece.bezierCurveTo(352.75 * elijia, 45.25 * elijia, 360.75 * elijia, 43.25 * elijia, 368.75 * elijia, 52.25 * elijia);
    ece.bezierCurveTo(369.75 * elijia, 58.25 * elijia, 366.75 * elijia, 59.25 * elijia, 357.75 * elijia, 57.25 * elijia);
    ece.bezierCurveTo(350.75 * elijia, 56.25 * elijia, 352.75 * elijia, 55.25 * elijia, 350.75 * elijia, 52.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(350.75 * elijia, 52.25 * elijia);
    ece.bezierCurveTo(352.75 * elijia, 45.25 * elijia, 360.75 * elijia, 43.25 * elijia, 368.75 * elijia, 52.25 * elijia);
    ece.bezierCurveTo(369.75 * elijia, 58.25 * elijia, 366.75 * elijia, 59.25 * elijia, 357.75 * elijia, 57.25 * elijia);
    ece.bezierCurveTo(350.75 * elijia, 56.25 * elijia, 352.75 * elijia, 55.25 * elijia, 350.75 * elijia, 52.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(421.75 * elijia, 81.25 * elijia);
    ece.bezierCurveTo(432.75 * elijia, 85.25 * elijia, 431.75 * elijia, 89.25 * elijia, 426.75 * elijia, 93.25 * elijia);
    ece.bezierCurveTo(418.75 * elijia, 95.25 * elijia, 414.75 * elijia, 93.25 * elijia, 412.75 * elijia, 89.25 * elijia);
    ece.bezierCurveTo(411.75 * elijia, 84.25 * elijia, 413.75 * elijia, 81.25 * elijia, 421.75 * elijia, 81.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(421.75 * elijia, 81.25 * elijia);
    ece.bezierCurveTo(432.75 * elijia, 85.25 * elijia, 431.75 * elijia, 89.25 * elijia, 426.75 * elijia, 93.25 * elijia);
    ece.bezierCurveTo(418.75 * elijia, 95.25 * elijia, 414.75 * elijia, 93.25 * elijia, 412.75 * elijia, 89.25 * elijia);
    ece.bezierCurveTo(411.75 * elijia, 84.25 * elijia, 413.75 * elijia, 81.25 * elijia, 421.75 * elijia, 81.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(432.75 * elijia, 105.25 * elijia);
    ece.bezierCurveTo(430.75 * elijia, 115.25 * elijia, 411.75 * elijia, 130.25 * elijia, 408.75 * elijia, 117.25 * elijia);
    ece.bezierCurveTo(407.75 * elijia, 106.25 * elijia, 414.75 * elijia, 103.25 * elijia, 421.75 * elijia, 101.25 * elijia);
    ece.bezierCurveTo(430.75 * elijia, 100.25 * elijia, 432.75 * elijia, 101.25 * elijia, 432.75 * elijia, 105.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(432.75 * elijia, 105.25 * elijia);
    ece.bezierCurveTo(430.75 * elijia, 115.25 * elijia, 411.75 * elijia, 130.25 * elijia, 408.75 * elijia, 117.25 * elijia);
    ece.bezierCurveTo(407.75 * elijia, 106.25 * elijia, 414.75 * elijia, 103.25 * elijia, 421.75 * elijia, 101.25 * elijia);
    ece.bezierCurveTo(430.75 * elijia, 100.25 * elijia, 432.75 * elijia, 101.25 * elijia, 432.75 * elijia, 105.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(422.75 * elijia, 153.25 * elijia);
    ece.bezierCurveTo(437.75 * elijia, 155.25 * elijia, 442.75 * elijia, 158.25 * elijia, 436.75 * elijia, 165.25 * elijia);
    ece.bezierCurveTo(431.75 * elijia, 170.25 * elijia, 424.75 * elijia, 167.25 * elijia, 419.75 * elijia, 163.25 * elijia);
    ece.bezierCurveTo(413.75 * elijia, 157.25 * elijia, 415.75 * elijia, 153.25 * elijia, 422.75 * elijia, 153.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(422.75 * elijia, 153.25 * elijia);
    ece.bezierCurveTo(437.75 * elijia, 155.25 * elijia, 442.75 * elijia, 158.25 * elijia, 436.75 * elijia, 165.25 * elijia);
    ece.bezierCurveTo(431.75 * elijia, 170.25 * elijia, 424.75 * elijia, 167.25 * elijia, 419.75 * elijia, 163.25 * elijia);
    ece.bezierCurveTo(413.75 * elijia, 157.25 * elijia, 415.75 * elijia, 153.25 * elijia, 422.75 * elijia, 153.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(409.75 * elijia, 158.25 * elijia);
    ece.bezierCurveTo(409.75 * elijia, 168.25 * elijia, 401.75 * elijia, 172.25 * elijia, 397.75 * elijia, 167.25 * elijia);
    ece.bezierCurveTo(394.75 * elijia, 159.25 * elijia, 407.75 * elijia, 150.25 * elijia, 408.75 * elijia, 158.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(409.75 * elijia, 158.25 * elijia);
    ece.bezierCurveTo(409.75 * elijia, 168.25 * elijia, 401.75 * elijia, 172.25 * elijia, 397.75 * elijia, 167.25 * elijia);
    ece.bezierCurveTo(394.75 * elijia, 159.25 * elijia, 407.75 * elijia, 150.25 * elijia, 408.75 * elijia, 158.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(204 * elijia, 238.25 * elijia);
    ece.bezierCurveTo(204 * elijia, 248.25 * elijia, 184 * elijia, 255.25 * elijia, 180 * elijia, 247.25 * elijia);
    ece.bezierCurveTo(177 * elijia, 241.25 * elijia, 187 * elijia, 236.25 * elijia, 192 * elijia, 235.25 * elijia);
    ece.bezierCurveTo(201 * elijia, 233.25 * elijia, 204 * elijia, 233.25 * elijia, 204 * elijia, 238.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(204 * elijia, 238.25 * elijia);
    ece.bezierCurveTo(204 * elijia, 248.25 * elijia, 184 * elijia, 255.25 * elijia, 180 * elijia, 247.25 * elijia);
    ece.bezierCurveTo(177 * elijia, 241.25 * elijia, 187 * elijia, 236.25 * elijia, 192 * elijia, 235.25 * elijia);
    ece.bezierCurveTo(201 * elijia, 233.25 * elijia, 204 * elijia, 233.25 * elijia, 204 * elijia, 238.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(208 * elijia, 246.25 * elijia);
    ece.bezierCurveTo(202 * elijia, 255.25 * elijia, 204 * elijia, 258.25 * elijia, 212 * elijia, 255.25 * elijia);
    ece.bezierCurveTo(217 * elijia, 250.25 * elijia, 217 * elijia, 248.25 * elijia, 216 * elijia, 244.25 * elijia);
    ece.bezierCurveTo(210 * elijia, 241.25 * elijia, 209 * elijia, 245.25 * elijia, 208 * elijia, 246.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(208 * elijia, 246.25 * elijia);
    ece.bezierCurveTo(202 * elijia, 255.25 * elijia, 204 * elijia, 258.25 * elijia, 212 * elijia, 255.25 * elijia);
    ece.bezierCurveTo(217 * elijia, 250.25 * elijia, 217 * elijia, 248.25 * elijia, 216 * elijia, 244.25 * elijia);
    ece.bezierCurveTo(210 * elijia, 241.25 * elijia, 209 * elijia, 245.25 * elijia, 208 * elijia, 246.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(197 * elijia, 258.25 * elijia);
    ece.bezierCurveTo(194 * elijia, 265.25 * elijia, 186 * elijia, 270.25 * elijia, 185 * elijia, 262.25 * elijia);
    ece.bezierCurveTo(187 * elijia, 255.25 * elijia, 191 * elijia, 252.25 * elijia, 195 * elijia, 253.25 * elijia);
    ece.bezierCurveTo(198 * elijia, 256.25 * elijia, 197 * elijia, 257.25 * elijia, 197 * elijia, 258.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(197 * elijia, 258.25 * elijia);
    ece.bezierCurveTo(194 * elijia, 265.25 * elijia, 186 * elijia, 270.25 * elijia, 185 * elijia, 262.25 * elijia);
    ece.bezierCurveTo(187 * elijia, 255.25 * elijia, 191 * elijia, 252.25 * elijia, 195 * elijia, 253.25 * elijia);
    ece.bezierCurveTo(198 * elijia, 256.25 * elijia, 197 * elijia, 257.25 * elijia, 197 * elijia, 258.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(24 * elijia, 111.25 * elijia);
    ece.bezierCurveTo(32 * elijia, 115.25 * elijia, 29 * elijia, 123.25 * elijia, 22 * elijia, 133.25 * elijia);
    ece.bezierCurveTo(15 * elijia, 140.25 * elijia, 7 * elijia, 137.25 * elijia, 9 * elijia, 125.25 * elijia);
    ece.bezierCurveTo(12 * elijia, 114.25 * elijia, 20 * elijia, 110.25 * elijia, 24 * elijia, 111.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(24 * elijia, 111.25 * elijia);
    ece.bezierCurveTo(32 * elijia, 115.25 * elijia, 29 * elijia, 123.25 * elijia, 22 * elijia, 133.25 * elijia);
    ece.bezierCurveTo(15 * elijia, 140.25 * elijia, 7 * elijia, 137.25 * elijia, 9 * elijia, 125.25 * elijia);
    ece.bezierCurveTo(12 * elijia, 114.25 * elijia, 20 * elijia, 110.25 * elijia, 24 * elijia, 111.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(33 * elijia, 137.25 * elijia);
    ece.bezierCurveTo(41 * elijia, 142.25 * elijia, 40 * elijia, 145.25 * elijia, 35 * elijia, 147.25 * elijia);
    ece.bezierCurveTo(22 * elijia, 147.25 * elijia, 18 * elijia, 144.25 * elijia, 22 * elijia, 138.25 * elijia);
    ece.bezierCurveTo(26 * elijia, 133.25 * elijia, 31 * elijia, 136.25 * elijia, 33 * elijia, 137.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(33 * elijia, 137.25 * elijia);
    ece.bezierCurveTo(41 * elijia, 142.25 * elijia, 40 * elijia, 145.25 * elijia, 35 * elijia, 147.25 * elijia);
    ece.bezierCurveTo(22 * elijia, 147.25 * elijia, 18 * elijia, 144.25 * elijia, 22 * elijia, 138.25 * elijia);
    ece.bezierCurveTo(26 * elijia, 133.25 * elijia, 31 * elijia, 136.25 * elijia, 33 * elijia, 137.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
    ece.globalAlpha = .5;
    ece.translate(3 * elijia, 3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(36 * elijia, 187.25 * elijia);
    ece.bezierCurveTo(25 * elijia, 198.25 * elijia, 19 * elijia, 193.25 * elijia, 23 * elijia, 187.25 * elijia);
    ece.bezierCurveTo(26 * elijia, 178.25 * elijia, 32 * elijia, 173.25 * elijia, 38 * elijia, 175.25 * elijia);
    ece.bezierCurveTo(44 * elijia, 180.25 * elijia, 39 * elijia, 186.25 * elijia, 36 * elijia, 187.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[0]);
    ece.globalAlpha = 1;
    ece.translate(-3 * elijia, -3 * elijia);
    ece.beginPath();
    ece.lineCap = "round";
    ece.lineJoin = "round";
    ece.moveTo(36 * elijia, 187.25 * elijia);
    ece.bezierCurveTo(25 * elijia, 198.25 * elijia, 19 * elijia, 193.25 * elijia, 23 * elijia, 187.25 * elijia);
    ece.bezierCurveTo(26 * elijia, 178.25 * elijia, 32 * elijia, 173.25 * elijia, 38 * elijia, 175.25 * elijia);
    ece.bezierCurveTo(44 * elijia, 180.25 * elijia, 39 * elijia, 186.25 * elijia, 36 * elijia, 187.25 * elijia);
    ece.closePath();
    fill_path(ece, decklynn[1]);
  } else {
    if (deprince == 1) {
      cheenue.width = 543 * elijia;
      cheenue.height = 470 * elijia;
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(377.1428527832031 * elijia, 56.87498474121094 * elijia);
      ece.bezierCurveTo(384.1428527832031 * elijia, 44.87498474121094 * elijia, 403.1428527832031 * elijia, 39.87498474121094 * elijia, 403.1428527832031 * elijia, 51.87498474121094 * elijia);
      ece.bezierCurveTo(402.1428527832031 * elijia, 59.87498474121094 * elijia, 396.1428527832031 * elijia, 61.87498474121094 * elijia, 389.1428527832031 * elijia, 64.87498474121094 * elijia);
      ece.bezierCurveTo(376.1428527832031 * elijia, 67.87498474121094 * elijia, 375.1428527832031 * elijia, 62.87498474121094 * elijia, 377.1428527832031 * elijia, 56.87498474121094 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(377.1428527832031 * elijia, 56.87498474121094 * elijia);
      ece.bezierCurveTo(384.1428527832031 * elijia, 44.87498474121094 * elijia, 403.1428527832031 * elijia, 39.87498474121094 * elijia, 403.1428527832031 * elijia, 51.87498474121094 * elijia);
      ece.bezierCurveTo(402.1428527832031 * elijia, 59.87498474121094 * elijia, 396.1428527832031 * elijia, 61.87498474121094 * elijia, 389.1428527832031 * elijia, 64.87498474121094 * elijia);
      ece.bezierCurveTo(376.1428527832031 * elijia, 67.87498474121094 * elijia, 375.1428527832031 * elijia, 62.87498474121094 * elijia, 377.1428527832031 * elijia, 56.87498474121094 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(349.1428527832031 * elijia, 44.303558349609375 * elijia);
      ece.bezierCurveTo(358.1428527832031 * elijia, 37.303558349609375 * elijia, 370.1428527832031 * elijia, 47.303558349609375 * elijia, 364.1428527832031 * elijia, 51.303558349609375 * elijia);
      ece.bezierCurveTo(356.1428527832031 * elijia, 55.303558349609375 * elijia, 345.1428527832031 * elijia, 48.303558349609375 * elijia, 349.1428527832031 * elijia, 45.303558349609375 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(349.1428527832031 * elijia, 44.303558349609375 * elijia);
      ece.bezierCurveTo(358.1428527832031 * elijia, 37.303558349609375 * elijia, 370.1428527832031 * elijia, 47.303558349609375 * elijia, 364.1428527832031 * elijia, 51.303558349609375 * elijia);
      ece.bezierCurveTo(356.1428527832031 * elijia, 55.303558349609375 * elijia, 345.1428527832031 * elijia, 48.303558349609375 * elijia, 349.1428527832031 * elijia, 45.303558349609375 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(480.1428527832031 * elijia, 152.30355834960938 * elijia);
      ece.bezierCurveTo(477.1428527832031 * elijia, 145.30355834960938 * elijia, 480.1428527832031 * elijia, 140.30355834960938 * elijia, 489.1428527832031 * elijia, 135.30355834960938 * elijia);
      ece.bezierCurveTo(497.1428527832031 * elijia, 133.30355834960938 * elijia, 498.1428527832031 * elijia, 140.30355834960938 * elijia, 491.1428527832031 * elijia, 147.30355834960938 * elijia);
      ece.bezierCurveTo(485.1428527832031 * elijia, 155.30355834960938 * elijia, 482.1428527832031 * elijia, 156.30355834960938 * elijia, 480.1428527832031 * elijia, 152.30355834960938 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(480.1428527832031 * elijia, 152.30355834960938 * elijia);
      ece.bezierCurveTo(477.1428527832031 * elijia, 145.30355834960938 * elijia, 480.1428527832031 * elijia, 140.30355834960938 * elijia, 489.1428527832031 * elijia, 135.30355834960938 * elijia);
      ece.bezierCurveTo(497.1428527832031 * elijia, 133.30355834960938 * elijia, 498.1428527832031 * elijia, 140.30355834960938 * elijia, 491.1428527832031 * elijia, 147.30355834960938 * elijia);
      ece.bezierCurveTo(485.1428527832031 * elijia, 155.30355834960938 * elijia, 482.1428527832031 * elijia, 156.30355834960938 * elijia, 480.1428527832031 * elijia, 152.30355834960938 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(211.14285278320312 * elijia, 27.303558349609375 * elijia);
      ece.bezierCurveTo(223.14285278320312 * elijia, 21.303558349609375 * elijia, 234.14285278320312 * elijia, 34.303558349609375 * elijia, 232.14285278320312 * elijia, 42.303558349609375 * elijia);
      ece.bezierCurveTo(228.14285278320312 * elijia, 49.303558349609375 * elijia, 223.14285278320312 * elijia, 45.303558349609375 * elijia, 213.14285278320312 * elijia, 38.303558349609375 * elijia);
      ece.bezierCurveTo(205.14285278320312 * elijia, 31.303558349609375 * elijia, 208.14285278320312 * elijia, 29.303558349609375 * elijia, 211.14285278320312 * elijia, 27.303558349609375 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(211.14285278320312 * elijia, 27.303558349609375 * elijia);
      ece.bezierCurveTo(223.14285278320312 * elijia, 21.303558349609375 * elijia, 234.14285278320312 * elijia, 34.303558349609375 * elijia, 232.14285278320312 * elijia, 42.303558349609375 * elijia);
      ece.bezierCurveTo(228.14285278320312 * elijia, 49.303558349609375 * elijia, 223.14285278320312 * elijia, 45.303558349609375 * elijia, 213.14285278320312 * elijia, 38.303558349609375 * elijia);
      ece.bezierCurveTo(205.14285278320312 * elijia, 31.303558349609375 * elijia, 208.14285278320312 * elijia, 29.303558349609375 * elijia, 211.14285278320312 * elijia, 27.303558349609375 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(364.1428527832031 * elijia, 73.30355834960938 * elijia);
      ece.bezierCurveTo(354.1428527832031 * elijia, 72.30355834960938 * elijia, 356.1428527832031 * elijia, 64.30355834960938 * elijia, 359.1428527832031 * elijia, 59.303558349609375 * elijia);
      ece.bezierCurveTo(365.1428527832031 * elijia, 55.303558349609375 * elijia, 366.1428527832031 * elijia, 61.303558349609375 * elijia, 366.1428527832031 * elijia, 69.30355834960938 * elijia);
      ece.bezierCurveTo(365.1428527832031 * elijia, 73.30355834960938 * elijia, 365.1428527832031 * elijia, 73.30355834960938 * elijia, 364.1428527832031 * elijia, 73.30355834960938 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(364.1428527832031 * elijia, 73.30355834960938 * elijia);
      ece.bezierCurveTo(354.1428527832031 * elijia, 72.30355834960938 * elijia, 356.1428527832031 * elijia, 64.30355834960938 * elijia, 359.1428527832031 * elijia, 59.303558349609375 * elijia);
      ece.bezierCurveTo(365.1428527832031 * elijia, 55.303558349609375 * elijia, 366.1428527832031 * elijia, 61.303558349609375 * elijia, 366.1428527832031 * elijia, 69.30355834960938 * elijia);
      ece.bezierCurveTo(365.1428527832031 * elijia, 73.30355834960938 * elijia, 365.1428527832031 * elijia, 73.30355834960938 * elijia, 364.1428527832031 * elijia, 73.30355834960938 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(182.14285278320312 * elijia, 57.303558349609375 * elijia);
      ece.bezierCurveTo(173.14285278320312 * elijia, 52.303558349609375 * elijia, 177.14285278320312 * elijia, 39.303558349609375 * elijia, 198.14285278320312 * elijia, 36.303558349609375 * elijia);
      ece.bezierCurveTo(209.14285278320312 * elijia, 37.303558349609375 * elijia, 206.14285278320312 * elijia, 49.303558349609375 * elijia, 193.14285278320312 * elijia, 53.303558349609375 * elijia);
      ece.bezierCurveTo(187.14285278320312 * elijia, 56.303558349609375 * elijia, 185.14285278320312 * elijia, 57.303558349609375 * elijia, 182.14285278320312 * elijia, 57.303558349609375 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(182.14285278320312 * elijia, 57.303558349609375 * elijia);
      ece.bezierCurveTo(173.14285278320312 * elijia, 52.303558349609375 * elijia, 177.14285278320312 * elijia, 39.303558349609375 * elijia, 198.14285278320312 * elijia, 36.303558349609375 * elijia);
      ece.bezierCurveTo(209.14285278320312 * elijia, 37.303558349609375 * elijia, 206.14285278320312 * elijia, 49.303558349609375 * elijia, 193.14285278320312 * elijia, 53.303558349609375 * elijia);
      ece.bezierCurveTo(187.14285278320312 * elijia, 56.303558349609375 * elijia, 185.14285278320312 * elijia, 57.303558349609375 * elijia, 182.14285278320312 * elijia, 57.303558349609375 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(489.1428527832031 * elijia, 267.0178527832031 * elijia);
      ece.bezierCurveTo(500.1428527832031 * elijia, 257.0178527832031 * elijia, 511.1428527832031 * elijia, 269.0178527832031 * elijia, 514.1428527832031 * elijia, 275.0178527832031 * elijia);
      ece.bezierCurveTo(519.1428527832031 * elijia, 285.0178527832031 * elijia, 509.1428527832031 * elijia, 288.0178527832031 * elijia, 501.1428527832031 * elijia, 282.0178527832031 * elijia);
      ece.bezierCurveTo(488.1428527832031 * elijia, 277.0178527832031 * elijia, 485.1428527832031 * elijia, 271.0178527832031 * elijia, 489.1428527832031 * elijia, 267.0178527832031 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(489.1428527832031 * elijia, 267.0178527832031 * elijia);
      ece.bezierCurveTo(500.1428527832031 * elijia, 257.0178527832031 * elijia, 511.1428527832031 * elijia, 269.0178527832031 * elijia, 514.1428527832031 * elijia, 275.0178527832031 * elijia);
      ece.bezierCurveTo(519.1428527832031 * elijia, 285.0178527832031 * elijia, 509.1428527832031 * elijia, 288.0178527832031 * elijia, 501.1428527832031 * elijia, 282.0178527832031 * elijia);
      ece.bezierCurveTo(488.1428527832031 * elijia, 277.0178527832031 * elijia, 485.1428527832031 * elijia, 271.0178527832031 * elijia, 489.1428527832031 * elijia, 267.0178527832031 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(480.1428527832031 * elijia, 122.73213958740234 * elijia);
      ece.bezierCurveTo(469.1428527832031 * elijia, 119.73213958740234 * elijia, 473.1428527832031 * elijia, 108.73213958740234 * elijia, 476.1428527832031 * elijia, 107.73213958740234 * elijia);
      ece.bezierCurveTo(483.1428527832031 * elijia, 102.73213958740234 * elijia, 485.1428527832031 * elijia, 118.73213958740234 * elijia, 480.1428527832031 * elijia, 122.73213958740234 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(480.1428527832031 * elijia, 122.73213958740234 * elijia);
      ece.bezierCurveTo(469.1428527832031 * elijia, 119.73213958740234 * elijia, 473.1428527832031 * elijia, 108.73213958740234 * elijia, 476.1428527832031 * elijia, 107.73213958740234 * elijia);
      ece.bezierCurveTo(483.1428527832031 * elijia, 102.73213958740234 * elijia, 485.1428527832031 * elijia, 118.73213958740234 * elijia, 480.1428527832031 * elijia, 122.73213958740234 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(470.1428527832031 * elijia, 286.3035697937012 * elijia);
      ece.bezierCurveTo(472.1428527832031 * elijia, 277.3035697937012 * elijia, 480.1428527832031 * elijia, 277.3035697937012 * elijia, 489.1428527832031 * elijia, 286.3035697937012 * elijia);
      ece.bezierCurveTo(490.1428527832031 * elijia, 292.3035697937012 * elijia, 482.1428527832031 * elijia, 294.3035697937012 * elijia, 470.1428527832031 * elijia, 286.3035697937012 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(470.1428527832031 * elijia, 286.3035697937012 * elijia);
      ece.bezierCurveTo(472.1428527832031 * elijia, 277.3035697937012 * elijia, 480.1428527832031 * elijia, 277.3035697937012 * elijia, 489.1428527832031 * elijia, 286.3035697937012 * elijia);
      ece.bezierCurveTo(490.1428527832031 * elijia, 292.3035697937012 * elijia, 482.1428527832031 * elijia, 294.3035697937012 * elijia, 470.1428527832031 * elijia, 286.3035697937012 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(518.1428527832031 * elijia, 265.0178565979004 * elijia);
      ece.bezierCurveTo(524.1428527832031 * elijia, 262.0178565979004 * elijia, 521.1428527832031 * elijia, 247.0178565979004 * elijia, 514.1428527832031 * elijia, 250.0178565979004 * elijia);
      ece.bezierCurveTo(510.1428527832031 * elijia, 252.0178565979004 * elijia, 509.1428527832031 * elijia, 266.0178565979004 * elijia, 518.1428527832031 * elijia, 266.0178565979004 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(518.1428527832031 * elijia, 265.0178565979004 * elijia);
      ece.bezierCurveTo(524.1428527832031 * elijia, 262.0178565979004 * elijia, 521.1428527832031 * elijia, 247.0178565979004 * elijia, 514.1428527832031 * elijia, 250.0178565979004 * elijia);
      ece.bezierCurveTo(510.1428527832031 * elijia, 252.0178565979004 * elijia, 509.1428527832031 * elijia, 266.0178565979004 * elijia, 518.1428527832031 * elijia, 266.0178565979004 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(179.14285278320312 * elijia, 399.5892858505249 * elijia);
      ece.bezierCurveTo(174.14285278320312 * elijia, 385.5892858505249 * elijia, 186.14285278320312 * elijia, 379.5892858505249 * elijia, 198.14285278320312 * elijia, 379.5892858505249 * elijia);
      ece.bezierCurveTo(208.14285278320312 * elijia, 379.5892858505249 * elijia, 206.14285278320312 * elijia, 391.5892858505249 * elijia, 194.14285278320312 * elijia, 396.5892858505249 * elijia);
      ece.bezierCurveTo(184.14285278320312 * elijia, 401.5892858505249 * elijia, 182.14285278320312 * elijia, 402.5892858505249 * elijia, 179.14285278320312 * elijia, 399.5892858505249 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(179.14285278320312 * elijia, 399.5892858505249 * elijia);
      ece.bezierCurveTo(174.14285278320312 * elijia, 385.5892858505249 * elijia, 186.14285278320312 * elijia, 379.5892858505249 * elijia, 198.14285278320312 * elijia, 379.5892858505249 * elijia);
      ece.bezierCurveTo(208.14285278320312 * elijia, 379.5892858505249 * elijia, 206.14285278320312 * elijia, 391.5892858505249 * elijia, 194.14285278320312 * elijia, 396.5892858505249 * elijia);
      ece.bezierCurveTo(184.14285278320312 * elijia, 401.5892858505249 * elijia, 182.14285278320312 * elijia, 402.5892858505249 * elijia, 179.14285278320312 * elijia, 399.5892858505249 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(163.14285278320312 * elijia, 407.875 * elijia);
      ece.bezierCurveTo(152.14285278320312 * elijia, 405.875 * elijia, 156.14285278320312 * elijia, 391.875 * elijia, 163.14285278320312 * elijia, 385.875 * elijia);
      ece.bezierCurveTo(170.14285278320312 * elijia, 381.875 * elijia, 173.14285278320312 * elijia, 385.875 * elijia, 170.14285278320312 * elijia, 398.875 * elijia);
      ece.bezierCurveTo(169.14285278320312 * elijia, 403.875 * elijia, 165.14285278320312 * elijia, 408.875 * elijia, 164.14285278320312 * elijia, 407.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(163.14285278320312 * elijia, 407.875 * elijia);
      ece.bezierCurveTo(152.14285278320312 * elijia, 405.875 * elijia, 156.14285278320312 * elijia, 391.875 * elijia, 163.14285278320312 * elijia, 385.875 * elijia);
      ece.bezierCurveTo(170.14285278320312 * elijia, 381.875 * elijia, 173.14285278320312 * elijia, 385.875 * elijia, 170.14285278320312 * elijia, 398.875 * elijia);
      ece.bezierCurveTo(169.14285278320312 * elijia, 403.875 * elijia, 165.14285278320312 * elijia, 408.875 * elijia, 164.14285278320312 * elijia, 407.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(78.14285278320312 * elijia, 71.73211669921875 * elijia);
      ece.bezierCurveTo(82.14285278320312 * elijia, 62.73211669921875 * elijia, 88.14285278320312 * elijia, 69.73211669921875 * elijia, 91.14285278320312 * elijia, 79.73211669921875 * elijia);
      ece.bezierCurveTo(90.14285278320312 * elijia, 86.73211669921875 * elijia, 79.14285278320312 * elijia, 83.73211669921875 * elijia, 78.14285278320312 * elijia, 71.73211669921875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(78.14285278320312 * elijia, 71.73211669921875 * elijia);
      ece.bezierCurveTo(82.14285278320312 * elijia, 62.73211669921875 * elijia, 88.14285278320312 * elijia, 69.73211669921875 * elijia, 91.14285278320312 * elijia, 79.73211669921875 * elijia);
      ece.bezierCurveTo(90.14285278320312 * elijia, 86.73211669921875 * elijia, 79.14285278320312 * elijia, 83.73211669921875 * elijia, 78.14285278320312 * elijia, 71.73211669921875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(385.1428527832031 * elijia, 405.017858505249 * elijia);
      ece.bezierCurveTo(392.1428527832031 * elijia, 397.017858505249 * elijia, 406.1428527832031 * elijia, 401.017858505249 * elijia, 409.1428527832031 * elijia, 418.017858505249 * elijia);
      ece.bezierCurveTo(410.1428527832031 * elijia, 426.017858505249 * elijia, 401.1428527832031 * elijia, 425.017858505249 * elijia, 388.1428527832031 * elijia, 418.017858505249 * elijia);
      ece.bezierCurveTo(381.1428527832031 * elijia, 411.017858505249 * elijia, 383.1428527832031 * elijia, 407.017858505249 * elijia, 385.1428527832031 * elijia, 405.017858505249 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(385.1428527832031 * elijia, 405.017858505249 * elijia);
      ece.bezierCurveTo(392.1428527832031 * elijia, 397.017858505249 * elijia, 406.1428527832031 * elijia, 401.017858505249 * elijia, 409.1428527832031 * elijia, 418.017858505249 * elijia);
      ece.bezierCurveTo(410.1428527832031 * elijia, 426.017858505249 * elijia, 401.1428527832031 * elijia, 425.017858505249 * elijia, 388.1428527832031 * elijia, 418.017858505249 * elijia);
      ece.bezierCurveTo(381.1428527832031 * elijia, 411.017858505249 * elijia, 383.1428527832031 * elijia, 407.017858505249 * elijia, 385.1428527832031 * elijia, 405.017858505249 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(414.1428527832031 * elijia, 361.4464282989502 * elijia);
      ece.bezierCurveTo(418.1428527832031 * elijia, 352.4464282989502 * elijia, 426.1428527832031 * elijia, 353.4464282989502 * elijia, 437.1428527832031 * elijia, 362.4464282989502 * elijia);
      ece.bezierCurveTo(441.1428527832031 * elijia, 366.4464282989502 * elijia, 439.1428527832031 * elijia, 373.4464282989502 * elijia, 428.1428527832031 * elijia, 372.4464282989502 * elijia);
      ece.bezierCurveTo(416.1428527832031 * elijia, 370.4464282989502 * elijia, 412.1428527832031 * elijia, 367.4464282989502 * elijia, 415.1428527832031 * elijia, 361.4464282989502 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(414.1428527832031 * elijia, 361.4464282989502 * elijia);
      ece.bezierCurveTo(418.1428527832031 * elijia, 352.4464282989502 * elijia, 426.1428527832031 * elijia, 353.4464282989502 * elijia, 437.1428527832031 * elijia, 362.4464282989502 * elijia);
      ece.bezierCurveTo(441.1428527832031 * elijia, 366.4464282989502 * elijia, 439.1428527832031 * elijia, 373.4464282989502 * elijia, 428.1428527832031 * elijia, 372.4464282989502 * elijia);
      ece.bezierCurveTo(416.1428527832031 * elijia, 370.4464282989502 * elijia, 412.1428527832031 * elijia, 367.4464282989502 * elijia, 415.1428527832031 * elijia, 361.4464282989502 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(453.1428527832031 * elijia, 356.875 * elijia);
      ece.bezierCurveTo(458.1428527832031 * elijia, 363.875 * elijia, 447.1428527832031 * elijia, 373.875 * elijia, 444.1428527832031 * elijia, 369.875 * elijia);
      ece.bezierCurveTo(441.1428527832031 * elijia, 361.875 * elijia, 448.1428527832031 * elijia, 352.875 * elijia, 453.1428527832031 * elijia, 356.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(453.1428527832031 * elijia, 356.875 * elijia);
      ece.bezierCurveTo(458.1428527832031 * elijia, 363.875 * elijia, 447.1428527832031 * elijia, 373.875 * elijia, 444.1428527832031 * elijia, 369.875 * elijia);
      ece.bezierCurveTo(441.1428527832031 * elijia, 361.875 * elijia, 448.1428527832031 * elijia, 352.875 * elijia, 453.1428527832031 * elijia, 356.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(40.142852783203125 * elijia, 225.1607151031494 * elijia);
      ece.bezierCurveTo(52.142852783203125 * elijia, 224.1607151031494 * elijia, 44.142852783203125 * elijia, 251.1607151031494 * elijia, 36.142852783203125 * elijia, 248.1607151031494 * elijia);
      ece.bezierCurveTo(25.142852783203125 * elijia, 245.1607151031494 * elijia, 34.142852783203125 * elijia, 225.1607151031494 * elijia, 41.142852783203125 * elijia, 225.1607151031494 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(40.142852783203125 * elijia, 225.1607151031494 * elijia);
      ece.bezierCurveTo(52.142852783203125 * elijia, 224.1607151031494 * elijia, 44.142852783203125 * elijia, 251.1607151031494 * elijia, 36.142852783203125 * elijia, 248.1607151031494 * elijia);
      ece.bezierCurveTo(25.142852783203125 * elijia, 245.1607151031494 * elijia, 34.142852783203125 * elijia, 225.1607151031494 * elijia, 41.142852783203125 * elijia, 225.1607151031494 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(114.14285278320312 * elijia, 52.4464111328125 * elijia);
      ece.bezierCurveTo(123.14285278320312 * elijia, 57.4464111328125 * elijia, 111.14285278320312 * elijia, 71.4464111328125 * elijia, 106.14285278320312 * elijia, 65.4464111328125 * elijia);
      ece.bezierCurveTo(101.14285278320312 * elijia, 58.4464111328125 * elijia, 111.14285278320312 * elijia, 51.4464111328125 * elijia, 114.14285278320312 * elijia, 52.4464111328125 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(114.14285278320312 * elijia, 52.4464111328125 * elijia);
      ece.bezierCurveTo(123.14285278320312 * elijia, 57.4464111328125 * elijia, 111.14285278320312 * elijia, 71.4464111328125 * elijia, 106.14285278320312 * elijia, 65.4464111328125 * elijia);
      ece.bezierCurveTo(101.14285278320312 * elijia, 58.4464111328125 * elijia, 111.14285278320312 * elijia, 51.4464111328125 * elijia, 114.14285278320312 * elijia, 52.4464111328125 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(35.142852783203125 * elijia, 256.3035707473755 * elijia);
      ece.bezierCurveTo(41.142852783203125 * elijia, 263.3035707473755 * elijia, 32.142852783203125 * elijia, 270.3035707473755 * elijia, 27.142852783203125 * elijia, 270.3035707473755 * elijia);
      ece.bezierCurveTo(20.142852783203125 * elijia, 267.3035707473755 * elijia, 29.142852783203125 * elijia, 252.3035707473755 * elijia, 35.142852783203125 * elijia, 255.3035707473755 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(35.142852783203125 * elijia, 256.3035707473755 * elijia);
      ece.bezierCurveTo(41.142852783203125 * elijia, 263.3035707473755 * elijia, 32.142852783203125 * elijia, 270.3035707473755 * elijia, 27.142852783203125 * elijia, 270.3035707473755 * elijia);
      ece.bezierCurveTo(20.142852783203125 * elijia, 267.3035707473755 * elijia, 29.142852783203125 * elijia, 252.3035707473755 * elijia, 35.142852783203125 * elijia, 255.3035707473755 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(48.142852783203125 * elijia, 266.4464282989502 * elijia);
      ece.bezierCurveTo(59.142852783203125 * elijia, 273.4464282989502 * elijia, 41.142852783203125 * elijia, 290.4464282989502 * elijia, 33.142852783203125 * elijia, 285.4464282989502 * elijia);
      ece.bezierCurveTo(25.142852783203125 * elijia, 277.4464282989502 * elijia, 44.142852783203125 * elijia, 261.4464282989502 * elijia, 48.142852783203125 * elijia, 266.4464282989502 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(48.142852783203125 * elijia, 266.4464282989502 * elijia);
      ece.bezierCurveTo(59.142852783203125 * elijia, 273.4464282989502 * elijia, 41.142852783203125 * elijia, 290.4464282989502 * elijia, 33.142852783203125 * elijia, 285.4464282989502 * elijia);
      ece.bezierCurveTo(25.142852783203125 * elijia, 277.4464282989502 * elijia, 44.142852783203125 * elijia, 261.4464282989502 * elijia, 48.142852783203125 * elijia, 266.4464282989502 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(138.14285278320312 * elijia, 385.5892868041992 * elijia);
      ece.bezierCurveTo(150.14285278320312 * elijia, 387.5892868041992 * elijia, 140.14285278320312 * elijia, 405.5892868041992 * elijia, 131.14285278320312 * elijia, 402.5892868041992 * elijia);
      ece.bezierCurveTo(125.14285278320312 * elijia, 397.5892868041992 * elijia, 134.14285278320312 * elijia, 385.5892868041992 * elijia, 138.14285278320312 * elijia, 385.5892868041992 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(138.14285278320312 * elijia, 385.5892868041992 * elijia);
      ece.bezierCurveTo(150.14285278320312 * elijia, 387.5892868041992 * elijia, 140.14285278320312 * elijia, 405.5892868041992 * elijia, 131.14285278320312 * elijia, 402.5892868041992 * elijia);
      ece.bezierCurveTo(125.14285278320312 * elijia, 397.5892868041992 * elijia, 134.14285278320312 * elijia, 385.5892868041992 * elijia, 138.14285278320312 * elijia, 385.5892868041992 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(218.14285278320312 * elijia, 394.16071701049805 * elijia);
      ece.bezierCurveTo(224.14285278320312 * elijia, 398.16071701049805 * elijia, 222.14285278320312 * elijia, 403.16071701049805 * elijia, 214.14285278320312 * elijia, 407.16071701049805 * elijia);
      ece.bezierCurveTo(204.14285278320312 * elijia, 407.16071701049805 * elijia, 213.14285278320312 * elijia, 392.16071701049805 * elijia, 218.14285278320312 * elijia, 394.16071701049805 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(218.14285278320312 * elijia, 394.16071701049805 * elijia);
      ece.bezierCurveTo(224.14285278320312 * elijia, 398.16071701049805 * elijia, 222.14285278320312 * elijia, 403.16071701049805 * elijia, 214.14285278320312 * elijia, 407.16071701049805 * elijia);
      ece.bezierCurveTo(204.14285278320312 * elijia, 407.16071701049805 * elijia, 213.14285278320312 * elijia, 392.16071701049805 * elijia, 218.14285278320312 * elijia, 394.16071701049805 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.translate(50 * elijia, 100 * elijia);
    } else {
      cheenue.width = 543 * elijia;
      cheenue.height = 470 * elijia;
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(97.14285278320312 * elijia, 113.875 * elijia);
      ece.bezierCurveTo(104.14285278320312 * elijia, 106.875 * elijia, 113.14285278320312 * elijia, 109.875 * elijia, 118.14285278320312 * elijia, 118.875 * elijia);
      ece.bezierCurveTo(119.14285278320312 * elijia, 121.875 * elijia, 118.14285278320312 * elijia, 129.875 * elijia, 103.14285278320312 * elijia, 124.875 * elijia);
      ece.bezierCurveTo(94.14285278320312 * elijia, 120.875 * elijia, 95.14285278320312 * elijia, 117.875 * elijia, 97.14285278320312 * elijia, 113.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(97.14285278320312 * elijia, 113.875 * elijia);
      ece.bezierCurveTo(104.14285278320312 * elijia, 106.875 * elijia, 113.14285278320312 * elijia, 109.875 * elijia, 118.14285278320312 * elijia, 118.875 * elijia);
      ece.bezierCurveTo(119.14285278320312 * elijia, 121.875 * elijia, 118.14285278320312 * elijia, 129.875 * elijia, 103.14285278320312 * elijia, 124.875 * elijia);
      ece.bezierCurveTo(94.14285278320312 * elijia, 120.875 * elijia, 95.14285278320312 * elijia, 117.875 * elijia, 97.14285278320312 * elijia, 113.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(88.14285278320312 * elijia, 138.87498474121094 * elijia);
      ece.bezierCurveTo(90.14285278320312 * elijia, 128.87498474121094 * elijia, 104.14285278320312 * elijia, 130.87498474121094 * elijia, 107.14285278320312 * elijia, 138.87498474121094 * elijia);
      ece.bezierCurveTo(109.14285278320312 * elijia, 147.87498474121094 * elijia, 89.14285278320312 * elijia, 145.87498474121094 * elijia, 88.14285278320312 * elijia, 138.87498474121094 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(88.14285278320312 * elijia, 138.87498474121094 * elijia);
      ece.bezierCurveTo(90.14285278320312 * elijia, 128.87498474121094 * elijia, 104.14285278320312 * elijia, 130.87498474121094 * elijia, 107.14285278320312 * elijia, 138.87498474121094 * elijia);
      ece.bezierCurveTo(109.14285278320312 * elijia, 147.87498474121094 * elijia, 89.14285278320312 * elijia, 145.87498474121094 * elijia, 88.14285278320312 * elijia, 138.87498474121094 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(194.14285278320312 * elijia, 44.87498474121094 * elijia);
      ece.bezierCurveTo(202.14285278320312 * elijia, 49.87498474121094 * elijia, 195.14285278320312 * elijia, 62.87498474121094 * elijia, 187.14285278320312 * elijia, 60.87498474121094 * elijia);
      ece.bezierCurveTo(180.14285278320312 * elijia, 57.87498474121094 * elijia, 190.14285278320312 * elijia, 40.87498474121094 * elijia, 194.14285278320312 * elijia, 44.87498474121094 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(194.14285278320312 * elijia, 44.87498474121094 * elijia);
      ece.bezierCurveTo(202.14285278320312 * elijia, 49.87498474121094 * elijia, 195.14285278320312 * elijia, 62.87498474121094 * elijia, 187.14285278320312 * elijia, 60.87498474121094 * elijia);
      ece.bezierCurveTo(180.14285278320312 * elijia, 57.87498474121094 * elijia, 190.14285278320312 * elijia, 40.87498474121094 * elijia, 194.14285278320312 * elijia, 44.87498474121094 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(22.142852783203125 * elijia, 218.44642639160156 * elijia);
      ece.bezierCurveTo(31.142852783203125 * elijia, 205.44642639160156 * elijia, 49.142852783203125 * elijia, 221.44642639160156 * elijia, 49.142852783203125 * elijia, 230.44642639160156 * elijia);
      ece.bezierCurveTo(44.142852783203125 * elijia, 243.44642639160156 * elijia, 14.142852783203125 * elijia, 228.44642639160156 * elijia, 22.142852783203125 * elijia, 218.44642639160156 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(22.142852783203125 * elijia, 218.44642639160156 * elijia);
      ece.bezierCurveTo(31.142852783203125 * elijia, 205.44642639160156 * elijia, 49.142852783203125 * elijia, 221.44642639160156 * elijia, 49.142852783203125 * elijia, 230.44642639160156 * elijia);
      ece.bezierCurveTo(44.142852783203125 * elijia, 243.44642639160156 * elijia, 14.142852783203125 * elijia, 228.44642639160156 * elijia, 22.142852783203125 * elijia, 218.44642639160156 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(41.142852783203125 * elijia, 249.875 * elijia);
      ece.bezierCurveTo(33.142852783203125 * elijia, 255.875 * elijia, 30.142852783203125 * elijia, 265.875 * elijia, 40.142852783203125 * elijia, 266.875 * elijia);
      ece.bezierCurveTo(49.142852783203125 * elijia, 261.875 * elijia, 53.142852783203125 * elijia, 244.875 * elijia, 41.142852783203125 * elijia, 249.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(41.142852783203125 * elijia, 249.875 * elijia);
      ece.bezierCurveTo(33.142852783203125 * elijia, 255.875 * elijia, 30.142852783203125 * elijia, 265.875 * elijia, 40.142852783203125 * elijia, 266.875 * elijia);
      ece.bezierCurveTo(49.142852783203125 * elijia, 261.875 * elijia, 53.142852783203125 * elijia, 244.875 * elijia, 41.142852783203125 * elijia, 249.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(105.14285278320312 * elijia, 369.875 * elijia);
      ece.bezierCurveTo(92.14285278320312 * elijia, 361.875 * elijia, 77.14285278320312 * elijia, 375.875 * elijia, 79.14285278320312 * elijia, 384.875 * elijia);
      ece.bezierCurveTo(84.14285278320312 * elijia, 399.875 * elijia, 114.14285278320312 * elijia, 375.875 * elijia, 104.14285278320312 * elijia, 369.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(105.14285278320312 * elijia, 369.875 * elijia);
      ece.bezierCurveTo(92.14285278320312 * elijia, 361.875 * elijia, 77.14285278320312 * elijia, 375.875 * elijia, 79.14285278320312 * elijia, 384.875 * elijia);
      ece.bezierCurveTo(84.14285278320312 * elijia, 399.875 * elijia, 114.14285278320312 * elijia, 375.875 * elijia, 104.14285278320312 * elijia, 369.875 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(233.14285278320312 * elijia, 43.4464111328125 * elijia);
      ece.bezierCurveTo(238.14285278320312 * elijia, 47.4464111328125 * elijia, 222.14285278320312 * elijia, 73.4464111328125 * elijia, 214.14285278320312 * elijia, 58.4464111328125 * elijia);
      ece.bezierCurveTo(211.14285278320312 * elijia, 48.4464111328125 * elijia, 230.14285278320312 * elijia, 35.4464111328125 * elijia, 233.14285278320312 * elijia, 42.4464111328125 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(233.14285278320312 * elijia, 43.4464111328125 * elijia);
      ece.bezierCurveTo(238.14285278320312 * elijia, 47.4464111328125 * elijia, 222.14285278320312 * elijia, 73.4464111328125 * elijia, 214.14285278320312 * elijia, 58.4464111328125 * elijia);
      ece.bezierCurveTo(211.14285278320312 * elijia, 48.4464111328125 * elijia, 230.14285278320312 * elijia, 35.4464111328125 * elijia, 233.14285278320312 * elijia, 42.4464111328125 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(371.1428527832031 * elijia, 34.73213195800781 * elijia);
      ece.bezierCurveTo(378.1428527832031 * elijia, 20.732131958007812 * elijia, 395.1428527832031 * elijia, 32.73213195800781 * elijia, 396.1428527832031 * elijia, 42.73213195800781 * elijia);
      ece.bezierCurveTo(399.1428527832031 * elijia, 59.73213195800781 * elijia, 369.1428527832031 * elijia, 43.73213195800781 * elijia, 372.1428527832031 * elijia, 34.73213195800781 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(371.1428527832031 * elijia, 34.73213195800781 * elijia);
      ece.bezierCurveTo(378.1428527832031 * elijia, 20.732131958007812 * elijia, 395.1428527832031 * elijia, 32.73213195800781 * elijia, 396.1428527832031 * elijia, 42.73213195800781 * elijia);
      ece.bezierCurveTo(399.1428527832031 * elijia, 59.73213195800781 * elijia, 369.1428527832031 * elijia, 43.73213195800781 * elijia, 372.1428527832031 * elijia, 34.73213195800781 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(117.14285278320312 * elijia, 392.5892868041992 * elijia);
      ece.bezierCurveTo(115.14285278320312 * elijia, 384.5892868041992 * elijia, 109.14285278320312 * elijia, 383.5892868041992 * elijia, 103.14285278320312 * elijia, 384.5892868041992 * elijia);
      ece.bezierCurveTo(95.14285278320312 * elijia, 389.5892868041992 * elijia, 97.14285278320312 * elijia, 393.5892868041992 * elijia, 107.14285278320312 * elijia, 396.5892868041992 * elijia);
      ece.bezierCurveTo(114.14285278320312 * elijia, 396.5892868041992 * elijia, 118.14285278320312 * elijia, 393.5892868041992 * elijia, 116.14285278320312 * elijia, 391.5892868041992 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(117.14285278320312 * elijia, 392.5892868041992 * elijia);
      ece.bezierCurveTo(115.14285278320312 * elijia, 384.5892868041992 * elijia, 109.14285278320312 * elijia, 383.5892868041992 * elijia, 103.14285278320312 * elijia, 384.5892868041992 * elijia);
      ece.bezierCurveTo(95.14285278320312 * elijia, 389.5892868041992 * elijia, 97.14285278320312 * elijia, 393.5892868041992 * elijia, 107.14285278320312 * elijia, 396.5892868041992 * elijia);
      ece.bezierCurveTo(114.14285278320312 * elijia, 396.5892868041992 * elijia, 118.14285278320312 * elijia, 393.5892868041992 * elijia, 116.14285278320312 * elijia, 391.5892868041992 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(122.14285278320312 * elijia, 403.7321472167969 * elijia);
      ece.bezierCurveTo(132.14285278320312 * elijia, 399.7321472167969 * elijia, 133.14285278320312 * elijia, 418.7321472167969 * elijia, 129.14285278320312 * elijia, 419.7321472167969 * elijia);
      ece.bezierCurveTo(119.14285278320312 * elijia, 420.7321472167969 * elijia, 118.14285278320312 * elijia, 402.7321472167969 * elijia, 123.14285278320312 * elijia, 403.7321472167969 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(122.14285278320312 * elijia, 403.7321472167969 * elijia);
      ece.bezierCurveTo(132.14285278320312 * elijia, 399.7321472167969 * elijia, 133.14285278320312 * elijia, 418.7321472167969 * elijia, 129.14285278320312 * elijia, 419.7321472167969 * elijia);
      ece.bezierCurveTo(119.14285278320312 * elijia, 420.7321472167969 * elijia, 118.14285278320312 * elijia, 402.7321472167969 * elijia, 123.14285278320312 * elijia, 403.7321472167969 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(317.1428527832031 * elijia, 417.5892868041992 * elijia);
      ece.bezierCurveTo(333.1428527832031 * elijia, 421.5892868041992 * elijia, 299.1428527832031 * elijia, 455.5892868041992 * elijia, 294.1428527832031 * elijia, 438.5892868041992 * elijia);
      ece.bezierCurveTo(289.1428527832031 * elijia, 423.5892868041992 * elijia, 307.1428527832031 * elijia, 414.5892868041992 * elijia, 317.1428527832031 * elijia, 417.5892868041992 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(317.1428527832031 * elijia, 417.5892868041992 * elijia);
      ece.bezierCurveTo(333.1428527832031 * elijia, 421.5892868041992 * elijia, 299.1428527832031 * elijia, 455.5892868041992 * elijia, 294.1428527832031 * elijia, 438.5892868041992 * elijia);
      ece.bezierCurveTo(289.1428527832031 * elijia, 423.5892868041992 * elijia, 307.1428527832031 * elijia, 414.5892868041992 * elijia, 317.1428527832031 * elijia, 417.5892868041992 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(322.1428527832031 * elijia, 437.30357360839844 * elijia);
      ece.bezierCurveTo(330.1428527832031 * elijia, 431.30357360839844 * elijia, 336.1428527832031 * elijia, 440.30357360839844 * elijia, 336.1428527832031 * elijia, 448.30357360839844 * elijia);
      ece.bezierCurveTo(334.1428527832031 * elijia, 454.30357360839844 * elijia, 316.1428527832031 * elijia, 447.30357360839844 * elijia, 323.1428527832031 * elijia, 437.30357360839844 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(322.1428527832031 * elijia, 437.30357360839844 * elijia);
      ece.bezierCurveTo(330.1428527832031 * elijia, 431.30357360839844 * elijia, 336.1428527832031 * elijia, 440.30357360839844 * elijia, 336.1428527832031 * elijia, 448.30357360839844 * elijia);
      ece.bezierCurveTo(334.1428527832031 * elijia, 454.30357360839844 * elijia, 316.1428527832031 * elijia, 447.30357360839844 * elijia, 323.1428527832031 * elijia, 437.30357360839844 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(438.1428527832031 * elijia, 358.5892868041992 * elijia);
      ece.bezierCurveTo(455.1428527832031 * elijia, 351.5892868041992 * elijia, 467.1428527832031 * elijia, 371.5892868041992 * elijia, 455.1428527832031 * elijia, 374.5892868041992 * elijia);
      ece.bezierCurveTo(442.1428527832031 * elijia, 377.5892868041992 * elijia, 429.1428527832031 * elijia, 361.5892868041992 * elijia, 438.1428527832031 * elijia, 358.5892868041992 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(438.1428527832031 * elijia, 358.5892868041992 * elijia);
      ece.bezierCurveTo(455.1428527832031 * elijia, 351.5892868041992 * elijia, 467.1428527832031 * elijia, 371.5892868041992 * elijia, 455.1428527832031 * elijia, 374.5892868041992 * elijia);
      ece.bezierCurveTo(442.1428527832031 * elijia, 377.5892868041992 * elijia, 429.1428527832031 * elijia, 361.5892868041992 * elijia, 438.1428527832031 * elijia, 358.5892868041992 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(423.1428527832031 * elijia, 363.16071701049805 * elijia);
      ece.bezierCurveTo(433.1428527832031 * elijia, 362.16071701049805 * elijia, 433.1428527832031 * elijia, 374.16071701049805 * elijia, 421.1428527832031 * elijia, 382.16071701049805 * elijia);
      ece.bezierCurveTo(413.1428527832031 * elijia, 383.16071701049805 * elijia, 413.1428527832031 * elijia, 368.16071701049805 * elijia, 423.1428527832031 * elijia, 363.16071701049805 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(423.1428527832031 * elijia, 363.16071701049805 * elijia);
      ece.bezierCurveTo(433.1428527832031 * elijia, 362.16071701049805 * elijia, 433.1428527832031 * elijia, 374.16071701049805 * elijia, 421.1428527832031 * elijia, 382.16071701049805 * elijia);
      ece.bezierCurveTo(413.1428527832031 * elijia, 383.16071701049805 * elijia, 413.1428527832031 * elijia, 368.16071701049805 * elijia, 423.1428527832031 * elijia, 363.16071701049805 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(431.1428527832031 * elijia, 333.0178565979004 * elijia);
      ece.bezierCurveTo(447.1428527832031 * elijia, 330.0178565979004 * elijia, 448.1428527832031 * elijia, 340.0178565979004 * elijia, 447.1428527832031 * elijia, 343.0178565979004 * elijia);
      ece.bezierCurveTo(445.1428527832031 * elijia, 351.0178565979004 * elijia, 415.1428527832031 * elijia, 343.0178565979004 * elijia, 431.1428527832031 * elijia, 333.0178565979004 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(431.1428527832031 * elijia, 333.0178565979004 * elijia);
      ece.bezierCurveTo(447.1428527832031 * elijia, 330.0178565979004 * elijia, 448.1428527832031 * elijia, 340.0178565979004 * elijia, 447.1428527832031 * elijia, 343.0178565979004 * elijia);
      ece.bezierCurveTo(445.1428527832031 * elijia, 351.0178565979004 * elijia, 415.1428527832031 * elijia, 343.0178565979004 * elijia, 431.1428527832031 * elijia, 333.0178565979004 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(486.1428527832031 * elijia, 272.44642639160156 * elijia);
      ece.bezierCurveTo(493.1428527832031 * elijia, 260.44642639160156 * elijia, 519.1428527832031 * elijia, 277.44642639160156 * elijia, 511.1428527832031 * elijia, 289.44642639160156 * elijia);
      ece.bezierCurveTo(503.1428527832031 * elijia, 297.44642639160156 * elijia, 483.1428527832031 * elijia, 277.44642639160156 * elijia, 486.1428527832031 * elijia, 273.44642639160156 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(486.1428527832031 * elijia, 272.44642639160156 * elijia);
      ece.bezierCurveTo(493.1428527832031 * elijia, 260.44642639160156 * elijia, 519.1428527832031 * elijia, 277.44642639160156 * elijia, 511.1428527832031 * elijia, 289.44642639160156 * elijia);
      ece.bezierCurveTo(503.1428527832031 * elijia, 297.44642639160156 * elijia, 483.1428527832031 * elijia, 277.44642639160156 * elijia, 486.1428527832031 * elijia, 273.44642639160156 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(503.1428527832031 * elijia, 245.01785278320312 * elijia);
      ece.bezierCurveTo(516.1428527832031 * elijia, 247.01785278320312 * elijia, 513.1428527832031 * elijia, 264.0178527832031 * elijia, 509.1428527832031 * elijia, 265.0178527832031 * elijia);
      ece.bezierCurveTo(499.1428527832031 * elijia, 268.0178527832031 * elijia, 494.1428527832031 * elijia, 244.01785278320312 * elijia, 504.1428527832031 * elijia, 245.01785278320312 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(503.1428527832031 * elijia, 245.01785278320312 * elijia);
      ece.bezierCurveTo(516.1428527832031 * elijia, 247.01785278320312 * elijia, 513.1428527832031 * elijia, 264.0178527832031 * elijia, 509.1428527832031 * elijia, 265.0178527832031 * elijia);
      ece.bezierCurveTo(499.1428527832031 * elijia, 268.0178527832031 * elijia, 494.1428527832031 * elijia, 244.01785278320312 * elijia, 504.1428527832031 * elijia, 245.01785278320312 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(518.1428527832031 * elijia, 179.73213958740234 * elijia);
      ece.bezierCurveTo(529.1428527832031 * elijia, 181.73213958740234 * elijia, 514.1428527832031 * elijia, 212.73213958740234 * elijia, 505.1428527832031 * elijia, 200.73213958740234 * elijia);
      ece.bezierCurveTo(499.1428527832031 * elijia, 186.73213958740234 * elijia, 515.1428527832031 * elijia, 177.73213958740234 * elijia, 518.1428527832031 * elijia, 179.73213958740234 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(518.1428527832031 * elijia, 179.73213958740234 * elijia);
      ece.bezierCurveTo(529.1428527832031 * elijia, 181.73213958740234 * elijia, 514.1428527832031 * elijia, 212.73213958740234 * elijia, 505.1428527832031 * elijia, 200.73213958740234 * elijia);
      ece.bezierCurveTo(499.1428527832031 * elijia, 186.73213958740234 * elijia, 515.1428527832031 * elijia, 177.73213958740234 * elijia, 518.1428527832031 * elijia, 179.73213958740234 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(438.1428527832031 * elijia, 22.16070556640625 * elijia);
      ece.bezierCurveTo(446.1428527832031 * elijia, 27.16070556640625 * elijia, 422.1428527832031 * elijia, 54.16070556640625 * elijia, 414.1428527832031 * elijia, 40.16070556640625 * elijia);
      ece.bezierCurveTo(409.1428527832031 * elijia, 27.16070556640625 * elijia, 430.1428527832031 * elijia, 15.16070556640625 * elijia, 438.1428527832031 * elijia, 22.16070556640625 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(438.1428527832031 * elijia, 22.16070556640625 * elijia);
      ece.bezierCurveTo(446.1428527832031 * elijia, 27.16070556640625 * elijia, 422.1428527832031 * elijia, 54.16070556640625 * elijia, 414.1428527832031 * elijia, 40.16070556640625 * elijia);
      ece.bezierCurveTo(409.1428527832031 * elijia, 27.16070556640625 * elijia, 430.1428527832031 * elijia, 15.16070556640625 * elijia, 438.1428527832031 * elijia, 22.16070556640625 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.globalAlpha = .5;
      ece.translate(3 * elijia, 3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(406.1428527832031 * elijia, 11.16070556640625 * elijia);
      ece.bezierCurveTo(418.1428527832031 * elijia, 14.16070556640625 * elijia, 411.1428527832031 * elijia, 27.16070556640625 * elijia, 403.1428527832031 * elijia, 30.16070556640625 * elijia);
      ece.bezierCurveTo(395.1428527832031 * elijia, 31.16070556640625 * elijia, 391.1428527832031 * elijia, 16.16070556640625 * elijia, 406.1428527832031 * elijia, 10.16070556640625 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[0]);
      ece.globalAlpha = 1;
      ece.translate(-3 * elijia, -3 * elijia);
      ece.beginPath();
      ece.lineCap = "round";
      ece.lineJoin = "round";
      ece.moveTo(406.1428527832031 * elijia, 11.16070556640625 * elijia);
      ece.bezierCurveTo(418.1428527832031 * elijia, 14.16070556640625 * elijia, 411.1428527832031 * elijia, 27.16070556640625 * elijia, 403.1428527832031 * elijia, 30.16070556640625 * elijia);
      ece.bezierCurveTo(395.1428527832031 * elijia, 31.16070556640625 * elijia, 391.1428527832031 * elijia, 16.16070556640625 * elijia, 406.1428527832031 * elijia, 10.16070556640625 * elijia);
      ece.closePath();
      fill_path(ece, decklynn[1]);
      ece.translate(100 * elijia, 100 * elijia);
    }
  }
  ece.globalAlpha = 1;
  ece.translate(-3 * elijia, -3 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(271 * elijia, 111 * elijia);
  ece.bezierCurveTo(259 * elijia, 110 * elijia, 258 * elijia, 99 * elijia, 265 * elijia, 95 * elijia);
  ece.bezierCurveTo(276 * elijia, 91 * elijia, 279 * elijia, 100 * elijia, 275 * elijia, 107 * elijia);
  ece.bezierCurveTo(274 * elijia, 109 * elijia, 273 * elijia, 110 * elijia, 271 * elijia, 111 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[2], decklynn[3], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(169 * elijia, 121 * elijia);
  ece.bezierCurveTo(159 * elijia, 129 * elijia, 149 * elijia, 126 * elijia, 144 * elijia, 114 * elijia);
  ece.bezierCurveTo(142 * elijia, 102 * elijia, 149 * elijia, 98 * elijia, 163 * elijia, 96 * elijia);
  ece.bezierCurveTo(175 * elijia, 98 * elijia, 176 * elijia, 115 * elijia, 169 * elijia, 121 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[2], decklynn[3], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(213 * elijia, 150 * elijia);
  ece.bezierCurveTo(206 * elijia, 134 * elijia, 216 * elijia, 120 * elijia, 235 * elijia, 129 * elijia);
  ece.bezierCurveTo(247 * elijia, 139 * elijia, 242 * elijia, 146 * elijia, 237 * elijia, 154 * elijia);
  ece.bezierCurveTo(226 * elijia, 162 * elijia, 218 * elijia, 159 * elijia, 213 * elijia, 150 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[2], decklynn[3], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(236 * elijia, 169 * elijia);
  ece.bezierCurveTo(247 * elijia, 166 * elijia, 250 * elijia, 172 * elijia, 247 * elijia, 181 * elijia);
  ece.bezierCurveTo(242 * elijia, 186 * elijia, 241 * elijia, 181 * elijia, 242 * elijia, 182 * elijia);
  ece.bezierCurveTo(241 * elijia, 178 * elijia, 240 * elijia, 179 * elijia, 239 * elijia, 181 * elijia);
  ece.bezierCurveTo(240 * elijia, 184 * elijia, 237 * elijia, 186 * elijia, 233 * elijia, 181 * elijia);
  ece.bezierCurveTo(230 * elijia, 173 * elijia, 233 * elijia, 169 * elijia, 236 * elijia, 169 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[2], decklynn[3], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(163 * elijia, 170 * elijia);
  ece.bezierCurveTo(176 * elijia, 165 * elijia, 180 * elijia, 172 * elijia, 181 * elijia, 181 * elijia);
  ece.bezierCurveTo(182 * elijia, 189 * elijia, 178 * elijia, 192 * elijia, 174 * elijia, 188 * elijia);
  ece.bezierCurveTo(172 * elijia, 183 * elijia, 170 * elijia, 184 * elijia, 170 * elijia, 188 * elijia);
  ece.bezierCurveTo(176 * elijia, 194 * elijia, 165 * elijia, 196 * elijia, 162 * elijia, 190 * elijia);
  ece.bezierCurveTo(152 * elijia, 181 * elijia, 157 * elijia, 173 * elijia, 163 * elijia, 170 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[2], decklynn[3], 2 * elijia);
  ece.scale(.05, .05);
  ece.translate(5e3 * elijia, 1900 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(273 * elijia, 46.546875 * elijia);
  ece.bezierCurveTo(353 * elijia, 131.546875 * elijia, 303 * elijia, 213.546875 * elijia, 272 * elijia, 236.546875 * elijia);
  ece.bezierCurveTo(203 * elijia, 179.546875 * elijia, 236 * elijia, 84.546875 * elijia, 273 * elijia, 47.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(467 * elijia, 257.546875 * elijia);
  ece.bezierCurveTo(369 * elijia, 194.546875 * elijia, 325 * elijia, 236.546875 * elijia, 291 * elijia, 271.546875 * elijia);
  ece.bezierCurveTo(371 * elijia, 335.546875 * elijia, 427 * elijia, 313.546875 * elijia, 467 * elijia, 258.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(269 * elijia, 275.546875 * elijia);
  ece.bezierCurveTo(343 * elijia, 356.546875 * elijia, 355 * elijia, 407.546875 * elijia, 323 * elijia, 472.546875 * elijia);
  ece.bezierCurveTo(224 * elijia, 451.546875 * elijia, 238 * elijia, 326.546875 * elijia, 270 * elijia, 275.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(260 * elijia, 267.546875 * elijia);
  ece.bezierCurveTo(134 * elijia, 221.546875 * elijia, 89 * elijia, 256.546875 * elijia, 60 * elijia, 295.546875 * elijia);
  ece.bezierCurveTo(116 * elijia, 357.546875 * elijia, 242 * elijia, 344.546875 * elijia, 260 * elijia, 267.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(124 * elijia, 123.546875 * elijia);
  ece.bezierCurveTo(255 * elijia, 140.546875 * elijia, 265 * elijia, 234.546875 * elijia, 267 * elijia, 269.546875 * elijia);
  ece.bezierCurveTo(159 * elijia, 283.546875 * elijia, 127 * elijia, 192.546875 * elijia, 124 * elijia, 124.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(267 * elijia, 268.546875 * elijia);
  ece.bezierCurveTo(265 * elijia, 170.546875 * elijia, 364 * elijia, 127.546875 * elijia, 407 * elijia, 132.546875 * elijia);
  ece.bezierCurveTo(427 * elijia, 204.546875 * elijia, 341 * elijia, 277.546875 * elijia, 268 * elijia, 271.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(270 * elijia, 269.546875 * elijia);
  ece.bezierCurveTo(370 * elijia, 251.546875 * elijia, 410 * elijia, 328.546875 * elijia, 420 * elijia, 399.546875 * elijia);
  ece.bezierCurveTo(292 * elijia, 412.546875 * elijia, 275 * elijia, 313.546875 * elijia, 269 * elijia, 272.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(273 * elijia, 266.546875 * elijia);
  ece.bezierCurveTo(291 * elijia, 370.546875 * elijia, 235 * elijia, 428.546875 * elijia, 173 * elijia, 451.546875 * elijia);
  ece.bezierCurveTo(124 * elijia, 365.546875 * elijia, 217 * elijia, 274.546875 * elijia, 272 * elijia, 265.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  circle(ece, 266 * elijia, 251.546875 * elijia, 19.1049731745428 * elijia);
  fill_path(ece, decklynn[8], decklynn[9], 2 * elijia);
  circle(ece, 292 * elijia, 274.546875 * elijia, 15.556349186104045 * elijia);
  fill_path(ece, decklynn[8], decklynn[9], 2 * elijia);
  circle(ece, 258 * elijia, 291.546875 * elijia, 17.029386365926403 * elijia);
  fill_path(ece, decklynn[8], decklynn[9], 2 * elijia);
  ece.scale(1.4, 1.4);
  ece.translate(-700 * elijia, 280 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(273 * elijia, 46.546875 * elijia);
  ece.bezierCurveTo(353 * elijia, 131.546875 * elijia, 303 * elijia, 213.546875 * elijia, 272 * elijia, 236.546875 * elijia);
  ece.bezierCurveTo(203 * elijia, 179.546875 * elijia, 236 * elijia, 84.546875 * elijia, 273 * elijia, 47.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(467 * elijia, 257.546875 * elijia);
  ece.bezierCurveTo(369 * elijia, 194.546875 * elijia, 325 * elijia, 236.546875 * elijia, 291 * elijia, 271.546875 * elijia);
  ece.bezierCurveTo(371 * elijia, 335.546875 * elijia, 427 * elijia, 313.546875 * elijia, 467 * elijia, 258.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(269 * elijia, 275.546875 * elijia);
  ece.bezierCurveTo(343 * elijia, 356.546875 * elijia, 355 * elijia, 407.546875 * elijia, 323 * elijia, 472.546875 * elijia);
  ece.bezierCurveTo(224 * elijia, 451.546875 * elijia, 238 * elijia, 326.546875 * elijia, 270 * elijia, 275.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(260 * elijia, 267.546875 * elijia);
  ece.bezierCurveTo(134 * elijia, 221.546875 * elijia, 89 * elijia, 256.546875 * elijia, 60 * elijia, 295.546875 * elijia);
  ece.bezierCurveTo(116 * elijia, 357.546875 * elijia, 242 * elijia, 344.546875 * elijia, 260 * elijia, 267.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(124 * elijia, 123.546875 * elijia);
  ece.bezierCurveTo(255 * elijia, 140.546875 * elijia, 265 * elijia, 234.546875 * elijia, 267 * elijia, 269.546875 * elijia);
  ece.bezierCurveTo(159 * elijia, 283.546875 * elijia, 127 * elijia, 192.546875 * elijia, 124 * elijia, 124.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(267 * elijia, 268.546875 * elijia);
  ece.bezierCurveTo(265 * elijia, 170.546875 * elijia, 364 * elijia, 127.546875 * elijia, 407 * elijia, 132.546875 * elijia);
  ece.bezierCurveTo(427 * elijia, 204.546875 * elijia, 341 * elijia, 277.546875 * elijia, 268 * elijia, 271.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(270 * elijia, 269.546875 * elijia);
  ece.bezierCurveTo(370 * elijia, 251.546875 * elijia, 410 * elijia, 328.546875 * elijia, 420 * elijia, 399.546875 * elijia);
  ece.bezierCurveTo(292 * elijia, 412.546875 * elijia, 275 * elijia, 313.546875 * elijia, 269 * elijia, 272.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(273 * elijia, 266.546875 * elijia);
  ece.bezierCurveTo(291 * elijia, 370.546875 * elijia, 235 * elijia, 428.546875 * elijia, 173 * elijia, 451.546875 * elijia);
  ece.bezierCurveTo(124 * elijia, 365.546875 * elijia, 217 * elijia, 274.546875 * elijia, 272 * elijia, 265.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  circle(ece, 266 * elijia, 251.546875 * elijia, 19.1049731745428 * elijia);
  fill_path(ece, decklynn[8], decklynn[9], 2 * elijia);
  circle(ece, 292 * elijia, 274.546875 * elijia, 15.556349186104045 * elijia);
  fill_path(ece, decklynn[8], decklynn[9], 2 * elijia);
  circle(ece, 258 * elijia, 291.546875 * elijia, 17.029386365926403 * elijia);
  fill_path(ece, decklynn[8], decklynn[9], 2 * elijia);
  ece.translate(-900 * elijia, -200 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(273 * elijia, 46.546875 * elijia);
  ece.bezierCurveTo(353 * elijia, 131.546875 * elijia, 303 * elijia, 213.546875 * elijia, 272 * elijia, 236.546875 * elijia);
  ece.bezierCurveTo(203 * elijia, 179.546875 * elijia, 236 * elijia, 84.546875 * elijia, 273 * elijia, 47.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(467 * elijia, 257.546875 * elijia);
  ece.bezierCurveTo(369 * elijia, 194.546875 * elijia, 325 * elijia, 236.546875 * elijia, 291 * elijia, 271.546875 * elijia);
  ece.bezierCurveTo(371 * elijia, 335.546875 * elijia, 427 * elijia, 313.546875 * elijia, 467 * elijia, 258.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(269 * elijia, 275.546875 * elijia);
  ece.bezierCurveTo(343 * elijia, 356.546875 * elijia, 355 * elijia, 407.546875 * elijia, 323 * elijia, 472.546875 * elijia);
  ece.bezierCurveTo(224 * elijia, 451.546875 * elijia, 238 * elijia, 326.546875 * elijia, 270 * elijia, 275.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(260 * elijia, 267.546875 * elijia);
  ece.bezierCurveTo(134 * elijia, 221.546875 * elijia, 89 * elijia, 256.546875 * elijia, 60 * elijia, 295.546875 * elijia);
  ece.bezierCurveTo(116 * elijia, 357.546875 * elijia, 242 * elijia, 344.546875 * elijia, 260 * elijia, 267.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[4], decklynn[5], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(124 * elijia, 123.546875 * elijia);
  ece.bezierCurveTo(255 * elijia, 140.546875 * elijia, 265 * elijia, 234.546875 * elijia, 267 * elijia, 269.546875 * elijia);
  ece.bezierCurveTo(159 * elijia, 283.546875 * elijia, 127 * elijia, 192.546875 * elijia, 124 * elijia, 124.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(267 * elijia, 268.546875 * elijia);
  ece.bezierCurveTo(265 * elijia, 170.546875 * elijia, 364 * elijia, 127.546875 * elijia, 407 * elijia, 132.546875 * elijia);
  ece.bezierCurveTo(427 * elijia, 204.546875 * elijia, 341 * elijia, 277.546875 * elijia, 268 * elijia, 271.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(270 * elijia, 269.546875 * elijia);
  ece.bezierCurveTo(370 * elijia, 251.546875 * elijia, 410 * elijia, 328.546875 * elijia, 420 * elijia, 399.546875 * elijia);
  ece.bezierCurveTo(292 * elijia, 412.546875 * elijia, 275 * elijia, 313.546875 * elijia, 269 * elijia, 272.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  ece.beginPath();
  ece.lineCap = "round";
  ece.lineJoin = "round";
  ece.moveTo(273 * elijia, 266.546875 * elijia);
  ece.bezierCurveTo(291 * elijia, 370.546875 * elijia, 235 * elijia, 428.546875 * elijia, 173 * elijia, 451.546875 * elijia);
  ece.bezierCurveTo(124 * elijia, 365.546875 * elijia, 217 * elijia, 274.546875 * elijia, 272 * elijia, 265.546875 * elijia);
  ece.closePath();
  fill_path(ece, decklynn[6], decklynn[7], 2 * elijia);
  circle(ece, 266 * elijia, 251.546875 * elijia, 19.1049731745428 * elijia);
  fill_path(ece, decklynn[8], decklynn[9], 2 * elijia);
  circle(ece, 292 * elijia, 274.546875 * elijia, 15.556349186104045 * elijia);
  fill_path(ece, decklynn[8], decklynn[9], 2 * elijia);
  circle(ece, 258 * elijia, 291.546875 * elijia, 17.029386365926403 * elijia);
  fill_path(ece, decklynn[8], decklynn[9], 2 * elijia);
  return cheenue;
}
function create_kraken(davaunte, jacci) {
  var taiwanda = document.createElement("canvas");
  var jrae = taiwanda.getContext("2d");
  taiwanda.width = 376 * davaunte;
  taiwanda.height = 371 * davaunte;
  jrae.globalAlpha = .5;
  jrae.translate(5 * davaunte, 5 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(191.633544921875 * davaunte, 123.98580932617188 * davaunte);
  jrae.bezierCurveTo(215.633544921875 * davaunte, 85.98580932617188 * davaunte, 187.633544921875 * davaunte, 71.98580932617188 * davaunte, 202.633544921875 * davaunte, 19.985809326171875 * davaunte);
  jrae.bezierCurveTo(231.633544921875 * davaunte, 68.98580932617188 * davaunte, 253.633544921875 * davaunte, 71.98580932617188 * davaunte, 256.633544921875 * davaunte, 93.98580932617188 * davaunte);
  jrae.bezierCurveTo(306.633544921875 * davaunte, 64.98580932617188 * davaunte, 319.633544921875 * davaunte, 61.985809326171875 * davaunte, 350.633544921875 * davaunte, 58.985809326171875 * davaunte);
  jrae.bezierCurveTo(280.633544921875 * davaunte, 86.98580932617188 * davaunte, 281.633544921875 * davaunte, 106.98580932617188 * davaunte, 268.633544921875 * davaunte, 130.98580932617188 * davaunte);
  jrae.bezierCurveTo(295.633544921875 * davaunte, 158.98580932617188 * davaunte, 328.633544921875 * davaunte, 155.98580932617188 * davaunte, 353.633544921875 * davaunte, 90.98580932617188 * davaunte);
  jrae.bezierCurveTo(371.633544921875 * davaunte, 158.98580932617188 * davaunte, 337.633544921875 * davaunte, 210.98580932617188 * davaunte, 286.633544921875 * davaunte, 209.98580932617188 * davaunte);
  jrae.bezierCurveTo(323.633544921875 * davaunte, 230.98580932617188 * davaunte, 317.633544921875 * davaunte, 274.9858093261719 * davaunte, 356.633544921875 * davaunte, 305.9858093261719 * davaunte);
  jrae.bezierCurveTo(288.633544921875 * davaunte, 297.9858093261719 * davaunte, 288.633544921875 * davaunte, 265.9858093261719 * davaunte, 275.633544921875 * davaunte, 266.9858093261719 * davaunte);
  jrae.bezierCurveTo(280.633544921875 * davaunte, 294.9858093261719 * davaunte, 315.633544921875 * davaunte, 306.9858093261719 * davaunte, 336.633544921875 * davaunte, 316.9858093261719 * davaunte);
  jrae.bezierCurveTo(295.633544921875 * davaunte, 318.9858093261719 * davaunte, 264.633544921875 * davaunte, 302.9858093261719 * davaunte, 254.633544921875 * davaunte, 289.9858093261719 * davaunte);
  jrae.bezierCurveTo(252.633544921875 * davaunte, 301.9858093261719 * davaunte, 224.633544921875 * davaunte, 315.9858093261719 * davaunte, 201.633544921875 * davaunte, 356.9858093261719 * davaunte);
  jrae.bezierCurveTo(195.633544921875 * davaunte, 313.9858093261719 * davaunte, 195.633544921875 * davaunte, 308.9858093261719 * davaunte, 196.633544921875 * davaunte, 307.9858093261719 * davaunte);
  jrae.bezierCurveTo(197.633544921875 * davaunte, 289.9858093261719 * davaunte, 207.633544921875 * davaunte, 283.9858093261719 * davaunte, 195.633544921875 * davaunte, 258.9858093261719 * davaunte);
  jrae.bezierCurveTo(182.633544921875 * davaunte, 282.9858093261719 * davaunte, 190.633544921875 * davaunte, 287.9858093261719 * davaunte, 193.633544921875 * davaunte, 297.9858093261719 * davaunte);
  jrae.bezierCurveTo(195.633544921875 * davaunte, 306.9858093261719 * davaunte, 191.633544921875 * davaunte, 334.9858093261719 * davaunte, 187.633544921875 * davaunte, 354.9858093261719 * davaunte);
  jrae.bezierCurveTo(165.633544921875 * davaunte, 320.9858093261719 * davaunte, 138.633544921875 * davaunte, 307.9858093261719 * davaunte, 135.633544921875 * davaunte, 288.9858093261719 * davaunte);
  jrae.bezierCurveTo(110.633544921875 * davaunte, 318.9858093261719 * davaunte, 68.633544921875 * davaunte, 323.9858093261719 * davaunte, 49.633544921875 * davaunte, 320.9858093261719 * davaunte);
  jrae.bezierCurveTo(88.633544921875 * davaunte, 308.9858093261719 * davaunte, 108.633544921875 * davaunte, 284.9858093261719 * davaunte, 118.633544921875 * davaunte, 258.9858093261719 * davaunte);
  jrae.bezierCurveTo(86.633544921875 * davaunte, 264.9858093261719 * davaunte, 75.633544921875 * davaunte, 310.9858093261719 * davaunte, 19.633544921875 * davaunte, 304.9858093261719 * davaunte);
  jrae.bezierCurveTo(54.633544921875 * davaunte, 276.9858093261719 * davaunte, 59.633544921875 * davaunte, 214.98580932617188 * davaunte, 105.633544921875 * davaunte, 205.98580932617188 * davaunte);
  jrae.bezierCurveTo(14.633544921875 * davaunte, 201.98580932617188 * davaunte, 24.633544921875 * davaunte, 141.98580932617188 * davaunte, 25.633544921875 * davaunte, 82.98580932617188 * davaunte);
  jrae.bezierCurveTo(49.633544921875 * davaunte, 168.98580932617188 * davaunte, 87.633544921875 * davaunte, 141.98580932617188 * davaunte, 112.633544921875 * davaunte, 123.98580932617188 * davaunte);
  jrae.bezierCurveTo(95.633544921875 * davaunte, 75.98580932617188 * davaunte, 70.633544921875 * davaunte, 68.98580932617188 * davaunte, 35.633544921875 * davaunte, 50.985809326171875 * davaunte);
  jrae.bezierCurveTo(70.633544921875 * davaunte, 53.985809326171875 * davaunte, 102.633544921875 * davaunte, 65.98580932617188 * davaunte, 125.633544921875 * davaunte, 84.98580932617188 * davaunte);
  jrae.bezierCurveTo(133.633544921875 * davaunte, 69.98580932617188 * davaunte, 166.633544921875 * davaunte, 42.985809326171875 * davaunte, 176.633544921875 * davaunte, 21.985809326171875 * davaunte);
  jrae.bezierCurveTo(185.633544921875 * davaunte, 49.985809326171875 * davaunte, 168.633544921875 * davaunte, 95.98580932617188 * davaunte, 191.633544921875 * davaunte, 121.98580932617188 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[0]);
  jrae.globalAlpha = 1;
  jrae.translate(-4 * davaunte, -5 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(191.633544921875 * davaunte, 123.98580932617188 * davaunte);
  jrae.bezierCurveTo(215.633544921875 * davaunte, 85.98580932617188 * davaunte, 187.633544921875 * davaunte, 71.98580932617188 * davaunte, 202.633544921875 * davaunte, 19.985809326171875 * davaunte);
  jrae.bezierCurveTo(231.633544921875 * davaunte, 68.98580932617188 * davaunte, 253.633544921875 * davaunte, 71.98580932617188 * davaunte, 256.633544921875 * davaunte, 93.98580932617188 * davaunte);
  jrae.bezierCurveTo(306.633544921875 * davaunte, 64.98580932617188 * davaunte, 319.633544921875 * davaunte, 61.985809326171875 * davaunte, 350.633544921875 * davaunte, 58.985809326171875 * davaunte);
  jrae.bezierCurveTo(280.633544921875 * davaunte, 86.98580932617188 * davaunte, 281.633544921875 * davaunte, 106.98580932617188 * davaunte, 268.633544921875 * davaunte, 130.98580932617188 * davaunte);
  jrae.bezierCurveTo(295.633544921875 * davaunte, 158.98580932617188 * davaunte, 328.633544921875 * davaunte, 155.98580932617188 * davaunte, 353.633544921875 * davaunte, 90.98580932617188 * davaunte);
  jrae.bezierCurveTo(371.633544921875 * davaunte, 158.98580932617188 * davaunte, 337.633544921875 * davaunte, 210.98580932617188 * davaunte, 286.633544921875 * davaunte, 209.98580932617188 * davaunte);
  jrae.bezierCurveTo(323.633544921875 * davaunte, 230.98580932617188 * davaunte, 317.633544921875 * davaunte, 274.9858093261719 * davaunte, 356.633544921875 * davaunte, 305.9858093261719 * davaunte);
  jrae.bezierCurveTo(288.633544921875 * davaunte, 297.9858093261719 * davaunte, 288.633544921875 * davaunte, 265.9858093261719 * davaunte, 275.633544921875 * davaunte, 266.9858093261719 * davaunte);
  jrae.bezierCurveTo(280.633544921875 * davaunte, 294.9858093261719 * davaunte, 315.633544921875 * davaunte, 306.9858093261719 * davaunte, 336.633544921875 * davaunte, 316.9858093261719 * davaunte);
  jrae.bezierCurveTo(295.633544921875 * davaunte, 318.9858093261719 * davaunte, 264.633544921875 * davaunte, 302.9858093261719 * davaunte, 254.633544921875 * davaunte, 289.9858093261719 * davaunte);
  jrae.bezierCurveTo(252.633544921875 * davaunte, 301.9858093261719 * davaunte, 224.633544921875 * davaunte, 315.9858093261719 * davaunte, 201.633544921875 * davaunte, 356.9858093261719 * davaunte);
  jrae.bezierCurveTo(195.633544921875 * davaunte, 313.9858093261719 * davaunte, 195.633544921875 * davaunte, 308.9858093261719 * davaunte, 196.633544921875 * davaunte, 307.9858093261719 * davaunte);
  jrae.bezierCurveTo(197.633544921875 * davaunte, 289.9858093261719 * davaunte, 207.633544921875 * davaunte, 283.9858093261719 * davaunte, 195.633544921875 * davaunte, 258.9858093261719 * davaunte);
  jrae.bezierCurveTo(182.633544921875 * davaunte, 282.9858093261719 * davaunte, 190.633544921875 * davaunte, 287.9858093261719 * davaunte, 193.633544921875 * davaunte, 297.9858093261719 * davaunte);
  jrae.bezierCurveTo(195.633544921875 * davaunte, 306.9858093261719 * davaunte, 191.633544921875 * davaunte, 334.9858093261719 * davaunte, 187.633544921875 * davaunte, 354.9858093261719 * davaunte);
  jrae.bezierCurveTo(165.633544921875 * davaunte, 320.9858093261719 * davaunte, 138.633544921875 * davaunte, 307.9858093261719 * davaunte, 135.633544921875 * davaunte, 288.9858093261719 * davaunte);
  jrae.bezierCurveTo(110.633544921875 * davaunte, 318.9858093261719 * davaunte, 68.633544921875 * davaunte, 323.9858093261719 * davaunte, 49.633544921875 * davaunte, 320.9858093261719 * davaunte);
  jrae.bezierCurveTo(88.633544921875 * davaunte, 308.9858093261719 * davaunte, 108.633544921875 * davaunte, 284.9858093261719 * davaunte, 118.633544921875 * davaunte, 258.9858093261719 * davaunte);
  jrae.bezierCurveTo(86.633544921875 * davaunte, 264.9858093261719 * davaunte, 75.633544921875 * davaunte, 310.9858093261719 * davaunte, 19.633544921875 * davaunte, 304.9858093261719 * davaunte);
  jrae.bezierCurveTo(54.633544921875 * davaunte, 276.9858093261719 * davaunte, 59.633544921875 * davaunte, 214.98580932617188 * davaunte, 105.633544921875 * davaunte, 205.98580932617188 * davaunte);
  jrae.bezierCurveTo(14.633544921875 * davaunte, 201.98580932617188 * davaunte, 24.633544921875 * davaunte, 141.98580932617188 * davaunte, 25.633544921875 * davaunte, 82.98580932617188 * davaunte);
  jrae.bezierCurveTo(49.633544921875 * davaunte, 168.98580932617188 * davaunte, 87.633544921875 * davaunte, 141.98580932617188 * davaunte, 112.633544921875 * davaunte, 123.98580932617188 * davaunte);
  jrae.bezierCurveTo(95.633544921875 * davaunte, 75.98580932617188 * davaunte, 70.633544921875 * davaunte, 68.98580932617188 * davaunte, 35.633544921875 * davaunte, 50.985809326171875 * davaunte);
  jrae.bezierCurveTo(70.633544921875 * davaunte, 53.985809326171875 * davaunte, 102.633544921875 * davaunte, 65.98580932617188 * davaunte, 125.633544921875 * davaunte, 84.98580932617188 * davaunte);
  jrae.bezierCurveTo(133.633544921875 * davaunte, 69.98580932617188 * davaunte, 166.633544921875 * davaunte, 42.985809326171875 * davaunte, 176.633544921875 * davaunte, 21.985809326171875 * davaunte);
  jrae.bezierCurveTo(185.633544921875 * davaunte, 49.985809326171875 * davaunte, 168.633544921875 * davaunte, 95.98580932617188 * davaunte, 191.633544921875 * davaunte, 121.98580932617188 * davaunte);
  jrae.closePath();
  fill_path(jrae, undefined, jacci[1], 12 * davaunte);
  jrae.translate(-1 * davaunte, 0 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(270.633544921875 * davaunte, 88.98580932617188 * davaunte);
  jrae.bezierCurveTo(296.633544921875 * davaunte, 65.98580932617188 * davaunte, 318.633544921875 * davaunte, 62.985809326171875 * davaunte, 348.633544921875 * davaunte, 57.985809326171875 * davaunte);
  jrae.bezierCurveTo(309.633544921875 * davaunte, 76.98580932617188 * davaunte, 291.633544921875 * davaunte, 88.98580932617188 * davaunte, 280.633544921875 * davaunte, 99.98580932617188 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[4], jacci[5], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(275.633544921875 * davaunte, 281.9858093261719 * davaunte);
  jrae.bezierCurveTo(303.633544921875 * davaunte, 308.9858093261719 * davaunte, 321.633544921875 * davaunte, 308.9858093261719 * davaunte, 335.633544921875 * davaunte, 315.9858093261719 * davaunte);
  jrae.bezierCurveTo(305.633544921875 * davaunte, 320.9858093261719 * davaunte, 278.633544921875 * davaunte, 307.9858093261719 * davaunte, 264.633544921875 * davaunte, 293.9858093261719 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[4], jacci[5], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(124.633544921875 * davaunte, 291.9858093261719 * davaunte);
  jrae.bezierCurveTo(106.633544921875 * davaunte, 316.9858093261719 * davaunte, 72.633544921875 * davaunte, 325.9858093261719 * davaunte, 53.633544921875 * davaunte, 319.9858093261719 * davaunte);
  jrae.bezierCurveTo(83.633544921875 * davaunte, 308.9858093261719 * davaunte, 97.633544921875 * davaunte, 298.9858093261719 * davaunte, 112.633544921875 * davaunte, 284.9858093261719 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[4], jacci[5], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(113.633544921875 * davaunte, 80.98580932617188 * davaunte);
  jrae.bezierCurveTo(91.633544921875 * davaunte, 54.985809326171875 * davaunte, 72.633544921875 * davaunte, 56.985809326171875 * davaunte, 36.633544921875 * davaunte, 49.985809326171875 * davaunte);
  jrae.bezierCurveTo(87.633544921875 * davaunte, 72.98580932617188 * davaunte, 95.633544921875 * davaunte, 82.98580932617188 * davaunte, 106.633544921875 * davaunte, 96.98580932617188 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[4], jacci[5], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(202.633544921875 * davaunte, 20.985809326171875 * davaunte);
  jrae.bezierCurveTo(219.633544921875 * davaunte, 49.985809326171875 * davaunte, 259.633544921875 * davaunte, 80.98580932617188 * davaunte, 255.633544921875 * davaunte, 92.98580932617188 * davaunte);
  jrae.bezierCurveTo(268.633544921875 * davaunte, 86.98580932617188 * davaunte, 265.633544921875 * davaunte, 87.98580932617188 * davaunte, 275.633544921875 * davaunte, 82.98580932617188 * davaunte);
  jrae.bezierCurveTo(283.633544921875 * davaunte, 87.98580932617188 * davaunte, 283.633544921875 * davaunte, 87.98580932617188 * davaunte, 291.633544921875 * davaunte, 92.98580932617188 * davaunte);
  jrae.bezierCurveTo(269.633544921875 * davaunte, 116.98580932617188 * davaunte, 270.633544921875 * davaunte, 124.98580932617188 * davaunte, 267.633544921875 * davaunte, 130.98580932617188 * davaunte);
  jrae.bezierCurveTo(307.633544921875 * davaunte, 168.98580932617188 * davaunte, 339.633544921875 * davaunte, 132.98580932617188 * davaunte, 352.633544921875 * davaunte, 93.98580932617188 * davaunte);
  jrae.bezierCurveTo(366.633544921875 * davaunte, 145.98580932617188 * davaunte, 345.633544921875 * davaunte, 207.98580932617188 * davaunte, 286.633544921875 * davaunte, 208.98580932617188 * davaunte);
  jrae.bezierCurveTo(315.633544921875 * davaunte, 223.98580932617188 * davaunte, 327.633544921875 * davaunte, 287.9858093261719 * davaunte, 355.633544921875 * davaunte, 305.9858093261719 * davaunte);
  jrae.bezierCurveTo(293.633544921875 * davaunte, 298.9858093261719 * davaunte, 293.633544921875 * davaunte, 275.9858093261719 * davaunte, 276.633544921875 * davaunte, 266.9858093261719 * davaunte);
  jrae.bezierCurveTo(274.633544921875 * davaunte, 282.9858093261719 * davaunte, 287.633544921875 * davaunte, 288.9858093261719 * davaunte, 295.633544921875 * davaunte, 296.9858093261719 * davaunte);
  jrae.bezierCurveTo(287.133544921875 * davaunte, 302.4858093261719 * davaunte, 287.133544921875 * davaunte, 302.4858093261719 * davaunte, 278.633544921875 * davaunte, 307.9858093261719 * davaunte);
  jrae.bezierCurveTo(261.633544921875 * davaunte, 297.9858093261719 * davaunte, 258.633544921875 * davaunte, 293.9858093261719 * davaunte, 255.633544921875 * davaunte, 290.9858093261719 * davaunte);
  jrae.bezierCurveTo(249.633544921875 * davaunte, 301.9858093261719 * davaunte, 225.633544921875 * davaunte, 320.9858093261719 * davaunte, 202.633544921875 * davaunte, 354.9858093261719 * davaunte);
  jrae.bezierCurveTo(195.633544921875 * davaunte, 318.9858093261719 * davaunte, 196.633544921875 * davaunte, 306.9858093261719 * davaunte, 198.633544921875 * davaunte, 300.9858093261719 * davaunte);
  jrae.bezierCurveTo(209.633544921875 * davaunte, 268.9858093261719 * davaunte, 199.633544921875 * davaunte, 266.9858093261719 * davaunte, 195.633544921875 * davaunte, 256.9858093261719 * davaunte);
  jrae.bezierCurveTo(183.633544921875 * davaunte, 274.9858093261719 * davaunte, 182.633544921875 * davaunte, 281.9858093261719 * davaunte, 192.633544921875 * davaunte, 305.9858093261719 * davaunte);
  jrae.bezierCurveTo(194.633544921875 * davaunte, 317.9858093261719 * davaunte, 191.633544921875 * davaunte, 336.9858093261719 * davaunte, 186.633544921875 * davaunte, 351.9858093261719 * davaunte);
  jrae.bezierCurveTo(166.633544921875 * davaunte, 318.9858093261719 * davaunte, 141.633544921875 * davaunte, 303.9858093261719 * davaunte, 136.633544921875 * davaunte, 286.9858093261719 * davaunte);
  jrae.bezierCurveTo(122.633544921875 * davaunte, 303.9858093261719 * davaunte, 115.633544921875 * davaunte, 305.9858093261719 * davaunte, 109.633544921875 * davaunte, 306.9858093261719 * davaunte);
  jrae.bezierCurveTo(101.133544921875 * davaunte, 301.9858093261719 * davaunte, 94.633544921875 * davaunte, 297.9858093261719 * davaunte, 92.633544921875 * davaunte, 296.9858093261719 * davaunte);
  jrae.bezierCurveTo(116.633544921875 * davaunte, 277.9858093261719 * davaunte, 116.633544921875 * davaunte, 266.9858093261719 * davaunte, 119.633544921875 * davaunte, 257.9858093261719 * davaunte);
  jrae.bezierCurveTo(107.633544921875 * davaunte, 257.9858093261719 * davaunte, 65.633544921875 * davaunte, 308.9858093261719 * davaunte, 24.633544921875 * davaunte, 303.9858093261719 * davaunte);
  jrae.bezierCurveTo(51.633544921875 * davaunte, 275.9858093261719 * davaunte, 64.633544921875 * davaunte, 220.98580932617188 * davaunte, 108.633544921875 * davaunte, 205.98580932617188 * davaunte);
  jrae.bezierCurveTo(14.633544921875 * davaunte, 198.98580932617188 * davaunte, 26.633544921875 * davaunte, 142.98580932617188 * davaunte, 25.633544921875 * davaunte, 86.98580932617188 * davaunte);
  jrae.bezierCurveTo(41.633544921875 * davaunte, 155.98580932617188 * davaunte, 81.633544921875 * davaunte, 148.98580932617188 * davaunte, 113.633544921875 * davaunte, 124.98580932617188 * davaunte);
  jrae.bezierCurveTo(102.633544921875 * davaunte, 93.98580932617188 * davaunte, 95.633544921875 * davaunte, 88.98580932617188 * davaunte, 89.633544921875 * davaunte, 81.98580932617188 * davaunte);
  jrae.bezierCurveTo(97.633544921875 * davaunte, 76.48580932617188 * davaunte, 97.633544921875 * davaunte, 76.48580932617188 * davaunte, 105.633544921875 * davaunte, 70.98580932617188 * davaunte);
  jrae.bezierCurveTo(120.633544921875 * davaunte, 78.98580932617188 * davaunte, 121.633544921875 * davaunte, 81.98580932617188 * davaunte, 124.633544921875 * davaunte, 86.98580932617188 * davaunte);
  jrae.bezierCurveTo(132.633544921875 * davaunte, 71.98580932617188 * davaunte, 160.633544921875 * davaunte, 56.985809326171875 * davaunte, 175.633544921875 * davaunte, 23.985809326171875 * davaunte);
  jrae.bezierCurveTo(182.633544921875 * davaunte, 53.985809326171875 * davaunte, 170.633544921875 * davaunte, 102.98580932617188 * davaunte, 191.633544921875 * davaunte, 125.98580932617188 * davaunte);
  jrae.bezierCurveTo(214.633544921875 * davaunte, 89.98580932617188 * davaunte, 192.633544921875 * davaunte, 58.985809326171875 * davaunte, 202.633544921875 * davaunte, 20.985809326171875 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[2], jacci[3], 5 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(203.633544921875 * davaunte, 21.985809326171875 * davaunte);
  jrae.bezierCurveTo(223.633544921875 * davaunte, 63.985809326171875 * davaunte, 227.633544921875 * davaunte, 72.98580932617188 * davaunte, 235.633544921875 * davaunte, 98.98580932617188 * davaunte);
  jrae.bezierCurveTo(241.633544921875 * davaunte, 123.98580932617188 * davaunte, 225.633544921875 * davaunte, 138.98580932617188 * davaunte, 196.633544921875 * davaunte, 122.98580932617188 * davaunte);
  jrae.bezierCurveTo(213.633544921875 * davaunte, 93.98580932617188 * davaunte, 199.633544921875 * davaunte, 49.985809326171875 * davaunte, 203.633544921875 * davaunte, 26.985809326171875 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[3]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(175.633544921875 * davaunte, 25.985809326171875 * davaunte);
  jrae.bezierCurveTo(176.633544921875 * davaunte, 51.985809326171875 * davaunte, 171.633544921875 * davaunte, 88.98580932617188 * davaunte, 186.633544921875 * davaunte, 121.98580932617188 * davaunte);
  jrae.bezierCurveTo(156.633544921875 * davaunte, 144.98580932617188 * davaunte, 139.633544921875 * davaunte, 120.98580932617188 * davaunte, 147.633544921875 * davaunte, 97.98580932617188 * davaunte);
  jrae.bezierCurveTo(152.633544921875 * davaunte, 77.98580932617188 * davaunte, 162.633544921875 * davaunte, 60.985809326171875 * davaunte, 176.633544921875 * davaunte, 25.985809326171875 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[3]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(26.633544921875 * davaunte, 96.98580932617188 * davaunte);
  jrae.bezierCurveTo(38.633544921875 * davaunte, 151.98580932617188 * davaunte, 61.633544921875 * davaunte, 161.98580932617188 * davaunte, 88.633544921875 * davaunte, 168.98580932617188 * davaunte);
  jrae.bezierCurveTo(117.633544921875 * davaunte, 177.98580932617188 * davaunte, 113.633544921875 * davaunte, 185.98580932617188 * davaunte, 106.633544921875 * davaunte, 204.98580932617188 * davaunte);
  jrae.bezierCurveTo(32.633544921875 * davaunte, 204.98580932617188 * davaunte, 25.633544921875 * davaunte, 149.98580932617188 * davaunte, 25.633544921875 * davaunte, 97.98580932617188 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[3]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(351.633544921875 * davaunte, 99.98580932617188 * davaunte);
  jrae.bezierCurveTo(365.633544921875 * davaunte, 161.98580932617188 * davaunte, 333.633544921875 * davaunte, 203.98580932617188 * davaunte, 287.633544921875 * davaunte, 207.98580932617188 * davaunte);
  jrae.bezierCurveTo(255.633544921875 * davaunte, 208.98580932617188 * davaunte, 266.633544921875 * davaunte, 174.98580932617188 * davaunte, 285.633544921875 * davaunte, 176.98580932617188 * davaunte);
  jrae.bezierCurveTo(313.633544921875 * davaunte, 178.98580932617188 * davaunte, 348.633544921875 * davaunte, 135.98580932617188 * davaunte, 353.633544921875 * davaunte, 99.98580932617188 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[3]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(350.633544921875 * davaunte, 302.9858093261719 * davaunte);
  jrae.bezierCurveTo(310.633544921875 * davaunte, 280.9858093261719 * davaunte, 314.633544921875 * davaunte, 244.98580932617188 * davaunte, 292.633544921875 * davaunte, 230.98580932617188 * davaunte);
  jrae.bezierCurveTo(272.633544921875 * davaunte, 215.98580932617188 * davaunte, 263.633544921875 * davaunte, 222.98580932617188 * davaunte, 256.633544921875 * davaunte, 236.98580932617188 * davaunte);
  jrae.bezierCurveTo(251.633544921875 * davaunte, 249.98580932617188 * davaunte, 264.633544921875 * davaunte, 255.98580932617188 * davaunte, 279.633544921875 * davaunte, 268.9858093261719 * davaunte);
  jrae.bezierCurveTo(306.633544921875 * davaunte, 295.9858093261719 * davaunte, 325.633544921875 * davaunte, 299.9858093261719 * davaunte, 349.633544921875 * davaunte, 302.9858093261719 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[3]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(95.633544921875 * davaunte, 224.98580932617188 * davaunte);
  jrae.bezierCurveTo(64.633544921875 * davaunte, 245.98580932617188 * davaunte, 62.633544921875 * davaunte, 280.9858093261719 * davaunte, 32.633544921875 * davaunte, 303.9858093261719 * davaunte);
  jrae.bezierCurveTo(59.633544921875 * davaunte, 301.9858093261719 * davaunte, 102.633544921875 * davaunte, 260.9858093261719 * davaunte, 116.633544921875 * davaunte, 255.98580932617188 * davaunte);
  jrae.bezierCurveTo(139.633544921875 * davaunte, 229.98580932617188 * davaunte, 108.633544921875 * davaunte, 209.98580932617188 * davaunte, 97.633544921875 * davaunte, 224.98580932617188 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[3]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(195.633544921875 * davaunte, 253.98580932617188 * davaunte);
  jrae.bezierCurveTo(209.633544921875 * davaunte, 282.9858093261719 * davaunte, 205.633544921875 * davaunte, 278.9858093261719 * davaunte, 199.633544921875 * davaunte, 307.9858093261719 * davaunte);
  jrae.bezierCurveTo(198.633544921875 * davaunte, 332.9858093261719 * davaunte, 201.633544921875 * davaunte, 340.9858093261719 * davaunte, 202.633544921875 * davaunte, 348.9858093261719 * davaunte);
  jrae.bezierCurveTo(215.633544921875 * davaunte, 313.9858093261719 * davaunte, 226.633544921875 * davaunte, 291.9858093261719 * davaunte, 235.633544921875 * davaunte, 270.9858093261719 * davaunte);
  jrae.bezierCurveTo(243.633544921875 * davaunte, 247.98580932617188 * davaunte, 219.633544921875 * davaunte, 235.98580932617188 * davaunte, 196.633544921875 * davaunte, 252.98580932617188 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[3]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(195.633544921875 * davaunte, 251.98580932617188 * davaunte);
  jrae.bezierCurveTo(176.633544921875 * davaunte, 275.9858093261719 * davaunte, 182.633544921875 * davaunte, 285.9858093261719 * davaunte, 191.633544921875 * davaunte, 308.9858093261719 * davaunte);
  jrae.bezierCurveTo(194.633544921875 * davaunte, 318.9858093261719 * davaunte, 190.633544921875 * davaunte, 334.9858093261719 * davaunte, 186.633544921875 * davaunte, 348.9858093261719 * davaunte);
  jrae.bezierCurveTo(175.633544921875 * davaunte, 307.9858093261719 * davaunte, 157.633544921875 * davaunte, 291.9858093261719 * davaunte, 155.633544921875 * davaunte, 272.9858093261719 * davaunte);
  jrae.bezierCurveTo(150.633544921875 * davaunte, 243.98580932617188 * davaunte, 170.633544921875 * davaunte, 236.98580932617188 * davaunte, 195.633544921875 * davaunte, 251.98580932617188 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[3]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(316 * davaunte, 186.8020782470703 * davaunte);
  jrae.bezierCurveTo(315 * davaunte, 173.8020782470703 * davaunte, 298 * davaunte, 177.8020782470703 * davaunte, 293 * davaunte, 183.8020782470703 * davaunte);
  jrae.bezierCurveTo(285 * davaunte, 195.8020782470703 * davaunte, 314 * davaunte, 197.8020782470703 * davaunte, 315 * davaunte, 187.8020782470703 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(340 * davaunte, 157.8020782470703 * davaunte);
  jrae.bezierCurveTo(327 * davaunte, 153.8020782470703 * davaunte, 321 * davaunte, 168.8020782470703 * davaunte, 330 * davaunte, 174.8020782470703 * davaunte);
  jrae.bezierCurveTo(341 * davaunte, 178.8020782470703 * davaunte, 347 * davaunte, 161.8020782470703 * davaunte, 341 * davaunte, 157.8020782470703 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(349 * davaunte, 136.8020782470703 * davaunte);
  jrae.bezierCurveTo(343 * davaunte, 135.8020782470703 * davaunte, 342 * davaunte, 139.8020782470703 * davaunte, 341 * davaunte, 147.8020782470703 * davaunte);
  jrae.bezierCurveTo(343 * davaunte, 155.8020782470703 * davaunte, 353 * davaunte, 143.8020782470703 * davaunte, 349 * davaunte, 137.8020782470703 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(278.75 * davaunte, 246.4375 * davaunte);
  jrae.bezierCurveTo(288.75 * davaunte, 242.4375 * davaunte, 301.75 * davaunte, 248.4375 * davaunte, 298.75 * davaunte, 262.4375 * davaunte);
  jrae.bezierCurveTo(293.75 * davaunte, 271.4375 * davaunte, 287.75 * davaunte, 271.4375 * davaunte, 278.75 * davaunte, 262.4375 * davaunte);
  jrae.bezierCurveTo(271.75 * davaunte, 255.4375 * davaunte, 274.75 * davaunte, 250.4375 * davaunte, 277.75 * davaunte, 247.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(310.75 * davaunte, 277.4375 * davaunte);
  jrae.bezierCurveTo(319.75 * davaunte, 280.4375 * davaunte, 322.75 * davaunte, 283.4375 * davaunte, 321.75 * davaunte, 289.4375 * davaunte);
  jrae.bezierCurveTo(319.75 * davaunte, 295.4375 * davaunte, 313.75 * davaunte, 291.4375 * davaunte, 308.75 * davaunte, 288.4375 * davaunte);
  jrae.bezierCurveTo(301.75 * davaunte, 281.4375 * davaunte, 306.75 * davaunte, 277.4375 * davaunte, 309.75 * davaunte, 277.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(217.75 * davaunte, 257.4375 * davaunte);
  jrae.bezierCurveTo(227.75 * davaunte, 269.4375 * davaunte, 220.75 * davaunte, 281.4375 * davaunte, 212.75 * davaunte, 280.4375 * davaunte);
  jrae.bezierCurveTo(206.75 * davaunte, 279.4375 * davaunte, 206.75 * davaunte, 269.4375 * davaunte, 204.75 * davaunte, 260.4375 * davaunte);
  jrae.bezierCurveTo(204.75 * davaunte, 254.4375 * davaunte, 211.75 * davaunte, 253.4375 * davaunte, 216.75 * davaunte, 256.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(211.75 * davaunte, 289.4375 * davaunte);
  jrae.bezierCurveTo(219.75 * davaunte, 292.4375 * davaunte, 213.75 * davaunte, 306.4375 * davaunte, 206.75 * davaunte, 307.4375 * davaunte);
  jrae.bezierCurveTo(199.75 * davaunte, 303.4375 * davaunte, 209.75 * davaunte, 287.4375 * davaunte, 210.75 * davaunte, 289.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(171.75 * davaunte, 256.4375 * davaunte);
  jrae.bezierCurveTo(162.75 * davaunte, 273.4375 * davaunte, 166.75 * davaunte, 278.4375 * davaunte, 175.75 * davaunte, 280.4375 * davaunte);
  jrae.bezierCurveTo(183.75 * davaunte, 278.4375 * davaunte, 185.75 * davaunte, 257.4375 * davaunte, 182.75 * davaunte, 255.4375 * davaunte);
  jrae.bezierCurveTo(176.75 * davaunte, 251.4375 * davaunte, 172.75 * davaunte, 253.4375 * davaunte, 172.75 * davaunte, 256.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(175.75 * davaunte, 289.9375 * davaunte);
  jrae.bezierCurveTo(183.75 * davaunte, 287.9375 * davaunte, 186.75 * davaunte, 301.9375 * davaunte, 182.75 * davaunte, 305.9375 * davaunte);
  jrae.bezierCurveTo(176.75 * davaunte, 307.9375 * davaunte, 171.75 * davaunte, 292.9375 * davaunte, 174.75 * davaunte, 290.9375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(205.75 * davaunte, 314.4375 * davaunte);
  jrae.bezierCurveTo(209.75 * davaunte, 316.4375 * davaunte, 210.75 * davaunte, 320.4375 * davaunte, 206.75 * davaunte, 323.4375 * davaunte);
  jrae.bezierCurveTo(201.75 * davaunte, 324.4375 * davaunte, 201.75 * davaunte, 314.4375 * davaunte, 204.75 * davaunte, 314.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(186.75 * davaunte, 313.4375 * davaunte);
  jrae.bezierCurveTo(181.75 * davaunte, 315.4375 * davaunte, 180.75 * davaunte, 321.4375 * davaunte, 185.75 * davaunte, 326.4375 * davaunte);
  jrae.bezierCurveTo(190.75 * davaunte, 327.4375 * davaunte, 190.75 * davaunte, 313.4375 * davaunte, 187.75 * davaunte, 314.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(103.75 * davaunte, 244.4375 * davaunte);
  jrae.bezierCurveTo(96.75 * davaunte, 239.4375 * davaunte, 83.75 * davaunte, 240.4375 * davaunte, 81.75 * davaunte, 255.4375 * davaunte);
  jrae.bezierCurveTo(80.75 * davaunte, 264.4375 * davaunte, 89.75 * davaunte, 269.4375 * davaunte, 99.75 * davaunte, 260.4375 * davaunte);
  jrae.bezierCurveTo(106.75 * davaunte, 254.4375 * davaunte, 106.75 * davaunte, 250.4375 * davaunte, 104.75 * davaunte, 245.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(86.75 * davaunte, 182.4375 * davaunte);
  jrae.bezierCurveTo(82.75 * davaunte, 170.4375 * davaunte, 66.75 * davaunte, 169.4375 * davaunte, 61.75 * davaunte, 181.4375 * davaunte);
  jrae.bezierCurveTo(58.75 * davaunte, 187.4375 * davaunte, 68.75 * davaunte, 194.4375 * davaunte, 75.75 * davaunte, 192.4375 * davaunte);
  jrae.bezierCurveTo(83.75 * davaunte, 192.4375 * davaunte, 86.75 * davaunte, 187.4375 * davaunte, 86.75 * davaunte, 183.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(44.75 * davaunte, 152.4375 * davaunte);
  jrae.bezierCurveTo(55.75 * davaunte, 159.4375 * davaunte, 54.75 * davaunte, 170.4375 * davaunte, 46.75 * davaunte, 171.4375 * davaunte);
  jrae.bezierCurveTo(39.75 * davaunte, 170.4375 * davaunte, 34.75 * davaunte, 151.4375 * davaunte, 43.75 * davaunte, 152.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(31.75 * davaunte, 130.4375 * davaunte);
  jrae.bezierCurveTo(35.75 * davaunte, 132.4375 * davaunte, 35.75 * davaunte, 131.4375 * davaunte, 37.75 * davaunte, 137.4375 * davaunte);
  jrae.bezierCurveTo(36.75 * davaunte, 144.4375 * davaunte, 36.75 * davaunte, 145.4375 * davaunte, 33.75 * davaunte, 144.4375 * davaunte);
  jrae.bezierCurveTo(26.75 * davaunte, 137.4375 * davaunte, 29.75 * davaunte, 131.4375 * davaunte, 31.75 * davaunte, 130.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(69.75 * davaunte, 274.4375 * davaunte);
  jrae.bezierCurveTo(62.75 * davaunte, 272.4375 * davaunte, 59.75 * davaunte, 277.4375 * davaunte, 57.75 * davaunte, 284.4375 * davaunte);
  jrae.bezierCurveTo(56.75 * davaunte, 290.4375 * davaunte, 63.75 * davaunte, 289.4375 * davaunte, 71.75 * davaunte, 282.4375 * davaunte);
  jrae.bezierCurveTo(75.75 * davaunte, 277.4375 * davaunte, 72.75 * davaunte, 275.4375 * davaunte, 69.75 * davaunte, 274.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(165.75 * davaunte, 95.4375 * davaunte);
  jrae.bezierCurveTo(177.75 * davaunte, 97.4375 * davaunte, 182.75 * davaunte, 115.4375 * davaunte, 173.75 * davaunte, 121.4375 * davaunte);
  jrae.bezierCurveTo(164.75 * davaunte, 126.4375 * davaunte, 149.75 * davaunte, 102.4375 * davaunte, 164.75 * davaunte, 96.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(216.75 * davaunte, 94.4375 * davaunte);
  jrae.bezierCurveTo(227.75 * davaunte, 99.4375 * davaunte, 223.75 * davaunte, 122.4375 * davaunte, 210.75 * davaunte, 119.4375 * davaunte);
  jrae.bezierCurveTo(203.75 * davaunte, 115.4375 * davaunte, 207.75 * davaunte, 93.4375 * davaunte, 216.75 * davaunte, 94.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(211.75 * davaunte, 68.4375 * davaunte);
  jrae.bezierCurveTo(218.75 * davaunte, 69.4375 * davaunte, 220.75 * davaunte, 77.4375 * davaunte, 216.75 * davaunte, 83.4375 * davaunte);
  jrae.bezierCurveTo(208.75 * davaunte, 89.4375 * davaunte, 205.75 * davaunte, 68.4375 * davaunte, 210.75 * davaunte, 68.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(169.75 * davaunte, 71.4375 * davaunte);
  jrae.bezierCurveTo(162.75 * davaunte, 72.4375 * davaunte, 159.75 * davaunte, 83.4375 * davaunte, 167.75 * davaunte, 88.4375 * davaunte);
  jrae.bezierCurveTo(174.75 * davaunte, 90.4375 * davaunte, 174.75 * davaunte, 72.4375 * davaunte, 170.75 * davaunte, 71.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[6], jacci[7], 4 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(193.75 * davaunte, 160.4375 * davaunte);
  jrae.bezierCurveTo(215.75 * davaunte, 168.4375 * davaunte, 224.75 * davaunte, 180.4375 * davaunte, 229.75 * davaunte, 193.4375 * davaunte);
  jrae.bezierCurveTo(223.75 * davaunte, 211.4375 * davaunte, 205.75 * davaunte, 225.4375 * davaunte, 193.75 * davaunte, 229.4375 * davaunte);
  jrae.bezierCurveTo(167.75 * davaunte, 217.4375 * davaunte, 161.75 * davaunte, 205.4375 * davaunte, 156.75 * davaunte, 192.4375 * davaunte);
  jrae.bezierCurveTo(164.75 * davaunte, 175.4375 * davaunte, 176.75 * davaunte, 166.4375 * davaunte, 192.75 * davaunte, 160.4375 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[8], jacci[9], 3 * davaunte);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(189.1999969482422 * davaunte, 182.61249923706055 * davaunte);
  jrae.bezierCurveTo(190.1999969482422 * davaunte, 184.11249923706055 * davaunte, 190.1999969482422 * davaunte, 184.11249923706055 * davaunte, 191.1999969482422 * davaunte, 185.61249923706055 * davaunte);
  jrae.bezierCurveTo(192.1999969482422 * davaunte, 180.61249923706055 * davaunte, 192.1999969482422 * davaunte, 180.61249923706055 * davaunte, 193.1999969482422 * davaunte, 175.61249923706055 * davaunte);
  jrae.bezierCurveTo(195.6999969482422 * davaunte, 177.11249923706055 * davaunte, 195.6999969482422 * davaunte, 177.11249923706055 * davaunte, 198.1999969482422 * davaunte, 178.61249923706055 * davaunte);
  jrae.bezierCurveTo(198.1999969482422 * davaunte, 181.11249923706055 * davaunte, 198.1999969482422 * davaunte, 181.11249923706055 * davaunte, 198.1999969482422 * davaunte, 183.61249923706055 * davaunte);
  jrae.bezierCurveTo(201.6999969482422 * davaunte, 181.11249923706055 * davaunte, 201.6999969482422 * davaunte, 181.11249923706055 * davaunte, 205.1999969482422 * davaunte, 178.61249923706055 * davaunte);
  jrae.bezierCurveTo(206.6999969482422 * davaunte, 180.61249923706055 * davaunte, 206.6999969482422 * davaunte, 180.61249923706055 * davaunte, 208.1999969482422 * davaunte, 182.61249923706055 * davaunte);
  jrae.bezierCurveTo(206.1999969482422 * davaunte, 185.61249923706055 * davaunte, 206.1999969482422 * davaunte, 185.61249923706055 * davaunte, 204.1999969482422 * davaunte, 188.61249923706055 * davaunte);
  jrae.bezierCurveTo(208.6999969482422 * davaunte, 188.61249923706055 * davaunte, 208.6999969482422 * davaunte, 188.61249923706055 * davaunte, 213.1999969482422 * davaunte, 188.61249923706055 * davaunte);
  jrae.bezierCurveTo(213.1999969482422 * davaunte, 191.11249923706055 * davaunte, 213.1999969482422 * davaunte, 191.11249923706055 * davaunte, 213.1999969482422 * davaunte, 193.61249923706055 * davaunte);
  jrae.bezierCurveTo(209.6999969482422 * davaunte, 194.61249923706055 * davaunte, 209.6999969482422 * davaunte, 194.61249923706055 * davaunte, 206.1999969482422 * davaunte, 195.61249923706055 * davaunte);
  jrae.bezierCurveTo(210.1999969482422 * davaunte, 198.61249923706055 * davaunte, 210.1999969482422 * davaunte, 198.61249923706055 * davaunte, 214.1999969482422 * davaunte, 201.61249923706055 * davaunte);
  jrae.bezierCurveTo(212.1999969482422 * davaunte, 203.61249923706055 * davaunte, 212.1999969482422 * davaunte, 203.61249923706055 * davaunte, 210.1999969482422 * davaunte, 205.61249923706055 * davaunte);
  jrae.bezierCurveTo(207.1999969482422 * davaunte, 204.11249923706055 * davaunte, 207.1999969482422 * davaunte, 204.11249923706055 * davaunte, 204.1999969482422 * davaunte, 202.61249923706055 * davaunte);
  jrae.bezierCurveTo(205.6999969482422 * davaunte, 207.61249923706055 * davaunte, 205.6999969482422 * davaunte, 207.61249923706055 * davaunte, 207.1999969482422 * davaunte, 212.61249923706055 * davaunte);
  jrae.bezierCurveTo(204.6999969482422 * davaunte, 213.61249923706055 * davaunte, 204.6999969482422 * davaunte, 213.61249923706055 * davaunte, 202.1999969482422 * davaunte, 214.61249923706055 * davaunte);
  jrae.bezierCurveTo(200.1999969482422 * davaunte, 210.61249923706055 * davaunte, 200.1999969482422 * davaunte, 210.61249923706055 * davaunte, 198.1999969482422 * davaunte, 206.61249923706055 * davaunte);
  jrae.bezierCurveTo(196.6999969482422 * davaunte, 211.61249923706055 * davaunte, 196.6999969482422 * davaunte, 211.61249923706055 * davaunte, 195.1999969482422 * davaunte, 216.61249923706055 * davaunte);
  jrae.bezierCurveTo(192.6999969482422 * davaunte, 216.11249923706055 * davaunte, 192.6999969482422 * davaunte, 216.11249923706055 * davaunte, 190.1999969482422 * davaunte, 215.61249923706055 * davaunte);
  jrae.bezierCurveTo(190.1999969482422 * davaunte, 211.61249923706055 * davaunte, 190.1999969482422 * davaunte, 211.61249923706055 * davaunte, 190.1999969482422 * davaunte, 207.61249923706055 * davaunte);
  jrae.bezierCurveTo(186.1999969482422 * davaunte, 210.61249923706055 * davaunte, 186.1999969482422 * davaunte, 210.61249923706055 * davaunte, 182.1999969482422 * davaunte, 213.61249923706055 * davaunte);
  jrae.bezierCurveTo(181.1999969482422 * davaunte, 211.11249923706055 * davaunte, 181.1999969482422 * davaunte, 211.11249923706055 * davaunte, 180.1999969482422 * davaunte, 208.61249923706055 * davaunte);
  jrae.bezierCurveTo(183.1999969482422 * davaunte, 205.61249923706055 * davaunte, 183.1999969482422 * davaunte, 205.61249923706055 * davaunte, 186.1999969482422 * davaunte, 202.61249923706055 * davaunte);
  jrae.bezierCurveTo(180.6999969482422 * davaunte, 203.11249923706055 * davaunte, 180.6999969482422 * davaunte, 203.11249923706055 * davaunte, 175.1999969482422 * davaunte, 203.61249923706055 * davaunte);
  jrae.bezierCurveTo(174.6999969482422 * davaunte, 200.11249923706055 * davaunte, 174.6999969482422 * davaunte, 200.11249923706055 * davaunte, 174.1999969482422 * davaunte, 196.61249923706055 * davaunte);
  jrae.bezierCurveTo(177.1999969482422 * davaunte, 195.61249923706055 * davaunte, 177.1999969482422 * davaunte, 195.61249923706055 * davaunte, 180.1999969482422 * davaunte, 194.61249923706055 * davaunte);
  jrae.bezierCurveTo(177.1999969482422 * davaunte, 191.61249923706055 * davaunte, 177.1999969482422 * davaunte, 191.61249923706055 * davaunte, 174.1999969482422 * davaunte, 188.61249923706055 * davaunte);
  jrae.bezierCurveTo(175.6999969482422 * davaunte, 187.11249923706055 * davaunte, 175.6999969482422 * davaunte, 187.11249923706055 * davaunte, 177.1999969482422 * davaunte, 185.61249923706055 * davaunte);
  jrae.bezierCurveTo(180.6999969482422 * davaunte, 187.11249923706055 * davaunte, 180.6999969482422 * davaunte, 187.11249923706055 * davaunte, 184.1999969482422 * davaunte, 188.61249923706055 * davaunte);
  jrae.bezierCurveTo(182.6999969482422 * davaunte, 183.61249923706055 * davaunte, 182.6999969482422 * davaunte, 183.61249923706055 * davaunte, 181.1999969482422 * davaunte, 178.61249923706055 * davaunte);
  jrae.bezierCurveTo(183.1999969482422 * davaunte, 177.11249923706055 * davaunte, 183.1999969482422 * davaunte, 177.11249923706055 * davaunte, 185.1999969482422 * davaunte, 175.61249923706055 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[10]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(185.1999969482422 * davaunte, 173.8125 * davaunte);
  jrae.bezierCurveTo(187.1999969482422 * davaunte, 179.3125 * davaunte, 187.1999969482422 * davaunte, 179.3125 * davaunte, 189.1999969482422 * davaunte, 184.8125 * davaunte);
  jrae.bezierCurveTo(184.1999969482422 * davaunte, 181.8125 * davaunte, 184.1999969482422 * davaunte, 181.8125 * davaunte, 179.1999969482422 * davaunte, 178.8125 * davaunte);
  jrae.bezierCurveTo(181.1999969482422 * davaunte, 175.8125 * davaunte, 182.1999969482422 * davaunte, 174.8125 * davaunte, 185.1999969482422 * davaunte, 173.8125 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(192.1999969482422 * davaunte, 173.61249542236328 * davaunte);
  jrae.bezierCurveTo(194.1999969482422 * davaunte, 172.61249542236328 * davaunte, 196.1999969482422 * davaunte, 171.61249542236328 * davaunte, 199.1999969482422 * davaunte, 173.61249542236328 * davaunte);
  jrae.bezierCurveTo(197.6999969482422 * davaunte, 179.61249542236328 * davaunte, 197.6999969482422 * davaunte, 179.61249542236328 * davaunte, 196.1999969482422 * davaunte, 185.61249542236328 * davaunte);
  jrae.bezierCurveTo(194.1999969482422 * davaunte, 179.61249542236328 * davaunte, 194.1999969482422 * davaunte, 179.61249542236328 * davaunte, 192.1999969482422 * davaunte, 173.61249542236328 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(205.1999969482422 * davaunte, 176.2125015258789 * davaunte);
  jrae.bezierCurveTo(210.1999969482422 * davaunte, 178.2125015258789 * davaunte, 211.1999969482422 * davaunte, 179.2125015258789 * davaunte, 211.1999969482422 * davaunte, 181.2125015258789 * davaunte);
  jrae.bezierCurveTo(206.6999969482422 * davaunte, 184.7125015258789 * davaunte, 206.6999969482422 * davaunte, 184.7125015258789 * davaunte, 202.1999969482422 * davaunte, 188.2125015258789 * davaunte);
  jrae.bezierCurveTo(203.6999969482422 * davaunte, 182.2125015258789 * davaunte, 203.6999969482422 * davaunte, 182.2125015258789 * davaunte, 205.1999969482422 * davaunte, 176.2125015258789 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(214.1999969482422 * davaunte, 187.21249985694885 * davaunte);
  jrae.bezierCurveTo(216.1999969482422 * davaunte, 191.21249985694885 * davaunte, 216.1999969482422 * davaunte, 192.21249985694885 * davaunte, 215.1999969482422 * davaunte, 195.21249985694885 * davaunte);
  jrae.bezierCurveTo(206.1999969482422 * davaunte, 194.21249985694885 * davaunte, 205.1999969482422 * davaunte, 194.21249985694885 * davaunte, 205.1999969482422 * davaunte, 194.21249985694885 * davaunte);
  jrae.bezierCurveTo(209.6999969482422 * davaunte, 190.71249985694885 * davaunte, 209.6999969482422 * davaunte, 190.71249985694885 * davaunte, 214.1999969482422 * davaunte, 187.21249985694885 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(204.1999969482422 * davaunte, 201.8125 * davaunte);
  jrae.bezierCurveTo(209.1999969482422 * davaunte, 201.3125 * davaunte, 209.1999969482422 * davaunte, 201.3125 * davaunte, 214.1999969482422 * davaunte, 200.8125 * davaunte);
  jrae.bezierCurveTo(215.1999969482422 * davaunte, 204.8125 * davaunte, 214.1999969482422 * davaunte, 205.8125 * davaunte, 213.1999969482422 * davaunte, 208.8125 * davaunte);
  jrae.bezierCurveTo(208.6999969482422 * davaunte, 205.3125 * davaunte, 208.6999969482422 * davaunte, 205.3125 * davaunte, 204.1999969482422 * davaunte, 201.8125 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(199.1999969482422 * davaunte, 205.61249923706055 * davaunte);
  jrae.bezierCurveTo(207.1999969482422 * davaunte, 212.61249923706055 * davaunte, 203.6999969482422 * davaunte, 209.11249923706055 * davaunte, 208.1999969482422 * davaunte, 212.61249923706055 * davaunte);
  jrae.bezierCurveTo(206.1999969482422 * davaunte, 215.61249923706055 * davaunte, 204.1999969482422 * davaunte, 217.61249923706055 * davaunte, 203.1999969482422 * davaunte, 216.61249923706055 * davaunte);
  jrae.bezierCurveTo(201.1999969482422 * davaunte, 211.11249923706055 * davaunte, 201.1999969482422 * davaunte, 211.11249923706055 * davaunte, 199.1999969482422 * davaunte, 205.61249923706055 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(191.1999969482422 * davaunte, 207.01250076293945 * davaunte);
  jrae.bezierCurveTo(194.1999969482422 * davaunte, 213.01250076293945 * davaunte, 194.1999969482422 * davaunte, 216.01250076293945 * davaunte, 196.1999969482422 * davaunte, 218.01250076293945 * davaunte);
  jrae.bezierCurveTo(193.1999969482422 * davaunte, 220.01250076293945 * davaunte, 190.1999969482422 * davaunte, 220.01250076293945 * davaunte, 188.1999969482422 * davaunte, 218.01250076293945 * davaunte);
  jrae.bezierCurveTo(189.6999969482422 * davaunte, 213.01250076293945 * davaunte, 189.6999969482422 * davaunte, 213.01250076293945 * davaunte, 191.1999969482422 * davaunte, 208.01250076293945 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(186.1999969482422 * davaunte, 203.21249961853027 * davaunte);
  jrae.bezierCurveTo(184.1999969482422 * davaunte, 209.21249961853027 * davaunte, 184.1999969482422 * davaunte, 209.21249961853027 * davaunte, 182.1999969482422 * davaunte, 215.21249961853027 * davaunte);
  jrae.bezierCurveTo(177.1999969482422 * davaunte, 212.21249961853027 * davaunte, 176.1999969482422 * davaunte, 211.21249961853027 * davaunte, 177.1999969482422 * davaunte, 210.21249961853027 * davaunte);
  jrae.bezierCurveTo(181.6999969482422 * davaunte, 206.71249961853027 * davaunte, 181.6999969482422 * davaunte, 206.71249961853027 * davaunte, 186.1999969482422 * davaunte, 203.21249961853027 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(183.1999969482422 * davaunte, 196.8125 * davaunte);
  jrae.bezierCurveTo(177.1999969482422 * davaunte, 196.3125 * davaunte, 177.1999969482422 * davaunte, 196.3125 * davaunte, 171.1999969482422 * davaunte, 195.8125 * davaunte);
  jrae.bezierCurveTo(171.1999969482422 * davaunte, 199.8125 * davaunte, 171.1999969482422 * davaunte, 202.8125 * davaunte, 174.1999969482422 * davaunte, 204.8125 * davaunte);
  jrae.bezierCurveTo(178.6999969482422 * davaunte, 200.8125 * davaunte, 178.6999969482422 * davaunte, 200.8125 * davaunte, 183.1999969482422 * davaunte, 196.8125 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  jrae.beginPath();
  jrae.lineCap = "round";
  jrae.lineJoin = "round";
  jrae.moveTo(185.1999969482422 * davaunte, 190.21249771118164 * davaunte);
  jrae.bezierCurveTo(179.6999969482422 * davaunte, 186.71249771118164 * davaunte, 179.6999969482422 * davaunte, 186.71249771118164 * davaunte, 174.1999969482422 * davaunte, 183.21249771118164 * davaunte);
  jrae.bezierCurveTo(172.1999969482422 * davaunte, 186.21249771118164 * davaunte, 172.1999969482422 * davaunte, 187.21249771118164 * davaunte, 172.1999969482422 * davaunte, 190.21249771118164 * davaunte);
  jrae.bezierCurveTo(178.1999969482422 * davaunte, 190.21249771118164 * davaunte, 178.1999969482422 * davaunte, 190.21249771118164 * davaunte, 184.1999969482422 * davaunte, 190.21249771118164 * davaunte);
  jrae.closePath();
  fill_path(jrae, jacci[11]);
  circle(jrae, 126.19999694824219 * davaunte, 169.8125 * davaunte, 8.94427190999916 * davaunte);
  fill_path(jrae, jacci[12]);
  circle(jrae, 123.19999694824219 * davaunte, 164.8125 * davaunte, 2.8284271247461903 * davaunte);
  fill_path(jrae, jacci[13]);
  circle(jrae, 253.1999969482422 * davaunte, 169.8125 * davaunte, 8.94427190999916 * davaunte);
  fill_path(jrae, jacci[12]);
  circle(jrae, 255.1999969482422 * davaunte, 164.8125 * davaunte, 2.23606797749979 * davaunte);
  fill_path(jrae, jacci[13]);
  return taiwanda;
}
function create_bread(ely, lavola, nakiyha) {
  var tyrann = document.createElement("canvas");
  var roshanna = tyrann.getContext("2d");
  tyrann.width = 400 * ely;
  tyrann.height = 400 * ely;
  roshanna.globalAlpha = 1;
  roshanna.translate(20 * ely, 20 * ely);
  roshanna.beginPath();
  roshanna.lineCap = "round";
  roshanna.lineJoin = "round";
  roshanna.moveTo(36.5 * ely, 278.0625 * ely);
  roshanna.bezierCurveTo(67.5 * ely, 316.0625 * ely, 134.5 * ely, 334.0625 * ely, 199.5 * ely, 319.0625 * ely);
  roshanna.bezierCurveTo(254.5 * ely, 304.0625 * ely, 346.5 * ely, 270.0625 * ely, 348.5 * ely, 237.0625 * ely);
  roshanna.bezierCurveTo(359.5 * ely, 206.0625 * ely, 318.5 * ely, 129.0625 * ely, 262.5 * ely, 122.0625 * ely);
  roshanna.bezierCurveTo(213.5 * ely, 115.0625 * ely, 166.5 * ely, 133.0625 * ely, 104.5 * ely, 166.0625 * ely);
  roshanna.bezierCurveTo(54.5 * ely, 194.0625 * ely, 23.5 * ely, 241.0625 * ely, 36.5 * ely, 277.0625 * ely);
  roshanna.closePath();
  fill_path(roshanna, nakiyha[0]);
  roshanna.translate(-20 * ely, -20 * ely);
  roshanna.beginPath();
  roshanna.lineCap = "round";
  roshanna.lineJoin = "round";
  roshanna.moveTo(36.5 * ely, 278.0625 * ely);
  roshanna.bezierCurveTo(67.5 * ely, 316.0625 * ely, 134.5 * ely, 334.0625 * ely, 199.5 * ely, 319.0625 * ely);
  roshanna.bezierCurveTo(254.5 * ely, 304.0625 * ely, 346.5 * ely, 270.0625 * ely, 348.5 * ely, 237.0625 * ely);
  roshanna.bezierCurveTo(359.5 * ely, 206.0625 * ely, 318.5 * ely, 129.0625 * ely, 262.5 * ely, 122.0625 * ely);
  roshanna.bezierCurveTo(213.5 * ely, 115.0625 * ely, 166.5 * ely, 133.0625 * ely, 104.5 * ely, 166.0625 * ely);
  roshanna.bezierCurveTo(54.5 * ely, 194.0625 * ely, 23.5 * ely, 241.0625 * ely, 36.5 * ely, 277.0625 * ely);
  roshanna.closePath();
  fill_path(roshanna, nakiyha[1], nakiyha[2], 19 * ely);
  roshanna.beginPath();
  roshanna.lineCap = "round";
  roshanna.lineJoin = "round";
  roshanna.moveTo(214.5 * ely, 124.0625 * ely);
  roshanna.bezierCurveTo(242.5 * ely, 125.0625 * ely, 272.5 * ely, 159.0625 * ely, 283.5 * ely, 184.0625 * ely);
  roshanna.bezierCurveTo(277.5 * ely, 161.0625 * ely, 233.5 * ely, 128.0625 * ely, 219.5 * ely, 122.0625 * ely);
  roshanna.closePath();
  fill_path(roshanna, undefined, nakiyha[2], 19 * ely);
  roshanna.beginPath();
  roshanna.lineCap = "round";
  roshanna.lineJoin = "round";
  roshanna.moveTo(157.5 * ely, 145.0625 * ely);
  roshanna.bezierCurveTo(176.5 * ely, 148.0625 * ely, 205.5 * ely, 176.0625 * ely, 212.5 * ely, 197.0625 * ely);
  roshanna.bezierCurveTo(205.5 * ely, 178.0625 * ely, 177.5 * ely, 152.0625 * ely, 156.5 * ely, 142.0625 * ely);
  roshanna.closePath();
  fill_path(roshanna, undefined, nakiyha[2], 19 * ely);
  roshanna.beginPath();
  roshanna.lineCap = "round";
  roshanna.lineJoin = "round";
  roshanna.moveTo(103.5 * ely, 169.0625 * ely);
  roshanna.bezierCurveTo(160.5 * ely, 166.0625 * ely, 228.5 * ely, 312.0625 * ely, 162.5 * ely, 323.0625 * ely);
  roshanna.bezierCurveTo(128.5 * ely, 330.0625 * ely, 45.5 * ely, 312.0625 * ely, 34.5 * ely, 268.0625 * ely);
  roshanna.bezierCurveTo(30.5 * ely, 238.0625 * ely, 44.5 * ely, 222.0625 * ely, 52.5 * ely, 211.0625 * ely);
  roshanna.bezierCurveTo(82.5 * ely, 174.0625 * ely, 104.5 * ely, 166.0625 * ely, 119.5 * ely, 172.0625 * ely);
  roshanna.closePath();
  fill_path(roshanna, nakiyha[3], nakiyha[2], 19 * ely);
  circle(roshanna, 92.5 * ely, 216.0625 * ely, 13.892443989449804 * ely);
  fill_path(roshanna, nakiyha[4]);
  circle(roshanna, 68.5 * ely, 227.0625 * ely, 8.06225774829855 * ely);
  fill_path(roshanna, nakiyha[4]);
  circle(roshanna, 85.5 * ely, 240.0625 * ely, 6.708203932499369 * ely);
  fill_path(roshanna, nakiyha[4]);
  circle(roshanna, 147.5 * ely, 294.0625 * ely, 17.46424919657298 * ely);
  fill_path(roshanna, nakiyha[4]);
  circle(roshanna, 166.5 * ely, 273.0625 * ely, 6.708203932499369 * ely);
  fill_path(roshanna, nakiyha[4]);
  circle(roshanna, 114.5 * ely, 294.0625 * ely, 12.36931687685298 * ely);
  fill_path(roshanna, nakiyha[4]);
  circle(roshanna, 123.5 * ely, 220.0625 * ely, 5.830951894845301 * ely);
  fill_path(roshanna, nakiyha[4]);
  circle(roshanna, 114.5 * ely, 259.0625 * ely, 4.123105625617661 * ely);
  fill_path(roshanna, nakiyha[4]);
  circle(roshanna, 63.5 * ely, 265.0625 * ely, 5.385164807134504 * ely);
  fill_path(roshanna, nakiyha[4]);
  circle(roshanna, 148.5 * ely, 235.0625 * ely, 4.47213595499958 * ely);
  fill_path(roshanna, nakiyha[4]);
  roshanna.beginPath();
  roshanna.lineCap = "round";
  roshanna.lineJoin = "round";
  roshanna.moveTo(194.5 * ely, 313.0625 * ely);
  roshanna.bezierCurveTo(222.5 * ely, 306.0625 * ely, 319.5 * ely, 271.0625 * ely, 337.5 * ely, 241.0625 * ely);
  roshanna.bezierCurveTo(274.5 * ely, 270.0625 * ely, 216.5 * ely, 288.0625 * ely, 199.5 * ely, 287.0625 * ely);
  roshanna.bezierCurveTo(198.5 * ely, 302.0625 * ely, 195.5 * ely, 311.0625 * ely, 193.5 * ely, 312.0625 * ely);
  roshanna.closePath();
  fill_path(roshanna, nakiyha[5]);
  return tyrann;
}
function create_hurt_kraken(aisling, zshakira) {
  var lexes = document.createElement("canvas");
  var mital = lexes.getContext("2d");
  lexes.width = 376 * aisling;
  lexes.height = 371 * aisling;
  mital.globalAlpha = 1;
  mital.beginPath();
  mital.lineCap = "round";
  mital.lineJoin = "round";
  mital.moveTo(191.633544921875 * aisling, 123.98580932617188 * aisling);
  mital.bezierCurveTo(215.633544921875 * aisling, 85.98580932617188 * aisling, 187.633544921875 * aisling, 71.98580932617188 * aisling, 202.633544921875 * aisling, 19.985809326171875 * aisling);
  mital.bezierCurveTo(231.633544921875 * aisling, 68.98580932617188 * aisling, 253.633544921875 * aisling, 71.98580932617188 * aisling, 256.633544921875 * aisling, 93.98580932617188 * aisling);
  mital.bezierCurveTo(306.633544921875 * aisling, 64.98580932617188 * aisling, 319.633544921875 * aisling, 61.985809326171875 * aisling, 350.633544921875 * aisling, 58.985809326171875 * aisling);
  mital.bezierCurveTo(280.633544921875 * aisling, 86.98580932617188 * aisling, 281.633544921875 * aisling, 106.98580932617188 * aisling, 268.633544921875 * aisling, 130.98580932617188 * aisling);
  mital.bezierCurveTo(295.633544921875 * aisling, 158.98580932617188 * aisling, 328.633544921875 * aisling, 155.98580932617188 * aisling, 353.633544921875 * aisling, 90.98580932617188 * aisling);
  mital.bezierCurveTo(371.633544921875 * aisling, 158.98580932617188 * aisling, 337.633544921875 * aisling, 210.98580932617188 * aisling, 286.633544921875 * aisling, 209.98580932617188 * aisling);
  mital.bezierCurveTo(323.633544921875 * aisling, 230.98580932617188 * aisling, 317.633544921875 * aisling, 274.9858093261719 * aisling, 356.633544921875 * aisling, 305.9858093261719 * aisling);
  mital.bezierCurveTo(288.633544921875 * aisling, 297.9858093261719 * aisling, 288.633544921875 * aisling, 265.9858093261719 * aisling, 275.633544921875 * aisling, 266.9858093261719 * aisling);
  mital.bezierCurveTo(280.633544921875 * aisling, 294.9858093261719 * aisling, 315.633544921875 * aisling, 306.9858093261719 * aisling, 336.633544921875 * aisling, 316.9858093261719 * aisling);
  mital.bezierCurveTo(295.633544921875 * aisling, 318.9858093261719 * aisling, 264.633544921875 * aisling, 302.9858093261719 * aisling, 254.633544921875 * aisling, 289.9858093261719 * aisling);
  mital.bezierCurveTo(252.633544921875 * aisling, 301.9858093261719 * aisling, 224.633544921875 * aisling, 315.9858093261719 * aisling, 201.633544921875 * aisling, 356.9858093261719 * aisling);
  mital.bezierCurveTo(195.633544921875 * aisling, 313.9858093261719 * aisling, 195.633544921875 * aisling, 308.9858093261719 * aisling, 196.633544921875 * aisling, 307.9858093261719 * aisling);
  mital.bezierCurveTo(197.633544921875 * aisling, 289.9858093261719 * aisling, 207.633544921875 * aisling, 283.9858093261719 * aisling, 195.633544921875 * aisling, 258.9858093261719 * aisling);
  mital.bezierCurveTo(182.633544921875 * aisling, 282.9858093261719 * aisling, 190.633544921875 * aisling, 287.9858093261719 * aisling, 193.633544921875 * aisling, 297.9858093261719 * aisling);
  mital.bezierCurveTo(195.633544921875 * aisling, 306.9858093261719 * aisling, 191.633544921875 * aisling, 334.9858093261719 * aisling, 187.633544921875 * aisling, 354.9858093261719 * aisling);
  mital.bezierCurveTo(165.633544921875 * aisling, 320.9858093261719 * aisling, 138.633544921875 * aisling, 307.9858093261719 * aisling, 135.633544921875 * aisling, 288.9858093261719 * aisling);
  mital.bezierCurveTo(110.633544921875 * aisling, 318.9858093261719 * aisling, 68.633544921875 * aisling, 323.9858093261719 * aisling, 49.633544921875 * aisling, 320.9858093261719 * aisling);
  mital.bezierCurveTo(88.633544921875 * aisling, 308.9858093261719 * aisling, 108.633544921875 * aisling, 284.9858093261719 * aisling, 118.633544921875 * aisling, 258.9858093261719 * aisling);
  mital.bezierCurveTo(86.633544921875 * aisling, 264.9858093261719 * aisling, 75.633544921875 * aisling, 310.9858093261719 * aisling, 19.633544921875 * aisling, 304.9858093261719 * aisling);
  mital.bezierCurveTo(54.633544921875 * aisling, 276.9858093261719 * aisling, 59.633544921875 * aisling, 214.98580932617188 * aisling, 105.633544921875 * aisling, 205.98580932617188 * aisling);
  mital.bezierCurveTo(14.633544921875 * aisling, 201.98580932617188 * aisling, 24.633544921875 * aisling, 141.98580932617188 * aisling, 25.633544921875 * aisling, 82.98580932617188 * aisling);
  mital.bezierCurveTo(49.633544921875 * aisling, 168.98580932617188 * aisling, 87.633544921875 * aisling, 141.98580932617188 * aisling, 112.633544921875 * aisling, 123.98580932617188 * aisling);
  mital.bezierCurveTo(95.633544921875 * aisling, 75.98580932617188 * aisling, 70.633544921875 * aisling, 68.98580932617188 * aisling, 35.633544921875 * aisling, 50.985809326171875 * aisling);
  mital.bezierCurveTo(70.633544921875 * aisling, 53.985809326171875 * aisling, 102.633544921875 * aisling, 65.98580932617188 * aisling, 125.633544921875 * aisling, 84.98580932617188 * aisling);
  mital.bezierCurveTo(133.633544921875 * aisling, 69.98580932617188 * aisling, 166.633544921875 * aisling, 42.985809326171875 * aisling, 176.633544921875 * aisling, 21.985809326171875 * aisling);
  mital.bezierCurveTo(185.633544921875 * aisling, 49.985809326171875 * aisling, 168.633544921875 * aisling, 95.98580932617188 * aisling, 191.633544921875 * aisling, 121.98580932617188 * aisling);
  mital.closePath();
  fill_path(mital, zshakira[0], zshakira[0], 12 * aisling);
  return lexes;
}
function create_bread_oven_off(elizander, felechia, joas) {
  var elliauna = document.createElement("canvas");
  var hakimah = elliauna.getContext("2d");
  elliauna.width = 440 * elizander;
  elliauna.height = 388 * elizander;
  hakimah.globalAlpha = felechia ? .5 : 1;
  hakimah.translate(5 * elizander, 5 * elizander);
  circle(hakimah, 220 * elizander, 201 * elizander, 170.41713528867922 * elizander);
  fill_path(hakimah, joas[0], joas[0], 6 * elizander);
  hakimah.globalAlpha = 1;
  hakimah.translate(-5 * elizander, -5 * elizander);
  circle(hakimah, 220 * elizander, 201 * elizander, 170.41713528867922 * elizander);
  fill_path(hakimah, joas[1], joas[2], 6 * elizander);
  circle(hakimah, 220 * elizander, 201 * elizander, 130 * elizander);
  fill_path(hakimah, joas[11], joas[2], 6 * elizander);
  circle(hakimah, 222 * elizander, 199 * elizander, 120.74767078498864 * elizander);
  fill_path(hakimah, undefined, joas[3], 40 * elizander);
  circle(hakimah, 220 * elizander, 200 * elizander, 95.44108130150245 * elizander);
  fill_path(hakimah, undefined, joas[2], 15 * elizander);
  hakimah.globalAlpha = felechia ? .5 : 1;
  hakimah.translate(5 * elizander, 5 * elizander);
  circle(hakimah, 63 * elizander, 136 * elizander, 49.193495504995376 * elizander);
  fill_path(hakimah, joas[0], joas[0], 4 * elizander);
  hakimah.globalAlpha = 1;
  hakimah.translate(-5 * elizander, -5 * elizander);
  circle(hakimah, 63 * elizander, 136 * elizander, 49.193495504995376 * elizander);
  fill_path(hakimah, joas[8], joas[2], 4 * elizander);
  circle(hakimah, 63 * elizander, 137 * elizander, 25.632011235952593 * elizander);
  fill_path(hakimah, joas[7], joas[2], 4 * elizander);
  return elliauna;
}
function create_bread_oven(anijae, quintez, ewurabena) {
  var jibraeel = document.createElement("canvas");
  var trauis = jibraeel.getContext("2d");
  jibraeel.width = 440 * anijae;
  jibraeel.height = 388 * anijae;
  trauis.globalAlpha = quintez ? .5 : 1;
  trauis.translate(5 * anijae, 5 * anijae);
  circle(trauis, 220 * anijae, 201 * anijae, 170.41713528867922 * anijae);
  fill_path(trauis, ewurabena[0], ewurabena[0], 6 * anijae);
  trauis.globalAlpha = 1;
  trauis.translate(-5 * anijae, -5 * anijae);
  circle(trauis, 220 * anijae, 201 * anijae, 170.41713528867922 * anijae);
  fill_path(trauis, ewurabena[1], ewurabena[2], 6 * anijae);
  circle(trauis, 220 * anijae, 201 * anijae, 130 * anijae);
  fill_path(trauis, ewurabena[11], ewurabena[2], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(218 * anijae, 97 * anijae);
  trauis.bezierCurveTo(219 * anijae, 163 * anijae, 201 * anijae, 176 * anijae, 191 * anijae, 175 * anijae);
  trauis.bezierCurveTo(176 * anijae, 177 * anijae, 168 * anijae, 167 * anijae, 160 * anijae, 115 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[5], ewurabena[6], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(224 * anijae, 181 * anijae);
  trauis.bezierCurveTo(225 * anijae, 138 * anijae, 246 * anijae, 115 * anijae, 263 * anijae, 137 * anijae);
  trauis.bezierCurveTo(282 * anijae, 174 * anijae, 279 * anijae, 217 * anijae, 265 * anijae, 243 * anijae);
  trauis.bezierCurveTo(253 * anijae, 264 * anijae, 240 * anijae, 256 * anijae, 233 * anijae, 238 * anijae);
  trauis.bezierCurveTo(221 * anijae, 212 * anijae, 225 * anijae, 198 * anijae, 224 * anijae, 184 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[5], ewurabena[6], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(169 * anijae, 289 * anijae);
  trauis.bezierCurveTo(161 * anijae, 234 * anijae, 168 * anijae, 197 * anijae, 187 * anijae, 195 * anijae);
  trauis.bezierCurveTo(219 * anijae, 189 * anijae, 222 * anijae, 256 * anijae, 216 * anijae, 307 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[5], ewurabena[6], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(143 * anijae, 146 * anijae);
  trauis.bezierCurveTo(161 * anijae, 199 * anijae, 151 * anijae, 245 * anijae, 138 * anijae, 266 * anijae);
  trauis.bezierCurveTo(120.5 * anijae, 239.5 * anijae, 120.5 * anijae, 239.5 * anijae, 103 * anijae, 213 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[5], ewurabena[6], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(283 * anijae, 135 * anijae);
  trauis.bezierCurveTo(277 * anijae, 176 * anijae, 298 * anijae, 194 * anijae, 315 * anijae, 205 * anijae);
  trauis.bezierCurveTo(323.5 * anijae, 175 * anijae, 323.5 * anijae, 175 * anijae, 332 * anijae, 145 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[5], ewurabena[6], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(318 * anijae, 223 * anijae);
  trauis.bezierCurveTo(290 * anijae, 195 * anijae, 271 * anijae, 256 * anijae, 283 * anijae, 281 * anijae);
  trauis.bezierCurveTo(303.5 * anijae, 267 * anijae, 303.5 * anijae, 267 * anijae, 324 * anijae, 253 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[5], ewurabena[6], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(142 * anijae, 223 * anijae);
  trauis.bezierCurveTo(128 * anijae, 213 * anijae, 123 * anijae, 214 * anijae, 111 * anijae, 223 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[10], ewurabena[10], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(251 * anijae, 133 * anijae);
  trauis.bezierCurveTo(269 * anijae, 188 * anijae, 262 * anijae, 229 * anijae, 251 * anijae, 253 * anijae);
  trauis.bezierCurveTo(288 * anijae, 224 * anijae, 273 * anijae, 139 * anijae, 252 * anijae, 133 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[10], ewurabena[10], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(203 * anijae, 102 * anijae);
  trauis.bezierCurveTo(204 * anijae, 136 * anijae, 200 * anijae, 159 * anijae, 189 * anijae, 174 * anijae);
  trauis.bezierCurveTo(223 * anijae, 164 * anijae, 219 * anijae, 87 * anijae, 205 * anijae, 83 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[10], ewurabena[10], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(196 * anijae, 324 * anijae);
  trauis.bezierCurveTo(209 * anijae, 239 * anijae, 200 * anijae, 219 * anijae, 192 * anijae, 196 * anijae);
  trauis.bezierCurveTo(229 * anijae, 216 * anijae, 219 * anijae, 316 * anijae, 198 * anijae, 325 * anijae);
  trauis.closePath();
  fill_path(trauis, ewurabena[10], ewurabena[10], 4 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(266 * anijae, 166 * anijae);
  trauis.bezierCurveTo(249 * anijae, 154 * anijae, 243 * anijae, 161 * anijae, 233 * anijae, 167 * anijae);
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(269 * anijae, 192 * anijae);
  trauis.bezierCurveTo(256 * anijae, 183 * anijae, 241 * anijae, 186 * anijae, 233 * anijae, 192 * anijae);
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(263 * anijae, 217 * anijae);
  trauis.bezierCurveTo(251 * anijae, 211 * anijae, 242 * anijae, 213 * anijae, 236 * anijae, 218 * anijae);
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(204 * anijae, 141 * anijae);
  trauis.bezierCurveTo(191 * anijae, 131 * anijae, 187 * anijae, 133 * anijae, 176 * anijae, 141 * anijae);
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(207 * anijae, 230 * anijae);
  trauis.bezierCurveTo(193 * anijae, 222 * anijae, 185 * anijae, 224 * anijae, 177 * anijae, 231 * anijae);
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(210 * anijae, 258 * anijae);
  trauis.bezierCurveTo(196 * anijae, 247 * anijae, 191 * anijae, 250 * anijae, 177 * anijae, 259 * anijae);
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(145 * anijae, 196 * anijae);
  trauis.bezierCurveTo(130 * anijae, 186 * anijae, 124 * anijae, 187 * anijae, 114 * anijae, 195 * anijae);
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(218 * anijae, 97 * anijae);
  trauis.bezierCurveTo(219 * anijae, 163 * anijae, 201 * anijae, 176 * anijae, 191 * anijae, 175 * anijae);
  trauis.bezierCurveTo(176 * anijae, 177 * anijae, 168 * anijae, 167 * anijae, 160 * anijae, 115 * anijae);
  trauis.closePath();
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(224 * anijae, 181 * anijae);
  trauis.bezierCurveTo(225 * anijae, 138 * anijae, 246 * anijae, 115 * anijae, 263 * anijae, 137 * anijae);
  trauis.bezierCurveTo(282 * anijae, 174 * anijae, 279 * anijae, 217 * anijae, 265 * anijae, 243 * anijae);
  trauis.bezierCurveTo(253 * anijae, 264 * anijae, 240 * anijae, 256 * anijae, 233 * anijae, 238 * anijae);
  trauis.bezierCurveTo(221 * anijae, 212 * anijae, 225 * anijae, 198 * anijae, 224 * anijae, 184 * anijae);
  trauis.closePath();
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(169 * anijae, 289 * anijae);
  trauis.bezierCurveTo(161 * anijae, 234 * anijae, 168 * anijae, 197 * anijae, 187 * anijae, 195 * anijae);
  trauis.bezierCurveTo(219 * anijae, 189 * anijae, 222 * anijae, 256 * anijae, 216 * anijae, 307 * anijae);
  trauis.closePath();
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(143 * anijae, 146 * anijae);
  trauis.bezierCurveTo(161 * anijae, 199 * anijae, 151 * anijae, 245 * anijae, 138 * anijae, 266 * anijae);
  trauis.bezierCurveTo(120.5 * anijae, 239.5 * anijae, 120.5 * anijae, 239.5 * anijae, 103 * anijae, 213 * anijae);
  trauis.closePath();
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(283 * anijae, 135 * anijae);
  trauis.bezierCurveTo(277 * anijae, 176 * anijae, 298 * anijae, 194 * anijae, 315 * anijae, 205 * anijae);
  trauis.bezierCurveTo(323.5 * anijae, 175 * anijae, 323.5 * anijae, 175 * anijae, 332 * anijae, 145 * anijae);
  trauis.closePath();
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  trauis.beginPath();
  trauis.lineCap = "round";
  trauis.lineJoin = "round";
  trauis.moveTo(318 * anijae, 223 * anijae);
  trauis.bezierCurveTo(290 * anijae, 195 * anijae, 271 * anijae, 256 * anijae, 283 * anijae, 281 * anijae);
  trauis.bezierCurveTo(303.5 * anijae, 267 * anijae, 303.5 * anijae, 267 * anijae, 324 * anijae, 253 * anijae);
  trauis.closePath();
  fill_path(trauis, undefined, ewurabena[6], 6 * anijae);
  circle(trauis, 222 * anijae, 199 * anijae, 120.74767078498864 * anijae);
  fill_path(trauis, undefined, ewurabena[3], 40 * anijae);
  circle(trauis, 220 * anijae, 200 * anijae, 95.44108130150245 * anijae);
  fill_path(trauis, undefined, ewurabena[2], 15 * anijae);
  circle(trauis, 220 * anijae, 201 * anijae, 85 * anijae);
  fill_path(trauis, undefined, ewurabena[4], 10 * anijae);
  trauis.globalAlpha = .5;
  circle(trauis, 220 * anijae, 201 * anijae, 82 * anijae);
  fill_path(trauis, ewurabena[9]);
  trauis.globalAlpha = quintez ? .5 : 1;
  trauis.translate(5 * anijae, 5 * anijae);
  circle(trauis, 63 * anijae, 136 * anijae, 49.193495504995376 * anijae);
  fill_path(trauis, ewurabena[0], ewurabena[0], 4 * anijae);
  trauis.globalAlpha = 1;
  trauis.translate(-5 * anijae, -5 * anijae);
  circle(trauis, 63 * anijae, 136 * anijae, 49.193495504995376 * anijae);
  fill_path(trauis, ewurabena[8], ewurabena[2], 4 * anijae);
  circle(trauis, 63 * anijae, 137 * anijae, 25.632011235952593 * anijae);
  fill_path(trauis, ewurabena[7], ewurabena[2], 4 * anijae);
  return jibraeel;
}
function create_bread_light_down(shada, america) {
  var akima = document.createElement("canvas");
  var jaycin = akima.getContext("2d");
  akima.width = 110 * shada;
  akima.height = 110 * shada;
  jaycin.globalAlpha = .2;
  circle(jaycin, 55 * shada, 55 * shada, 55 * shada);
  fill_path(jaycin, america[0]);
  return akima;
}
function create_bread_light_up(darrilyn, princewilliam) {
  var waldine = document.createElement("canvas");
  var annastassia = waldine.getContext("2d");
  waldine.width = 110 * darrilyn;
  waldine.height = 110 * darrilyn;
  annastassia.globalAlpha = .2;
  circle(annastassia, 55 * darrilyn, 55 * darrilyn, 55 * darrilyn);
  fill_path(annastassia, princewilliam[0]);
  return waldine;
}
function create_bridge(nehan, nataile, sifa) {
  var corddaryl = document.createElement("canvas");
  var kierce = corddaryl.getContext("2d");
  corddaryl.width = 102 * nehan;
  corddaryl.height = 102 * nehan;
  kierce.globalAlpha = nataile ? .5 : 1;
  kierce.translate(3, 3);
  round_rect(kierce, 24 * nehan, 26 * nehan, 70 * nehan, 9 * nehan, 10 * nehan);
  fill_path(kierce, sifa[0]);
  round_rect(kierce, 26 * nehan, 70 * nehan, 70 * nehan, 9 * nehan, 10 * nehan);
  fill_path(kierce, sifa[0]);
  round_rect(kierce, 5 * nehan, 3 * nehan, 22 * nehan, 94 * nehan, 5 * nehan);
  fill_path(kierce, sifa[0]);
  round_rect(kierce, 40 * nehan, 3 * nehan, 22 * nehan, 94 * nehan, 5 * nehan);
  fill_path(kierce, sifa[0]);
  round_rect(kierce, 75 * nehan, 3 * nehan, 22 * nehan, 94 * nehan, 5 * nehan);
  fill_path(kierce, sifa[0]);
  kierce.globalAlpha = 1;
  kierce.translate(-3, -3);
  round_rect(kierce, 24 * nehan, 26 * nehan, 70 * nehan, 9 * nehan, 10 * nehan);
  fill_path(kierce, sifa[1]);
  round_rect(kierce, 26 * nehan, 70 * nehan, 70 * nehan, 9 * nehan, 10 * nehan);
  fill_path(kierce, sifa[1]);
  round_rect(kierce, 5 * nehan, 3 * nehan, 22 * nehan, 94 * nehan, 5 * nehan);
  fill_path(kierce, sifa[2], sifa[3], 4 * nehan);
  round_rect(kierce, 40 * nehan, 3 * nehan, 22 * nehan, 94 * nehan, 5 * nehan);
  fill_path(kierce, sifa[2], sifa[3], 4 * nehan);
  round_rect(kierce, 75 * nehan, 3 * nehan, 22 * nehan, 94 * nehan, 5 * nehan);
  fill_path(kierce, sifa[2], sifa[3], 4 * nehan);
  return corddaryl;
}
function create_well_border(kalayshia, ismael) {
  var toivo = document.createElement("canvas");
  var ayu = toivo.getContext("2d");
  toivo.width = 496 * kalayshia;
  toivo.height = 520 * kalayshia;
  ayu.globalAlpha = 1;
  ayu.translate(0, -10 * kalayshia);
  circle(ayu, 247.01138305664062 * kalayshia, 250.13068389892578 * kalayshia, 232.81967270830015 * kalayshia);
  fill_path(ayu, ismael[1], ismael[2], 14 * kalayshia);
  ayu.globalCompositeOperation = "destination-out";
  circle(ayu, 247.01138305664062 * kalayshia, 249.3125 * kalayshia, 161.4465855941215 * kalayshia);
  fill_path(ayu, ismael[0], ismael[0], 14 * kalayshia);
  ayu.globalCompositeOperation = "source-over";
  return toivo;
}
function create_well(nyshawn, jordanne, renetta) {
  var brahian = document.createElement("canvas");
  var dette = brahian.getContext("2d");
  brahian.width = 496 * nyshawn;
  brahian.height = 520 * nyshawn;
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 10 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(19.000030517578125 * nyshawn, 256.67613983154297 * nyshawn);
  dette.bezierCurveTo(1.000030517578125 * nyshawn, 332.67613983154297 * nyshawn, 23.000030517578125 * nyshawn, 404.67613983154297 * nyshawn, 95.00003051757812 * nyshawn, 463.67613983154297 * nyshawn);
  dette.bezierCurveTo(128.00003051757812 * nyshawn, 491.67613983154297 * nyshawn, 165.00003051757812 * nyshawn, 507.67613983154297 * nyshawn, 194.00003051757812 * nyshawn, 512.676139831543 * nyshawn);
  dette.bezierCurveTo(280.0000305175781 * nyshawn, 517.676139831543 * nyshawn, 291.0000305175781 * nyshawn, 516.676139831543 * nyshawn, 342.0000305175781 * nyshawn, 497.67613983154297 * nyshawn);
  dette.bezierCurveTo(425.0000305175781 * nyshawn, 454.67613983154297 * nyshawn, 469.0000305175781 * nyshawn, 392.67613983154297 * nyshawn, 468.0000305175781 * nyshawn, 300.67613983154297 * nyshawn);
  dette.bezierCurveTo(408.5000305175781 * nyshawn, 365.17613983154297 * nyshawn, 408.5000305175781 * nyshawn, 365.17613983154297 * nyshawn, 349.0000305175781 * nyshawn, 429.67613983154297 * nyshawn);
  dette.bezierCurveTo(256.0000305175781 * nyshawn, 473.67613983154297 * nyshawn, 167.00003051757812 * nyshawn, 459.67613983154297 * nyshawn, 78.00003051757812 * nyshawn, 384.67613983154297 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0]);
  dette.globalAlpha = 1;
  dette.translate(0, -10 * nyshawn);
  circle(dette, 247.01138305664062 * nyshawn, 249.3125 * nyshawn, 161.4465855941215 * nyshawn);
  fill_path(dette, renetta[5], undefined, 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 10 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(65.00003051757812 * nyshawn, 263.4034118652344 * nyshawn);
  dette.bezierCurveTo(109.00003051757812 * nyshawn, 160.40341186523438 * nyshawn, 185.00003051757812 * nyshawn, 128.40341186523438 * nyshawn, 222.00003051757812 * nyshawn, 124.40341186523438 * nyshawn);
  dette.bezierCurveTo(277.0000305175781 * nyshawn, 116.40341186523438 * nyshawn, 339.0000305175781 * nyshawn, 134.40341186523438 * nyshawn, 379.0000305175781 * nyshawn, 195.40341186523438 * nyshawn);
  dette.bezierCurveTo(409.0000305175781 * nyshawn, 242.40341186523438 * nyshawn, 416.0000305175781 * nyshawn, 256.4034118652344 * nyshawn, 428.0000305175781 * nyshawn, 304.4034118652344 * nyshawn);
  dette.bezierCurveTo(457.0000305175781 * nyshawn, 203.40341186523438 * nyshawn, 449.0000305175781 * nyshawn, 183.40341186523438 * nyshawn, 438.0000305175781 * nyshawn, 162.40341186523438 * nyshawn);
  dette.bezierCurveTo(381.0000305175781 * nyshawn, 73.40341186523438 * nyshawn, 360.0000305175781 * nyshawn, 66.40341186523438 * nyshawn, 257.0000305175781 * nyshawn, 46.403411865234375 * nyshawn);
  dette.bezierCurveTo(191.00003051757812 * nyshawn, 45.403411865234375 * nyshawn, 142.00003051757812 * nyshawn, 65.40341186523438 * nyshawn, 101.00003051757812 * nyshawn, 115.40341186523438 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0]);
  dette.globalAlpha = 1;
  var saleem = create_well_border(nyshawn, renetta);
  dette.drawImage(saleem, 0, 0);
  dette.translate(0, -10 * nyshawn);
  circle(dette, 247.01138305664062 * nyshawn, 249.3125 * nyshawn, 161.4465855941215 * nyshawn);
  fill_path(dette, undefined, renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(325.0113830566406 * nyshawn, 13.767059326171875 * nyshawn);
  dette.bezierCurveTo(349.5113830566406 * nyshawn, 25.767059326171875 * nyshawn, 349.5113830566406 * nyshawn, 25.767059326171875 * nyshawn, 374.0113830566406 * nyshawn, 37.767059326171875 * nyshawn);
  dette.bezierCurveTo(384.0113830566406 * nyshawn, 44.767059326171875 * nyshawn, 383.0113830566406 * nyshawn, 50.767059326171875 * nyshawn, 368.0113830566406 * nyshawn, 68.76705932617188 * nyshawn);
  dette.bezierCurveTo(352.5113830566406 * nyshawn, 91.26705932617188 * nyshawn, 352.5113830566406 * nyshawn, 91.26705932617188 * nyshawn, 337.0113830566406 * nyshawn, 113.76705932617188 * nyshawn);
  dette.bezierCurveTo(328.0113830566406 * nyshawn, 119.76705932617188 * nyshawn, 328.0113830566406 * nyshawn, 121.76705932617188 * nyshawn, 312.0113830566406 * nyshawn, 112.76705932617188 * nyshawn);
  dette.bezierCurveTo(303.0113830566406 * nyshawn, 108.26705932617188 * nyshawn, 303.0113830566406 * nyshawn, 108.26705932617188 * nyshawn, 294.0113830566406 * nyshawn, 103.76705932617188 * nyshawn);
  dette.bezierCurveTo(287.0113830566406 * nyshawn, 99.76705932617188 * nyshawn, 293.0113830566406 * nyshawn, 84.76705932617188 * nyshawn, 297.0113830566406 * nyshawn, 67.76705932617188 * nyshawn);
  dette.bezierCurveTo(302.0113830566406 * nyshawn, 47.767059326171875 * nyshawn, 302.0113830566406 * nyshawn, 47.767059326171875 * nyshawn, 307.0113830566406 * nyshawn, 27.767059326171875 * nyshawn);
  dette.bezierCurveTo(310.0113830566406 * nyshawn, 15.767059326171875 * nyshawn, 317.0113830566406 * nyshawn, 12.767059326171875 * nyshawn, 323.0113830566406 * nyshawn, 13.767059326171875 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(325.0113830566406 * nyshawn, 13.767059326171875 * nyshawn);
  dette.bezierCurveTo(349.5113830566406 * nyshawn, 25.767059326171875 * nyshawn, 349.5113830566406 * nyshawn, 25.767059326171875 * nyshawn, 374.0113830566406 * nyshawn, 37.767059326171875 * nyshawn);
  dette.bezierCurveTo(384.0113830566406 * nyshawn, 44.767059326171875 * nyshawn, 383.0113830566406 * nyshawn, 50.767059326171875 * nyshawn, 368.0113830566406 * nyshawn, 68.76705932617188 * nyshawn);
  dette.bezierCurveTo(352.5113830566406 * nyshawn, 91.26705932617188 * nyshawn, 352.5113830566406 * nyshawn, 91.26705932617188 * nyshawn, 337.0113830566406 * nyshawn, 113.76705932617188 * nyshawn);
  dette.bezierCurveTo(328.0113830566406 * nyshawn, 119.76705932617188 * nyshawn, 328.0113830566406 * nyshawn, 121.76705932617188 * nyshawn, 312.0113830566406 * nyshawn, 112.76705932617188 * nyshawn);
  dette.bezierCurveTo(303.0113830566406 * nyshawn, 108.26705932617188 * nyshawn, 303.0113830566406 * nyshawn, 108.26705932617188 * nyshawn, 294.0113830566406 * nyshawn, 103.76705932617188 * nyshawn);
  dette.bezierCurveTo(287.0113830566406 * nyshawn, 99.76705932617188 * nyshawn, 293.0113830566406 * nyshawn, 84.76705932617188 * nyshawn, 297.0113830566406 * nyshawn, 67.76705932617188 * nyshawn);
  dette.bezierCurveTo(302.0113830566406 * nyshawn, 47.767059326171875 * nyshawn, 302.0113830566406 * nyshawn, 47.767059326171875 * nyshawn, 307.0113830566406 * nyshawn, 27.767059326171875 * nyshawn);
  dette.bezierCurveTo(310.0113830566406 * nyshawn, 15.767059326171875 * nyshawn, 317.0113830566406 * nyshawn, 12.767059326171875 * nyshawn, 323.0113830566406 * nyshawn, 13.767059326171875 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[3], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(403.0113830566406 * nyshawn, 89.76705932617188 * nyshawn);
  dette.bezierCurveTo(413.0113830566406 * nyshawn, 76.76705932617188 * nyshawn, 418.0113830566406 * nyshawn, 79.76705932617188 * nyshawn, 428.0113830566406 * nyshawn, 92.76705932617188 * nyshawn);
  dette.bezierCurveTo(435.0113830566406 * nyshawn, 99.76705932617188 * nyshawn, 435.0113830566406 * nyshawn, 99.76705932617188 * nyshawn, 442.0113830566406 * nyshawn, 106.76705932617188 * nyshawn);
  dette.bezierCurveTo(450.0113830566406 * nyshawn, 116.76705932617188 * nyshawn, 445.0113830566406 * nyshawn, 119.76705932617188 * nyshawn, 433.0113830566406 * nyshawn, 128.76705932617188 * nyshawn);
  dette.bezierCurveTo(408.0113830566406 * nyshawn, 146.26705932617188 * nyshawn, 408.0113830566406 * nyshawn, 146.26705932617188 * nyshawn, 383.0113830566406 * nyshawn, 163.76705932617188 * nyshawn);
  dette.bezierCurveTo(376.0113830566406 * nyshawn, 166.76705932617188 * nyshawn, 377.0113830566406 * nyshawn, 165.76705932617188 * nyshawn, 368.0113830566406 * nyshawn, 156.76705932617188 * nyshawn);
  dette.bezierCurveTo(359.0113830566406 * nyshawn, 144.76705932617188 * nyshawn, 359.0113830566406 * nyshawn, 142.76705932617188 * nyshawn, 367.0113830566406 * nyshawn, 133.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(403.0113830566406 * nyshawn, 89.76705932617188 * nyshawn);
  dette.bezierCurveTo(413.0113830566406 * nyshawn, 76.76705932617188 * nyshawn, 418.0113830566406 * nyshawn, 79.76705932617188 * nyshawn, 428.0113830566406 * nyshawn, 92.76705932617188 * nyshawn);
  dette.bezierCurveTo(435.0113830566406 * nyshawn, 99.76705932617188 * nyshawn, 435.0113830566406 * nyshawn, 99.76705932617188 * nyshawn, 442.0113830566406 * nyshawn, 106.76705932617188 * nyshawn);
  dette.bezierCurveTo(450.0113830566406 * nyshawn, 116.76705932617188 * nyshawn, 445.0113830566406 * nyshawn, 119.76705932617188 * nyshawn, 433.0113830566406 * nyshawn, 128.76705932617188 * nyshawn);
  dette.bezierCurveTo(408.0113830566406 * nyshawn, 146.26705932617188 * nyshawn, 408.0113830566406 * nyshawn, 146.26705932617188 * nyshawn, 383.0113830566406 * nyshawn, 163.76705932617188 * nyshawn);
  dette.bezierCurveTo(376.0113830566406 * nyshawn, 166.76705932617188 * nyshawn, 377.0113830566406 * nyshawn, 165.76705932617188 * nyshawn, 368.0113830566406 * nyshawn, 156.76705932617188 * nyshawn);
  dette.bezierCurveTo(359.0113830566406 * nyshawn, 144.76705932617188 * nyshawn, 359.0113830566406 * nyshawn, 142.76705932617188 * nyshawn, 367.0113830566406 * nyshawn, 133.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(228.01138305664062 * nyshawn, 1.767059326171875 * nyshawn);
  dette.bezierCurveTo(246.51138305664062 * nyshawn, 3.267059326171875 * nyshawn, 246.51138305664062 * nyshawn, 3.267059326171875 * nyshawn, 265.0113830566406 * nyshawn, 4.767059326171875 * nyshawn);
  dette.bezierCurveTo(273.0113830566406 * nyshawn, 5.767059326171875 * nyshawn, 275.0113830566406 * nyshawn, 11.767059326171875 * nyshawn, 270.0113830566406 * nyshawn, 27.767059326171875 * nyshawn);
  dette.bezierCurveTo(264.0113830566406 * nyshawn, 54.267059326171875 * nyshawn, 264.0113830566406 * nyshawn, 54.267059326171875 * nyshawn, 258.0113830566406 * nyshawn, 80.76705932617188 * nyshawn);
  dette.bezierCurveTo(256.0113830566406 * nyshawn, 92.76705932617188 * nyshawn, 256.0113830566406 * nyshawn, 94.76705932617188 * nyshawn, 242.01138305664062 * nyshawn, 93.76705932617188 * nyshawn);
  dette.bezierCurveTo(226.01138305664062 * nyshawn, 95.76705932617188 * nyshawn, 225.01138305664062 * nyshawn, 91.76705932617188 * nyshawn, 225.01138305664062 * nyshawn, 80.76705932617188 * nyshawn);
  dette.bezierCurveTo(223.51138305664062 * nyshawn, 50.267059326171875 * nyshawn, 223.51138305664062 * nyshawn, 50.267059326171875 * nyshawn, 222.01138305664062 * nyshawn, 19.767059326171875 * nyshawn);
  dette.bezierCurveTo(219.01138305664062 * nyshawn, 8.767059326171875 * nyshawn, 224.01138305664062 * nyshawn, 4.767059326171875 * nyshawn, 227.01138305664062 * nyshawn, 2.767059326171875 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(228.01138305664062 * nyshawn, 1.767059326171875 * nyshawn);
  dette.bezierCurveTo(246.51138305664062 * nyshawn, 3.267059326171875 * nyshawn, 246.51138305664062 * nyshawn, 3.267059326171875 * nyshawn, 265.0113830566406 * nyshawn, 4.767059326171875 * nyshawn);
  dette.bezierCurveTo(273.0113830566406 * nyshawn, 5.767059326171875 * nyshawn, 275.0113830566406 * nyshawn, 11.767059326171875 * nyshawn, 270.0113830566406 * nyshawn, 27.767059326171875 * nyshawn);
  dette.bezierCurveTo(264.0113830566406 * nyshawn, 54.267059326171875 * nyshawn, 264.0113830566406 * nyshawn, 54.267059326171875 * nyshawn, 258.0113830566406 * nyshawn, 80.76705932617188 * nyshawn);
  dette.bezierCurveTo(256.0113830566406 * nyshawn, 92.76705932617188 * nyshawn, 256.0113830566406 * nyshawn, 94.76705932617188 * nyshawn, 242.01138305664062 * nyshawn, 93.76705932617188 * nyshawn);
  dette.bezierCurveTo(226.01138305664062 * nyshawn, 95.76705932617188 * nyshawn, 225.01138305664062 * nyshawn, 91.76705932617188 * nyshawn, 225.01138305664062 * nyshawn, 80.76705932617188 * nyshawn);
  dette.bezierCurveTo(223.51138305664062 * nyshawn, 50.267059326171875 * nyshawn, 223.51138305664062 * nyshawn, 50.267059326171875 * nyshawn, 222.01138305664062 * nyshawn, 19.767059326171875 * nyshawn);
  dette.bezierCurveTo(219.01138305664062 * nyshawn, 8.767059326171875 * nyshawn, 224.01138305664062 * nyshawn, 4.767059326171875 * nyshawn, 227.01138305664062 * nyshawn, 2.767059326171875 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(142.01138305664062 * nyshawn, 25.767059326171875 * nyshawn);
  dette.bezierCurveTo(158.51138305664062 * nyshawn, 19.767059326171875 * nyshawn, 158.51138305664062 * nyshawn, 19.767059326171875 * nyshawn, 175.01138305664062 * nyshawn, 13.767059326171875 * nyshawn);
  dette.bezierCurveTo(188.01138305664062 * nyshawn, 11.767059326171875 * nyshawn, 188.01138305664062 * nyshawn, 16.767059326171875 * nyshawn, 191.01138305664062 * nyshawn, 29.767059326171875 * nyshawn);
  dette.bezierCurveTo(197.01138305664062 * nyshawn, 60.267059326171875 * nyshawn, 197.01138305664062 * nyshawn, 60.267059326171875 * nyshawn, 203.01138305664062 * nyshawn, 90.76705932617188 * nyshawn);
  dette.bezierCurveTo(206.01138305664062 * nyshawn, 102.76705932617188 * nyshawn, 196.01138305664062 * nyshawn, 99.76705932617188 * nyshawn, 181.01138305664062 * nyshawn, 105.76705932617188 * nyshawn);
  dette.bezierCurveTo(175.01138305664062 * nyshawn, 108.76705932617188 * nyshawn, 172.01138305664062 * nyshawn, 104.76705932617188 * nyshawn, 164.01138305664062 * nyshawn, 84.76705932617188 * nyshawn);
  dette.bezierCurveTo(152.51138305664062 * nyshawn, 63.267059326171875 * nyshawn, 152.51138305664062 * nyshawn, 63.267059326171875 * nyshawn, 141.01138305664062 * nyshawn, 41.767059326171875 * nyshawn);
  dette.bezierCurveTo(138.01138305664062 * nyshawn, 35.767059326171875 * nyshawn, 138.01138305664062 * nyshawn, 29.767059326171875 * nyshawn, 141.01138305664062 * nyshawn, 27.767059326171875 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(142.01138305664062 * nyshawn, 25.767059326171875 * nyshawn);
  dette.bezierCurveTo(158.51138305664062 * nyshawn, 19.767059326171875 * nyshawn, 158.51138305664062 * nyshawn, 19.767059326171875 * nyshawn, 175.01138305664062 * nyshawn, 13.767059326171875 * nyshawn);
  dette.bezierCurveTo(188.01138305664062 * nyshawn, 11.767059326171875 * nyshawn, 188.01138305664062 * nyshawn, 16.767059326171875 * nyshawn, 191.01138305664062 * nyshawn, 29.767059326171875 * nyshawn);
  dette.bezierCurveTo(197.01138305664062 * nyshawn, 60.267059326171875 * nyshawn, 197.01138305664062 * nyshawn, 60.267059326171875 * nyshawn, 203.01138305664062 * nyshawn, 90.76705932617188 * nyshawn);
  dette.bezierCurveTo(206.01138305664062 * nyshawn, 102.76705932617188 * nyshawn, 196.01138305664062 * nyshawn, 99.76705932617188 * nyshawn, 181.01138305664062 * nyshawn, 105.76705932617188 * nyshawn);
  dette.bezierCurveTo(175.01138305664062 * nyshawn, 108.76705932617188 * nyshawn, 172.01138305664062 * nyshawn, 104.76705932617188 * nyshawn, 164.01138305664062 * nyshawn, 84.76705932617188 * nyshawn);
  dette.bezierCurveTo(152.51138305664062 * nyshawn, 63.267059326171875 * nyshawn, 152.51138305664062 * nyshawn, 63.267059326171875 * nyshawn, 141.01138305664062 * nyshawn, 41.767059326171875 * nyshawn);
  dette.bezierCurveTo(138.01138305664062 * nyshawn, 35.767059326171875 * nyshawn, 138.01138305664062 * nyshawn, 29.767059326171875 * nyshawn, 141.01138305664062 * nyshawn, 27.767059326171875 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(70.01138305664062 * nyshawn, 76.76705932617188 * nyshawn);
  dette.bezierCurveTo(83.01138305664062 * nyshawn, 64.26705932617188 * nyshawn, 83.01138305664062 * nyshawn, 64.26705932617188 * nyshawn, 96.01138305664062 * nyshawn, 51.767059326171875 * nyshawn);
  dette.bezierCurveTo(104.01138305664062 * nyshawn, 44.767059326171875 * nyshawn, 110.01138305664062 * nyshawn, 51.767059326171875 * nyshawn, 119.01138305664062 * nyshawn, 66.76705932617188 * nyshawn);
  dette.bezierCurveTo(135.01138305664062 * nyshawn, 88.26705932617188 * nyshawn, 135.01138305664062 * nyshawn, 88.26705932617188 * nyshawn, 151.01138305664062 * nyshawn, 109.76705932617188 * nyshawn);
  dette.bezierCurveTo(157.01138305664062 * nyshawn, 119.76705932617188 * nyshawn, 153.01138305664062 * nyshawn, 122.76705932617188 * nyshawn, 147.01138305664062 * nyshawn, 129.76705932617188 * nyshawn);
  dette.bezierCurveTo(138.01138305664062 * nyshawn, 140.76705932617188 * nyshawn, 136.01138305664062 * nyshawn, 140.76705932617188 * nyshawn, 122.01138305664062 * nyshawn, 127.76705932617188 * nyshawn);
  dette.bezierCurveTo(99.51138305664062 * nyshawn, 110.26705932617188 * nyshawn, 99.51138305664062 * nyshawn, 110.26705932617188 * nyshawn, 77.01138305664062 * nyshawn, 92.76705932617188 * nyshawn);
  dette.bezierCurveTo(66.01138305664062 * nyshawn, 83.76705932617188 * nyshawn, 66.01138305664062 * nyshawn, 82.76705932617188 * nyshawn, 69.01138305664062 * nyshawn, 78.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(70.01138305664062 * nyshawn, 76.76705932617188 * nyshawn);
  dette.bezierCurveTo(83.01138305664062 * nyshawn, 64.26705932617188 * nyshawn, 83.01138305664062 * nyshawn, 64.26705932617188 * nyshawn, 96.01138305664062 * nyshawn, 51.767059326171875 * nyshawn);
  dette.bezierCurveTo(104.01138305664062 * nyshawn, 44.767059326171875 * nyshawn, 110.01138305664062 * nyshawn, 51.767059326171875 * nyshawn, 119.01138305664062 * nyshawn, 66.76705932617188 * nyshawn);
  dette.bezierCurveTo(135.01138305664062 * nyshawn, 88.26705932617188 * nyshawn, 135.01138305664062 * nyshawn, 88.26705932617188 * nyshawn, 151.01138305664062 * nyshawn, 109.76705932617188 * nyshawn);
  dette.bezierCurveTo(157.01138305664062 * nyshawn, 119.76705932617188 * nyshawn, 153.01138305664062 * nyshawn, 122.76705932617188 * nyshawn, 147.01138305664062 * nyshawn, 129.76705932617188 * nyshawn);
  dette.bezierCurveTo(138.01138305664062 * nyshawn, 140.76705932617188 * nyshawn, 136.01138305664062 * nyshawn, 140.76705932617188 * nyshawn, 122.01138305664062 * nyshawn, 127.76705932617188 * nyshawn);
  dette.bezierCurveTo(99.51138305664062 * nyshawn, 110.26705932617188 * nyshawn, 99.51138305664062 * nyshawn, 110.26705932617188 * nyshawn, 77.01138305664062 * nyshawn, 92.76705932617188 * nyshawn);
  dette.bezierCurveTo(66.01138305664062 * nyshawn, 83.76705932617188 * nyshawn, 66.01138305664062 * nyshawn, 82.76705932617188 * nyshawn, 69.01138305664062 * nyshawn, 78.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(33.011383056640625 * nyshawn, 126.76705932617188 * nyshawn);
  dette.bezierCurveTo(22.011383056640625 * nyshawn, 149.76705932617188 * nyshawn, 22.011383056640625 * nyshawn, 149.76705932617188 * nyshawn, 11.011383056640625 * nyshawn, 172.76705932617188 * nyshawn);
  dette.bezierCurveTo(7.011383056640625 * nyshawn, 184.76705932617188 * nyshawn, 11.011383056640625 * nyshawn, 189.76705932617188 * nyshawn, 36.011383056640625 * nyshawn, 195.76705932617188 * nyshawn);
  dette.bezierCurveTo(61.011383056640625 * nyshawn, 202.26705932617188 * nyshawn, 61.011383056640625 * nyshawn, 202.26705932617188 * nyshawn, 86.01138305664062 * nyshawn, 208.76705932617188 * nyshawn);
  dette.bezierCurveTo(100.01138305664062 * nyshawn, 214.76705932617188 * nyshawn, 102.01138305664062 * nyshawn, 203.76705932617188 * nyshawn, 109.01138305664062 * nyshawn, 189.76705932617188 * nyshawn);
  dette.bezierCurveTo(117.01138305664062 * nyshawn, 171.76705932617188 * nyshawn, 116.01138305664062 * nyshawn, 166.76705932617188 * nyshawn, 97.01138305664062 * nyshawn, 156.76705932617188 * nyshawn);
  dette.bezierCurveTo(74.01138305664062 * nyshawn, 140.76705932617188 * nyshawn, 74.01138305664062 * nyshawn, 140.76705932617188 * nyshawn, 51.011383056640625 * nyshawn, 124.76705932617188 * nyshawn);
  dette.bezierCurveTo(42.011383056640625 * nyshawn, 118.76705932617188 * nyshawn, 37.011383056640625 * nyshawn, 119.76705932617188 * nyshawn, 33.011383056640625 * nyshawn, 126.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(33.011383056640625 * nyshawn, 126.76705932617188 * nyshawn);
  dette.bezierCurveTo(22.011383056640625 * nyshawn, 149.76705932617188 * nyshawn, 22.011383056640625 * nyshawn, 149.76705932617188 * nyshawn, 11.011383056640625 * nyshawn, 172.76705932617188 * nyshawn);
  dette.bezierCurveTo(7.011383056640625 * nyshawn, 184.76705932617188 * nyshawn, 11.011383056640625 * nyshawn, 189.76705932617188 * nyshawn, 36.011383056640625 * nyshawn, 195.76705932617188 * nyshawn);
  dette.bezierCurveTo(61.011383056640625 * nyshawn, 202.26705932617188 * nyshawn, 61.011383056640625 * nyshawn, 202.26705932617188 * nyshawn, 86.01138305664062 * nyshawn, 208.76705932617188 * nyshawn);
  dette.bezierCurveTo(100.01138305664062 * nyshawn, 214.76705932617188 * nyshawn, 102.01138305664062 * nyshawn, 203.76705932617188 * nyshawn, 109.01138305664062 * nyshawn, 189.76705932617188 * nyshawn);
  dette.bezierCurveTo(117.01138305664062 * nyshawn, 171.76705932617188 * nyshawn, 116.01138305664062 * nyshawn, 166.76705932617188 * nyshawn, 97.01138305664062 * nyshawn, 156.76705932617188 * nyshawn);
  dette.bezierCurveTo(74.01138305664062 * nyshawn, 140.76705932617188 * nyshawn, 74.01138305664062 * nyshawn, 140.76705932617188 * nyshawn, 51.011383056640625 * nyshawn, 124.76705932617188 * nyshawn);
  dette.bezierCurveTo(42.011383056640625 * nyshawn, 118.76705932617188 * nyshawn, 37.011383056640625 * nyshawn, 119.76705932617188 * nyshawn, 33.011383056640625 * nyshawn, 126.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[3], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(13.011383056640625 * nyshawn, 229.76705932617188 * nyshawn);
  dette.bezierCurveTo(45.511383056640625 * nyshawn, 233.76705932617188 * nyshawn, 45.511383056640625 * nyshawn, 233.76705932617188 * nyshawn, 78.01138305664062 * nyshawn, 237.76705932617188 * nyshawn);
  dette.bezierCurveTo(92.01138305664062 * nyshawn, 239.76705932617188 * nyshawn, 92.01138305664062 * nyshawn, 246.76705932617188 * nyshawn, 91.01138305664062 * nyshawn, 257.7670593261719 * nyshawn);
  dette.bezierCurveTo(92.01138305664062 * nyshawn, 275.7670593261719 * nyshawn, 91.01138305664062 * nyshawn, 274.7670593261719 * nyshawn, 68.01138305664062 * nyshawn, 276.7670593261719 * nyshawn);
  dette.bezierCurveTo(42.511383056640625 * nyshawn, 279.7670593261719 * nyshawn, 42.511383056640625 * nyshawn, 279.7670593261719 * nyshawn, 17.011383056640625 * nyshawn, 282.7670593261719 * nyshawn);
  dette.bezierCurveTo(2.011383056640625 * nyshawn, 282.7670593261719 * nyshawn, 3.011383056640625 * nyshawn, 276.7670593261719 * nyshawn, 2.011383056640625 * nyshawn, 260.7670593261719 * nyshawn);
  dette.bezierCurveTo(2.011383056640625 * nyshawn, 231.76705932617188 * nyshawn, 4.011383056640625 * nyshawn, 232.76705932617188 * nyshawn, 11.011383056640625 * nyshawn, 230.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(13.011383056640625 * nyshawn, 229.76705932617188 * nyshawn);
  dette.bezierCurveTo(45.511383056640625 * nyshawn, 233.76705932617188 * nyshawn, 45.511383056640625 * nyshawn, 233.76705932617188 * nyshawn, 78.01138305664062 * nyshawn, 237.76705932617188 * nyshawn);
  dette.bezierCurveTo(92.01138305664062 * nyshawn, 239.76705932617188 * nyshawn, 92.01138305664062 * nyshawn, 246.76705932617188 * nyshawn, 91.01138305664062 * nyshawn, 257.7670593261719 * nyshawn);
  dette.bezierCurveTo(92.01138305664062 * nyshawn, 275.7670593261719 * nyshawn, 91.01138305664062 * nyshawn, 274.7670593261719 * nyshawn, 68.01138305664062 * nyshawn, 276.7670593261719 * nyshawn);
  dette.bezierCurveTo(42.511383056640625 * nyshawn, 279.7670593261719 * nyshawn, 42.511383056640625 * nyshawn, 279.7670593261719 * nyshawn, 17.011383056640625 * nyshawn, 282.7670593261719 * nyshawn);
  dette.bezierCurveTo(2.011383056640625 * nyshawn, 282.7670593261719 * nyshawn, 3.011383056640625 * nyshawn, 276.7670593261719 * nyshawn, 2.011383056640625 * nyshawn, 260.7670593261719 * nyshawn);
  dette.bezierCurveTo(2.011383056640625 * nyshawn, 231.76705932617188 * nyshawn, 4.011383056640625 * nyshawn, 232.76705932617188 * nyshawn, 11.011383056640625 * nyshawn, 230.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(97.01138305664062 * nyshawn, 329.7670593261719 * nyshawn);
  dette.bezierCurveTo(68.51138305664062 * nyshawn, 343.7670593261719 * nyshawn, 68.51138305664062 * nyshawn, 343.7670593261719 * nyshawn, 40.011383056640625 * nyshawn, 357.7670593261719 * nyshawn);
  dette.bezierCurveTo(29.011383056640625 * nyshawn, 360.7670593261719 * nyshawn, 27.011383056640625 * nyshawn, 361.7670593261719 * nyshawn, 20.011383056640625 * nyshawn, 346.7670593261719 * nyshawn);
  dette.bezierCurveTo(16.511383056640625 * nyshawn, 336.2670593261719 * nyshawn, 16.511383056640625 * nyshawn, 336.2670593261719 * nyshawn, 13.011383056640625 * nyshawn, 325.7670593261719 * nyshawn);
  dette.bezierCurveTo(10.011383056640625 * nyshawn, 307.7670593261719 * nyshawn, 18.011383056640625 * nyshawn, 312.7670593261719 * nyshawn, 34.011383056640625 * nyshawn, 306.7670593261719 * nyshawn);
  dette.bezierCurveTo(59.511383056640625 * nyshawn, 302.2670593261719 * nyshawn, 59.511383056640625 * nyshawn, 302.2670593261719 * nyshawn, 85.01138305664062 * nyshawn, 297.7670593261719 * nyshawn);
  dette.bezierCurveTo(97.01138305664062 * nyshawn, 294.7670593261719 * nyshawn, 100.01138305664062 * nyshawn, 297.7670593261719 * nyshawn, 100.01138305664062 * nyshawn, 307.7670593261719 * nyshawn);
  dette.bezierCurveTo(105.01138305664062 * nyshawn, 326.7670593261719 * nyshawn, 103.01138305664062 * nyshawn, 325.7670593261719 * nyshawn, 97.01138305664062 * nyshawn, 329.7670593261719 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(97.01138305664062 * nyshawn, 329.7670593261719 * nyshawn);
  dette.bezierCurveTo(68.51138305664062 * nyshawn, 343.7670593261719 * nyshawn, 68.51138305664062 * nyshawn, 343.7670593261719 * nyshawn, 40.011383056640625 * nyshawn, 357.7670593261719 * nyshawn);
  dette.bezierCurveTo(29.011383056640625 * nyshawn, 360.7670593261719 * nyshawn, 27.011383056640625 * nyshawn, 361.7670593261719 * nyshawn, 20.011383056640625 * nyshawn, 346.7670593261719 * nyshawn);
  dette.bezierCurveTo(16.511383056640625 * nyshawn, 336.2670593261719 * nyshawn, 16.511383056640625 * nyshawn, 336.2670593261719 * nyshawn, 13.011383056640625 * nyshawn, 325.7670593261719 * nyshawn);
  dette.bezierCurveTo(10.011383056640625 * nyshawn, 307.7670593261719 * nyshawn, 18.011383056640625 * nyshawn, 312.7670593261719 * nyshawn, 34.011383056640625 * nyshawn, 306.7670593261719 * nyshawn);
  dette.bezierCurveTo(59.511383056640625 * nyshawn, 302.2670593261719 * nyshawn, 59.511383056640625 * nyshawn, 302.2670593261719 * nyshawn, 85.01138305664062 * nyshawn, 297.7670593261719 * nyshawn);
  dette.bezierCurveTo(97.01138305664062 * nyshawn, 294.7670593261719 * nyshawn, 100.01138305664062 * nyshawn, 297.7670593261719 * nyshawn, 100.01138305664062 * nyshawn, 307.7670593261719 * nyshawn);
  dette.bezierCurveTo(105.01138305664062 * nyshawn, 326.7670593261719 * nyshawn, 103.01138305664062 * nyshawn, 325.7670593261719 * nyshawn, 97.01138305664062 * nyshawn, 329.7670593261719 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(394.0113830566406 * nyshawn, 181.76705932617188 * nyshawn);
  dette.bezierCurveTo(426.5113830566406 * nyshawn, 166.76705932617188 * nyshawn, 426.5113830566406 * nyshawn, 166.76705932617188 * nyshawn, 459.0113830566406 * nyshawn, 151.76705932617188 * nyshawn);
  dette.bezierCurveTo(469.0113830566406 * nyshawn, 152.76705932617188 * nyshawn, 469.0113830566406 * nyshawn, 155.76705932617188 * nyshawn, 472.0113830566406 * nyshawn, 165.76705932617188 * nyshawn);
  dette.bezierCurveTo(476.0113830566406 * nyshawn, 177.26705932617188 * nyshawn, 476.0113830566406 * nyshawn, 177.26705932617188 * nyshawn, 480.0113830566406 * nyshawn, 188.76705932617188 * nyshawn);
  dette.bezierCurveTo(483.0113830566406 * nyshawn, 199.76705932617188 * nyshawn, 480.0113830566406 * nyshawn, 200.76705932617188 * nyshawn, 460.0113830566406 * nyshawn, 205.76705932617188 * nyshawn);
  dette.bezierCurveTo(433.5113830566406 * nyshawn, 210.26705932617188 * nyshawn, 433.5113830566406 * nyshawn, 210.26705932617188 * nyshawn, 407.0113830566406 * nyshawn, 214.76705932617188 * nyshawn);
  dette.bezierCurveTo(395.0113830566406 * nyshawn, 218.76705932617188 * nyshawn, 397.0113830566406 * nyshawn, 211.76705932617188 * nyshawn, 393.0113830566406 * nyshawn, 202.76705932617188 * nyshawn);
  dette.bezierCurveTo(387.0113830566406 * nyshawn, 188.76705932617188 * nyshawn, 387.0113830566406 * nyshawn, 187.76705932617188 * nyshawn, 394.0113830566406 * nyshawn, 181.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(394.0113830566406 * nyshawn, 181.76705932617188 * nyshawn);
  dette.bezierCurveTo(426.5113830566406 * nyshawn, 166.76705932617188 * nyshawn, 426.5113830566406 * nyshawn, 166.76705932617188 * nyshawn, 459.0113830566406 * nyshawn, 151.76705932617188 * nyshawn);
  dette.bezierCurveTo(469.0113830566406 * nyshawn, 152.76705932617188 * nyshawn, 469.0113830566406 * nyshawn, 155.76705932617188 * nyshawn, 472.0113830566406 * nyshawn, 165.76705932617188 * nyshawn);
  dette.bezierCurveTo(476.0113830566406 * nyshawn, 177.26705932617188 * nyshawn, 476.0113830566406 * nyshawn, 177.26705932617188 * nyshawn, 480.0113830566406 * nyshawn, 188.76705932617188 * nyshawn);
  dette.bezierCurveTo(483.0113830566406 * nyshawn, 199.76705932617188 * nyshawn, 480.0113830566406 * nyshawn, 200.76705932617188 * nyshawn, 460.0113830566406 * nyshawn, 205.76705932617188 * nyshawn);
  dette.bezierCurveTo(433.5113830566406 * nyshawn, 210.26705932617188 * nyshawn, 433.5113830566406 * nyshawn, 210.26705932617188 * nyshawn, 407.0113830566406 * nyshawn, 214.76705932617188 * nyshawn);
  dette.bezierCurveTo(395.0113830566406 * nyshawn, 218.76705932617188 * nyshawn, 397.0113830566406 * nyshawn, 211.76705932617188 * nyshawn, 393.0113830566406 * nyshawn, 202.76705932617188 * nyshawn);
  dette.bezierCurveTo(387.0113830566406 * nyshawn, 188.76705932617188 * nyshawn, 387.0113830566406 * nyshawn, 187.76705932617188 * nyshawn, 394.0113830566406 * nyshawn, 181.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(411.0113830566406 * nyshawn, 234.76705932617188 * nyshawn);
  dette.bezierCurveTo(446.0113830566406 * nyshawn, 233.26705932617188 * nyshawn, 446.0113830566406 * nyshawn, 233.26705932617188 * nyshawn, 481.0113830566406 * nyshawn, 231.76705932617188 * nyshawn);
  dette.bezierCurveTo(491.0113830566406 * nyshawn, 232.76705932617188 * nyshawn, 493.0113830566406 * nyshawn, 239.76705932617188 * nyshawn, 491.0113830566406 * nyshawn, 251.76705932617188 * nyshawn);
  dette.bezierCurveTo(490.0113830566406 * nyshawn, 263.7670593261719 * nyshawn, 490.0113830566406 * nyshawn, 263.7670593261719 * nyshawn, 489.0113830566406 * nyshawn, 275.7670593261719 * nyshawn);
  dette.bezierCurveTo(487.0113830566406 * nyshawn, 283.7670593261719 * nyshawn, 483.0113830566406 * nyshawn, 284.7670593261719 * nyshawn, 464.0113830566406 * nyshawn, 280.7670593261719 * nyshawn);
  dette.bezierCurveTo(437.0113830566406 * nyshawn, 273.7670593261719 * nyshawn, 437.0113830566406 * nyshawn, 273.7670593261719 * nyshawn, 410.0113830566406 * nyshawn, 266.7670593261719 * nyshawn);
  dette.bezierCurveTo(400.0113830566406 * nyshawn, 261.7670593261719 * nyshawn, 401.0113830566406 * nyshawn, 259.7670593261719 * nyshawn, 402.0113830566406 * nyshawn, 249.76705932617188 * nyshawn);
  dette.bezierCurveTo(401.0113830566406 * nyshawn, 237.76705932617188 * nyshawn, 403.0113830566406 * nyshawn, 235.76705932617188 * nyshawn, 408.0113830566406 * nyshawn, 234.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(411.0113830566406 * nyshawn, 234.76705932617188 * nyshawn);
  dette.bezierCurveTo(446.0113830566406 * nyshawn, 233.26705932617188 * nyshawn, 446.0113830566406 * nyshawn, 233.26705932617188 * nyshawn, 481.0113830566406 * nyshawn, 231.76705932617188 * nyshawn);
  dette.bezierCurveTo(491.0113830566406 * nyshawn, 232.76705932617188 * nyshawn, 493.0113830566406 * nyshawn, 239.76705932617188 * nyshawn, 491.0113830566406 * nyshawn, 251.76705932617188 * nyshawn);
  dette.bezierCurveTo(490.0113830566406 * nyshawn, 263.7670593261719 * nyshawn, 490.0113830566406 * nyshawn, 263.7670593261719 * nyshawn, 489.0113830566406 * nyshawn, 275.7670593261719 * nyshawn);
  dette.bezierCurveTo(487.0113830566406 * nyshawn, 283.7670593261719 * nyshawn, 483.0113830566406 * nyshawn, 284.7670593261719 * nyshawn, 464.0113830566406 * nyshawn, 280.7670593261719 * nyshawn);
  dette.bezierCurveTo(437.0113830566406 * nyshawn, 273.7670593261719 * nyshawn, 437.0113830566406 * nyshawn, 273.7670593261719 * nyshawn, 410.0113830566406 * nyshawn, 266.7670593261719 * nyshawn);
  dette.bezierCurveTo(400.0113830566406 * nyshawn, 261.7670593261719 * nyshawn, 401.0113830566406 * nyshawn, 259.7670593261719 * nyshawn, 402.0113830566406 * nyshawn, 249.76705932617188 * nyshawn);
  dette.bezierCurveTo(401.0113830566406 * nyshawn, 237.76705932617188 * nyshawn, 403.0113830566406 * nyshawn, 235.76705932617188 * nyshawn, 408.0113830566406 * nyshawn, 234.76705932617188 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(400.0113830566406 * nyshawn, 290.7670593261719 * nyshawn);
  dette.bezierCurveTo(437.0113830566406 * nyshawn, 301.2670593261719 * nyshawn, 437.0113830566406 * nyshawn, 301.2670593261719 * nyshawn, 474.0113830566406 * nyshawn, 311.7670593261719 * nyshawn);
  dette.bezierCurveTo(484.0113830566406 * nyshawn, 319.7670593261719 * nyshawn, 481.0113830566406 * nyshawn, 322.7670593261719 * nyshawn, 474.0113830566406 * nyshawn, 335.7670593261719 * nyshawn);
  dette.bezierCurveTo(465.5113830566406 * nyshawn, 354.7670593261719 * nyshawn, 465.5113830566406 * nyshawn, 354.7670593261719 * nyshawn, 457.0113830566406 * nyshawn, 373.7670593261719 * nyshawn);
  dette.bezierCurveTo(449.0113830566406 * nyshawn, 386.7670593261719 * nyshawn, 444.0113830566406 * nyshawn, 384.7670593261719 * nyshawn, 427.0113830566406 * nyshawn, 370.7670593261719 * nyshawn);
  dette.bezierCurveTo(403.0113830566406 * nyshawn, 354.7670593261719 * nyshawn, 403.0113830566406 * nyshawn, 354.7670593261719 * nyshawn, 379.0113830566406 * nyshawn, 338.7670593261719 * nyshawn);
  dette.bezierCurveTo(371.0113830566406 * nyshawn, 327.7670593261719 * nyshawn, 373.0113830566406 * nyshawn, 323.7670593261719 * nyshawn, 377.0113830566406 * nyshawn, 313.7670593261719 * nyshawn);
  dette.bezierCurveTo(386.0113830566406 * nyshawn, 292.7670593261719 * nyshawn, 393.0113830566406 * nyshawn, 288.7670593261719 * nyshawn, 398.0113830566406 * nyshawn, 291.7670593261719 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(400.0113830566406 * nyshawn, 290.7670593261719 * nyshawn);
  dette.bezierCurveTo(437.0113830566406 * nyshawn, 301.2670593261719 * nyshawn, 437.0113830566406 * nyshawn, 301.2670593261719 * nyshawn, 474.0113830566406 * nyshawn, 311.7670593261719 * nyshawn);
  dette.bezierCurveTo(484.0113830566406 * nyshawn, 319.7670593261719 * nyshawn, 481.0113830566406 * nyshawn, 322.7670593261719 * nyshawn, 474.0113830566406 * nyshawn, 335.7670593261719 * nyshawn);
  dette.bezierCurveTo(465.5113830566406 * nyshawn, 354.7670593261719 * nyshawn, 465.5113830566406 * nyshawn, 354.7670593261719 * nyshawn, 457.0113830566406 * nyshawn, 373.7670593261719 * nyshawn);
  dette.bezierCurveTo(449.0113830566406 * nyshawn, 386.7670593261719 * nyshawn, 444.0113830566406 * nyshawn, 384.7670593261719 * nyshawn, 427.0113830566406 * nyshawn, 370.7670593261719 * nyshawn);
  dette.bezierCurveTo(403.0113830566406 * nyshawn, 354.7670593261719 * nyshawn, 403.0113830566406 * nyshawn, 354.7670593261719 * nyshawn, 379.0113830566406 * nyshawn, 338.7670593261719 * nyshawn);
  dette.bezierCurveTo(371.0113830566406 * nyshawn, 327.7670593261719 * nyshawn, 373.0113830566406 * nyshawn, 323.7670593261719 * nyshawn, 377.0113830566406 * nyshawn, 313.7670593261719 * nyshawn);
  dette.bezierCurveTo(386.0113830566406 * nyshawn, 292.7670593261719 * nyshawn, 393.0113830566406 * nyshawn, 288.7670593261719 * nyshawn, 398.0113830566406 * nyshawn, 291.7670593261719 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[3], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(366.0113830566406 * nyshawn, 361.2216033935547 * nyshawn);
  dette.bezierCurveTo(393.0113830566406 * nyshawn, 383.2216033935547 * nyshawn, 393.0113830566406 * nyshawn, 383.2216033935547 * nyshawn, 420.0113830566406 * nyshawn, 405.2216033935547 * nyshawn);
  dette.bezierCurveTo(427.0113830566406 * nyshawn, 414.2216033935547 * nyshawn, 425.0113830566406 * nyshawn, 417.2216033935547 * nyshawn, 413.0113830566406 * nyshawn, 428.2216033935547 * nyshawn);
  dette.bezierCurveTo(405.5113830566406 * nyshawn, 435.2216033935547 * nyshawn, 405.5113830566406 * nyshawn, 435.2216033935547 * nyshawn, 398.0113830566406 * nyshawn, 442.2216033935547 * nyshawn);
  dette.bezierCurveTo(388.0113830566406 * nyshawn, 451.2216033935547 * nyshawn, 385.0113830566406 * nyshawn, 445.2216033935547 * nyshawn, 373.0113830566406 * nyshawn, 428.2216033935547 * nyshawn);
  dette.bezierCurveTo(358.5113830566406 * nyshawn, 408.2216033935547 * nyshawn, 358.5113830566406 * nyshawn, 408.2216033935547 * nyshawn, 344.0113830566406 * nyshawn, 388.2216033935547 * nyshawn);
  dette.bezierCurveTo(337.0113830566406 * nyshawn, 378.2216033935547 * nyshawn, 342.0113830566406 * nyshawn, 377.2216033935547 * nyshawn, 347.0113830566406 * nyshawn, 371.2216033935547 * nyshawn);
  dette.bezierCurveTo(359.0113830566406 * nyshawn, 359.2216033935547 * nyshawn, 361.0113830566406 * nyshawn, 358.2216033935547 * nyshawn, 364.0113830566406 * nyshawn, 361.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(366.0113830566406 * nyshawn, 361.2216033935547 * nyshawn);
  dette.bezierCurveTo(393.0113830566406 * nyshawn, 383.2216033935547 * nyshawn, 393.0113830566406 * nyshawn, 383.2216033935547 * nyshawn, 420.0113830566406 * nyshawn, 405.2216033935547 * nyshawn);
  dette.bezierCurveTo(427.0113830566406 * nyshawn, 414.2216033935547 * nyshawn, 425.0113830566406 * nyshawn, 417.2216033935547 * nyshawn, 413.0113830566406 * nyshawn, 428.2216033935547 * nyshawn);
  dette.bezierCurveTo(405.5113830566406 * nyshawn, 435.2216033935547 * nyshawn, 405.5113830566406 * nyshawn, 435.2216033935547 * nyshawn, 398.0113830566406 * nyshawn, 442.2216033935547 * nyshawn);
  dette.bezierCurveTo(388.0113830566406 * nyshawn, 451.2216033935547 * nyshawn, 385.0113830566406 * nyshawn, 445.2216033935547 * nyshawn, 373.0113830566406 * nyshawn, 428.2216033935547 * nyshawn);
  dette.bezierCurveTo(358.5113830566406 * nyshawn, 408.2216033935547 * nyshawn, 358.5113830566406 * nyshawn, 408.2216033935547 * nyshawn, 344.0113830566406 * nyshawn, 388.2216033935547 * nyshawn);
  dette.bezierCurveTo(337.0113830566406 * nyshawn, 378.2216033935547 * nyshawn, 342.0113830566406 * nyshawn, 377.2216033935547 * nyshawn, 347.0113830566406 * nyshawn, 371.2216033935547 * nyshawn);
  dette.bezierCurveTo(359.0113830566406 * nyshawn, 359.2216033935547 * nyshawn, 361.0113830566406 * nyshawn, 358.2216033935547 * nyshawn, 364.0113830566406 * nyshawn, 361.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(323.0113830566406 * nyshawn, 393.2216033935547 * nyshawn);
  dette.bezierCurveTo(338.0113830566406 * nyshawn, 424.7216033935547 * nyshawn, 338.0113830566406 * nyshawn, 424.7216033935547 * nyshawn, 353.0113830566406 * nyshawn, 456.2216033935547 * nyshawn);
  dette.bezierCurveTo(355.0113830566406 * nyshawn, 467.2216033935547 * nyshawn, 354.0113830566406 * nyshawn, 469.2216033935547 * nyshawn, 336.0113830566406 * nyshawn, 475.2216033935547 * nyshawn);
  dette.bezierCurveTo(326.0113830566406 * nyshawn, 478.2216033935547 * nyshawn, 326.0113830566406 * nyshawn, 478.2216033935547 * nyshawn, 316.0113830566406 * nyshawn, 481.2216033935547 * nyshawn);
  dette.bezierCurveTo(304.0113830566406 * nyshawn, 484.2216033935547 * nyshawn, 304.0113830566406 * nyshawn, 477.2216033935547 * nyshawn, 301.0113830566406 * nyshawn, 454.2216033935547 * nyshawn);
  dette.bezierCurveTo(295.5113830566406 * nyshawn, 429.2216033935547 * nyshawn, 295.5113830566406 * nyshawn, 429.2216033935547 * nyshawn, 290.0113830566406 * nyshawn, 404.2216033935547 * nyshawn);
  dette.bezierCurveTo(287.0113830566406 * nyshawn, 396.2216033935547 * nyshawn, 297.0113830566406 * nyshawn, 394.2216033935547 * nyshawn, 303.0113830566406 * nyshawn, 392.2216033935547 * nyshawn);
  dette.bezierCurveTo(316.0113830566406 * nyshawn, 387.2216033935547 * nyshawn, 318.0113830566406 * nyshawn, 387.2216033935547 * nyshawn, 323.0113830566406 * nyshawn, 394.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(323.0113830566406 * nyshawn, 393.2216033935547 * nyshawn);
  dette.bezierCurveTo(338.0113830566406 * nyshawn, 424.7216033935547 * nyshawn, 338.0113830566406 * nyshawn, 424.7216033935547 * nyshawn, 353.0113830566406 * nyshawn, 456.2216033935547 * nyshawn);
  dette.bezierCurveTo(355.0113830566406 * nyshawn, 467.2216033935547 * nyshawn, 354.0113830566406 * nyshawn, 469.2216033935547 * nyshawn, 336.0113830566406 * nyshawn, 475.2216033935547 * nyshawn);
  dette.bezierCurveTo(326.0113830566406 * nyshawn, 478.2216033935547 * nyshawn, 326.0113830566406 * nyshawn, 478.2216033935547 * nyshawn, 316.0113830566406 * nyshawn, 481.2216033935547 * nyshawn);
  dette.bezierCurveTo(304.0113830566406 * nyshawn, 484.2216033935547 * nyshawn, 304.0113830566406 * nyshawn, 477.2216033935547 * nyshawn, 301.0113830566406 * nyshawn, 454.2216033935547 * nyshawn);
  dette.bezierCurveTo(295.5113830566406 * nyshawn, 429.2216033935547 * nyshawn, 295.5113830566406 * nyshawn, 429.2216033935547 * nyshawn, 290.0113830566406 * nyshawn, 404.2216033935547 * nyshawn);
  dette.bezierCurveTo(287.0113830566406 * nyshawn, 396.2216033935547 * nyshawn, 297.0113830566406 * nyshawn, 394.2216033935547 * nyshawn, 303.0113830566406 * nyshawn, 392.2216033935547 * nyshawn);
  dette.bezierCurveTo(316.0113830566406 * nyshawn, 387.2216033935547 * nyshawn, 318.0113830566406 * nyshawn, 387.2216033935547 * nyshawn, 323.0113830566406 * nyshawn, 394.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(270.0113830566406 * nyshawn, 413.2216033935547 * nyshawn);
  dette.bezierCurveTo(271.0113830566406 * nyshawn, 445.7216033935547 * nyshawn, 271.0113830566406 * nyshawn, 445.7216033935547 * nyshawn, 272.0113830566406 * nyshawn, 478.2216033935547 * nyshawn);
  dette.bezierCurveTo(273.0113830566406 * nyshawn, 490.2216033935547 * nyshawn, 267.0113830566406 * nyshawn, 493.2216033935547 * nyshawn, 249.01138305664062 * nyshawn, 490.2216033935547 * nyshawn);
  dette.bezierCurveTo(222.01138305664062 * nyshawn, 492.2216033935547 * nyshawn, 220.01138305664062 * nyshawn, 485.2216033935547 * nyshawn, 225.01138305664062 * nyshawn, 467.2216033935547 * nyshawn);
  dette.bezierCurveTo(230.51138305664062 * nyshawn, 440.2216033935547 * nyshawn, 230.51138305664062 * nyshawn, 440.2216033935547 * nyshawn, 236.01138305664062 * nyshawn, 413.2216033935547 * nyshawn);
  dette.bezierCurveTo(237.01138305664062 * nyshawn, 405.2216033935547 * nyshawn, 238.01138305664062 * nyshawn, 404.2216033935547 * nyshawn, 253.01138305664062 * nyshawn, 403.2216033935547 * nyshawn);
  dette.bezierCurveTo(269.0113830566406 * nyshawn, 405.2216033935547 * nyshawn, 270.0113830566406 * nyshawn, 407.2216033935547 * nyshawn, 269.0113830566406 * nyshawn, 412.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(270.0113830566406 * nyshawn, 413.2216033935547 * nyshawn);
  dette.bezierCurveTo(271.0113830566406 * nyshawn, 445.7216033935547 * nyshawn, 271.0113830566406 * nyshawn, 445.7216033935547 * nyshawn, 272.0113830566406 * nyshawn, 478.2216033935547 * nyshawn);
  dette.bezierCurveTo(273.0113830566406 * nyshawn, 490.2216033935547 * nyshawn, 267.0113830566406 * nyshawn, 493.2216033935547 * nyshawn, 249.01138305664062 * nyshawn, 490.2216033935547 * nyshawn);
  dette.bezierCurveTo(222.01138305664062 * nyshawn, 492.2216033935547 * nyshawn, 220.01138305664062 * nyshawn, 485.2216033935547 * nyshawn, 225.01138305664062 * nyshawn, 467.2216033935547 * nyshawn);
  dette.bezierCurveTo(230.51138305664062 * nyshawn, 440.2216033935547 * nyshawn, 230.51138305664062 * nyshawn, 440.2216033935547 * nyshawn, 236.01138305664062 * nyshawn, 413.2216033935547 * nyshawn);
  dette.bezierCurveTo(237.01138305664062 * nyshawn, 405.2216033935547 * nyshawn, 238.01138305664062 * nyshawn, 404.2216033935547 * nyshawn, 253.01138305664062 * nyshawn, 403.2216033935547 * nyshawn);
  dette.bezierCurveTo(269.0113830566406 * nyshawn, 405.2216033935547 * nyshawn, 270.0113830566406 * nyshawn, 407.2216033935547 * nyshawn, 269.0113830566406 * nyshawn, 412.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(207.01138305664062 * nyshawn, 406.2216033935547 * nyshawn);
  dette.bezierCurveTo(197.51138305664062 * nyshawn, 440.7216033935547 * nyshawn, 197.51138305664062 * nyshawn, 440.7216033935547 * nyshawn, 188.01138305664062 * nyshawn, 475.2216033935547 * nyshawn);
  dette.bezierCurveTo(184.01138305664062 * nyshawn, 485.2216033935547 * nyshawn, 179.01138305664062 * nyshawn, 491.2216033935547 * nyshawn, 152.01138305664062 * nyshawn, 477.2216033935547 * nyshawn);
  dette.bezierCurveTo(136.51138305664062 * nyshawn, 469.7216033935547 * nyshawn, 136.51138305664062 * nyshawn, 469.7216033935547 * nyshawn, 121.01138305664062 * nyshawn, 462.2216033935547 * nyshawn);
  dette.bezierCurveTo(109.01138305664062 * nyshawn, 453.2216033935547 * nyshawn, 117.01138305664062 * nyshawn, 447.2216033935547 * nyshawn, 133.01138305664062 * nyshawn, 427.2216033935547 * nyshawn);
  dette.bezierCurveTo(146.51138305664062 * nyshawn, 406.7216033935547 * nyshawn, 146.51138305664062 * nyshawn, 406.7216033935547 * nyshawn, 160.01138305664062 * nyshawn, 386.2216033935547 * nyshawn);
  dette.bezierCurveTo(163.01138305664062 * nyshawn, 377.2216033935547 * nyshawn, 168.01138305664062 * nyshawn, 378.2216033935547 * nyshawn, 187.01138305664062 * nyshawn, 387.2216033935547 * nyshawn);
  dette.bezierCurveTo(206.01138305664062 * nyshawn, 395.2216033935547 * nyshawn, 208.01138305664062 * nyshawn, 398.2216033935547 * nyshawn, 207.01138305664062 * nyshawn, 405.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(207.01138305664062 * nyshawn, 406.2216033935547 * nyshawn);
  dette.bezierCurveTo(197.51138305664062 * nyshawn, 440.7216033935547 * nyshawn, 197.51138305664062 * nyshawn, 440.7216033935547 * nyshawn, 188.01138305664062 * nyshawn, 475.2216033935547 * nyshawn);
  dette.bezierCurveTo(184.01138305664062 * nyshawn, 485.2216033935547 * nyshawn, 179.01138305664062 * nyshawn, 491.2216033935547 * nyshawn, 152.01138305664062 * nyshawn, 477.2216033935547 * nyshawn);
  dette.bezierCurveTo(136.51138305664062 * nyshawn, 469.7216033935547 * nyshawn, 136.51138305664062 * nyshawn, 469.7216033935547 * nyshawn, 121.01138305664062 * nyshawn, 462.2216033935547 * nyshawn);
  dette.bezierCurveTo(109.01138305664062 * nyshawn, 453.2216033935547 * nyshawn, 117.01138305664062 * nyshawn, 447.2216033935547 * nyshawn, 133.01138305664062 * nyshawn, 427.2216033935547 * nyshawn);
  dette.bezierCurveTo(146.51138305664062 * nyshawn, 406.7216033935547 * nyshawn, 146.51138305664062 * nyshawn, 406.7216033935547 * nyshawn, 160.01138305664062 * nyshawn, 386.2216033935547 * nyshawn);
  dette.bezierCurveTo(163.01138305664062 * nyshawn, 377.2216033935547 * nyshawn, 168.01138305664062 * nyshawn, 378.2216033935547 * nyshawn, 187.01138305664062 * nyshawn, 387.2216033935547 * nyshawn);
  dette.bezierCurveTo(206.01138305664062 * nyshawn, 395.2216033935547 * nyshawn, 208.01138305664062 * nyshawn, 398.2216033935547 * nyshawn, 207.01138305664062 * nyshawn, 405.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[3], renetta[2], 12 * nyshawn);
  dette.globalAlpha = jordanne ? .5 : 1;
  dette.translate(0, 5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(130.01138305664062 * nyshawn, 375.2216033935547 * nyshawn);
  dette.bezierCurveTo(109.51138305664062 * nyshawn, 400.7216033935547 * nyshawn, 109.51138305664062 * nyshawn, 400.7216033935547 * nyshawn, 89.01138305664062 * nyshawn, 426.2216033935547 * nyshawn);
  dette.bezierCurveTo(82.01138305664062 * nyshawn, 435.2216033935547 * nyshawn, 77.01138305664062 * nyshawn, 435.2216033935547 * nyshawn, 62.011383056640625 * nyshawn, 417.2216033935547 * nyshawn);
  dette.bezierCurveTo(43.011383056640625 * nyshawn, 397.2216033935547 * nyshawn, 47.011383056640625 * nyshawn, 395.2216033935547 * nyshawn, 62.011383056640625 * nyshawn, 382.2216033935547 * nyshawn);
  dette.bezierCurveTo(84.01138305664062 * nyshawn, 366.7216033935547 * nyshawn, 84.01138305664062 * nyshawn, 366.7216033935547 * nyshawn, 106.01138305664062 * nyshawn, 351.2216033935547 * nyshawn);
  dette.bezierCurveTo(116.01138305664062 * nyshawn, 344.2216033935547 * nyshawn, 120.01138305664062 * nyshawn, 347.2216033935547 * nyshawn, 127.01138305664062 * nyshawn, 356.2216033935547 * nyshawn);
  dette.bezierCurveTo(137.01138305664062 * nyshawn, 366.2216033935547 * nyshawn, 137.01138305664062 * nyshawn, 366.2216033935547 * nyshawn, 131.01138305664062 * nyshawn, 376.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[0], renetta[0], 12 * nyshawn);
  dette.globalAlpha = 1;
  dette.translate(0, -5 * nyshawn);
  dette.beginPath();
  dette.lineCap = "round";
  dette.lineJoin = "round";
  dette.moveTo(130.01138305664062 * nyshawn, 375.2216033935547 * nyshawn);
  dette.bezierCurveTo(109.51138305664062 * nyshawn, 400.7216033935547 * nyshawn, 109.51138305664062 * nyshawn, 400.7216033935547 * nyshawn, 89.01138305664062 * nyshawn, 426.2216033935547 * nyshawn);
  dette.bezierCurveTo(82.01138305664062 * nyshawn, 435.2216033935547 * nyshawn, 77.01138305664062 * nyshawn, 435.2216033935547 * nyshawn, 62.011383056640625 * nyshawn, 417.2216033935547 * nyshawn);
  dette.bezierCurveTo(43.011383056640625 * nyshawn, 397.2216033935547 * nyshawn, 47.011383056640625 * nyshawn, 395.2216033935547 * nyshawn, 62.011383056640625 * nyshawn, 382.2216033935547 * nyshawn);
  dette.bezierCurveTo(84.01138305664062 * nyshawn, 366.7216033935547 * nyshawn, 84.01138305664062 * nyshawn, 366.7216033935547 * nyshawn, 106.01138305664062 * nyshawn, 351.2216033935547 * nyshawn);
  dette.bezierCurveTo(116.01138305664062 * nyshawn, 344.2216033935547 * nyshawn, 120.01138305664062 * nyshawn, 347.2216033935547 * nyshawn, 127.01138305664062 * nyshawn, 356.2216033935547 * nyshawn);
  dette.bezierCurveTo(137.01138305664062 * nyshawn, 366.2216033935547 * nyshawn, 137.01138305664062 * nyshawn, 366.2216033935547 * nyshawn, 131.01138305664062 * nyshawn, 376.2216033935547 * nyshawn);
  dette.closePath();
  fill_path(dette, renetta[4], renetta[2], 12 * nyshawn);
  return brahian;
}
function create_sand(allizae, avanta, jalexie) {
  var yolander = document.createElement("canvas");
  var bevis = yolander.getContext("2d");
  yolander.width = 218 * allizae;
  yolander.height = 185 * allizae;
  bevis.beginPath();
  bevis.lineCap = "round";
  bevis.lineJoin = "round";
  bevis.moveTo(64 * allizae, 53.135406494140625 * allizae);
  bevis.bezierCurveTo(92 * allizae, 17.135406494140625 * allizae, 116 * allizae, 11.135406494140625 * allizae, 158 * allizae, 53.135406494140625 * allizae);
  bevis.bezierCurveTo(178 * allizae, 74.13540649414062 * allizae, 181 * allizae, 81.13540649414062 * allizae, 196 * allizae, 101.13540649414062 * allizae);
  bevis.bezierCurveTo(214 * allizae, 127.13540649414062 * allizae, 192 * allizae, 138.13540649414062 * allizae, 173 * allizae, 149.13540649414062 * allizae);
  bevis.bezierCurveTo(137 * allizae, 166.13540649414062 * allizae, 74 * allizae, 170.13540649414062 * allizae, 36 * allizae, 141.13540649414062 * allizae);
  bevis.bezierCurveTo(13 * allizae, 127.13540649414062 * allizae, 20 * allizae, 119.13540649414062 * allizae, 30 * allizae, 103.13540649414062 * allizae);
  bevis.bezierCurveTo(48 * allizae, 71.13540649414062 * allizae, 54 * allizae, 67.13540649414062 * allizae, 63 * allizae, 54.135406494140625 * allizae);
  bevis.closePath();
  fill_path(bevis, jalexie[0], jalexie[1], 10 * allizae);
  bevis.beginPath();
  bevis.lineCap = "round";
  bevis.lineJoin = "round";
  bevis.moveTo(107 * allizae, 25.135406494140625 * allizae);
  bevis.bezierCurveTo(62 * allizae, 90.13540649414062 * allizae, 54 * allizae, 129.13540649414062 * allizae, 53 * allizae, 151.13540649414062 * allizae);
  bevis.bezierCurveTo(39.5 * allizae, 142.13540649414062 * allizae, 39.5 * allizae, 142.13540649414062 * allizae, 26 * allizae, 133.13540649414062 * allizae);
  bevis.bezierCurveTo(23.5 * allizae, 128.63540649414062 * allizae, 23.5 * allizae, 128.63540649414062 * allizae, 21 * allizae, 124.13540649414062 * allizae);
  bevis.bezierCurveTo(22 * allizae, 113.13540649414062 * allizae, 31 * allizae, 99.13540649414062 * allizae, 40 * allizae, 88.13540649414062 * allizae);
  bevis.bezierCurveTo(54.5 * allizae, 67.13540649414062 * allizae, 54.5 * allizae, 67.13540649414062 * allizae, 69 * allizae, 46.135406494140625 * allizae);
  bevis.bezierCurveTo(80.5 * allizae, 36.635406494140625 * allizae, 80.5 * allizae, 36.635406494140625 * allizae, 92 * allizae, 27.135406494140625 * allizae);
  bevis.closePath();
  fill_path(bevis, jalexie[1]);
  return yolander;
}
function create_ice(philicity, kattya, gumaro) {
  var nusaybah = document.createElement("canvas");
  var pradeep = nusaybah.getContext("2d");
  nusaybah.width = 167 * philicity;
  nusaybah.height = 136 * philicity;
  pradeep.globalAlpha = .5;
  pradeep.save();
  pradeep.translate(76.71426391601562 * philicity, 67.85713195800781 * philicity);
  round_rect(pradeep, -57.5 * philicity, -54.5 * philicity, 115 * philicity, 109 * philicity, 15 * philicity);
  pradeep.restore();
  fill_path(pradeep, gumaro[0]);
  pradeep.globalAlpha = .8;
  pradeep.save();
  pradeep.translate(76.71426391601562 * philicity, 67.85713195800781 * philicity);
  round_rect(pradeep, -57.5 * philicity, -54.5 * philicity, 115 * philicity, 109 * philicity, 15 * philicity);
  pradeep.restore();
  fill_path(pradeep, undefined, gumaro[1], 7 * philicity);
  pradeep.globalAlpha = .5;
  pradeep.save();
  pradeep.translate(91.21426391601562 * philicity, 67.35713195800781 * philicity);
  round_rect(pradeep, -56 * philicity, -55 * philicity, 115 * philicity, 109 * philicity, 15 * philicity);
  pradeep.restore();
  fill_path(pradeep, gumaro[0]);
  pradeep.globalAlpha = 1;
  pradeep.save();
  pradeep.translate(91.21426391601562 * philicity, 67.35713195800781 * philicity);
  round_rect(pradeep, -56 * philicity, -55 * philicity, 115 * philicity, 109 * philicity, 15 * philicity);
  pradeep.restore();
  fill_path(pradeep, undefined, gumaro[1], 7 * philicity);
  pradeep.beginPath();
  pradeep.lineCap = "round";
  pradeep.lineJoin = "round";
  pradeep.moveTo(131.21426391601562 * philicity, 70.35713195800781 * philicity);
  pradeep.bezierCurveTo(133.21426391601562 * philicity, 95.35713195800781 * philicity, 128.21426391601562 * philicity, 109.35713195800781 * philicity, 108.21426391601562 * philicity, 108.35713195800781 * philicity);
  fill_path(pradeep, undefined, gumaro[1], 10 * philicity);
  return nusaybah;
}
function create_plot(eivin, taleeah, tayshon) {
  var kelvan = document.createElement("canvas");
  var keemora = kelvan.getContext("2d");
  kelvan.width = 163 * eivin;
  kelvan.height = 163 * eivin;
  keemora.save();
  keemora.translate(82.5 * eivin, 81.1015625 * eivin);
  keemora.rotate(0);
  round_rect(keemora, -65.5 * eivin, -66 * eivin, 131 * eivin, 131 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[1]);
  keemora.globalAlpha = taleeah ? .5 : 1;
  keemora.translate(5 * eivin, 5 * eivin);
  keemora.save();
  keemora.translate(80 * eivin, 17.1015625 * eivin);
  round_rect(keemora, -64 * eivin, -4.5 * eivin, 129 * eivin, 9 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[0]);
  keemora.globalAlpha = 1;
  keemora.translate(-5 * eivin, -5 * eivin);
  keemora.save();
  keemora.translate(80 * eivin, 17.1015625 * eivin);
  round_rect(keemora, -64 * eivin, -4.5 * eivin, 129 * eivin, 9 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[2], tayshon[3], 3 * eivin);
  keemora.globalAlpha = taleeah ? .5 : 1;
  keemora.translate(5 * eivin, 5 * eivin);
  keemora.save();
  keemora.translate(145.5 * eivin, 83.6015625 * eivin);
  round_rect(keemora, -4.5 * eivin, -61 * eivin, 9 * eivin, 129 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[0]);
  keemora.globalAlpha = 1;
  keemora.translate(-5 * eivin, -5 * eivin);
  keemora.save();
  keemora.translate(145.5 * eivin, 83.6015625 * eivin);
  round_rect(keemora, -4.5 * eivin, -61 * eivin, 9 * eivin, 129 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[2], tayshon[3], 3 * eivin);
  keemora.globalAlpha = taleeah ? .5 : 1;
  keemora.translate(5 * eivin, 5 * eivin);
  keemora.save();
  keemora.translate(17.5 * eivin, 82.6015625 * eivin);
  round_rect(keemora, -4.5 * eivin, -65 * eivin, 9 * eivin, 129 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[0]);
  keemora.globalAlpha = 1;
  keemora.translate(-5 * eivin, -5 * eivin);
  keemora.save();
  keemora.translate(17.5 * eivin, 82.6015625 * eivin);
  round_rect(keemora, -4.5 * eivin, -65 * eivin, 9 * eivin, 129 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[2], tayshon[3], 3 * eivin);
  keemora.globalAlpha = taleeah ? .5 : 1;
  keemora.translate(5 * eivin, 5 * eivin);
  keemora.save();
  keemora.translate(80.5 * eivin, 145.6015625 * eivin);
  round_rect(keemora, -65.5 * eivin, -4 * eivin, 129 * eivin, 9 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[0]);
  keemora.globalAlpha = 1;
  keemora.translate(-5 * eivin, -5 * eivin);
  keemora.save();
  keemora.translate(80.5 * eivin, 145.6015625 * eivin);
  round_rect(keemora, -65.5 * eivin, -4 * eivin, 129 * eivin, 9 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[2], tayshon[3], 3 * eivin);
  keemora.globalAlpha = taleeah ? .5 : 1;
  keemora.translate(5 * eivin, 5 * eivin);
  keemora.save();
  keemora.translate(17 * eivin, 18.1015625 * eivin);
  round_rect(keemora, -11 * eivin, -11.5 * eivin, 22 * eivin, 22 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[0]);
  keemora.globalAlpha = 1;
  keemora.translate(-5 * eivin, -5 * eivin);
  keemora.save();
  keemora.translate(17 * eivin, 18.1015625 * eivin);
  round_rect(keemora, -11 * eivin, -11.5 * eivin, 22 * eivin, 22 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[2], tayshon[3], 3 * eivin);
  keemora.globalAlpha = taleeah ? .5 : 1;
  keemora.translate(5 * eivin, 5 * eivin);
  keemora.save();
  keemora.translate(145.5 * eivin, 16.6015625 * eivin);
  round_rect(keemora, -10.5 * eivin, -11.5 * eivin, 21 * eivin, 22 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[0]);
  keemora.globalAlpha = 1;
  keemora.translate(-5 * eivin, -5 * eivin);
  keemora.save();
  keemora.translate(145.5 * eivin, 16.6015625 * eivin);
  round_rect(keemora, -10.5 * eivin, -11.5 * eivin, 21 * eivin, 22 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[2], tayshon[3], 3 * eivin);
  keemora.globalAlpha = taleeah ? .5 : 1;
  keemora.translate(5 * eivin, 5 * eivin);
  keemora.save();
  keemora.translate(145.5 * eivin, 144.1015625 * eivin);
  round_rect(keemora, -10.5 * eivin, -11 * eivin, 22 * eivin, 22 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[0]);
  keemora.globalAlpha = 1;
  keemora.translate(-5 * eivin, -5 * eivin);
  keemora.save();
  keemora.translate(145.5 * eivin, 144.1015625 * eivin);
  round_rect(keemora, -10.5 * eivin, -11 * eivin, 22 * eivin, 22 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[2], tayshon[3], 3 * eivin);
  keemora.globalAlpha = taleeah ? .5 : 1;
  keemora.translate(5 * eivin, 5 * eivin);
  keemora.save();
  keemora.translate(17.5 * eivin, 145.1015625 * eivin);
  round_rect(keemora, -11.5 * eivin, -12 * eivin, 22 * eivin, 22 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[0]);
  keemora.globalAlpha = 1;
  keemora.translate(-5 * eivin, -5 * eivin);
  keemora.save();
  keemora.translate(17.5 * eivin, 145.1015625 * eivin);
  round_rect(keemora, -11.5 * eivin, -12 * eivin, 22 * eivin, 22 * eivin, 5 * eivin);
  keemora.restore();
  fill_path(keemora, tayshon[2], tayshon[3], 3 * eivin);
  return kelvan;
}
function create_watering_can(eliazer, jamesina, anannya) {
  var maansi = document.createElement("canvas");
  var jullissa = maansi.getContext("2d");
  maansi.width = 168 * eliazer;
  maansi.height = 100 * eliazer;
  jullissa.globalAlpha = jamesina ? .5 : 1;
  jullissa.translate(10 * eliazer, 5 * eliazer);
  jullissa.save();
  jullissa.translate(24.5 * eliazer, 44.30000305175781 * eliazer);
  round_rect(jullissa, -19.5 * eliazer, -8.5 * eliazer, 39 * eliazer, 17 * eliazer, 10 * eliazer);
  jullissa.restore();
  fill_path(jullissa, anannya[0]);
  jullissa.beginPath();
  jullissa.lineCap = "round";
  jullissa.lineJoin = "round";
  jullissa.moveTo(115 * eliazer, 37.80000305175781 * eliazer);
  jullissa.bezierCurveTo(142 * eliazer, 37.80000305175781 * eliazer, 140 * eliazer, 37.80000305175781 * eliazer, 141 * eliazer, 37.80000305175781 * eliazer);
  jullissa.bezierCurveTo(147 * eliazer, 28.800003051757812 * eliazer, 149 * eliazer, 26.800003051757812 * eliazer, 153 * eliazer, 32.80000305175781 * eliazer);
  jullissa.bezierCurveTo(160 * eliazer, 42.80000305175781 * eliazer, 157 * eliazer, 50.80000305175781 * eliazer, 153 * eliazer, 58.80000305175781 * eliazer);
  jullissa.bezierCurveTo(148 * eliazer, 62.80000305175781 * eliazer, 147 * eliazer, 59.80000305175781 * eliazer, 143 * eliazer, 52.80000305175781 * eliazer);
  jullissa.bezierCurveTo(129 * eliazer, 52.80000305175781 * eliazer, 129 * eliazer, 52.80000305175781 * eliazer, 115 * eliazer, 52.80000305175781 * eliazer);
  jullissa.closePath();
  fill_path(jullissa, anannya[0]);
  circle(jullissa, 78 * eliazer, 44.80000305175781 * eliazer, 39.44616584663204 * eliazer);
  fill_path(jullissa, anannya[0]);
  jullissa.globalAlpha = 1;
  jullissa.translate(-10 * eliazer, -5 * eliazer);
  jullissa.save();
  jullissa.translate(24.5 * eliazer, 44.30000305175781 * eliazer);
  round_rect(jullissa, -19.5 * eliazer, -8.5 * eliazer, 39 * eliazer, 17 * eliazer, 10 * eliazer);
  jullissa.restore();
  fill_path(jullissa, undefined, anannya[3], 6 * eliazer);
  jullissa.beginPath();
  jullissa.lineCap = "round";
  jullissa.lineJoin = "round";
  jullissa.moveTo(115 * eliazer, 37.80000305175781 * eliazer);
  jullissa.bezierCurveTo(142 * eliazer, 37.80000305175781 * eliazer, 140 * eliazer, 37.80000305175781 * eliazer, 141 * eliazer, 37.80000305175781 * eliazer);
  jullissa.bezierCurveTo(147 * eliazer, 28.800003051757812 * eliazer, 149 * eliazer, 26.800003051757812 * eliazer, 153 * eliazer, 32.80000305175781 * eliazer);
  jullissa.bezierCurveTo(160 * eliazer, 42.80000305175781 * eliazer, 157 * eliazer, 50.80000305175781 * eliazer, 153 * eliazer, 58.80000305175781 * eliazer);
  jullissa.bezierCurveTo(148 * eliazer, 62.80000305175781 * eliazer, 147 * eliazer, 59.80000305175781 * eliazer, 143 * eliazer, 52.80000305175781 * eliazer);
  jullissa.bezierCurveTo(129 * eliazer, 52.80000305175781 * eliazer, 129 * eliazer, 52.80000305175781 * eliazer, 115 * eliazer, 52.80000305175781 * eliazer);
  jullissa.closePath();
  fill_path(jullissa, undefined, anannya[3], 6 * eliazer);
  circle(jullissa, 78 * eliazer, 44.80000305175781 * eliazer, 42.44616584663204 * eliazer);
  fill_path(jullissa, undefined, anannya[3], 6 * eliazer);
  jullissa.save();
  jullissa.translate(24.5 * eliazer, 44.30000305175781 * eliazer);
  round_rect(jullissa, -19.5 * eliazer, -8.5 * eliazer, 39 * eliazer, 17 * eliazer, 10 * eliazer);
  jullissa.restore();
  fill_path(jullissa, anannya[1]);
  jullissa.beginPath();
  jullissa.lineCap = "round";
  jullissa.lineJoin = "round";
  jullissa.moveTo(115 * eliazer, 37.80000305175781 * eliazer);
  jullissa.bezierCurveTo(142 * eliazer, 37.80000305175781 * eliazer, 140 * eliazer, 37.80000305175781 * eliazer, 141 * eliazer, 37.80000305175781 * eliazer);
  jullissa.bezierCurveTo(147 * eliazer, 28.800003051757812 * eliazer, 149 * eliazer, 26.800003051757812 * eliazer, 153 * eliazer, 32.80000305175781 * eliazer);
  jullissa.bezierCurveTo(160 * eliazer, 42.80000305175781 * eliazer, 157 * eliazer, 50.80000305175781 * eliazer, 153 * eliazer, 58.80000305175781 * eliazer);
  jullissa.bezierCurveTo(148 * eliazer, 62.80000305175781 * eliazer, 147 * eliazer, 59.80000305175781 * eliazer, 143 * eliazer, 52.80000305175781 * eliazer);
  jullissa.bezierCurveTo(129 * eliazer, 52.80000305175781 * eliazer, 129 * eliazer, 52.80000305175781 * eliazer, 115 * eliazer, 52.80000305175781 * eliazer);
  jullissa.closePath();
  fill_path(jullissa, anannya[1]);
  circle(jullissa, 78 * eliazer, 44.80000305175781 * eliazer, 39.44616584663204 * eliazer);
  fill_path(jullissa, anannya[2], anannya[1], 4 * eliazer);
  circle(jullissa, 78 * eliazer, 44.80000305175781 * eliazer, 29.68164415931166 * eliazer);
  fill_path(jullissa, anannya[3], anannya[1], 4 * eliazer);
  circle(jullissa, 78 * eliazer, 44 * eliazer, 20 * eliazer);
  fill_path(jullissa, anannya[4]);
  return maansi;
}
function create_pirahna(jermyn, dareian, shatiera) {
  var kristianne = document.createElement("canvas");
  var braydn = kristianne.getContext("2d");
  kristianne.width = 158 * jermyn;
  kristianne.height = 201 * jermyn;
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(96.5 * jermyn, 76.421875 * jermyn);
  braydn.bezierCurveTo(100.5 * jermyn, 64.421875 * jermyn, 103.5 * jermyn, 62.421875 * jermyn, 110.5 * jermyn, 65.421875 * jermyn);
  braydn.bezierCurveTo(116.5 * jermyn, 66.421875 * jermyn, 117.5 * jermyn, 67.421875 * jermyn, 112.5 * jermyn, 73.421875 * jermyn);
  braydn.bezierCurveTo(107 * jermyn, 79.921875 * jermyn, 107 * jermyn, 79.921875 * jermyn, 101.5 * jermyn, 86.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[8], shatiera[8], 10 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(61.5 * jermyn, 78.421875 * jermyn);
  braydn.bezierCurveTo(57.5 * jermyn, 73.421875 * jermyn, 51.5 * jermyn, 66.421875 * jermyn, 45.5 * jermyn, 68.421875 * jermyn);
  braydn.bezierCurveTo(32.5 * jermyn, 73.421875 * jermyn, 38.5 * jermyn, 75.421875 * jermyn, 46.5 * jermyn, 81.421875 * jermyn);
  braydn.bezierCurveTo(51.5 * jermyn, 84.921875 * jermyn, 51.5 * jermyn, 84.921875 * jermyn, 56.5 * jermyn, 88.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[8], shatiera[8], 10 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(116.5 * jermyn, 127.421875 * jermyn);
  braydn.bezierCurveTo(124.5 * jermyn, 108.421875 * jermyn, 129.5 * jermyn, 104.421875 * jermyn, 141.5 * jermyn, 107.421875 * jermyn);
  braydn.bezierCurveTo(156.5 * jermyn, 112.421875 * jermyn, 153.5 * jermyn, 113.421875 * jermyn, 132.5 * jermyn, 134.421875 * jermyn);
  braydn.bezierCurveTo(123.5 * jermyn, 141.921875 * jermyn, 123.5 * jermyn, 141.921875 * jermyn, 114.5 * jermyn, 149.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[8], shatiera[8], 10 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(41.5 * jermyn, 134.421875 * jermyn);
  braydn.bezierCurveTo(30.5 * jermyn, 119.421875 * jermyn, 25.5 * jermyn, 111.421875 * jermyn, 12.5 * jermyn, 115.421875 * jermyn);
  braydn.bezierCurveTo(4.5 * jermyn, 120.421875 * jermyn, 4.5 * jermyn, 121.421875 * jermyn, 26.5 * jermyn, 142.421875 * jermyn);
  braydn.bezierCurveTo(35 * jermyn, 149.921875 * jermyn, 35 * jermyn, 149.921875 * jermyn, 43.5 * jermyn, 157.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[8], shatiera[8], 10 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(78.5 * jermyn, 51.921875 * jermyn);
  braydn.bezierCurveTo(99.5 * jermyn, 75.921875 * jermyn, 110.5 * jermyn, 96.921875 * jermyn, 118.5 * jermyn, 120.921875 * jermyn);
  braydn.bezierCurveTo(121.5 * jermyn, 140.921875 * jermyn, 107.5 * jermyn, 179.921875 * jermyn, 75.5 * jermyn, 183.921875 * jermyn);
  braydn.bezierCurveTo(30.5 * jermyn, 169.921875 * jermyn, 37.5 * jermyn, 131.921875 * jermyn, 34.5 * jermyn, 120.921875 * jermyn);
  braydn.bezierCurveTo(41.5 * jermyn, 89.921875 * jermyn, 61.5 * jermyn, 67.921875 * jermyn, 78.5 * jermyn, 51.921875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[8], shatiera[8], 10 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(72.5 * jermyn, 72.421875 * jermyn);
  braydn.bezierCurveTo(76.5 * jermyn, 79.421875 * jermyn, 79.5 * jermyn, 80.421875 * jermyn, 83.5 * jermyn, 73.421875 * jermyn);
  braydn.bezierCurveTo(80.5 * jermyn, 96.921875 * jermyn, 79.5 * jermyn, 114.421875 * jermyn, 77.5 * jermyn, 120.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[8], shatiera[8], 10 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(42.5 * jermyn, 163.421875 * jermyn);
  braydn.bezierCurveTo(62.5 * jermyn, 185.421875 * jermyn, 86.5 * jermyn, 186.421875 * jermyn, 111.5 * jermyn, 165.421875 * jermyn);
  braydn.bezierCurveTo(107.5 * jermyn, 176.421875 * jermyn, 95.5 * jermyn, 187.421875 * jermyn, 75.5 * jermyn, 188.421875 * jermyn);
  braydn.bezierCurveTo(53.5 * jermyn, 188.421875 * jermyn, 43.5 * jermyn, 171.421875 * jermyn, 42.5 * jermyn, 164.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[8], shatiera[8], 8 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(79.5 * jermyn, 61.421875 * jermyn);
  braydn.bezierCurveTo(88.5 * jermyn, 31.421875 * jermyn, 81.5 * jermyn, 16.421875 * jermyn, 75.5 * jermyn, 7.421875 * jermyn);
  braydn.bezierCurveTo(77.5 * jermyn, 28.421875 * jermyn, 77.5 * jermyn, 37.421875 * jermyn, 68.5 * jermyn, 42.421875 * jermyn);
  braydn.bezierCurveTo(79.5 * jermyn, 57.421875 * jermyn, 79.5 * jermyn, 58.421875 * jermyn, 80.5 * jermyn, 61.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[8], shatiera[8], 10 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(72.5 * jermyn, 72.421875 * jermyn);
  braydn.bezierCurveTo(76.5 * jermyn, 79.421875 * jermyn, 79.5 * jermyn, 80.421875 * jermyn, 83.5 * jermyn, 73.421875 * jermyn);
  braydn.bezierCurveTo(80.5 * jermyn, 96.921875 * jermyn, 79.5 * jermyn, 114.421875 * jermyn, 77.5 * jermyn, 120.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[8], shatiera[8], 10 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(96.5 * jermyn, 76.421875 * jermyn);
  braydn.bezierCurveTo(100.5 * jermyn, 64.421875 * jermyn, 103.5 * jermyn, 62.421875 * jermyn, 110.5 * jermyn, 65.421875 * jermyn);
  braydn.bezierCurveTo(116.5 * jermyn, 66.421875 * jermyn, 117.5 * jermyn, 67.421875 * jermyn, 112.5 * jermyn, 73.421875 * jermyn);
  braydn.bezierCurveTo(107 * jermyn, 79.921875 * jermyn, 107 * jermyn, 79.921875 * jermyn, 101.5 * jermyn, 86.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[1], shatiera[2], 4 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(61.5 * jermyn, 78.421875 * jermyn);
  braydn.bezierCurveTo(57.5 * jermyn, 73.421875 * jermyn, 51.5 * jermyn, 66.421875 * jermyn, 45.5 * jermyn, 68.421875 * jermyn);
  braydn.bezierCurveTo(32.5 * jermyn, 73.421875 * jermyn, 38.5 * jermyn, 75.421875 * jermyn, 46.5 * jermyn, 81.421875 * jermyn);
  braydn.bezierCurveTo(51.5 * jermyn, 84.921875 * jermyn, 51.5 * jermyn, 84.921875 * jermyn, 56.5 * jermyn, 88.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[1], shatiera[2], 4 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(116.5 * jermyn, 127.421875 * jermyn);
  braydn.bezierCurveTo(124.5 * jermyn, 108.421875 * jermyn, 129.5 * jermyn, 104.421875 * jermyn, 141.5 * jermyn, 107.421875 * jermyn);
  braydn.bezierCurveTo(156.5 * jermyn, 112.421875 * jermyn, 153.5 * jermyn, 113.421875 * jermyn, 132.5 * jermyn, 134.421875 * jermyn);
  braydn.bezierCurveTo(123.5 * jermyn, 141.921875 * jermyn, 123.5 * jermyn, 141.921875 * jermyn, 114.5 * jermyn, 149.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[1], shatiera[2], 4 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(41.5 * jermyn, 134.421875 * jermyn);
  braydn.bezierCurveTo(30.5 * jermyn, 119.421875 * jermyn, 25.5 * jermyn, 111.421875 * jermyn, 12.5 * jermyn, 115.421875 * jermyn);
  braydn.bezierCurveTo(4.5 * jermyn, 120.421875 * jermyn, 4.5 * jermyn, 121.421875 * jermyn, 26.5 * jermyn, 142.421875 * jermyn);
  braydn.bezierCurveTo(35 * jermyn, 149.921875 * jermyn, 35 * jermyn, 149.921875 * jermyn, 43.5 * jermyn, 157.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[1], shatiera[2], 4 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(78.5 * jermyn, 51.921875 * jermyn);
  braydn.bezierCurveTo(99.5 * jermyn, 75.921875 * jermyn, 110.5 * jermyn, 96.921875 * jermyn, 118.5 * jermyn, 120.921875 * jermyn);
  braydn.bezierCurveTo(121.5 * jermyn, 140.921875 * jermyn, 107.5 * jermyn, 179.921875 * jermyn, 75.5 * jermyn, 183.921875 * jermyn);
  braydn.bezierCurveTo(30.5 * jermyn, 169.921875 * jermyn, 37.5 * jermyn, 131.921875 * jermyn, 34.5 * jermyn, 120.921875 * jermyn);
  braydn.bezierCurveTo(41.5 * jermyn, 89.921875 * jermyn, 61.5 * jermyn, 67.921875 * jermyn, 78.5 * jermyn, 51.921875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[3], shatiera[2], 4 * jermyn);
  circle(braydn, 108.5 * jermyn, 148.421875 * jermyn, 9 * jermyn);
  fill_path(braydn, shatiera[5]);
  circle(braydn, 106.5 * jermyn, 144.421875 * jermyn, 3 * jermyn);
  fill_path(braydn, shatiera[6]);
  circle(braydn, 46.5 * jermyn, 148.421875 * jermyn, 9 * jermyn);
  fill_path(braydn, shatiera[5]);
  circle(braydn, 44.5 * jermyn, 144.421875 * jermyn, 3 * jermyn);
  fill_path(braydn, shatiera[6]);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(116.5 * jermyn, 114.421875 * jermyn);
  braydn.bezierCurveTo(121.5 * jermyn, 137.421875 * jermyn, 118.5 * jermyn, 133.421875 * jermyn, 108.5 * jermyn, 139.421875 * jermyn);
  braydn.bezierCurveTo(94.5 * jermyn, 146.421875 * jermyn, 96.5 * jermyn, 148.421875 * jermyn, 95.5 * jermyn, 152.421875 * jermyn);
  fill_path(braydn, shatiera[3], shatiera[2], 4 * jermyn);
  braydn.beginPath();
  braydn.translate(0, -2 * jermyn);
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(35.5 * jermyn, 131.421875 * jermyn);
  braydn.bezierCurveTo(36.5 * jermyn, 140.421875 * jermyn, 39.5 * jermyn, 140.421875 * jermyn, 49.5 * jermyn, 143.421875 * jermyn);
  braydn.bezierCurveTo(59.5 * jermyn, 149.421875 * jermyn, 57.5 * jermyn, 151.421875 * jermyn, 59.5 * jermyn, 155.421875 * jermyn);
  fill_path(braydn, shatiera[3], shatiera[2], 4 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(84.5 * jermyn, 57.421875 * jermyn);
  braydn.bezierCurveTo(101.5 * jermyn, 120.421875 * jermyn, 92.5 * jermyn, 127.421875 * jermyn, 78.5 * jermyn, 134.421875 * jermyn);
  braydn.bezierCurveTo(51.5 * jermyn, 131.421875 * jermyn, 63.5 * jermyn, 102.421875 * jermyn, 70.5 * jermyn, 59.421875 * jermyn);
  braydn.bezierCurveTo(75 * jermyn, 55.421875 * jermyn, 78.5 * jermyn, 52.421875 * jermyn, 79.5 * jermyn, 51.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[4]);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(79.5 * jermyn, 61.421875 * jermyn);
  braydn.bezierCurveTo(88.5 * jermyn, 31.421875 * jermyn, 81.5 * jermyn, 16.421875 * jermyn, 75.5 * jermyn, 7.421875 * jermyn);
  braydn.bezierCurveTo(77.5 * jermyn, 28.421875 * jermyn, 77.5 * jermyn, 37.421875 * jermyn, 68.5 * jermyn, 42.421875 * jermyn);
  braydn.bezierCurveTo(79.5 * jermyn, 57.421875 * jermyn, 79.5 * jermyn, 58.421875 * jermyn, 80.5 * jermyn, 61.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[3], shatiera[2], 4 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(72.5 * jermyn, 72.421875 * jermyn);
  braydn.bezierCurveTo(76.5 * jermyn, 79.421875 * jermyn, 79.5 * jermyn, 80.421875 * jermyn, 83.5 * jermyn, 73.421875 * jermyn);
  braydn.bezierCurveTo(80.5 * jermyn, 96.921875 * jermyn, 79.5 * jermyn, 114.421875 * jermyn, 77.5 * jermyn, 120.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[3], shatiera[2], 4 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(87.5 * jermyn, 154.421875 * jermyn);
  braydn.bezierCurveTo(93.5 * jermyn, 163.921875 * jermyn, 93.5 * jermyn, 163.921875 * jermyn, 99.5 * jermyn, 173.421875 * jermyn);
  braydn.bezierCurveTo(95 * jermyn, 177.421875 * jermyn, 95 * jermyn, 177.421875 * jermyn, 90.5 * jermyn, 181.421875 * jermyn);
  braydn.bezierCurveTo(89 * jermyn, 167.921875 * jermyn, 89 * jermyn, 167.921875 * jermyn, 87.5 * jermyn, 154.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[6], shatiera[7], 2 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(81.5 * jermyn, 164.421875 * jermyn);
  braydn.bezierCurveTo(84 * jermyn, 172.921875 * jermyn, 84 * jermyn, 172.921875 * jermyn, 86.5 * jermyn, 181.421875 * jermyn);
  braydn.bezierCurveTo(82.5 * jermyn, 182.421875 * jermyn, 82.5 * jermyn, 182.421875 * jermyn, 78.5 * jermyn, 183.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[6], shatiera[7], 2 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(72.5 * jermyn, 164.421875 * jermyn);
  braydn.bezierCurveTo(73.5 * jermyn, 173.921875 * jermyn, 73.5 * jermyn, 173.921875 * jermyn, 74.5 * jermyn, 183.421875 * jermyn);
  braydn.bezierCurveTo(70.5 * jermyn, 182.921875 * jermyn, 70.5 * jermyn, 182.921875 * jermyn, 66.5 * jermyn, 182.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[6], shatiera[7], 2 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(65.5 * jermyn, 156.421875 * jermyn);
  braydn.bezierCurveTo(65 * jermyn, 168.421875 * jermyn, 65 * jermyn, 168.421875 * jermyn, 64.5 * jermyn, 180.421875 * jermyn);
  braydn.bezierCurveTo(58.5 * jermyn, 177.421875 * jermyn, 58.5 * jermyn, 177.421875 * jermyn, 52.5 * jermyn, 174.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[6], shatiera[7], 2 * jermyn);
  braydn.beginPath();
  braydn.lineCap = "round";
  braydn.lineJoin = "round";
  braydn.moveTo(42.5 * jermyn, 163.421875 * jermyn);
  braydn.bezierCurveTo(62.5 * jermyn, 185.421875 * jermyn, 86.5 * jermyn, 186.421875 * jermyn, 111.5 * jermyn, 165.421875 * jermyn);
  braydn.bezierCurveTo(107.5 * jermyn, 176.421875 * jermyn, 95.5 * jermyn, 187.421875 * jermyn, 75.5 * jermyn, 188.421875 * jermyn);
  braydn.bezierCurveTo(53.5 * jermyn, 188.421875 * jermyn, 43.5 * jermyn, 171.421875 * jermyn, 42.5 * jermyn, 164.421875 * jermyn);
  braydn.closePath();
  fill_path(braydn, shatiera[3], shatiera[2], 4 * jermyn);
  return kristianne;
}
function create_hurt_pirahna(undine, filmore) {
  var nazeir = document.createElement("canvas");
  var zanajah = nazeir.getContext("2d");
  nazeir.width = 158 * undine;
  nazeir.height = 201 * undine;
  zanajah.beginPath();
  zanajah.lineCap = "round";
  zanajah.lineJoin = "round";
  zanajah.moveTo(96.5 * undine, 76.421875 * undine);
  zanajah.bezierCurveTo(100.5 * undine, 64.421875 * undine, 103.5 * undine, 62.421875 * undine, 110.5 * undine, 65.421875 * undine);
  zanajah.bezierCurveTo(116.5 * undine, 66.421875 * undine, 117.5 * undine, 67.421875 * undine, 112.5 * undine, 73.421875 * undine);
  zanajah.bezierCurveTo(107 * undine, 79.921875 * undine, 107 * undine, 79.921875 * undine, 101.5 * undine, 86.421875 * undine);
  zanajah.closePath();
  fill_path(zanajah, filmore[0], filmore[0], 10 * undine);
  zanajah.beginPath();
  zanajah.lineCap = "round";
  zanajah.lineJoin = "round";
  zanajah.moveTo(61.5 * undine, 78.421875 * undine);
  zanajah.bezierCurveTo(57.5 * undine, 73.421875 * undine, 51.5 * undine, 66.421875 * undine, 45.5 * undine, 68.421875 * undine);
  zanajah.bezierCurveTo(32.5 * undine, 73.421875 * undine, 38.5 * undine, 75.421875 * undine, 46.5 * undine, 81.421875 * undine);
  zanajah.bezierCurveTo(51.5 * undine, 84.921875 * undine, 51.5 * undine, 84.921875 * undine, 56.5 * undine, 88.421875 * undine);
  zanajah.closePath();
  fill_path(zanajah, filmore[0], filmore[0], 10 * undine);
  zanajah.beginPath();
  zanajah.lineCap = "round";
  zanajah.lineJoin = "round";
  zanajah.moveTo(116.5 * undine, 127.421875 * undine);
  zanajah.bezierCurveTo(124.5 * undine, 108.421875 * undine, 129.5 * undine, 104.421875 * undine, 141.5 * undine, 107.421875 * undine);
  zanajah.bezierCurveTo(156.5 * undine, 112.421875 * undine, 153.5 * undine, 113.421875 * undine, 132.5 * undine, 134.421875 * undine);
  zanajah.bezierCurveTo(123.5 * undine, 141.921875 * undine, 123.5 * undine, 141.921875 * undine, 114.5 * undine, 149.421875 * undine);
  zanajah.closePath();
  fill_path(zanajah, filmore[0], filmore[0], 10 * undine);
  zanajah.beginPath();
  zanajah.lineCap = "round";
  zanajah.lineJoin = "round";
  zanajah.moveTo(41.5 * undine, 134.421875 * undine);
  zanajah.bezierCurveTo(30.5 * undine, 119.421875 * undine, 25.5 * undine, 111.421875 * undine, 12.5 * undine, 115.421875 * undine);
  zanajah.bezierCurveTo(4.5 * undine, 120.421875 * undine, 4.5 * undine, 121.421875 * undine, 26.5 * undine, 142.421875 * undine);
  zanajah.bezierCurveTo(35 * undine, 149.921875 * undine, 35 * undine, 149.921875 * undine, 43.5 * undine, 157.421875 * undine);
  zanajah.closePath();
  fill_path(zanajah, filmore[0], filmore[0], 10 * undine);
  zanajah.beginPath();
  zanajah.lineCap = "round";
  zanajah.lineJoin = "round";
  zanajah.moveTo(78.5 * undine, 51.921875 * undine);
  zanajah.bezierCurveTo(99.5 * undine, 75.921875 * undine, 110.5 * undine, 96.921875 * undine, 118.5 * undine, 120.921875 * undine);
  zanajah.bezierCurveTo(121.5 * undine, 140.921875 * undine, 107.5 * undine, 179.921875 * undine, 75.5 * undine, 183.921875 * undine);
  zanajah.bezierCurveTo(30.5 * undine, 169.921875 * undine, 37.5 * undine, 131.921875 * undine, 34.5 * undine, 120.921875 * undine);
  zanajah.bezierCurveTo(41.5 * undine, 89.921875 * undine, 61.5 * undine, 67.921875 * undine, 78.5 * undine, 51.921875 * undine);
  zanajah.closePath();
  fill_path(zanajah, filmore[0], filmore[0], 10 * undine);
  zanajah.beginPath();
  zanajah.lineCap = "round";
  zanajah.lineJoin = "round";
  zanajah.moveTo(72.5 * undine, 72.421875 * undine);
  zanajah.bezierCurveTo(76.5 * undine, 79.421875 * undine, 79.5 * undine, 80.421875 * undine, 83.5 * undine, 73.421875 * undine);
  zanajah.bezierCurveTo(80.5 * undine, 96.921875 * undine, 79.5 * undine, 114.421875 * undine, 77.5 * undine, 120.421875 * undine);
  zanajah.closePath();
  fill_path(zanajah, filmore[0], filmore[0], 10 * undine);
  zanajah.beginPath();
  zanajah.lineCap = "round";
  zanajah.lineJoin = "round";
  zanajah.moveTo(42.5 * undine, 163.421875 * undine);
  zanajah.bezierCurveTo(62.5 * undine, 185.421875 * undine, 86.5 * undine, 186.421875 * undine, 111.5 * undine, 165.421875 * undine);
  zanajah.bezierCurveTo(107.5 * undine, 176.421875 * undine, 95.5 * undine, 187.421875 * undine, 75.5 * undine, 188.421875 * undine);
  zanajah.bezierCurveTo(53.5 * undine, 188.421875 * undine, 43.5 * undine, 171.421875 * undine, 42.5 * undine, 164.421875 * undine);
  zanajah.closePath();
  fill_path(zanajah, filmore[0], filmore[0], 10 * undine);
  zanajah.beginPath();
  zanajah.lineCap = "round";
  zanajah.lineJoin = "round";
  zanajah.moveTo(79.5 * undine, 61.421875 * undine);
  zanajah.bezierCurveTo(88.5 * undine, 31.421875 * undine, 81.5 * undine, 16.421875 * undine, 75.5 * undine, 7.421875 * undine);
  zanajah.bezierCurveTo(77.5 * undine, 28.421875 * undine, 77.5 * undine, 37.421875 * undine, 68.5 * undine, 42.421875 * undine);
  zanajah.bezierCurveTo(79.5 * undine, 57.421875 * undine, 79.5 * undine, 58.421875 * undine, 80.5 * undine, 61.421875 * undine);
  zanajah.closePath();
  fill_path(zanajah, filmore[0], filmore[0], 10 * undine);
  zanajah.beginPath();
  zanajah.lineCap = "round";
  zanajah.lineJoin = "round";
  zanajah.moveTo(72.5 * undine, 72.421875 * undine);
  zanajah.bezierCurveTo(76.5 * undine, 79.421875 * undine, 79.5 * undine, 80.421875 * undine, 83.5 * undine, 73.421875 * undine);
  zanajah.bezierCurveTo(80.5 * undine, 96.921875 * undine, 79.5 * undine, 114.421875 * undine, 77.5 * undine, 120.421875 * undine);
  zanajah.closePath();
  fill_path(zanajah, filmore[0], filmore[0], 10 * undine);
  return nazeir;
}
function create_flour(zoelyn, josette, warda) {
  var nesby = document.createElement("canvas");
  var esmael = nesby.getContext("2d");
  nesby.width = 400 * zoelyn;
  nesby.height = 170 * zoelyn;
  esmael.translate(0, -170 * zoelyn);
  esmael.beginPath();
  esmael.lineCap = "round";
  esmael.lineJoin = "round";
  esmael.moveTo(159.5 * zoelyn, 322.0625 * zoelyn);
  esmael.bezierCurveTo(240.5 * zoelyn, 293.0625 * zoelyn, 240.5 * zoelyn, 293.0625 * zoelyn, 321.5 * zoelyn, 264.0625 * zoelyn);
  esmael.bezierCurveTo(276.5 * zoelyn, 230.0625 * zoelyn, 276.5 * zoelyn, 230.0625 * zoelyn, 231.5 * zoelyn, 196.0625 * zoelyn);
  esmael.bezierCurveTo(158.5 * zoelyn, 221.5625 * zoelyn, 158.5 * zoelyn, 221.5625 * zoelyn, 85.5 * zoelyn, 247.0625 * zoelyn);
  esmael.closePath();
  fill_path(esmael, warda[0], warda[1], 12 * zoelyn);
  esmael.beginPath();
  esmael.lineCap = "round";
  esmael.lineJoin = "round";
  esmael.moveTo(212.5 * zoelyn, 270.0625 * zoelyn);
  esmael.bezierCurveTo(235 * zoelyn, 261.5625 * zoelyn, 235 * zoelyn, 261.5625 * zoelyn, 257.5 * zoelyn, 253.0625 * zoelyn);
  esmael.closePath();
  fill_path(esmael, undefined, warda[0], 12 * zoelyn);
  esmael.beginPath();
  esmael.lineCap = "round";
  esmael.lineJoin = "round";
  esmael.moveTo(193.5 * zoelyn, 226.0625 * zoelyn);
  esmael.bezierCurveTo(204.5 * zoelyn, 242.0625 * zoelyn, 242.5 * zoelyn, 237.0625 * zoelyn, 251.5 * zoelyn, 225.0625 * zoelyn);
  esmael.bezierCurveTo(246.5 * zoelyn, 195.0625 * zoelyn, 205.5 * zoelyn, 190.0625 * zoelyn, 193.5 * zoelyn, 227.0625 * zoelyn);
  esmael.closePath();
  fill_path(esmael, warda[2], warda[3], 12 * zoelyn);
  esmael.beginPath();
  esmael.lineCap = "round";
  esmael.lineJoin = "round";
  esmael.moveTo(164.5 * zoelyn, 245.0625 * zoelyn);
  esmael.bezierCurveTo(182.5 * zoelyn, 264.0625 * zoelyn, 252.5 * zoelyn, 258.0625 * zoelyn, 276.5 * zoelyn, 244.0625 * zoelyn);
  esmael.bezierCurveTo(265.5 * zoelyn, 226.0625 * zoelyn, 244.5 * zoelyn, 231.0625 * zoelyn, 229.5 * zoelyn, 230.0625 * zoelyn);
  esmael.bezierCurveTo(205.5 * zoelyn, 227.0625 * zoelyn, 175.5 * zoelyn, 202.0625 * zoelyn, 162.5 * zoelyn, 244.0625 * zoelyn);
  esmael.closePath();
  fill_path(esmael, warda[2], warda[3], 12 * zoelyn);
  esmael.beginPath();
  esmael.lineCap = "round";
  esmael.lineJoin = "round";
  esmael.moveTo(115.5 * zoelyn, 260.0625 * zoelyn);
  esmael.bezierCurveTo(134.5 * zoelyn, 279.0625 * zoelyn, 170.5 * zoelyn, 275.0625 * zoelyn, 191.5 * zoelyn, 257.0625 * zoelyn);
  esmael.bezierCurveTo(174.5 * zoelyn, 208.0625 * zoelyn, 142.5 * zoelyn, 197.0625 * zoelyn, 116.5 * zoelyn, 259.0625 * zoelyn);
  esmael.closePath();
  fill_path(esmael, warda[2], warda[3], 12 * zoelyn);
  esmael.beginPath();
  esmael.lineCap = "round";
  esmael.lineJoin = "round";
  esmael.moveTo(152.5 * zoelyn, 278.0625 * zoelyn);
  esmael.bezierCurveTo(165.5 * zoelyn, 294.0625 * zoelyn, 200.5 * zoelyn, 287.0625 * zoelyn, 216.5 * zoelyn, 278.0625 * zoelyn);
  esmael.bezierCurveTo(206.5 * zoelyn, 247.0625 * zoelyn, 173.5 * zoelyn, 233.0625 * zoelyn, 153.5 * zoelyn, 276.0625 * zoelyn);
  esmael.closePath();
  fill_path(esmael, warda[2], warda[3], 12 * zoelyn);
  return nesby;
}
function create_leaderboard_mobile(mahmud) {
  var kynnady = document.createElement("canvas");
  var angy = kynnady.getContext("2d");
  var yasir = 200 * mahmud;
  var waldron = 180 * mahmud;
  var jaycen = 8 * mahmud;
  kynnady.width = yasir;
  kynnady.height = waldron;
  angy.beginPath();
  round_rect(angy, 0, 0, yasir, waldron - jaycen, jaycen);
  angy.globalAlpha = .8;
  fill_path(angy, "#1D6055");
  angy.globalAlpha = 1;
  var ethaniel = create_text(mahmud, "Leaderboard", 25, "#FFF");
  angy.drawImage(ethaniel, (yasir - ethaniel.width) / 2, mahmud * 5);
  return kynnady;
}
function create_leaderboard(raiven) {
  var reyshawn = document.createElement("canvas");
  var geoffory = reyshawn.getContext("2d");
  var alaiza = 200 * raiven;
  var ladell = 270 * raiven;
  var debhra = 8 * raiven;
  reyshawn.width = alaiza;
  reyshawn.height = ladell + 20;
  geoffory.beginPath();
  round_rect(geoffory, 0, 0, alaiza, ladell - debhra, debhra);
  geoffory.globalAlpha = .5;
  fill_path(geoffory, "#1D6055");
  geoffory.globalAlpha = 1;
  var shalynne = create_text(raiven, "Leaderboard", 25, "#FFF");
  geoffory.drawImage(shalynne, (alaiza - shalynne.width) / 2, raiven * 5);
  return reyshawn;
}
function create_pumpkin(maddielynn, rad, jenisis) {
  var shaliese = document.createElement("canvas");
  var perline = shaliese.getContext("2d");
  shaliese.width = 272 * maddielynn;
  shaliese.height = 264 * maddielynn;
  perline.translate(0, 20 * maddielynn);
  perline.globalAlpha = rad ? .5 : 1;
  perline.beginPath();
  perline.lineCap = "round";
  perline.lineJoin = "round";
  perline.moveTo(56.999969482421875 * maddielynn, 84.517333984375 * maddielynn);
  perline.bezierCurveTo(61.999969482421875 * maddielynn, 58.517333984375 * maddielynn, 79.99996948242188 * maddielynn, 50.517333984375 * maddielynn, 102.99996948242188 * maddielynn, 50.517333984375 * maddielynn);
  perline.bezierCurveTo(119.99996948242188 * maddielynn, 26.517333984375 * maddielynn, 137.99996948242188 * maddielynn, 32.517333984375 * maddielynn, 156.99996948242188 * maddielynn, 44.517333984375 * maddielynn);
  perline.bezierCurveTo(187.99996948242188 * maddielynn, 42.517333984375 * maddielynn, 195.99996948242188 * maddielynn, 50.517333984375 * maddielynn, 202.99996948242188 * maddielynn, 77.517333984375 * maddielynn);
  perline.bezierCurveTo(229.99996948242188 * maddielynn, 80.517333984375 * maddielynn, 231.99996948242188 * maddielynn, 96.517333984375 * maddielynn, 229.99996948242188 * maddielynn, 118.517333984375 * maddielynn);
  perline.bezierCurveTo(241.99996948242188 * maddielynn, 147.517333984375 * maddielynn, 236.99996948242188 * maddielynn, 148.517333984375 * maddielynn, 220.99996948242188 * maddielynn, 165.517333984375 * maddielynn);
  perline.bezierCurveTo(222.99996948242188 * maddielynn, 192.517333984375 * maddielynn, 209.99996948242188 * maddielynn, 212.517333984375 * maddielynn, 177.99996948242188 * maddielynn, 213.517333984375 * maddielynn);
  perline.bezierCurveTo(159.99996948242188 * maddielynn, 234.517333984375 * maddielynn, 141.99996948242188 * maddielynn, 234.517333984375 * maddielynn, 116.99996948242188 * maddielynn, 222.517333984375 * maddielynn);
  perline.bezierCurveTo(72.99996948242188 * maddielynn, 226.517333984375 * maddielynn, 66.99996948242188 * maddielynn, 207.517333984375 * maddielynn, 65.99996948242188 * maddielynn, 190.517333984375 * maddielynn);
  perline.bezierCurveTo(35.999969482421875 * maddielynn, 180.517333984375 * maddielynn, 30.999969482421875 * maddielynn, 162.517333984375 * maddielynn, 39.999969482421875 * maddielynn, 135.517333984375 * maddielynn);
  perline.bezierCurveTo(23.999969482421875 * maddielynn, 110.517333984375 * maddielynn, 43.999969482421875 * maddielynn, 90.517333984375 * maddielynn, 55.999969482421875 * maddielynn, 85.517333984375 * maddielynn);
  perline.closePath();
  fill_path(perline, jenisis[0]);
  perline.translate(0, -20 * maddielynn);
  perline.globalAlpha = 1;
  perline.beginPath();
  perline.lineCap = "round";
  perline.lineJoin = "round";
  perline.moveTo(56.999969482421875 * maddielynn, 84.517333984375 * maddielynn);
  perline.bezierCurveTo(61.999969482421875 * maddielynn, 58.517333984375 * maddielynn, 79.99996948242188 * maddielynn, 50.517333984375 * maddielynn, 102.99996948242188 * maddielynn, 50.517333984375 * maddielynn);
  perline.bezierCurveTo(119.99996948242188 * maddielynn, 26.517333984375 * maddielynn, 137.99996948242188 * maddielynn, 32.517333984375 * maddielynn, 156.99996948242188 * maddielynn, 44.517333984375 * maddielynn);
  perline.bezierCurveTo(187.99996948242188 * maddielynn, 42.517333984375 * maddielynn, 195.99996948242188 * maddielynn, 50.517333984375 * maddielynn, 202.99996948242188 * maddielynn, 77.517333984375 * maddielynn);
  perline.bezierCurveTo(229.99996948242188 * maddielynn, 80.517333984375 * maddielynn, 231.99996948242188 * maddielynn, 96.517333984375 * maddielynn, 229.99996948242188 * maddielynn, 118.517333984375 * maddielynn);
  perline.bezierCurveTo(241.99996948242188 * maddielynn, 147.517333984375 * maddielynn, 236.99996948242188 * maddielynn, 148.517333984375 * maddielynn, 220.99996948242188 * maddielynn, 165.517333984375 * maddielynn);
  perline.bezierCurveTo(222.99996948242188 * maddielynn, 192.517333984375 * maddielynn, 209.99996948242188 * maddielynn, 212.517333984375 * maddielynn, 177.99996948242188 * maddielynn, 213.517333984375 * maddielynn);
  perline.bezierCurveTo(159.99996948242188 * maddielynn, 234.517333984375 * maddielynn, 141.99996948242188 * maddielynn, 234.517333984375 * maddielynn, 116.99996948242188 * maddielynn, 222.517333984375 * maddielynn);
  perline.bezierCurveTo(72.99996948242188 * maddielynn, 226.517333984375 * maddielynn, 66.99996948242188 * maddielynn, 207.517333984375 * maddielynn, 65.99996948242188 * maddielynn, 190.517333984375 * maddielynn);
  perline.bezierCurveTo(35.999969482421875 * maddielynn, 180.517333984375 * maddielynn, 30.999969482421875 * maddielynn, 162.517333984375 * maddielynn, 39.999969482421875 * maddielynn, 135.517333984375 * maddielynn);
  perline.bezierCurveTo(23.999969482421875 * maddielynn, 110.517333984375 * maddielynn, 43.999969482421875 * maddielynn, 90.517333984375 * maddielynn, 55.999969482421875 * maddielynn, 85.517333984375 * maddielynn);
  perline.closePath();
  fill_path(perline, jenisis[1], jenisis[2], 8 * maddielynn);
  perline.beginPath();
  perline.lineCap = "round";
  perline.lineJoin = "round";
  perline.moveTo(123.99996948242188 * maddielynn, 116.18402099609375 * maddielynn);
  perline.bezierCurveTo(115.99996948242188 * maddielynn, 99.18402099609375 * maddielynn, 109.99996948242188 * maddielynn, 74.18402099609375 * maddielynn, 109.99996948242188 * maddielynn, 63.18402099609375 * maddielynn);
  perline.bezierCurveTo(115.99996948242188 * maddielynn, 69.18402099609375 * maddielynn, 125.99996948242188 * maddielynn, 87.18402099609375 * maddielynn, 137.99996948242188 * maddielynn, 112.18402099609375 * maddielynn);
  perline.bezierCurveTo(142.99996948242188 * maddielynn, 84.18402099609375 * maddielynn, 143.99996948242188 * maddielynn, 76.18402099609375 * maddielynn, 153.99996948242188 * maddielynn, 62.18402099609375 * maddielynn);
  perline.bezierCurveTo(155.99996948242188 * maddielynn, 79.18402099609375 * maddielynn, 149.99996948242188 * maddielynn, 110.18402099609375 * maddielynn, 151.99996948242188 * maddielynn, 117.18402099609375 * maddielynn);
  perline.bezierCurveTo(162.99996948242188 * maddielynn, 104.18402099609375 * maddielynn, 180.99996948242188 * maddielynn, 91.18402099609375 * maddielynn, 191.99996948242188 * maddielynn, 91.18402099609375 * maddielynn);
  perline.bezierCurveTo(185.99996948242188 * maddielynn, 102.18402099609375 * maddielynn, 180.99996948242188 * maddielynn, 106.18402099609375 * maddielynn, 160.99996948242188 * maddielynn, 124.18402099609375 * maddielynn);
  perline.bezierCurveTo(190.99996948242188 * maddielynn, 121.18402099609375 * maddielynn, 199.99996948242188 * maddielynn, 120.18402099609375 * maddielynn, 207.99996948242188 * maddielynn, 123.18402099609375 * maddielynn);
  perline.bezierCurveTo(199.99996948242188 * maddielynn, 129.18402099609375 * maddielynn, 181.99996948242188 * maddielynn, 132.18402099609375 * maddielynn, 160.99996948242188 * maddielynn, 135.18402099609375 * maddielynn);
  perline.bezierCurveTo(179.99996948242188 * maddielynn, 142.18402099609375 * maddielynn, 193.99996948242188 * maddielynn, 151.18402099609375 * maddielynn, 196.99996948242188 * maddielynn, 156.18402099609375 * maddielynn);
  perline.bezierCurveTo(185.99996948242188 * maddielynn, 156.18402099609375 * maddielynn, 163.99996948242188 * maddielynn, 149.18402099609375 * maddielynn, 152.99996948242188 * maddielynn, 147.18402099609375 * maddielynn);
  perline.bezierCurveTo(157.99996948242188 * maddielynn, 155.18402099609375 * maddielynn, 165.99996948242188 * maddielynn, 176.18402099609375 * maddielynn, 169.99996948242188 * maddielynn, 195.18402099609375 * maddielynn);
  perline.bezierCurveTo(162.99996948242188 * maddielynn, 190.18402099609375 * maddielynn, 147.99996948242188 * maddielynn, 167.18402099609375 * maddielynn, 139.99996948242188 * maddielynn, 153.18402099609375 * maddielynn);
  perline.bezierCurveTo(137.99996948242188 * maddielynn, 167.18402099609375 * maddielynn, 126.99996948242188 * maddielynn, 194.18402099609375 * maddielynn, 119.99996948242188 * maddielynn, 204.18402099609375 * maddielynn);
  perline.bezierCurveTo(117.99996948242188 * maddielynn, 186.18402099609375 * maddielynn, 123.99996948242188 * maddielynn, 165.18402099609375 * maddielynn, 126.99996948242188 * maddielynn, 149.18402099609375 * maddielynn);
  perline.bezierCurveTo(110.99996948242188 * maddielynn, 163.18402099609375 * maddielynn, 103.99996948242188 * maddielynn, 170.18402099609375 * maddielynn, 82.99996948242188 * maddielynn, 177.18402099609375 * maddielynn);
  perline.bezierCurveTo(90.99996948242188 * maddielynn, 162.18402099609375 * maddielynn, 99.99996948242188 * maddielynn, 153.18402099609375 * maddielynn, 117.99996948242188 * maddielynn, 140.18402099609375 * maddielynn);
  perline.bezierCurveTo(97.99996948242188 * maddielynn, 140.18402099609375 * maddielynn, 83.99996948242188 * maddielynn, 139.18402099609375 * maddielynn, 65.99996948242188 * maddielynn, 132.18402099609375 * maddielynn);
  perline.bezierCurveTo(77.99996948242188 * maddielynn, 127.18402099609375 * maddielynn, 95.99996948242188 * maddielynn, 127.18402099609375 * maddielynn, 115.99996948242188 * maddielynn, 127.18402099609375 * maddielynn);
  perline.bezierCurveTo(91.99996948242188 * maddielynn, 113.18402099609375 * maddielynn, 84.99996948242188 * maddielynn, 107.18402099609375 * maddielynn, 76.99996948242188 * maddielynn, 96.18402099609375 * maddielynn);
  perline.bezierCurveTo(94.99996948242188 * maddielynn, 99.18402099609375 * maddielynn, 109.99996948242188 * maddielynn, 109.18402099609375 * maddielynn, 123.99996948242188 * maddielynn, 116.18402099609375 * maddielynn);
  perline.closePath();
  fill_path(perline, jenisis[3]);
  perline.beginPath();
  perline.lineCap = "round";
  perline.lineJoin = "round";
  perline.moveTo(131.99996948242188 * maddielynn, 119.18402099609375 * maddielynn);
  perline.bezierCurveTo(141.99996948242188 * maddielynn, 119.18402099609375 * maddielynn, 145.99996948242188 * maddielynn, 116.18402099609375 * maddielynn, 147.99996948242188 * maddielynn, 109.18402099609375 * maddielynn);
  perline.bezierCurveTo(151.99996948242188 * maddielynn, 107.18402099609375 * maddielynn, 159.99996948242188 * maddielynn, 107.18402099609375 * maddielynn, 156.99996948242188 * maddielynn, 123.18402099609375 * maddielynn);
  perline.bezierCurveTo(155.99996948242188 * maddielynn, 140.18402099609375 * maddielynn, 142.99996948242188 * maddielynn, 149.18402099609375 * maddielynn, 132.99996948242188 * maddielynn, 147.18402099609375 * maddielynn);
  perline.bezierCurveTo(119.99996948242188 * maddielynn, 144.18402099609375 * maddielynn, 113.99996948242188 * maddielynn, 122.18402099609375 * maddielynn, 131.99996948242188 * maddielynn, 119.18402099609375 * maddielynn);
  perline.closePath();
  fill_path(perline, jenisis[4], jenisis[5], 6 * maddielynn);
  return shaliese;
}
function create_brambles(willowdean, marise, jaycon) {
  var wakeelah = document.createElement("canvas");
  var heavenlyn = wakeelah.getContext("2d");
  wakeelah.width = 247 * willowdean;
  wakeelah.height = 247 * willowdean;
  heavenlyn.translate(0, 10 * willowdean);
  heavenlyn.globalAlpha = marise ? .5 : 1;
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(150 * willowdean, 62 * willowdean);
  heavenlyn.bezierCurveTo(151.5 * willowdean, 71.5 * willowdean, 149 * willowdean, 70 * willowdean, 153 * willowdean, 81 * willowdean);
  heavenlyn.bezierCurveTo(158 * willowdean, 73.5 * willowdean, 158 * willowdean, 73.5 * willowdean, 163 * willowdean, 66 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[0]);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(164 * willowdean, 171 * willowdean);
  heavenlyn.bezierCurveTo(149 * willowdean, 159 * willowdean, 156.5 * willowdean, 165 * willowdean, 149 * willowdean, 159 * willowdean);
  heavenlyn.bezierCurveTo(149 * willowdean, 167 * willowdean, 149 * willowdean, 170 * willowdean, 152 * willowdean, 178 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[0]);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(132 * willowdean, 95 * willowdean);
  heavenlyn.bezierCurveTo(154 * willowdean, 102 * willowdean, 154 * willowdean, 126 * willowdean, 137 * willowdean, 139 * willowdean);
  heavenlyn.bezierCurveTo(113 * willowdean, 152 * willowdean, 89 * willowdean, 136 * willowdean, 80 * willowdean, 121 * willowdean);
  heavenlyn.bezierCurveTo(57 * willowdean, 89 * willowdean, 69 * willowdean, 63 * willowdean, 79 * willowdean, 52 * willowdean);
  heavenlyn.bezierCurveTo(110 * willowdean, 20 * willowdean, 139 * willowdean, 21 * willowdean, 150 * willowdean, 25 * willowdean);
  heavenlyn.bezierCurveTo(197 * willowdean, 36 * willowdean, 221 * willowdean, 67 * willowdean, 226 * willowdean, 90 * willowdean);
  heavenlyn.bezierCurveTo(234 * willowdean, 134 * willowdean, 214 * willowdean, 177 * willowdean, 195 * willowdean, 197 * willowdean);
  heavenlyn.bezierCurveTo(144 * willowdean, 242 * willowdean, 79 * willowdean, 216 * willowdean, 58 * willowdean, 206 * willowdean);
  heavenlyn.bezierCurveTo(13 * willowdean, 174 * willowdean, 20 * willowdean, 134 * willowdean, 23 * willowdean, 107 * willowdean);
  heavenlyn.bezierCurveTo(26 * willowdean, 78 * willowdean, 33 * willowdean, 60 * willowdean, 38 * willowdean, 43 * willowdean);
  heavenlyn.bezierCurveTo(42 * willowdean, 32 * willowdean, 47 * willowdean, 32 * willowdean, 50 * willowdean, 36 * willowdean);
  heavenlyn.bezierCurveTo(54 * willowdean, 37 * willowdean, 50 * willowdean, 52 * willowdean, 44 * willowdean, 87 * willowdean);
  heavenlyn.bezierCurveTo(40 * willowdean, 115 * willowdean, 46 * willowdean, 142 * willowdean, 57 * willowdean, 158 * willowdean);
  heavenlyn.bezierCurveTo(76 * willowdean, 189 * willowdean, 129 * willowdean, 182 * willowdean, 152 * willowdean, 173 * willowdean);
  heavenlyn.bezierCurveTo(186 * willowdean, 156 * willowdean, 191 * willowdean, 106 * willowdean, 176 * willowdean, 85 * willowdean);
  heavenlyn.bezierCurveTo(159 * willowdean, 61 * willowdean, 132 * willowdean, 62 * willowdean, 122 * willowdean, 66 * willowdean);
  heavenlyn.bezierCurveTo(108 * willowdean, 74 * willowdean, 108 * willowdean, 89 * willowdean, 116 * willowdean, 90 * willowdean);
  heavenlyn.bezierCurveTo(123 * willowdean, 92 * willowdean, 130 * willowdean, 93 * willowdean, 131 * willowdean, 94 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[0]);
  heavenlyn.translate(0, -10 * willowdean);
  heavenlyn.globalAlpha = 1;
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(150 * willowdean, 62 * willowdean);
  heavenlyn.bezierCurveTo(151.5 * willowdean, 71.5 * willowdean, 149 * willowdean, 70 * willowdean, 153 * willowdean, 81 * willowdean);
  heavenlyn.bezierCurveTo(158 * willowdean, 73.5 * willowdean, 158 * willowdean, 73.5 * willowdean, 163 * willowdean, 66 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[5]);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(164 * willowdean, 171 * willowdean);
  heavenlyn.bezierCurveTo(149 * willowdean, 159 * willowdean, 156.5 * willowdean, 165 * willowdean, 149 * willowdean, 159 * willowdean);
  heavenlyn.bezierCurveTo(149 * willowdean, 167 * willowdean, 149 * willowdean, 170 * willowdean, 152 * willowdean, 178 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[5]);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(132 * willowdean, 95 * willowdean);
  heavenlyn.bezierCurveTo(154 * willowdean, 102 * willowdean, 154 * willowdean, 126 * willowdean, 137 * willowdean, 139 * willowdean);
  heavenlyn.bezierCurveTo(113 * willowdean, 152 * willowdean, 89 * willowdean, 136 * willowdean, 80 * willowdean, 121 * willowdean);
  heavenlyn.bezierCurveTo(57 * willowdean, 89 * willowdean, 69 * willowdean, 63 * willowdean, 79 * willowdean, 52 * willowdean);
  heavenlyn.bezierCurveTo(110 * willowdean, 20 * willowdean, 139 * willowdean, 21 * willowdean, 150 * willowdean, 25 * willowdean);
  heavenlyn.bezierCurveTo(197 * willowdean, 36 * willowdean, 221 * willowdean, 67 * willowdean, 226 * willowdean, 90 * willowdean);
  heavenlyn.bezierCurveTo(234 * willowdean, 134 * willowdean, 214 * willowdean, 177 * willowdean, 195 * willowdean, 197 * willowdean);
  heavenlyn.bezierCurveTo(144 * willowdean, 242 * willowdean, 79 * willowdean, 216 * willowdean, 58 * willowdean, 206 * willowdean);
  heavenlyn.bezierCurveTo(13 * willowdean, 174 * willowdean, 20 * willowdean, 134 * willowdean, 23 * willowdean, 107 * willowdean);
  heavenlyn.bezierCurveTo(26 * willowdean, 78 * willowdean, 33 * willowdean, 60 * willowdean, 38 * willowdean, 43 * willowdean);
  heavenlyn.bezierCurveTo(42 * willowdean, 32 * willowdean, 47 * willowdean, 32 * willowdean, 50 * willowdean, 36 * willowdean);
  heavenlyn.bezierCurveTo(54 * willowdean, 37 * willowdean, 50 * willowdean, 52 * willowdean, 44 * willowdean, 87 * willowdean);
  heavenlyn.bezierCurveTo(40 * willowdean, 115 * willowdean, 46 * willowdean, 142 * willowdean, 57 * willowdean, 158 * willowdean);
  heavenlyn.bezierCurveTo(76 * willowdean, 189 * willowdean, 129 * willowdean, 182 * willowdean, 152 * willowdean, 173 * willowdean);
  heavenlyn.bezierCurveTo(186 * willowdean, 156 * willowdean, 191 * willowdean, 106 * willowdean, 176 * willowdean, 85 * willowdean);
  heavenlyn.bezierCurveTo(159 * willowdean, 61 * willowdean, 132 * willowdean, 62 * willowdean, 122 * willowdean, 66 * willowdean);
  heavenlyn.bezierCurveTo(108 * willowdean, 74 * willowdean, 108 * willowdean, 89 * willowdean, 116 * willowdean, 90 * willowdean);
  heavenlyn.bezierCurveTo(123 * willowdean, 92 * willowdean, 130 * willowdean, 93 * willowdean, 131 * willowdean, 94 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[1], jaycon[2], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(137 * willowdean, 137 * willowdean);
  heavenlyn.bezierCurveTo(145 * willowdean, 125 * willowdean, 138 * willowdean, 108 * willowdean, 123 * willowdean, 104 * willowdean);
  heavenlyn.bezierCurveTo(81 * willowdean, 101 * willowdean, 88 * willowdean, 77 * willowdean, 98 * willowdean, 65 * willowdean);
  heavenlyn.bezierCurveTo(117 * willowdean, 38 * willowdean, 138 * willowdean, 39 * willowdean, 165 * willowdean, 52 * willowdean);
  heavenlyn.bezierCurveTo(197 * willowdean, 72 * willowdean, 207 * willowdean, 111 * willowdean, 197 * willowdean, 140 * willowdean);
  heavenlyn.bezierCurveTo(182 * willowdean, 180 * willowdean, 161 * willowdean, 197 * willowdean, 112 * willowdean, 194 * willowdean);
  heavenlyn.bezierCurveTo(58 * willowdean, 194 * willowdean, 37 * willowdean, 170 * willowdean, 34 * willowdean, 142 * willowdean);
  heavenlyn.bezierCurveTo(29 * willowdean, 102 * willowdean, 40 * willowdean, 63 * willowdean, 51 * willowdean, 45 * willowdean);
  heavenlyn.bezierCurveTo(43 * willowdean, 78 * willowdean, 41 * willowdean, 103 * willowdean, 43 * willowdean, 122 * willowdean);
  heavenlyn.bezierCurveTo(51 * willowdean, 158 * willowdean, 63 * willowdean, 174 * willowdean, 95 * willowdean, 179 * willowdean);
  heavenlyn.bezierCurveTo(129 * willowdean, 186 * willowdean, 169 * willowdean, 172 * willowdean, 177 * willowdean, 144 * willowdean);
  heavenlyn.bezierCurveTo(197 * willowdean, 105 * willowdean, 172 * willowdean, 76 * willowdean, 160 * willowdean, 71 * willowdean);
  heavenlyn.bezierCurveTo(125 * willowdean, 52 * willowdean, 111 * willowdean, 73 * willowdean, 111 * willowdean, 81 * willowdean);
  heavenlyn.bezierCurveTo(106 * willowdean, 93 * willowdean, 140 * willowdean, 92 * willowdean, 147 * willowdean, 107 * willowdean);
  heavenlyn.bezierCurveTo(153 * willowdean, 128 * willowdean, 140 * willowdean, 135 * willowdean, 137 * willowdean, 139 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[3]);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(132 * willowdean, 95 * willowdean);
  heavenlyn.bezierCurveTo(154 * willowdean, 102 * willowdean, 154 * willowdean, 126 * willowdean, 137 * willowdean, 139 * willowdean);
  heavenlyn.bezierCurveTo(113 * willowdean, 152 * willowdean, 89 * willowdean, 136 * willowdean, 80 * willowdean, 121 * willowdean);
  heavenlyn.bezierCurveTo(57 * willowdean, 89 * willowdean, 69 * willowdean, 63 * willowdean, 79 * willowdean, 52 * willowdean);
  heavenlyn.bezierCurveTo(110 * willowdean, 20 * willowdean, 139 * willowdean, 21 * willowdean, 150 * willowdean, 25 * willowdean);
  heavenlyn.bezierCurveTo(197 * willowdean, 36 * willowdean, 221 * willowdean, 67 * willowdean, 226 * willowdean, 90 * willowdean);
  heavenlyn.bezierCurveTo(234 * willowdean, 134 * willowdean, 214 * willowdean, 177 * willowdean, 195 * willowdean, 197 * willowdean);
  heavenlyn.bezierCurveTo(144 * willowdean, 242 * willowdean, 79 * willowdean, 216 * willowdean, 58 * willowdean, 206 * willowdean);
  heavenlyn.bezierCurveTo(13 * willowdean, 174 * willowdean, 20 * willowdean, 134 * willowdean, 23 * willowdean, 107 * willowdean);
  heavenlyn.bezierCurveTo(26 * willowdean, 78 * willowdean, 33 * willowdean, 60 * willowdean, 38 * willowdean, 43 * willowdean);
  heavenlyn.bezierCurveTo(42 * willowdean, 32 * willowdean, 47 * willowdean, 32 * willowdean, 50 * willowdean, 36 * willowdean);
  heavenlyn.bezierCurveTo(54 * willowdean, 37 * willowdean, 50 * willowdean, 52 * willowdean, 44 * willowdean, 87 * willowdean);
  heavenlyn.bezierCurveTo(40 * willowdean, 115 * willowdean, 46 * willowdean, 142 * willowdean, 57 * willowdean, 158 * willowdean);
  heavenlyn.bezierCurveTo(76 * willowdean, 189 * willowdean, 129 * willowdean, 182 * willowdean, 152 * willowdean, 173 * willowdean);
  heavenlyn.bezierCurveTo(186 * willowdean, 156 * willowdean, 191 * willowdean, 106 * willowdean, 176 * willowdean, 85 * willowdean);
  heavenlyn.bezierCurveTo(159 * willowdean, 61 * willowdean, 132 * willowdean, 62 * willowdean, 122 * willowdean, 66 * willowdean);
  heavenlyn.bezierCurveTo(108 * willowdean, 74 * willowdean, 108 * willowdean, 89 * willowdean, 116 * willowdean, 90 * willowdean);
  heavenlyn.bezierCurveTo(123 * willowdean, 92 * willowdean, 130 * willowdean, 93 * willowdean, 131 * willowdean, 94 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, undefined, jaycon[2], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(82 * willowdean, 63 * willowdean);
  heavenlyn.bezierCurveTo(91 * willowdean, 64 * willowdean, 96 * willowdean, 62 * willowdean, 98 * willowdean, 53 * willowdean);
  heavenlyn.bezierCurveTo(91 * willowdean, 45 * willowdean, 85 * willowdean, 42 * willowdean, 78 * willowdean, 41 * willowdean);
  heavenlyn.bezierCurveTo(81 * willowdean, 51 * willowdean, 82 * willowdean, 57 * willowdean, 82 * willowdean, 63 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(148 * willowdean, 40 * willowdean);
  heavenlyn.bezierCurveTo(140 * willowdean, 52 * willowdean, 131 * willowdean, 51 * willowdean, 123 * willowdean, 43 * willowdean);
  heavenlyn.bezierCurveTo(123 * willowdean, 25 * willowdean, 129 * willowdean, 17 * willowdean, 134 * willowdean, 12 * willowdean);
  heavenlyn.bezierCurveTo(138 * willowdean, 35 * willowdean, 142 * willowdean, 31 * willowdean, 148 * willowdean, 40 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(189 * willowdean, 43 * willowdean);
  heavenlyn.bezierCurveTo(191 * willowdean, 54 * willowdean, 196 * willowdean, 58 * willowdean, 205 * willowdean, 59 * willowdean);
  heavenlyn.bezierCurveTo(211 * willowdean, 42 * willowdean, 214 * willowdean, 37 * willowdean, 216 * willowdean, 31 * willowdean);
  heavenlyn.bezierCurveTo(202 * willowdean, 34 * willowdean, 195 * willowdean, 39 * willowdean, 190 * willowdean, 43 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(216 * willowdean, 98 * willowdean);
  heavenlyn.bezierCurveTo(219 * willowdean, 105 * willowdean, 225 * willowdean, 107 * willowdean, 230 * willowdean, 109 * willowdean);
  heavenlyn.bezierCurveTo(227 * willowdean, 113 * willowdean, 221 * willowdean, 115 * willowdean, 215 * willowdean, 115 * willowdean);
  heavenlyn.bezierCurveTo(208 * willowdean, 109 * willowdean, 211 * willowdean, 101 * willowdean, 216 * willowdean, 98 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(180 * willowdean, 85 * willowdean);
  heavenlyn.bezierCurveTo(193 * willowdean, 86 * willowdean, 196 * willowdean, 98 * willowdean, 191 * willowdean, 108 * willowdean);
  heavenlyn.bezierCurveTo(179 * willowdean, 112 * willowdean, 167 * willowdean, 113 * willowdean, 155 * willowdean, 111 * willowdean);
  heavenlyn.bezierCurveTo(169 * willowdean, 100 * willowdean, 176 * willowdean, 96 * willowdean, 180 * willowdean, 85 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(96 * willowdean, 114 * willowdean);
  heavenlyn.bezierCurveTo(102 * willowdean, 109 * willowdean, 112 * willowdean, 110 * willowdean, 114 * willowdean, 118 * willowdean);
  heavenlyn.bezierCurveTo(111 * willowdean, 134 * willowdean, 102 * willowdean, 143 * willowdean, 95 * willowdean, 147 * willowdean);
  heavenlyn.bezierCurveTo(98 * willowdean, 123 * willowdean, 97 * willowdean, 119 * willowdean, 96 * willowdean, 115 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(79 * willowdean, 92 * willowdean);
  heavenlyn.bezierCurveTo(86 * willowdean, 95 * willowdean, 89 * willowdean, 102 * willowdean, 83 * willowdean, 111 * willowdean);
  heavenlyn.bezierCurveTo(70 * willowdean, 110 * willowdean, 61 * willowdean, 107 * willowdean, 54 * willowdean, 100 * willowdean);
  heavenlyn.bezierCurveTo(70 * willowdean, 97 * willowdean, 70 * willowdean, 95 * willowdean, 78 * willowdean, 92 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(39 * willowdean, 130 * willowdean);
  heavenlyn.bezierCurveTo(37 * willowdean, 141 * willowdean, 41 * willowdean, 143 * willowdean, 48 * willowdean, 144 * willowdean);
  heavenlyn.bezierCurveTo(54 * willowdean, 134 * willowdean, 55 * willowdean, 131 * willowdean, 56 * willowdean, 123 * willowdean);
  heavenlyn.bezierCurveTo(47 * willowdean, 129 * willowdean, 43 * willowdean, 129 * willowdean, 39 * willowdean, 129 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(113 * willowdean, 189 * willowdean);
  heavenlyn.bezierCurveTo(119 * willowdean, 201 * willowdean, 127 * willowdean, 198 * willowdean, 134 * willowdean, 192 * willowdean);
  heavenlyn.bezierCurveTo(128 * willowdean, 175 * willowdean, 128 * willowdean, 173 * willowdean, 128 * willowdean, 165 * willowdean);
  heavenlyn.bezierCurveTo(117 * willowdean, 176 * willowdean, 116 * willowdean, 182 * willowdean, 113 * willowdean, 187 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(74 * willowdean, 154 * willowdean);
  heavenlyn.bezierCurveTo(76 * willowdean, 163 * willowdean, 76 * willowdean, 170 * willowdean, 75 * willowdean, 177 * willowdean);
  heavenlyn.bezierCurveTo(68 * willowdean, 179 * willowdean, 66 * willowdean, 176 * willowdean, 63 * willowdean, 171 * willowdean);
  heavenlyn.bezierCurveTo(69 * willowdean, 164 * willowdean, 72 * willowdean, 159 * willowdean, 74 * willowdean, 154 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(206 * willowdean, 152 * willowdean);
  heavenlyn.bezierCurveTo(198 * willowdean, 158 * willowdean, 198 * willowdean, 166 * willowdean, 201 * willowdean, 171 * willowdean);
  heavenlyn.bezierCurveTo(209 * willowdean, 170 * willowdean, 221 * willowdean, 170 * willowdean, 226 * willowdean, 172 * willowdean);
  heavenlyn.bezierCurveTo(219 * willowdean, 159 * willowdean, 210 * willowdean, 155 * willowdean, 207 * willowdean, 153 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(181 * willowdean, 184 * willowdean);
  heavenlyn.bezierCurveTo(170 * willowdean, 184 * willowdean, 167 * willowdean, 187 * willowdean, 163 * willowdean, 195 * willowdean);
  heavenlyn.bezierCurveTo(171 * willowdean, 207 * willowdean, 183 * willowdean, 214 * willowdean, 191 * willowdean, 217 * willowdean);
  heavenlyn.bezierCurveTo(183 * willowdean, 204 * willowdean, 184 * willowdean, 196 * willowdean, 181 * willowdean, 184 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(66 * willowdean, 199 * willowdean);
  heavenlyn.bezierCurveTo(73 * willowdean, 197 * willowdean, 78 * willowdean, 199 * willowdean, 79 * willowdean, 206 * willowdean);
  heavenlyn.bezierCurveTo(71 * willowdean, 216 * willowdean, 67 * willowdean, 221 * willowdean, 57 * willowdean, 223 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(182 * willowdean, 143 * willowdean);
  heavenlyn.bezierCurveTo(183 * willowdean, 146 * willowdean, 183 * willowdean, 149 * willowdean, 179 * willowdean, 152 * willowdean);
  heavenlyn.bezierCurveTo(174 * willowdean, 146 * willowdean, 174 * willowdean, 146 * willowdean, 169 * willowdean, 140 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(32 * willowdean, 159 * willowdean);
  heavenlyn.bezierCurveTo(45 * willowdean, 160 * willowdean, 48 * willowdean, 164 * willowdean, 45 * willowdean, 175 * willowdean);
  heavenlyn.bezierCurveTo(28 * willowdean, 183 * willowdean, 25 * willowdean, 184 * willowdean, 19 * willowdean, 184 * willowdean);
  heavenlyn.bezierCurveTo(30 * willowdean, 170 * willowdean, 29 * willowdean, 164 * willowdean, 31 * willowdean, 160 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(110 * willowdean, 214 * willowdean);
  heavenlyn.bezierCurveTo(106 * willowdean, 212 * willowdean, 104 * willowdean, 213 * willowdean, 102 * willowdean, 218 * willowdean);
  heavenlyn.bezierCurveTo(104 * willowdean, 220 * willowdean, 107 * willowdean, 222 * willowdean, 110 * willowdean, 224 * willowdean);
  heavenlyn.bezierCurveTo(110.5 * willowdean, 219 * willowdean, 110.5 * willowdean, 219 * willowdean, 111 * willowdean, 214 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(40 * willowdean, 52 * willowdean);
  heavenlyn.bezierCurveTo(41 * willowdean, 57 * willowdean, 40 * willowdean, 61 * willowdean, 34 * willowdean, 60 * willowdean);
  heavenlyn.bezierCurveTo(31.5 * willowdean, 55 * willowdean, 31.5 * willowdean, 55 * willowdean, 29 * willowdean, 50 * willowdean);
  heavenlyn.bezierCurveTo(34 * willowdean, 50.5 * willowdean, 34 * willowdean, 50.5 * willowdean, 39 * willowdean, 51 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  heavenlyn.beginPath();
  heavenlyn.lineCap = "round";
  heavenlyn.lineJoin = "round";
  heavenlyn.moveTo(31 * willowdean, 81 * willowdean);
  heavenlyn.bezierCurveTo(37 * willowdean, 84 * willowdean, 38 * willowdean, 90 * willowdean, 34 * willowdean, 99 * willowdean);
  heavenlyn.bezierCurveTo(23 * willowdean, 97 * willowdean, 19 * willowdean, 96 * willowdean, 16 * willowdean, 93 * willowdean);
  heavenlyn.bezierCurveTo(24 * willowdean, 88 * willowdean, 28 * willowdean, 85 * willowdean, 30 * willowdean, 81 * willowdean);
  heavenlyn.closePath();
  fill_path(heavenlyn, jaycon[4], jaycon[5], 5 * willowdean);
  return wakeelah;
}
function create_hood(jalexi, sammatha, bunia) {
  var chauntrice = document.createElement("canvas");
  var reiana = chauntrice.getContext("2d");
  chauntrice.width = 465 * jalexi;
  chauntrice.height = 310 * jalexi;
  reiana.beginPath();
  reiana.lineCap = "round";
  reiana.lineJoin = "round";
  reiana.moveTo(126 * jalexi, 192 * jalexi);
  reiana.bezierCurveTo(198 * jalexi, 202 * jalexi, 245 * jalexi, 203 * jalexi, 335 * jalexi, 194 * jalexi);
  reiana.bezierCurveTo(336 * jalexi, 232 * jalexi, 326 * jalexi, 235 * jalexi, 232 * jalexi, 237 * jalexi);
  reiana.bezierCurveTo(161 * jalexi, 235 * jalexi, 122 * jalexi, 235 * jalexi, 126 * jalexi, 193 * jalexi);
  reiana.closePath();
  fill_path(reiana, bunia[0], bunia[1], 4 * jalexi);
  reiana.beginPath();
  reiana.lineCap = "round";
  reiana.lineJoin = "round";
  reiana.moveTo(146 * jalexi, 239 * jalexi);
  reiana.bezierCurveTo(174 * jalexi, 74 * jalexi, 287 * jalexi, 88 * jalexi, 320 * jalexi, 240 * jalexi);
  reiana.bezierCurveTo(329 * jalexi, 231 * jalexi, 340 * jalexi, 219 * jalexi, 332 * jalexi, 115 * jalexi);
  reiana.bezierCurveTo(330 * jalexi, 40 * jalexi, 144 * jalexi, 30 * jalexi, 129 * jalexi, 116 * jalexi);
  reiana.bezierCurveTo(124 * jalexi, 217 * jalexi, 124 * jalexi, 228 * jalexi, 143 * jalexi, 237 * jalexi);
  reiana.closePath();
  fill_path(reiana, bunia[0], bunia[1], 4 * jalexi);
  reiana.beginPath();
  reiana.lineCap = "round";
  reiana.lineJoin = "round";
  reiana.moveTo(126 * jalexi, 193 * jalexi);
  reiana.bezierCurveTo(173 * jalexi, 94 * jalexi, 209 * jalexi, 100 * jalexi, 228 * jalexi, 57 * jalexi);
  reiana.bezierCurveTo(190 * jalexi, 112 * jalexi, 165 * jalexi, 115 * jalexi, 127 * jalexi, 184 * jalexi);
  reiana.closePath();
  fill_path(reiana, undefined, bunia[1], 4 * jalexi);
  reiana.beginPath();
  reiana.lineCap = "round";
  reiana.lineJoin = "round";
  reiana.moveTo(230 * jalexi, 57 * jalexi);
  reiana.bezierCurveTo(266 * jalexi, 117 * jalexi, 310 * jalexi, 130 * jalexi, 332 * jalexi, 183 * jalexi);
  reiana.bezierCurveTo(290 * jalexi, 112 * jalexi, 262 * jalexi, 109 * jalexi, 230 * jalexi, 56 * jalexi);
  reiana.closePath();
  fill_path(reiana, undefined, bunia[1], 4 * jalexi);
  reiana.beginPath();
  reiana.lineCap = "round";
  reiana.lineJoin = "round";
  reiana.moveTo(154 * jalexi, 212 * jalexi);
  reiana.bezierCurveTo(208 * jalexi, 224 * jalexi, 252 * jalexi, 219 * jalexi, 305 * jalexi, 212 * jalexi);
  reiana.bezierCurveTo(267 * jalexi, 219 * jalexi, 204 * jalexi, 222 * jalexi, 155 * jalexi, 212 * jalexi);
  reiana.closePath();
  fill_path(reiana, undefined, bunia[1], 4 * jalexi);
  reiana.beginPath();
  reiana.lineCap = "round";
  reiana.lineJoin = "round";
  reiana.moveTo(239 * jalexi, 59 * jalexi);
  reiana.bezierCurveTo(302 * jalexi, 72 * jalexi, 325 * jalexi, 84 * jalexi, 326 * jalexi, 115 * jalexi);
  reiana.bezierCurveTo(289 * jalexi, 80 * jalexi, 270 * jalexi, 88 * jalexi, 253 * jalexi, 78 * jalexi);
  reiana.closePath();
  fill_path(reiana, bunia[2]);
  reiana.beginPath();
  reiana.lineCap = "round";
  reiana.lineJoin = "round";
  reiana.moveTo(216 * jalexi, 61 * jalexi);
  reiana.bezierCurveTo(209 * jalexi, 70 * jalexi, 209 * jalexi, 70 * jalexi, 202 * jalexi, 79 * jalexi);
  reiana.bezierCurveTo(173 * jalexi, 87 * jalexi, 162 * jalexi, 91 * jalexi, 137 * jalexi, 107 * jalexi);
  reiana.bezierCurveTo(153 * jalexi, 78 * jalexi, 174 * jalexi, 67 * jalexi, 212 * jalexi, 62 * jalexi);
  reiana.closePath();
  fill_path(reiana, bunia[2]);
  reiana.beginPath();
  reiana.lineCap = "round";
  reiana.lineJoin = "round";
  reiana.moveTo(175 * jalexi, 125 * jalexi);
  reiana.bezierCurveTo(218 * jalexi, 94 * jalexi, 238 * jalexi, 90 * jalexi, 281 * jalexi, 125 * jalexi);
  reiana.bezierCurveTo(245 * jalexi, 89 * jalexi, 240 * jalexi, 80 * jalexi, 228 * jalexi, 67 * jalexi);
  reiana.bezierCurveTo(207 * jalexi, 100 * jalexi, 192 * jalexi, 104 * jalexi, 177 * jalexi, 123 * jalexi);
  reiana.closePath();
  fill_path(reiana, bunia[2]);
  return chauntrice;
}
function create_winter_hood(danford, christene, jaella) {
  var wyler = document.createElement("canvas");
  var lanaeya = wyler.getContext("2d");
  wyler.width = 465 * danford;
  wyler.height = 405 * danford;
  lanaeya.globalAlpha = 1;
  lanaeya.translate(6 * danford, 0 * danford);
  lanaeya.beginPath();
  lanaeya.lineCap = "round";
  lanaeya.lineJoin = "round";
  lanaeya.moveTo(39.000030517578125 * danford, 162.03977966308594 * danford);
  lanaeya.bezierCurveTo(125.00003051757812 * danford, 84.03977966308594 * danford, 108.50003051757812 * danford, 115.03977966308594 * danford, 178.00003051757812 * danford, 68.03977966308594 * danford);
  lanaeya.bezierCurveTo(299.0000305175781 * danford, 146.53977966308594 * danford, 299.0000305175781 * danford, 146.53977966308594 * danford, 420.0000305175781 * danford, 225.03977966308594 * danford);
  lanaeya.bezierCurveTo(400.0000305175781 * danford, 288.53977966308594 * danford, 400.0000305175781 * danford, 288.53977966308594 * danford, 380.0000305175781 * danford, 352.03977966308594 * danford);
  lanaeya.bezierCurveTo(216.50003051757812 * danford, 345.53977966308594 * danford, 216.50003051757812 * danford, 345.53977966308594 * danford, 53.000030517578125 * danford, 339.03977966308594 * danford);
  lanaeya.closePath();
  fill_path(lanaeya, jaella[3]);
  lanaeya.beginPath();
  lanaeya.lineCap = "round";
  lanaeya.lineJoin = "round";
  lanaeya.moveTo(23.000030517578125 * danford, 306.94886779785156 * danford);
  lanaeya.bezierCurveTo(5.000030517578125 * danford, 275.94886779785156 * danford, 6.000030517578125 * danford, 201.94886779785156 * danford, 14.000030517578125 * danford, 150.94886779785156 * danford);
  lanaeya.bezierCurveTo(40.000030517578125 * danford, 34.94886779785156 * danford, 157.00003051757812 * danford, 14.948867797851562 * danford, 199.00003051757812 * danford, 11.948867797851562 * danford);
  lanaeya.bezierCurveTo(331.0000305175781 * danford, .9488677978515625 * danford, 409.0000305175781 * danford, 61.94886779785156 * danford, 428.0000305175781 * danford, 133.94886779785156 * danford);
  lanaeya.bezierCurveTo(445.0000305175781 * danford, 207.94886779785156 * danford, 439.0000305175781 * danford, 274.94886779785156 * danford, 426.0000305175781 * danford, 342.94886779785156 * danford);
  lanaeya.bezierCurveTo(355.0000305175781 * danford, 207.94886779785156 * danford, 345.0000305175781 * danford, 208.94886779785156 * danford, 333.0000305175781 * danford, 202.94886779785156 * danford);
  lanaeya.bezierCurveTo(262.0000305175781 * danford, 143.94886779785156 * danford, 236.00003051757812 * danford, 148.94886779785156 * danford, 189.00003051757812 * danford, 162.94886779785156 * danford);
  lanaeya.bezierCurveTo(82.00003051757812 * danford, 190.94886779785156 * danford, 78.00003051757812 * danford, 235.94886779785156 * danford, 62.000030517578125 * danford, 279.94886779785156 * danford);
  lanaeya.closePath();
  fill_path(lanaeya, jaella[0], jaella[1], 20 * danford);
  lanaeya.beginPath();
  lanaeya.lineCap = "round";
  lanaeya.lineJoin = "round";
  lanaeya.moveTo(17.000030517578125 * danford, 149.94886779785156 * danford);
  lanaeya.bezierCurveTo(76.00003051757812 * danford, 67.94886779785156 * danford, 177.00003051757812 * danford, 40.94886779785156 * danford, 232.00003051757812 * danford, 45.94886779785156 * danford);
  lanaeya.bezierCurveTo(316.0000305175781 * danford, 46.94886779785156 * danford, 359.0000305175781 * danford, 74.94886779785156 * danford, 428.0000305175781 * danford, 145.94886779785156 * danford);
  lanaeya.bezierCurveTo(414.0000305175781 * danford, 73.94886779785156 * danford, 386.0000305175781 * danford, 68.94886779785156 * danford, 359.0000305175781 * danford, 43.94886779785156 * danford);
  lanaeya.bezierCurveTo(295.0000305175781 * danford, 5.9488677978515625 * danford, 239.00003051757812 * danford, 10.948867797851562 * danford, 207.00003051757812 * danford, 10.948867797851562 * danford);
  lanaeya.bezierCurveTo(121.00003051757812 * danford, 20.948867797851562 * danford, 104.00003051757812 * danford, 34.94886779785156 * danford, 45.000030517578125 * danford, 84.94886779785156 * danford);
  lanaeya.bezierCurveTo(14.000030517578125 * danford, 128.94886779785156 * danford, 18.000030517578125 * danford, 142.94886779785156 * danford, 16.000030517578125 * danford, 151.94886779785156 * danford);
  lanaeya.closePath();
  fill_path(lanaeya, jaella[2]);
  lanaeya.beginPath();
  lanaeya.lineCap = "round";
  lanaeya.lineJoin = "round";
  lanaeya.moveTo(23.000030517578125 * danford, 306.94886779785156 * danford);
  lanaeya.bezierCurveTo(5.000030517578125 * danford, 275.94886779785156 * danford, 6.000030517578125 * danford, 201.94886779785156 * danford, 14.000030517578125 * danford, 150.94886779785156 * danford);
  lanaeya.bezierCurveTo(40.000030517578125 * danford, 34.94886779785156 * danford, 157.00003051757812 * danford, 14.948867797851562 * danford, 199.00003051757812 * danford, 11.948867797851562 * danford);
  lanaeya.bezierCurveTo(331.0000305175781 * danford, .9488677978515625 * danford, 409.0000305175781 * danford, 61.94886779785156 * danford, 428.0000305175781 * danford, 133.94886779785156 * danford);
  lanaeya.bezierCurveTo(445.0000305175781 * danford, 207.94886779785156 * danford, 439.0000305175781 * danford, 274.94886779785156 * danford, 426.0000305175781 * danford, 342.94886779785156 * danford);
  lanaeya.bezierCurveTo(355.0000305175781 * danford, 207.94886779785156 * danford, 345.0000305175781 * danford, 208.94886779785156 * danford, 333.0000305175781 * danford, 202.94886779785156 * danford);
  lanaeya.bezierCurveTo(262.0000305175781 * danford, 143.94886779785156 * danford, 236.00003051757812 * danford, 148.94886779785156 * danford, 189.00003051757812 * danford, 162.94886779785156 * danford);
  lanaeya.bezierCurveTo(82.00003051757812 * danford, 190.94886779785156 * danford, 78.00003051757812 * danford, 235.94886779785156 * danford, 62.000030517578125 * danford, 279.94886779785156 * danford);
  lanaeya.closePath();
  fill_path(lanaeya, undefined, jaella[1], 16 * danford);
  lanaeya.beginPath();
  lanaeya.lineCap = "round";
  lanaeya.lineJoin = "round";
  lanaeya.moveTo(60.000030517578125 * danford, 288.03977966308594 * danford);
  lanaeya.bezierCurveTo(183.00003051757812 * danford, 320.03977966308594 * danford, 342.0000305175781 * danford, 306.03977966308594 * danford, 399.0000305175781 * danford, 286.03977966308594 * danford);
  lanaeya.bezierCurveTo(420.0000305175781 * danford, 345.03977966308594 * danford, 410.0000305175781 * danford, 335.03977966308594 * danford, 415.0000305175781 * danford, 362.03977966308594 * danford);
  lanaeya.bezierCurveTo(351.0000305175781 * danford, 384.03977966308594 * danford, 299.0000305175781 * danford, 389.03977966308594 * danford, 215.00003051757812 * danford, 391.03977966308594 * danford);
  lanaeya.bezierCurveTo(128.00003051757812 * danford, 388.03977966308594 * danford, 69.00003051757812 * danford, 373.03977966308594 * danford, 39.000030517578125 * danford, 359.03977966308594 * danford);
  lanaeya.closePath();
  fill_path(lanaeya, jaella[0], jaella[1], 13 * danford);
  lanaeya.beginPath();
  lanaeya.lineCap = "round";
  lanaeya.lineJoin = "round";
  lanaeya.moveTo(47.000030517578125 * danford, 327.03977966308594 * danford);
  lanaeya.bezierCurveTo(203.00003051757812 * danford, 377.03977966308594 * danford, 331.0000305175781 * danford, 349.03977966308594 * danford, 410.0000305175781 * danford, 330.03977966308594 * danford);
  lanaeya.closePath();
  fill_path(lanaeya, jaella[0], jaella[1], 20 * danford);
  lanaeya.beginPath();
  lanaeya.lineCap = "round";
  lanaeya.lineJoin = "round";
  lanaeya.moveTo(9.000030517578125 * danford, 339.1306915283203 * danford);
  lanaeya.bezierCurveTo(2.000030517578125 * danford, 280.1306915283203 * danford, 30.000030517578125 * danford, 219.1306915283203 * danford, 85.00003051757812 * danford, 167.1306915283203 * danford);
  lanaeya.bezierCurveTo(174.00003051757812 * danford, 82.13069152832031 * danford, 241.00003051757812 * danford, 101.13069152832031 * danford, 284.0000305175781 * danford, 115.13069152832031 * danford);
  lanaeya.bezierCurveTo(333.0000305175781 * danford, 134.1306915283203 * danford, 376.0000305175781 * danford, 177.1306915283203 * danford, 410.0000305175781 * danford, 247.1306915283203 * danford);
  lanaeya.bezierCurveTo(439.0000305175781 * danford, 300.1306915283203 * danford, 442.0000305175781 * danford, 346.1306915283203 * danford, 430.0000305175781 * danford, 363.1306915283203 * danford);
  lanaeya.bezierCurveTo(418.0000305175781 * danford, 366.1306915283203 * danford, 395.0000305175781 * danford, 295.1306915283203 * danford, 355.0000305175781 * danford, 223.1306915283203 * danford);
  lanaeya.bezierCurveTo(299.0000305175781 * danford, 156.1306915283203 * danford, 262.0000305175781 * danford, 155.1306915283203 * danford, 215.00003051757812 * danford, 159.1306915283203 * danford);
  lanaeya.bezierCurveTo(133.00003051757812 * danford, 171.1306915283203 * danford, 120.00003051757812 * danford, 193.1306915283203 * danford, 96.00003051757812 * danford, 221.1306915283203 * danford);
  lanaeya.bezierCurveTo(49.000030517578125 * danford, 262.1306915283203 * danford, 47.000030517578125 * danford, 306.1306915283203 * danford, 38.000030517578125 * danford, 336.1306915283203 * danford);
  lanaeya.bezierCurveTo(30.000030517578125 * danford, 349.1306915283203 * danford, 30.000030517578125 * danford, 349.1306915283203 * danford, 22.000030517578125 * danford, 362.1306915283203 * danford);
  lanaeya.closePath();
  fill_path(lanaeya, jaella[2], jaella[1], 20 * danford);
  lanaeya.beginPath();
  lanaeya.lineCap = "round";
  lanaeya.lineJoin = "round";
  lanaeya.moveTo(228.00003051757812 * danford, 128.03977966308594 * danford);
  lanaeya.bezierCurveTo(315.0000305175781 * danford, 131.03977966308594 * danford, 349.0000305175781 * danford, 178.03977966308594 * danford, 386.0000305175781 * danford, 234.03977966308594 * danford);
  lanaeya.bezierCurveTo(444.0000305175781 * danford, 329.03977966308594 * danford, 446.0000305175781 * danford, 354.03977966308594 * danford, 427.0000305175781 * danford, 373.03977966308594 * danford);
  lanaeya.bezierCurveTo(389.0000305175781 * danford, 389.03977966308594 * danford, 399.0000305175781 * danford, 329.03977966308594 * danford, 361.0000305175781 * danford, 277.03977966308594 * danford);
  lanaeya.bezierCurveTo(306.0000305175781 * danford, 191.03977966308594 * danford, 266.0000305175781 * danford, 183.03977966308594 * danford, 220.00003051757812 * danford, 181.03977966308594 * danford);
  lanaeya.bezierCurveTo(138.00003051757812 * danford, 184.03977966308594 * danford, 123.00003051757812 * danford, 212.03977966308594 * danford, 89.00003051757812 * danford, 271.03977966308594 * danford);
  lanaeya.bezierCurveTo(52.000030517578125 * danford, 349.03977966308594 * danford, 68.00003051757812 * danford, 364.03977966308594 * danford, 33.000030517578125 * danford, 369.03977966308594 * danford);
  lanaeya.bezierCurveTo(6.000030517578125 * danford, 366.03977966308594 * danford, 5.000030517578125 * danford, 341.03977966308594 * danford, 26.000030517578125 * danford, 288.03977966308594 * danford);
  lanaeya.bezierCurveTo(60.000030517578125 * danford, 207.03977966308594 * danford, 100.00003051757812 * danford, 180.03977966308594 * danford, 113.00003051757812 * danford, 170.03977966308594 * danford);
  lanaeya.bezierCurveTo(159.00003051757812 * danford, 132.03977966308594 * danford, 196.00003051757812 * danford, 133.03977966308594 * danford, 226.00003051757812 * danford, 129.03977966308594 * danford);
  lanaeya.closePath();
  fill_path(lanaeya, jaella[0], jaella[1], 20 * danford);
  return wyler;
}
function create_peasant(shiena, ayvani, annunzio, merten) {
  var dominisha = document.createElement("canvas");
  var lavine = dominisha.getContext("2d");
  dominisha.width = 198 * shiena;
  dominisha.height = 147 * shiena;
  lavine.globalAlpha = ayvani ? .5 : 1;
  lavine.translate(0, 6 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(44 * shiena, 76 * shiena);
  lavine.bezierCurveTo(50 * shiena, 82 * shiena, 50 * shiena, 82 * shiena, 56 * shiena, 88 * shiena);
  lavine.bezierCurveTo(59 * shiena, 82 * shiena, 59 * shiena, 82 * shiena, 62 * shiena, 76 * shiena);
  lavine.bezierCurveTo(59 * shiena, 71 * shiena, 59 * shiena, 71 * shiena, 56 * shiena, 66 * shiena);
  lavine.bezierCurveTo(59 * shiena, 69 * shiena, 59 * shiena, 69 * shiena, 62 * shiena, 72 * shiena);
  lavine.bezierCurveTo(80 * shiena, 48 * shiena, 102 * shiena, 50 * shiena, 120 * shiena, 62 * shiena);
  lavine.bezierCurveTo(127 * shiena, 58 * shiena, 127 * shiena, 58 * shiena, 134 * shiena, 54 * shiena);
  lavine.bezierCurveTo(129 * shiena, 60 * shiena, 129 * shiena, 60 * shiena, 124 * shiena, 66 * shiena);
  lavine.bezierCurveTo(129 * shiena, 73 * shiena, 129 * shiena, 73 * shiena, 134 * shiena, 80 * shiena);
  lavine.bezierCurveTo(140 * shiena, 74 * shiena, 140 * shiena, 74 * shiena, 146 * shiena, 68 * shiena);
  lavine.bezierCurveTo(142 * shiena, 76 * shiena, 142 * shiena, 76 * shiena, 138 * shiena, 84 * shiena);
  lavine.bezierCurveTo(144 * shiena, 90 * shiena, 142 * shiena, 90 * shiena, 144 * shiena, 90 * shiena);
  lavine.bezierCurveTo(136 * shiena, 97 * shiena, 136 * shiena, 97 * shiena, 128 * shiena, 104 * shiena);
  lavine.bezierCurveTo(154 * shiena, 110 * shiena, 164 * shiena, 90 * shiena, 160 * shiena, 80 * shiena);
  lavine.bezierCurveTo(138 * shiena, 22 * shiena, 148 * shiena, 51 * shiena, 136 * shiena, 22 * shiena);
  lavine.bezierCurveTo(97 * shiena, 24 * shiena, 97 * shiena, 24 * shiena, 58 * shiena, 26 * shiena);
  lavine.bezierCurveTo(47 * shiena, 54 * shiena, 36 * shiena, 80 * shiena, 36 * shiena, 82 * shiena);
  lavine.bezierCurveTo(40 * shiena, 108 * shiena, 54 * shiena, 104 * shiena, 62 * shiena, 104 * shiena);
  lavine.bezierCurveTo(46 * shiena, 92 * shiena, 54 * shiena, 97 * shiena, 46 * shiena, 90 * shiena);
  lavine.closePath();
  fill_path(lavine, annunzio[0]);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(36 * shiena, 80 * shiena);
  lavine.bezierCurveTo(30 * shiena, 84 * shiena, 28 * shiena, 92 * shiena, 34 * shiena, 100 * shiena);
  lavine.bezierCurveTo(41.5 * shiena, 102 * shiena, 41.5 * shiena, 102 * shiena, 49 * shiena, 104 * shiena);
  lavine.bezierCurveTo(43 * shiena, 105.5 * shiena, 43 * shiena, 105.5 * shiena, 37 * shiena, 107 * shiena);
  lavine.bezierCurveTo(46 * shiena, 111 * shiena, 60 * shiena, 114 * shiena, 76 * shiena, 114 * shiena);
  lavine.bezierCurveTo(78 * shiena, 110.5 * shiena, 78 * shiena, 110.5 * shiena, 80 * shiena, 107 * shiena);
  lavine.bezierCurveTo(81 * shiena, 110.5 * shiena, 81 * shiena, 110.5 * shiena, 82 * shiena, 114 * shiena);
  lavine.bezierCurveTo(94.5 * shiena, 113.5 * shiena, 94.5 * shiena, 113.5 * shiena, 107 * shiena, 113 * shiena);
  lavine.bezierCurveTo(108.5 * shiena, 110 * shiena, 108.5 * shiena, 110 * shiena, 110 * shiena, 107 * shiena);
  lavine.bezierCurveTo(111.5 * shiena, 110.5 * shiena, 111.5 * shiena, 110.5 * shiena, 113 * shiena, 114 * shiena);
  lavine.bezierCurveTo(131 * shiena, 112.5 * shiena, 131 * shiena, 112.5 * shiena, 149 * shiena, 111 * shiena);
  lavine.bezierCurveTo(148.5 * shiena, 107.5 * shiena, 148.5 * shiena, 107.5 * shiena, 148 * shiena, 104 * shiena);
  lavine.bezierCurveTo(150.5 * shiena, 107 * shiena, 150.5 * shiena, 107 * shiena, 153 * shiena, 110 * shiena);
  lavine.bezierCurveTo(155.5 * shiena, 108.5 * shiena, 155.5 * shiena, 108.5 * shiena, 158 * shiena, 107 * shiena);
  lavine.bezierCurveTo(156.5 * shiena, 104 * shiena, 156.5 * shiena, 104 * shiena, 155 * shiena, 101 * shiena);
  lavine.bezierCurveTo(158.5 * shiena, 102.5 * shiena, 158.5 * shiena, 102.5 * shiena, 162 * shiena, 104 * shiena);
  lavine.bezierCurveTo(168 * shiena, 100 * shiena, 170 * shiena, 92 * shiena, 169 * shiena, 85 * shiena);
  lavine.bezierCurveTo(166 * shiena, 86 * shiena, 166 * shiena, 86 * shiena, 163 * shiena, 87 * shiena);
  lavine.bezierCurveTo(165.5 * shiena, 83 * shiena, 165.5 * shiena, 83 * shiena, 168 * shiena, 79 * shiena);
  lavine.bezierCurveTo(165.5 * shiena, 76.5 * shiena, 165.5 * shiena, 76.5 * shiena, 163 * shiena, 74 * shiena);
  lavine.bezierCurveTo(155 * shiena, 82.5 * shiena, 155 * shiena, 82.5 * shiena, 147 * shiena, 91 * shiena);
  lavine.bezierCurveTo(139 * shiena, 95.5 * shiena, 139 * shiena, 95.5 * shiena, 131 * shiena, 100 * shiena);
  lavine.bezierCurveTo(97.5 * shiena, 100.5 * shiena, 97.5 * shiena, 100.5 * shiena, 64 * shiena, 101 * shiena);
  lavine.bezierCurveTo(49 * shiena, 102 * shiena, 43 * shiena, 90 * shiena, 36 * shiena, 80 * shiena);
  lavine.closePath();
  fill_path(lavine, annunzio[0]);
  lavine.globalAlpha = 1;
  lavine.translate(0, -6 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(36 * shiena, 80 * shiena);
  lavine.bezierCurveTo(30 * shiena, 84 * shiena, 28 * shiena, 92 * shiena, 34 * shiena, 100 * shiena);
  lavine.bezierCurveTo(41.5 * shiena, 102 * shiena, 41.5 * shiena, 102 * shiena, 49 * shiena, 104 * shiena);
  lavine.bezierCurveTo(43 * shiena, 105.5 * shiena, 43 * shiena, 105.5 * shiena, 37 * shiena, 107 * shiena);
  lavine.bezierCurveTo(46 * shiena, 111 * shiena, 60 * shiena, 114 * shiena, 76 * shiena, 114 * shiena);
  lavine.bezierCurveTo(78 * shiena, 110.5 * shiena, 78 * shiena, 110.5 * shiena, 80 * shiena, 107 * shiena);
  lavine.bezierCurveTo(81 * shiena, 110.5 * shiena, 81 * shiena, 110.5 * shiena, 82 * shiena, 114 * shiena);
  lavine.bezierCurveTo(94.5 * shiena, 113.5 * shiena, 94.5 * shiena, 113.5 * shiena, 107 * shiena, 113 * shiena);
  lavine.bezierCurveTo(108.5 * shiena, 110 * shiena, 108.5 * shiena, 110 * shiena, 110 * shiena, 107 * shiena);
  lavine.bezierCurveTo(111.5 * shiena, 110.5 * shiena, 111.5 * shiena, 110.5 * shiena, 113 * shiena, 114 * shiena);
  lavine.bezierCurveTo(131 * shiena, 112.5 * shiena, 131 * shiena, 112.5 * shiena, 149 * shiena, 111 * shiena);
  lavine.bezierCurveTo(148.5 * shiena, 107.5 * shiena, 148.5 * shiena, 107.5 * shiena, 148 * shiena, 104 * shiena);
  lavine.bezierCurveTo(150.5 * shiena, 107 * shiena, 150.5 * shiena, 107 * shiena, 153 * shiena, 110 * shiena);
  lavine.bezierCurveTo(155.5 * shiena, 108.5 * shiena, 155.5 * shiena, 108.5 * shiena, 158 * shiena, 107 * shiena);
  lavine.bezierCurveTo(156.5 * shiena, 104 * shiena, 156.5 * shiena, 104 * shiena, 155 * shiena, 101 * shiena);
  lavine.bezierCurveTo(158.5 * shiena, 102.5 * shiena, 158.5 * shiena, 102.5 * shiena, 162 * shiena, 104 * shiena);
  lavine.bezierCurveTo(168 * shiena, 100 * shiena, 170 * shiena, 92 * shiena, 169 * shiena, 85 * shiena);
  lavine.bezierCurveTo(166 * shiena, 86 * shiena, 166 * shiena, 86 * shiena, 163 * shiena, 87 * shiena);
  lavine.bezierCurveTo(165.5 * shiena, 83 * shiena, 165.5 * shiena, 83 * shiena, 168 * shiena, 79 * shiena);
  lavine.bezierCurveTo(165.5 * shiena, 76.5 * shiena, 165.5 * shiena, 76.5 * shiena, 163 * shiena, 74 * shiena);
  lavine.bezierCurveTo(155 * shiena, 82.5 * shiena, 155 * shiena, 82.5 * shiena, 147 * shiena, 91 * shiena);
  lavine.bezierCurveTo(139 * shiena, 95.5 * shiena, 139 * shiena, 95.5 * shiena, 131 * shiena, 100 * shiena);
  lavine.bezierCurveTo(97.5 * shiena, 100.5 * shiena, 97.5 * shiena, 100.5 * shiena, 64 * shiena, 101 * shiena);
  lavine.bezierCurveTo(49 * shiena, 102 * shiena, 43 * shiena, 90 * shiena, 36 * shiena, 80 * shiena);
  lavine.closePath();
  fill_path(lavine, annunzio[1], annunzio[2], 4 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(49 * shiena, 98 * shiena);
  lavine.bezierCurveTo(96.5 * shiena, 98 * shiena, 96.5 * shiena, 98 * shiena, 144 * shiena, 98 * shiena);
  lavine.bezierCurveTo(136.5 * shiena, 102 * shiena, 136.5 * shiena, 102 * shiena, 129 * shiena, 106 * shiena);
  lavine.bezierCurveTo(103 * shiena, 105.5 * shiena, 103 * shiena, 105.5 * shiena, 77 * shiena, 105 * shiena);
  lavine.bezierCurveTo(65 * shiena, 105 * shiena, 65 * shiena, 105 * shiena, 53 * shiena, 105 * shiena);
  lavine.closePath();
  fill_path(lavine, annunzio[1]);
  lavine.globalAlpha = .5;
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(54 * shiena, 98 * shiena);
  lavine.bezierCurveTo(97 * shiena, 98 * shiena, 97 * shiena, 98 * shiena, 140 * shiena, 98 * shiena);
  lavine.bezierCurveTo(134 * shiena, 101 * shiena, 134 * shiena, 101 * shiena, 128 * shiena, 104 * shiena);
  lavine.bezierCurveTo(92 * shiena, 104 * shiena, 92 * shiena, 104 * shiena, 56 * shiena, 104 * shiena);
  lavine.closePath();
  fill_path(lavine, annunzio[0]);
  lavine.globalAlpha = 1;
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(118 * shiena, 47 * shiena);
  lavine.bezierCurveTo(124.5 * shiena, 43.5 * shiena, 124.5 * shiena, 43.5 * shiena, 131 * shiena, 40 * shiena);
  lavine.bezierCurveTo(128 * shiena, 46 * shiena, 128 * shiena, 46 * shiena, 125 * shiena, 52 * shiena);
  lavine.bezierCurveTo(131 * shiena, 57 * shiena, 135 * shiena, 64 * shiena, 139 * shiena, 73 * shiena);
  lavine.bezierCurveTo(142.5 * shiena, 69.5 * shiena, 142.5 * shiena, 69.5 * shiena, 146 * shiena, 66 * shiena);
  lavine.bezierCurveTo(143.5 * shiena, 72.5 * shiena, 143.5 * shiena, 72.5 * shiena, 141 * shiena, 79 * shiena);
  lavine.bezierCurveTo(142 * shiena, 91 * shiena, 141 * shiena, 94 * shiena, 132 * shiena, 98 * shiena);
  lavine.bezierCurveTo(117 * shiena, 102 * shiena, 126 * shiena, 108 * shiena, 142 * shiena, 102 * shiena);
  lavine.bezierCurveTo(159 * shiena, 98 * shiena, 164 * shiena, 80 * shiena, 162 * shiena, 47 * shiena);
  lavine.bezierCurveTo(160 * shiena, 19 * shiena, 150 * shiena, 6 * shiena, 117 * shiena, 4 * shiena);
  lavine.bezierCurveTo(44 * shiena, 0 * shiena, 35 * shiena, 20 * shiena, 33 * shiena, 37 * shiena);
  lavine.bezierCurveTo(29 * shiena, 69 * shiena, 33 * shiena, 88 * shiena, 44 * shiena, 96 * shiena);
  lavine.bezierCurveTo(64 * shiena, 107 * shiena, 70 * shiena, 102 * shiena, 54 * shiena, 93 * shiena);
  lavine.bezierCurveTo(49 * shiena, 88 * shiena, 50 * shiena, 82 * shiena, 53 * shiena, 77 * shiena);
  lavine.bezierCurveTo(51.5 * shiena, 71 * shiena, 51.5 * shiena, 71 * shiena, 50 * shiena, 65 * shiena);
  lavine.bezierCurveTo(53 * shiena, 68.5 * shiena, 53 * shiena, 68.5 * shiena, 56 * shiena, 72 * shiena);
  lavine.bezierCurveTo(59 * shiena, 67.5 * shiena, 59 * shiena, 67.5 * shiena, 62 * shiena, 63 * shiena);
  lavine.bezierCurveTo(60.5 * shiena, 59.5 * shiena, 60.5 * shiena, 59.5 * shiena, 59 * shiena, 56 * shiena);
  lavine.bezierCurveTo(62 * shiena, 57 * shiena, 62 * shiena, 57 * shiena, 65 * shiena, 58 * shiena);
  lavine.bezierCurveTo(78 * shiena, 35 * shiena, 103 * shiena, 36 * shiena, 117 * shiena, 47 * shiena);
  lavine.closePath();
  fill_path(lavine, annunzio[1], annunzio[2], 6 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(62 * shiena, 21 * shiena);
  lavine.bezierCurveTo(63 * shiena, 34 * shiena, 64 * shiena, 37 * shiena, 66 * shiena, 40 * shiena);
  lavine.bezierCurveTo(54 * shiena, 49 * shiena, 53 * shiena, 51 * shiena, 48 * shiena, 58 * shiena);
  lavine.bezierCurveTo(44 * shiena, 51 * shiena, 42 * shiena, 43 * shiena, 40 * shiena, 36 * shiena);
  lavine.bezierCurveTo(47 * shiena, 28 * shiena, 52 * shiena, 25 * shiena, 61 * shiena, 21 * shiena);
  lavine.closePath();
  fill_path(lavine, annunzio[4]);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(60 * shiena, 29 * shiena);
  lavine.bezierCurveTo(62 * shiena, 25 * shiena, 65 * shiena, 24 * shiena, 70 * shiena, 23 * shiena);
  fill_path(lavine, undefined, annunzio[3], 4 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(61 * shiena, 37 * shiena);
  lavine.bezierCurveTo(63 * shiena, 32 * shiena, 66 * shiena, 32 * shiena, 71 * shiena, 32 * shiena);
  fill_path(lavine, undefined, annunzio[3], 4 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(52 * shiena, 31 * shiena);
  lavine.bezierCurveTo(50 * shiena, 26 * shiena, 50 * shiena, 25 * shiena, 51 * shiena, 23 * shiena);
  fill_path(lavine, undefined, annunzio[3], 4 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(46 * shiena, 35 * shiena);
  lavine.bezierCurveTo(44 * shiena, 31 * shiena, 43 * shiena, 29 * shiena, 45 * shiena, 26 * shiena);
  fill_path(lavine, undefined, annunzio[3], 4 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(58 * shiena, 44 * shiena);
  lavine.bezierCurveTo(57 * shiena, 48 * shiena, 57 * shiena, 50 * shiena, 60 * shiena, 52 * shiena);
  fill_path(lavine, undefined, annunzio[3], 4 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(53 * shiena, 48 * shiena);
  lavine.bezierCurveTo(52 * shiena, 52 * shiena, 52 * shiena, 54 * shiena, 55 * shiena, 57 * shiena);
  fill_path(lavine, undefined, annunzio[3], 4 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(46 * shiena, 41 * shiena);
  lavine.bezierCurveTo(41 * shiena, 42 * shiena, 39 * shiena, 45 * shiena, 38 * shiena, 48 * shiena);
  fill_path(lavine, undefined, annunzio[3], 4 * shiena);
  lavine.beginPath();
  lavine.lineCap = "round";
  lavine.lineJoin = "round";
  lavine.moveTo(48 * shiena, 48 * shiena);
  lavine.bezierCurveTo(42 * shiena, 51 * shiena, 42 * shiena, 53 * shiena, 40 * shiena, 55 * shiena);
  fill_path(lavine, undefined, annunzio[3], 4 * shiena);
  if (merten == 0) {
    lavine.beginPath();
    lavine.lineCap = "round";
    lavine.lineJoin = "round";
    lavine.moveTo(99 * shiena, 101 * shiena);
    lavine.bezierCurveTo(118.6666259765625 * shiena, 104.33331298828125 * shiena, 124.6666259765625 * shiena, 116.33331298828125 * shiena, 112.6666259765625 * shiena, 114.33331298828125 * shiena);
    lavine.bezierCurveTo(104.6666259765625 * shiena, 112.33331298828125 * shiena, 100.6666259765625 * shiena, 105.33331298828125 * shiena, 99.6666259765625 * shiena, 101.33331298828125 * shiena);
    fill_path(lavine, undefined, annunzio[5], 6 * shiena);
    lavine.beginPath();
    lavine.lineCap = "round";
    lavine.lineJoin = "round";
    lavine.moveTo(97.6666259765625 * shiena, 101.33331298828125 * shiena);
    lavine.bezierCurveTo(81.6666259765625 * shiena, 106.33331298828125 * shiena, 79.6666259765625 * shiena, 114.33331298828125 * shiena, 89.6666259765625 * shiena, 114.33331298828125 * shiena);
    lavine.bezierCurveTo(95.6666259765625 * shiena, 111.33331298828125 * shiena, 95.6666259765625 * shiena, 109.33331298828125 * shiena, 98.6666259765625 * shiena, 102.33331298828125 * shiena);
    fill_path(lavine, undefined, annunzio[5], 6 * shiena);
  } else {
    lavine.beginPath();
    lavine.lineCap = "round";
    lavine.lineJoin = "round";
    lavine.moveTo(103 * shiena, 100.39999389648438 * shiena);
    lavine.bezierCurveTo(120 * shiena, 106.39999389648438 * shiena, 118 * shiena, 107.39999389648438 * shiena, 120 * shiena, 111.39999389648438 * shiena);
    fill_path(lavine, undefined, annunzio[5], 6 * shiena);
    lavine.beginPath();
    lavine.lineCap = "round";
    lavine.lineJoin = "round";
    lavine.moveTo(103 * shiena, 100.39999389648438 * shiena);
    lavine.bezierCurveTo(90 * shiena, 103.39999389648438 * shiena, 89 * shiena, 106.39999389648438 * shiena, 87 * shiena, 112.39999389648438 * shiena);
    fill_path(lavine, undefined, annunzio[5], 6 * shiena);
    circle(lavine, 86 * shiena, 114.39999389648438 * shiena, 4.5 * shiena);
    fill_path(lavine, annunzio[1], annunzio[5], 6 * shiena);
    circle(lavine, 121 * shiena, 114.39999389648438 * shiena, 4.5 * shiena);
    fill_path(lavine, annunzio[1], annunzio[5], 6 * shiena);
  }
  return dominisha;
}
function create_treasure_chest(emelin, adrina) {
  var lilium = document.createElement("canvas");
  var pheobie = lilium.getContext("2d");
  lilium.width = 253 * emelin;
  lilium.height = 192 * emelin;
  pheobie.globalAlpha = .5;
  pheobie.save();
  pheobie.translate(42 * emelin, 99 * emelin);
  pheobie.globalAlpha = .5;
  round_rect(pheobie, -7 * emelin, -20 * emelin, 14 * emelin, 39 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[0]);
  pheobie.globalAlpha = 1;
  pheobie.save();
  pheobie.translate(37 * emelin, 94 * emelin);
  round_rect(pheobie, -7 * emelin, -20 * emelin, 14 * emelin, 37 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[2]);
  pheobie.globalAlpha = .5;
  pheobie.save();
  pheobie.translate(136 * emelin, 99 * emelin);
  pheobie.globalAlpha = .5;
  round_rect(pheobie, -84 * emelin, -67 * emelin, 168 * emelin, 134 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[0], adrina[0], 13 * emelin);
  pheobie.globalAlpha = 1;
  pheobie.save();
  pheobie.translate(131 * emelin, 94 * emelin);
  round_rect(pheobie, -84 * emelin, -67 * emelin, 168 * emelin, 134 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[2], adrina[2], 13 * emelin);
  pheobie.save();
  pheobie.translate(131 * emelin, 94 * emelin);
  round_rect(pheobie, -76 * emelin, -61 * emelin, 152 * emelin, 122 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[3], adrina[1], 8 * emelin);
  pheobie.save();
  pheobie.translate(168.5 * emelin, 93.5 * emelin);
  round_rect(pheobie, -30.5 * emelin, -58.5 * emelin, 61 * emelin, 117 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[3], adrina[4], 6 * emelin);
  pheobie.save();
  pheobie.translate(93.5 * emelin, 95.5 * emelin);
  round_rect(pheobie, -32 * emelin, -59.5 * emelin, 59 * emelin, 119 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[3], adrina[4], 6 * emelin);
  pheobie.save();
  pheobie.translate(130.5 * emelin, 94 * emelin);
  round_rect(pheobie, -36 * emelin, -67 * emelin, 73 * emelin, 134 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[3], adrina[2], 8 * emelin);
  pheobie.globalAlpha = .5;
  pheobie.save();
  pheobie.translate(133 * emelin, 97 * emelin);
  round_rect(pheobie, -83 * emelin, -12 * emelin, 160 * emelin, 24 * emelin, 0 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[0]);
  pheobie.globalAlpha = 1;
  pheobie.save();
  pheobie.translate(133 * emelin, 92 * emelin);
  round_rect(pheobie, -83 * emelin, -12 * emelin, 160 * emelin, 24 * emelin, 0 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[2]);
  pheobie.globalAlpha = .5;
  pheobie.save();
  pheobie.translate(228 * emelin, 99.5 * emelin);
  pheobie.globalAlpha = .5;
  round_rect(pheobie, -5 * emelin, -18.5 * emelin, 10 * emelin, 37 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[0]);
  pheobie.globalAlpha = 1;
  pheobie.save();
  pheobie.translate(223 * emelin, 94.5 * emelin);
  round_rect(pheobie, -5 * emelin, -18.5 * emelin, 10 * emelin, 37 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[2]);
  pheobie.save();
  pheobie.translate(133.5 * emelin, 175.5 * emelin);
  pheobie.globalAlpha = .5;
  round_rect(pheobie, -22.5 * emelin, -6.5 * emelin, 45 * emelin, 13 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[0]);
  pheobie.globalAlpha = 1;
  pheobie.save();
  pheobie.translate(128.5 * emelin, 170.5 * emelin);
  round_rect(pheobie, -22.5 * emelin, -6.5 * emelin, 45 * emelin, 13 * emelin, 20 * emelin);
  pheobie.restore();
  fill_path(pheobie, adrina[2]);
  return lilium;
}
function create_hurt_treasure_chest(luwam, meliss) {
  var brytany = document.createElement("canvas");
  var blondena = brytany.getContext("2d");
  brytany.width = 253 * luwam;
  brytany.height = 192 * luwam;
  blondena.save();
  blondena.translate(37 * luwam, 94 * luwam);
  round_rect(blondena, -7 * luwam, -20 * luwam, 14 * luwam, 37 * luwam, 20 * luwam);
  blondena.restore();
  fill_path(blondena, meliss[0]);
  blondena.save();
  blondena.translate(131 * luwam, 94 * luwam);
  round_rect(blondena, -84 * luwam, -67 * luwam, 168 * luwam, 134 * luwam, 20 * luwam);
  blondena.restore();
  fill_path(blondena, meliss[0], meliss[0], 13 * luwam);
  blondena.save();
  blondena.translate(223 * luwam, 94.5 * luwam);
  round_rect(blondena, -5 * luwam, -18.5 * luwam, 10 * luwam, 37 * luwam, 20 * luwam);
  blondena.restore();
  fill_path(blondena, meliss[0]);
  blondena.save();
  blondena.translate(128.5 * luwam, 170.5 * luwam);
  round_rect(blondena, -22.5 * luwam, -6.5 * luwam, 45 * luwam, 13 * luwam, 20 * luwam);
  blondena.restore();
  fill_path(blondena, meliss[0]);
  return brytany;
}
function create_bottle(nadrea, drayvon, marqurita) {
  var denzel = document.createElement("canvas");
  var aydelis = denzel.getContext("2d");
  denzel.width = 316 * nadrea;
  denzel.height = 365 * nadrea;
  aydelis.save();
  aydelis.translate(156.07142639160156 * nadrea, 51.81248474121094 * nadrea);
  aydelis.rotate(0);
  round_rect(aydelis, -21.5 * nadrea, -34 * nadrea, 43 * nadrea, 68 * nadrea, 8 * nadrea);
  aydelis.restore();
  fill_path(aydelis, marqurita[1], marqurita[2], 15 * nadrea);
  aydelis.beginPath();
  aydelis.lineCap = "round";
  aydelis.lineJoin = "round";
  aydelis.moveTo(110.57142639160156 * nadrea, 197.09820556640625 * nadrea);
  aydelis.bezierCurveTo(158.07142639160156 * nadrea, 179.09820556640625 * nadrea, 158.07142639160156 * nadrea, 179.09820556640625 * nadrea, 205.57142639160156 * nadrea, 161.09820556640625 * nadrea);
  aydelis.bezierCurveTo(205.57142639160156 * nadrea, 235.45535278320312 * nadrea, 205.57142639160156 * nadrea, 235.45535278320312 * nadrea, 205.57142639160156 * nadrea, 309.8125 * nadrea);
  aydelis.bezierCurveTo(205.57142639160156 * nadrea, 323.8125 * nadrea, 200.57142639160156 * nadrea, 325.8125 * nadrea, 187.57142639160156 * nadrea, 326.8125 * nadrea);
  aydelis.bezierCurveTo(155.57142639160156 * nadrea, 326.3125 * nadrea, 155.57142639160156 * nadrea, 326.3125 * nadrea, 123.57142639160156 * nadrea, 325.8125 * nadrea);
  aydelis.bezierCurveTo(111.57142639160156 * nadrea, 326.8125 * nadrea, 109.57142639160156 * nadrea, 321.8125 * nadrea, 110.57142639160156 * nadrea, 312.8125 * nadrea);
  aydelis.closePath();
  fill_path(aydelis, marqurita[3], marqurita[4], 15 * nadrea);
  aydelis.beginPath();
  aydelis.lineCap = "round";
  aydelis.lineJoin = "round";
  aydelis.moveTo(126.57142639160156 * nadrea, 67.38392639160156 * nadrea);
  aydelis.bezierCurveTo(126.57142639160156 * nadrea, 57.38392639160156 * nadrea, 132.57142639160156 * nadrea, 54.38392639160156 * nadrea, 140.57142639160156 * nadrea, 54.38392639160156 * nadrea);
  aydelis.bezierCurveTo(177.57142639160156 * nadrea, 55.38392639160156 * nadrea, 158.07142639160156 * nadrea, 54.38392639160156 * nadrea, 175.57142639160156 * nadrea, 54.38392639160156 * nadrea);
  aydelis.bezierCurveTo(185.57142639160156 * nadrea, 56.38392639160156 * nadrea, 185.57142639160156 * nadrea, 57.38392639160156 * nadrea, 184.57142639160156 * nadrea, 66.38392639160156 * nadrea);
  aydelis.bezierCurveTo(184.57142639160156 * nadrea, 78.38392639160156 * nadrea, 184.57142639160156 * nadrea, 89.38392639160156 * nadrea, 184.57142639160156 * nadrea, 90.38392639160156 * nadrea);
  aydelis.bezierCurveTo(177.57142639160156 * nadrea, 107.38392639160156 * nadrea, 180.57142639160156 * nadrea, 112.38392639160156 * nadrea, 189.57142639160156 * nadrea, 116.38392639160156 * nadrea);
  aydelis.bezierCurveTo(212.57142639160156 * nadrea, 127.38392639160156 * nadrea, 212.57142639160156 * nadrea, 132.38392639160156 * nadrea, 211.57142639160156 * nadrea, 150.38392639160156 * nadrea);
  aydelis.bezierCurveTo(211.57142639160156 * nadrea, 227.59821128845215 * nadrea, 211.57142639160156 * nadrea, 227.59821128845215 * nadrea, 211.57142639160156 * nadrea, 304.81249618530273 * nadrea);
  aydelis.bezierCurveTo(212.57142639160156 * nadrea, 328.81249618530273 * nadrea, 209.57142639160156 * nadrea, 330.81249618530273 * nadrea, 188.57142639160156 * nadrea, 333.81249618530273 * nadrea);
  aydelis.bezierCurveTo(155.07142639160156 * nadrea, 333.31249618530273 * nadrea, 155.07142639160156 * nadrea, 333.31249618530273 * nadrea, 121.57142639160156 * nadrea, 332.81249618530273 * nadrea);
  aydelis.bezierCurveTo(104.57142639160156 * nadrea, 327.81249618530273 * nadrea, 105.57142639160156 * nadrea, 328.81249618530273 * nadrea, 104.57142639160156 * nadrea, 312.81249618530273 * nadrea);
  aydelis.bezierCurveTo(104.57142639160156 * nadrea, 228.16963958740234 * nadrea, 104.57142639160156 * nadrea, 228.16963958740234 * nadrea, 104.57142639160156 * nadrea, 143.52678298950195 * nadrea);
  aydelis.bezierCurveTo(106.57142639160156 * nadrea, 124.52678298950195 * nadrea, 110.57142639160156 * nadrea, 123.52678298950195 * nadrea, 123.57142639160156 * nadrea, 116.52678298950195 * nadrea);
  aydelis.bezierCurveTo(136.57142639160156 * nadrea, 110.52678298950195 * nadrea, 130.57142639160156 * nadrea, 106.52678298950195 * nadrea, 126.57142639160156 * nadrea, 98.52678298950195 * nadrea);
  aydelis.closePath();
  fill_path(aydelis, undefined, marqurita[5], 15 * nadrea);
  aydelis.beginPath();
  aydelis.lineCap = "round";
  aydelis.lineJoin = "round";
  aydelis.moveTo(125.57142639160156 * nadrea, 156.66963958740234 * nadrea);
  aydelis.bezierCurveTo(125.57142639160156 * nadrea, 182.66963958740234 * nadrea, 125.57142639160156 * nadrea, 182.66963958740234 * nadrea, 125.57142639160156 * nadrea, 208.66963958740234 * nadrea);
  aydelis.closePath();
  fill_path(aydelis, undefined, marqurita[6], 15 * nadrea);
  return denzel;
}
function create_bottle_full(leilanni, nandy, yoshira) {
  var dixiana = document.createElement("canvas");
  var lennis = dixiana.getContext("2d");
  dixiana.width = 316 * leilanni;
  dixiana.height = 365 * leilanni;
  lennis.save();
  lennis.translate(156.07142639160156 * leilanni, 51.81248474121094 * leilanni);
  lennis.rotate(0);
  round_rect(lennis, -21.5 * leilanni, -34 * leilanni, 43 * leilanni, 68 * leilanni, 8 * leilanni);
  lennis.restore();
  fill_path(lennis, yoshira[1], yoshira[2], 15 * leilanni);
  lennis.beginPath();
  lennis.lineCap = "round";
  lennis.lineJoin = "round";
  lennis.moveTo(126.57142639160156 * leilanni, 67.38392639160156 * leilanni);
  lennis.bezierCurveTo(126.57142639160156 * leilanni, 57.38392639160156 * leilanni, 132.57142639160156 * leilanni, 54.38392639160156 * leilanni, 140.57142639160156 * leilanni, 54.38392639160156 * leilanni);
  lennis.bezierCurveTo(177.57142639160156 * leilanni, 55.38392639160156 * leilanni, 158.07142639160156 * leilanni, 54.38392639160156 * leilanni, 175.57142639160156 * leilanni, 54.38392639160156 * leilanni);
  lennis.bezierCurveTo(185.57142639160156 * leilanni, 56.38392639160156 * leilanni, 185.57142639160156 * leilanni, 57.38392639160156 * leilanni, 184.57142639160156 * leilanni, 66.38392639160156 * leilanni);
  lennis.bezierCurveTo(184.57142639160156 * leilanni, 78.38392639160156 * leilanni, 184.57142639160156 * leilanni, 89.38392639160156 * leilanni, 184.57142639160156 * leilanni, 90.38392639160156 * leilanni);
  lennis.bezierCurveTo(177.57142639160156 * leilanni, 107.38392639160156 * leilanni, 180.57142639160156 * leilanni, 112.38392639160156 * leilanni, 189.57142639160156 * leilanni, 116.38392639160156 * leilanni);
  lennis.bezierCurveTo(212.57142639160156 * leilanni, 127.38392639160156 * leilanni, 212.57142639160156 * leilanni, 132.38392639160156 * leilanni, 211.57142639160156 * leilanni, 150.38392639160156 * leilanni);
  lennis.bezierCurveTo(211.57142639160156 * leilanni, 227.59821128845215 * leilanni, 211.57142639160156 * leilanni, 227.59821128845215 * leilanni, 211.57142639160156 * leilanni, 304.81249618530273 * leilanni);
  lennis.bezierCurveTo(212.57142639160156 * leilanni, 328.81249618530273 * leilanni, 209.57142639160156 * leilanni, 330.81249618530273 * leilanni, 188.57142639160156 * leilanni, 333.81249618530273 * leilanni);
  lennis.bezierCurveTo(155.07142639160156 * leilanni, 333.31249618530273 * leilanni, 155.07142639160156 * leilanni, 333.31249618530273 * leilanni, 121.57142639160156 * leilanni, 332.81249618530273 * leilanni);
  lennis.bezierCurveTo(104.57142639160156 * leilanni, 327.81249618530273 * leilanni, 105.57142639160156 * leilanni, 328.81249618530273 * leilanni, 104.57142639160156 * leilanni, 312.81249618530273 * leilanni);
  lennis.bezierCurveTo(104.57142639160156 * leilanni, 228.16963958740234 * leilanni, 104.57142639160156 * leilanni, 228.16963958740234 * leilanni, 104.57142639160156 * leilanni, 143.52678298950195 * leilanni);
  lennis.bezierCurveTo(106.57142639160156 * leilanni, 124.52678298950195 * leilanni, 110.57142639160156 * leilanni, 123.52678298950195 * leilanni, 123.57142639160156 * leilanni, 116.52678298950195 * leilanni);
  lennis.bezierCurveTo(136.57142639160156 * leilanni, 110.52678298950195 * leilanni, 130.57142639160156 * leilanni, 106.52678298950195 * leilanni, 126.57142639160156 * leilanni, 98.52678298950195 * leilanni);
  lennis.closePath();
  fill_path(lennis, undefined, yoshira[5], 15 * leilanni);
  lennis.beginPath();
  lennis.lineCap = "round";
  lennis.lineJoin = "round";
  lennis.moveTo(125.57142639160156 * leilanni, 156.66963958740234 * leilanni);
  lennis.bezierCurveTo(125.57142639160156 * leilanni, 182.66963958740234 * leilanni, 125.57142639160156 * leilanni, 182.66963958740234 * leilanni, 125.57142639160156 * leilanni, 208.66963958740234 * leilanni);
  lennis.closePath();
  fill_path(lennis, undefined, yoshira[6], 15 * leilanni);
  return dixiana;
}
function create_drink_delay(brndon, alexisia) {
  var alecxa = document.createElement("canvas");
  var cordalro = alecxa.getContext("2d");
  alecxa.width = 316 * brndon;
  alecxa.height = 365 * brndon;
  cordalro.save();
  cordalro.translate(156.07142639160156 * brndon, 51.81248474121094 * brndon);
  cordalro.rotate(0);
  round_rect(cordalro, -21.5 * brndon, -34 * brndon, 43 * brndon, 68 * brndon, 8 * brndon);
  cordalro.restore();
  fill_path(cordalro, alexisia[0], alexisia[0], 15 * brndon);
  cordalro.beginPath();
  cordalro.lineCap = "round";
  cordalro.lineJoin = "round";
  cordalro.moveTo(126.57142639160156 * brndon, 67.38392639160156 * brndon);
  cordalro.bezierCurveTo(126.57142639160156 * brndon, 57.38392639160156 * brndon, 132.57142639160156 * brndon, 54.38392639160156 * brndon, 140.57142639160156 * brndon, 54.38392639160156 * brndon);
  cordalro.bezierCurveTo(177.57142639160156 * brndon, 55.38392639160156 * brndon, 158.07142639160156 * brndon, 54.38392639160156 * brndon, 175.57142639160156 * brndon, 54.38392639160156 * brndon);
  cordalro.bezierCurveTo(185.57142639160156 * brndon, 56.38392639160156 * brndon, 185.57142639160156 * brndon, 57.38392639160156 * brndon, 184.57142639160156 * brndon, 66.38392639160156 * brndon);
  cordalro.bezierCurveTo(184.57142639160156 * brndon, 78.38392639160156 * brndon, 184.57142639160156 * brndon, 89.38392639160156 * brndon, 184.57142639160156 * brndon, 90.38392639160156 * brndon);
  cordalro.bezierCurveTo(177.57142639160156 * brndon, 107.38392639160156 * brndon, 180.57142639160156 * brndon, 112.38392639160156 * brndon, 189.57142639160156 * brndon, 116.38392639160156 * brndon);
  cordalro.bezierCurveTo(212.57142639160156 * brndon, 127.38392639160156 * brndon, 212.57142639160156 * brndon, 132.38392639160156 * brndon, 211.57142639160156 * brndon, 150.38392639160156 * brndon);
  cordalro.bezierCurveTo(211.57142639160156 * brndon, 227.59821128845215 * brndon, 211.57142639160156 * brndon, 227.59821128845215 * brndon, 211.57142639160156 * brndon, 304.81249618530273 * brndon);
  cordalro.bezierCurveTo(212.57142639160156 * brndon, 328.81249618530273 * brndon, 209.57142639160156 * brndon, 330.81249618530273 * brndon, 188.57142639160156 * brndon, 333.81249618530273 * brndon);
  cordalro.bezierCurveTo(155.07142639160156 * brndon, 333.31249618530273 * brndon, 155.07142639160156 * brndon, 333.31249618530273 * brndon, 121.57142639160156 * brndon, 332.81249618530273 * brndon);
  cordalro.bezierCurveTo(104.57142639160156 * brndon, 327.81249618530273 * brndon, 105.57142639160156 * brndon, 328.81249618530273 * brndon, 104.57142639160156 * brndon, 312.81249618530273 * brndon);
  cordalro.bezierCurveTo(104.57142639160156 * brndon, 228.16963958740234 * brndon, 104.57142639160156 * brndon, 228.16963958740234 * brndon, 104.57142639160156 * brndon, 143.52678298950195 * brndon);
  cordalro.bezierCurveTo(106.57142639160156 * brndon, 124.52678298950195 * brndon, 110.57142639160156 * brndon, 123.52678298950195 * brndon, 123.57142639160156 * brndon, 116.52678298950195 * brndon);
  cordalro.bezierCurveTo(136.57142639160156 * brndon, 110.52678298950195 * brndon, 130.57142639160156 * brndon, 106.52678298950195 * brndon, 126.57142639160156 * brndon, 98.52678298950195 * brndon);
  cordalro.closePath();
  fill_path(cordalro, alexisia[0], alexisia[0], 15 * brndon);
  cordalro.beginPath();
  cordalro.lineCap = "round";
  cordalro.lineJoin = "round";
  cordalro.moveTo(125.57142639160156 * brndon, 156.66963958740234 * brndon);
  cordalro.bezierCurveTo(125.57142639160156 * brndon, 182.66963958740234 * brndon, 125.57142639160156 * brndon, 182.66963958740234 * brndon, 125.57142639160156 * brndon, 208.66963958740234 * brndon);
  cordalro.closePath();
  fill_path(cordalro, alexisia[0], alexisia[0], 15 * brndon);
  return alecxa;
}
function create_bucket_empty(orelia, lekhi, chidinma) {
  var jenola = document.createElement("canvas");
  var tyjae = jenola.getContext("2d");
  jenola.width = 400 * orelia;
  jenola.height = 400 * orelia;
  tyjae.translate(0, 15 * orelia);
  tyjae.globalAlpha = lekhi ? .5 : 1;
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(102 * orelia, 154 * orelia);
  tyjae.bezierCurveTo(108 * orelia, 216.5 * orelia, 108 * orelia, 216.5 * orelia, 114 * orelia, 279 * orelia);
  tyjae.bezierCurveTo(124 * orelia, 300 * orelia, 237 * orelia, 299 * orelia, 251 * orelia, 279 * orelia);
  tyjae.bezierCurveTo(257 * orelia, 217 * orelia, 257 * orelia, 217 * orelia, 263 * orelia, 155 * orelia);
  tyjae.bezierCurveTo(248 * orelia, 194 * orelia, 91 * orelia, 180 * orelia, 103 * orelia, 156 * orelia);
  tyjae.closePath();
  fill_path(tyjae, chidinma[0]);
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(102 * orelia, 154 * orelia);
  tyjae.bezierCurveTo(106 * orelia, 53 * orelia, 255 * orelia, 53 * orelia, 263 * orelia, 154 * orelia);
  tyjae.bezierCurveTo(248 * orelia, 38 * orelia, 99 * orelia, 69 * orelia, 103 * orelia, 154 * orelia);
  tyjae.closePath();
  fill_path(tyjae, undefined, chidinma[0], 11 * orelia);
  tyjae.translate(0, -5 * orelia);
  tyjae.globalAlpha = 1;
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(103 * orelia, 154 * orelia);
  tyjae.bezierCurveTo(98 * orelia, 119 * orelia, 264 * orelia, 119 * orelia, 264 * orelia, 154 * orelia);
  tyjae.bezierCurveTo(271 * orelia, 189 * orelia, 94 * orelia, 188 * orelia, 103 * orelia, 154 * orelia);
  tyjae.closePath();
  fill_path(tyjae, chidinma[3], chidinma[2], 12 * orelia);
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(102 * orelia, 154 * orelia);
  tyjae.bezierCurveTo(108 * orelia, 216.5 * orelia, 108 * orelia, 216.5 * orelia, 114 * orelia, 279 * orelia);
  tyjae.bezierCurveTo(124 * orelia, 300 * orelia, 237 * orelia, 299 * orelia, 251 * orelia, 279 * orelia);
  tyjae.bezierCurveTo(257 * orelia, 217 * orelia, 257 * orelia, 217 * orelia, 263 * orelia, 155 * orelia);
  tyjae.bezierCurveTo(248 * orelia, 194 * orelia, 91 * orelia, 180 * orelia, 103 * orelia, 156 * orelia);
  tyjae.closePath();
  fill_path(tyjae, chidinma[1], chidinma[2], 12 * orelia);
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(182 * orelia, 185 * orelia);
  tyjae.bezierCurveTo(182.5 * orelia, 237.5 * orelia, 182.5 * orelia, 237.5 * orelia, 183 * orelia, 290 * orelia);
  tyjae.closePath();
  fill_path(tyjae, undefined, chidinma[2], 12 * orelia);
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(222 * orelia, 287 * orelia);
  tyjae.bezierCurveTo(226 * orelia, 233.5 * orelia, 226 * orelia, 233.5 * orelia, 230 * orelia, 180 * orelia);
  tyjae.closePath();
  fill_path(tyjae, undefined, chidinma[2], 12 * orelia);
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(145 * orelia, 290 * orelia);
  tyjae.bezierCurveTo(140.5 * orelia, 237 * orelia, 140.5 * orelia, 237 * orelia, 136 * orelia, 184 * orelia);
  tyjae.closePath();
  fill_path(tyjae, chidinma[1], chidinma[2], 11 * orelia);
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(105 * orelia, 184 * orelia);
  tyjae.bezierCurveTo(148 * orelia, 205 * orelia, 231 * orelia, 202 * orelia, 260 * orelia, 182 * orelia);
  tyjae.bezierCurveTo(259 * orelia, 195.5 * orelia, 259 * orelia, 195.5 * orelia, 258 * orelia, 209 * orelia);
  tyjae.bezierCurveTo(217 * orelia, 218 * orelia, 163 * orelia, 225 * orelia, 108 * orelia, 207 * orelia);
  tyjae.closePath();
  fill_path(tyjae, chidinma[4], chidinma[2], 11 * orelia);
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(251 * orelia, 276 * orelia);
  tyjae.bezierCurveTo(251.5 * orelia, 267.5 * orelia, 251.5 * orelia, 267.5 * orelia, 252 * orelia, 259 * orelia);
  tyjae.bezierCurveTo(212 * orelia, 272 * orelia, 156 * orelia, 275 * orelia, 112 * orelia, 260 * orelia);
  tyjae.bezierCurveTo(112.5 * orelia, 269 * orelia, 112.5 * orelia, 269 * orelia, 113 * orelia, 278 * orelia);
  tyjae.bezierCurveTo(155 * orelia, 306 * orelia, 253 * orelia, 286 * orelia, 250 * orelia, 276 * orelia);
  tyjae.closePath();
  fill_path(tyjae, chidinma[4], chidinma[2], 11 * orelia);
  tyjae.beginPath();
  tyjae.lineCap = "round";
  tyjae.lineJoin = "round";
  tyjae.moveTo(102 * orelia, 154 * orelia);
  tyjae.bezierCurveTo(106 * orelia, 53 * orelia, 255 * orelia, 53 * orelia, 263 * orelia, 154 * orelia);
  tyjae.bezierCurveTo(248 * orelia, 38 * orelia, 99 * orelia, 69 * orelia, 103 * orelia, 154 * orelia);
  tyjae.closePath();
  fill_path(tyjae, undefined, chidinma[2], 11 * orelia);
  return jenola;
}
function create_bucket_full(ahylin, onekki, simba) {
  var keairra = document.createElement("canvas");
  var dashall = keairra.getContext("2d");
  keairra.width = 400 * ahylin;
  keairra.height = 400 * ahylin;
  dashall.translate(0, 15 * ahylin);
  dashall.globalAlpha = onekki ? .5 : 1;
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(102 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(108 * ahylin, 216.5 * ahylin, 108 * ahylin, 216.5 * ahylin, 114 * ahylin, 279 * ahylin);
  dashall.bezierCurveTo(124 * ahylin, 300 * ahylin, 237 * ahylin, 299 * ahylin, 251 * ahylin, 279 * ahylin);
  dashall.bezierCurveTo(257 * ahylin, 217 * ahylin, 257 * ahylin, 217 * ahylin, 263 * ahylin, 155 * ahylin);
  dashall.bezierCurveTo(248 * ahylin, 194 * ahylin, 91 * ahylin, 180 * ahylin, 103 * ahylin, 156 * ahylin);
  dashall.closePath();
  fill_path(dashall, simba[0]);
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(102 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(106 * ahylin, 53 * ahylin, 255 * ahylin, 53 * ahylin, 263 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(248 * ahylin, 38 * ahylin, 99 * ahylin, 69 * ahylin, 103 * ahylin, 154 * ahylin);
  dashall.closePath();
  fill_path(dashall, undefined, simba[0], 11 * ahylin);
  dashall.translate(0, -5 * ahylin);
  dashall.globalAlpha = 1;
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(103 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(98 * ahylin, 119 * ahylin, 264 * ahylin, 119 * ahylin, 264 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(271 * ahylin, 189 * ahylin, 94 * ahylin, 188 * ahylin, 103 * ahylin, 154 * ahylin);
  dashall.closePath();
  fill_path(dashall, simba[3], simba[2], 12 * ahylin);
  dashall.translate(0, 25 * ahylin);
  dashall.globalAlpha = 1;
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(103 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(98 * ahylin, 119 * ahylin, 264 * ahylin, 119 * ahylin, 264 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(271 * ahylin, 189 * ahylin, 94 * ahylin, 188 * ahylin, 103 * ahylin, 154 * ahylin);
  dashall.closePath();
  fill_path(dashall, simba[5]);
  dashall.translate(0, -25 * ahylin);
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(102 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(108 * ahylin, 216.5 * ahylin, 108 * ahylin, 216.5 * ahylin, 114 * ahylin, 279 * ahylin);
  dashall.bezierCurveTo(124 * ahylin, 300 * ahylin, 237 * ahylin, 299 * ahylin, 251 * ahylin, 279 * ahylin);
  dashall.bezierCurveTo(257 * ahylin, 217 * ahylin, 257 * ahylin, 217 * ahylin, 263 * ahylin, 155 * ahylin);
  dashall.bezierCurveTo(248 * ahylin, 194 * ahylin, 91 * ahylin, 180 * ahylin, 103 * ahylin, 156 * ahylin);
  dashall.closePath();
  fill_path(dashall, simba[1], simba[2], 12 * ahylin);
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(182 * ahylin, 185 * ahylin);
  dashall.bezierCurveTo(182.5 * ahylin, 237.5 * ahylin, 182.5 * ahylin, 237.5 * ahylin, 183 * ahylin, 290 * ahylin);
  dashall.closePath();
  fill_path(dashall, undefined, simba[2], 12 * ahylin);
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(222 * ahylin, 287 * ahylin);
  dashall.bezierCurveTo(226 * ahylin, 233.5 * ahylin, 226 * ahylin, 233.5 * ahylin, 230 * ahylin, 180 * ahylin);
  dashall.closePath();
  fill_path(dashall, undefined, simba[2], 12 * ahylin);
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(145 * ahylin, 290 * ahylin);
  dashall.bezierCurveTo(140.5 * ahylin, 237 * ahylin, 140.5 * ahylin, 237 * ahylin, 136 * ahylin, 184 * ahylin);
  dashall.closePath();
  fill_path(dashall, simba[1], simba[2], 11 * ahylin);
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(105 * ahylin, 184 * ahylin);
  dashall.bezierCurveTo(148 * ahylin, 205 * ahylin, 231 * ahylin, 202 * ahylin, 260 * ahylin, 182 * ahylin);
  dashall.bezierCurveTo(259 * ahylin, 195.5 * ahylin, 259 * ahylin, 195.5 * ahylin, 258 * ahylin, 209 * ahylin);
  dashall.bezierCurveTo(217 * ahylin, 218 * ahylin, 163 * ahylin, 225 * ahylin, 108 * ahylin, 207 * ahylin);
  dashall.closePath();
  fill_path(dashall, simba[4], simba[2], 11 * ahylin);
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(251 * ahylin, 276 * ahylin);
  dashall.bezierCurveTo(251.5 * ahylin, 267.5 * ahylin, 251.5 * ahylin, 267.5 * ahylin, 252 * ahylin, 259 * ahylin);
  dashall.bezierCurveTo(212 * ahylin, 272 * ahylin, 156 * ahylin, 275 * ahylin, 112 * ahylin, 260 * ahylin);
  dashall.bezierCurveTo(112.5 * ahylin, 269 * ahylin, 112.5 * ahylin, 269 * ahylin, 113 * ahylin, 278 * ahylin);
  dashall.bezierCurveTo(155 * ahylin, 306 * ahylin, 253 * ahylin, 286 * ahylin, 250 * ahylin, 276 * ahylin);
  dashall.closePath();
  fill_path(dashall, simba[4], simba[2], 11 * ahylin);
  dashall.beginPath();
  dashall.lineCap = "round";
  dashall.lineJoin = "round";
  dashall.moveTo(102 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(106 * ahylin, 53 * ahylin, 255 * ahylin, 53 * ahylin, 263 * ahylin, 154 * ahylin);
  dashall.bezierCurveTo(248 * ahylin, 38 * ahylin, 99 * ahylin, 69 * ahylin, 103 * ahylin, 154 * ahylin);
  dashall.closePath();
  fill_path(dashall, undefined, simba[2], 11 * ahylin);
  return keairra;
}
function create_shovel(magalli, dulan, fatmah) {
  var ebe = document.createElement("canvas");
  var vali = ebe.getContext("2d");
  ebe.width = 80 * magalli;
  ebe.height = 160 * magalli;
  vali.globalAlpha = dulan ? .5 : 1;
  vali.translate(5 * magalli, 5 * magalli);
  vali.save();
  round_rect(vali, 33 * magalli, 53 * magalli, 10 * magalli, 98 * magalli, 10 * magalli);
  fill_path(vali, fatmah[0]);
  vali.beginPath();
  vali.lineCap = "round";
  vali.lineJoin = "round";
  vali.translate(-150 * magalli, -100 * magalli);
  vali.moveTo(167.5 * magalli, 171.0625 * magalli);
  vali.bezierCurveTo(188 * magalli, 171.0625 * magalli, 188 * magalli, 171.0625 * magalli, 208.5 * magalli, 171.0625 * magalli);
  vali.bezierCurveTo(208.5 * magalli, 156.0625 * magalli, 208.5 * magalli, 156.0625 * magalli, 208.5 * magalli, 141.0625 * magalli);
  vali.bezierCurveTo(203.5 * magalli, 113.0625 * magalli, 179.5 * magalli, 96.0625 * magalli, 167.5 * magalli, 141.0625 * magalli);
  vali.closePath();
  fill_path(vali, fatmah[0]);
  vali.restore();
  vali.globalAlpha = 1;
  vali.translate(-5 * magalli, -5 * magalli);
  vali.save();
  round_rect(vali, 33 * magalli, 53 * magalli, 10 * magalli, 98 * magalli, 10 * magalli);
  fill_path(vali, fatmah[1], fatmah[2], 4 * magalli);
  vali.beginPath();
  vali.lineCap = "round";
  vali.lineJoin = "round";
  vali.translate(-150 * magalli, -100 * magalli);
  vali.moveTo(167.5 * magalli, 171.0625 * magalli);
  vali.bezierCurveTo(188 * magalli, 171.0625 * magalli, 188 * magalli, 171.0625 * magalli, 208.5 * magalli, 171.0625 * magalli);
  vali.bezierCurveTo(208.5 * magalli, 156.0625 * magalli, 208.5 * magalli, 156.0625 * magalli, 208.5 * magalli, 141.0625 * magalli);
  vali.bezierCurveTo(203.5 * magalli, 113.0625 * magalli, 179.5 * magalli, 96.0625 * magalli, 167.5 * magalli, 141.0625 * magalli);
  vali.closePath();
  fill_path(vali, fatmah[3], fatmah[4], 4 * magalli);
  vali.beginPath();
  vali.lineCap = "round";
  vali.lineJoin = "round";
  vali.translate(0 * magalli, 1 * magalli);
  vali.moveTo(180.5 * magalli, 169.0625 * magalli);
  vali.bezierCurveTo(180.5 * magalli, 157.5625 * magalli, 180.5 * magalli, 157.5625 * magalli, 180.5 * magalli, 146.0625 * magalli);
  vali.bezierCurveTo(181.5 * magalli, 134.0625 * magalli, 193.5 * magalli, 129.0625 * magalli, 196.5 * magalli, 146.0625 * magalli);
  vali.bezierCurveTo(196.5 * magalli, 157.5625 * magalli, 196.5 * magalli, 157.5625 * magalli, 196.5 * magalli, 169.0625 * magalli);
  vali.closePath();
  fill_path(vali, fatmah[5]);
  vali.restore();
  return ebe;
}
function create_symbol_hud(jahseir, lyden, cavalli) {
  var varnum = document.createElement("canvas");
  var rylynn = varnum.getContext("2d");
  varnum.width = 109 * jahseir;
  varnum.height = 110 * jahseir;
  circle(rylynn, 54.5 * jahseir, 55 * jahseir, 48.038209575038294 * jahseir);
  fill_path(rylynn, lyden[0], lyden[1], 8 * jahseir);
  if (cavalli == 0) {
    rylynn.beginPath();
    rylynn.lineCap = "round";
    rylynn.lineJoin = "round";
    rylynn.moveTo(54.928558349609375 * jahseir, 43.72320556640625 * jahseir);
    rylynn.bezierCurveTo(66.92855834960938 * jahseir, 31.72320556640625 * jahseir, 69.92855834960938 * jahseir, 29.72320556640625 * jahseir, 74.92855834960938 * jahseir, 29.72320556640625 * jahseir);
    rylynn.bezierCurveTo(86.92855834960938 * jahseir, 28.72320556640625 * jahseir, 91.92855834960938 * jahseir, 42.72320556640625 * jahseir, 89.92855834960938 * jahseir, 52.72320556640625 * jahseir);
    rylynn.bezierCurveTo(88.92855834960938 * jahseir, 63.72320556640625 * jahseir, 73.92855834960938 * jahseir, 75.72320556640625 * jahseir, 55.928558349609375 * jahseir, 87.72320556640625 * jahseir);
    rylynn.bezierCurveTo(37.928558349609375 * jahseir, 78.72320556640625 * jahseir, 26.928558349609375 * jahseir, 65.72320556640625 * jahseir, 19.928558349609375 * jahseir, 54.72320556640625 * jahseir);
    rylynn.bezierCurveTo(13.928558349609375 * jahseir, 42.72320556640625 * jahseir, 21.928558349609375 * jahseir, 28.72320556640625 * jahseir, 35.928558349609375 * jahseir, 29.72320556640625 * jahseir);
    rylynn.bezierCurveTo(45.928558349609375 * jahseir, 31.72320556640625 * jahseir, 51.928558349609375 * jahseir, 40.72320556640625 * jahseir, 53.928558349609375 * jahseir, 44.72320556640625 * jahseir);
    rylynn.closePath();
    fill_path(rylynn, lyden[2]);
  } else {
    if (cavalli == 1) {
      rylynn.save();
      rylynn.translate(55 * jahseir, 39.48748779296875 * jahseir);
      round_rect(rylynn, -11.5 * jahseir, -36 * jahseir, 23 * jahseir, 72 * jahseir, 10 * jahseir);
      rylynn.restore();
      fill_path(rylynn, lyden[2], lyden[3], 4 * jahseir);
      circle(rylynn, 54.5 * jahseir, 78.48748779296875 * jahseir, 22.02271554554524 * jahseir);
      fill_path(rylynn, lyden[4], lyden[3], 4 * jahseir);
      rylynn.save();
      rylynn.translate(55.5 * jahseir, 57.287506103515625 * jahseir);
      round_rect(rylynn, -9 * jahseir, -16 * jahseir, 18 * jahseir, 32 * jahseir, 10 * jahseir);
      rylynn.restore();
      fill_path(rylynn, lyden[4]);
      rylynn.beginPath();
      rylynn.lineCap = "round";
      rylynn.lineJoin = "round";
      rylynn.moveTo(66.5 * jahseir, 25.287506103515625 * jahseir);
      rylynn.bezierCurveTo(60.5 * jahseir, 25.287506103515625 * jahseir, 63.5 * jahseir, 25.287506103515625 * jahseir, 54.5 * jahseir, 25.287506103515625 * jahseir);
      rylynn.closePath();
      fill_path(rylynn, undefined, lyden[5], 4 * jahseir);
      rylynn.beginPath();
      rylynn.lineCap = "round";
      rylynn.lineJoin = "round";
      rylynn.moveTo(66.5 * jahseir, 37.287506103515625 * jahseir);
      rylynn.bezierCurveTo(60.5 * jahseir, 37.287506103515625 * jahseir, 60.5 * jahseir, 37.287506103515625 * jahseir, 54.5 * jahseir, 37.287506103515625 * jahseir);
      rylynn.closePath();
      fill_path(rylynn, undefined, lyden[5], 4 * jahseir);
      rylynn.beginPath();
      rylynn.lineCap = "round";
      rylynn.lineJoin = "round";
      rylynn.moveTo(66.5 * jahseir, 50.287506103515625 * jahseir);
      rylynn.bezierCurveTo(61 * jahseir, 50.287506103515625 * jahseir, 61 * jahseir, 50.287506103515625 * jahseir, 55.5 * jahseir, 50.287506103515625 * jahseir);
      rylynn.closePath();
      fill_path(rylynn, undefined, lyden[5], 4 * jahseir);
    } else {
      if (cavalli == 2) {
        rylynn.beginPath();
        rylynn.lineCap = "round";
        rylynn.lineJoin = "round";
        rylynn.moveTo(45.928558349609375 * jahseir, 55.29463195800781 * jahseir);
        rylynn.bezierCurveTo(38.928558349609375 * jahseir, 67.29463195800781 * jahseir, 38.928558349609375 * jahseir, 67.29463195800781 * jahseir, 31.928558349609375 * jahseir, 79.29463195800781 * jahseir);
        rylynn.bezierCurveTo(15.928558349609375 * jahseir, 85.29463195800781 * jahseir, 17.928558349609375 * jahseir, 86.29463195800781 * jahseir, 17.928558349609375 * jahseir, 90.29463195800781 * jahseir);
        rylynn.bezierCurveTo(19.928558349609375 * jahseir, 94.29463195800781 * jahseir, 21.928558349609375 * jahseir, 94.29463195800781 * jahseir, 27.928558349609375 * jahseir, 92.29463195800781 * jahseir);
        rylynn.bezierCurveTo(29.928558349609375 * jahseir, 98.29463195800781 * jahseir, 30.928558349609375 * jahseir, 99.29463195800781 * jahseir, 33.928558349609375 * jahseir, 99.29463195800781 * jahseir);
        rylynn.bezierCurveTo(38.928558349609375 * jahseir, 97.29463195800781 * jahseir, 38.928558349609375 * jahseir, 93.29463195800781 * jahseir, 37.928558349609375 * jahseir, 86.29463195800781 * jahseir);
        rylynn.bezierCurveTo(45.428558349609375 * jahseir, 73.29463195800781 * jahseir, 51.928558349609375 * jahseir, 64.29463195800781 * jahseir, 52.928558349609375 * jahseir, 60.29463195800781 * jahseir);
        rylynn.closePath();
        fill_path(rylynn, lyden[2]);
        rylynn.beginPath();
        rylynn.lineCap = "round";
        rylynn.lineJoin = "round";
        rylynn.moveTo(55.928558349609375 * jahseir, 8.866058349609375 * jahseir);
        rylynn.bezierCurveTo(35.928558349609375 * jahseir, 35.866058349609375 * jahseir, 37.928558349609375 * jahseir, 48.866058349609375 * jahseir, 46.928558349609375 * jahseir, 62.866058349609375 * jahseir);
        rylynn.bezierCurveTo(65.92855834960938 * jahseir, 72.86605834960938 * jahseir, 80.92855834960938 * jahseir, 55.866058349609375 * jahseir, 93.92855834960938 * jahseir, 36.866058349609375 * jahseir);
        rylynn.closePath();
        fill_path(rylynn, lyden[3], lyden[4], 6 * jahseir);
        rylynn.beginPath();
        rylynn.lineCap = "round";
        rylynn.lineJoin = "round";
        rylynn.moveTo(93.92855834960938 * jahseir, 36.866058349609375 * jahseir);
        rylynn.bezierCurveTo(82.92855834960938 * jahseir, 37.866058349609375 * jahseir, 77.92855834960938 * jahseir, 36.866058349609375 * jahseir, 67.92855834960938 * jahseir, 28.866058349609375 * jahseir);
        rylynn.bezierCurveTo(53.928558349609375 * jahseir, 16.866058349609375 * jahseir, 53.928558349609375 * jahseir, 14.866058349609375 * jahseir, 55.928558349609375 * jahseir, 7.866058349609375 * jahseir);
        rylynn.bezierCurveTo(65.92855834960938 * jahseir, 4.866058349609375 * jahseir, 71.92855834960938 * jahseir, 7.866058349609375 * jahseir, 83.92855834960938 * jahseir, 13.866058349609375 * jahseir);
        rylynn.bezierCurveTo(96.92855834960938 * jahseir, 21.866058349609375 * jahseir, 95.92855834960938 * jahseir, 31.866058349609375 * jahseir, 92.92855834960938 * jahseir, 36.866058349609375 * jahseir);
        rylynn.closePath();
        fill_path(rylynn, lyden[3], lyden[4], 6 * jahseir);
        rylynn.beginPath();
        rylynn.lineCap = "round";
        rylynn.lineJoin = "round";
        rylynn.moveTo(68.92855834960938 * jahseir, 16.866058349609375 * jahseir);
        rylynn.bezierCurveTo(71.92855834960938 * jahseir, 13.866058349609375 * jahseir, 76.92855834960938 * jahseir, 16.866058349609375 * jahseir, 79.92855834960938 * jahseir, 21.866058349609375 * jahseir);
        rylynn.bezierCurveTo(82.92855834960938 * jahseir, 24.866058349609375 * jahseir, 81.92855834960938 * jahseir, 27.866058349609375 * jahseir, 73.92855834960938 * jahseir, 24.866058349609375 * jahseir);
        rylynn.bezierCurveTo(67.92855834960938 * jahseir, 20.866058349609375 * jahseir, 66.92855834960938 * jahseir, 19.866058349609375 * jahseir, 67.92855834960938 * jahseir, 17.866058349609375 * jahseir);
        rylynn.closePath();
        fill_path(rylynn, lyden[2]);
      } else {
        if (cavalli == 3) {
          rylynn.scale(.9, .9);
          rylynn.translate(6 * jahseir, 0);
          rylynn.beginPath();
          rylynn.lineCap = "round";
          rylynn.lineJoin = "round";
          rylynn.moveTo(54 * jahseir, .421875 * jahseir);
          rylynn.bezierCurveTo(84 * jahseir, 45.421875 * jahseir, 89 * jahseir, 51.421875 * jahseir, 83 * jahseir, 74.421875 * jahseir);
          rylynn.bezierCurveTo(74 * jahseir, 95.421875 * jahseir, 46 * jahseir, 98.421875 * jahseir, 30 * jahseir, 78.421875 * jahseir);
          rylynn.bezierCurveTo(22 * jahseir, 59.421875 * jahseir, 27 * jahseir, 49.421875 * jahseir, 34 * jahseir, 36.421875 * jahseir);
          rylynn.closePath();
          fill_path(rylynn, lyden[2], lyden[3], 6 * jahseir);
          rylynn.beginPath();
          rylynn.lineCap = "round";
          rylynn.lineJoin = "round";
          rylynn.moveTo(74 * jahseir, 52.421875 * jahseir);
          rylynn.bezierCurveTo(77 * jahseir, 73.421875 * jahseir, 69 * jahseir, 81.421875 * jahseir, 58 * jahseir, 81.421875 * jahseir);
          rylynn.bezierCurveTo(66 * jahseir, 71.421875 * jahseir, 70 * jahseir, 66.421875 * jahseir, 74 * jahseir, 52.421875 * jahseir);
          rylynn.closePath();
          fill_path(rylynn, lyden[3]);
        }
      }
    }
  }
  return varnum;
}
function create_button_background(wrangler, markail) {
  var daxon = document.createElement("canvas");
  var janit = daxon.getContext("2d");
  var zabriel = wrangler.w + wrangler.lw;
  var jocarol = wrangler.h + wrangler.lw;
  var lucyana = jocarol * .1;
  daxon.width = zabriel;
  daxon.height = jocarol + lucyana;
  janit.beginPath();
  janit.translate(zabriel / 2, jocarol / 2 + lucyana);
  janit.globalAlpha = .5;
  round_rect(janit, -wrangler.w / 2, -wrangler.h / 2, wrangler.w, wrangler.h, wrangler.r);
  fill_path(janit, "#000", "#000", wrangler.lw);
  janit.globalAlpha = 1;
  janit.beginPath();
  if (!markail) {
    janit.translate(0, -lucyana);
  }
  round_rect(janit, -wrangler.w / 2, -wrangler.h / 2, wrangler.w, wrangler.h, wrangler.r);
  fill_path(janit, wrangler.bg, wrangler.fg, wrangler.lw);
  janit.beginPath();
  janit.fillStyle = wrangler.color;
  janit.textBaseline = "middle";
  janit.textAlign = "center";
  janit.font = wrangler.size + "px " + wrangler.font;
  janit.fillText(wrangler.text, 0, 0);
  return daxon;
}
function create_button(nadav) {
  var stephany = [];
  for (var shirika = 0; shirika < nadav.length; shirika++) {
    stephany.push(create_button_background(nadav[shirika], shirika == 2 ? true : false));
  }
  return stephany;
}
function create_gauges_mobile(neecy) {
  var bernelda = document.createElement("canvas");
  var millisa = bernelda.getContext("2d");
  var tameiko = 335 * neecy;
  var dutch = 250 * neecy;
  var natayshia = 120 * neecy;
  var dorraine = 20 * neecy;
  var deshanda = 35 * neecy;
  var kardae = 65 * neecy;
  var loir = 2 * neecy;
  var demetrise = 4 * neecy;
  bernelda.width = tameiko;
  bernelda.height = natayshia;
  millisa.beginPath();
  millisa.translate(0, 15 * neecy);
  round_rect(millisa, kardae, 0, dutch, dorraine, loir);
  fill_path(millisa, null, "#69A148", demetrise);
  millisa.translate(0, deshanda);
  round_rect(millisa, kardae, 0, dutch, dorraine, loir);
  fill_path(millisa, null, "#AF352A", demetrise);
  millisa.translate(0, deshanda);
  round_rect(millisa, kardae, 0, dutch, dorraine, loir);
  fill_path(millisa, null, "#669BB1", demetrise);
  return bernelda;
}
function create_oxygen_gauges(shikhara) {
  var demetriana = document.createElement("canvas");
  var alynn = demetriana.getContext("2d");
  var lazariya = 600 * shikhara;
  var yeico = 22 * shikhara;
  var melika = 4 * shikhara;
  var loryssa = 4 * shikhara;
  demetriana.width = lazariya;
  demetriana.height = yeico;
  round_rect(alynn, 5 * shikhara, 5 * shikhara, lazariya - 10 * shikhara, yeico - 10 * shikhara, melika);
  fill_path(alynn, null, "#BBE8EF", loryssa);
  return demetriana;
}
function create_recipe_button(nelia, nooh, taja) {
  var kindle = document.createElement("canvas");
  var janien = kindle.getContext("2d");
  kindle.width = 573 * nelia;
  kindle.height = 350 * nelia;
  if (taja == 1) {
    janien.beginPath();
    janien.lineCap = "round";
    janien.lineJoin = "round";
    janien.moveTo(336 * nelia, 72 * nelia);
    janien.bezierCurveTo(366 * nelia, 15 * nelia, 426 * nelia, 36 * nelia, 497 * nelia, 83 * nelia);
    janien.bezierCurveTo(522 * nelia, 85 * nelia, 522 * nelia, 85 * nelia, 547 * nelia, 87 * nelia);
    janien.bezierCurveTo(476.5 * nelia, 205 * nelia, 476.5 * nelia, 205 * nelia, 406 * nelia, 323 * nelia);
    janien.bezierCurveTo(297.5 * nelia, 319 * nelia, 297.5 * nelia, 319 * nelia, 189 * nelia, 315 * nelia);
    janien.bezierCurveTo(105.5 * nelia, 279 * nelia, 105.5 * nelia, 279 * nelia, 22 * nelia, 243 * nelia);
    janien.bezierCurveTo(92 * nelia, 140 * nelia, 92 * nelia, 140 * nelia, 162 * nelia, 37 * nelia);
    janien.bezierCurveTo(173 * nelia, 39 * nelia, 173 * nelia, 39 * nelia, 184 * nelia, 41 * nelia);
    janien.bezierCurveTo(185 * nelia, 38.5 * nelia, 185 * nelia, 38.5 * nelia, 186 * nelia, 36 * nelia);
    janien.bezierCurveTo(323 * nelia, 13 * nelia, 322 * nelia, 25 * nelia, 337 * nelia, 74 * nelia);
    janien.closePath();
    fill_path(janien, nooh[4], nooh[4], 35 * nelia);
  }
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(168 * nelia, 42 * nelia);
  janien.bezierCurveTo(255 * nelia, 60 * nelia, 255 * nelia, 60 * nelia, 342 * nelia, 78 * nelia);
  janien.bezierCurveTo(443 * nelia, 81.5 * nelia, 443 * nelia, 81.5 * nelia, 544 * nelia, 85 * nelia);
  janien.bezierCurveTo(475 * nelia, 204.5 * nelia, 475 * nelia, 204.5 * nelia, 406 * nelia, 324 * nelia);
  janien.bezierCurveTo(297.5 * nelia, 320 * nelia, 297.5 * nelia, 320 * nelia, 189 * nelia, 316 * nelia);
  janien.bezierCurveTo(105.5 * nelia, 279 * nelia, 105.5 * nelia, 279 * nelia, 22 * nelia, 242 * nelia);
  janien.closePath();
  fill_path(janien, nooh[0], nooh[1], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(188 * nelia, 41 * nelia);
  janien.bezierCurveTo(308 * nelia, 15 * nelia, 325 * nelia, 18 * nelia, 337 * nelia, 66 * nelia);
  janien.bezierCurveTo(191 * nelia, 305 * nelia, 196 * nelia, 286 * nelia, 184 * nelia, 307 * nelia);
  janien.bezierCurveTo(175 * nelia, 250 * nelia, 90 * nelia, 254 * nelia, 52 * nelia, 241 * nelia);
  janien.closePath();
  fill_path(janien, nooh[2], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(336 * nelia, 71 * nelia);
  janien.bezierCurveTo(375 * nelia, 8 * nelia, 429 * nelia, 50 * nelia, 518 * nelia, 92 * nelia);
  janien.bezierCurveTo(455 * nelia, 199.5 * nelia, 455 * nelia, 199.5 * nelia, 392 * nelia, 307 * nelia);
  janien.bezierCurveTo(227 * nelia, 301 * nelia, 261 * nelia, 255 * nelia, 188 * nelia, 308 * nelia);
  janien.closePath();
  fill_path(janien, nooh[2], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(357 * nelia, 76 * nelia);
  janien.bezierCurveTo(390 * nelia, 67 * nelia, 414 * nelia, 86 * nelia, 435 * nelia, 104 * nelia);
  janien.bezierCurveTo(417 * nelia, 135 * nelia, 417 * nelia, 135 * nelia, 399 * nelia, 166 * nelia);
  janien.bezierCurveTo(352 * nelia, 140 * nelia, 345 * nelia, 139 * nelia, 319 * nelia, 142 * nelia);
  janien.closePath();
  fill_path(janien, nooh[3], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(309 * nelia, 168 * nelia);
  janien.bezierCurveTo(345 * nelia, 163 * nelia, 372 * nelia, 180 * nelia, 412 * nelia, 203 * nelia);
  fill_path(janien, nooh[2], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(263 * nelia, 54 * nelia);
  janien.bezierCurveTo(305 * nelia, 44 * nelia, 307 * nelia, 51 * nelia, 311 * nelia, 64 * nelia);
  janien.bezierCurveTo(270.5 * nelia, 129.5 * nelia, 270.5 * nelia, 129.5 * nelia, 230 * nelia, 195 * nelia);
  janien.bezierCurveTo(221 * nelia, 175 * nelia, 203 * nelia, 171 * nelia, 186 * nelia, 172 * nelia);
  janien.closePath();
  fill_path(janien, nooh[3], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(292 * nelia, 198 * nelia);
  janien.bezierCurveTo(328 * nelia, 191 * nelia, 364 * nelia, 211 * nelia, 401 * nelia, 237 * nelia);
  fill_path(janien, nooh[2], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(245 * nelia, 68 * nelia);
  janien.bezierCurveTo(210 * nelia, 72 * nelia, 210 * nelia, 72 * nelia, 189 * nelia, 69 * nelia);
  fill_path(janien, nooh[2], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(222 * nelia, 96 * nelia);
  janien.bezierCurveTo(196 * nelia, 97 * nelia, 193 * nelia, 97 * nelia, 177 * nelia, 92 * nelia);
  fill_path(janien, nooh[2], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(207 * nelia, 124 * nelia);
  janien.bezierCurveTo(179 * nelia, 123 * nelia, 177 * nelia, 124 * nelia, 161 * nelia, 119 * nelia);
  fill_path(janien, nooh[2], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(115 * nelia, 183 * nelia);
  janien.bezierCurveTo(184 * nelia, 185 * nelia, 203 * nelia, 198 * nelia, 219 * nelia, 221 * nelia);
  fill_path(janien, nooh[2], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(98 * nelia, 213 * nelia);
  janien.bezierCurveTo(161 * nelia, 214 * nelia, 193 * nelia, 227 * nelia, 201 * nelia, 249 * nelia);
  fill_path(janien, nooh[2], nooh[3], 12 * nelia);
  janien.beginPath();
  janien.lineCap = "round";
  janien.lineJoin = "round";
  janien.moveTo(399 * nelia, 257 * nelia);
  janien.bezierCurveTo(287 * nelia, 215 * nelia, 280 * nelia, 215 * nelia, 263 * nelia, 222 * nelia);
  janien.bezierCurveTo(253 * nelia, 238 * nelia, 247 * nelia, 245 * nelia, 243 * nelia, 254 * nelia);
  janien.bezierCurveTo(267 * nelia, 236 * nelia, 292 * nelia, 263 * nelia, 377 * nelia, 284 * nelia);
  fill_path(janien, nooh[3], nooh[3], 12 * nelia);
  return kindle;
}
function create_quest_button(keyontae, arissa, kenshiro, anailah) {
  var sheilagh = document.createElement("canvas");
  var steffanie = sheilagh.getContext("2d");
  sheilagh.width = 170 * keyontae;
  sheilagh.height = 200 * keyontae;
  steffanie.translate(5 * keyontae, 15 * keyontae);
  if (anailah == 1) {
    steffanie.translate(0, -5 * keyontae);
    circle(steffanie, 77.00003051757812 * keyontae, 104.49432373046875 * keyontae, 71.84010022264724 * keyontae);
    fill_path(steffanie, kenshiro[1], kenshiro[5], 20 * keyontae);
    circle(steffanie, 77.00003051757812 * keyontae, 104.22160339355469 * keyontae, 61.554853586049575 * keyontae);
    fill_path(steffanie, kenshiro[1], kenshiro[5], 20 * keyontae);
    steffanie.save();
    steffanie.translate(77.00003051757812 * keyontae, 31.267044067382812 * keyontae);
    round_rect(steffanie, -6 * keyontae, -12.5 * keyontae, 12 * keyontae, 25 * keyontae, 10 * keyontae);
    steffanie.restore();
    fill_path(steffanie, kenshiro[1], kenshiro[5], 20 * keyontae);
    steffanie.save();
    steffanie.translate(77.00003051757812 * keyontae, 13.267044067382812 * keyontae);
    round_rect(steffanie, -15 * keyontae, -10.5 * keyontae, 30 * keyontae, 21 * keyontae, 10 * keyontae);
    steffanie.restore();
    fill_path(steffanie, kenshiro[1], kenshiro[5], 20 * keyontae);
  }
  circle(steffanie, 77.00003051757812 * keyontae, 104.49432373046875 * keyontae, 71.84010022264724 * keyontae);
  fill_path(steffanie, kenshiro[1], kenshiro[2], 7 * keyontae);
  circle(steffanie, 77.00003051757812 * keyontae, 104.22160339355469 * keyontae, 61.554853586049575 * keyontae);
  fill_path(steffanie, kenshiro[1], kenshiro[2], 7 * keyontae);
  steffanie.beginPath();
  steffanie.lineCap = "round";
  steffanie.lineJoin = "round";
  steffanie.moveTo(18.000030517578125 * keyontae, 105.85795593261719 * keyontae);
  steffanie.bezierCurveTo(134.00003051757812 * keyontae, 104.85795593261719 * keyontae, 77.00003051757812 * keyontae, 104.85795593261719 * keyontae, 136.00003051757812 * keyontae, 103.85795593261719 * keyontae);
  steffanie.closePath();
  fill_path(steffanie, kenshiro[1], kenshiro[2], 8 * keyontae);
  circle(steffanie, 77.00003051757812 * keyontae, 104.6761474609375 * keyontae, 32.55764119219941 * keyontae);
  fill_path(steffanie, kenshiro[1], kenshiro[2], 8 * keyontae);
  steffanie.beginPath();
  steffanie.lineCap = "round";
  steffanie.lineJoin = "round";
  steffanie.moveTo(78.00003051757812 * keyontae, 112.03977966308594 * keyontae);
  steffanie.bezierCurveTo(78.00003051757812 * keyontae, 87.03977966308594 * keyontae, 78.00003051757812 * keyontae, 87.03977966308594 * keyontae, 78.00003051757812 * keyontae, 62.03977966308594 * keyontae);
  steffanie.closePath();
  fill_path(steffanie, kenshiro[3], kenshiro[2], 8 * keyontae);
  steffanie.beginPath();
  steffanie.lineCap = "round";
  steffanie.lineJoin = "round";
  steffanie.moveTo(78.00003051757812 * keyontae, 48.03977966308594 * keyontae);
  steffanie.bezierCurveTo(82.00003051757812 * keyontae, 55.53977966308594 * keyontae, 82.00003051757812 * keyontae, 55.53977966308594 * keyontae, 86.00003051757812 * keyontae, 63.03977966308594 * keyontae);
  steffanie.bezierCurveTo(78.00003051757812 * keyontae, 63.03977966308594 * keyontae, 78.00003051757812 * keyontae, 63.03977966308594 * keyontae, 70.00003051757812 * keyontae, 63.03977966308594 * keyontae);
  steffanie.closePath();
  fill_path(steffanie, kenshiro[3], kenshiro[2], 4 * keyontae);
  steffanie.beginPath();
  steffanie.lineCap = "round";
  steffanie.lineJoin = "round";
  steffanie.moveTo(80.00003051757812 * keyontae, 111.6761474609375 * keyontae);
  steffanie.bezierCurveTo(95.00003051757812 * keyontae, 97.1761474609375 * keyontae, 95.00003051757812 * keyontae, 97.1761474609375 * keyontae, 110.00003051757812 * keyontae, 82.6761474609375 * keyontae);
  steffanie.closePath();
  fill_path(steffanie, kenshiro[3], kenshiro[2], 8 * keyontae);
  steffanie.beginPath();
  steffanie.lineCap = "round";
  steffanie.lineJoin = "round";
  steffanie.moveTo(107.00003051757812 * keyontae, 76.6761474609375 * keyontae);
  steffanie.bezierCurveTo(111.50003051757812 * keyontae, 82.6761474609375 * keyontae, 111.50003051757812 * keyontae, 82.6761474609375 * keyontae, 116.00003051757812 * keyontae, 88.6761474609375 * keyontae);
  steffanie.bezierCurveTo(118.50003051757812 * keyontae, 81.6761474609375 * keyontae, 118.50003051757812 * keyontae, 81.6761474609375 * keyontae, 121.00003051757812 * keyontae, 74.6761474609375 * keyontae);
  steffanie.closePath();
  fill_path(steffanie, kenshiro[3], kenshiro[2], 4 * keyontae);
  circle(steffanie, 77.00003051757812 * keyontae, 105.03977966308594 * keyontae, 15.556349186104045 * keyontae);
  fill_path(steffanie, kenshiro[3], kenshiro[2], 4 * keyontae);
  steffanie.save();
  steffanie.translate(77.00003051757812 * keyontae, 31.267044067382812 * keyontae);
  steffanie.rotate(0);
  round_rect(steffanie, -6 * keyontae, -12.5 * keyontae, 12 * keyontae, 25 * keyontae, 10 * keyontae);
  steffanie.restore();
  fill_path(steffanie, kenshiro[1], kenshiro[2], 7 * keyontae);
  steffanie.save();
  steffanie.translate(77.00003051757812 * keyontae, 13.267044067382812 * keyontae);
  steffanie.rotate(0);
  round_rect(steffanie, -15 * keyontae, -10.5 * keyontae, 30 * keyontae, 21 * keyontae, 10 * keyontae);
  steffanie.restore();
  fill_path(steffanie, kenshiro[1], kenshiro[2], 7 * keyontae);
  return sheilagh;
}
function create_market_button(kuiana, malvin, dilcia) {
  var rozan = document.createElement("canvas");
  var shalica = rozan.getContext("2d");
  rozan.width = 81 * kuiana;
  rozan.height = 77 * kuiana;
  shalica.translate(0, 10 * kuiana);
  shalica.scale(.2, .2);
  shalica.translate(0, -30 * kuiana);
  if (dilcia == 1) {
    shalica.beginPath();
    shalica.lineCap = "round";
    shalica.lineJoin = "round";
    shalica.moveTo(36.5 * kuiana, 278.0625 * kuiana);
    shalica.bezierCurveTo(67.5 * kuiana, 316.0625 * kuiana, 134.5 * kuiana, 334.0625 * kuiana, 199.5 * kuiana, 319.0625 * kuiana);
    shalica.bezierCurveTo(254.5 * kuiana, 304.0625 * kuiana, 346.5 * kuiana, 270.0625 * kuiana, 348.5 * kuiana, 237.0625 * kuiana);
    shalica.bezierCurveTo(359.5 * kuiana, 206.0625 * kuiana, 318.5 * kuiana, 129.0625 * kuiana, 262.5 * kuiana, 122.0625 * kuiana);
    shalica.bezierCurveTo(213.5 * kuiana, 115.0625 * kuiana, 166.5 * kuiana, 133.0625 * kuiana, 104.5 * kuiana, 166.0625 * kuiana);
    shalica.bezierCurveTo(54.5 * kuiana, 194.0625 * kuiana, 23.5 * kuiana, 241.0625 * kuiana, 36.5 * kuiana, 277.0625 * kuiana);
    shalica.closePath();
    fill_path(shalica, malvin[0], malvin[3], 50 * kuiana);
  }
  shalica.beginPath();
  shalica.lineCap = "round";
  shalica.lineJoin = "round";
  shalica.moveTo(36.5 * kuiana, 278.0625 * kuiana);
  shalica.bezierCurveTo(67.5 * kuiana, 316.0625 * kuiana, 134.5 * kuiana, 334.0625 * kuiana, 199.5 * kuiana, 319.0625 * kuiana);
  shalica.bezierCurveTo(254.5 * kuiana, 304.0625 * kuiana, 346.5 * kuiana, 270.0625 * kuiana, 348.5 * kuiana, 237.0625 * kuiana);
  shalica.bezierCurveTo(359.5 * kuiana, 206.0625 * kuiana, 318.5 * kuiana, 129.0625 * kuiana, 262.5 * kuiana, 122.0625 * kuiana);
  shalica.bezierCurveTo(213.5 * kuiana, 115.0625 * kuiana, 166.5 * kuiana, 133.0625 * kuiana, 104.5 * kuiana, 166.0625 * kuiana);
  shalica.bezierCurveTo(54.5 * kuiana, 194.0625 * kuiana, 23.5 * kuiana, 241.0625 * kuiana, 36.5 * kuiana, 277.0625 * kuiana);
  shalica.closePath();
  fill_path(shalica, malvin[0], malvin[1], 19 * kuiana);
  shalica.beginPath();
  shalica.lineCap = "round";
  shalica.lineJoin = "round";
  shalica.moveTo(214.5 * kuiana, 124.0625 * kuiana);
  shalica.bezierCurveTo(242.5 * kuiana, 125.0625 * kuiana, 272.5 * kuiana, 159.0625 * kuiana, 283.5 * kuiana, 184.0625 * kuiana);
  shalica.bezierCurveTo(277.5 * kuiana, 161.0625 * kuiana, 233.5 * kuiana, 128.0625 * kuiana, 219.5 * kuiana, 122.0625 * kuiana);
  shalica.closePath();
  fill_path(shalica, malvin[0], malvin[1], 19 * kuiana);
  shalica.beginPath();
  shalica.lineCap = "round";
  shalica.lineJoin = "round";
  shalica.moveTo(157.5 * kuiana, 145.0625 * kuiana);
  shalica.bezierCurveTo(176.5 * kuiana, 148.0625 * kuiana, 205.5 * kuiana, 176.0625 * kuiana, 212.5 * kuiana, 197.0625 * kuiana);
  shalica.bezierCurveTo(205.5 * kuiana, 178.0625 * kuiana, 177.5 * kuiana, 152.0625 * kuiana, 156.5 * kuiana, 142.0625 * kuiana);
  shalica.closePath();
  fill_path(shalica, malvin[0], malvin[1], 19 * kuiana);
  shalica.beginPath();
  shalica.lineCap = "round";
  shalica.lineJoin = "round";
  shalica.moveTo(103.5 * kuiana, 169.0625 * kuiana);
  shalica.bezierCurveTo(160.5 * kuiana, 166.0625 * kuiana, 228.5 * kuiana, 312.0625 * kuiana, 162.5 * kuiana, 323.0625 * kuiana);
  shalica.bezierCurveTo(128.5 * kuiana, 330.0625 * kuiana, 45.5 * kuiana, 312.0625 * kuiana, 34.5 * kuiana, 268.0625 * kuiana);
  shalica.bezierCurveTo(30.5 * kuiana, 238.0625 * kuiana, 44.5 * kuiana, 222.0625 * kuiana, 52.5 * kuiana, 211.0625 * kuiana);
  shalica.bezierCurveTo(82.5 * kuiana, 174.0625 * kuiana, 104.5 * kuiana, 166.0625 * kuiana, 119.5 * kuiana, 172.0625 * kuiana);
  shalica.closePath();
  fill_path(shalica, malvin[2], malvin[1], 19 * kuiana);
  shalica.beginPath();
  shalica.lineCap = "round";
  shalica.lineJoin = "round";
  shalica.moveTo(194.5 * kuiana, 313.0625 * kuiana);
  shalica.bezierCurveTo(222.5 * kuiana, 306.0625 * kuiana, 319.5 * kuiana, 271.0625 * kuiana, 337.5 * kuiana, 241.0625 * kuiana);
  shalica.bezierCurveTo(274.5 * kuiana, 270.0625 * kuiana, 216.5 * kuiana, 288.0625 * kuiana, 199.5 * kuiana, 287.0625 * kuiana);
  shalica.bezierCurveTo(198.5 * kuiana, 302.0625 * kuiana, 195.5 * kuiana, 311.0625 * kuiana, 193.5 * kuiana, 312.0625 * kuiana);
  shalica.closePath();
  fill_path(shalica, malvin[1]);
  shalica.scale(3, 3);
  shalica.translate(15, 10 * kuiana);
  if (dilcia == 1) {
    shalica.beginPath();
    shalica.lineCap = "round";
    shalica.lineJoin = "round";
    shalica.moveTo(4 * kuiana, 32 * kuiana);
    shalica.bezierCurveTo(19 * kuiana, 25 * kuiana, 19 * kuiana, 25 * kuiana, 34 * kuiana, 18 * kuiana);
    shalica.bezierCurveTo(41.5 * kuiana, 23.5 * kuiana, 41.5 * kuiana, 23.5 * kuiana, 49 * kuiana, 29 * kuiana);
    shalica.bezierCurveTo(59.5 * kuiana, 20 * kuiana, 59.5 * kuiana, 20 * kuiana, 70 * kuiana, 11 * kuiana);
    fill_path(shalica, undefined, malvin[3], 28 * kuiana);
    shalica.beginPath();
    shalica.lineCap = "round";
    shalica.lineJoin = "round";
    shalica.moveTo(56 * kuiana, 6 * kuiana);
    shalica.bezierCurveTo(63.5 * kuiana, 13.5 * kuiana, 63.5 * kuiana, 13.5 * kuiana, 71 * kuiana, 21 * kuiana);
    shalica.bezierCurveTo(74.5 * kuiana, 11.5 * kuiana, 74.5 * kuiana, 11.5 * kuiana, 78 * kuiana, 2 * kuiana);
    shalica.closePath();
    fill_path(shalica, malvin[3], malvin[3], 28 * kuiana);
  }
  shalica.beginPath();
  shalica.lineCap = "round";
  shalica.lineJoin = "round";
  shalica.moveTo(4 * kuiana, 32 * kuiana);
  shalica.bezierCurveTo(19 * kuiana, 25 * kuiana, 19 * kuiana, 25 * kuiana, 34 * kuiana, 18 * kuiana);
  shalica.bezierCurveTo(41.5 * kuiana, 23.5 * kuiana, 41.5 * kuiana, 23.5 * kuiana, 49 * kuiana, 29 * kuiana);
  shalica.bezierCurveTo(59.5 * kuiana, 20 * kuiana, 59.5 * kuiana, 20 * kuiana, 70 * kuiana, 11 * kuiana);
  fill_path(shalica, undefined, malvin[1], 17 * kuiana);
  shalica.beginPath();
  shalica.lineCap = "round";
  shalica.lineJoin = "round";
  shalica.moveTo(56 * kuiana, 6 * kuiana);
  shalica.bezierCurveTo(63.5 * kuiana, 13.5 * kuiana, 63.5 * kuiana, 13.5 * kuiana, 71 * kuiana, 21 * kuiana);
  shalica.bezierCurveTo(74.5 * kuiana, 11.5 * kuiana, 74.5 * kuiana, 11.5 * kuiana, 78 * kuiana, 2 * kuiana);
  shalica.closePath();
  fill_path(shalica, malvin[1], malvin[1], 17 * kuiana);
  shalica.beginPath();
  shalica.lineCap = "round";
  shalica.lineJoin = "round";
  shalica.moveTo(4 * kuiana, 32 * kuiana);
  shalica.bezierCurveTo(19 * kuiana, 25 * kuiana, 19 * kuiana, 25 * kuiana, 34 * kuiana, 18 * kuiana);
  shalica.bezierCurveTo(41.5 * kuiana, 23.5 * kuiana, 41.5 * kuiana, 23.5 * kuiana, 49 * kuiana, 29 * kuiana);
  shalica.bezierCurveTo(59.5 * kuiana, 20 * kuiana, 59.5 * kuiana, 20 * kuiana, 70 * kuiana, 11 * kuiana);
  fill_path(shalica, undefined, malvin[2], 10 * kuiana);
  shalica.beginPath();
  shalica.lineCap = "round";
  shalica.lineJoin = "round";
  shalica.moveTo(56 * kuiana, 6 * kuiana);
  shalica.bezierCurveTo(63.5 * kuiana, 13.5 * kuiana, 63.5 * kuiana, 13.5 * kuiana, 71 * kuiana, 21 * kuiana);
  shalica.bezierCurveTo(74.5 * kuiana, 11.5 * kuiana, 74.5 * kuiana, 11.5 * kuiana, 78 * kuiana, 2 * kuiana);
  shalica.closePath();
  fill_path(shalica, malvin[2], malvin[2], 10 * kuiana);
  return rozan;
}
function create_spanner(myrah, fontane, shrinika) {
  var abida = document.createElement("canvas");
  var aynslee = abida.getContext("2d");
  abida.width = 144 * myrah;
  abida.height = 280 * myrah;
  aynslee.globalAlpha = fontane ? .5 : 1;
  aynslee.translate(5 * myrah, 5 * myrah);
  aynslee.beginPath();
  aynslee.lineCap = "round";
  aynslee.lineJoin = "round";
  aynslee.moveTo(62 * myrah, 103.79999542236328 * myrah);
  aynslee.bezierCurveTo(62.5 * myrah, 148.79999542236328 * myrah, 62.5 * myrah, 148.79999542236328 * myrah, 63 * myrah, 193.79999542236328 * myrah);
  aynslee.bezierCurveTo(63 * myrah, 219.79999542236328 * myrah, 47 * myrah, 217.79999542236328 * myrah, 51 * myrah, 230.79999542236328 * myrah);
  aynslee.bezierCurveTo(62 * myrah, 255.79999542236328 * myrah, 74 * myrah, 260.7999954223633 * myrah, 72 * myrah, 248.79999542236328 * myrah);
  aynslee.bezierCurveTo(65 * myrah, 226.79999542236328 * myrah, 71 * myrah, 229.79999542236328 * myrah, 76 * myrah, 225.79999542236328 * myrah);
  aynslee.bezierCurveTo(90 * myrah, 224.79999542236328 * myrah, 89 * myrah, 232.79999542236328 * myrah, 90 * myrah, 243.79999542236328 * myrah);
  aynslee.bezierCurveTo(95 * myrah, 253.79999542236328 * myrah, 99 * myrah, 249.79999542236328 * myrah, 100 * myrah, 229.79999542236328 * myrah);
  aynslee.bezierCurveTo(102 * myrah, 213.79999542236328 * myrah, 98 * myrah, 214.79999542236328 * myrah, 90 * myrah, 205.79999542236328 * myrah);
  aynslee.bezierCurveTo(82 * myrah, 201.79999542236328 * myrah, 82 * myrah, 185.79999542236328 * myrah, 82 * myrah, 114.79999542236328 * myrah);
  aynslee.bezierCurveTo(80 * myrah, 73 * myrah, 82 * myrah, 68 * myrah, 93 * myrah, 53 * myrah);
  aynslee.bezierCurveTo(98 * myrah, 37 * myrah, 65 * myrah, 14 * myrah, 74 * myrah, 33 * myrah);
  aynslee.bezierCurveTo(82 * myrah, 56 * myrah, 77 * myrah, 52 * myrah, 69 * myrah, 54 * myrah);
  aynslee.bezierCurveTo(55 * myrah, 57 * myrah, 57 * myrah, 53 * myrah, 54 * myrah, 39 * myrah);
  aynslee.bezierCurveTo(46 * myrah, 20 * myrah, 37 * myrah, 61 * myrah, 50 * myrah, 68 * myrah);
  aynslee.bezierCurveTo(65 * myrah, 81 * myrah, 60 * myrah, 89 * myrah, 62 * myrah, 102 * myrah);
  aynslee.closePath();
  fill_path(aynslee, shrinika[0]);
  aynslee.globalAlpha = 1;
  aynslee.translate(-5 * myrah, -5 * myrah);
  aynslee.beginPath();
  aynslee.lineCap = "round";
  aynslee.lineJoin = "round";
  aynslee.moveTo(62 * myrah, 103.79999542236328 * myrah);
  aynslee.bezierCurveTo(62.5 * myrah, 148.79999542236328 * myrah, 62.5 * myrah, 148.79999542236328 * myrah, 63 * myrah, 193.79999542236328 * myrah);
  aynslee.bezierCurveTo(63 * myrah, 219.79999542236328 * myrah, 47 * myrah, 217.79999542236328 * myrah, 51 * myrah, 230.79999542236328 * myrah);
  aynslee.bezierCurveTo(62 * myrah, 255.79999542236328 * myrah, 74 * myrah, 260.7999954223633 * myrah, 72 * myrah, 248.79999542236328 * myrah);
  aynslee.bezierCurveTo(65 * myrah, 226.79999542236328 * myrah, 71 * myrah, 229.79999542236328 * myrah, 76 * myrah, 225.79999542236328 * myrah);
  aynslee.bezierCurveTo(90 * myrah, 224.79999542236328 * myrah, 89 * myrah, 232.79999542236328 * myrah, 90 * myrah, 243.79999542236328 * myrah);
  aynslee.bezierCurveTo(95 * myrah, 253.79999542236328 * myrah, 99 * myrah, 249.79999542236328 * myrah, 100 * myrah, 229.79999542236328 * myrah);
  aynslee.bezierCurveTo(102 * myrah, 213.79999542236328 * myrah, 98 * myrah, 214.79999542236328 * myrah, 90 * myrah, 205.79999542236328 * myrah);
  aynslee.bezierCurveTo(82 * myrah, 201.79999542236328 * myrah, 82 * myrah, 185.79999542236328 * myrah, 82 * myrah, 114.79999542236328 * myrah);
  aynslee.bezierCurveTo(80 * myrah, 73 * myrah, 82 * myrah, 68 * myrah, 93 * myrah, 53 * myrah);
  aynslee.bezierCurveTo(98 * myrah, 37 * myrah, 65 * myrah, 14 * myrah, 74 * myrah, 33 * myrah);
  aynslee.bezierCurveTo(82 * myrah, 56 * myrah, 77 * myrah, 52 * myrah, 69 * myrah, 54 * myrah);
  aynslee.bezierCurveTo(55 * myrah, 57 * myrah, 57 * myrah, 53 * myrah, 54 * myrah, 39 * myrah);
  aynslee.bezierCurveTo(46 * myrah, 20 * myrah, 37 * myrah, 61 * myrah, 50 * myrah, 68 * myrah);
  aynslee.bezierCurveTo(65 * myrah, 81 * myrah, 60 * myrah, 89 * myrah, 62 * myrah, 102 * myrah);
  aynslee.closePath();
  fill_path(aynslee, shrinika[1], shrinika[2], 6 * myrah);
  return abida;
}
function create_present(kayte, marianthi, elanore) {
  var daqwon = document.createElement("canvas");
  var blessn = daqwon.getContext("2d");
  daqwon.width = 160 * kayte;
  daqwon.height = 161 * kayte;
  blessn.globalAlpha = marianthi ? .5 : 1;
  blessn.translate(0, 10 * kayte);
  blessn.save();
  blessn.translate(80.5 * kayte, 78 * kayte);
  round_rect(blessn, -71.5 * kayte, -71 * kayte, 143 * kayte, 143 * kayte, 10 * kayte);
  blessn.restore();
  fill_path(blessn, elanore[0]);
  blessn.globalAlpha = 1;
  blessn.translate(0, -10 * kayte);
  blessn.save();
  blessn.translate(80.5 * kayte, 78 * kayte);
  round_rect(blessn, -71.5 * kayte, -71 * kayte, 143 * kayte, 143 * kayte, 10 * kayte);
  blessn.restore();
  fill_path(blessn, elanore[1], elanore[2], 6 * kayte);
  blessn.save();
  blessn.translate(80 * kayte, 78.5 * kayte);
  round_rect(blessn, -17 * kayte, -72.5 * kayte, 34 * kayte, 145 * kayte, 10 * kayte);
  blessn.restore();
  fill_path(blessn, elanore[3], elanore[4], 6 * kayte);
  blessn.globalAlpha = marianthi ? .5 : 1;
  blessn.translate(0, 10 * kayte);
  blessn.save();
  blessn.translate(80 * kayte, 79.5 * kayte);
  round_rect(blessn, -73 * kayte, -16.5 * kayte, 145 * kayte, 34 * kayte, 10 * kayte);
  blessn.restore();
  fill_path(blessn, elanore[0]);
  blessn.globalAlpha = 1;
  blessn.translate(0, -10 * kayte);
  blessn.save();
  blessn.translate(80 * kayte, 79.5 * kayte);
  round_rect(blessn, -73 * kayte, -16.5 * kayte, 145 * kayte, 34 * kayte, 10 * kayte);
  blessn.restore();
  fill_path(blessn, elanore[3], elanore[4], 6 * kayte);
  blessn.globalAlpha = marianthi ? .5 : 1;
  blessn.translate(0, 10 * kayte);
  blessn.beginPath();
  blessn.lineCap = "round";
  blessn.lineJoin = "round";
  blessn.moveTo(79 * kayte, 71 * kayte);
  blessn.bezierCurveTo(90 * kayte, 42 * kayte, 98 * kayte, 36 * kayte, 109 * kayte, 43 * kayte);
  blessn.bezierCurveTo(119 * kayte, 47 * kayte, 128 * kayte, 62 * kayte, 107 * kayte, 72 * kayte);
  blessn.bezierCurveTo(96 * kayte, 78.5 * kayte, 96 * kayte, 78.5 * kayte, 85 * kayte, 85 * kayte);
  blessn.closePath();
  fill_path(blessn, elanore[0]);
  blessn.beginPath();
  blessn.lineCap = "round";
  blessn.lineJoin = "round";
  blessn.moveTo(84 * kayte, 78 * kayte);
  blessn.bezierCurveTo(113 * kayte, 82 * kayte, 123 * kayte, 97 * kayte, 115 * kayte, 108 * kayte);
  blessn.bezierCurveTo(110 * kayte, 119 * kayte, 98 * kayte, 124 * kayte, 87 * kayte, 107 * kayte);
  blessn.bezierCurveTo(81.5 * kayte, 94.5 * kayte, 81.5 * kayte, 94.5 * kayte, 76 * kayte, 82 * kayte);
  blessn.closePath();
  fill_path(blessn, elanore[0]);
  blessn.beginPath();
  blessn.lineCap = "round";
  blessn.lineJoin = "round";
  blessn.moveTo(80 * kayte, 73 * kayte);
  blessn.bezierCurveTo(64 * kayte, 37 * kayte, 55 * kayte, 34 * kayte, 45 * kayte, 42 * kayte);
  blessn.bezierCurveTo(30 * kayte, 54 * kayte, 36 * kayte, 65 * kayte, 51 * kayte, 72 * kayte);
  blessn.bezierCurveTo(62.5 * kayte, 77 * kayte, 62.5 * kayte, 77 * kayte, 74 * kayte, 82 * kayte);
  blessn.closePath();
  fill_path(blessn, elanore[0]);
  blessn.beginPath();
  blessn.lineCap = "round";
  blessn.lineJoin = "round";
  blessn.moveTo(82 * kayte, 83 * kayte);
  blessn.bezierCurveTo(73 * kayte, 107 * kayte, 60 * kayte, 123 * kayte, 47 * kayte, 113 * kayte);
  blessn.bezierCurveTo(33 * kayte, 105 * kayte, 33 * kayte, 92 * kayte, 52 * kayte, 85 * kayte);
  blessn.bezierCurveTo(74 * kayte, 73 * kayte, 77 * kayte, 76 * kayte, 76 * kayte, 75 * kayte);
  blessn.closePath();
  fill_path(blessn, elanore[0]);
  blessn.globalAlpha = 1;
  blessn.translate(0, -10 * kayte);
  blessn.beginPath();
  blessn.lineCap = "round";
  blessn.lineJoin = "round";
  blessn.moveTo(79 * kayte, 71 * kayte);
  blessn.bezierCurveTo(90 * kayte, 42 * kayte, 98 * kayte, 36 * kayte, 109 * kayte, 43 * kayte);
  blessn.bezierCurveTo(119 * kayte, 47 * kayte, 128 * kayte, 62 * kayte, 107 * kayte, 72 * kayte);
  blessn.bezierCurveTo(96 * kayte, 78.5 * kayte, 96 * kayte, 78.5 * kayte, 85 * kayte, 85 * kayte);
  blessn.closePath();
  fill_path(blessn, elanore[3], elanore[4], 6 * kayte);
  blessn.beginPath();
  blessn.lineCap = "round";
  blessn.lineJoin = "round";
  blessn.moveTo(84 * kayte, 78 * kayte);
  blessn.bezierCurveTo(113 * kayte, 82 * kayte, 123 * kayte, 97 * kayte, 115 * kayte, 108 * kayte);
  blessn.bezierCurveTo(110 * kayte, 119 * kayte, 98 * kayte, 124 * kayte, 87 * kayte, 107 * kayte);
  blessn.bezierCurveTo(81.5 * kayte, 94.5 * kayte, 81.5 * kayte, 94.5 * kayte, 76 * kayte, 82 * kayte);
  blessn.closePath();
  fill_path(blessn, elanore[3], elanore[4], 6 * kayte);
  blessn.beginPath();
  blessn.lineCap = "round";
  blessn.lineJoin = "round";
  blessn.moveTo(80 * kayte, 73 * kayte);
  blessn.bezierCurveTo(64 * kayte, 37 * kayte, 55 * kayte, 34 * kayte, 45 * kayte, 42 * kayte);
  blessn.bezierCurveTo(30 * kayte, 54 * kayte, 36 * kayte, 65 * kayte, 51 * kayte, 72 * kayte);
  blessn.bezierCurveTo(62.5 * kayte, 77 * kayte, 62.5 * kayte, 77 * kayte, 74 * kayte, 82 * kayte);
  blessn.closePath();
  fill_path(blessn, elanore[3], elanore[4], 6 * kayte);
  blessn.beginPath();
  blessn.lineCap = "round";
  blessn.lineJoin = "round";
  blessn.moveTo(82 * kayte, 83 * kayte);
  blessn.bezierCurveTo(73 * kayte, 107 * kayte, 60 * kayte, 123 * kayte, 47 * kayte, 113 * kayte);
  blessn.bezierCurveTo(33 * kayte, 105 * kayte, 33 * kayte, 92 * kayte, 52 * kayte, 85 * kayte);
  blessn.bezierCurveTo(74 * kayte, 73 * kayte, 77 * kayte, 76 * kayte, 76 * kayte, 75 * kayte);
  blessn.closePath();
  fill_path(blessn, elanore[3], elanore[4], 6 * kayte);
  blessn.globalAlpha = marianthi ? .5 : 1;
  blessn.translate(0, 10 * kayte);
  blessn.save();
  blessn.translate(78.5 * kayte, 78 * kayte);
  round_rect(blessn, -13.5 * kayte, -14 * kayte, 27 * kayte, 27 * kayte, 6 * kayte);
  blessn.restore();
  fill_path(blessn, elanore[0]);
  blessn.globalAlpha = 1;
  blessn.translate(0, -10 * kayte);
  blessn.save();
  blessn.translate(78.5 * kayte, 78 * kayte);
  round_rect(blessn, -13.5 * kayte, -14 * kayte, 27 * kayte, 27 * kayte, 6 * kayte);
  blessn.restore();
  fill_path(blessn, elanore[3], elanore[4], 6 * kayte);
  return daqwon;
}
function create_crown_life(dwala, yuji, zykee) {
  var takeara = document.createElement("canvas");
  var sharwin = takeara.getContext("2d");
  takeara.width = 372 * dwala;
  takeara.height = 358 * dwala;
  sharwin.translate(0 * dwala, 10 * dwala);
  sharwin.globalAlpha = yuji ? .2 : 1;
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(247.00003051757812 * dwala, 115.76704406738281 * dwala);
  sharwin.bezierCurveTo(305.0000305175781 * dwala, 124.76704406738281 * dwala, 335.0000305175781 * dwala, 112.76704406738281 * dwala, 359.0000305175781 * dwala, 93.76704406738281 * dwala);
  sharwin.bezierCurveTo(359.5000305175781 * dwala, 113.26704406738281 * dwala, 359.5000305175781 * dwala, 113.26704406738281 * dwala, 360.0000305175781 * dwala, 132.7670440673828 * dwala);
  sharwin.bezierCurveTo(339.0000305175781 * dwala, 177.7670440673828 * dwala, 281.0000305175781 * dwala, 178.7670440673828 * dwala, 243.00003051757812 * dwala, 183.7670440673828 * dwala);
  sharwin.bezierCurveTo(214.50003051757812 * dwala, 214.2670440673828 * dwala, 214.50003051757812 * dwala, 214.2670440673828 * dwala, 186.00003051757812 * dwala, 244.7670440673828 * dwala);
  sharwin.bezierCurveTo(155.00003051757812 * dwala, 214.2670440673828 * dwala, 155.00003051757812 * dwala, 214.2670440673828 * dwala, 124.00003051757812 * dwala, 183.7670440673828 * dwala);
  sharwin.bezierCurveTo(51.000030517578125 * dwala, 180.7670440673828 * dwala, 21.000030517578125 * dwala, 161.7670440673828 * dwala, 9.000030517578125 * dwala, 129.7670440673828 * dwala);
  sharwin.bezierCurveTo(8.500030517578125 * dwala, 110.76704406738281 * dwala, 8.500030517578125 * dwala, 110.76704406738281 * dwala, 8.000030517578125 * dwala, 91.76704406738281 * dwala);
  sharwin.bezierCurveTo(31.000030517578125 * dwala, 112.76704406738281 * dwala, 87.00003051757812 * dwala, 119.76704406738281 * dwala, 116.00003051757812 * dwala, 117.76704406738281 * dwala);
  sharwin.bezierCurveTo(175.00003051757812 * dwala, 18.767044067382812 * dwala, 170.00003051757812 * dwala, 23.767044067382812 * dwala, 181.00003051757812 * dwala, 14.767044067382812 * dwala);
  sharwin.bezierCurveTo(199.00003051757812 * dwala, 34.76704406738281 * dwala, 203.00003051757812 * dwala, 54.76704406738281 * dwala, 247.00003051757812 * dwala, 115.76704406738281 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[0], zykee[0], 10 * dwala);
  sharwin.translate(0 * dwala, -10 * dwala);
  sharwin.globalAlpha = 1;
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(107.00003051757812 * dwala, 54.13069152832031 * dwala);
  sharwin.bezierCurveTo(106.50003051757812 * dwala, 38.63069152832031 * dwala, 106.50003051757812 * dwala, 38.63069152832031 * dwala, 106.00003051757812 * dwala, 23.130691528320312 * dwala);
  sharwin.bezierCurveTo(121.50003051757812 * dwala, 38.13069152832031 * dwala, 121.50003051757812 * dwala, 38.13069152832031 * dwala, 137.00003051757812 * dwala, 53.13069152832031 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(233.00003051757812 * dwala, 53.6761474609375 * dwala);
  sharwin.bezierCurveTo(247.00003051757812 * dwala, 37.1761474609375 * dwala, 247.00003051757812 * dwala, 37.1761474609375 * dwala, 261.0000305175781 * dwala, 20.6761474609375 * dwala);
  sharwin.bezierCurveTo(261.0000305175781 * dwala, 36.1761474609375 * dwala, 261.0000305175781 * dwala, 36.1761474609375 * dwala, 261.0000305175781 * dwala, 51.6761474609375 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(293.0000305175781 * dwala, 54.403411865234375 * dwala);
  sharwin.bezierCurveTo(300.0000305175781 * dwala, 49.903411865234375 * dwala, 300.0000305175781 * dwala, 49.903411865234375 * dwala, 307.0000305175781 * dwala, 45.403411865234375 * dwala);
  sharwin.bezierCurveTo(307.0000305175781 * dwala, 49.903411865234375 * dwala, 307.0000305175781 * dwala, 49.903411865234375 * dwala, 307.0000305175781 * dwala, 54.403411865234375 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(77.00003051757812 * dwala, 54.403411865234375 * dwala);
  sharwin.bezierCurveTo(70.00003051757812 * dwala, 50.403411865234375 * dwala, 70.00003051757812 * dwala, 50.403411865234375 * dwala, 63.000030517578125 * dwala, 46.403411865234375 * dwala);
  sharwin.bezierCurveTo(62.500030517578125 * dwala, 50.903411865234375 * dwala, 62.500030517578125 * dwala, 50.903411865234375 * dwala, 62.000030517578125 * dwala, 55.403411865234375 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(58.000030517578125 * dwala, 122.3125 * dwala);
  sharwin.bezierCurveTo(59.500030517578125 * dwala, 97.3125 * dwala, 59.500030517578125 * dwala, 97.3125 * dwala, 61.000030517578125 * dwala, 72.3125 * dwala);
  sharwin.bezierCurveTo(91.00003051757812 * dwala, 89.3125 * dwala, 91.00003051757812 * dwala, 89.3125 * dwala, 121.00003051757812 * dwala, 106.3125 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[1], zykee[1], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(310.0000305175781 * dwala, 127.3125 * dwala);
  sharwin.bezierCurveTo(308.0000305175781 * dwala, 98.3125 * dwala, 308.0000305175781 * dwala, 98.3125 * dwala, 306.0000305175781 * dwala, 69.3125 * dwala);
  sharwin.bezierCurveTo(274.5000305175781 * dwala, 88.8125 * dwala, 274.5000305175781 * dwala, 88.8125 * dwala, 243.00003051757812 * dwala, 108.3125 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[1], zykee[1], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(226.00003051757812 * dwala, 87.85795593261719 * dwala);
  sharwin.bezierCurveTo(243.50003051757812 * dwala, 66.85795593261719 * dwala, 243.50003051757812 * dwala, 66.85795593261719 * dwala, 261.0000305175781 * dwala, 45.85795593261719 * dwala);
  sharwin.bezierCurveTo(265.0000305175781 * dwala, 83.85795593261719 * dwala, 265.0000305175781 * dwala, 83.85795593261719 * dwala, 269.0000305175781 * dwala, 121.85795593261719 * dwala);
  sharwin.bezierCurveTo(235.00003051757812 * dwala, 122.85795593261719 * dwala, 233.00003051757812 * dwala, 107.85795593261719 * dwala, 228.00003051757812 * dwala, 90.85795593261719 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(105.00003051757812 * dwala, 128.8579559326172 * dwala);
  sharwin.bezierCurveTo(104.50003051757812 * dwala, 87.85795593261719 * dwala, 104.50003051757812 * dwala, 87.85795593261719 * dwala, 104.00003051757812 * dwala, 46.85795593261719 * dwala);
  sharwin.bezierCurveTo(126.50003051757812 * dwala, 69.35795593261719 * dwala, 126.50003051757812 * dwala, 69.35795593261719 * dwala, 149.00003051757812 * dwala, 91.85795593261719 * dwala);
  sharwin.bezierCurveTo(130.00003051757812 * dwala, 123.85795593261719 * dwala, 123.00003051757812 * dwala, 132.8579559326172 * dwala, 107.00003051757812 * dwala, 130.8579559326172 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[1], zykee[1], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(59.000030517578125 * dwala, 121.85795593261719 * dwala);
  sharwin.bezierCurveTo(59.500030517578125 * dwala, 99.35795593261719 * dwala, 59.500030517578125 * dwala, 99.35795593261719 * dwala, 60.000030517578125 * dwala, 76.85795593261719 * dwala);
  sharwin.bezierCurveTo(84.00003051757812 * dwala, 92.35795593261719 * dwala, 84.00003051757812 * dwala, 92.35795593261719 * dwala, 108.00003051757812 * dwala, 107.85795593261719 * dwala);
  sharwin.bezierCurveTo(106.00003051757812 * dwala, 148.8579559326172 * dwala, 86.00003051757812 * dwala, 148.8579559326172 * dwala, 62.000030517578125 * dwala, 123.85795593261719 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(105.00003051757812 * dwala, 132.8579559326172 * dwala);
  sharwin.bezierCurveTo(104.50003051757812 * dwala, 93.35795593261719 * dwala, 104.50003051757812 * dwala, 93.35795593261719 * dwala, 104.00003051757812 * dwala, 53.85795593261719 * dwala);
  sharwin.bezierCurveTo(126.50003051757812 * dwala, 75.85795593261719 * dwala, 126.50003051757812 * dwala, 75.85795593261719 * dwala, 149.00003051757812 * dwala, 97.85795593261719 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(311.0000305175781 * dwala, 126.85795593261719 * dwala);
  sharwin.bezierCurveTo(309.0000305175781 * dwala, 101.35795593261719 * dwala, 309.0000305175781 * dwala, 101.35795593261719 * dwala, 307.0000305175781 * dwala, 75.85795593261719 * dwala);
  sharwin.bezierCurveTo(271.0000305175781 * dwala, 96.85795593261719 * dwala, 271.0000305175781 * dwala, 96.85795593261719 * dwala, 235.00003051757812 * dwala, 117.85795593261719 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(228.00003051757812 * dwala, 96.85795593261719 * dwala);
  sharwin.bezierCurveTo(244.50003051757812 * dwala, 74.85795593261719 * dwala, 244.50003051757812 * dwala, 74.85795593261719 * dwala, 261.0000305175781 * dwala, 52.85795593261719 * dwala);
  sharwin.bezierCurveTo(265.5000305175781 * dwala, 89.85795593261719 * dwala, 265.5000305175781 * dwala, 89.85795593261719 * dwala, 270.0000305175781 * dwala, 126.85795593261719 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(12.000030517578125 * dwala, 86.13069152832031 * dwala);
  sharwin.bezierCurveTo(36.000030517578125 * dwala, 113.13069152832031 * dwala, 84.00003051757812 * dwala, 111.13069152832031 * dwala, 116.00003051757812 * dwala, 113.13069152832031 * dwala);
  sharwin.bezierCurveTo(164.00003051757812 * dwala, 23.130691528320312 * dwala, 172.00003051757812 * dwala, 18.130691528320312 * dwala, 181.00003051757812 * dwala, 9.130691528320312 * dwala);
  sharwin.bezierCurveTo(199.00003051757812 * dwala, 29.130691528320312 * dwala, 221.00003051757812 * dwala, 78.13069152832031 * dwala, 247.00003051757812 * dwala, 112.13069152832031 * dwala);
  sharwin.bezierCurveTo(301.0000305175781 * dwala, 122.13069152832031 * dwala, 338.0000305175781 * dwala, 111.13069152832031 * dwala, 359.0000305175781 * dwala, 94.13069152832031 * dwala);
  sharwin.bezierCurveTo(359.0000305175781 * dwala, 113.13069152832031 * dwala, 358.5000305175781 * dwala, 105.13069152832031 * dwala, 358.0000305175781 * dwala, 116.13069152832031 * dwala);
  sharwin.bezierCurveTo(270.5000305175781 * dwala, 130.1306915283203 * dwala, 270.5000305175781 * dwala, 130.1306915283203 * dwala, 183.00003051757812 * dwala, 144.1306915283203 * dwala);
  sharwin.bezierCurveTo(98.00003051757812 * dwala, 128.6306915283203 * dwala, 98.00003051757812 * dwala, 128.6306915283203 * dwala, 13.000030517578125 * dwala, 113.13069152832031 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[1], zykee[1], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(247.00003051757812 * dwala, 115.76704406738281 * dwala);
  sharwin.bezierCurveTo(305.0000305175781 * dwala, 124.76704406738281 * dwala, 335.0000305175781 * dwala, 112.76704406738281 * dwala, 359.0000305175781 * dwala, 93.76704406738281 * dwala);
  sharwin.bezierCurveTo(359.5000305175781 * dwala, 113.26704406738281 * dwala, 359.5000305175781 * dwala, 113.26704406738281 * dwala, 360.0000305175781 * dwala, 132.7670440673828 * dwala);
  sharwin.bezierCurveTo(339.0000305175781 * dwala, 177.7670440673828 * dwala, 281.0000305175781 * dwala, 178.7670440673828 * dwala, 243.00003051757812 * dwala, 183.7670440673828 * dwala);
  sharwin.bezierCurveTo(214.50003051757812 * dwala, 214.2670440673828 * dwala, 214.50003051757812 * dwala, 214.2670440673828 * dwala, 186.00003051757812 * dwala, 244.7670440673828 * dwala);
  sharwin.bezierCurveTo(155.00003051757812 * dwala, 214.2670440673828 * dwala, 155.00003051757812 * dwala, 214.2670440673828 * dwala, 124.00003051757812 * dwala, 183.7670440673828 * dwala);
  sharwin.bezierCurveTo(51.000030517578125 * dwala, 180.7670440673828 * dwala, 21.000030517578125 * dwala, 161.7670440673828 * dwala, 9.000030517578125 * dwala, 129.7670440673828 * dwala);
  sharwin.bezierCurveTo(8.500030517578125 * dwala, 110.76704406738281 * dwala, 8.500030517578125 * dwala, 110.76704406738281 * dwala, 8.000030517578125 * dwala, 91.76704406738281 * dwala);
  sharwin.bezierCurveTo(31.000030517578125 * dwala, 112.76704406738281 * dwala, 87.00003051757812 * dwala, 119.76704406738281 * dwala, 116.00003051757812 * dwala, 117.76704406738281 * dwala);
  sharwin.bezierCurveTo(175.00003051757812 * dwala, 18.767044067382812 * dwala, 170.00003051757812 * dwala, 23.767044067382812 * dwala, 181.00003051757812 * dwala, 14.767044067382812 * dwala);
  sharwin.bezierCurveTo(199.00003051757812 * dwala, 34.76704406738281 * dwala, 203.00003051757812 * dwala, 54.76704406738281 * dwala, 247.00003051757812 * dwala, 115.76704406738281 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(27.000030517578125 * dwala, 94.76704406738281 * dwala);
  sharwin.bezierCurveTo(11.000030517578125 * dwala, 81.76704406738281 * dwala, 31.000030517578125 * dwala, 72.76704406738281 * dwala, 44.000030517578125 * dwala, 59.76704406738281 * dwala);
  sharwin.bezierCurveTo(9.000030517578125 * dwala, 65.76704406738281 * dwala, 4.000030517578125 * dwala, 78.76704406738281 * dwala, 9.000030517578125 * dwala, 89.76704406738281 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(352.0000305175781 * dwala, 100.76705932617188 * dwala);
  sharwin.bezierCurveTo(362.0000305175781 * dwala, 92.76705932617188 * dwala, 352.0000305175781 * dwala, 84.76705932617188 * dwala, 340.0000305175781 * dwala, 68.76705932617188 * dwala);
  sharwin.bezierCurveTo(360.0000305175781 * dwala, 69.76705932617188 * dwala, 364.0000305175781 * dwala, 79.76705932617188 * dwala, 364.0000305175781 * dwala, 94.76705932617188 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[1], zykee[1], 1 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(25.000030517578125 * dwala, 97.94886779785156 * dwala);
  sharwin.bezierCurveTo(2.000030517578125 * dwala, 76.94886779785156 * dwala, 29.000030517578125 * dwala, 62.94886779785156 * dwala, 44.000030517578125 * dwala, 59.94886779785156 * dwala);
  sharwin.bezierCurveTo(8.000030517578125 * dwala, 59.94886779785156 * dwala, -0.999969482421875 * dwala, 81.94886779785156 * dwala, 4.000030517578125 * dwala, 92.94886779785156 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[3]);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(349.0000305175781 * dwala, 100.94886779785156 * dwala);
  sharwin.bezierCurveTo(366.0000305175781 * dwala, 82.94886779785156 * dwala, 353.0000305175781 * dwala, 76.94886779785156 * dwala, 337.0000305175781 * dwala, 67.94886779785156 * dwala);
  sharwin.bezierCurveTo(366.0000305175781 * dwala, 69.94886779785156 * dwala, 366.0000305175781 * dwala, 83.94886779785156 * dwala, 363.0000305175781 * dwala, 101.94886779785156 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[2], zykee[3], 10 * dwala);
  circle(sharwin, 46.000030517578125 * dwala, 137.5852279663086 * dwala, 9.219544457292887 * dwala);
  fill_path(sharwin, zykee[4], zykee[5], 1 * dwala);
  circle(sharwin, 308.0000305175781 * dwala, 141.5852279663086 * dwala, 8.54400374531753 * dwala);
  fill_path(sharwin, zykee[4], zykee[5], 1 * dwala);
  circle(sharwin, 92.00003051757812 * dwala, 149.58523559570312 * dwala, 14.866068747318506 * dwala);
  fill_path(sharwin, zykee[4], zykee[5], 1 * dwala);
  circle(sharwin, 262.0000305175781 * dwala, 148.8579559326172 * dwala, 15.620499351813308 * dwala);
  fill_path(sharwin, zykee[4], zykee[5], 1 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(184.00003051757812 * dwala, 68.85795593261719 * dwala);
  sharwin.bezierCurveTo(203.00003051757812 * dwala, 108.85795593261719 * dwala, 203.00003051757812 * dwala, 108.85795593261719 * dwala, 222.00003051757812 * dwala, 148.8579559326172 * dwala);
  sharwin.bezierCurveTo(202.50003051757812 * dwala, 177.8579559326172 * dwala, 202.50003051757812 * dwala, 177.8579559326172 * dwala, 183.00003051757812 * dwala, 206.8579559326172 * dwala);
  sharwin.bezierCurveTo(162.00003051757812 * dwala, 178.8579559326172 * dwala, 162.00003051757812 * dwala, 178.8579559326172 * dwala, 141.00003051757812 * dwala, 150.8579559326172 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[4], zykee[5], 10 * dwala);
  sharwin.beginPath();
  sharwin.lineCap = "round";
  sharwin.lineJoin = "round";
  sharwin.moveTo(183.00003051757812 * dwala, 104.94886779785156 * dwala);
  sharwin.bezierCurveTo(192.50003051757812 * dwala, 125.44886779785156 * dwala, 192.50003051757812 * dwala, 125.44886779785156 * dwala, 202.00003051757812 * dwala, 145.94886779785156 * dwala);
  sharwin.bezierCurveTo(192.00003051757812 * dwala, 163.94886779785156 * dwala, 192.00003051757812 * dwala, 163.94886779785156 * dwala, 182.00003051757812 * dwala, 181.94886779785156 * dwala);
  sharwin.bezierCurveTo(172.50003051757812 * dwala, 164.44886779785156 * dwala, 172.50003051757812 * dwala, 164.44886779785156 * dwala, 163.00003051757812 * dwala, 146.94886779785156 * dwala);
  sharwin.closePath();
  fill_path(sharwin, zykee[6]);
  return takeara;
}
function create_background_market() {
  var harloe = document.createElement("canvas");
  var makynleigh = harloe.getContext("2d");
  harloe.width = 460;
  harloe.height = 220;
  makynleigh.fillStyle = "#3a2a0d";
  makynleigh.fillRect(0, 0, harloe.width, harloe.height);
  makynleigh.lineWidth = 4;
  makynleigh.beginPath();
  makynleigh.strokeStyle = "#513810";
  for (var eleftheria = 20; eleftheria < 220; eleftheria += 20) {
    makynleigh.moveTo(0, eleftheria);
    makynleigh.lineTo(460, eleftheria);
    makynleigh.closePath();
    makynleigh.stroke();
  }
  return harloe;
}
function create_gauges(jimie) {
  var berj = document.createElement("canvas");
  var ridham = berj.getContext("2d");
  var emarri = 950 * jimie;
  var morene = 180 * jimie;
  var samarah = 50 * jimie;
  var stefanos = 20 * jimie;
  var rayyan = 240 * jimie;
  var tasharra = 35 * jimie;
  var amdrew = 1 * jimie;
  var gwili = 4 * jimie;
  var gianmarcos = 4 * jimie;
  berj.width = emarri;
  berj.height = samarah;
  ridham.translate(0, 15 * jimie);
  round_rect(ridham, tasharra, amdrew, morene, stefanos, gwili);
  fill_path(ridham, null, "#69A148", gianmarcos);
  var kava = sprite[SPRITE.HEART_SYMBOL_HUD];
  ridham.drawImage(kava, 17, -8);
  ridham.translate(rayyan, 0);
  round_rect(ridham, tasharra, amdrew, morene, stefanos, gwili);
  fill_path(ridham, null, "#AF352A", gianmarcos);
  var kava = sprite[SPRITE.FOOD_SYMBOL_HUD];
  ridham.drawImage(kava, 17, -9);
  ridham.translate(rayyan, 0);
  round_rect(ridham, tasharra, amdrew, morene, stefanos, gwili);
  fill_path(ridham, null, "#669BB1", gianmarcos);
  var kava = sprite[SPRITE.COLD_SYMBOL_HUD];
  ridham.drawImage(kava, 17, -8);
  ridham.translate(rayyan, 0);
  round_rect(ridham, tasharra, amdrew, morene, stefanos, gwili);
  fill_path(ridham, null, "#074A87", gianmarcos);
  var kava = sprite[SPRITE.WATER_SYMBOL_HUD];
  ridham.drawImage(kava, 17, -8);
  return berj;
}
function _load_images() {
  var bahe = (new Date).getTime();
  render_cosmetics();
  function tacora(devontrey) {
    var minton = 0;
    for (var pegan = 0, toral = 0; pegan < devontrey.length; pegan++) {
      var bolton = devontrey.charAt(pegan);
      if (bolton === "_" || pegan === 5) {
        continue;
      }
      if (bolton === "1") {
        minton += Math.pow(2, toral);
      }
      toral++;
    }
    return minton;
  }
  sprite[SPRITE.REIDITE_SPIKE] = [];
  sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_SPIKED;
  sprite[SPRITE.RIVER_DECO] = [];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY] = [];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_010_000")] = [IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_011_010")] = [IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_011_011")] = [IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO8, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_111_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_111_111")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO13];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_010_000")] = [IMAGES.DAY_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_010_010")] = [IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_011_000")] = [IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_011_000")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_011_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_011_011")] = [IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO15];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_011_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_111_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("011_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_110_000")] = [IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_111_000")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_111_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("111_111_110")] = [IMAGES.DAY_RIVER_COMPO28, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("111_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("111_111_000")] = [IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO14];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("111_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][tacora("111_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT] = [];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_010_000")] = [IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_011_010")] = [IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_011_011")] = [IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO8, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_111_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_111_111")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO13];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_010_000")] = [IMAGES.NIGHT_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_010_010")] = [IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_011_000")] = [IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_011_000")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_011_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_011_011")] = [IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO15];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_011_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_111_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("011_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_110_000")] = [IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_111_000")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_111_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("111_111_110")] = [IMAGES.NIGHT_RIVER_COMPO28, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("111_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("111_111_000")] = [IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO14];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("111_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][tacora("111_111_110")];
  sprite[SPRITE.RIVER] = [];
  sprite[SPRITE.RIVER][SPRITE.DAY] = [];
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_010_000")] = IMAGES.DAY_RIVER_000_010_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_010_010")] = IMAGES.DAY_RIVER_000_010_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_011_000")] = IMAGES.DAY_RIVER_000_011_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_011_010")] = IMAGES.DAY_RIVER_000_011_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_011_011")] = IMAGES.DAY_RIVER_000_011_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_110_000")] = IMAGES.DAY_RIVER_000_110_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_110_010")] = IMAGES.DAY_RIVER_000_110_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_110_110")] = IMAGES.DAY_RIVER_000_110_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_111_000")] = IMAGES.DAY_RIVER_000_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_111_010")] = IMAGES.DAY_RIVER_000_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_111_011")] = IMAGES.DAY_RIVER_000_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_111_110")] = IMAGES.DAY_RIVER_000_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("000_111_111")] = IMAGES.DAY_RIVER_000_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_010_000")] = IMAGES.DAY_RIVER_010_010_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_010_010")] = IMAGES.DAY_RIVER_010_010_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_011_000")] = IMAGES.DAY_RIVER_010_011_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_011_010")] = IMAGES.DAY_RIVER_010_011_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_011_011")] = IMAGES.DAY_RIVER_010_011_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_110_000")] = IMAGES.DAY_RIVER_010_110_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_110_010")] = IMAGES.DAY_RIVER_010_110_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_110_110")] = IMAGES.DAY_RIVER_010_110_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_111_000")] = IMAGES.DAY_RIVER_010_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_111_010")] = IMAGES.DAY_RIVER_010_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_111_011")] = IMAGES.DAY_RIVER_010_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_111_110")] = IMAGES.DAY_RIVER_010_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("010_111_111")] = IMAGES.DAY_RIVER_010_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("011_011_000")] = IMAGES.DAY_RIVER_011_011_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("011_011_010")] = IMAGES.DAY_RIVER_011_011_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("011_011_011")] = IMAGES.DAY_RIVER_011_011_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("011_111_000")] = IMAGES.DAY_RIVER_011_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("011_111_010")] = IMAGES.DAY_RIVER_011_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("011_111_011")] = IMAGES.DAY_RIVER_011_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("011_111_110")] = IMAGES.DAY_RIVER_011_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("011_111_111")] = IMAGES.DAY_RIVER_011_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("110_110_000")] = IMAGES.DAY_RIVER_110_110_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("110_110_010")] = IMAGES.DAY_RIVER_110_110_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("110_110_110")] = IMAGES.DAY_RIVER_110_110_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("110_111_000")] = IMAGES.DAY_RIVER_110_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("110_111_010")] = IMAGES.DAY_RIVER_110_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("110_111_011")] = IMAGES.DAY_RIVER_110_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("110_111_110")] = IMAGES.DAY_RIVER_110_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("110_111_111")] = IMAGES.DAY_RIVER_110_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("111_111_110")] = IMAGES.DAY_RIVER_111_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("111_111_000")] = IMAGES.DAY_RIVER_111_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("111_111_111")] = IMAGES.DAY_RIVER_111_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][tacora("111_111_010")] = IMAGES.DAY_RIVER_111_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT] = [];
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_010_000")] = IMAGES.NIGHT_RIVER_000_010_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_010_010")] = IMAGES.NIGHT_RIVER_000_010_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_011_000")] = IMAGES.NIGHT_RIVER_000_011_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_011_010")] = IMAGES.NIGHT_RIVER_000_011_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_011_011")] = IMAGES.NIGHT_RIVER_000_011_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_110_000")] = IMAGES.NIGHT_RIVER_000_110_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_110_010")] = IMAGES.NIGHT_RIVER_000_110_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_110_110")] = IMAGES.NIGHT_RIVER_000_110_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_111_000")] = IMAGES.NIGHT_RIVER_000_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_111_010")] = IMAGES.NIGHT_RIVER_000_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_111_011")] = IMAGES.NIGHT_RIVER_000_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_111_110")] = IMAGES.NIGHT_RIVER_000_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("000_111_111")] = IMAGES.NIGHT_RIVER_000_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_010_000")] = IMAGES.NIGHT_RIVER_010_010_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_010_010")] = IMAGES.NIGHT_RIVER_010_010_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_011_000")] = IMAGES.NIGHT_RIVER_010_011_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_011_010")] = IMAGES.NIGHT_RIVER_010_011_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_011_011")] = IMAGES.NIGHT_RIVER_010_011_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_110_000")] = IMAGES.NIGHT_RIVER_010_110_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_110_010")] = IMAGES.NIGHT_RIVER_010_110_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_110_110")] = IMAGES.NIGHT_RIVER_010_110_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_111_000")] = IMAGES.NIGHT_RIVER_010_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_111_010")] = IMAGES.NIGHT_RIVER_010_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_111_011")] = IMAGES.NIGHT_RIVER_010_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_111_110")] = IMAGES.NIGHT_RIVER_010_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("010_111_111")] = IMAGES.NIGHT_RIVER_010_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("011_011_000")] = IMAGES.NIGHT_RIVER_011_011_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("011_011_010")] = IMAGES.NIGHT_RIVER_011_011_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("011_011_011")] = IMAGES.NIGHT_RIVER_011_011_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("011_111_000")] = IMAGES.NIGHT_RIVER_011_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("011_111_010")] = IMAGES.NIGHT_RIVER_011_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("011_111_011")] = IMAGES.NIGHT_RIVER_011_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("011_111_110")] = IMAGES.NIGHT_RIVER_011_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("011_111_111")] = IMAGES.NIGHT_RIVER_011_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("110_110_000")] = IMAGES.NIGHT_RIVER_110_110_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("110_110_010")] = IMAGES.NIGHT_RIVER_110_110_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("110_110_110")] = IMAGES.NIGHT_RIVER_110_110_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("110_111_000")] = IMAGES.NIGHT_RIVER_110_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("110_111_010")] = IMAGES.NIGHT_RIVER_110_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("110_111_011")] = IMAGES.NIGHT_RIVER_110_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("110_111_110")] = IMAGES.NIGHT_RIVER_110_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("110_111_111")] = IMAGES.NIGHT_RIVER_110_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("111_111_110")] = IMAGES.NIGHT_RIVER_111_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("111_111_000")] = IMAGES.NIGHT_RIVER_111_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("111_111_111")] = IMAGES.NIGHT_RIVER_111_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][tacora("111_111_010")] = IMAGES.NIGHT_RIVER_111_111_010;
  sprite[SPRITE.PICK_REIDITE] = [];
  sprite[SPRITE.PICK_REIDITE][SPRITE.DAY] = IMAGES.PICK_REIDITED;
  sprite[SPRITE.PICK_REIDITE][SPRITE.NIGHT] = IMAGES.PICK_REIDITEN;
  sprite[SPRITE.CARROT] = [];
  sprite[SPRITE.CARROT][SPRITE.DAY] = IMAGES.CARROTD;
  sprite[SPRITE.CARROT][SPRITE.NIGHT] = IMAGES.CARROTN;
  sprite[SPRITE.TOMATO_MINI] = [];
  sprite[SPRITE.TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINID;
  sprite[SPRITE.TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MININ;
  sprite[SPRITE.TOMATO] = [];
  sprite[SPRITE.TOMATO][SPRITE.DAY] = IMAGES.TOMATOD;
  sprite[SPRITE.TOMATO][SPRITE.NIGHT] = IMAGES.TOMATON;
  sprite[SPRITE.DRIED_CARROT] = [];
  sprite[SPRITE.DRIED_CARROT][SPRITE.DAY] = IMAGES.CARROT_DRIEDD;
  sprite[SPRITE.DRIED_CARROT][SPRITE.NIGHT] = IMAGES.CARROT_DRIEDN;
  sprite[SPRITE.DRIED_TOMATO_MINI] = [];
  sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINI_DRIEDD;
  sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN;
  sprite[SPRITE.WATERMELON] = [];
  sprite[SPRITE.WATERMELON][SPRITE.DAY] = IMAGES.WATERMELOND;
  sprite[SPRITE.WATERMELON][SPRITE.NIGHT] = IMAGES.WATERMELONN;
  sprite[SPRITE.DRIED_WATERMELON] = [];
  sprite[SPRITE.DRIED_WATERMELON][SPRITE.DAY] = IMAGES.DRIED_WATERMELOND;
  sprite[SPRITE.DRIED_WATERMELON][SPRITE.NIGHT] = IMAGES.DRIED_WATERMELONN;
  sprite[SPRITE.ALOE_VERA_GROWN] = [];
  sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.DAY] = IMAGES.ALOE_VERA_GROWND;
  sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.NIGHT] = IMAGES.ALOE_VERA_GROWNN;
  sprite[SPRITE.DRIED_ALOE_VERA] = [];
  sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERA_DRIEDD;
  sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN;
  sprite[SPRITE.CACTUS] = [];
  sprite[SPRITE.CACTUS][SPRITE.DAY] = [IMAGES.CACTUSD];
  sprite[SPRITE.CACTUS][SPRITE.NIGHT] = [IMAGES.CACTUSN];
  sprite[SPRITE.REIDITE_WALL] = [], sprite[SPRITE.REIDITE_WALL][SPRITE.DAY] = IMAGES.REIDITE_WALLD;
  sprite[SPRITE.REIDITE_WALL][SPRITE.NIGHT] = IMAGES.REIDITE_WALLN;
  sprite[SPRITE.REIDITE_SPIKE] = [], sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_SPIKED;
  sprite[SPRITE.REIDITE_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_SPIKEN;
  sprite[SPRITE.REIDITE_DOOR] = [];
  sprite[SPRITE.REIDITE_DOOR][SPRITE.DAY] = IMAGES.REIDITE_DOORD;
  sprite[SPRITE.REIDITE_DOOR][SPRITE.NIGHT] = IMAGES.REIDITE_DOORN;
  sprite[SPRITE.WOOD_DOOR_SPIKE] = [];
  sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.WOOD_DOOR_SPIKED;
  sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN;
  sprite[SPRITE.STONE_DOOR_SPIKE] = [];
  sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.STONE_DOOR_SPIKED;
  sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.STONE_DOOR_SPIKEN;
  sprite[SPRITE.GOLD_DOOR_SPIKE] = [];
  sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.GOLD_DOOR_SPIKED;
  sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN;
  sprite[SPRITE.DIAMOND_DOOR_SPIKE] = [];
  sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.DAY] = IMAGES.DIAMOND_DOOR_SPIKED;
  sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN;
  sprite[SPRITE.AMETHYST_DOOR_SPIKE] = [];
  sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.DAY] = IMAGES.AMETHYST_DOOR_SPIKED;
  sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.AMETHYST_DOOR_SPIKEN;
  sprite[SPRITE.REIDITE_DOOR_SPIKE] = [];
  sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_DOOR_SPIKED;
  sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN;
  sprite[SPRITE.GOLDEN_HEN] = [];
  sprite[SPRITE.GOLDEN_HEN][SPRITE.DAY] = IMAGES.HEND;
  sprite[SPRITE.GOLDEN_HEN][SPRITE.NIGHT] = IMAGES.HENN;
  sprite[SPRITE.GOLDEN_CHICKEN] = [];
  sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.DAY] = IMAGES.CHICKEND;
  sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.NIGHT] = IMAGES.CHICKENN;
  sprite[SPRITE.HAMMER_REIDITE] = [];
  sprite[SPRITE.HAMMER_REIDITE][SPRITE.DAY] = IMAGES.HAMMER_REIDITED;
  sprite[SPRITE.HAMMER_REIDITE][SPRITE.NIGHT] = IMAGES.HAMMER_REIDITEN;
  sprite[SPRITE.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN;
  sprite[SPRITE.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN;
  sprite[SPRITE.FOG] = [];
  sprite[SPRITE.FOG][SPRITE.DAY] = [];
  sprite[SPRITE.FOG][SPRITE.NIGHT] = [];
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG0D);
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG1D);
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG2D);
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG0N);
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG1N);
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG2N);
  sprite[SPRITE.FOD] = [];
  sprite[SPRITE.FOD][SPRITE.DAY] = [];
  sprite[SPRITE.FOD][SPRITE.NIGHT] = [];
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD0D);
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD1D);
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD2D);
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD0N);
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD1N);
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD2N);
  sprite[SPRITE.MARKER] = [];
  sprite[SPRITE.MARKER][SPRITE.DAY] = [];
  sprite[SPRITE.MARKER][SPRITE.NIGHT] = [];
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER0D);
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER1D);
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER2D);
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER3D);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER0N);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER1N);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER2N);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER3N);
  sprite[SPRITE.LAVA_DRAGON] = [];
  sprite[SPRITE.LAVA_DRAGON][SPRITE.DAY] = IMAGES.LAVA_DRAGOND;
  sprite[SPRITE.LAVA_DRAGON][SPRITE.NIGHT] = IMAGES.LAVA_DRAGONN;
  sprite[SPRITE.LAVA_WING_LEFT] = [];
  sprite[SPRITE.LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.LAVA_WING_LEFTD;
  sprite[SPRITE.LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.LAVA_WING_LEFTN;
  sprite[SPRITE.LAVA_WING_RIGHT] = [];
  sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.LAVA_WING_RIGHTD;
  sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.LAVA_WING_RIGHTN;
  sprite[SPRITE.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON;
  sprite[SPRITE.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT;
  sprite[SPRITE.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT;
  sprite[SPRITE.DIAMOND_PROTECTION] = [];
  sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.DIAMOND_PROTECTIOND;
  sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.DIAMOND_PROTECTIONN;
  sprite[SPRITE.GLOVES_DIAMOND_PROTECTION] = [];
  sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
  sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
  sprite[SPRITE.AMETHYST_PROTECTION] = [];
  sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.AMETHYST_PROTECTIOND;
  sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.AMETHYST_PROTECTIONN;
  sprite[SPRITE.GLOVES_AMETHYST_PROTECTION] = [];
  sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
  sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
  sprite[SPRITE.REIDITE_HELMET] = [];
  sprite[SPRITE.REIDITE_HELMET][SPRITE.DAY] = IMAGES.REIDITE_HELMETD;
  sprite[SPRITE.REIDITE_HELMET][SPRITE.NIGHT] = IMAGES.REIDITE_HELMETN;
  sprite[SPRITE.REIDITE_SWORD] = [];
  sprite[SPRITE.REIDITE_SWORD][SPRITE.DAY] = IMAGES.REIDITE_SWORDD;
  sprite[SPRITE.REIDITE_SWORD][SPRITE.NIGHT] = IMAGES.REIDITE_SWORDN;
  sprite[SPRITE.REIDITE_SPEAR] = [];
  sprite[SPRITE.REIDITE_SPEAR][SPRITE.DAY] = IMAGES.REIDITE_SPEARD;
  sprite[SPRITE.REIDITE_SPEAR][SPRITE.NIGHT] = IMAGES.REIDITE_SPEARN;
  sprite[SPRITE.LAVA_SPEAR] = [];
  sprite[SPRITE.LAVA_SPEAR][SPRITE.DAY] = IMAGES.LAVA_SPEARD;
  sprite[SPRITE.LAVA_SPEAR][SPRITE.NIGHT] = IMAGES.LAVA_SPEARN;
  sprite[SPRITE.LAVA_SWORD] = [];
  sprite[SPRITE.LAVA_SWORD][SPRITE.DAY] = IMAGES.LAVA_SWORDD;
  sprite[SPRITE.LAVA_SWORD][SPRITE.NIGHT] = IMAGES.LAVA_SWORDN;
  sprite[SPRITE.LAVA_HELMET] = [];
  sprite[SPRITE.LAVA_HELMET][SPRITE.DAY] = IMAGES.LAVA_HELMETD;
  sprite[SPRITE.LAVA_HELMET][SPRITE.NIGHT] = IMAGES.LAVA_HELMETN;
  sprite[SPRITE.WITCH] = [];
  sprite[SPRITE.WITCH][SPRITE.DAY] = IMAGES.WITCHD;
  sprite[SPRITE.WITCH][SPRITE.NIGHT] = IMAGES.WITCHN;
  sprite[SPRITE.NIMBUS] = [];
  sprite[SPRITE.NIMBUS][SPRITE.DAY] = IMAGES.NIMBUSD;
  sprite[SPRITE.NIMBUS][SPRITE.NIGHT] = IMAGES.NIMBUSN;
  sprite[SPRITE.WOOD_SHIELD] = [];
  sprite[SPRITE.WOOD_SHIELD][SPRITE.DAY] = IMAGES.WOOD_SHIELDD;
  sprite[SPRITE.WOOD_SHIELD][SPRITE.NIGHT] = IMAGES.WOOD_SHIELDN;
  sprite[SPRITE.STONE_SHIELD] = [];
  sprite[SPRITE.STONE_SHIELD][SPRITE.DAY] = IMAGES.STONE_SHIELDD;
  sprite[SPRITE.STONE_SHIELD][SPRITE.NIGHT] = IMAGES.STONE_SHIELDN;
  sprite[SPRITE.GOLD_SHIELD] = [];
  sprite[SPRITE.GOLD_SHIELD][SPRITE.DAY] = IMAGES.GOLD_SHIELDD;
  sprite[SPRITE.GOLD_SHIELD][SPRITE.NIGHT] = IMAGES.GOLD_SHIELDN;
  sprite[SPRITE.DIAMOND_SHIELD] = [];
  sprite[SPRITE.DIAMOND_SHIELD][SPRITE.DAY] = IMAGES.DIAMOND_SHIELDD;
  sprite[SPRITE.DIAMOND_SHIELD][SPRITE.NIGHT] = IMAGES.DIAMOND_SHIELDN;
  sprite[SPRITE.AMETHYST_SHIELD] = [];
  sprite[SPRITE.AMETHYST_SHIELD][SPRITE.DAY] = IMAGES.AMETHYST_SHIELDD;
  sprite[SPRITE.AMETHYST_SHIELD][SPRITE.NIGHT] = IMAGES.AMETHYST_SHIELDN;
  sprite[SPRITE.REIDITE_SHIELD] = [];
  sprite[SPRITE.REIDITE_SHIELD][SPRITE.DAY] = IMAGES.REIDITE_SHIELDD;
  sprite[SPRITE.REIDITE_SHIELD][SPRITE.NIGHT] = IMAGES.REIDITE_SHIELDN;
  sprite[SPRITE.WOOD_ARROW] = [];
  sprite[SPRITE.WOOD_ARROW][SPRITE.DAY] = IMAGES.WOOD_ARROWD;
  sprite[SPRITE.WOOD_ARROW][SPRITE.NIGHT] = IMAGES.WOOD_ARROWN;
  sprite[SPRITE.WOOD_BOW] = [];
  sprite[SPRITE.WOOD_BOW][SPRITE.DAY] = IMAGES.WOOD_BOWD;
  sprite[SPRITE.WOOD_BOW][SPRITE.NIGHT] = IMAGES.WOOD_BOWN;
  sprite[SPRITE.STONE_ARROW] = [];
  sprite[SPRITE.STONE_ARROW][SPRITE.DAY] = IMAGES.STONE_ARROWD;
  sprite[SPRITE.STONE_ARROW][SPRITE.NIGHT] = IMAGES.STONE_ARROWN;
  sprite[SPRITE.STONE_BOW] = [];
  sprite[SPRITE.STONE_BOW][SPRITE.DAY] = IMAGES.STONE_BOWD;
  sprite[SPRITE.STONE_BOW][SPRITE.NIGHT] = IMAGES.STONE_BOWN;
  sprite[SPRITE.GOLD_ARROW] = [];
  sprite[SPRITE.GOLD_ARROW][SPRITE.DAY] = IMAGES.GOLD_ARROWD;
  sprite[SPRITE.GOLD_ARROW][SPRITE.NIGHT] = IMAGES.GOLD_ARROWN;
  sprite[SPRITE.GOLD_BOW] = [];
  sprite[SPRITE.GOLD_BOW][SPRITE.DAY] = IMAGES.GOLD_BOWD;
  sprite[SPRITE.GOLD_BOW][SPRITE.NIGHT] = IMAGES.GOLD_BOWN;
  sprite[SPRITE.DIAMOND_ARROW] = [];
  sprite[SPRITE.DIAMOND_ARROW][SPRITE.DAY] = IMAGES.DIAMOND_ARROWD;
  sprite[SPRITE.DIAMOND_ARROW][SPRITE.NIGHT] = IMAGES.DIAMOND_ARROWN;
  sprite[SPRITE.DIAMOND_BOW] = [];
  sprite[SPRITE.DIAMOND_BOW][SPRITE.DAY] = IMAGES.DIAMOND_BOWD;
  sprite[SPRITE.DIAMOND_BOW][SPRITE.NIGHT] = IMAGES.DIAMOND_BOWN;
  sprite[SPRITE.AMETHYST_ARROW] = [];
  sprite[SPRITE.AMETHYST_ARROW][SPRITE.DAY] = IMAGES.AMETHYST_ARROWD;
  sprite[SPRITE.AMETHYST_ARROW][SPRITE.NIGHT] = IMAGES.AMETHYST_ARROWN;
  sprite[SPRITE.AMETHYST_BOW] = [];
  sprite[SPRITE.AMETHYST_BOW][SPRITE.DAY] = IMAGES.AMETHYST_BOWD;
  sprite[SPRITE.AMETHYST_BOW][SPRITE.NIGHT] = IMAGES.AMETHYST_BOWN;
  sprite[SPRITE.REIDITE_ARROW] = [];
  sprite[SPRITE.REIDITE_ARROW][SPRITE.DAY] = IMAGES.REIDITE_ARROWD;
  sprite[SPRITE.REIDITE_ARROW][SPRITE.NIGHT] = IMAGES.REIDITE_ARROWN;
  sprite[SPRITE.REIDITE_BOW] = [];
  sprite[SPRITE.REIDITE_BOW][SPRITE.DAY] = IMAGES.REIDITE_BOWD;
  sprite[SPRITE.REIDITE_BOW][SPRITE.NIGHT] = IMAGES.REIDITE_BOWN;
  sprite[SPRITE.DRAGON_ARROW] = [];
  sprite[SPRITE.DRAGON_ARROW][SPRITE.DAY] = IMAGES.DRAGON_ARROWD;
  sprite[SPRITE.DRAGON_ARROW][SPRITE.NIGHT] = IMAGES.DRAGON_ARROWN;
  sprite[SPRITE.DRAGON_BOW] = [];
  sprite[SPRITE.DRAGON_BOW][SPRITE.DAY] = IMAGES.DRAGON_BOWD;
  sprite[SPRITE.DRAGON_BOW][SPRITE.NIGHT] = IMAGES.DRAGON_BOWN;
  sprite[SPRITE.TURBAN1] = [];
  sprite[SPRITE.TURBAN1][SPRITE.DAY] = IMAGES.TURBAN1D;
  sprite[SPRITE.TURBAN1][SPRITE.NIGHT] = IMAGES.TURBAN1N;
  sprite[SPRITE.TURBAN2] = [];
  sprite[SPRITE.TURBAN2][SPRITE.DAY] = IMAGES.TURBAN2D;
  sprite[SPRITE.TURBAN2][SPRITE.NIGHT] = IMAGES.TURBAN2N;
  sprite[SPRITE.REIDITE_PROTECTION] = [];
  sprite[SPRITE.REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.REIDITE_PROTECTIOND;
  sprite[SPRITE.REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.REIDITE_PROTECTIONN;
  sprite[SPRITE.GLOVES_REIDITE_PROTECTION] = [];
  sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.HAND_REIDITE_PROTECTIOND;
  sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_REIDITE_PROTECTIONN;
  sprite[SPRITE.LAVA_SHINGLE] = [];
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY] = [];
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES0D);
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES1D);
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1D);
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1N);
  sprite[SPRITE.LAVA_BUBBLE] = [];
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY] = [];
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE0D);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE1D);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE2D);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE0N);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE1N);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE2N);
  sprite[SPRITE.PITCHFORK] = [];
  sprite[SPRITE.PITCHFORK][SPRITE.DAY] = IMAGES.PITCHFORKD;
  sprite[SPRITE.PITCHFORK][SPRITE.NIGHT] = IMAGES.PITCHFORKN;
  sprite[SPRITE.PITCHFORK2] = [];
  sprite[SPRITE.PITCHFORK2][SPRITE.DAY] = IMAGES.PITCHFORK2D;
  sprite[SPRITE.PITCHFORK2][SPRITE.NIGHT] = IMAGES.PITCHFORK2N;
  sprite[SPRITE.EMERALD] = [];
  sprite[SPRITE.EMERALD][SPRITE.DAY] = [];
  sprite[SPRITE.EMERALD][SPRITE.NIGHT] = [];
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD0D);
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD1D);
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD2D);
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD0N);
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD1N);
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD2N);
  sprite[SPRITE.REIDITE] = [];
  sprite[SPRITE.REIDITE][SPRITE.DAY] = [];
  sprite[SPRITE.REIDITE][SPRITE.NIGHT] = [];
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE0D);
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE1D);
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE2D);
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE0N);
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE1N);
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE2N);
  sprite[SPRITE.MAGMA] = [];
  sprite[SPRITE.MAGMA][SPRITE.DAY] = [];
  sprite[SPRITE.MAGMA][SPRITE.NIGHT] = [];
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA1D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA2D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA3D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA4D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA5D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA6D);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA1N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA2N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA3N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA4N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA5N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA6N);
  sprite[SPRITE.LAVA_GROUND] = [];
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY] = [];
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND1D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND2D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND3D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND4D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND5D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND6D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND1N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND2N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND3N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND4N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND5N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND6N);
  sprite[SPRITE.FIRE_MOB] = [];
  sprite[SPRITE.FIRE_MOB][SPRITE.DAY] = IMAGES.FIRE_MOBD;
  sprite[SPRITE.FIRE_MOB][SPRITE.NIGHT] = IMAGES.FIRE_MOBN;
  sprite[SPRITE.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT;
  sprite[SPRITE.MACHETE] = [];
  sprite[SPRITE.MACHETE][SPRITE.DAY] = IMAGES.MACHETED;
  sprite[SPRITE.MACHETE][SPRITE.NIGHT] = IMAGES.MACHETEN;
  sprite[SPRITE.BOAT] = [];
  sprite[SPRITE.BOAT][SPRITE.DAY] = IMAGES.BOATD;
  sprite[SPRITE.BOAT][SPRITE.NIGHT] = IMAGES.BOATN;
  sprite[SPRITE.SLED] = [];
  sprite[SPRITE.SLED][SPRITE.DAY] = IMAGES.SLEDD;
  sprite[SPRITE.SLED][SPRITE.NIGHT] = IMAGES.SLEDN;
  sprite[SPRITE.PLANE] = [];
  sprite[SPRITE.PLANE][SPRITE.DAY] = IMAGES.PLANED;
  sprite[SPRITE.PLANE][SPRITE.NIGHT] = IMAGES.PLANEN;
  sprite[SPRITE.PENGUIN] = [];
  sprite[SPRITE.PENGUIN][SPRITE.DAY] = IMAGES.PENGUIND;
  sprite[SPRITE.PENGUIN][SPRITE.NIGHT] = IMAGES.PENGUINN;
  sprite[SPRITE.HURT_PENGUIN] = IMAGES.HURT_PENGUIN;
  sprite[SPRITE.SAND_WORM1] = [];
  sprite[SPRITE.SAND_WORM1][SPRITE.DAY] = IMAGES.SAND_WORM1D;
  sprite[SPRITE.SAND_WORM1][SPRITE.NIGHT] = IMAGES.SAND_WORM1N;
  sprite[SPRITE.SAND_WORM2] = [];
  sprite[SPRITE.SAND_WORM2][SPRITE.DAY] = IMAGES.SAND_WORM2D;
  sprite[SPRITE.SAND_WORM2][SPRITE.NIGHT] = IMAGES.SAND_WORM2N;
  sprite[SPRITE.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0;
  sprite[SPRITE.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1;
  sprite[SPRITE.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2;
  sprite[SPRITE.SCORPION] = [];
  sprite[SPRITE.SCORPION][SPRITE.DAY] = IMAGES.SCORPIOND;
  sprite[SPRITE.SCORPION][SPRITE.NIGHT] = IMAGES.SCORPIONN;
  sprite[SPRITE.SCORPION_HAND_LEFT] = [];
  sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.DAY] = IMAGES.SCORPION_HAND_LEFTD;
  sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_LEFTN;
  sprite[SPRITE.SCORPION_HAND_RIGHT] = [];
  sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.DAY] = IMAGES.SCORPION_HAND_RIGHTD;
  sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_RIGHTN;
  sprite[SPRITE.HURT_SCORPION] = IMAGES.HURT_SCORPION;
  sprite[SPRITE.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT;
  sprite[SPRITE.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT;
  sprite[SPRITE.CRAB_BOSS_ATTACK] = [];
  sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_ATTACKD;
  sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN;
  sprite[SPRITE.CRAB_BOSS_TAMED] = [];
  sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.DAY] = IMAGES.CRAB_BOSS_TAMEDD;
  sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN;
  sprite[SPRITE.CRAB_BOSS] = [];
  sprite[SPRITE.CRAB_BOSS][SPRITE.DAY] = IMAGES.CRAB_BOSSD;
  sprite[SPRITE.CRAB_BOSS][SPRITE.NIGHT] = IMAGES.CRAB_BOSSN;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFTN;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHTD;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHTN;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN;
  sprite[SPRITE.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS;
  sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT;
  sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT;
  sprite[SPRITE.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS;
  sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT;
  sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT;
  sprite[SPRITE.BABY_MAMMOTH_ATTACK] = [];
  sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD;
  sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_ATTACKN;
  sprite[SPRITE.BABY_MAMMOTH] = [];
  sprite[SPRITE.BABY_MAMMOTH][SPRITE.DAY] = IMAGES.BABY_MAMMOTHD;
  sprite[SPRITE.BABY_MAMMOTH][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTHN;
  sprite[SPRITE.MAMMOTH] = [];
  sprite[SPRITE.MAMMOTH][SPRITE.DAY] = IMAGES.MAMMOTHD;
  sprite[SPRITE.MAMMOTH][SPRITE.NIGHT] = IMAGES.MAMMOTHN;
  sprite[SPRITE.BABY_MAMMOTH_TAMED] = [];
  sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD;
  sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN;
  sprite[SPRITE.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH;
  sprite[SPRITE.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH;
  sprite[SPRITE.BABY_DRAGON_ATTACK] = [];
  sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_ATTACKD;
  sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN;
  sprite[SPRITE.BABY_DRAGON] = [];
  sprite[SPRITE.BABY_DRAGON][SPRITE.DAY] = IMAGES.BABY_DRAGOND;
  sprite[SPRITE.BABY_DRAGON][SPRITE.NIGHT] = IMAGES.BABY_DRAGONN;
  sprite[SPRITE.BABY_DRAGON_TAMED] = [];
  sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_TAMEDD;
  sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT] = [];
  sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFTD;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFTN;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT] = [];
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHTD;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHTN;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED] = [];
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON;
  sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT;
  sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT] = IMAGES.HURT_BABY_DRAGON_WING_RIGHT;
  sprite[SPRITE.BABY_LAVA_ATTACK] = [];
  sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_ATTACKD;
  sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_ATTACKN;
  sprite[SPRITE.BABY_LAVA] = [];
  sprite[SPRITE.BABY_LAVA][SPRITE.DAY] = IMAGES.BABY_LAVAD;
  sprite[SPRITE.BABY_LAVA][SPRITE.NIGHT] = IMAGES.BABY_LAVAN;
  sprite[SPRITE.BABY_LAVA_TAMED] = [];
  sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_TAMEDD;
  sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_TAMEDN;
  sprite[SPRITE.BABY_LAVA_WING_LEFT] = [];
  sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFTD;
  sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFTN;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT] = [];
  sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHTD;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHTN;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKD;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKN;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED] = [];
  sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDD;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDN;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA;
  sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT;
  sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT;
  sprite[SPRITE.HAWK_ATTACK] = [];
  sprite[SPRITE.HAWK_ATTACK][SPRITE.DAY] = IMAGES.HAWK_ATTACKD;
  sprite[SPRITE.HAWK_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_ATTACKN;
  sprite[SPRITE.HAWK] = [];
  sprite[SPRITE.HAWK][SPRITE.DAY] = IMAGES.HAWKD;
  sprite[SPRITE.HAWK][SPRITE.NIGHT] = IMAGES.HAWKN;
  sprite[SPRITE.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND;
  sprite[SPRITE.HAWK_GROUND] = [];
  sprite[SPRITE.HAWK_GROUND][SPRITE.DAY] = IMAGES.HAWK_GROUNDD;
  sprite[SPRITE.HAWK_GROUND][SPRITE.NIGHT] = IMAGES.HAWK_GROUNDN;
  sprite[SPRITE.HAWK_GROUND_ATTACK] = [];
  sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.DAY] = IMAGES.HAWK_GROUND_ATTACKD;
  sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN;
  sprite[SPRITE.HAWK_TAMED] = [];
  sprite[SPRITE.HAWK_TAMED][SPRITE.DAY] = IMAGES.HAWK_TAMEDD;
  sprite[SPRITE.HAWK_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_TAMEDN;
  sprite[SPRITE.HAWK_WING_LEFT] = [];
  sprite[SPRITE.HAWK_WING_LEFT][SPRITE.DAY] = IMAGES.HAWK_WING_LEFTD;
  sprite[SPRITE.HAWK_WING_LEFT][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFTN;
  sprite[SPRITE.HAWK_WING_RIGHT] = [];
  sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHTD;
  sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHTN;
  sprite[SPRITE.HAWK_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_ATTACKD;
  sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_ATTACKN;
  sprite[SPRITE.HAWK_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_ATTACKD;
  sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_ATTACKN;
  sprite[SPRITE.HAWK_WING_LEFT_TAMED] = [];
  sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_TAMEDD;
  sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_TAMEDN;
  sprite[SPRITE.HAWK_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_TAMEDD;
  sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_HAWK] = IMAGES.HURT_HAWK;
  sprite[SPRITE.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT;
  sprite[SPRITE.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT;
  sprite[SPRITE.VULTURE_ATTACK] = [];
  sprite[SPRITE.VULTURE_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_ATTACKD;
  sprite[SPRITE.VULTURE_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_ATTACKN;
  sprite[SPRITE.VULTURE] = [];
  sprite[SPRITE.VULTURE][SPRITE.DAY] = IMAGES.VULTURED;
  sprite[SPRITE.VULTURE][SPRITE.NIGHT] = IMAGES.VULTUREN;
  sprite[SPRITE.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND;
  sprite[SPRITE.VULTURE_GROUND] = [];
  sprite[SPRITE.VULTURE_GROUND][SPRITE.DAY] = IMAGES.VULTURE_GROUNDD;
  sprite[SPRITE.VULTURE_GROUND][SPRITE.NIGHT] = IMAGES.VULTURE_GROUNDN;
  sprite[SPRITE.VULTURE_GROUND_ATTACK] = [];
  sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_GROUND_ATTACKD;
  sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_GROUND_ATTACKN;
  sprite[SPRITE.VULTURE_TAMED] = [];
  sprite[SPRITE.VULTURE_TAMED][SPRITE.DAY] = IMAGES.VULTURE_TAMEDD;
  sprite[SPRITE.VULTURE_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_TAMEDN;
  sprite[SPRITE.VULTURE_WING_LEFT] = [];
  sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFTD;
  sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFTN;
  sprite[SPRITE.VULTURE_WING_RIGHT] = [];
  sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHTD;
  sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHTN;
  sprite[SPRITE.VULTURE_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_ATTACKD;
  sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_ATTACKN;
  sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_ATTACKD;
  sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_ATTACKN;
  sprite[SPRITE.VULTURE_WING_LEFT_TAMED] = [];
  sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_TAMEDD;
  sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_TAMEDN;
  sprite[SPRITE.VULTURE_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_TAMEDD;
  sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_VULTURE] = IMAGES.HURT_VULTURE;
  sprite[SPRITE.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT;
  sprite[SPRITE.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT;
  sprite[SPRITE.BOAR] = [];
  sprite[SPRITE.BOAR][SPRITE.DAY] = IMAGES.BOARD;
  sprite[SPRITE.BOAR][SPRITE.NIGHT] = IMAGES.BOARN;
  sprite[SPRITE.BOAR_TAMED] = [];
  sprite[SPRITE.BOAR_TAMED][SPRITE.DAY] = IMAGES.BOAR_TAMEDD;
  sprite[SPRITE.BOAR_TAMED][SPRITE.NIGHT] = IMAGES.BOAR_TAMEDN;
  sprite[SPRITE.BOAR_ATTACK] = [];
  sprite[SPRITE.BOAR_ATTACK][SPRITE.DAY] = IMAGES.BOAR_ANGRYD;
  sprite[SPRITE.BOAR_ATTACK][SPRITE.NIGHT] = IMAGES.BOAR_ANGRYN;
  sprite[SPRITE.BOAR_STEP] = [];
  sprite[SPRITE.BOAR_STEP][SPRITE.DAY] = IMAGES.BOAR_STEP;
  sprite[SPRITE.BOAR_STEP][SPRITE.NIGHT] = IMAGES.BOAR_STEP;
  sprite[SPRITE.CRAB_STEP] = [];
  sprite[SPRITE.CRAB_STEP][SPRITE.DAY] = IMAGES.CRAB_STEP;
  sprite[SPRITE.CRAB_STEP][SPRITE.NIGHT] = IMAGES.CRAB_STEP;
  sprite[SPRITE.BABY_MAMMOTH_STEP] = [];
  sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_STEP;
  sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_STEP;
  sprite[SPRITE.HURT_BOAR] = IMAGES.HURT_BOAR;
  sprite[SPRITE.SADDLE] = [];
  sprite[SPRITE.SADDLE][SPRITE.DAY] = IMAGES.SADDLED;
  sprite[SPRITE.SADDLE][SPRITE.NIGHT] = IMAGES.SADDLEN;
  sprite[SPRITE.WAND1] = [];
  sprite[SPRITE.WAND1][SPRITE.DAY] = IMAGES.WAND1D;
  sprite[SPRITE.WAND1][SPRITE.NIGHT] = IMAGES.WAND1N;
  sprite[SPRITE.SPELL] = [];
  sprite[SPRITE.SPELL][SPRITE.DAY] = [IMAGES.LIGHT_WAND0D, IMAGES.LIGHT_WAND1D, IMAGES.WOOD_ARROWD, IMAGES.STONE_ARROWD, IMAGES.GOLD_ARROWD, IMAGES.DIAMOND_ARROWD, IMAGES.AMETHYST_ARROWD, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWD];
  sprite[SPRITE.SPELL][SPRITE.NIGHT] = [IMAGES.LIGHT_WAND0N, IMAGES.LIGHT_WAND1N, IMAGES.WOOD_ARROWN, IMAGES.STONE_ARROWN, IMAGES.GOLD_ARROWN, IMAGES.DIAMOND_ARROWN, IMAGES.AMETHYST_ARROWN, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWN];
  sprite[SPRITE.WAND2] = [];
  sprite[SPRITE.WAND2][SPRITE.DAY] = IMAGES.WAND2D;
  sprite[SPRITE.WAND2][SPRITE.NIGHT] = IMAGES.WAND2N;
  sprite[SPRITE.BOAT_WAVE] = [];
  sprite[SPRITE.BOAT_WAVE][SPRITE.DAY] = IMAGES.BOAT_WAVED;
  sprite[SPRITE.BOAT_WAVE][SPRITE.NIGHT] = IMAGES.BOAT_WAVEN;
  sprite[SPRITE.SLED_WAVE] = [];
  sprite[SPRITE.SLED_WAVE][SPRITE.DAY] = IMAGES.SLED_WAVED;
  sprite[SPRITE.SLED_WAVE][SPRITE.NIGHT] = IMAGES.SLED_WAVEN;
  sprite[SPRITE.PIRATE_HAT] = [];
  sprite[SPRITE.PIRATE_HAT][SPRITE.DAY] = IMAGES.PIRATE_HATD;
  sprite[SPRITE.PIRATE_HAT][SPRITE.NIGHT] = IMAGES.PIRATE_HATN;
  sprite[SPRITE.FUR_HAT] = [];
  sprite[SPRITE.FUR_HAT][SPRITE.DAY] = IMAGES.FUR_HATD;
  sprite[SPRITE.FUR_HAT][SPRITE.NIGHT] = IMAGES.FUR_HATN;
  sprite[SPRITE.FLOWER_HAT] = [];
  sprite[SPRITE.FLOWER_HAT][SPRITE.DAY] = IMAGES.FLOWER_HATD;
  sprite[SPRITE.FLOWER_HAT][SPRITE.NIGHT] = IMAGES.FLOWER_HATN;
  sprite[SPRITE.PILOT_HELMET] = [];
  sprite[SPRITE.PILOT_HELMET][SPRITE.DAY] = IMAGES.PILOT_HELMETD;
  sprite[SPRITE.PILOT_HELMET][SPRITE.NIGHT] = IMAGES.PILOT_HELMETN;
  sprite[SPRITE.LAKE_EDGE] = [];
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY] = [];
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE0D_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE1D_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE2D_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE0N_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE1N_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE2N_EDGE);
  sprite[SPRITE.LAKE_DEEP] = [];
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY] = [];
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE0D_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE1D_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE2D_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE0N_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE1N_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE2N_DEEP);
  sprite[SPRITE.LAKE] = [];
  sprite[SPRITE.LAKE][SPRITE.DAY] = [];
  sprite[SPRITE.LAKE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE0D);
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE1D);
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE2D);
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE0N);
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE1N);
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE2N);
  MINIMAP_UTILS.g = [];
  MINIMAP_UTILS.g[0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1];
  MINIMAP_UTILS.g[1] = MINIMAP_UTILS.g[0];
  MINIMAP_UTILS.g[2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2];
  MINIMAP_UTILS.m = [];
  MINIMAP_UTILS.m[0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1];
  MINIMAP_UTILS.m[1] = MINIMAP_UTILS.m[0];
  MINIMAP_UTILS.m[2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2];
  MINIMAP_UTILS.la = [];
  MINIMAP_UTILS.la[0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA];
  MINIMAP_UTILS.la[1] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.la[2] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.la[3] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.la[4] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.la[5] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.s = [];
  MINIMAP_UTILS.s[0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1];
  MINIMAP_UTILS.s[1] = MINIMAP_UTILS.s[0];
  MINIMAP_UTILS.s[2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2];
  MINIMAP_UTILS.p = [];
  MINIMAP_UTILS.p[0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY];
  MINIMAP_UTILS.a = [];
  MINIMAP_UTILS.a[0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST];
  MINIMAP_UTILS.a[1] = MINIMAP_UTILS.a[0];
  MINIMAP_UTILS.a[2] = MINIMAP_UTILS.a[0];
  MINIMAP_UTILS.d = [];
  MINIMAP_UTILS.d[0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND];
  MINIMAP_UTILS.d[1] = MINIMAP_UTILS.d[0];
  MINIMAP_UTILS.d[2] = MINIMAP_UTILS.d[0];
  MINIMAP_UTILS.re = [];
  MINIMAP_UTILS.re[0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE];
  MINIMAP_UTILS.re[1] = MINIMAP_UTILS.re[0];
  MINIMAP_UTILS.re[2] = MINIMAP_UTILS.re[0];
  MINIMAP_UTILS.f = [];
  MINIMAP_UTILS.f[0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE];
  MINIMAP_UTILS.f[1] = MINIMAP_UTILS.f[0];
  MINIMAP_UTILS.f[2] = MINIMAP_UTILS.f[0];
  MINIMAP_UTILS.isl = [];
  MINIMAP_UTILS.isl[0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND];
  MINIMAP_UTILS.isl[1] = MINIMAP_UTILS.isl[0];
  MINIMAP_UTILS.isl[2] = MINIMAP_UTILS.isl[0];
  MINIMAP_UTILS.c = [];
  MINIMAP_UTILS.c[0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS];
  MINIMAP_UTILS.c[1] = MINIMAP_UTILS.c[0];
  MINIMAP_UTILS.c[2] = MINIMAP_UTILS.c[0];
  MINIMAP_UTILS.wtb = [];
  MINIMAP_UTILS.wtb[0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER];
  MINIMAP_UTILS.PIRANHA = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA];
  MINIMAP_UTILS.KRAKEN = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN];
  MINIMAP_UTILS.FOX = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX];
  MINIMAP_UTILS.WOLF = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF];
  MINIMAP_UTILS.SPIDER = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER];
  MINIMAP_UTILS.BEAR = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR];
  MINIMAP_UTILS.CAVE = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE];
  MINIMAP_UTILS.MAP = [IMAGES.BIGDAY, IMAGES.BIGNIGHT];
  MINIMAP_UTILS.FOREST = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST];
  MINIMAP_UTILS.WINTER = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER];
  MINIMAP_UTILS.DESERT = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT];
  MINIMAP_UTILS.LAVA = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA];
  for (var labree in MINIMAP_UTILS) {
    var syere = MINIMAP_UTILS[labree];
    for (var rochely = 0; rochely < syere.length; rochely++) {
      var donney = syere[rochely];
      if (donney.tryLoad !== undefined) {
        donney.tryLoad();
      } else {
        if (donney.length > 0) {
          for (var isairis = 0; isairis < donney.length; isairis++) {
            if (donney[isairis].tryLoad !== undefined) {
              donney[isairis].tryLoad();
            }
          }
        }
      }
    }
  }
  console.log("Load images", Date.now() - bahe);
}
function create_images() {
  var beautiful = (new Date).getTime();
  _load_images();
  render_inventory();
  sprite[SPRITE.BUBBLES] = [];
  sprite[SPRITE.BUBBLES][SPRITE.DAY] = [];
  sprite[SPRITE.BUBBLES][SPRITE.NIGHT] = [];
  for (var marleena = 0; marleena < SPRITE.BUBBLES_SIZES; marleena++) {
    sprite[SPRITE.BUBBLES][SPRITE.DAY].push(CTI(create_flake(1, 4 + marleena, "#59B8CE")));
    sprite[SPRITE.BUBBLES][SPRITE.NIGHT].push(CTI(create_flake(1, 4 + marleena, "#90DDD9")));
  }
  sprite[SPRITE.FLAKES] = [];
  sprite[SPRITE.FLAKES][SPRITE.DAY] = [];
  sprite[SPRITE.FLAKES][SPRITE.NIGHT] = [];
  for (var marleena = 0; marleena < SPRITE.FLAKES_SIZES; marleena++) {
    sprite[SPRITE.FLAKES][SPRITE.DAY].push(CTI(create_flake(1, 4 + marleena, "#fff")));
    sprite[SPRITE.FLAKES][SPRITE.NIGHT].push(CTI(create_flake(1, 4 + marleena, "#fff")));
  }
  sprite[SPRITE.DESERT] = [];
  sprite[SPRITE.DESERT][SPRITE.DAY] = [];
  sprite[SPRITE.DESERT][SPRITE.NIGHT] = [];
  for (var marleena = 0; marleena < SPRITE.FLAKES_SIZES; marleena++) {
    sprite[SPRITE.DESERT][SPRITE.DAY].push(CTI(create_flake(1, 6 + marleena, "#DDCD8A")));
    sprite[SPRITE.DESERT][SPRITE.NIGHT].push(CTI(create_flake(1, 6 + marleena, "#155E57")));
  }
  sprite[SPRITE.ASHES] = [];
  sprite[SPRITE.ASHES][SPRITE.DAY] = [];
  sprite[SPRITE.ASHES][SPRITE.NIGHT] = [];
  for (var marleena = 0; marleena < SPRITE.ASHES_SIZES; marleena++) {
    sprite[SPRITE.ASHES][SPRITE.DAY].push(CTI(create_flake(1, 4 + marleena, "#353326")));
    sprite[SPRITE.ASHES][SPRITE.NIGHT].push(CTI(create_flake(1, 4 + marleena, "#1D2526")));
  }
  sprite[SPRITE.GARLAND] = [];
  sprite[SPRITE.GARLAND][SPRITE.DAY] = CTI(create_garland(1.5, true, ["#ee71a9"]));
  sprite[SPRITE.GARLAND][SPRITE.NIGHT] = CTI(create_garland(1.5, true, ["#ee71a9"]));
  sprite[SPRITE.GARLANDS] = [sprite[SPRITE.GARLAND]];
  sprite[SPRITE.GARLANDS][1] = [];
  sprite[SPRITE.GARLANDS][2] = [];
  sprite[SPRITE.GARLANDS][3] = [];
  sprite[SPRITE.GARLANDS][4] = [];
  sprite[SPRITE.GARLANDS][1][SPRITE.DAY] = CTI(create_garland(1.5, true, ["#e2d63b"]));
  sprite[SPRITE.GARLANDS][1][SPRITE.NIGHT] = CTI(create_garland(1.5, true, ["#e2d63b"]));
  sprite[SPRITE.GARLANDS][2][SPRITE.DAY] = CTI(create_garland(1.5, true, ["#309cbd"]));
  sprite[SPRITE.GARLANDS][2][SPRITE.NIGHT] = CTI(create_garland(1.5, true, ["#309cbd"]));
  sprite[SPRITE.GARLANDS][3][SPRITE.DAY] = CTI(create_garland(1.5, true, ["#cd232d"]));
  sprite[SPRITE.GARLANDS][3][SPRITE.NIGHT] = CTI(create_garland(1.5, true, ["#cd232d"]));
  sprite[SPRITE.GARLANDS][4][SPRITE.DAY] = CTI(create_garland(1.5, true, ["#42b672"]));
  sprite[SPRITE.GARLANDS][4][SPRITE.NIGHT] = CTI(create_garland(1.5, true, ["#42b672"]));
  var mayli = Utils.gup("cti", window.location.href);
  if (mayli) {
    document.getElementById("version").innerHTML += "[CTI]";
  } else {
    CTI = function (corinna) {
      return corinna.loaded = 1, corinna;
    };
  }
  sprite[SPRITE.MARKET_BGD] = CTI(create_background_market());
  sprite[SPRITE.STONES] = [];
  sprite[SPRITE.STONES][SPRITE.DAY] = [];
  sprite[SPRITE.STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(1.1, false, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
  sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(.9, false, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
  sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(.6, false, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(1.1, false, ["#0a2728", "#3c8e88", "#40a39b"])));
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(.9, false, ["#0a2728", "#3c8e88", "#40a39b"])));
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(.6, false, ["#0a2728", "#3c8e88", "#40a39b"])));
  sprite[SPRITE.GOLD] = [];
  sprite[SPRITE.GOLD][SPRITE.DAY] = [];
  sprite[SPRITE.GOLD][SPRITE.NIGHT] = [];
  sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(1.5, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(1.3, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(1.1, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(1.5, false, ["#030d14", "#1b4444", "#16605a"])));
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(1.3, false, ["#030d14", "#1b4444", "#16605a"])));
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(1.1, false, ["#030d14", "#1b4444", "#16605a"])));
  sprite[SPRITE.DIAMOND] = [];
  sprite[SPRITE.DIAMOND][SPRITE.DAY] = [];
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT] = [];
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(1.1, false, ["#232828", "#3fc9c9", "#74ede6"])));
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(.9, false, ["#232828", "#3fc9c9", "#74ede6"])));
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(.7, false, ["#232828", "#3fc9c9", "#74ede6"])));
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(1.1, false, ["#030d14", "#2b9390", "#57bcb5"])));
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(.9, false, ["#030d14", "#2b9390", "#57bcb5"])));
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(.7, false, ["#030d14", "#2b9390", "#57bcb5"])));
  sprite[SPRITE.ALOE_VERA] = [];
  sprite[SPRITE.ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERAD;
  sprite[SPRITE.ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN;
  sprite[SPRITE.HAND_SHADOW] = [];
  sprite[SPRITE.HAND_SHADOW][SPRITE.DAY] = CTI(create_hand_shadow(.6, ["#0d1b1c"]));
  sprite[SPRITE.HAND_SHADOW][SPRITE.NIGHT] = CTI(create_hand_shadow(.6, ["#030d14"]));
  sprite[SPRITE.GLOVES_HOOD] = [];
  sprite[SPRITE.GLOVES_HOOD][SPRITE.DAY] = CTI(create_hand(.6, ["#2a2938", "#242330"]));
  sprite[SPRITE.GLOVES_HOOD][SPRITE.NIGHT] = CTI(create_hand(.6, ["#1b1e30", "#161921"]));
  sprite[SPRITE.ZOMBIE_BODY] = [];
  sprite[SPRITE.ZOMBIE_BODY][SPRITE.DAY] = CTI(create_zombie_boss(.6, true, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
  sprite[SPRITE.ZOMBIE_BODY][SPRITE.NIGHT] = CTI(create_zombie_boss(.6, true, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
  sprite[SPRITE.ZOMBIE_HEAD] = [];
  sprite[SPRITE.ZOMBIE_HEAD][SPRITE.DAY] = CTI(create_zombie_head(.6, true, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
  sprite[SPRITE.ZOMBIE_HEAD][SPRITE.NIGHT] = CTI(create_zombie_head(.6, true, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
  sprite[SPRITE.ZOMBIE_HAND] = [];
  sprite[SPRITE.ZOMBIE_HAND][SPRITE.DAY] = CTI(create_zombie_hand(.4, ["#0d1b1c", "#759e6e", "#55604b"]));
  sprite[SPRITE.ZOMBIE_HAND][SPRITE.NIGHT] = CTI(create_zombie_hand(.4, ["#030d14", "#11635e", "#02373e"]));
  sprite[SPRITE.ZOMBIE_HURT] = CTI(create_zombie_hurt(.6, ["#BB0000"]));
  sprite[SPRITE.ZOMBIE_HUNGER] = CTI(create_zombie_hurt(.6, ["#DBE71C"]));
  sprite[SPRITE.ZOMBIE_HEAL] = CTI(create_zombie_hurt(.6, ["#00BB00"]));
  sprite[SPRITE.TREE] = [];
  sprite[SPRITE.TREE][SPRITE.DAY] = [];
  sprite[SPRITE.TREE][SPRITE.NIGHT] = [];
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], false, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], true, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], false, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], true, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], false, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
  sprite[SPRITE.TREE_BRANCH] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], false), sprite[SPRITE.TREE][SPRITE.DAY][0])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], true), sprite[SPRITE.TREE][SPRITE.DAY][1])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], false), sprite[SPRITE.TREE][SPRITE.NIGHT][0])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true), sprite[SPRITE.TREE][SPRITE.NIGHT][1])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], false), sprite[SPRITE.TREE][SPRITE.DAY][2])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], true), sprite[SPRITE.TREE][SPRITE.DAY][2])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(.9, ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"], false), sprite[SPRITE.TREE][SPRITE.NIGHT][2])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], true), sprite[SPRITE.TREE][SPRITE.NIGHT][3])));
  sprite[SPRITE.TREE][SPRITE.DAY][5] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][5]);
  sprite[SPRITE.TREE][SPRITE.DAY][4] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][4]);
  sprite[SPRITE.TREE][SPRITE.DAY][3] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][3]);
  sprite[SPRITE.TREE][SPRITE.DAY][2] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][2]);
  sprite[SPRITE.TREE][SPRITE.DAY][1] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][1]);
  sprite[SPRITE.TREE][SPRITE.DAY][0] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][0]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][5] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][5]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][4] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][4]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][3] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][3]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][2] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][2]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][1] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][1]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][0] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][0]);
  sprite[SPRITE.PICK_WOOD] = [];
  sprite[SPRITE.PICK_WOOD][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
  sprite[SPRITE.PICK_WOOD][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
  sprite[SPRITE.PICK] = [];
  sprite[SPRITE.PICK][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
  sprite[SPRITE.PICK][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
  sprite[SPRITE.PICK_GOLD] = [];
  sprite[SPRITE.PICK_GOLD][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
  sprite[SPRITE.PICK_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
  sprite[SPRITE.PICK_DIAMOND] = [];
  sprite[SPRITE.PICK_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
  sprite[SPRITE.PICK_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
  sprite[SPRITE.PICK_AMETHYST] = [];
  sprite[SPRITE.PICK_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
  sprite[SPRITE.PICK_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
  sprite[SPRITE.PIRATE_SWORD] = [];
  sprite[SPRITE.PIRATE_SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_pirate_sword(.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
  sprite[SPRITE.PIRATE_SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_pirate_sword(.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
  sprite[SPRITE.SUGAR_CAN] = [];
  sprite[SPRITE.SUGAR_CAN][SPRITE.DAY] = CTI(create_rotated_img(3, create_sugar_can(.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
  sprite[SPRITE.SUGAR_CAN][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_sugar_can(.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
  sprite[SPRITE.SWORD_WOOD] = [];
  sprite[SPRITE.SWORD_WOOD][SPRITE.DAY] = CTI(create_rotated_img(3, create_sword_wood(.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
  sprite[SPRITE.SWORD_WOOD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_sword_wood(.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
  sprite[SPRITE.SWORD] = [];
  sprite[SPRITE.SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_stonesword(.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
  sprite[SPRITE.SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_stonesword(.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
  sprite[SPRITE.SWORD_GOLD] = [];
  sprite[SPRITE.SWORD_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_goldsword(.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
  sprite[SPRITE.SWORD_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_goldsword(.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
  sprite[SPRITE.SWORD_DIAMOND] = [];
  sprite[SPRITE.SWORD_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_diamondsword(.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
  sprite[SPRITE.SWORD_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_diamondsword(.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
  sprite[SPRITE.SWORD_AMETHYST] = [];
  sprite[SPRITE.SWORD_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_amesword(.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
  sprite[SPRITE.SWORD_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_amesword(.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
  sprite[SPRITE.HERB] = [];
  sprite[SPRITE.HERB][SPRITE.DAY] = [];
  sprite[SPRITE.HERB][SPRITE.NIGHT] = [];
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(.9, false, ["#0d4f35"], 0)));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(.9, false, ["#0d4f35"], 1)));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(.9, false, ["#0d4f35"], 2)));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(.9, false, ["#053339"], 0)));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(.9, false, ["#053339"], 1)));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(.9, false, ["#053339"], 2)));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_leaf(.8, ["#241301", "#ba6b0e", "#6d3f04"])));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_leaf(.8, ["#292002", "#ba930e", "#6d5704"])));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_leaf(.9, ["#052919", "#0a4738", "#06321f"])));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_leaf(.8, ["#052918", "#08491c", "#063417"])));
  sprite[SPRITE.SIGN] = [];
  sprite[SPRITE.SIGN][SPRITE.DAY] = CTI(create_rotated_img(Math.PI / 2, create_sign(.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
  sprite[SPRITE.SIGN][SPRITE.NIGHT] = CTI(create_rotated_img(Math.PI / 2, create_sign(.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
  sprite[SPRITE.SIGN_BUTTON] = [];
  sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(.25, ["#44301b", "#57442a", "#523e26"], 0)));
  sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
  sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
  sprite[SPRITE.SYMBOLS] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.DAY] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
  sprite[SPRITE.PLANT] = [];
  sprite[SPRITE.PLANT][SPRITE.DAY] = [CTI(create_plant(1.2, true, ["#352b10", "#80500b", "#7c4908"]))];
  sprite[SPRITE.PLANT][SPRITE.NIGHT] = [CTI(create_plant(1.2, true, ["#030d14", "#0a3429", "#0a2f2b"]))];
  sprite[SPRITE.DRIED_PLANT] = [];
  sprite[SPRITE.DRIED_PLANT][SPRITE.DAY] = CTI(create_plant(.8, true, ["#0e3022", "#68622D", "#665329"]));
  sprite[SPRITE.DRIED_PLANT][SPRITE.NIGHT] = CTI(create_plant(.8, true, ["#030d14", "#0F3A24", "#083326"]));
  sprite[SPRITE.PUMPKIN] = [];
  sprite[SPRITE.PUMPKIN][SPRITE.DAY] = CTI(create_pumpkin(.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
  sprite[SPRITE.PUMPKIN][SPRITE.NIGHT] = CTI(create_pumpkin(.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
  sprite[SPRITE.GARLIC] = [];
  sprite[SPRITE.GARLIC][SPRITE.DAY] = CTI(create_garlic(.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
  sprite[SPRITE.GARLIC][SPRITE.NIGHT] = CTI(create_garlic(.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
  sprite[SPRITE.THORNBUSH] = [];
  sprite[SPRITE.THORNBUSH][SPRITE.DAY] = CTI(create_brambles(.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
  sprite[SPRITE.THORNBUSH][SPRITE.NIGHT] = CTI(create_brambles(.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
  sprite[SPRITE.PLANT_MINI] = [];
  sprite[SPRITE.PLANT_MINI][SPRITE.DAY] = CTI(create_plant(.8, true, ["#1b170c", "#0b8052", "#077b49"]));
  sprite[SPRITE.PLANT_MINI][SPRITE.NIGHT] = CTI(create_plant(.8, true, ["#030d14", "#084442", "#0a4049"]));
  sprite[SPRITE.DRIED_PUMPKIN] = [];
  sprite[SPRITE.DRIED_PUMPKIN][SPRITE.DAY] = CTI(create_pumpkin(.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
  sprite[SPRITE.DRIED_PUMPKIN][SPRITE.NIGHT] = CTI(create_pumpkin(.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
  sprite[SPRITE.DRIED_GARLIC] = [];
  sprite[SPRITE.DRIED_GARLIC][SPRITE.DAY] = CTI(create_garlic(.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
  sprite[SPRITE.DRIED_GARLIC][SPRITE.NIGHT] = CTI(create_garlic(.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
  sprite[SPRITE.DRIED_THORNBUSH] = [];
  sprite[SPRITE.DRIED_THORNBUSH][SPRITE.DAY] = CTI(create_brambles(.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
  sprite[SPRITE.DRIED_THORNBUSH][SPRITE.NIGHT] = CTI(create_brambles(.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
  sprite[SPRITE.GIFT] = [];
  sprite[SPRITE.GIFT][SPRITE.DAY] = CTI(create_present(.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
  sprite[SPRITE.GIFT][SPRITE.NIGHT] = CTI(create_present(.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
  sprite[SPRITE.HURT_GIFT] = CTI(create_present(.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
  sprite[SPRITE.FRUIT] = [];
  sprite[SPRITE.FRUIT][SPRITE.DAY] = CTI(create_fruit(1.4, false, ["#3d2a6e", "#8255b5"]));
  sprite[SPRITE.FRUIT][SPRITE.NIGHT] = CTI(create_fruit(1.4, false, ["#26124f", "#524082"]));
  sprite[SPRITE.FIRE] = [];
  sprite[SPRITE.FIRE][SPRITE.DAY] = CTI(create_fire(.9, false, ["#efd435", "#ec8d35", "#e96132"]));
  sprite[SPRITE.FIRE][SPRITE.NIGHT] = CTI(create_fire(.9, false, ["#efdb7b", "#efe854", "#e8ef62"]));
  sprite[SPRITE.BIG_FIRE_WOOD] = [];
  sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.DAY] = CTI(create_big_fire_wood(.9, false, ["#4d2d14", "#432516"]));
  sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.NIGHT] = CTI(create_big_fire_wood(.9, false, ["#282404", "#0a0a01"]));
  sprite[SPRITE.WOOD_FIRE] = [];
  sprite[SPRITE.WOOD_FIRE][SPRITE.DAY] = CTI(create_wood_fire(.9, false, ["#4d2d14", "#432516"]));
  sprite[SPRITE.WOOD_FIRE][SPRITE.NIGHT] = CTI(create_wood_fire(.9, false, ["#282404", "#0a0a01"]));
  sprite[SPRITE.HALO_FIRE] = [];
  sprite[SPRITE.HALO_FIRE][SPRITE.DAY] = CTI(create_halo_fire(.9, false, ["#efd435"]));
  sprite[SPRITE.HALO_FIRE][SPRITE.NIGHT] = CTI(create_halo_fire(.9, false, ["#fffabb"]));
  sprite[SPRITE.GROUND_FIRE] = [];
  sprite[SPRITE.GROUND_FIRE][SPRITE.DAY] = CTI(create_ground_fire(.9, false, ["#efd435"]));
  sprite[SPRITE.GROUND_FIRE][SPRITE.NIGHT] = CTI(create_ground_fire(.9, false, ["#fffabb"]));
  sprite[SPRITE.HALO_FIRE_PUMPKIN] = [];
  sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.DAY] = CTI(create_halo_fire(.9, false, ["#efd435"]));
  sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(create_halo_fire(.9, false, ["rgba(255, 84, 0, 1)"]));
  sprite[SPRITE.GROUND_FIRE_PUMPKIN] = [];
  sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.DAY] = CTI(create_ground_fire(.9, false, ["#efd435"]));
  sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(create_ground_fire(.9, false, ["#ff5704"]));
  sprite[SPRITE.GEAR] = CTI(create_gear(1, "#ffffff", 1));
  sprite[SPRITE.GEAR2] = CTI(create_gear(1.5, "#ffffff", 1));
  sprite[SPRITE.YOUR_SCORE] = CTI(create_text(1, "Your score:", 15, "#FFF"));
  sprite[SPRITE.WINDMILL_CASES] = CTI(create_windmill_chest(.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
  sprite[SPRITE.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES;
  sprite[SPRITE.WINDMILL] = [];
  sprite[SPRITE.WINDMILL][SPRITE.DAY] = CTI(create_windmill(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
  sprite[SPRITE.WINDMILL][SPRITE.NIGHT] = CTI(create_windmill(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
  sprite[SPRITE.WINDMILL_WINGS] = [];
  sprite[SPRITE.WINDMILL_WINGS][SPRITE.DAY] = CTI(create_windmill_wing(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
  sprite[SPRITE.WINDMILL_WINGS][SPRITE.NIGHT] = CTI(create_windmill_wing(2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
  sprite[SPRITE.WINDMILL_HEAD] = [];
  sprite[SPRITE.WINDMILL_HEAD][SPRITE.DAY] = CTI(create_windmill_head(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
  sprite[SPRITE.WINDMILL_HEAD][SPRITE.NIGHT] = CTI(create_windmill_head(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
  sprite[SPRITE.WILD_WHEAT] = [];
  sprite[SPRITE.WILD_WHEAT][SPRITE.DAY] = CTI(create_wheat(2.2, true, ["#A89F67", "#9E8456"]));
  sprite[SPRITE.WILD_WHEAT][SPRITE.NIGHT] = CTI(create_wheat(2.2, true, ["#0B4049", "#08383D"]));
  sprite[SPRITE.DRIED_WHEAT] = [];
  sprite[SPRITE.DRIED_WHEAT][SPRITE.DAY] = CTI(create_wheat(2.2, true, ["#68622D", "#665329"]));
  sprite[SPRITE.DRIED_WHEAT][SPRITE.NIGHT] = CTI(create_wheat(2.2, true, ["#0F3A24", "#083326"]));
  sprite[SPRITE.WHEAT_MOB] = [];
  sprite[SPRITE.WHEAT_MOB][SPRITE.DAY] = CTI(create_seed(.8, true, ["#A89F67", "#9E8456"]));
  sprite[SPRITE.WHEAT_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, true, ["#15514F", "#0F3F3D"]));
  sprite[SPRITE.PUMPKIN_SEED_MOB] = [];
  sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, true, ["#c67933", "#b17238"]));
  sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.ALOE_VERA_SEED_MOB] = [];
  sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, true, ["#3a8214", "#4a9c1e"]));
  sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, true, ["#032d29", "#044640"]));
  sprite[SPRITE.GARLIC_SEED_MOB] = [];
  sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, true, ["#e8e8e8", "#bbbbbb"]));
  sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, true, ["#1c6161", "#07413f"]));
  sprite[SPRITE.THORNBUSH_SEED_MOB] = [];
  sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, true, ["#328a56", "#449573"]));
  sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.CARROT_SEED_MOB] = [];
  sprite[SPRITE.CARROT_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, true, ["#c98e2f", "#a36b11"]));
  sprite[SPRITE.CARROT_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.TOMATO_SEED_MOB] = [];
  sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, true, ["#b22419", "#99110e"]));
  sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, true, ["#04323c", "#03222b"]));
  sprite[SPRITE.WATERMELON_SEED_MOB] = [];
  sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, true, ["#13a56d", "#098a58"]));
  sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.WINDMILL_WHEAT_SEED] = create_craft_button(1, [{f: create_wheat, x: 0, y: 0, a: 1, r: 0, c: ["#A89F67", "#9E8456"]}], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], .7);
  sprite[SPRITE.BREAD_OVEN_WOOD] = create_craft_button(1, [{f: create_wood_fire, x: 0, y: 0, a: 1, r: -Math.PI / 5, c: ["#4d2d14", "#432516"]}], .3, ["#d2c77b", "#e7dc8f", "#bfb360"], .7);
  sprite[SPRITE.BREAD_OVEN_BREAD] = create_craft_button(1, [{f: create_bread, x: 0, y: -5, a: 1, r: 0, c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]}], .15, ["#d2c77b", "#e7dc8f", "#bfb360"], .7);
  sprite[SPRITE.EMPTY_SLOT] = create_craft_button(.9, [], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.PLANT_SEED] = [];
  sprite[SPRITE.PLANT_SEED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#7d613e", "#9e7e5a"]));
  sprite[SPRITE.PLANT_SEED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#084442", "#125e5a"]));
  sprite[SPRITE.WHEAT_SEED] = [];
  sprite[SPRITE.WHEAT_SEED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#9E8456", "#A89F67"]));
  sprite[SPRITE.WHEAT_SEED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#1b6f6a", "#0d4e4c"]));
  sprite[SPRITE.WHEAT_SEED_DRIED] = [];
  sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#665329", "#68622D"]));
  sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#083326", "#0F3A24"]));
  sprite[SPRITE.PLANT_PUMPKIN] = [];
  sprite[SPRITE.PLANT_PUMPKIN][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#c67933", "#ec952d"]));
  sprite[SPRITE.PLANT_PUMPKIN][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#0e6553", "#094437"]));
  sprite[SPRITE.PLANT_ALOE_VERA] = [];
  sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#375809", "#4b770e"]));
  sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#09542d", "#0d5d2f"]));
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED] = [];
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#585809", "#72770e"]));
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#295209", "#305d0d"]));
  sprite[SPRITE.PLANT_GARLIC] = [];
  sprite[SPRITE.PLANT_GARLIC][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#b9b094", "#e2d2c0"]));
  sprite[SPRITE.PLANT_GARLIC][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#126366", "#0d484b"]));
  sprite[SPRITE.PLANT_THORNBUSH] = [];
  sprite[SPRITE.PLANT_THORNBUSH][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#3f8662", "#30915d"]));
  sprite[SPRITE.PLANT_THORNBUSH][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#0e6553", "#094437"]));
  sprite[SPRITE.PLANT_PUMPKIN_DRIED] = [];
  sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#c79153", "#dfa868"]));
  sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#073927", "#075040"]));
  sprite[SPRITE.PLANT_GARLIC_DRIED] = [];
  sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#768b5b", "#819984"]));
  sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#0c4540", "#0e5153"]));
  sprite[SPRITE.PLANT_THORNBUSH_DRIED] = [];
  sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#567465", "#627c6e"]));
  sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#073927", "#075040"]));
  sprite[SPRITE.PLANT_CARROT] = [];
  sprite[SPRITE.PLANT_CARROT][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#996b3a", "#bf956b"]));
  sprite[SPRITE.PLANT_CARROT][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#0e6553", "#094437"]));
  sprite[SPRITE.PLANT_CARROT_DRIED] = [];
  sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#7a634a", "#a68f77"]));
  sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#1e4d43", "#113c32"]));
  sprite[SPRITE.PLANT_TOMATO] = [];
  sprite[SPRITE.PLANT_TOMATO][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#99403c", "#bc796c"]));
  sprite[SPRITE.PLANT_TOMATO][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#1e434d", "#11303c"]));
  sprite[SPRITE.PLANT_TOMATO_DRIED] = [];
  sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#88504e", "#b3857c"]));
  sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#253b41", "#162930"]));
  sprite[SPRITE.PLANT_WATERMELON] = [];
  sprite[SPRITE.PLANT_WATERMELON][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#0f8870", "#23af93"]));
  sprite[SPRITE.PLANT_WATERMELON][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#032829", "#083233"]));
  sprite[SPRITE.PLANT_WATERMELON_DRIED] = [];
  sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, false, ["#618a20", "#84a74e"]));
  sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, false, ["#1f4632", "#335d47"]));
  sprite[SPRITE.WORKBENCH] = [];
  sprite[SPRITE.WORKBENCH][SPRITE.DAY] = CTI(create_workbench(1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
  sprite[SPRITE.WORKBENCH][SPRITE.NIGHT] = CTI(create_workbench(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
  sprite[SPRITE.WALL] = [];
  sprite[SPRITE.WALL][SPRITE.DAY] = CTI(create_wall(1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
  sprite[SPRITE.WALL][SPRITE.NIGHT] = CTI(create_wall(1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
  sprite[SPRITE.DIAMOND_WALL] = [];
  sprite[SPRITE.DIAMOND_WALL][SPRITE.DAY] = CTI(create_wall_diamond(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
  sprite[SPRITE.DIAMOND_WALL][SPRITE.NIGHT] = CTI(create_wall_diamond(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.AMETHYST_WALL] = [];
  sprite[SPRITE.AMETHYST_WALL][SPRITE.DAY] = CTI(create_wall_stone(1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
  sprite[SPRITE.AMETHYST_WALL][SPRITE.NIGHT] = CTI(create_wall_stone(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
  sprite[SPRITE.STONE_WALL] = [];
  sprite[SPRITE.STONE_WALL][SPRITE.DAY] = CTI(create_wall_stone(1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
  sprite[SPRITE.STONE_WALL][SPRITE.NIGHT] = CTI(create_wall_stone(1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
  sprite[SPRITE.GOLD_WALL] = [];
  sprite[SPRITE.GOLD_WALL][SPRITE.DAY] = CTI(create_wall_gold(1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
  sprite[SPRITE.GOLD_WALL][SPRITE.NIGHT] = CTI(create_wall_gold(1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
  sprite[SPRITE.SPIKE] = [];
  sprite[SPRITE.SPIKE][SPRITE.DAY] = CTI(create_spike(.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
  sprite[SPRITE.SPIKE][SPRITE.NIGHT] = CTI(create_spike(.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
  sprite[SPRITE.GOLD_SPIKE] = [];
  sprite[SPRITE.GOLD_SPIKE][SPRITE.DAY] = CTI(create_spike_gold(.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
  sprite[SPRITE.GOLD_SPIKE][SPRITE.NIGHT] = CTI(create_spike_gold(.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
  sprite[SPRITE.DIAMOND_SPIKE] = [];
  sprite[SPRITE.DIAMOND_SPIKE][SPRITE.DAY] = CTI(create_spike_diamond(.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
  sprite[SPRITE.DIAMOND_SPIKE][SPRITE.NIGHT] = CTI(create_spike_diamond(.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.STONE_SPIKE] = [];
  sprite[SPRITE.STONE_SPIKE][SPRITE.DAY] = CTI(create_spike_stone(.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
  sprite[SPRITE.STONE_SPIKE][SPRITE.NIGHT] = CTI(create_spike_stone(.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
  sprite[SPRITE.AMETHYST_SPIKE] = [];
  sprite[SPRITE.AMETHYST_SPIKE][SPRITE.DAY] = CTI(create_spike_stone(.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
  sprite[SPRITE.AMETHYST_SPIKE][SPRITE.NIGHT] = CTI(create_spike_stone(.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
  sprite[SPRITE.DOOR_WOOD_CLOSE] = [];
  sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.DAY] = CTI(create_door_wood(1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
  sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.NIGHT] = CTI(create_door_wood(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
  sprite[SPRITE.DOOR_WOOD_OPEN] = [];
  sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.DAY] = CTI(create_door_wood(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.NIGHT] = CTI(create_door_wood(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
  sprite[SPRITE.DOOR_STONE_CLOSE] = [];
  sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.DAY] = CTI(create_door_stone(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
  sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.NIGHT] = CTI(create_door_stone(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
  sprite[SPRITE.DOOR_STONE_OPEN] = [];
  sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.DAY] = CTI(create_door_stone(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.NIGHT] = CTI(create_door_stone(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.DOOR_AMETHYST_CLOSE] = [];
  sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.DAY] = CTI(create_door_stone(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
  sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.NIGHT] = CTI(create_door_stone(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN] = [];
  sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.DAY] = CTI(create_door_stone(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.NIGHT] = CTI(create_door_stone(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.DOOR_GOLD_CLOSE] = [];
  sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.DAY] = CTI(create_door_gold(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
  sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.NIGHT] = CTI(create_door_gold(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
  sprite[SPRITE.DOOR_GOLD_OPEN] = [];
  sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.DAY] = CTI(create_door_gold(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.NIGHT] = CTI(create_door_gold(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.DOOR_DIAMOND_CLOSE] = [];
  sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.DAY] = CTI(create_door_diamond(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
  sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.NIGHT] = CTI(create_door_diamond(1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN] = [];
  sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.DAY] = CTI(create_door_diamond(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.NIGHT] = CTI(create_door_diamond(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.CHEST] = [];
  sprite[SPRITE.CHEST][SPRITE.DAY] = CTI(create_chest(.5, true, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
  sprite[SPRITE.CHEST][SPRITE.NIGHT] = CTI(create_chest(.5, true, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
  sprite[SPRITE.TREASURE_CHEST] = [];
  sprite[SPRITE.TREASURE_CHEST][SPRITE.DAY] = CTI(create_treasure_chest(.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
  sprite[SPRITE.TREASURE_CHEST][SPRITE.NIGHT] = CTI(create_treasure_chest(.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
  sprite[SPRITE.RABBIT] = [];
  sprite[SPRITE.RABBIT][SPRITE.DAY] = CTI(create_rabbit(.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
  sprite[SPRITE.RABBIT][SPRITE.NIGHT] = CTI(create_rabbit(.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
  sprite[SPRITE.SPIDER] = [];
  sprite[SPRITE.SPIDER][SPRITE.DAY] = CTI(create_rotated_img(Math.PI, create_spider(.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
  sprite[SPRITE.SPIDER][SPRITE.NIGHT] = CTI(create_rotated_img(Math.PI, create_spider(.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
  sprite[SPRITE.WEB] = CTI(create_web(.6, ["#FFFFFF"]));
  sprite[SPRITE.WOLF] = [];
  sprite[SPRITE.WOLF][SPRITE.DAY] = CTI(create_wolf(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
  sprite[SPRITE.WOLF][SPRITE.NIGHT] = CTI(create_wolf(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
  sprite[SPRITE.EARMUFFS] = [];
  sprite[SPRITE.EARMUFFS][SPRITE.DAY] = CTI(create_earmuff(.6, true, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
  sprite[SPRITE.EARMUFFS][SPRITE.NIGHT] = CTI(create_earmuff(.6, true, ["#478e8b", "#327e73", "#073030", "#08403f"]));
  sprite[SPRITE.COAT] = [];
  sprite[SPRITE.COAT][SPRITE.DAY] = CTI(create_coat(.6, true, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
  sprite[SPRITE.COAT][SPRITE.NIGHT] = CTI(create_coat(.6, true, ["#073030", "#08403f", "#478e8b", "#327e73"]));
  sprite[SPRITE.CAP_SCARF] = [];
  sprite[SPRITE.CAP_SCARF][SPRITE.DAY] = CTI(create_cap_scarf(.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
  sprite[SPRITE.CAP_SCARF][SPRITE.NIGHT] = CTI(create_cap_scarf(.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
  sprite[SPRITE.CHRISTMAS_HAT] = [];
  sprite[SPRITE.CHRISTMAS_HAT][SPRITE.DAY] = CTI(create_christmas_hat(.6, true, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
  sprite[SPRITE.CHRISTMAS_HAT][SPRITE.NIGHT] = CTI(create_christmas_hat(.6, true, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
  sprite[SPRITE.ELF_HAT] = [];
  sprite[SPRITE.ELF_HAT][SPRITE.DAY] = CTI(create_elf_hat(.6, true, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
  sprite[SPRITE.ELF_HAT][SPRITE.NIGHT] = CTI(create_elf_hat(.6, true, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
  sprite[SPRITE.BREAD_OVEN_ON] = [];
  sprite[SPRITE.BREAD_OVEN_ON][SPRITE.DAY] = CTI(create_bread_oven(.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
  sprite[SPRITE.BREAD_OVEN_ON][SPRITE.NIGHT] = CTI(create_bread_oven(.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
  sprite[SPRITE.BREAD_LIGHT_UP] = [];
  sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.DAY] = CTI(create_bread_light_up(.9, ["#e4c027"]));
  sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.NIGHT] = CTI(create_bread_light_up(.9, ["#D8E57F"]));
  sprite[SPRITE.BREAD_OVEN_OFF] = [];
  sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.DAY] = CTI(create_bread_oven_off(.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
  sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.NIGHT] = CTI(create_bread_oven_off(.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
  sprite[SPRITE.BREAD_OVEN_UI] = CTI(create_bread_oven_ui(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
  sprite[SPRITE.FURNACE_ON] = [];
  sprite[SPRITE.FURNACE_ON][SPRITE.DAY] = CTI(create_furnace_on(.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
  sprite[SPRITE.FURNACE_ON][SPRITE.NIGHT] = CTI(create_furnace_on(.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
  sprite[SPRITE.FURNACE_OFF] = [];
  sprite[SPRITE.FURNACE_OFF][SPRITE.DAY] = CTI(create_furnace_off(.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
  sprite[SPRITE.FURNACE_OFF][SPRITE.NIGHT] = CTI(create_furnace_off(.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
  sprite[SPRITE.FURNACE_SLOT] = CTI(create_furnace_slot(.8, true, ["#5f6061", "#939393"]));
  sprite[SPRITE.FURNACE_BUTTON] = create_craft_button(1, [{f: create_wood_fire, x: 0, y: 0, a: 1, r: Math.PI / 2.5, c: ["#4d2d14", "#432516"]}], .3, ["#494949", "#5b5858", "#3d3b3b"], 1);
  sprite[SPRITE.BED] = [];
  sprite[SPRITE.BED][SPRITE.DAY] = CTI(create_bed(1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
  sprite[SPRITE.BED][SPRITE.NIGHT] = CTI(create_bed(1, true, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
  sprite[SPRITE.BED_TOP] = [];
  sprite[SPRITE.BED_TOP][SPRITE.DAY] = CTI(create_bed_top(1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
  sprite[SPRITE.BED_TOP][SPRITE.NIGHT] = CTI(create_bed_top(1, true, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
  sprite[SPRITE.CRAB_SPEAR] = [];
  sprite[SPRITE.CRAB_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_crab_spear(.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
  sprite[SPRITE.CRAB_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_crab_spear(.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
  sprite[SPRITE.WOOD_SPEAR] = [];
  sprite[SPRITE.WOOD_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_wood_spear(.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
  sprite[SPRITE.WOOD_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_wood_spear(.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
  sprite[SPRITE.SPEAR] = [];
  sprite[SPRITE.SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_stonespear(.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
  sprite[SPRITE.SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_stonespear(.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
  sprite[SPRITE.GOLD_SPEAR] = [];
  sprite[SPRITE.GOLD_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_goldspear(.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
  sprite[SPRITE.GOLD_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_goldspear(.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
  sprite[SPRITE.DIAMOND_SPEAR] = [];
  sprite[SPRITE.DIAMOND_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_diamondspear(.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
  sprite[SPRITE.DIAMOND_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_diamondspear(.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
  sprite[SPRITE.AMETHYST_SPEAR] = [];
  sprite[SPRITE.AMETHYST_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_amespear(.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
  sprite[SPRITE.AMETHYST_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_amespear(.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
  sprite[SPRITE.DRAGON_SPEAR] = [];
  sprite[SPRITE.DRAGON_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_spear(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
  sprite[SPRITE.DRAGON_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_spear(1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
  sprite[SPRITE.HAMMER] = [];
  sprite[SPRITE.HAMMER][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
  sprite[SPRITE.HAMMER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
  sprite[SPRITE.SPANNER] = [];
  sprite[SPRITE.SPANNER][SPRITE.DAY] = CTI(create_rotated_img(3, create_spanner(.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
  sprite[SPRITE.SPANNER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_spanner(.5, true, ["#030d14", "#485e66", "#1f343f"])));
  sprite[SPRITE.SUPER_HAMMER] = [];
  sprite[SPRITE.SUPER_HAMMER][SPRITE.DAY] = CTI(create_rotated_img(3, create_superhammer(1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
  sprite[SPRITE.SUPER_HAMMER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_superhammer(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
  sprite[SPRITE.HAMMER_GOLD] = [];
  sprite[SPRITE.HAMMER_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
  sprite[SPRITE.HAMMER_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
  sprite[SPRITE.HAMMER_DIAMOND] = [];
  sprite[SPRITE.HAMMER_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
  sprite[SPRITE.HAMMER_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
  sprite[SPRITE.HAMMER_AMETHYST] = [];
  sprite[SPRITE.HAMMER_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
  sprite[SPRITE.HAMMER_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
  sprite[SPRITE.LOCK] = [];
  sprite[SPRITE.LOCK][SPRITE.DAY] = CTI(create_lock(.55, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
  sprite[SPRITE.LOCK][SPRITE.NIGHT] = CTI(create_lock(.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
  sprite[SPRITE.PADLOCK] = [];
  sprite[SPRITE.PADLOCK].push(CTI(create_lock(.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
  sprite[SPRITE.PADLOCK].push(CTI(create_lock(.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
  sprite[SPRITE.PADLOCK].push(CTI(create_lock(.8, false, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
  sprite[SPRITE.LOCKED] = [];
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKPICK] = [];
  sprite[SPRITE.LOCKPICK][SPRITE.DAY] = CTI(create_lockpick(.06, false, ["#141414", "#c4a23a", "#816511"]));
  sprite[SPRITE.LOCKPICK][SPRITE.NIGHT] = CTI(create_lockpick(.06, false, ["#030d14", "#2b6664", "#133d3c"]));
  sprite[SPRITE.KEY] = [];
  sprite[SPRITE.KEY].push(CTI(create_lockpick(.08, false, ["#141414", "#c4a23a", "#816511"])));
  sprite[SPRITE.KEY].push(CTI(create_lockpick(.08, false, ["#141414", "#e2bd4e", "#a38018"])));
  sprite[SPRITE.KEY].push(CTI(create_lockpick(.08, false, ["#141414", "#b0902e", "#634d09"])));
  sprite[SPRITE.DRAGON_HEART] = create_craft_button(1.5, [{f: create_dragon_heart, x: 0, y: 0, a: 1, r: 0, c: ["#141414", "#178a99", "#0a6372", "#03282e"]}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
  sprite[SPRITE.RESURRECTION_GROUND] = [];
  sprite[SPRITE.RESURRECTION_GROUND][SPRITE.DAY] = CTI(create_resurrection_ground(.8, true, ["#347f93", "#54a4ba"]));
  sprite[SPRITE.RESURRECTION_GROUND][SPRITE.NIGHT] = CTI(create_resurrection_ground(.8, true, ["#98ede3", "#94f2e7"]));
  sprite[SPRITE.RESURRECTION_HOLE] = [];
  sprite[SPRITE.RESURRECTION_HOLE][SPRITE.DAY] = CTI(create_resurrection_hole(.8, true, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
  sprite[SPRITE.RESURRECTION_HOLE][SPRITE.NIGHT] = CTI(create_resurrection_hole(.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
  sprite[SPRITE.RESURRECTION_ROTATE] = [];
  sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.DAY] = CTI(create_resurrection_rotate(.8, true, ["#a9e4ed", "#86d4e0"]));
  sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.NIGHT] = CTI(create_resurrection_rotate(.8, true, ["#83ddd4", "#485e66"]));
  sprite[SPRITE.RESURRECTION] = [];
  sprite[SPRITE.RESURRECTION][SPRITE.DAY] = CTI(create_resurrection(.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
  sprite[SPRITE.RESURRECTION][SPRITE.NIGHT] = CTI(create_resurrection(.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
  sprite[SPRITE.EMERALD_MACHINE_GROUND] = [];
  sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_GROUNDD;
  sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_GROUNDN;
  sprite[SPRITE.EMERALD_MACHINE_HOLE] = [];
  sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_HOLED;
  sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_HOLEN;
  sprite[SPRITE.EMERALD_MACHINE_ROTATE] = [];
  sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_ROTATED;
  sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_ROTATEN;
  sprite[SPRITE.EMERALD_MACHINE] = [];
  sprite[SPRITE.EMERALD_MACHINE][SPRITE.DAY] = IMAGES.EMERALD_MACHINED;
  sprite[SPRITE.EMERALD_MACHINE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINEN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_STONED;
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_STONEN;
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_STONED;
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_STONEN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_GOLDD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_GOLDN;
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_GOLDD;
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_GOLDN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDN;
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_DIAMONDD;
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_DIAMONDN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN;
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTD;
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_REIDITED;
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_REIDITEN;
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_REIDITED;
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_REIDITEN;
  sprite[SPRITE.FIREFLY] = [];
  sprite[SPRITE.FIREFLY][SPRITE.DAY] = IMAGES.FIREFLYD;
  sprite[SPRITE.FIREFLY][SPRITE.NIGHT] = IMAGES.FIREFLYN;
  sprite[SPRITE.HURT_FIREFLY] = IMAGES.HURT_FIREFLY;
  sprite[SPRITE.TOTEM] = [];
  sprite[SPRITE.TOTEM][SPRITE.DAY] = CTI(create_totem(.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
  sprite[SPRITE.TOTEM][SPRITE.NIGHT] = CTI(create_totem(.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
  sprite[SPRITE.ICON_MEMBER] = CTI(create_icon_team(.3, ["#092813", "#1f773d"], 0));
  sprite[SPRITE.ICON_LEADER] = CTI(create_icon_team(.3, ["#092813", "#1f773d"], 1));
  sprite[SPRITE.VERIFIED] = CTI(create_verified(.6, ["#092813", "#1f773d"]));
  sprite[SPRITE.TEAM_BUTTON] = [];
  sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
  sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
  sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
  sprite[SPRITE.FULL_TEAM_BUTTON] = [];
  var jeries = CTI(create_team_button(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
  sprite[SPRITE.FULL_TEAM_BUTTON].push(jeries);
  sprite[SPRITE.FULL_TEAM_BUTTON].push(jeries);
  sprite[SPRITE.FULL_TEAM_BUTTON].push(jeries);
  sprite[SPRITE.MANAGE_TEAM_BUTTON] = [];
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
  sprite[SPRITE.DELAY_SPIKE] = CTI(create_spiketimer(.3, ["#FFFFFF"]));
  sprite[SPRITE.DELAY_WALL] = CTI(create_delay_wall(.3, ["#FFFFFF"]));
  sprite[SPRITE.DELAY_TEAM] = CTI(create_icon_team(.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
  sprite[SPRITE.DELAY_DRINK] = CTI(create_rotated_img(Math.PI / 5, create_drink_delay(.2, ["#FFFFFF"])));
  sprite[SPRITE.AMETHYST_HELMET] = [];
  sprite[SPRITE.AMETHYST_HELMET][SPRITE.DAY] = CTI(create_amethyst_helmet(.85, true, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
  sprite[SPRITE.AMETHYST_HELMET][SPRITE.NIGHT] = CTI(create_amethyst_helmet(.85, true, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
  sprite[SPRITE.SHOW_TEAM_BUTTON] = [];
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
  sprite[SPRITE.HOOD] = [];
  sprite[SPRITE.HOOD][SPRITE.DAY] = CTI(create_hood(.37, true, ["#2a2938", "#242330", "#313041"]));
  sprite[SPRITE.HOOD][SPRITE.NIGHT] = CTI(create_hood(.37, true, ["#1b1e30", "#161921", "#252f3e"]));
  sprite[SPRITE.WINTER_HOOD] = [];
  sprite[SPRITE.WINTER_HOOD][SPRITE.DAY] = CTI(create_winter_hood(.17, true, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
  sprite[SPRITE.WINTER_HOOD][SPRITE.NIGHT] = CTI(create_winter_hood(.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
  sprite[SPRITE.WINTER_PEASANT] = [];
  sprite[SPRITE.WINTER_PEASANT][SPRITE.DAY] = CTI(create_peasant(.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
  sprite[SPRITE.WINTER_PEASANT][SPRITE.NIGHT] = CTI(create_peasant(.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
  sprite[SPRITE.PEASANT] = [];
  sprite[SPRITE.PEASANT][SPRITE.DAY] = CTI(create_peasant(.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
  sprite[SPRITE.PEASANT][SPRITE.NIGHT] = CTI(create_peasant(.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
  sprite[SPRITE.CROWN_GREEN] = [];
  sprite[SPRITE.CROWN_GREEN][SPRITE.DAY] = CTI(create_crown_life(.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
  sprite[SPRITE.CROWN_GREEN][SPRITE.NIGHT] = CTI(create_crown_life(.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
  sprite[SPRITE.CROWN_ORANGE] = [];
  sprite[SPRITE.CROWN_ORANGE][SPRITE.DAY] = CTI(create_crown_life(.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
  sprite[SPRITE.CROWN_ORANGE][SPRITE.NIGHT] = CTI(create_crown_life(.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
  sprite[SPRITE.CROWN_BLUE] = [];
  sprite[SPRITE.CROWN_BLUE][SPRITE.DAY] = CTI(create_crown_life(.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
  sprite[SPRITE.CROWN_BLUE][SPRITE.NIGHT] = CTI(create_crown_life(.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
  sprite[SPRITE.CROWN_CRAB] = [];
  sprite[SPRITE.CROWN_CRAB][SPRITE.DAY] = CTI(create_crab_crown(.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
  sprite[SPRITE.CROWN_CRAB][SPRITE.NIGHT] = CTI(create_crab_crown(.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
  sprite[SPRITE.DRAGON_HELMET] = [];
  sprite[SPRITE.DRAGON_HELMET][SPRITE.DAY] = CTI(create_dragon_helmet(.32, true, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
  sprite[SPRITE.DRAGON_HELMET][SPRITE.NIGHT] = CTI(create_dragon_helmet(.32, true, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
  sprite[SPRITE.DRAGON_SWORD] = [];
  sprite[SPRITE.DRAGON_SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_sword(.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
  sprite[SPRITE.DRAGON_SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_sword(.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
  sprite[SPRITE.DRAGON_SWORD_HALO] = [];
  sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_sword(1, true, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
  sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_sword(1, true, [undefined, undefined, undefined, "#87d2e6", "#87d2e6"])));
  sprite[SPRITE.QUEST_BUTTON] = [];
  sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
  sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
  sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
  sprite[SPRITE.MARKET_BUTTON] = [];
  sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
  sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
  sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
  sprite[SPRITE.SOUND_BUTTON_ON] = [];
  sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
  sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
  sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
  sprite[SPRITE.SOUND_BUTTON_OFF] = [];
  sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
  sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
  sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
  sprite[SPRITE.SHOVEL] = [];
  sprite[SPRITE.SHOVEL][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
  sprite[SPRITE.SHOVEL][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
  sprite[SPRITE.SHOVEL_GOLD] = [];
  sprite[SPRITE.SHOVEL_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
  sprite[SPRITE.SHOVEL_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
  sprite[SPRITE.SHOVEL_DIAMOND] = [];
  sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
  sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
  sprite[SPRITE.SHOVEL_AMETHYST] = [];
  sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
  sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
  sprite[SPRITE.SHOP] = [];
  sprite[SPRITE.SHOP].push(CTI(create_shop(.7, ["#3b330d", "#b5a118", "#c8ac16"], 0)));
  sprite[SPRITE.SHOP].push(CTI(create_shop(.7, ["#524712", "#c7b11c", "#d9ba18"], 0)));
  sprite[SPRITE.SHOP].push(CTI(create_shop(.7, ["#2a2409", "#9f8e14", "#ad9511"], 0)));
  sprite[SPRITE.HURT_WOLF] = CTI(create_hurt_wolf(1.1, ["#BB0000"]));
  sprite[SPRITE.HURT_SPIDER] = CTI(create_rotated_img(Math.PI, create_hurt_spider(.9, "#BB0000")));
  sprite[SPRITE.EXPLORER_HAT] = [];
  sprite[SPRITE.EXPLORER_HAT][SPRITE.DAY] = CTI(create_explorer_hat(.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
  sprite[SPRITE.EXPLORER_HAT][SPRITE.NIGHT] = CTI(create_explorer_hat(.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
  sprite[SPRITE.WOOD_HELMET] = [];
  sprite[SPRITE.WOOD_HELMET][SPRITE.DAY] = CTI(create_wooden_helmet(.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
  sprite[SPRITE.WOOD_HELMET][SPRITE.NIGHT] = CTI(create_wooden_helmet(.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
  sprite[SPRITE.STONE_HELMET] = [];
  sprite[SPRITE.STONE_HELMET][SPRITE.DAY] = CTI(create_viking_hat(.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
  sprite[SPRITE.STONE_HELMET][SPRITE.NIGHT] = CTI(create_viking_hat(.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
  sprite[SPRITE.GOLD_HELMET] = [];
  sprite[SPRITE.GOLD_HELMET][SPRITE.DAY] = CTI(create_gold_helmet(.58, true, ["#dbce71", "#b29c32", "#c4bc51"]));
  sprite[SPRITE.GOLD_HELMET][SPRITE.NIGHT] = CTI(create_gold_helmet(.58, true, ["#2b7c57", "#15543c", "#1a7961"]));
  sprite[SPRITE.DIAMOND_HELMET] = [];
  sprite[SPRITE.DIAMOND_HELMET][SPRITE.DAY] = CTI(create_diamond_helmet(.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
  sprite[SPRITE.DIAMOND_HELMET][SPRITE.NIGHT] = CTI(create_diamond_helmet(.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.FIR] = [];
  sprite[SPRITE.FIR][SPRITE.DAY] = [];
  sprite[SPRITE.FIR][SPRITE.NIGHT] = [];
  sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_three(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
  sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_two(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
  sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_one(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_three(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_two(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_one(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
  sprite[SPRITE.DRAGON] = [];
  sprite[SPRITE.DRAGON][SPRITE.DAY] = CTI(create_dragon(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
  sprite[SPRITE.DRAGON][SPRITE.NIGHT] = CTI(create_dragon(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
  sprite[SPRITE.WING_LEFT] = [];
  sprite[SPRITE.WING_LEFT][SPRITE.DAY] = CTI(create_wingleft(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
  sprite[SPRITE.WING_LEFT][SPRITE.NIGHT] = CTI(create_wingleft(1, ["#050505", "#327570", "#021724", "#200333"]));
  sprite[SPRITE.WING_RIGHT] = [];
  sprite[SPRITE.WING_RIGHT][SPRITE.DAY] = CTI(create_wingright(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
  sprite[SPRITE.WING_RIGHT][SPRITE.NIGHT] = CTI(create_wingright(1, ["#050505", "#327570", "#021724", "#200333"]));
  sprite[SPRITE.DECORATION] = [];
  sprite[SPRITE.DECORATION][SPRITE.DAY] = [];
  sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [];
  sprite[SPRITE.DECORATION][SPRITE.DAY] = [IMAGES.DECORATION_0D, IMAGES.DECORATION_1D, IMAGES.DECORATION_2D, IMAGES.DECORATION_3D, IMAGES.DECORATION_4D, IMAGES.DECORATION_5D, IMAGES.DECORATION_6D, IMAGES.DECORATION_7D, IMAGES.DECORATION_8D, IMAGES.DECORATION_9D, IMAGES.DECORATION_10D, IMAGES.DECORATION_11D, IMAGES.DECORATION_12D, IMAGES.DECORATION_13D, IMAGES.DECORATION_14D, IMAGES.DECORATION_15D, IMAGES.DECORATION_16D, IMAGES.DECORATION_17D, IMAGES.DECORATION_18D, IMAGES.DECORATION_19D, IMAGES.DECORATION_20D, IMAGES.DECORATION_21D, IMAGES.DECORATION_22D, IMAGES.DECORATION_23D, IMAGES.DECORATION_24D, IMAGES.DECORATION_25D, IMAGES.DECORATION_26D, IMAGES.DECORATION_27D, IMAGES.DECORATION_28D, IMAGES.DECORATION_29D, IMAGES.DECORATION_30D, IMAGES.DECORATION_31D, IMAGES.DECORATION_32D, IMAGES.DECORATION_33D, IMAGES.DECORATION_34D, IMAGES.DECORATION_35D, IMAGES.DECORATION_36D, IMAGES.DECORATION_37D, IMAGES.DECORATION_38D, IMAGES.DECORATION_39D, IMAGES.DECORATION_40D, IMAGES.DECORATION_41D, IMAGES.DECORATION_42D, IMAGES.DECORATION_43D, IMAGES.DECORATION_44D, IMAGES.DECORATION_45D, IMAGES.DECORATION_46D, IMAGES.DECORATION_47D, IMAGES.DECORATION_48D, IMAGES.DECORATION_49D, IMAGES.DECORATION_50D, IMAGES.DECORATION_51D, IMAGES.DECORATION_52D, IMAGES.DECORATION_53D, IMAGES.DECORATION_54D, IMAGES.DECORATION_55D];
  sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [IMAGES.DECORATION_0N, IMAGES.DECORATION_1N, IMAGES.DECORATION_2N, IMAGES.DECORATION_3N, IMAGES.DECORATION_4N, IMAGES.DECORATION_5N, IMAGES.DECORATION_6N, IMAGES.DECORATION_7N, IMAGES.DECORATION_8N, IMAGES.DECORATION_9N, IMAGES.DECORATION_10N, IMAGES.DECORATION_11N, IMAGES.DECORATION_12N, IMAGES.DECORATION_13N, IMAGES.DECORATION_14N, IMAGES.DECORATION_15N, IMAGES.DECORATION_16N, IMAGES.DECORATION_17N, IMAGES.DECORATION_18N, IMAGES.DECORATION_19N, IMAGES.DECORATION_20N, IMAGES.DECORATION_21N, IMAGES.DECORATION_22N, IMAGES.DECORATION_23N, IMAGES.DECORATION_24N, IMAGES.DECORATION_25N, IMAGES.DECORATION_26N, IMAGES.DECORATION_27N, IMAGES.DECORATION_28N, IMAGES.DECORATION_29N, IMAGES.DECORATION_30N, IMAGES.DECORATION_31N, IMAGES.DECORATION_32N, IMAGES.DECORATION_33N, IMAGES.DECORATION_34N, IMAGES.DECORATION_35N, IMAGES.DECORATION_36N, IMAGES.DECORATION_37N, IMAGES.DECORATION_38N, IMAGES.DECORATION_39N, IMAGES.DECORATION_40N, IMAGES.DECORATION_41N, IMAGES.DECORATION_42N, IMAGES.DECORATION_43N, IMAGES.DECORATION_44N, IMAGES.DECORATION_45N, IMAGES.DECORATION_46N, IMAGES.DECORATION_47N, IMAGES.DECORATION_48N, IMAGES.DECORATION_49N, IMAGES.DECORATION_50N, IMAGES.DECORATION_51N, IMAGES.DECORATION_52N, IMAGES.DECORATION_53N, IMAGES.DECORATION_54N, IMAGES.DECORATION_55N];
  sprite[SPRITE.CAVE_STONES] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(.9, false, ["#252B28", "#747471", "#83827e"], 1)));
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(1, false, ["#252B28", "#747471", "#83827e"], 2)));
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(.9, false, ["#252B28", "#747471", "#83827e"], 2)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(1, false, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(1, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.GOLD_WINTER] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(1.5, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(1.3, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(1.1, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(1.5, false, ["#0a2728", "#3e8989", "#50a09c"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(1.3, false, ["#0a2728", "#3e8989", "#50a09c"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(1.1, false, ["#0a2728", "#3e8989", "#50a09c"])));
  sprite[SPRITE.DIAMOND_WINTER] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(1.1, false, ["#123d38", "#70e0dd", "#95efea"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(.9, false, ["#123d38", "#70e0dd", "#95efea"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(.7, false, ["#123d38", "#70e0dd", "#95efea"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(1.1, false, ["#123d38", "#47b2ac", "#5cccc4"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(.9, false, ["#123d38", "#47b2ac", "#5cccc4"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(.7, false, ["#123d38", "#47b2ac", "#5cccc4"])));
  sprite[SPRITE.AMETHYST] = [];
  sprite[SPRITE.AMETHYST][SPRITE.DAY] = [];
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT] = [];
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
  sprite[SPRITE.WATERBLOCK] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.DAY] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.DAY].push(CTI(create_dragon_ground(1, ["#2d53c4"])));
  sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT].push(CTI(create_dragon_ground(1, ["#2d53c4"])));
  sprite[SPRITE.ISLAND_BLOCK] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY].push(CTI(create_dragon_ground(1, ["#c4912d"])));
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT].push(CTI(create_dragon_ground(1, ["#c4912d"])));
  sprite[SPRITE.CAVE_STEP] = [];
  sprite[SPRITE.CAVE_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#414040"]));
  sprite[SPRITE.CAVE_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#153635"]));
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_wood(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_wood(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_stone(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_stone(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_stone(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_stone(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_diamond(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_diamond(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_gold(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_gold(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.FOX] = [];
  sprite[SPRITE.FOX][SPRITE.DAY] = CTI(create_winter_fox(.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
  sprite[SPRITE.FOX][SPRITE.NIGHT] = CTI(create_winter_fox(.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
  sprite[SPRITE.BEAR] = [];
  sprite[SPRITE.BEAR][SPRITE.DAY] = CTI(create_polar_bear(.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
  sprite[SPRITE.BEAR][SPRITE.NIGHT] = CTI(create_polar_bear(.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
  sprite[SPRITE.MINIMAP] = [];
  sprite[SPRITE.MINIMAP_CTX] = [];
  sprite[SPRITE.BIGMAP] = [];
  sprite[SPRITE.BIGMAP_CTX] = [];
  for (var marleena = 0; marleena < 2; marleena++) {
    sprite[SPRITE.MINIMAP][marleena] = document.createElement("canvas");
    sprite[SPRITE.MINIMAP][marleena].width = 193;
    sprite[SPRITE.MINIMAP][marleena].height = 193;
    sprite[SPRITE.MINIMAP_CTX][marleena] = sprite[SPRITE.MINIMAP][marleena].getContext("2d");
    sprite[SPRITE.BIGMAP][marleena] = document.createElement("canvas");
    sprite[SPRITE.BIGMAP][marleena].width = 600;
    sprite[SPRITE.BIGMAP][marleena].height = 600;
    sprite[SPRITE.BIGMAP_CTX][marleena] = sprite[SPRITE.BIGMAP][marleena].getContext("2d");
  }
  sprite[SPRITE.SNOW_STEP] = [];
  sprite[SPRITE.SNOW_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#c8e0de"]));
  sprite[SPRITE.SNOW_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#147071"]));
  sprite[SPRITE.LAVA_STEP] = [];
  sprite[SPRITE.LAVA_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#231912"]));
  sprite[SPRITE.LAVA_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#021719"]));
  sprite[SPRITE.HURT_TREASURE_CHEST] = CTI(create_hurt_treasure_chest(.5, ["#BB0000"]));
  sprite[SPRITE.HURT_FOX] = CTI(create_hurt_fox_winter(.9, "#BB0000"));
  sprite[SPRITE.HURT_BEAR] = CTI(create_hurt_polar_bear(.9, "#BB0000"));
  sprite[SPRITE.HURT_DRAGON] = CTI(create_hurt_dragon(1, ["#BB0000"]));
  sprite[SPRITE.HURT_WING_LEFT] = CTI(create_hurt_wingleft(.8, "#BB0000"));
  sprite[SPRITE.HURT_WING_RIGHT] = CTI(create_hurt_wingright(.8, "#BB0000"));
  sprite[SPRITE.HURT_RABBIT] = CTI(create_hurt_rabbit(.9, "#BB0000"));
  sprite[SPRITE.HURT] = CTI(create_hurt_player(.6, "#BB0000"));
  sprite[SPRITE.COLD] = CTI(create_hurt_player(.6, "#1CE7E0"));
  sprite[SPRITE.HUNGER] = CTI(create_hurt_player(.6, "#DBE71C"));
  sprite[SPRITE.HEAL] = CTI(create_hurt_player(.6, "#00BB00"));
  sprite[SPRITE.SAND_STEP] = [];
  sprite[SPRITE.SAND_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#dac291"]));
  sprite[SPRITE.SAND_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#0D423D"]));
  sprite[SPRITE.ISLAND_STEP] = [];
  sprite[SPRITE.ISLAND_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#dac291"]));
  sprite[SPRITE.ISLAND_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#0D423D"]));
  sprite[SPRITE.WELL_FULL] = [];
  sprite[SPRITE.WELL_FULL][SPRITE.DAY] = CTI(create_well(.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
  sprite[SPRITE.WELL_FULL][SPRITE.NIGHT] = CTI(create_well(.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
  sprite[SPRITE.WELL_EMPTY] = [];
  sprite[SPRITE.WELL_EMPTY][SPRITE.DAY] = CTI(create_well(.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
  sprite[SPRITE.WELL_EMPTY][SPRITE.NIGHT] = CTI(create_well(.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
  sprite[SPRITE.BOTTLE_FULL] = [CTI(create_bottle(1, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
  sprite[SPRITE.BOTTLE_EMPTY] = [CTI(create_bottle(1, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
  sprite[SPRITE.OCEAN] = [];
  sprite[SPRITE.OCEAN][SPRITE.DAY] = [];
  sprite[SPRITE.OCEAN][SPRITE.NIGHT] = [];
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_one(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_two(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_three(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_four(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_five(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_six(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_sept(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_one(1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_two(1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_three(1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_four(1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_five(1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_six(1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_sept(1, ["#09373F"])));
  sprite[SPRITE.ISLAND] = [];
  sprite[SPRITE.ISLAND][SPRITE.DAY] = [];
  sprite[SPRITE.ISLAND][SPRITE.NIGHT] = [];
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(1.7, ["#FBEFBC"], 0)));
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(1.9, ["#FBEFBC"], 1)));
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(1.7, ["#FBEFBC"], 2)));
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(1.7, ["#0F4C48"], 0)));
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(1.9, ["#0F4C48"], 1)));
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(1.7, ["#0F4C48"], 2)));
  sprite[SPRITE.WAVE_ONE] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(1.8, ["#A9D6D3"], 0)));
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(2, ["#A9D6D3"], 1)));
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(1.8, ["#A9D6D3"], 2)));
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(1.8, ["#115E60"], 0)));
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(2, ["#115E60"], 1)));
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(1.8, ["#115E60"], 2)));
  sprite[SPRITE.WAVE_TWO] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(1.9, ["#2A8B9B"], 0)));
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(2.1, ["#2A8B9B"], 1)));
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(1.9, ["#2A8B9B"], 2)));
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(1.9, ["#0F464C"], 0)));
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(2.1, ["#0F464C"], 1)));
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(1.9, ["#0F464C"], 2)));
  sprite[SPRITE.PALM] = [];
  sprite[SPRITE.PALM][SPRITE.DAY] = [];
  sprite[SPRITE.PALM][SPRITE.NIGHT] = [];
  sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
  sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
  sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
  sprite[SPRITE.KRAKEN] = [];
  sprite[SPRITE.KRAKEN][SPRITE.DAY] = CTI(create_kraken(.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
  sprite[SPRITE.KRAKEN][SPRITE.NIGHT] = CTI(create_kraken(.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
  sprite[SPRITE.HURT_KRAKEN] = CTI(create_hurt_kraken(.8, ["#B6222A"]));
  sprite[SPRITE.PIRANHA] = [];
  sprite[SPRITE.PIRANHA][SPRITE.DAY] = CTI(create_pirahna(.8, true, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
  sprite[SPRITE.PIRANHA][SPRITE.NIGHT] = CTI(create_pirahna(.8, true, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
  sprite[SPRITE.HURT_PIRANHA] = CTI(create_hurt_pirahna(.8, ["#B6222A"]));
  sprite[SPRITE.FISH1] = [];
  sprite[SPRITE.FISH1][SPRITE.DAY] = CTI(create_fish1(.4, true, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
  sprite[SPRITE.FISH1][SPRITE.NIGHT] = CTI(create_fish1(.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
  sprite[SPRITE.FISH2] = [];
  sprite[SPRITE.FISH2][SPRITE.DAY] = CTI(create_fish1(.4, true, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
  sprite[SPRITE.FISH2][SPRITE.NIGHT] = CTI(create_fish1(.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
  sprite[SPRITE.FISH3] = [];
  sprite[SPRITE.FISH3][SPRITE.DAY] = CTI(create_fish1(.4, true, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
  sprite[SPRITE.FISH3][SPRITE.NIGHT] = CTI(create_fish1(.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
  sprite[SPRITE.HURT_FISH1] = CTI(create_hurt_fish1(.4, ["#B6222A"]));
  sprite[SPRITE.HURT_FISH2] = CTI(create_hurt_fish1(.4, ["#B6222A"]));
  sprite[SPRITE.HURT_FISH3] = CTI(create_hurt_fish1(.4, ["#B6222A"]));
  sprite[SPRITE.CRAB_LOOT] = CTI(create_crab_loot(.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"], 1));
  sprite[SPRITE.CRAB_STICK] = CTI(create_crab_stick(.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"], 1));
  sprite[SPRITE.CRAB_ATTACK] = [];
  sprite[SPRITE.CRAB_ATTACK][SPRITE.DAY] = CTI(create_crab(.35, true, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
  sprite[SPRITE.CRAB_ATTACK][SPRITE.NIGHT] = CTI(create_crab(.35, true, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
  sprite[SPRITE.CRAB] = [];
  sprite[SPRITE.CRAB][SPRITE.DAY] = CTI(create_crab(.35, true, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
  sprite[SPRITE.CRAB][SPRITE.NIGHT] = CTI(create_crab(.35, true, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
  sprite[SPRITE.CRAB_CLAW_LEFT] = [];
  sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.DAY] = CTI(create_crab_claw_left(.35, true, ["#1e2021", "#e45936", "#ffffff"]));
  sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.NIGHT] = CTI(create_crab_claw_left(.35, true, ["#0c0c0d", "#34255d", "#563f83"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT] = [];
  sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.DAY] = CTI(create_crab_claw_right(.42, true, ["#1e2021", "#e45936", "#ffffff"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.NIGHT] = CTI(create_crab_claw_right(.42, true, ["#0c0c0d", "#34255d", "#563f83"]));
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK] = [];
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.DAY] = CTI(create_crab_claw_left(.35, true, ["#1e2021", "#e45936", "#B6222A"]));
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = CTI(create_crab_claw_left(.35, true, ["#0c0c0d", "#613577", "#462966"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK] = [];
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.DAY] = CTI(create_crab_claw_right(.42, true, ["#1e2021", "#e45936", "#B6222A"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = CTI(create_crab_claw_right(.42, true, ["#0c0c0d", "#613577", "#462966"]));
  sprite[SPRITE.HURT_CRAB] = CTI(create_hurt_crab(.35, ["#B6222A"]));
  sprite[SPRITE.HURT_CRAB_CLAW_LEFT] = CTI(create_crab_claw_left(.35, true, [undefined, "#B6222A"]));
  sprite[SPRITE.HURT_CRAB_CLAW_RIGHT] = CTI(create_crab_claw_right(.35, true, [undefined, "#B6222A"]));
  sprite[SPRITE.HEAL_CRAB] = CTI(create_hurt_crab(.35, ["#22E066"]));
  sprite[SPRITE.HEAL_CRAB_CLAW_LEFT] = CTI(create_crab_claw_left(.35, true, [undefined, "#22E066"]));
  sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT] = CTI(create_crab_claw_right(.35, true, [undefined, "#22E066"]));
  sprite[SPRITE.DIVING_MASK] = [];
  sprite[SPRITE.DIVING_MASK][SPRITE.DAY] = CTI(create_divingmask(.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
  sprite[SPRITE.DIVING_MASK][SPRITE.NIGHT] = CTI(create_divingmask(.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
  sprite[SPRITE.SUPER_DIVING_SUIT] = [];
  sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.DAY] = CTI(create_superdivingsuit(.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
  sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.NIGHT] = CTI(create_superdivingsuit(.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
  sprite[SPRITE.PLOT] = [];
  sprite[SPRITE.PLOT][SPRITE.DAY] = CTI(create_plot(.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
  sprite[SPRITE.PLOT][SPRITE.NIGHT] = CTI(create_plot(.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
  sprite[SPRITE.BRIDGE] = [];
  sprite[SPRITE.BRIDGE][SPRITE.DAY] = CTI(create_bridge(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
  sprite[SPRITE.BRIDGE][SPRITE.NIGHT] = CTI(create_bridge(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
  sprite[SPRITE.WOOD_TOWER] = [];
  sprite[SPRITE.WOOD_TOWER][SPRITE.DAY] = IMAGES.WOOD_TOWERD;
  sprite[SPRITE.WOOD_TOWER][SPRITE.NIGHT] = IMAGES.WOOD_TOWERN;
  sprite[SPRITE.ROOF] = [];
  sprite[SPRITE.ROOF][SPRITE.DAY] = CTI(create_roof(.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
  sprite[SPRITE.ROOF][SPRITE.NIGHT] = CTI(create_roof(.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
  sprite[SPRITE.ROOFS] = [sprite[SPRITE.ROOF]];
  sprite[SPRITE.ROOFS][1] = [];
  sprite[SPRITE.ROOFS][2] = [];
  sprite[SPRITE.ROOFS][1][SPRITE.DAY] = CTI(create_roof1(.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
  sprite[SPRITE.ROOFS][1][SPRITE.NIGHT] = CTI(create_roof1(.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
  sprite[SPRITE.ROOFS][2][SPRITE.DAY] = CTI(create_roof2(.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
  sprite[SPRITE.ROOFS][2][SPRITE.NIGHT] = CTI(create_roof2(.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
  sprite[SPRITE.WATERING_CAN_FULL] = [];
  sprite[SPRITE.WATERING_CAN_FULL][SPRITE.DAY] = CTI(create_rotated_img(3 - Math.PI / 2, create_watering_can(.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
  sprite[SPRITE.WATERING_CAN_FULL][SPRITE.NIGHT] = CTI(create_rotated_img(3 - Math.PI / 2, create_watering_can(.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
  sprite[SPRITE.DEAD_BOX] = [];
  sprite[SPRITE.DEAD_BOX][SPRITE.DAY] = CTI(create_dead_box(.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
  sprite[SPRITE.DEAD_BOX][SPRITE.NIGHT] = CTI(create_dead_box(.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
  sprite[SPRITE.DEAD_BOX_UI] = CTI(create_dead_box_ui(.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
  sprite[SPRITE.HURT_DEAD_BOX] = CTI(create_hurt_dead_box(.3, ["#BB0000"]));
  sprite[SPRITE.WINDMILL_FLOUR] = create_craft_button(1, [{f: create_flour, x: 0, y: 0, a: 1, r: 0, c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]}], .25, ["#d2c77b", "#e7dc8f", "#bfb360"], .7);
  sprite[SPRITE.LAVA_HEART] = create_craft_button(1.5, [{f: create_dragon_heart, x: 0, y: 0, a: 1, r: 0, c: ["#120202", "#750a0a", "#991616", "#120202"]}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
  sprite[SPRITE.HEART_SYMBOL_HUD] = create_symbol_hud(.35, ["#072428", "#67A242", "#67A242"], 0);
  sprite[SPRITE.COLD_SYMBOL_HUD] = create_symbol_hud(.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
  sprite[SPRITE.FOOD_SYMBOL_HUD] = create_symbol_hud(.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
  sprite[SPRITE.WATER_SYMBOL_HUD] = create_symbol_hud(.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
  if (!mobile) {
    sprite[SPRITE.LEADERBOARD] = CTI(create_leaderboard(1));
  } else {
    sprite[SPRITE.LEADERBOARD] = CTI(create_leaderboard_mobile(1));
  }
  if (!mobile) {
    sprite[SPRITE.GAUGES] = CTI(create_gauges(1));
  } else {
    sprite[SPRITE.GAUGES] = CTI(create_gauges_mobile(.75));
  }
  if (!mobile) {
    sprite[SPRITE.OXYGEN] = CTI(create_oxygen_gauges(1));
  } else {
    sprite[SPRITE.OXYGEN] = CTI(create_oxygen_gauges(.75));
  }
  sprite[SPRITE.DELAY_HELMET] = CTI(create_viking_hat(.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
  sprite[SPRITE.DELAY_WEAPON] = CTI(create_rotated_img(5.8, create_sword(.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
  sprite[SPRITE.COUNTER] = [];
  sprite[SPRITE.SLOT_NUMBER] = [];
  for (var marleena = 0; marleena < WORLD.WITH_BAG + 2; marleena++) {
    sprite[SPRITE.SLOT_NUMBER][marleena] = create_text(1, "" + (marleena + 1), 12, "#FFF");
  }
  sprite[SPRITE.RECIPE_BUTTON] = [];
  sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
  sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
  sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
  sprite[SPRITE.CLOCK] = [];
  sprite[SPRITE.CLOCK].push(CTI(create_clock_day(.22)));
  sprite[SPRITE.CLOCK].push(CTI(create_clock_night(.22)));
  sprite[SPRITE.ARROW_CLOCK] = CTI(create_arrow_clock(.22));
  sprite[SPRITE.OPTION_BUTTON] = [];
  sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(1.5, ["#795026", "#654320", "#eda80d"], 0)));
  sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
  sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
  sprite[SPRITE.AUTO_FEED] = IMAGES.AUTO_FEED;
  sprite[SPRITE.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED;
  sprite[SPRITE.STOP_REGENERATION] = IMAGES.STOP_REGENERATION;
  sprite[SPRITE.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD;
  sprite[SPRITE.SHOW_SPECTATORS] = create_text(1, "Show spectators", 25, "#FFF", undefined, undefined, "#000", 5, 220);
  sprite[SPRITE.RECONNECT] = create_text(1, "Reconnecting...", 30, "#FFF");
  console.log("Load canvas", Date.now() - beautiful);
}
function init_fake_world() {
  document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
  fake_world.items.push(new Item(ITEMS.FIRE, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
  fake_world.items.push(new Item(ITEMS.WORKBENCH, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
}
function draw_fake_world() {
  var atanacio = fake_world.time;
  if (sprite[SPRITE.HERB]) {
    ctx.drawImage(sprite[SPRITE.HERB][atanacio][1], canw2 + 480, canh2 + 190);
    ctx.drawImage(sprite[SPRITE.HERB][atanacio][2], canw2 + 180, canh2 - 430);
    ctx.drawImage(sprite[SPRITE.HERB][atanacio][1], canw2 - 855, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.HERB][atanacio][0], canw2 - 550, canh2 - 300);
    ctx.drawImage(sprite[SPRITE.HERB][atanacio][0], canw2 - 1020, canh2 - 520);
  }
  if (sprite[SPRITE.STONES]) {
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][1], canw2 - 80, canh2 - 640);
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][1], canw2 + 80, canh2 + 490);
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][2], canw2 - 180, canh2 - 700);
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][0], canw2 + 550, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][1], canw2 + 450, canh2 + 300);
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][1], canw2 + 780, canh2 + 300);
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][2], canw2 + 980, canh2 + 200);
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][2], canw2 + 680, canh2 + 600);
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][2], canw2 - 380, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.STONES][atanacio][2], canw2 + 280, canh2 + 250);
  }
  sprite[SPRITE.PLANT] && (ctx.drawImage(sprite[SPRITE.PLANT][atanacio][0], canw2 - 590, canh2), ctx.drawImage(sprite[SPRITE.PLANT][atanacio][0], canw2 + 120, canh2 - 390), ctx.drawImage(sprite[SPRITE.PLANT][atanacio][0], canw2 - 270, canh2 + 340));
  if (sprite[SPRITE.TREE]) {
    ctx.drawImage(sprite[SPRITE.TREE][atanacio][4], canw2 - 700, canh2 - 600);
    ctx.drawImage(sprite[SPRITE.TREE][atanacio][2], canw2 - 970, canh2 - 250);
    ctx.drawImage(sprite[SPRITE.TREE][atanacio][5], canw2 - 720, canh2 - 200);
    ctx.drawImage(sprite[SPRITE.TREE][atanacio][2], canw2 - 1020, canh2 + 340);
    ctx.drawImage(sprite[SPRITE.TREE][atanacio][0], canw2 - 1120, canh2 - 0);
    ctx.drawImage(sprite[SPRITE.TREE][atanacio][1], canw2 - 650, canh2 - 330);
    ctx.drawImage(sprite[SPRITE.TREE][atanacio][4], canw2 - 495, canh2 - 90);
    ctx.drawImage(sprite[SPRITE.TREE][atanacio][3], canw2 - 520, canh2 + 340);
    ctx.drawImage(sprite[SPRITE.TREE][atanacio][2], canw2 + 830, canh2 - 520);
  }
  if (sprite[SPRITE.FIR]) {}
  if (user && world) {
    var jaisley = user.cam.x;
    var sima = user.cam.y;
    user.cam.x = canw2;
    user.cam.y = canh2;
    var dalva = world.time;
    world.time = fake_world.time;
    var rhodora = fake_world.items;
    rhodora[2].x = 400;
    rhodora[2].y = 100;
    rhodora[2].draw(SPRITE.WORKBENCH);
    var laroyce = rhodora[1];
    laroyce.x = -500;
    laroyce.y = 100;
    laroyce.fruits[0].x = laroyce.x - 20.5;
    laroyce.fruits[0].y = laroyce.y - 22.5;
    laroyce.fruits[1].x = laroyce.x - 35.5;
    laroyce.fruits[1].y = laroyce.y + 7.5;
    laroyce.fruits[2].x = laroyce.x + 7.5;
    laroyce.fruits[2].y = laroyce.y - 30;
    laroyce.fruits[3].x = laroyce.x + 22.5;
    laroyce.fruits[3].y = laroyce.y;
    laroyce.fruits[4].x = laroyce.x - 7.5;
    laroyce.fruits[4].y = laroyce.y + 14.5;
    for (var carmeleta = 0; carmeleta < laroyce.info; carmeleta++) {
      laroyce.fruits[carmeleta].draw(SPRITE.FRUIT);
    }
    var laroyce = rhodora[3];
    laroyce.x = 210;
    laroyce.y = -290;
    laroyce.fruits[0].x = laroyce.x - 20.5;
    laroyce.fruits[0].y = laroyce.y - 22.5;
    laroyce.fruits[1].x = laroyce.x - 35.5;
    laroyce.fruits[1].y = laroyce.y + 7.5;
    laroyce.fruits[2].x = laroyce.x + 7.5;
    laroyce.fruits[2].y = laroyce.y - 30;
    laroyce.fruits[3].x = laroyce.x + 22.5;
    laroyce.fruits[3].y = laroyce.y;
    laroyce.fruits[4].x = laroyce.x - 7.5;
    laroyce.fruits[4].y = laroyce.y + 14.5;
    for (var carmeleta = 0; carmeleta < laroyce.info; carmeleta++) {
      laroyce.fruits[carmeleta].draw(SPRITE.FRUIT);
    }
    rhodora[0].x = 450;
    rhodora[0].y = -100;
    rhodora[0].draw_bg(SPRITE.WOOD_FIRE);
    rhodora[0].draw_fg();
    user.cam.x = jaisley;
    user.cam.y = sima;
    world.time = dalva;
  }
}
function render_inventory() {
  sprite[SPRITE.INV_PUMPKIN] = create_craft_button(1, [{f: create_pumpkin, x: 0, y: 0, a: 1, r: 0, c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]}], .2, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CHEST_PUMPKIN] = sprite[SPRITE.INV_PUMPKIN];
  sprite[SPRITE.INV_CARROT] = [];
  sprite[SPRITE.INV_CARROT][0] = IMAGES.INV_CARROT_OUT;
  sprite[SPRITE.INV_CARROT][1] = IMAGES.INV_CARROT_IN;
  sprite[SPRITE.INV_CARROT][2] = IMAGES.INV_CARROT_CLICK;
  sprite[SPRITE.CHEST_CARROT] = sprite[SPRITE.INV_CARROT];
  sprite[SPRITE.INV_WATERMELON] = [];
  sprite[SPRITE.INV_WATERMELON][0] = IMAGES.INV_WATERMELON_OUT;
  sprite[SPRITE.INV_WATERMELON][1] = IMAGES.INV_WATERMELON_IN;
  sprite[SPRITE.INV_WATERMELON][2] = IMAGES.INV_WATERMELON_CLICK;
  sprite[SPRITE.CHEST_WATERMELON] = sprite[SPRITE.INV_WATERMELON];
  sprite[SPRITE.INV_ALOE_VERA] = [];
  sprite[SPRITE.INV_ALOE_VERA][0] = IMAGES.INV_ALOE_VERA_OUT;
  sprite[SPRITE.INV_ALOE_VERA][1] = IMAGES.INV_ALOE_VERA_IN;
  sprite[SPRITE.INV_ALOE_VERA][2] = IMAGES.INV_ALOE_VERA_CLICK;
  sprite[SPRITE.CHEST_ALOE_VERA] = sprite[SPRITE.INV_ALOE_VERA];
  sprite[SPRITE.INV_CACTUS] = [];
  sprite[SPRITE.INV_CACTUS][0] = IMAGES.INV_CACTUS_OUT;
  sprite[SPRITE.INV_CACTUS][1] = IMAGES.INV_CACTUS_IN;
  sprite[SPRITE.INV_CACTUS][2] = IMAGES.INV_CACTUS_CLICK;
  sprite[SPRITE.CHEST_CACTUS] = sprite[SPRITE.INV_CACTUS];
  sprite[SPRITE.INV_TOMATO] = [];
  sprite[SPRITE.INV_TOMATO][0] = IMAGES.INV_TOMATO_OUT;
  sprite[SPRITE.INV_TOMATO][1] = IMAGES.INV_TOMATO_IN;
  sprite[SPRITE.INV_TOMATO][2] = IMAGES.INV_TOMATO_CLICK;
  sprite[SPRITE.CHEST_TOMATO] = sprite[SPRITE.INV_TOMATO];
  sprite[SPRITE.INV_BOAT] = [];
  sprite[SPRITE.INV_BOAT][0] = IMAGES.INV_BOAT_OUT;
  sprite[SPRITE.INV_BOAT][1] = IMAGES.INV_BOAT_IN;
  sprite[SPRITE.INV_BOAT][2] = IMAGES.INV_BOAT_CLICK;
  sprite[SPRITE.CHEST_BOAT] = sprite[SPRITE.INV_BOAT];
  sprite[SPRITE.CRAFT_BOAT] = sprite[SPRITE.INV_BOAT];
  sprite[SPRITE.INV_MACHETE] = [];
  sprite[SPRITE.INV_MACHETE][0] = IMAGES.INV_MACHETE_OUT;
  sprite[SPRITE.INV_MACHETE][1] = IMAGES.INV_MACHETE_IN;
  sprite[SPRITE.INV_MACHETE][2] = IMAGES.INV_MACHETE_CLICK;
  sprite[SPRITE.CHEST_MACHETE] = sprite[SPRITE.INV_MACHETE];
  sprite[SPRITE.CRAFT_MACHETE] = sprite[SPRITE.INV_MACHETE];
  sprite[SPRITE.INV_SLED] = [];
  sprite[SPRITE.INV_SLED][0] = IMAGES.INV_SLED_OUT;
  sprite[SPRITE.INV_SLED][1] = IMAGES.INV_SLED_IN;
  sprite[SPRITE.INV_SLED][2] = IMAGES.INV_SLED_CLICK;
  sprite[SPRITE.CHEST_SLED] = sprite[SPRITE.INV_SLED];
  sprite[SPRITE.CRAFT_SLED] = sprite[SPRITE.INV_SLED];
  sprite[SPRITE.INV_PIRATE_HAT] = [];
  sprite[SPRITE.INV_PIRATE_HAT][0] = IMAGES.INV_PIRATE_HAT_OUT;
  sprite[SPRITE.INV_PIRATE_HAT][1] = IMAGES.INV_PIRATE_HAT_IN;
  sprite[SPRITE.INV_PIRATE_HAT][2] = IMAGES.INV_PIRATE_HAT_CLICK;
  sprite[SPRITE.CHEST_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT];
  sprite[SPRITE.CRAFT_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT];
  sprite[SPRITE.INV_FUR_MAMMOTH] = [];
  sprite[SPRITE.INV_FUR_MAMMOTH][0] = IMAGES.INV_FUR_MAMMOTH_OUT;
  sprite[SPRITE.INV_FUR_MAMMOTH][1] = IMAGES.INV_FUR_MAMMOTH_IN;
  sprite[SPRITE.INV_FUR_MAMMOTH][2] = IMAGES.INV_FUR_MAMMOTH_CLICK;
  sprite[SPRITE.CHEST_FUR_MAMMOTH] = sprite[SPRITE.INV_FUR_MAMMOTH];
  sprite[SPRITE.INV_FUR_HAT] = [];
  sprite[SPRITE.INV_FUR_HAT][0] = IMAGES.INV_FUR_HAT_OUT;
  sprite[SPRITE.INV_FUR_HAT][1] = IMAGES.INV_FUR_HAT_IN;
  sprite[SPRITE.INV_FUR_HAT][2] = IMAGES.INV_FUR_HAT_CLICK;
  sprite[SPRITE.CHEST_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT];
  sprite[SPRITE.CRAFT_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT];
  sprite[SPRITE.INV_WOOD_BOW] = [];
  sprite[SPRITE.INV_WOOD_BOW][0] = IMAGES.INV_WOOD_BOW_OUT;
  sprite[SPRITE.INV_WOOD_BOW][1] = IMAGES.INV_WOOD_BOW_IN;
  sprite[SPRITE.INV_WOOD_BOW][2] = IMAGES.INV_WOOD_BOW_CLICK;
  sprite[SPRITE.CHEST_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW];
  sprite[SPRITE.CRAFT_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW];
  sprite[SPRITE.INV_WOOD_ARROW] = [];
  sprite[SPRITE.INV_WOOD_ARROW][0] = IMAGES.INV_WOOD_ARROW_OUT;
  sprite[SPRITE.INV_WOOD_ARROW][1] = IMAGES.INV_WOOD_ARROW_IN;
  sprite[SPRITE.INV_WOOD_ARROW][2] = IMAGES.INV_WOOD_ARROW_CLICK;
  sprite[SPRITE.CHEST_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW];
  sprite[SPRITE.CRAFT_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW];
  sprite[SPRITE.INV_STONE_BOW] = [];
  sprite[SPRITE.INV_STONE_BOW][0] = IMAGES.INV_STONE_BOW_OUT;
  sprite[SPRITE.INV_STONE_BOW][1] = IMAGES.INV_STONE_BOW_IN;
  sprite[SPRITE.INV_STONE_BOW][2] = IMAGES.INV_STONE_BOW_CLICK;
  sprite[SPRITE.CHEST_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW];
  sprite[SPRITE.CRAFT_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW];
  sprite[SPRITE.INV_STONE_ARROW] = [];
  sprite[SPRITE.INV_STONE_ARROW][0] = IMAGES.INV_STONE_ARROW_OUT;
  sprite[SPRITE.INV_STONE_ARROW][1] = IMAGES.INV_STONE_ARROW_IN;
  sprite[SPRITE.INV_STONE_ARROW][2] = IMAGES.INV_STONE_ARROW_CLICK;
  sprite[SPRITE.CHEST_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW];
  sprite[SPRITE.CRAFT_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW];
  sprite[SPRITE.INV_GOLD_BOW] = [];
  sprite[SPRITE.INV_GOLD_BOW][0] = IMAGES.INV_GOLD_BOW_OUT;
  sprite[SPRITE.INV_GOLD_BOW][1] = IMAGES.INV_GOLD_BOW_IN;
  sprite[SPRITE.INV_GOLD_BOW][2] = IMAGES.INV_GOLD_BOW_CLICK;
  sprite[SPRITE.CHEST_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW];
  sprite[SPRITE.CRAFT_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW];
  sprite[SPRITE.INV_GOLD_ARROW] = [];
  sprite[SPRITE.INV_GOLD_ARROW][0] = IMAGES.INV_GOLD_ARROW_OUT;
  sprite[SPRITE.INV_GOLD_ARROW][1] = IMAGES.INV_GOLD_ARROW_IN;
  sprite[SPRITE.INV_GOLD_ARROW][2] = IMAGES.INV_GOLD_ARROW_CLICK;
  sprite[SPRITE.CHEST_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW];
  sprite[SPRITE.CRAFT_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW];
  sprite[SPRITE.INV_DIAMOND_BOW] = [];
  sprite[SPRITE.INV_DIAMOND_BOW][0] = IMAGES.INV_DIAMOND_BOW_OUT;
  sprite[SPRITE.INV_DIAMOND_BOW][1] = IMAGES.INV_DIAMOND_BOW_IN;
  sprite[SPRITE.INV_DIAMOND_BOW][2] = IMAGES.INV_DIAMOND_BOW_CLICK;
  sprite[SPRITE.CHEST_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW];
  sprite[SPRITE.CRAFT_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW];
  sprite[SPRITE.INV_DIAMOND_ARROW] = [];
  sprite[SPRITE.INV_DIAMOND_ARROW][0] = IMAGES.INV_DIAMOND_ARROW_OUT;
  sprite[SPRITE.INV_DIAMOND_ARROW][1] = IMAGES.INV_DIAMOND_ARROW_IN;
  sprite[SPRITE.INV_DIAMOND_ARROW][2] = IMAGES.INV_DIAMOND_ARROW_CLICK;
  sprite[SPRITE.CHEST_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW];
  sprite[SPRITE.CRAFT_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW];
  sprite[SPRITE.INV_AMETHYST_BOW] = [];
  sprite[SPRITE.INV_AMETHYST_BOW][0] = IMAGES.INV_AMETHYST_BOW_OUT;
  sprite[SPRITE.INV_AMETHYST_BOW][1] = IMAGES.INV_AMETHYST_BOW_IN;
  sprite[SPRITE.INV_AMETHYST_BOW][2] = IMAGES.INV_AMETHYST_BOW_CLICK;
  sprite[SPRITE.CHEST_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW];
  sprite[SPRITE.CRAFT_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW];
  sprite[SPRITE.INV_AMETHYST_ARROW] = [];
  sprite[SPRITE.INV_AMETHYST_ARROW][0] = IMAGES.INV_AMETHYST_ARROW_OUT;
  sprite[SPRITE.INV_AMETHYST_ARROW][1] = IMAGES.INV_AMETHYST_ARROW_IN;
  sprite[SPRITE.INV_AMETHYST_ARROW][2] = IMAGES.INV_AMETHYST_ARROW_CLICK;
  sprite[SPRITE.CHEST_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW];
  sprite[SPRITE.CRAFT_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW];
  sprite[SPRITE.INV_REIDITE_BOW] = [];
  sprite[SPRITE.INV_REIDITE_BOW][0] = IMAGES.INV_REIDITE_BOW_OUT;
  sprite[SPRITE.INV_REIDITE_BOW][1] = IMAGES.INV_REIDITE_BOW_IN;
  sprite[SPRITE.INV_REIDITE_BOW][2] = IMAGES.INV_REIDITE_BOW_CLICK;
  sprite[SPRITE.CHEST_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW];
  sprite[SPRITE.CRAFT_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW];
  sprite[SPRITE.INV_REIDITE_ARROW] = [];
  sprite[SPRITE.INV_REIDITE_ARROW][0] = IMAGES.INV_REIDITE_ARROW_OUT;
  sprite[SPRITE.INV_REIDITE_ARROW][1] = IMAGES.INV_REIDITE_ARROW_IN;
  sprite[SPRITE.INV_REIDITE_ARROW][2] = IMAGES.INV_REIDITE_ARROW_CLICK;
  sprite[SPRITE.CHEST_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW];
  sprite[SPRITE.CRAFT_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW];
  sprite[SPRITE.INV_DRAGON_BOW] = [];
  sprite[SPRITE.INV_DRAGON_BOW][0] = IMAGES.INV_DRAGON_BOW_OUT;
  sprite[SPRITE.INV_DRAGON_BOW][1] = IMAGES.INV_DRAGON_BOW_IN;
  sprite[SPRITE.INV_DRAGON_BOW][2] = IMAGES.INV_DRAGON_BOW_CLICK;
  sprite[SPRITE.CHEST_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW];
  sprite[SPRITE.CRAFT_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW];
  sprite[SPRITE.INV_DRAGON_ARROW] = [];
  sprite[SPRITE.INV_DRAGON_ARROW][0] = IMAGES.INV_DRAGON_ARROW_OUT;
  sprite[SPRITE.INV_DRAGON_ARROW][1] = IMAGES.INV_DRAGON_ARROW_IN;
  sprite[SPRITE.INV_DRAGON_ARROW][2] = IMAGES.INV_DRAGON_ARROW_CLICK;
  sprite[SPRITE.CHEST_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW];
  sprite[SPRITE.CRAFT_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW];
  sprite[SPRITE.INV_WOOD_SHIELD] = [];
  sprite[SPRITE.INV_WOOD_SHIELD][0] = IMAGES.INV_WOOD_SHIELD_OUT;
  sprite[SPRITE.INV_WOOD_SHIELD][1] = IMAGES.INV_WOOD_SHIELD_IN;
  sprite[SPRITE.INV_WOOD_SHIELD][2] = IMAGES.INV_WOOD_SHIELD_CLICK;
  sprite[SPRITE.CHEST_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD];
  sprite[SPRITE.CRAFT_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD];
  sprite[SPRITE.INV_STONE_SHIELD] = [];
  sprite[SPRITE.INV_STONE_SHIELD][0] = IMAGES.INV_STONE_SHIELD_OUT;
  sprite[SPRITE.INV_STONE_SHIELD][1] = IMAGES.INV_STONE_SHIELD_IN;
  sprite[SPRITE.INV_STONE_SHIELD][2] = IMAGES.INV_STONE_SHIELD_CLICK;
  sprite[SPRITE.CHEST_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD];
  sprite[SPRITE.CRAFT_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD];
  sprite[SPRITE.INV_GOLD_SHIELD] = [];
  sprite[SPRITE.INV_GOLD_SHIELD][0] = IMAGES.INV_GOLD_SHIELD_OUT;
  sprite[SPRITE.INV_GOLD_SHIELD][1] = IMAGES.INV_GOLD_SHIELD_IN;
  sprite[SPRITE.INV_GOLD_SHIELD][2] = IMAGES.INV_GOLD_SHIELD_CLICK;
  sprite[SPRITE.CHEST_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD];
  sprite[SPRITE.CRAFT_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD];
  sprite[SPRITE.INV_DIAMOND_SHIELD] = [];
  sprite[SPRITE.INV_DIAMOND_SHIELD][0] = IMAGES.INV_DIAMOND_SHIELD_OUT;
  sprite[SPRITE.INV_DIAMOND_SHIELD][1] = IMAGES.INV_DIAMOND_SHIELD_IN;
  sprite[SPRITE.INV_DIAMOND_SHIELD][2] = IMAGES.INV_DIAMOND_SHIELD_CLICK;
  sprite[SPRITE.CHEST_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD];
  sprite[SPRITE.CRAFT_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD];
  sprite[SPRITE.INV_AMETHYST_SHIELD] = [];
  sprite[SPRITE.INV_AMETHYST_SHIELD][0] = IMAGES.INV_AMETHYST_SHIELD_OUT;
  sprite[SPRITE.INV_AMETHYST_SHIELD][1] = IMAGES.INV_AMETHYST_SHIELD_IN;
  sprite[SPRITE.INV_AMETHYST_SHIELD][2] = IMAGES.INV_AMETHYST_SHIELD_CLICK;
  sprite[SPRITE.CHEST_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD];
  sprite[SPRITE.CRAFT_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD];
  sprite[SPRITE.INV_REIDITE_SHIELD] = [];
  sprite[SPRITE.INV_REIDITE_SHIELD][0] = IMAGES.INV_REIDITE_SHIELD_OUT;
  sprite[SPRITE.INV_REIDITE_SHIELD][1] = IMAGES.INV_REIDITE_SHIELD_IN;
  sprite[SPRITE.INV_REIDITE_SHIELD][2] = IMAGES.INV_REIDITE_SHIELD_CLICK;
  sprite[SPRITE.CHEST_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD];
  sprite[SPRITE.CRAFT_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD];
  sprite[SPRITE.INV_FLOWER_HAT] = [];
  sprite[SPRITE.INV_FLOWER_HAT][0] = IMAGES.INV_FLOWER_HAT_OUT;
  sprite[SPRITE.INV_FLOWER_HAT][1] = IMAGES.INV_FLOWER_HAT_IN;
  sprite[SPRITE.INV_FLOWER_HAT][2] = IMAGES.INV_FLOWER_HAT_CLICK;
  sprite[SPRITE.CHEST_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT];
  sprite[SPRITE.CRAFT_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT];
  sprite[SPRITE.INV_SANDWORM_JUICE] = [];
  sprite[SPRITE.INV_SANDWORM_JUICE][0] = IMAGES.INV_SANDWORM_JUICE_OUT;
  sprite[SPRITE.INV_SANDWORM_JUICE][1] = IMAGES.INV_SANDWORM_JUICE_IN;
  sprite[SPRITE.INV_SANDWORM_JUICE][2] = IMAGES.INV_SANDWORM_JUICE_CLICK;
  sprite[SPRITE.CHEST_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE];
  sprite[SPRITE.CRAFT_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE];
  sprite[SPRITE.INV_GARLIC] = create_craft_button(1, [{f: create_garlic, x: 0, y: 0, a: 1, r: 0, c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]}], .22, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CHEST_GARLIC] = sprite[SPRITE.INV_GARLIC];
  sprite[SPRITE.INV_THORNBUSH] = create_craft_button(1, [{f: create_brambles, x: 0, y: 0, a: 1, r: 0, c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]}], .2, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CHEST_THORNBUSH] = sprite[SPRITE.INV_THORNBUSH];
  sprite[SPRITE.INV_WINDMILL] = create_craft_button(1, [{f: create_windmill, x: -1, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]}, {f: create_windmill_wing, x: -1, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]}, {f: create_windmill_head, x: -1, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]}], .4, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_WINDMILL] = sprite[SPRITE.INV_WINDMILL];
  sprite[SPRITE.INV_WILD_WHEAT] = create_craft_button(1, [{f: create_wheat, x: 0, y: 0, a: 1, r: 0, c: ["#A89F67", "#9E8456"]}], 1.2, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.INV_SIGN] = create_craft_button(1, [{f: create_sign, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]}], .14, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_SIGN] = sprite[SPRITE.INV_SIGN];
  sprite[SPRITE.INV_WHEAT_SEED] = create_craft_button(1, [{f: create_seed, x: 0, y: 0, a: 1, r: 0, c: ["#A89F67", "#9E8456"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED];
  sprite[SPRITE.INV_SEED] = create_craft_button(1, [{f: create_seed, x: 0, y: 0, a: 1, r: 0, c: ["#493d36", "#332b28"]}], .7, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_SEED] = sprite[SPRITE.INV_SEED];
  sprite[SPRITE.INV_PUMPKIN_SEED] = create_craft_button(1, [{f: create_seed, x: 0, y: 0, a: 1, r: 0, c: ["#c67933", "#b17238"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED];
  sprite[SPRITE.INV_GARLIC_SEED] = create_craft_button(1, [{f: create_seed, x: 0, y: 0, a: 1, r: 0, c: ["#e8e8e8", "#bbbbbb"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED];
  sprite[SPRITE.INV_THORNBUSH_SEED] = create_craft_button(1, [{f: create_seed, x: 0, y: 0, a: 1, r: 0, c: ["#328a56", "#449573"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED];
  sprite[SPRITE.INV_CARROT_SEED] = create_craft_button(1, [{f: create_seed, x: 0, y: 0, a: 1, r: 0, c: ["#c98e2f", "#a36b11"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED];
  sprite[SPRITE.CHEST_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED];
  sprite[SPRITE.INV_WATERMELON_SEED] = create_craft_button(1, [{f: create_seed, x: 0, y: 0, a: 1, r: 0, c: ["#13a56d", "#098a58"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED];
  sprite[SPRITE.CHEST_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED];
  sprite[SPRITE.INV_ALOE_VERA_SEED] = create_craft_button(1, [{f: create_seed, x: 0, y: 0, a: 1, r: 0, c: ["#3a8214", "#4a9c1e"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED];
  sprite[SPRITE.CHEST_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED];
  sprite[SPRITE.INV_TOMATO_SEED] = create_craft_button(1, [{f: create_seed, x: 0, y: 0, a: 1, r: 0, c: ["#b22419", "#99110e"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED];
  sprite[SPRITE.CHEST_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED];
  sprite[SPRITE.INV_FIRE] = create_craft_button(1, [{f: create_wood_fire, x: -2, y: -2, a: 1, r: -Math.PI / 7, c: ["#4d2d14", "#432516"]}, {f: create_fire, x: -2, y: -2, a: 1, r: -Math.PI / 7, c: ["#efd435", "#ec8d35", "#e96132"]}], .3, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_FIRE] = sprite[SPRITE.INV_FIRE];
  sprite[SPRITE.INV_BIG_FIRE] = create_craft_button(1, [{f: create_big_fire_wood, x: -2, y: -1, a: 1, r: -Math.PI / 7, c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]}, {f: create_fire, x: -2, y: -1, a: 1, r: -Math.PI / 7, c: ["#efd435", "#ec8d35", "#e96132"]}], .3, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE];
  sprite[SPRITE.INV_PIRATE_SWORD] = create_craft_button(1, [{f: create_pirate_sword, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]}], .1, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_SUGAR_CAN] = create_craft_button(1, [{f: create_sugar_can, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]}], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_SWORD_WOOD] = create_craft_button(1, [{f: create_sword_wood, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_SWORD] = create_craft_button(1, [{f: create_stonesword, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_SWORD_GOLD] = create_craft_button(1, [{f: create_goldsword, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_SWORD_DIAMOND] = create_craft_button(1, [{f: create_diamondsword, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_SWORD_AMETHYST] = create_craft_button(1, [{f: create_amesword, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_PICK_WOOD] = create_craft_button(1, [{f: create_pickaxe, x: -2, y: 5, a: 1, r: -Math.PI / 5, c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_PICK] = create_craft_button(1, [{f: create_pickaxe, x: -2, y: 5, a: 1, r: -Math.PI / 5, c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_PICK_GOLD] = create_craft_button(1, [{f: create_pickaxe, x: -2, y: 5, a: 1, r: -Math.PI / 5, c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_PICK_DIAMOND] = create_craft_button(1, [{f: create_pickaxe, x: -2, y: 5, a: 1, r: -Math.PI / 5, c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_PICK_AMETHYST] = create_craft_button(1, [{f: create_pickaxe, x: -2, y: 5, a: 1, r: -Math.PI / 5, c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_PICK_REIDITE] = [];
  sprite[SPRITE.INV_PICK_REIDITE][0] = IMAGES.INV_PICK_REIDITE_OUT;
  sprite[SPRITE.INV_PICK_REIDITE][1] = IMAGES.INV_PICK_REIDITE_IN;
  sprite[SPRITE.INV_PICK_REIDITE][2] = IMAGES.INV_PICK_REIDITE_CLICK;
  sprite[SPRITE.CRAFT_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE];
  sprite[SPRITE.CHEST_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE];
  sprite[SPRITE.INV_STONE] = create_craft_button(1, [{f: create_stone, x: -5, y: -5, a: 1, r: 0, c: ["#252B28", "#58645F", "#75827D"]}], .23, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_GOLD] = create_craft_button(1, [{f: create_gold, x: -5, y: -5, a: 1, r: 0, c: ["#282823", "#877c2d", "#c4bc51"]}], .43, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_DIAMOND] = create_craft_button(1, [{f: create_diamond, x: -5, y: -5, a: 1, r: 0, c: ["#232828", "#3fc9c9", "#74ede6"]}], .33, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_WOOD] = create_craft_button(1, [{f: create_wood_fire, x: 0, y: -5, a: 1, r: Math.PI / 2.5, c: ["#4d2d14", "#432516"]}], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.CRAFT_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD];
  sprite[SPRITE.CRAFT_SWORD] = sprite[SPRITE.INV_SWORD];
  sprite[SPRITE.CRAFT_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD];
  sprite[SPRITE.CRAFT_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND];
  sprite[SPRITE.CRAFT_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST];
  sprite[SPRITE.CRAFT_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD];
  sprite[SPRITE.CRAFT_PICK] = sprite[SPRITE.INV_PICK];
  sprite[SPRITE.CRAFT_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD];
  sprite[SPRITE.CRAFT_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND];
  sprite[SPRITE.CRAFT_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST];
  sprite[SPRITE.INV_PLANT] = create_craft_button(1, [{f: create_food_plant, x: 0, y: 0, a: 1, r: 0}], .4, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.INV_WORK] = create_craft_button(1, [{f: create_workbench, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]}], .45, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_WORK] = sprite[SPRITE.INV_WORK];
  sprite[SPRITE.INV_STONE_WALL] = create_craft_button(1, [{f: create_wall_stone, x: -2, y: -2, a: 1, r: 0, c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]}], .4, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL];
  sprite[SPRITE.INV_DIAMOND_WALL] = create_craft_button(1, [{f: create_wall_diamond, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]}], .4, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL];
  sprite[SPRITE.INV_AMETHYST_WALL] = create_craft_button(1, [{f: create_wall_stone, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]}], .4, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL];
  sprite[SPRITE.INV_GOLD_WALL] = create_craft_button(1, [{f: create_wall_gold, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]}], .4, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL];
  sprite[SPRITE.INV_WALL] = create_craft_button(1, [{f: create_wall, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]}], .45, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_WALL] = sprite[SPRITE.INV_WALL];
  sprite[SPRITE.INV_SPIKE] = create_craft_button(1, [{f: create_spike, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]}], .35, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_SPIKE] = sprite[SPRITE.INV_SPIKE];
  sprite[SPRITE.INV_GOLD_SPIKE] = create_craft_button(1, [{f: create_spike_gold, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]}], .35, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE];
  sprite[SPRITE.INV_DIAMOND_SPIKE] = create_craft_button(1, [{f: create_spike_gold, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]}], .35, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE];
  sprite[SPRITE.INV_STONE_SPIKE] = create_craft_button(1, [{f: create_spike_stone, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]}], .35, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE];
  sprite[SPRITE.INV_AMETHYST_SPIKE] = create_craft_button(1, [{f: create_spike_stone, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]}], .35, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE];
  sprite[SPRITE.INV_DOOR_WOOD_CLOSE] = create_craft_button(1, [{f: create_door_wood, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE];
  sprite[SPRITE.INV_DOOR_STONE_CLOSE] = create_craft_button(1, [{f: create_door_stone, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE];
  sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE] = create_craft_button(1, [{f: create_door_stone, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE];
  sprite[SPRITE.INV_DOOR_GOLD_CLOSE] = create_craft_button(1, [{f: create_door_gold, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE];
  sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE] = create_craft_button(1, [{f: create_door_diamond, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE];
  sprite[SPRITE.INV_CHEST] = create_craft_button(1, [{f: create_chest, x: 0, y: 2, a: 1, r: 0, c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]}], .35, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_CHEST] = sprite[SPRITE.INV_CHEST];
  sprite[SPRITE.INV_MEAT] = create_craft_button(1, [{f: create_meat, x: 0, y: -3, a: 1, r: 0, c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]}], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.INV_COOKED_MEAT] = create_craft_button(1, [{f: create_meat, x: 0, y: -3, a: 1, r: 0, c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]}], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT];
  sprite[SPRITE.INV_CORD] = create_craft_button(1, [{f: create_cord, x: -3, y: -3, a: 1, r: 0, c: ["#cec0c4", "#ffffff", "#6d6768"]}], .9, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.INV_BLUE_CORD] = create_craft_button(1, [{f: create_cord, x: -3, y: -3, a: 1, r: 0, c: ["#d4e9ec", "#37b1d7", "#506c71"]}], .9, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD];
  sprite[SPRITE.INV_FUR] = create_craft_button(1, [{f: create_fur, x: -3, y: -3, a: 1, r: 0, c: ["#ef96be", "#ffffff"]}], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_FUR_BOAR] = create_craft_button(1, [{f: create_fur, x: -3, y: -3, a: 1, r: 0, c: ["#55423e", "#ffffff"]}], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_SPECIAL_FUR] = create_craft_button(1, [{f: create_special_fur, x: 0, y: 0, a: 1, r: 0, c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]}], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_SPECIAL_FUR_2] = create_craft_button(1, [{f: create_special_fur, x: 0, y: 0, a: 1, r: 0, c: ["#14151b", "#000000", "#b35c46", "#a34d37"]}], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_KRAKEN_SKIN] = create_craft_button(1, [{f: create_fur, x: 0, y: 0, a: 1, r: 0, c: ["#201851", "#b6222a"]}], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_FUR_WOLF] = create_craft_button(1, [{f: create_fur, x: -3, y: -3, a: 1, r: 0, c: ["#231f20", "#b6222a"]}], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_FUR_WINTER] = create_craft_button(1, [{f: create_fur, x: -3, y: -3, a: 1, r: 0, c: ["#ffffff", "#b6222a"]}], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_EARMUFFS] = create_craft_button(1, [{f: create_earmuff, x: 0, y: 0, a: 1, r: 0, c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]}], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS];
  sprite[SPRITE.INV_COAT] = create_craft_button(1, [{f: create_coat, x: 0, y: 0, a: 1, r: 0, c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]}], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_COAT] = sprite[SPRITE.INV_COAT];
  sprite[SPRITE.INV_CAP_SCARF] = create_craft_button(1, [{f: create_cap_scarf, x: 0, y: 0, a: 1, r: 0, c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]}], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF];
  sprite[SPRITE.INV_CHRISTMAS_HAT] = create_craft_button(1, [{f: create_christmas_hat, x: 0, y: 5, a: 1, r: 0, c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]}], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CHEST_CHRISTMAS_HAT] = sprite[SPRITE.INV_CHRISTMAS_HAT];
  sprite[SPRITE.INV_ELF_HAT] = create_craft_button(1, [{f: create_elf_hat, x: 0, y: 5, a: 1, r: 0, c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]}], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CHEST_ELF_HAT] = sprite[SPRITE.INV_ELF_HAT];
  sprite[SPRITE.INV_BANDAGE] = create_craft_button(1, [{f: create_bandage, x: -2, y: -2, a: 1, r: 0, c: ["#ffffff", "#cec0c4"]}], .35, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_BANDAGE] = sprite[SPRITE.INV_BANDAGE];
  sprite[SPRITE.INV_BAG] = [];
  sprite[SPRITE.INV_BAG][0] = IMAGES.INV_BAG_OUT;
  sprite[SPRITE.INV_BAG][1] = IMAGES.INV_BAG_IN;
  sprite[SPRITE.INV_BAG][2] = IMAGES.INV_BAG_CLICK;
  sprite[SPRITE.CRAFT_BAG] = sprite[SPRITE.INV_BAG];
  sprite[SPRITE.INV_PITCHFORK] = [];
  sprite[SPRITE.INV_PITCHFORK][0] = IMAGES.INV_PITCHFORK_OUT;
  sprite[SPRITE.INV_PITCHFORK][1] = IMAGES.INV_PITCHFORK_IN;
  sprite[SPRITE.INV_PITCHFORK][2] = IMAGES.INV_PITCHFORK_CLICK;
  sprite[SPRITE.CRAFT_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK];
  sprite[SPRITE.CHEST_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK];
  sprite[SPRITE.INV_PITCHFORK2] = [];
  sprite[SPRITE.INV_PITCHFORK2][0] = IMAGES.INV_PITCHFORK2_OUT;
  sprite[SPRITE.INV_PITCHFORK2][1] = IMAGES.INV_PITCHFORK2_IN;
  sprite[SPRITE.INV_PITCHFORK2][2] = IMAGES.INV_PITCHFORK2_CLICK;
  sprite[SPRITE.CRAFT_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2];
  sprite[SPRITE.CHEST_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2];
  sprite[SPRITE.INV_PITCHFORK_PART] = [];
  sprite[SPRITE.INV_PITCHFORK_PART][0] = IMAGES.INV_PITCHFORK_PART_CLICK;
  sprite[SPRITE.INV_PITCHFORK_PART][1] = IMAGES.INV_PITCHFORK_PART_CLICK;
  sprite[SPRITE.INV_PITCHFORK_PART][2] = IMAGES.INV_PITCHFORK_PART_CLICK;
  sprite[SPRITE.CHEST_PITCHFORK_PART] = sprite[SPRITE.INV_PITCHFORK_PART];
  sprite[SPRITE.INV_PILOT_HELMET] = [];
  sprite[SPRITE.INV_PILOT_HELMET][0] = IMAGES.INV_PILOT_HELMET_OUT;
  sprite[SPRITE.INV_PILOT_HELMET][1] = IMAGES.INV_PILOT_HELMET_IN;
  sprite[SPRITE.INV_PILOT_HELMET][2] = IMAGES.INV_PILOT_HELMET_CLICK;
  sprite[SPRITE.CRAFT_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET];
  sprite[SPRITE.CHEST_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET];
  sprite[SPRITE.INV_PILOT_GLASSES] = [];
  sprite[SPRITE.INV_PILOT_GLASSES][0] = IMAGES.INV_PILOT_GLASSES_CLICK;
  sprite[SPRITE.INV_PILOT_GLASSES][1] = IMAGES.INV_PILOT_GLASSES_CLICK;
  sprite[SPRITE.INV_PILOT_GLASSES][2] = IMAGES.INV_PILOT_GLASSES_CLICK;
  sprite[SPRITE.CHEST_PILOT_GLASSES] = sprite[SPRITE.INV_PILOT_GLASSES];
  sprite[SPRITE.INV_WOOD_TOWER] = [];
  sprite[SPRITE.INV_WOOD_TOWER][0] = IMAGES.INV_WOOD_TOWER_OUT;
  sprite[SPRITE.INV_WOOD_TOWER][1] = IMAGES.INV_WOOD_TOWER_IN;
  sprite[SPRITE.INV_WOOD_TOWER][2] = IMAGES.INV_WOOD_TOWER_CLICK;
  sprite[SPRITE.CRAFT_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER];
  sprite[SPRITE.CHEST_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER];
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE][0] = IMAGES.INV_WOOD_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE][1] = IMAGES.INV_WOOD_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE][2] = IMAGES.INV_WOOD_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE];
  sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE];
  sprite[SPRITE.INV_STONE_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_STONE_DOOR_SPIKE][0] = IMAGES.INV_STONE_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_STONE_DOOR_SPIKE][1] = IMAGES.INV_STONE_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_STONE_DOOR_SPIKE][2] = IMAGES.INV_STONE_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE];
  sprite[SPRITE.CHEST_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE];
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE][0] = IMAGES.INV_GOLD_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE][1] = IMAGES.INV_GOLD_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE][2] = IMAGES.INV_GOLD_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE];
  sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE];
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][0] = IMAGES.INV_DIAMOND_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][1] = IMAGES.INV_DIAMOND_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][2] = IMAGES.INV_DIAMOND_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE];
  sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE];
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][0] = IMAGES.INV_AMETHYST_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][1] = IMAGES.INV_AMETHYST_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][2] = IMAGES.INV_AMETHYST_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE];
  sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE];
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][0] = IMAGES.INV_REIDITE_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][1] = IMAGES.INV_REIDITE_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][2] = IMAGES.INV_REIDITE_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE];
  sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE];
  sprite[SPRITE.INV_REIDITE_DOOR] = [];
  sprite[SPRITE.INV_REIDITE_DOOR][0] = IMAGES.INV_REIDITE_DOOR_OUT;
  sprite[SPRITE.INV_REIDITE_DOOR][1] = IMAGES.INV_REIDITE_DOOR_IN;
  sprite[SPRITE.INV_REIDITE_DOOR][2] = IMAGES.INV_REIDITE_DOOR_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR];
  sprite[SPRITE.CHEST_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR];
  sprite[SPRITE.INV_REIDITE_SPIKE] = [];
  sprite[SPRITE.INV_REIDITE_SPIKE][0] = IMAGES.INV_REIDITE_SPIKE_OUT;
  sprite[SPRITE.INV_REIDITE_SPIKE][1] = IMAGES.INV_REIDITE_SPIKE_IN;
  sprite[SPRITE.INV_REIDITE_SPIKE][2] = IMAGES.INV_REIDITE_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE];
  sprite[SPRITE.CHEST_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE];
  sprite[SPRITE.INV_REIDITE_WALL] = [];
  sprite[SPRITE.INV_REIDITE_WALL][0] = IMAGES.INV_REIDITE_WALL_OUT;
  sprite[SPRITE.INV_REIDITE_WALL][1] = IMAGES.INV_REIDITE_WALL_IN;
  sprite[SPRITE.INV_REIDITE_WALL][2] = IMAGES.INV_REIDITE_WALL_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL];
  sprite[SPRITE.CHEST_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL];
  sprite[SPRITE.INV_PENGUIN_FEATHER] = [];
  sprite[SPRITE.INV_PENGUIN_FEATHER][0] = IMAGES.INV_PENGUIN_FEATHER;
  sprite[SPRITE.INV_PENGUIN_FEATHER][1] = IMAGES.INV_PENGUIN_FEATHER;
  sprite[SPRITE.INV_PENGUIN_FEATHER][2] = IMAGES.INV_PENGUIN_FEATHER;
  sprite[SPRITE.CRAFT_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER];
  sprite[SPRITE.CHEST_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER];
  sprite[SPRITE.INV_HAWK_FEATHER] = [];
  sprite[SPRITE.INV_HAWK_FEATHER][0] = IMAGES.INV_HAWK_FEATHER;
  sprite[SPRITE.INV_HAWK_FEATHER][1] = IMAGES.INV_HAWK_FEATHER;
  sprite[SPRITE.INV_HAWK_FEATHER][2] = IMAGES.INV_HAWK_FEATHER;
  sprite[SPRITE.CRAFT_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER];
  sprite[SPRITE.CHEST_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER];
  sprite[SPRITE.INV_VULTURE_FEATHER] = [];
  sprite[SPRITE.INV_VULTURE_FEATHER][0] = IMAGES.INV_VULTURE_FEATHER;
  sprite[SPRITE.INV_VULTURE_FEATHER][1] = IMAGES.INV_VULTURE_FEATHER;
  sprite[SPRITE.INV_VULTURE_FEATHER][2] = IMAGES.INV_VULTURE_FEATHER;
  sprite[SPRITE.CRAFT_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER];
  sprite[SPRITE.CHEST_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER];
  sprite[SPRITE.INV_EMERALD] = [];
  sprite[SPRITE.INV_EMERALD][0] = IMAGES.INV_EMERALD;
  sprite[SPRITE.INV_EMERALD][1] = IMAGES.INV_EMERALD;
  sprite[SPRITE.INV_EMERALD][2] = IMAGES.INV_EMERALD;
  sprite[SPRITE.CHEST_EMERALD] = sprite[SPRITE.INV_EMERALD];
  sprite[SPRITE.INV_SADDLE] = [];
  sprite[SPRITE.INV_SADDLE][0] = IMAGES.INV_SADDLE_OUT;
  sprite[SPRITE.INV_SADDLE][1] = IMAGES.INV_SADDLE_IN;
  sprite[SPRITE.INV_SADDLE][2] = IMAGES.INV_SADDLE_CLICK;
  sprite[SPRITE.CRAFT_SADDLE] = sprite[SPRITE.INV_SADDLE];
  sprite[SPRITE.CHEST_SADDLE] = sprite[SPRITE.INV_SADDLE];
  sprite[SPRITE.INV_WAND1] = [];
  sprite[SPRITE.INV_WAND1][0] = IMAGES.INV_WAND1_OUT;
  sprite[SPRITE.INV_WAND1][1] = IMAGES.INV_WAND1_IN;
  sprite[SPRITE.INV_WAND1][2] = IMAGES.INV_WAND1_CLICK;
  sprite[SPRITE.CRAFT_WAND1] = sprite[SPRITE.INV_WAND1];
  sprite[SPRITE.CHEST_WAND1] = sprite[SPRITE.INV_WAND1];
  sprite[SPRITE.INV_WAND2] = [];
  sprite[SPRITE.INV_WAND2][0] = IMAGES.INV_WAND2_OUT;
  sprite[SPRITE.INV_WAND2][1] = IMAGES.INV_WAND2_IN;
  sprite[SPRITE.INV_WAND2][2] = IMAGES.INV_WAND2_CLICK;
  sprite[SPRITE.CRAFT_WAND2] = sprite[SPRITE.INV_WAND2];
  sprite[SPRITE.CHEST_WAND2] = sprite[SPRITE.INV_WAND2];
  sprite[SPRITE.INV_MOUNT_BOAR] = [];
  sprite[SPRITE.INV_MOUNT_BOAR][0] = IMAGES.INV_MOUNT_BOAR_OUT;
  sprite[SPRITE.INV_MOUNT_BOAR][1] = IMAGES.INV_MOUNT_BOAR_IN;
  sprite[SPRITE.INV_MOUNT_BOAR][2] = IMAGES.INV_MOUNT_BOAR_CLICK;
  sprite[SPRITE.CRAFT_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR];
  sprite[SPRITE.CHEST_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR];
  sprite[SPRITE.INV_CRAB_BOSS] = [];
  sprite[SPRITE.INV_CRAB_BOSS][0] = IMAGES.INV_CRAB_BOSS_OUT;
  sprite[SPRITE.INV_CRAB_BOSS][1] = IMAGES.INV_CRAB_BOSS_IN;
  sprite[SPRITE.INV_CRAB_BOSS][2] = IMAGES.INV_CRAB_BOSS_CLICK;
  sprite[SPRITE.CRAFT_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS];
  sprite[SPRITE.CHEST_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS];
  sprite[SPRITE.INV_HAWK] = [];
  sprite[SPRITE.INV_HAWK][0] = IMAGES.INV_HAWK_OUT;
  sprite[SPRITE.INV_HAWK][1] = IMAGES.INV_HAWK_IN;
  sprite[SPRITE.INV_HAWK][2] = IMAGES.INV_HAWK_CLICK;
  sprite[SPRITE.CRAFT_HAWK] = sprite[SPRITE.INV_HAWK];
  sprite[SPRITE.CHEST_HAWK] = sprite[SPRITE.INV_HAWK];
  sprite[SPRITE.INV_VULTURE] = [];
  sprite[SPRITE.INV_VULTURE][0] = IMAGES.INV_VULTURE_OUT;
  sprite[SPRITE.INV_VULTURE][1] = IMAGES.INV_VULTURE_IN;
  sprite[SPRITE.INV_VULTURE][2] = IMAGES.INV_VULTURE_CLICK;
  sprite[SPRITE.CRAFT_VULTURE] = sprite[SPRITE.INV_VULTURE];
  sprite[SPRITE.CHEST_VULTURE] = sprite[SPRITE.INV_VULTURE];
  sprite[SPRITE.INV_TURBAN1] = [];
  sprite[SPRITE.INV_TURBAN1][0] = IMAGES.INV_TURBAN1_OUT;
  sprite[SPRITE.INV_TURBAN1][1] = IMAGES.INV_TURBAN1_IN;
  sprite[SPRITE.INV_TURBAN1][2] = IMAGES.INV_TURBAN1_CLICK;
  sprite[SPRITE.CRAFT_TURBAN1] = sprite[SPRITE.INV_TURBAN1];
  sprite[SPRITE.CHEST_TURBAN1] = sprite[SPRITE.INV_TURBAN1];
  sprite[SPRITE.INV_TURBAN2] = [];
  sprite[SPRITE.INV_TURBAN2][0] = IMAGES.INV_TURBAN2_OUT;
  sprite[SPRITE.INV_TURBAN2][1] = IMAGES.INV_TURBAN2_IN;
  sprite[SPRITE.INV_TURBAN2][2] = IMAGES.INV_TURBAN2_CLICK;
  sprite[SPRITE.CRAFT_TURBAN2] = sprite[SPRITE.INV_TURBAN2];
  sprite[SPRITE.CHEST_TURBAN2] = sprite[SPRITE.INV_TURBAN2];
  sprite[SPRITE.INV_PLANE] = [];
  sprite[SPRITE.INV_PLANE][0] = IMAGES.INV_PLANE_OUT;
  sprite[SPRITE.INV_PLANE][1] = IMAGES.INV_PLANE_IN;
  sprite[SPRITE.INV_PLANE][2] = IMAGES.INV_PLANE_CLICK;
  sprite[SPRITE.CRAFT_PLANE] = sprite[SPRITE.INV_PLANE];
  sprite[SPRITE.CHEST_PLANE] = sprite[SPRITE.INV_PLANE];
  sprite[SPRITE.INV_BABY_DRAGON] = [];
  sprite[SPRITE.INV_BABY_DRAGON][0] = IMAGES.INV_BABY_DRAGON_OUT;
  sprite[SPRITE.INV_BABY_DRAGON][1] = IMAGES.INV_BABY_DRAGON_IN;
  sprite[SPRITE.INV_BABY_DRAGON][2] = IMAGES.INV_BABY_DRAGON_CLICK;
  sprite[SPRITE.CRAFT_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON];
  sprite[SPRITE.CHEST_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON];
  sprite[SPRITE.INV_BABY_MAMMOTH] = [];
  sprite[SPRITE.INV_BABY_MAMMOTH][0] = IMAGES.INV_BABY_MAMMOTH_OUT;
  sprite[SPRITE.INV_BABY_MAMMOTH][1] = IMAGES.INV_BABY_MAMMOTH_IN;
  sprite[SPRITE.INV_BABY_MAMMOTH][2] = IMAGES.INV_BABY_MAMMOTH_CLICK;
  sprite[SPRITE.CRAFT_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH];
  sprite[SPRITE.CHEST_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH];
  sprite[SPRITE.INV_BABY_LAVA] = [];
  sprite[SPRITE.INV_BABY_LAVA][0] = IMAGES.INV_BABY_LAVA_OUT;
  sprite[SPRITE.INV_BABY_LAVA][1] = IMAGES.INV_BABY_LAVA_IN;
  sprite[SPRITE.INV_BABY_LAVA][2] = IMAGES.INV_BABY_LAVA_CLICK;
  sprite[SPRITE.CRAFT_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA];
  sprite[SPRITE.CHEST_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA];
  sprite[SPRITE.INV_BREAD_OVEN] = create_craft_button(1, [{f: create_bread_oven, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]}, {f: create_bread_light_up, x: 0, y: 0, a: 1, r: 0, c: ["#e4c027"]}], .14, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN];
  sprite[SPRITE.INV_FURNACE] = create_craft_button(1, [{f: create_furnace_on, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]}], .18, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_FURNACE] = sprite[SPRITE.INV_FURNACE];
  sprite[SPRITE.INV_BED] = create_craft_button(1, [{f: create_bed, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]}], .32, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_BED] = sprite[SPRITE.INV_BED];
  sprite[SPRITE.CHEST_BED] = sprite[SPRITE.INV_BED];
  sprite[SPRITE.INV_CRAB_LOOT] = create_craft_button(1, [{f: create_crab_loot, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]}], .17, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CHEST_CRAB_LOOT] = sprite[SPRITE.INV_CRAB_LOOT];
  sprite[SPRITE.INV_CRAB_SPEAR] = create_craft_button(1, [{f: create_crab_spear, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]}], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR];
  sprite[SPRITE.CHEST_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR];
  sprite[SPRITE.INV_WOOD_SPEAR] = create_craft_button(1, [{f: create_wood_spear, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]}], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR];
  sprite[SPRITE.INV_SPEAR] = create_craft_button(1, [{f: create_stonespear, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]}], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_SPEAR] = sprite[SPRITE.INV_SPEAR];
  sprite[SPRITE.INV_GOLD_SPEAR] = create_craft_button(1, [{f: create_goldspear, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]}], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR];
  sprite[SPRITE.INV_DIAMOND_SPEAR] = create_craft_button(1, [{f: create_diamondspear, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]}], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR];
  sprite[SPRITE.INV_AMETHYST_SPEAR] = create_craft_button(1, [{f: create_amespear, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]}], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR];
  sprite[SPRITE.INV_DRAGON_SPEAR] = create_craft_button(1, [{f: create_dragon_spear, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]}], .38, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
  sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
  sprite[SPRITE.INV_HAMMER] = create_craft_button(1, [{f: create_hammer, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]}], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_HAMMER] = sprite[SPRITE.INV_HAMMER];
  sprite[SPRITE.INV_SPANNER] = create_craft_button(1, [{f: create_spanner, x: 0, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#939393", "#5f6061"]}], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_SPANNER] = sprite[SPRITE.INV_SPANNER];
  sprite[SPRITE.INV_SUPER_HAMMER] = create_craft_button(1, [{f: create_superhammer, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]}], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER];
  sprite[SPRITE.INV_HAMMER_GOLD] = create_craft_button(1, [{f: create_hammer, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]}], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD];
  sprite[SPRITE.INV_HAMMER_DIAMOND] = create_craft_button(1, [{f: create_hammer, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]}], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND];
  sprite[SPRITE.INV_HAMMER_AMETHYST] = create_craft_button(1, [{f: create_hammer, x: 2, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]}], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST];
  sprite[SPRITE.INV_HAMMER_REIDITE] = [];
  sprite[SPRITE.INV_HAMMER_REIDITE][0] = IMAGES.INV_HAMMER_REIDITE_OUT;
  sprite[SPRITE.INV_HAMMER_REIDITE][1] = IMAGES.INV_HAMMER_REIDITE_IN;
  sprite[SPRITE.INV_HAMMER_REIDITE][2] = IMAGES.INV_HAMMER_REIDITE_CLICK;
  sprite[SPRITE.CHEST_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE];
  sprite[SPRITE.CRAFT_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE];
  sprite[SPRITE.INV_EMERALD_MACHINE] = [];
  sprite[SPRITE.INV_EMERALD_MACHINE][0] = IMAGES.INV_EMERALD_MACHINE_OUT;
  sprite[SPRITE.INV_EMERALD_MACHINE][1] = IMAGES.INV_EMERALD_MACHINE_IN;
  sprite[SPRITE.INV_EMERALD_MACHINE][2] = IMAGES.INV_EMERALD_MACHINE_CLICK;
  sprite[SPRITE.CHEST_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE];
  sprite[SPRITE.CRAFT_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][0] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][1] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][2] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][0] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][1] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][2] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][0] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][1] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][2] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][0] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][1] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][2] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][0] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][1] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][2] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
  sprite[SPRITE.INV_LOCK] = create_craft_button(1, [{f: create_lock, x: -2, y: -2, a: 1, r: 0, c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]}], .8, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.CRAFT_LOCK] = sprite[SPRITE.INV_LOCK];
  sprite[SPRITE.INV_LOCKPICK] = create_craft_button(1, [{f: create_lockpick, x: -2, y: -2, a: 1, r: -Math.PI / 5, c: ["#141414", "#c4a23a", "#816511"]}], .08, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.CRAFT_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK];
  sprite[SPRITE.INV_DRAGON_HEART] = create_craft_button(1, [{f: create_dragon_heart, x: -2, y: -2, a: 1, r: 0, c: ["#141414", "#178a99", "#0a6372", "#03282e"]}], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7);
  sprite[SPRITE.INV_LAVA_HEART] = create_craft_button(1, [{f: create_dragon_heart, x: -2, y: -2, a: 1, r: 0, c: ["#120202", "#991616", "#750a0a", "#120202"]}], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7);
  sprite[SPRITE.INV_RESURRECTION] = create_craft_button(1, [{f: create_resurrection_ground, x: 0, y: 0, a: 1, r: 0, c: ["#347f93", "#54a4ba"]}, {f: create_resurrection, x: 0, y: 0, a: 1, r: 0, c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]}, {f: create_resurrection_rotate, x: 0, y: 0, a: 1, r: 0, c: ["#a9e4ed", "#86d4e0"]}, {f: create_resurrection_hole, x: 0, y: 0, a: 1, r: 0, c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]}], .3, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION];
  sprite[SPRITE.INV_TOTEM] = create_craft_button(1, [{f: create_headtotem, x: 45, y: 70, a: 1, r: 0, c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_TOTEM] = sprite[SPRITE.INV_TOTEM];
  sprite[SPRITE.INV_AMETHYST_HELMET] = create_craft_button(1, [{f: create_amethyst_helmet, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]}], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET];
  sprite[SPRITE.INV_WINTER_HOOD] = create_craft_button(1, [{f: create_winter_hood, x: 0, y: 0, a: 1, r: 0, c: ["#2a2938", "#242330", "#313041", "#1b1a25"]}], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD];
  sprite[SPRITE.INV_HOOD] = create_craft_button(1, [{f: create_hood, x: 0, y: 0, a: 1, r: 0, c: ["#2a2938", "#242330", "#313041"]}], .25, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_HOOD] = sprite[SPRITE.INV_HOOD];
  sprite[SPRITE.INV_WINTER_PEASANT] = create_craft_button(1, [{f: create_peasant, x: 0, y: 3, a: 1, r: 0, c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]}], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT];
  sprite[SPRITE.INV_PEASANT] = create_craft_button(1, [{f: create_peasant, x: 0, y: 3, a: 1, r: 0, c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]}], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_PEASANT] = sprite[SPRITE.INV_PEASANT];
  sprite[SPRITE.INV_CROWN_GREEN] = create_craft_button(1, [{f: create_crown_life, x: 0, y: 10, a: 1, r: 0, c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN];
  sprite[SPRITE.INV_CROWN_ORANGE] = create_craft_button(1, [{f: create_crown_life, x: 0, y: 10, a: 1, r: 0, c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE];
  sprite[SPRITE.INV_CROWN_BLUE] = create_craft_button(1, [{f: create_crown_life, x: 0, y: 10, a: 1, r: 0, c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE];
  sprite[SPRITE.INV_CROWN_CRAB] = create_craft_button(1, [{f: create_crab_crown, x: -1, y: 0, a: 1, r: 0, c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB];
  sprite[SPRITE.CHEST_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB];
  sprite[SPRITE.INV_DRAGON_HELMET] = create_craft_button(1, [{f: create_dragon_helmet, x: 0, y: 0, a: 1, r: 0, c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]}], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET];
  sprite[SPRITE.INV_DRAGON_SWORD] = create_craft_button(1, [{f: create_dragon_sword, x: 0, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]}], .75, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD];
  sprite[SPRITE.INV_DRAGON_CUBE] = create_craft_button(1, [{f: create_dragon_cube, x: 0, y: 0, a: 1, r: 0, c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]}], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_DRAGON_ORB] = create_craft_button(1, [{f: create_blue_orb, x: 0, y: 0, a: 1, r: 0, c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]}], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_LAVA_CUBE] = create_craft_button(1, [{f: create_dragon_cube, x: 0, y: 0, a: 1, r: 0, c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]}], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_LAVA_ORB] = create_craft_button(1, [{f: create_blue_orb, x: 0, y: 0, a: 1, r: 0, c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]}], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_GEMME_GREEN] = create_craft_button(1, [{f: create_gemme_green, x: 0, y: 0, a: 1, r: 0, c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]}], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_GEMME_ORANGE] = create_craft_button(1, [{f: create_gemme_green, x: 0, y: 0, a: 1, r: 0, c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]}], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_GEMME_BLUE] = create_craft_button(1, [{f: create_gemme_green, x: 0, y: 0, a: 1, r: 0, c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]}], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_SHOVEL] = create_craft_button(1, [{f: create_shovel, x: 0, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_SHOVEL] = sprite[SPRITE.INV_SHOVEL];
  sprite[SPRITE.INV_SHOVEL_GOLD] = create_craft_button(1, [{f: create_shovel, x: 0, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD];
  sprite[SPRITE.INV_SHOVEL_DIAMOND] = create_craft_button(1, [{f: create_shovel, x: 0, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND];
  sprite[SPRITE.INV_SHOVEL_AMETHYST] = create_craft_button(1, [{f: create_shovel, x: 0, y: 0, a: 1, r: Math.PI / 5, c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST];
  sprite[SPRITE.INV_EXPLORER_HAT] = create_craft_button(1, [{f: create_explorer_hat, x: 0, y: 0, a: 1, r: 0, c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]}], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT];
  sprite[SPRITE.INV_WOOD_HELMET] = create_craft_button(1, [{f: create_wooden_helmet, x: 0, y: 0, a: 1, r: 0, c: ["#252525", "#73583e", "#493425", "#7d6144"]}], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET];
  sprite[SPRITE.INV_STONE_HELMET] = create_craft_button(1, [{f: create_viking_hat, x: 0, y: -2, a: 1, r: 0, c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]}], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET];
  sprite[SPRITE.INV_GOLD_HELMET] = create_craft_button(1, [{f: create_gold_helmet, x: 0, y: 0, a: 1, r: 0, c: ["#dbce71", "#b29c32", "#c4bc51"]}], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET];
  sprite[SPRITE.INV_DIAMOND_HELMET] = create_craft_button(1, [{f: create_diamond_helmet, x: 0, y: 0, a: 1, r: 0, c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]}], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET];
  sprite[SPRITE.INV_BOOK] = create_craft_button(1, [{f: create_book, x: 0, y: 0, a: 1, r: 0, c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]}], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_BOOK] = sprite[SPRITE.INV_BOOK];
  sprite[SPRITE.INV_PAPER] = create_craft_button(1, [{f: create_paper, x: 0, y: 0, a: 1, r: 0, c: ["#221e1b", "#ffffff", "#f6f0e7"]}], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.CRAFT_PAPER] = sprite[SPRITE.INV_PAPER];
  sprite[SPRITE.INV_AMETHYST] = create_craft_button(1, [{f: create_amethyst, x: -5, y: -5, a: 1, r: 0, c: ["#1d051e", "#c27add", "#cd98e5"]}], .31, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_SAND] = create_craft_button(1, [{f: create_sand, x: 0, y: 0, a: 1, r: 0, c: ["#D7C393", "#a48c6c"]}], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_ICE] = create_craft_button(1, [{f: create_ice, x: 0, y: 0, a: 1, r: 0, c: ["#93CBCE", "#E9F6F6"]}], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.INV_GROUND] = create_craft_button(1, [{f: create_sand, x: 0, y: 0, a: 1, r: 0, c: ["#866432", "#6b4f25"]}], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_BUCKET_FULL] = create_craft_button(1, [{f: create_bucket_full, x: 3, y: 2, a: 1, r: 0, c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]}], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_BUCKET_EMPTY] = create_craft_button(1, [{f: create_bucket_empty, x: 3, y: 2, a: 1, r: 0, c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]}], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.CRAFT_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL];
  sprite[SPRITE.CRAFT_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY];
  sprite[SPRITE.INV_WELL] = create_craft_button(1, [{f: create_well, x: 0, y: 0, a: 1, r: 0, c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]}], .1, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_WELL] = sprite[SPRITE.INV_WELL];
  sprite[SPRITE.INV_BOTTLE_FULL] = create_craft_button(1, [{f: create_bottle, x: 0, y: 0, a: 1, r: Math.PI / 5, c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]}], .18, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.INV_BOTTLE_EMPTY] = create_craft_button(1, [{f: create_bottle_full, x: 0, y: 0, a: 1, r: Math.PI / 5, c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]}], .18, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.CRAFT_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL];
  sprite[SPRITE.CRAFT_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY];
  sprite[SPRITE.INV_COOKIE] = create_craft_button(1, [{f: create_cookie, x: 0, y: 0, a: 1, r: 0, c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]}], .3, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_COOKIE] = sprite[SPRITE.INV_COOKIE];
  sprite[SPRITE.INV_CANDY] = create_craft_button(1, [{f: create_candy, x: 0, y: 0, a: 1, r: 0, c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]}], .3, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.INV_FERRERO] = create_craft_button(1, [{f: create_ferrero_rocher, x: 0, y: 0, a: 1, r: 0, c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]}], .6, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.INV_BREAD] = create_craft_button(1, [{f: create_bread, x: 0, y: -2, a: 1, r: 0, c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]}], .17, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_BREAD] = sprite[SPRITE.INV_BREAD];
  sprite[SPRITE.INV_FOODFISH] = create_craft_button(1, [{f: create_fishfood, x: -3, y: -5, a: 1, r: 0, c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]}], .23, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.INV_FOODFISH_COOKED] = create_craft_button(1, [{f: create_fishfood_cooked, x: 0, y: 0, a: 1, r: 0, c: ["#1d051e", "#42261A", "#281818"]}], .23, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED];
  sprite[SPRITE.INV_DIVING_MASK] = create_craft_button(1, [{f: create_divingmask, x: -3, y: 0, a: 1, r: 0, c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]}], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK];
  sprite[SPRITE.INV_SCALES] = create_craft_button(1, [{f: create_scales, x: 0, y: 0, a: 1, r: 0, c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]}], .15, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_SUPER_DIVING_SUIT] = create_craft_button(1, [{f: create_superdivingsuit, x: 0, y: 0, a: 1, r: 0, c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]}], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5);
  sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT];
  sprite[SPRITE.INV_PLOT] = create_craft_button(1, [{f: create_plot, x: 0, y: 0, a: 1, r: 0, c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]}], .3, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_PLOT] = sprite[SPRITE.INV_PLOT];
  sprite[SPRITE.INV_GARLAND] = create_craft_button(1, [{f: create_garland_inv, x: -5, y: -5, a: 1, r: 0, c: ["#e2d63b", "#ee71a9", "#42b672"]}], 1, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CHEST_GARLAND] = sprite[SPRITE.INV_GARLAND];
  sprite[SPRITE.INV_BRIDGE] = create_craft_button(1, [{f: create_bridge, x: 0, y: 0, a: 1, r: 0, c: ["#1e2021", "#332715", "#4C3B19", "#574122"]}], .5, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_BRIDGE] = sprite[SPRITE.INV_BRIDGE];
  sprite[SPRITE.INV_ROOF] = create_craft_button(1, [{f: create_roof, x: 0, y: 0, a: 1, r: 0, c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]}], .3, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_ROOF] = sprite[SPRITE.INV_ROOF];
  sprite[SPRITE.INV_WATERING_CAN_FULL] = create_craft_button(1, [{f: create_watering_can, x: -1, y: 0, a: 1, r: -Math.PI / 5, c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]}], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .7);
  sprite[SPRITE.CRAFT_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL];
  sprite[SPRITE.INV_WATERING_CAN] = create_craft_button(1, [{f: create_watering_can, x: -1, y: 0, a: 1, r: -Math.PI / 5, c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]}], .4, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.CRAFT_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN];
  sprite[SPRITE.INV_FLOUR] = create_craft_button(1, [{f: create_flour, x: 0, y: 0, a: 1, r: 0, c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]}], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5);
  sprite[SPRITE.INV_CRAB_STICK] = create_craft_button(1, [{f: create_crab_stick, x: 0, y: 0, a: 1, r: 0, c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]}], .2, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK];
  sprite[SPRITE.INV_CAKE] = create_craft_button(1, [{f: create_cake, x: 0, y: 0, a: 1, r: 0, c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]}], .25, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_CAKE] = sprite[SPRITE.INV_CAKE];
  sprite[SPRITE.INV_SANDWICH] = create_craft_button(1, [{f: create_SANDWICH, x: -2, y: -8, a: 1, r: 0, c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]}], .25, ["#3ba578", "#4eb687", "#3da34d"], .5);
  sprite[SPRITE.CRAFT_SANDWICH] = sprite[SPRITE.INV_SANDWICH];
  sprite[SPRITE.INV_LAVA_SWORD] = [];
  sprite[SPRITE.INV_LAVA_SWORD][0] = IMAGES.INV_LAVA_SWORD_OUT;
  sprite[SPRITE.INV_LAVA_SWORD][1] = IMAGES.INV_LAVA_SWORD_IN;
  sprite[SPRITE.INV_LAVA_SWORD][2] = IMAGES.INV_LAVA_SWORD_CLICK;
  sprite[SPRITE.CRAFT_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD];
  sprite[SPRITE.CHEST_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD];
  sprite[SPRITE.INV_LAVA_SPEAR] = [];
  sprite[SPRITE.INV_LAVA_SPEAR][0] = IMAGES.INV_LAVA_SPEAR_OUT;
  sprite[SPRITE.INV_LAVA_SPEAR][1] = IMAGES.INV_LAVA_SPEAR_IN;
  sprite[SPRITE.INV_LAVA_SPEAR][2] = IMAGES.INV_LAVA_SPEAR_CLICK;
  sprite[SPRITE.CRAFT_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR];
  sprite[SPRITE.CHEST_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR];
  sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.INV_REIDITE_SWORD] = [];
  sprite[SPRITE.INV_REIDITE_SWORD][0] = IMAGES.INV_REIDITE_SWORD_OUT;
  sprite[SPRITE.INV_REIDITE_SWORD][1] = IMAGES.INV_REIDITE_SWORD_IN;
  sprite[SPRITE.INV_REIDITE_SWORD][2] = IMAGES.INV_REIDITE_SWORD_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.INV_REIDITE_SPEAR] = [];
  sprite[SPRITE.INV_REIDITE_SPEAR][0] = IMAGES.INV_REIDITE_SPEAR_OUT;
  sprite[SPRITE.INV_REIDITE_SPEAR][1] = IMAGES.INV_REIDITE_SPEAR_IN;
  sprite[SPRITE.INV_REIDITE_SPEAR][2] = IMAGES.INV_REIDITE_SPEAR_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR];
  sprite[SPRITE.CHEST_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR];
  sprite[SPRITE.INV_DIAMOND_PROTECTION] = [];
  sprite[SPRITE.INV_DIAMOND_PROTECTION][0] = IMAGES.INV_DIAMOND_PROTECTION_OUT;
  sprite[SPRITE.INV_DIAMOND_PROTECTION][1] = IMAGES.INV_DIAMOND_PROTECTION_IN;
  sprite[SPRITE.INV_DIAMOND_PROTECTION][2] = IMAGES.INV_DIAMOND_PROTECTION_CLICK;
  sprite[SPRITE.CRAFT_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION];
  sprite[SPRITE.CHEST_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION];
  sprite[SPRITE.INV_AMETHYST_PROTECTION] = [];
  sprite[SPRITE.INV_AMETHYST_PROTECTION][0] = IMAGES.INV_AMETHYST_PROTECTION_OUT;
  sprite[SPRITE.INV_AMETHYST_PROTECTION][1] = IMAGES.INV_AMETHYST_PROTECTION_IN;
  sprite[SPRITE.INV_AMETHYST_PROTECTION][2] = IMAGES.INV_AMETHYST_PROTECTION_CLICK;
  sprite[SPRITE.CRAFT_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION];
  sprite[SPRITE.CHEST_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION];
  sprite[SPRITE.INV_REIDITE_PROTECTION] = [];
  sprite[SPRITE.INV_REIDITE_PROTECTION][0] = IMAGES.INV_REIDITE_PROTECTION_OUT;
  sprite[SPRITE.INV_REIDITE_PROTECTION][1] = IMAGES.INV_REIDITE_PROTECTION_IN;
  sprite[SPRITE.INV_REIDITE_PROTECTION][2] = IMAGES.INV_REIDITE_PROTECTION_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION];
  sprite[SPRITE.CHEST_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION];
  sprite[SPRITE.INV_REIDITE_HELMET] = [];
  sprite[SPRITE.INV_REIDITE_HELMET][0] = IMAGES.INV_REIDITE_HELMET_OUT;
  sprite[SPRITE.INV_REIDITE_HELMET][1] = IMAGES.INV_REIDITE_HELMET_IN;
  sprite[SPRITE.INV_REIDITE_HELMET][2] = IMAGES.INV_REIDITE_HELMET_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET];
  sprite[SPRITE.CHEST_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET];
  sprite[SPRITE.INV_LAVA_HELMET] = [];
  sprite[SPRITE.INV_LAVA_HELMET][0] = IMAGES.INV_LAVA_HELMET_OUT;
  sprite[SPRITE.INV_LAVA_HELMET][1] = IMAGES.INV_LAVA_HELMET_IN;
  sprite[SPRITE.INV_LAVA_HELMET][2] = IMAGES.INV_LAVA_HELMET_CLICK;
  sprite[SPRITE.CRAFT_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET];
  sprite[SPRITE.CHEST_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET];
  sprite[SPRITE.INV_FIREFLY] = [];
  sprite[SPRITE.INV_FIREFLY][0] = IMAGES.INV_FIREFLY_OUT;
  sprite[SPRITE.INV_FIREFLY][1] = IMAGES.INV_FIREFLY_IN;
  sprite[SPRITE.INV_FIREFLY][2] = IMAGES.INV_FIREFLY_CLICK;
  sprite[SPRITE.CRAFT_FIREFLY] = sprite[SPRITE.INV_FIREFLY];
  sprite[SPRITE.CHEST_FIREFLY] = sprite[SPRITE.INV_FIREFLY];
  sprite[SPRITE.INV_WITCH] = [];
  sprite[SPRITE.INV_WITCH][0] = IMAGES.INV_WITCH_OUT;
  sprite[SPRITE.INV_WITCH][1] = IMAGES.INV_WITCH_IN;
  sprite[SPRITE.INV_WITCH][2] = IMAGES.INV_WITCH_CLICK;
  sprite[SPRITE.CRAFT_WITCH] = sprite[SPRITE.INV_WITCH];
  sprite[SPRITE.CHEST_WITCH] = sprite[SPRITE.INV_WITCH];
  sprite[SPRITE.INV_NIMBUS] = [];
  sprite[SPRITE.INV_NIMBUS][0] = IMAGES.INV_NIMBUS_OUT;
  sprite[SPRITE.INV_NIMBUS][1] = IMAGES.INV_NIMBUS_IN;
  sprite[SPRITE.INV_NIMBUS][2] = IMAGES.INV_NIMBUS_CLICK;
  sprite[SPRITE.CRAFT_NIMBUS] = sprite[SPRITE.INV_NIMBUS];
  sprite[SPRITE.CHEST_NIMBUS] = sprite[SPRITE.INV_NIMBUS];
  sprite[SPRITE.INV_REIDITE] = [];
  sprite[SPRITE.INV_REIDITE][0] = IMAGES.INV_REIDITE_OUT;
  sprite[SPRITE.INV_REIDITE][1] = IMAGES.INV_REIDITE_IN;
  sprite[SPRITE.INV_REIDITE][2] = IMAGES.INV_REIDITE_CLICK;
  sprite[SPRITE.CHEST_REIDITE] = sprite[SPRITE.INV_REIDITE];
  sprite[SPRITE.INV_FLAME] = [];
  sprite[SPRITE.INV_FLAME][0] = IMAGES.INV_FLAME_OUT;
  sprite[SPRITE.INV_FLAME][1] = IMAGES.INV_FLAME_IN;
  sprite[SPRITE.INV_FLAME][2] = IMAGES.INV_FLAME_CLICK;
  sprite[SPRITE.CHEST_FLAME] = sprite[SPRITE.INV_FLAME];
  sprite[SPRITE.CHEST_SHOVEL] = sprite[SPRITE.INV_SHOVEL];
  sprite[SPRITE.CHEST_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD];
  sprite[SPRITE.CHEST_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND];
  sprite[SPRITE.CHEST_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST];
  sprite[SPRITE.CHEST_SEED] = sprite[SPRITE.INV_SEED];
  sprite[SPRITE.CHEST_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED];
  sprite[SPRITE.CHEST_WINDMILL] = sprite[SPRITE.INV_WINDMILL];
  sprite[SPRITE.CHEST_WILD_WHEAT] = sprite[SPRITE.INV_WILD_WHEAT];
  sprite[SPRITE.CHEST_FIRE] = sprite[SPRITE.INV_FIRE];
  sprite[SPRITE.CHEST_DRAGON_ORB] = sprite[SPRITE.INV_DRAGON_ORB];
  sprite[SPRITE.CHEST_DRAGON_CUBE] = sprite[SPRITE.INV_DRAGON_CUBE];
  sprite[SPRITE.CHEST_LAVA_ORB] = sprite[SPRITE.INV_LAVA_ORB];
  sprite[SPRITE.CHEST_LAVA_CUBE] = sprite[SPRITE.INV_LAVA_CUBE];
  sprite[SPRITE.CHEST_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE];
  sprite[SPRITE.CHEST_SUGAR_CAN] = sprite[SPRITE.INV_SUGAR_CAN];
  sprite[SPRITE.CHEST_PIRATE_SWORD] = sprite[SPRITE.INV_PIRATE_SWORD];
  sprite[SPRITE.CHEST_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD];
  sprite[SPRITE.CHEST_SWORD] = sprite[SPRITE.INV_SWORD];
  sprite[SPRITE.CHEST_CURSED_SWORD] = sprite[SPRITE.INV_CURSED_SWORD];
  sprite[SPRITE.CHEST_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD];
  sprite[SPRITE.CHEST_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND];
  sprite[SPRITE.CHEST_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST];
  sprite[SPRITE.CHEST_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD];
  sprite[SPRITE.CHEST_PICK] = sprite[SPRITE.INV_PICK];
  sprite[SPRITE.CHEST_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD];
  sprite[SPRITE.CHEST_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND];
  sprite[SPRITE.CHEST_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST];
  sprite[SPRITE.CHEST_STONE] = sprite[SPRITE.INV_STONE];
  sprite[SPRITE.CHEST_GOLD] = sprite[SPRITE.INV_GOLD];
  sprite[SPRITE.CHEST_DIAMOND] = sprite[SPRITE.INV_DIAMOND];
  sprite[SPRITE.CHEST_WOOD] = sprite[SPRITE.INV_WOOD];
  sprite[SPRITE.CHEST_PLANT] = sprite[SPRITE.INV_PLANT];
  sprite[SPRITE.CHEST_WORKBENCH] = sprite[SPRITE.INV_WORK];
  sprite[SPRITE.CHEST_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL];
  sprite[SPRITE.CHEST_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL];
  sprite[SPRITE.CHEST_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL];
  sprite[SPRITE.CHEST_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL];
  sprite[SPRITE.CHEST_WALL] = sprite[SPRITE.INV_WALL];
  sprite[SPRITE.CHEST_SPIKE] = sprite[SPRITE.INV_SPIKE];
  sprite[SPRITE.CHEST_MEAT] = sprite[SPRITE.INV_MEAT];
  sprite[SPRITE.CHEST_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT];
  sprite[SPRITE.CHEST_CORD] = sprite[SPRITE.INV_CORD];
  sprite[SPRITE.CHEST_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD];
  sprite[SPRITE.CHEST_BANDAGE] = sprite[SPRITE.INV_BANDAGE];
  sprite[SPRITE.CHEST_LOCK] = sprite[SPRITE.INV_LOCK];
  sprite[SPRITE.CHEST_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK];
  sprite[SPRITE.CHEST_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION];
  sprite[SPRITE.CHEST_DRAGON_HEART] = sprite[SPRITE.INV_DRAGON_HEART];
  sprite[SPRITE.CHEST_LAVA_HEART] = sprite[SPRITE.INV_LAVA_HEART];
  sprite[SPRITE.CHEST_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD];
  sprite[SPRITE.CHEST_TOTEM] = sprite[SPRITE.INV_TOTEM];
  sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE];
  sprite[SPRITE.CHEST_CHEST] = sprite[SPRITE.INV_CHEST];
  sprite[SPRITE.CHEST_SLOT] = CTI(create_chest_slot(.8, true, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
  sprite[SPRITE.CHEST_PLUS] = create_craft_button(.5, [{f: create_plus_chest, x: 0, y: 2, a: 1, r: 0, c: ["#ffffff"]}], .16, ["#c4a23a", "#d0ad41", "#b89733"], .9);
  sprite[SPRITE.CHEST_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE];
  sprite[SPRITE.CHEST_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE];
  sprite[SPRITE.CHEST_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE];
  sprite[SPRITE.CHEST_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE];
  sprite[SPRITE.CHEST_BAG] = sprite[SPRITE.INV_BAG];
  sprite[SPRITE.CHEST_SPECIAL_FUR] = sprite[SPRITE.INV_SPECIAL_FUR];
  sprite[SPRITE.CHEST_SPECIAL_FUR_2] = sprite[SPRITE.INV_SPECIAL_FUR_2];
  sprite[SPRITE.CHEST_FUR] = sprite[SPRITE.INV_FUR];
  sprite[SPRITE.CHEST_KRAKEN_SKIN] = sprite[SPRITE.INV_KRAKEN_SKIN];
  sprite[SPRITE.CHEST_FUR_WOLF] = sprite[SPRITE.INV_FUR_WOLF];
  sprite[SPRITE.CHEST_FUR_BOAR] = sprite[SPRITE.INV_FUR_BOAR];
  sprite[SPRITE.CHEST_FUR_WINTER] = sprite[SPRITE.INV_FUR_WINTER];
  sprite[SPRITE.CHEST_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS];
  sprite[SPRITE.CHEST_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF];
  sprite[SPRITE.CHEST_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE];
  sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE];
  sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE];
  sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE];
  sprite[SPRITE.CHEST_COAT] = sprite[SPRITE.INV_COAT];
  sprite[SPRITE.CHEST_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR];
  sprite[SPRITE.CHEST_SPEAR] = sprite[SPRITE.INV_SPEAR];
  sprite[SPRITE.CHEST_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR];
  sprite[SPRITE.CHEST_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR];
  sprite[SPRITE.CHEST_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR];
  sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
  sprite[SPRITE.CHEST_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER];
  sprite[SPRITE.CHEST_SPANNER] = sprite[SPRITE.INV_SPANNER];
  sprite[SPRITE.CHEST_HAMMER] = sprite[SPRITE.INV_HAMMER];
  sprite[SPRITE.CHEST_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD];
  sprite[SPRITE.CHEST_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND];
  sprite[SPRITE.CHEST_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST];
  sprite[SPRITE.CHEST_FURNACE] = sprite[SPRITE.INV_FURNACE];
  sprite[SPRITE.CHEST_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN];
  sprite[SPRITE.CHEST_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT];
  sprite[SPRITE.CHEST_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET];
  sprite[SPRITE.CHEST_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET];
  sprite[SPRITE.CHEST_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET];
  sprite[SPRITE.CHEST_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET];
  sprite[SPRITE.CHEST_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET];
  sprite[SPRITE.CHEST_BOOK] = sprite[SPRITE.INV_BOOK];
  sprite[SPRITE.CHEST_PAPER] = sprite[SPRITE.INV_PAPER];
  sprite[SPRITE.CHEST_AMETHYST] = sprite[SPRITE.INV_AMETHYST];
  sprite[SPRITE.CHEST_BRIDGE] = sprite[SPRITE.INV_BRIDGE];
  sprite[SPRITE.CHEST_ROOF] = sprite[SPRITE.INV_ROOF];
  sprite[SPRITE.CHEST_PLOT] = sprite[SPRITE.INV_PLOT];
  sprite[SPRITE.CHEST_SAND] = sprite[SPRITE.INV_SAND];
  sprite[SPRITE.CHEST_BREAD] = sprite[SPRITE.INV_BREAD];
  sprite[SPRITE.CHEST_ICE] = sprite[SPRITE.INV_ICE];
  sprite[SPRITE.CHEST_GROUND] = sprite[SPRITE.INV_GROUND];
  sprite[SPRITE.CHEST_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL];
  sprite[SPRITE.CHEST_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY];
  sprite[SPRITE.CHEST_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN];
  sprite[SPRITE.CHEST_FLOUR] = sprite[SPRITE.INV_FLOUR];
  sprite[SPRITE.CHEST_COOKIE] = sprite[SPRITE.INV_COOKIE];
  sprite[SPRITE.CHEST_CANDY] = sprite[SPRITE.INV_CANDY];
  sprite[SPRITE.CHEST_FERRERO] = sprite[SPRITE.INV_FERRERO];
  sprite[SPRITE.CHEST_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT];
  sprite[SPRITE.CHEST_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK];
  sprite[SPRITE.CHEST_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL];
  sprite[SPRITE.CHEST_CAKE] = sprite[SPRITE.INV_CAKE];
  sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK];
  sprite[SPRITE.CHEST_FOODFISH] = sprite[SPRITE.INV_FOODFISH];
  sprite[SPRITE.CHEST_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED];
  sprite[SPRITE.CHEST_SCALES] = sprite[SPRITE.INV_SCALES];
  sprite[SPRITE.CHEST_SANDWICH] = sprite[SPRITE.INV_SANDWICH];
  sprite[SPRITE.CHEST_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN];
  sprite[SPRITE.CHEST_GEMME_GREEN] = sprite[SPRITE.INV_GEMME_GREEN];
  sprite[SPRITE.CHEST_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE];
  sprite[SPRITE.CHEST_GEMME_ORANGE] = sprite[SPRITE.INV_GEMME_ORANGE];
  sprite[SPRITE.CHEST_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE];
  sprite[SPRITE.CHEST_GEMME_BLUE] = sprite[SPRITE.INV_GEMME_BLUE];
  sprite[SPRITE.CHEST_HOOD] = sprite[SPRITE.INV_HOOD];
  sprite[SPRITE.CHEST_PEASANT] = sprite[SPRITE.INV_PEASANT];
  sprite[SPRITE.CHEST_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT];
  sprite[SPRITE.CHEST_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD];
  sprite[SPRITE.CHEST_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY];
  sprite[SPRITE.CHEST_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL];
  sprite[SPRITE.CHEST_WELL] = sprite[SPRITE.INV_WELL];
  sprite[SPRITE.CHEST_SIGN] = sprite[SPRITE.INV_SIGN];
  sprite[SPRITE.CHEST_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED];
  sprite[SPRITE.CHEST_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED];
  sprite[SPRITE.CHEST_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED];
  sprite[SPRITE.CHEST_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET];
}
INFO_BOX = [];
PLAYER_LEVEL = [];
function ctxDrawImage(len, ariyahna, kurtiss, sanyla, sela, dejona, brayen, brian, wydell, marland) {
  if (ariyahna.tryLoad === undefined || ariyahna.tryLoad() === 1) {
    if (marland !== undefined) {
      len.drawImage(ariyahna, kurtiss, sanyla, Math.max(1, sela), Math.max(1, dejona), brayen, brian, wydell, marland);
    } else {
      if (dejona !== undefined) {
        len.drawImage(ariyahna, kurtiss, sanyla, sela, dejona);
      } else {
        len.drawImage(ariyahna, kurtiss, sanyla);
      }
    }
  }
}
function draw_info_box() {
  var divya = game.info_box, genessis = divya.id;
  if (divya.activated === 1 && divya.display === 1) {
    if (INFO_BOX[genessis] === undefined) {
      INFO_BOX[genessis] = create_info_box(genessis);
    }
    if (divya.craft === 1) {
      ctxDrawImage(ctx, INFO_BOX[genessis], divya.x, divya.y);
    } else {
      if (divya.x - 80 + INFO_BOX[genessis].width > canw) {
        ctxDrawImage(ctx, INFO_BOX[genessis], canw - INFO_BOX[genessis].width - 10, divya.y - INFO_BOX[genessis].height - 10);
      } else {
        ctxDrawImage(ctx, INFO_BOX[genessis], divya.x - 80, divya.y - INFO_BOX[genessis].height - 10);
      }
    }
  }
}
function draw_slot_number(belvie, iyauna, sanne) {
  var kiaran = sprite[SPRITE.SLOT_NUMBER][belvie];
  var yalonda = iyauna.info.translate.x + 5 * scale;
  var anjeliett = iyauna.info.translate.y + 5 * scale;
  if (iyauna.info.state == BUTTON_CLICK || sanne) {
    anjeliett += scale * 5;
  }
  ctxDrawImage(ctx, kiaran, yalonda, anjeliett);
}
function draw_amount(dasheena, ursa) {
  if (!sprite[SPRITE.COUNTER][dasheena]) {
    sprite[SPRITE.COUNTER][dasheena] = create_text(scale, "x" + dasheena, 17, "#FFF");
  }
  var mathu = sprite[SPRITE.COUNTER][dasheena];
  var dontrelle = ursa.info.translate.x + ursa.info.img[0].width - mathu.width - 14 * scale;
  var walida = ursa.info.translate.y + ursa.info.img[0].height - mathu.height - 19 * scale;
  if (ursa.info.state == BUTTON_CLICK) {
    walida += scale * 5;
  }
  ctxDrawImage(ctx, mathu, dontrelle, walida);
}
function draw_well_inventory() {
  if (user.chest.open || user.furnace.open || user.windmill.open || user.bread_oven.open || user.extractor.open) {
    return;
  }
  user.well.open = false;
  var larkin = world.fast_units[user.uid];
  var armas = WORLD.DIST_WELL;
  if (!larkin) {
    return;
  }
  for (var maeghen = 0; maeghen < world.units[ITEMS.WELL].length; maeghen++) {
    var locadio = world.units[ITEMS.WELL][maeghen], brandonjames = Utils.dist(locadio, larkin);
    brandonjames < armas && (armas = brandonjames, user.well.open = true, user.well.pid = locadio.pid, user.well.iid = locadio.id);
  }
}
function draw_sign_button() {
  if (user.chest.open || user.furnace.open || user.windmill.open || user.bread_oven.open || user.extractor.open) {
    return;
  }
  user.sign.open = false;
  var nissim = world.fast_units[user.uid];
  var lakinia = WORLD.DIST_SIGN;
  if (!nissim) {
    return;
  }
  for (var malcum = 0; malcum < world.units[ITEMS.SIGN].length; malcum++) {
    var shekinah = world.units[ITEMS.SIGN][malcum], danton = Utils.dist(shekinah, nissim);
    danton < lakinia && shekinah.info === 0 && shekinah.pid === user.id && (user.sign.open = true, lakinia = danton, user.sign.iid = shekinah.id);
  }
  if (lakinia < WORLD.DIST_SIGN) {
    var waard = game.sign.button;
    waard.draw(ctx);
  }
}
function draw_bread_oven_inventory() {
  if (user.chest.open || user.furnace.open || user.windmill.open || user.extractor.open) {
    return;
  }
  user.bread_oven.open = false;
  var lameisha = world.fast_units[user.uid];
  var nissan = WORLD.DIST_BREAD_OVEN;
  if (!lameisha) {
    return;
  }
  for (var baudelia = 0; baudelia < world.units[ITEMS.BREAD_OVEN].length; baudelia++) {
    var cloudia = world.units[ITEMS.BREAD_OVEN][baudelia], zayleah = Utils.dist(cloudia, lameisha);
    if (zayleah < nissan) {
      nissan = zayleah;
      user.bread_oven.open = true;
      user.bread_oven.amount_wood = cloudia.info & 31;
      user.bread_oven.amount_flour = (cloudia.info & 992) >> 5;
      user.bread_oven.amount_bread = (cloudia.info & 31744) >> 10;
      user.bread_oven.pid = cloudia.pid;
      user.bread_oven.iid = cloudia.id;
    }
  }
  if (nissan < WORLD.DIST_BREAD_OVEN) {
    var jaquese = sprite[SPRITE.BREAD_OVEN_UI];
    var kyshawna = game.bread_oven_wood_button;
    var lulie = kyshawna.info.translate.x - 32;
    ctxDrawImage(ctx, jaquese, lulie, 0);
    if (user.bread_oven.amount_wood > 0) {
      kyshawna.draw(ctx);
      var sadonna = user.bread_oven.amount_wood;
      if (sadonna > 1) {
        draw_amount(sadonna, kyshawna);
      }
    }
    var kyshawna = game.bread_oven_bread_button;
    if (user.bread_oven.amount_bread > 0) {
      kyshawna.draw(ctx);
      var sadonna = user.bread_oven.amount_bread;
      if (sadonna > 1) {
        draw_amount(sadonna, kyshawna);
      }
    }
    var kyshawna = game.bread_oven_flour_button;
    if (user.bread_oven.amount_flour > 0) {
      kyshawna.draw(ctx);
      var sadonna = user.bread_oven.amount_flour;
      if (sadonna > 1) {
        draw_amount(sadonna, kyshawna);
      }
    }
  }
}
function draw_extractor_inventory() {
  if (user.chest.open || user.furnace.open) {
    return;
  }
  user.extractor.open = false;
  var kyomi = world.fast_units[user.uid], cera = WORLD.DIST_EXTRACTOR_MACHINE;
  if (!kyomi) {
    return;
  }
  for (var dylian = 0; dylian < EXTRACTORS.length; dylian++) {
    var soobin = EXTRACTORS[dylian][0], bridgitte = EXTRACTORS[dylian][1];
    for (var teniah = 0; teniah < world.units[soobin].length; teniah++) {
      var clover = world.units[soobin][teniah], nooreh = Utils.dist(clover, kyomi);
      if (nooreh < cera) {
        cera = nooreh;
        user.extractor.mineral = bridgitte;
        user.extractor.type = soobin;
        user.extractor.open = true;
        user.extractor.amount_wood = clover.info & 255;
        user.extractor.amount_mineral = (clover.info & 65280) >> 8;
        user.extractor.pid = clover.pid;
        user.extractor.iid = clover.id;
      }
    }
  }
  if (cera < WORLD.DIST_EXTRACTOR_MACHINE) {
    var nathaly = sprite[SPRITE.EXTRACTOR_CASES], mallarie = game.extractor_wood_button, lynzey = mallarie.info.translate.x - 33;
    ctxDrawImage(ctx, nathaly, lynzey, 0);
    if (user.extractor.amount_wood > 0) {
      mallarie.draw(ctx);
      var diyan = user.extractor.amount_wood;
      if (diyan > 1) {
        draw_amount(diyan, mallarie);
      }
    }
    switch (user.extractor.mineral) {
      case INV.STONE:
        var mallarie = game.extractor_stone_button;
        break;
      case INV.GOLD:
        var mallarie = game.extractor_gold_button;
        break;
      case INV.DIAMOND:
        var mallarie = game.extractor_diamond_button;
        break;
      case INV.AMETHYST:
        var mallarie = game.extractor_amethyst_button;
        break;
      case INV.REIDITE:
        var mallarie = game.extractor_reidite_button;
        break;
    }
    if (user.extractor.amount_mineral > 0) {
      mallarie.draw(ctx);
      var diyan = user.extractor.amount_mineral;
      if (diyan > 1) {
        draw_amount(diyan, mallarie);
      }
    }
  }
}
function draw_windmill_inventory() {
  if (user.chest.open || user.furnace.open) {
    return;
  }
  user.windmill.open = false;
  var rooseve = world.fast_units[user.uid];
  var dkayla = WORLD.DIST_WINDMILL;
  if (!rooseve) {
    return;
  }
  for (var ramone = 0; ramone < world.units[ITEMS.WINDMILL].length; ramone++) {
    var yashvi = world.units[ITEMS.WINDMILL][ramone], emilyna = Utils.dist(yashvi, rooseve);
    if (emilyna < dkayla) {
      dkayla = emilyna;
      user.windmill.open = true;
      user.windmill.amount_wheat = yashvi.info & 255;
      user.windmill.amount_flour = (yashvi.info & 65280) >> 8;
      user.windmill.pid = yashvi.pid;
      user.windmill.iid = yashvi.id;
    }
  }
  if (dkayla < WORLD.DIST_WINDMILL) {
    var jessimae = sprite[SPRITE.WINDMILL_CASES];
    var htoo = game.windmill_wheat_button;
    var kelei = htoo.info.translate.x - 33;
    ctxDrawImage(ctx, jessimae, kelei, 0);
    if (user.windmill.amount_wheat > 0) {
      htoo.draw(ctx);
      var lulubell = user.windmill.amount_wheat;
      if (lulubell > 1) {
        draw_amount(lulubell, htoo);
      }
    }
    var htoo = game.windmill_flour_button;
    if (user.windmill.amount_flour > 0) {
      htoo.draw(ctx);
      var lulubell = user.windmill.amount_flour;
      if (lulubell > 1) {
        draw_amount(lulubell, htoo);
      }
    }
  }
}
function draw_furnace_inventory() {
  if (user.chest.open) {
    return;
  }
  user.furnace.amount = 0;
  user.furnace.open = false;
  var angalee = world.fast_units[user.uid];
  var maday = WORLD.DIST_FURNACE;
  if (!angalee) {
    return;
  }
  for (var jerni = 0; jerni < world.units[ITEMS.FURNACE].length; jerni++) {
    var mavrix = world.units[ITEMS.FURNACE][jerni], keatan = Utils.dist(mavrix, angalee);
    if (keatan < maday) {
      maday = keatan;
      user.furnace.open = true;
      user.furnace.amount = mavrix.info;
      user.furnace.pid = mavrix.pid;
      user.furnace.iid = mavrix.id;
    }
  }
  if (maday < WORLD.DIST_FURNACE) {
    var lucias = sprite[SPRITE.FURNACE_SLOT];
    var myldred = game.furnace_button;
    var quasean = Math.floor(myldred.info.translate.x + (myldred.info.img[0].width - lucias.width) / 2);
    var jaxstyn = Math.floor(myldred.info.translate.y + (myldred.info.img[0].height - lucias.height) / 2) + 3;
    ctxDrawImage(ctx, lucias, quasean, jaxstyn);
    if (user.furnace.amount > 0) {
      myldred.draw(ctx);
      var breyanne = user.furnace.amount;
      if (breyanne > 1) {
        draw_amount(breyanne, myldred);
      }
    }
  }
}
function draw_resurrection_inventory() {
  user.resurrection.open = false;
  var hermine = world.fast_units[user.uid];
  var nonda = WORLD.DIST_RESURRECTION;
  if (!hermine) {
    return;
  }
  for (var deajanae = 0; deajanae < world.units[ITEMS.RESURRECTION].length; deajanae++) {
    var laughlin = world.units[ITEMS.RESURRECTION][deajanae], glennis = Utils.dist(laughlin, hermine);
    glennis < nonda && (nonda = glennis, user.resurrection.open = true, user.resurrection.pid = laughlin.pid, user.resurrection.iid = laughlin.id);
  }
  if (nonda < WORLD.DIST_RESURRECTION) {
    game.resurrection.draw(ctx);
  }
}
function draw_team_buttons() {
  user.totem.id = -1;
  user.totem.pid = -1;
  if (user.spectator || user.totem.wait || user.zombie) {
    return;
  }
  var melodii = world.fast_units[user.uid];
  var brently = WORLD.DIST_TOTEM;
  if (melodii) {
    for (var saraii = 0; saraii < world.units[ITEMS.TOTEM].length; saraii++) {
      var leeila = world.units[ITEMS.TOTEM][saraii], merriman = Utils.dist(leeila, melodii);
      if (merriman < brently) {
        brently = merriman;
        user.totem.id = leeila.id;
        user.totem.pid = leeila.pid;
        user.totem.info = leeila.info;
        user.totem.lock = (leeila.info & 16) >> 4;
      }
    }
  }
  var kagome = game.team_buttons_id;
  game.team_buttons_id = -1;
  if (user.totem.pid != -1 && (user.team.length == 0 || user.id == user.totem.pid)) {
    if (user.team.length == 0 && user.totem.info >= 8) {
      game.team_buttons_id = CLIENT.TEAM_FULL;
    } else {
      if (user.team.length == 0) {
        game.team_buttons_id = CLIENT.TEAM_JOIN;
      } else {
        game.team_buttons_id = CLIENT.TEAM_MANAGE;
      }
    }
  } else {
    if (user.team.length != 0 && user.team[0] != user.id) {
      game.team_buttons_id = CLIENT.TEAM_LEAVE;
    } else {
      if (user.team.length != 0 && user.team[0] == user.id) {
        game.team_buttons_id = CLIENT.TEAM_SHOW;
      } else {
        if (user.team.length != 0) {
          game.team_buttons_id = CLIENT.TEAM_JOIN;
        }
      }
    }
  }
  if (game.team_buttons_id != -1) {
    game.team_buttons[game.team_buttons_id].button.draw(ctx);
  }
  var laylarae = document.getElementById("team_box").style;
  if (game.team_buttons_id != -1 && game.team_buttons_id != kagome && laylarae.display == "inline-block") {
    game.team_buttons[game.team_buttons_id].action();
  }
}
function draw_chest_inventory() {
  user.chest.id = -1;
  user.chest.lock = false;
  user.chest.locked = false;
  user.chest.lockpick = false;
  user.chest.padlock = false;
  user.chest.open = false;
  var avleen = world.fast_units[user.uid];
  var cailon = WORLD.DIST_CHEST;
  if (!avleen) {
    return;
  }
  for (var shelica = 0; shelica < world.units[ITEMS.CHEST].length; shelica++) {
    var leester = world.units[ITEMS.CHEST][shelica], shehrbano = Utils.dist(leester, avleen);
    if (shehrbano < cailon) {
      cailon = shehrbano;
      user.chest.open = true;
      user.chest.id = leester.action < 2 ? -1 : Math.floor((leester.action - 1) / 2);
      user.chest.amount = leester.info;
      user.chest.pid = leester.pid;
      user.chest.iid = leester.id;
      user.chest.locked = leester.lock;
      user.chest.lock = leester.lock && user.id != leester.pid && !user.in_team(leester.pid) ? true : false;
      user.chest.padlock = leester.pid === user.id && !user.chest.locked && user.inv.find_item(INV.LOCK) != -1 ? true : false;
      if (user.chest.locked && user.inv.find_item(INV.LOCKPICK) != -1) {
        user.chest.lockpick = true;
      }
    }
  }
  if (cailon < WORLD.DIST_CHEST) {
    var elizbeth = sprite[SPRITE.CHEST_SLOT];
    var cogan = game.chest_buttons[0];
    var ayzlee = Math.floor(cogan.info.translate.x + (cogan.info.img[0].width - elizbeth.width) / 2);
    var trintin = Math.floor(cogan.info.translate.y + (cogan.info.img[0].height - elizbeth.height) / 2) + 3;
    ctxDrawImage(ctx, elizbeth, ayzlee, trintin);
    if (!user.chest.lock || user.chest.pid === user.id) {
      if (user.chest.id >= 0) {
        var cogan = game.chest_buttons[user.chest.id];
        cogan.draw(ctx);
        var jovaan = user.chest.amount;
        if (jovaan > 1) {
          draw_amount(jovaan, cogan);
        }
      }
    }
    if (!user.chest.lock) {
      if (user.chest.padlock) {
        game.chest_padlock.draw(ctx);
      }
    } else {
      game.chest_locked.draw(ctx);
    }
    if (user.chest.lockpick) {
      game.chest_lockpick.draw(ctx);
    }
  }
}
function draw_bigmap() {
  if (!user.bigmap) {
    return;
  }
  ctx.globalAlpha = .5;
  ctx.fillStyle = "#000";
  ctx.fillRect(0, 0, canw, canh);
  ctx.globalAlpha = .8;
  var dezmend = sprite[SPRITE.BIGMAP][world.time];
  var khalila = canw2 - dezmend.width / 2;
  var lucynda = canh2 - dezmend.height / 2;
  ctxDrawImage(ctx, dezmend, khalila, lucynda);
  ctx.globalAlpha = 1;
  game.minimap.marker.x > -1 && (ctx.fillStyle = "#660000", circle(ctx, khalila + game.minimap.marker.x * 3 * scale, lucynda + game.minimap.marker.y * 3 * scale, scale * 14), ctx.fill());
  var lucky = game.minimap.players;
  for (var kean = 0; kean < lucky.length; kean++) {
    var toshiharu = lucky[kean];
    ctx.fillStyle = !world.time ? "#ff0000" : "#ff0000";
    circle(ctx, khalila + 600 * (toshiharu.x / (world.nw * 100)) * scale, lucynda + 600 * (toshiharu.y / (world.nh * 100)) * scale, scale * 6);
    ctx.fill();
  }
  var khallil = world.fast_units[user.uid];
  khallil && (ctx.fillStyle = !world.time ? "#e39716" : "#fff", circle(ctx, khalila + 600 * (khallil.x / (world.nw * 100)) * scale, lucynda + 600 * (khallil.y / (world.nh * 100)) * scale, scale * 12), ctx.fill());
}
function draw_reconnect() {
  if (user.reconnect.enabled) {
    ctx.globalAlpha = .9;
    ctx.fillStyle = "#000";
    round_rect(ctx, canw2 - 150, canh2 - 90, 300, 180, 15);
    ctx.fill();
    ctx.globalAlpha = 1;
    var elky = sprite[SPRITE.GEAR2];
    ctx.save();
    user.reconnect.rotate = (user.reconnect.rotate + delta * 2) % (Math.PI * 2);
    ctx.translate(canw / 2, canh / 2 - 25);
    ctx.rotate(user.reconnect.rotate);
    ctxDrawImage(ctx, elky, -elky.width / 2, -elky.height / 2);
    ctx.restore();
    var elky = sprite[SPRITE.RECONNECT];
    ctxDrawImage(ctx, elky, (canw - elky.width) / 2, (canh - elky.height) / 2 + 25);
  }
}
function draw_minimap() {
  if (user.inv.can_select.length > 0) {
    var swinton = {x: game.minimap.translate.x, y: game.minimap.translate.y - 120 * scale};
  } else {
    var swinton = {x: game.minimap.translate.x, y: game.minimap.translate.y - 50 * scale};
  }
  ctx.globalAlpha = .8;
  var yusha = sprite[SPRITE.MINIMAP][world.time];
  ctxDrawImage(ctx, yusha, swinton.x, swinton.y);
  ctx.globalAlpha = 1;
  game.minimap.marker.x > -1 && (ctx.fillStyle = "#660000", circle(ctx, swinton.x + game.minimap.marker.x * scale, swinton.y + game.minimap.marker.y * scale, scale * 5), ctx.fill());
  var hampton = scale;
  var mirabell = game.minimap.players;
  for (var lapriest = 0; lapriest < mirabell.length; lapriest++) {
    var muhammadyusuf = mirabell[lapriest];
    ctx.fillStyle = !world.time ? "#ff0000" : "#ff0000";
    circle(ctx, swinton.x + 193 * (muhammadyusuf.x / (world.nw * 100)) * scale, swinton.y + 193 * (muhammadyusuf.y / (world.nh * 100)) * scale, scale * 2);
    ctx.fill();
  }
  var vienne = world.fast_units[user.uid];
  vienne && (ctx.fillStyle = !world.time ? "#e39716" : "#fff", circle(ctx, swinton.x + 193 * (vienne.x / (world.nw * 100)) * scale, swinton.y + 193 * (vienne.y / (world.nh * 100)) * scale, scale * 4), ctx.fill());
  scale = hampton;
}
var __BANDAGE__ = [];
function draw_status() {
  var dazaria = -8;
  if (user.auto_feed.enabled) {
    var jakeil = sprite[SPRITE.AUTO_FEED];
    ctxDrawImage(ctx, jakeil, user.auto_feed.translate.x, user.auto_feed.translate.y + dazaria);
    dazaria += 70;
  }
  if (user.blizzard === 1) {
    var jakeil = sprite[SPRITE.STOP_REGENERATION_BLIZZARD];
    ctxDrawImage(ctx, jakeil, user.auto_feed.translate.x, user.auto_feed.translate.y + dazaria);
    dazaria += 70;
  } else {
    if (user.gauges.cold.x < .25 || user.gauges.hunger.x < .25 || user.gauges.thirst.x < .25 || user.gauges.oxygen.x < .25 || user.gauges.warm.x < .25) {
      var jakeil = sprite[SPRITE.STOP_REGENERATION];
      ctxDrawImage(ctx, jakeil, user.auto_feed.translate.x, user.auto_feed.translate.y + dazaria);
      dazaria += 70;
    }
  }
  if (user.bandage > 0) {
    var jakeil = sprite[SPRITE.BANDAGE_ACTIVATED];
    ctxDrawImage(ctx, jakeil, user.auto_feed.translate.x, user.auto_feed.translate.y + dazaria);
    var nelvie = __BANDAGE__[user.bandage];
    nelvie === undefined && (nelvie = create_text(scale, user.bandage + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6), __BANDAGE__[user.bandage] = nelvie);
    if (user.bandage < 9) {
      ctxDrawImage(ctx, nelvie, user.auto_feed.translate.x - 39, user.auto_feed.translate.y + dazaria + 20);
    } else {
      ctxDrawImage(ctx, nelvie, user.auto_feed.translate.x - 46, user.auto_feed.translate.y + dazaria + 20);
    }
  }
}
function draw_leaderboard() {
  var tailar = user.ldb, zepplyn = game.leaderboard;
  if (tailar.update) {
    tailar.update = false;
    var gitanjali = tailar.ids, quashayla = zepplyn.can.width, oluwatumininu = zepplyn.can.height, talayja = zepplyn.ctx, paislynn = world.players, nowell = false;
    talayja.clearRect(0, 0, quashayla, oluwatumininu);
    talayja.drawImage(zepplyn.img, 0, 0);
    for (var alery = 0; alery < gitanjali.length; alery++) {
      var nakyiah = paislynn[gitanjali[alery]];
      if (world.mode === WORLD.MODE_HUNGER_GAMES && nakyiah.nickname === "spectator") {
        continue;
      }
      if (world.mode === WORLD.MODE_ZOMBIES && nakyiah.skin === WORLD.ZOMBIE_SKIN) {
        continue;
      }
      if (gitanjali[alery] == user.id) {
        nowell = true;
        if (world.mode === WORLD.MODE_VAMPIRES && nakyiah.skin === WORLD.VAMPIRE_SKIN) {
          color = "#FF0000";
        } else {
          color = "#FFF";
        }
      } else {
        if (world.mode === WORLD.MODE_VAMPIRES && nakyiah.skin === WORLD.VAMPIRE_SKIN) {
          color = "#990000";
        } else {
          color = "#A1BDCD";
        }
      }
      talayja.drawImage(create_text(scale, "" + (alery + 1), 15 * scale, color), 20 * scale, (40 + alery * 22) * scale);
      if (!nakyiah.ldb_label) {
        nakyiah.ldb_label = create_text(scale, nakyiah.nickname, 15 * scale, color, undefined, undefined, undefined, undefined, 110 * scale);
      }
      talayja.drawImage(nakyiah.ldb_label, 39 * scale, (40 + alery * 22) * scale);
      talayja.drawImage(create_text(scale, Utils.simplify_number(nakyiah.score), 15 * scale, color), 156 * scale, (40 + alery * 22) * scale);
    }
    !nowell && (world.mode === WORLD.MODE_PVP || world.mode === WORLD.MODE_VAMPIRES || world.mode === WORLD.MODE_LEGACY || world.mode === WORLD.MODE_BR || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_HUNGER_GAMES && !user.spectator || world.mode === WORLD.MODE_ZOMBIES && !user.zombie) && (talayja.drawImage(sprite[SPRITE.YOUR_SCORE], 15 * scale, (46 + alery * 22) * scale), talayja.drawImage(create_text(scale, Utils.simplify_number(world.players[user.id].score), 15 * scale, "#FFF"), 100 * scale, (46 + alery * 22) * scale));
  }
  ctxDrawImage(ctx, zepplyn.can, zepplyn.translate.x, zepplyn.translate.y);
}
function draw_totem_delay() {
  var kilian = user.totem;
  if (kilian.wait) {
    var athalie = kilian.timeout.update();
    ctx.save();
    var carin = sprite[SPRITE.DELAY_TEAM];
    var zayiah = sprite[SPRITE.DELAY_WEAPON].height + 25 * scale;
    ctx.translate(carin.width, game.gauges.translate.y - 188 * scale - zayiah);
    var teletha = -carin.width / 2 - 2;
    var deaires = -carin.height / 2 - 4;
    ctxDrawImage(ctx, carin, teletha + 2, deaires);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(0, deaires + carin.height / 2, 25 * scale, 0, Math.PI * 2 * kilian.timeout.v);
    ctx.stroke();
    ctx.restore();
    athalie && (kilian.wait = false, kilian.timeout.v = 0, kilian.timeout.o = false);
  }
}
function draw_clock() {
  var keila = world.clock;
  var vinell = sprite[SPRITE.CLOCK][world.time];
  ctxDrawImage(ctx, vinell, keila.translate.x, keila.translate.y);
  ctx.save();
  ctx.translate(keila.translate.x + vinell.width / 2, keila.translate.y + vinell.height / 2);
  world.clock.now = ((new Date).getTime() - keila.init + keila.hour) % WORLD.DAY;
  var mellssa = Math.PI * 2 * world.clock.now / WORLD.DAY - Math.PI / 2;
  ctx.rotate(mellssa);
  ctxDrawImage(ctx, sprite[SPRITE.ARROW_CLOCK], -vinell.width / 2, -vinell.height / 2);
  ctx.restore();
}
function draw_build_delay() {
  var raejon = user.build;
  if (raejon.wait) {
    var jalisa = raejon.timeout.update();
    ctx.save();
    var navarro = sprite[SPRITE.DELAY_WALL];
    ctx.translate(navarro.width - 12 * scale, game.gauges.translate.y - 190 * scale);
    var elmarie = -navarro.width / 2 + 9;
    var jaali = -navarro.height / 2 - 4;
    ctxDrawImage(ctx, navarro, elmarie, jaali);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(9, jaali + navarro.height / 2, 25 * scale, 0, Math.PI * 2 * raejon.timeout.v);
    ctx.stroke();
    ctx.restore();
    jalisa && (raejon.wait = false, raejon.timeout.v = 0, raejon.timeout.o = false);
  }
}
function draw_helmet_switch_delay() {
  var milaniya = user.helmet;
  if (milaniya.wait) {
    var beldon = milaniya.timeout.update();
    ctx.save();
    var corolyn = sprite[SPRITE.DELAY_HELMET];
    ctx.translate(corolyn.width - 2 * scale, game.gauges.translate.y - 125 * scale);
    var porcher = -corolyn.width / 2 + 10;
    var joziah = -corolyn.height / 2 - 4;
    ctxDrawImage(ctx, corolyn, porcher, joziah);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(9, joziah + corolyn.height / 2, 25 * scale, 0, Math.PI * 2 * milaniya.timeout.v);
    ctx.stroke();
    ctx.restore();
    beldon && (milaniya.wait = false, milaniya.timeout.v = 0, milaniya.timeout.o = false);
  }
}
function draw_weapon_switch_delay() {
  var poppie = user.weapon;
  if (poppie.wait) {
    var shawneen = poppie.timeout.update();
    ctx.save();
    var ralphe = sprite[SPRITE.DELAY_WEAPON];
    ctx.translate(ralphe.width - 2 * scale, game.gauges.translate.y - 60 * scale);
    var londynne = -ralphe.width / 2 - 2;
    var annette = -ralphe.height / 2 - 4;
    ctxDrawImage(ctx, ralphe, londynne, annette);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(0, annette + ralphe.height / 2, 25 * scale, 0, Math.PI * 2 * poppie.timeout.v);
    ctx.stroke();
    ctx.restore();
    shawneen && (poppie.wait = false, poppie.timeout.v = 0, poppie.timeout.o = false);
  }
}
function draw_ui_gear() {
  var jaydalin = user.craft;
  if (jaydalin.crafting) {
    var marychristina = world.fast_units[user.uid];
    ctx.save();
    ctx.translate(user.cam.x + marychristina.x, user.cam.y + marychristina.y);
    var sanquenetta = sprite[SPRITE.GEAR];
    var sevon = -sanquenetta.width / 2;
    var sarai = -sanquenetta.height / 2 - 125 * scale;
    ctxDrawImage(ctx, sanquenetta, sevon, sarai);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.CRAFT_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(0, sarai + sanquenetta.height / 2, 25 * scale, 0, Math.PI * 2 * jaydalin.timeout.v);
    ctx.stroke();
    ctx.restore();
  }
}
function draw_ui_crafting() {
  var sherretta = user.craft;
  if (!sherretta.crafting && sherretta.preview > 0) {
    var wilberth = world.fast_units[user.uid];
    if (!wilberth) {
      return;
    }
    ctx.save();
    if (INV_INFOS[sherretta.preview].grid === 0 && sherretta.mode === 0) {
      ctx.translate(user.cam.x + wilberth.x, user.cam.y + wilberth.y);
      ctx.rotate(wilberth.angle);
      ctx.translate(120, 0);
    } else {
      var durelle = Math.floor(wilberth.x + Math.cos(wilberth.angle) * 120);
      var cellestine = Math.floor(wilberth.y + Math.sin(wilberth.angle) * 120);
      durelle = user.cam.x + (durelle - durelle % 100 + 50);
      cellestine = user.cam.y + (cellestine - cellestine % 100 + 50);
      ctx.translate(durelle, cellestine);
    }
    var jaydelynn = sprite[sherretta.preview][world.time];
    ctx.globalAlpha = .5;
    ctxDrawImage(ctx, jaydelynn, -jaydelynn.width / 2, -jaydelynn.height / 2);
    ctx.globalAlpha = 1;
    ctx.restore();
    if (INV_INFOS[sherretta.preview].grid === 0) {
      if (!sherretta.label[sherretta.mode]) {
        if (sherretta.mode === 0) {
          sherretta.label[0] = create_text(scale, LANG[TEXT.MODE_FREE], 20, "#e2c340");
        } else {
          sherretta.label[1] = create_text(scale, LANG[TEXT.MODE_GRID], 20, "#e2c340");
        }
      }
      var jaydelynn = sherretta.label[sherretta.mode];
      ctxDrawImage(ctx, jaydelynn, canw2 + -jaydelynn.width / 2, game.gauges.y - 26);
    }
  }
  if (sherretta.crafting) {
    var cobra = sherretta.timeout.update();
    for (var zahrah = 0; zahrah < sherretta.can_craft.length; zahrah++) {
      var emnet = sherretta.can_craft[zahrah];
      if (sherretta.id == emnet.id) {
        var dannon = scale * 42;
        var yamila = scale * 17;
        round_rect(ctx, emnet.info.translate.x, emnet.info.translate.y + dannon * (1 - sherretta.timeout.v), emnet.info.width, dannon * sherretta.timeout.v + yamila, scale * 10);
        ctx.fillStyle = "#55B973";
        ctx.fill();
        ctx.globalAlpha = .8;
        emnet.draw(ctx);
      } else {
        ctx.globalAlpha = .5;
        emnet.draw(ctx);
      }
      ctx.globalAlpha = 1;
    }
    return cobra && (sherretta.crafting = false, sherretta.timeout.v = 0, sherretta.timeout.o = false), true;
  } else {
    for (var zahrah = 0; zahrah < sherretta.can_craft.length; zahrah++) {
      sherretta.can_craft[zahrah].draw(ctx);
    }
  }
  return false;
}
function draw_ui_chat() {
  var leilanirose = world.units[ITEMS.PLAYERS];
  if (world.mode === WORLD.MODE_PVP || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_ZOMBIES || world.mode === WORLD.MODE_LEGACY || world.mode === WORLD.MODE_BR || world.mode === WORLD.MODE_VAMPIRES) {
    for (var ezichi = 0; ezichi < leilanirose.length; ezichi++) {
      leilanirose[ezichi].draw_text();
    }
  } else {
    if (world.mode === WORLD.MODE_HUNGER_GAMES) {
      for (var ezichi = 0; ezichi < leilanirose.length; ezichi++) {
        if (user.spectator || user.show_spectators.enabled) {
          leilanirose[ezichi].draw_text();
        } else {
          if (leilanirose[ezichi].player.nickname !== "spectator") {
            leilanirose[ezichi].draw_text();
          }
        }
      }
    }
  }
}
function draw_ui_inventory() {
  var pfeiffer = user.inv, shelena = world.fast_units[user.uid];
  for (var marlize = 0; marlize < pfeiffer.can_select.length; marlize++) {
    var arron = pfeiffer.can_select[marlize];
    var shayane = false;
    var shelena = world.fast_units[user.uid];
    if (shelena && (shelena.right == arron.id || shelena.clothe == arron.id && shelena.clothe > 0)) {
      shayane = true;
      ctxDrawImage(ctx, arron.info.img[2], arron.info.translate.x, arron.info.translate.y, arron.info.width, arron.info.height);
    } else {
      arron.draw(ctx);
    }
    var hiroyuki = user.inv.n[arron.id];
    if (hiroyuki > 1) {
      draw_amount(hiroyuki, arron);
    }
    if (hiroyuki > 0) {
      draw_slot_number(marlize, arron, shayane);
    }
    var caymus = user.chest;
    if (caymus.open && (caymus.id < 0 || caymus.id == arron.id) && (!caymus.lock || caymus.pid == user.id)) {
      game.plus_buttons[arron.id].draw(ctx);
    }
    var nashana = user.furnace;
    if (nashana.open && INV.WOOD == arron.id) {
      game.plus_buttons[arron.id].draw(ctx);
    }
    var ginette = user.well;
    if (ginette.open && INV.BUCKET_FULL == arron.id) {
      game.plus_buttons[arron.id].draw(ctx);
    }
    var jonziel = user.windmill;
    if (jonziel.open && INV.WILD_WHEAT == arron.id) {
      game.plus_buttons[arron.id].draw(ctx);
    }
    var esias = user.extractor;
    if (esias.open && INV.WOOD == arron.id) {
      game.plus_buttons[arron.id].draw(ctx);
    }
    var katasia = user.bread_oven;
    if (katasia.open && (INV.WOOD == arron.id || INV.FLOUR == arron.id)) {
      game.plus_buttons[arron.id].draw(ctx);
    }
  }
  if (arron && marlize < pfeiffer.max) {
    var leeoma = sprite[SPRITE.EMPTY_SLOT][2];
    x = arron.info.translate.x;
    y = arron.info.translate.y;
    for (j = 1; marlize < pfeiffer.max; marlize++, j++) {
      ctxDrawImage(ctx, leeoma, x + j * (leeoma.width + 5), y);
    }
  }
}
function draw_gauges() {
  ctx.save();
  var fadak = scale;
  if (user.gauges.life.x < .25) {
    ctx.globalAlpha = user.gauges.warn_life.v;
  }
  var kovin = user.inv.can_select.length > 0 ? -70 : 0;
  if (user.chest.open || user.furnace.open && -1 != user.inv.find_item(INV.WOOD) || user.windmill.open && -1 != user.inv.find_item(INV.WILD_WHEAT) || user.extractor.open && -1 != user.inv.find_item(INV.WOOD) || user.well.open && -1 != user.inv.find_item(INV.BUCKET_FULL) || user.bread_oven.open && (-1 != user.inv.find_item(INV.WOOD) || -1 != user.inv.find_item(INV.FLOUR))) {
    kovin -= 50 * scale;
  }
  ctx.translate((canw - 950 * scale) / 2, kovin);
  ctx.fillStyle = "#69A148";
  ctx.fillRect(this.translate.x + 37 * scale, this.translate.y + 17 * scale, user.gauges.life.x * 178 * scale, 18 * scale);
  ctx.globalAlpha = 1;
  user.gauges.hunger.x < .35 && (ctx.fillStyle = "#8F050A", ctx.globalAlpha = user.gauges.warn_hunger.v, ctx.fillRect(this.translate.x + 277 * scale, this.translate.y + 17 * scale, 178 * scale, 18 * scale), ctx.globalAlpha = 1);
  ctx.fillStyle = "#AF352A";
  ctx.fillRect(this.translate.x + 277 * scale, this.translate.y + 17 * scale, user.gauges.hunger.x * 178 * scale, 18 * scale);
  user.gauges.cold.x < .35 && (ctx.fillStyle = "#366B91", ctx.globalAlpha = user.gauges.warn_cold.v, ctx.fillRect(this.translate.x + 517 * scale, this.translate.y + 17 * scale, 178 * scale, 18 * scale), ctx.globalAlpha = 1);
  ctx.fillStyle = "#669BB1";
  ctx.fillRect(this.translate.x + 517 * scale, this.translate.y + 17 * scale, user.gauges.cold.x * 178 * scale, 18 * scale);
  user.gauges.cold.x > .99 && (user.gauges.warm.x < .35 && (ctx.fillStyle = "#6C4036", ctx.globalAlpha = user.gauges.warn_warm.v, ctx.fillRect(this.translate.x + 517 * scale, this.translate.y + 17 * scale, 178 * scale, 18 * scale), ctx.globalAlpha = 1), ctx.fillStyle = "#9C4036", ctx.fillRect(this.translate.x + 517 * scale, this.translate.y + 17 * scale, (1 - user.gauges.warm.x) * 178 * scale, 18 * scale));
  user.gauges.thirst.x < .35 && (ctx.fillStyle = "#001A57", ctx.globalAlpha = user.gauges.warn_thirst.v, ctx.fillRect(this.translate.x + 757 * scale, this.translate.y + 17 * scale, 178 * scale, 18 * scale), ctx.globalAlpha = 1);
  ctx.fillStyle = "#074A87";
  ctx.fillRect(this.translate.x + 757 * scale, this.translate.y + 17 * scale, user.gauges.thirst.x * 178 * scale, 18 * scale);
  scale = fadak;
  ctxDrawImage(ctx, this.img, this.translate.x, this.translate.y);
  this.y = this.translate.y + kovin;
  ctx.restore();
  if (user.gauges.oxygen.x < .99) {
    var jalisha = Math.floor(canw2 - sprite[SPRITE.OXYGEN].width / 2);
    kovin += this.translate.y - sprite[SPRITE.OXYGEN].height - 5 * scale;
    ctx.fillStyle = "#BBE8EF";
    ctx.fillRect(jalisha + 5, kovin + 5 * scale, 588 * scale * user.gauges.oxygen.x, 10 * scale);
    user.gauges.oxygen.x < .35 && (ctx.fillStyle = "#9BA8AF", ctx.globalAlpha = user.gauges.warn_oxygen.v, ctx.fillRect(jalisha + 5, kovin + 5, 588 * scale, 10 * scale), ctx.globalAlpha = 1);
    ctxDrawImage(ctx, sprite[SPRITE.OXYGEN], jalisha, kovin);
    this.y = kovin;
  }
}
function draw_door(oberia) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var tavy = (1 - this.hit.anim.v) * delta * 600 * scale, codera = Math.cos(this.hit.angle - this.angle) * tavy, evelean = Math.sin(this.hit.angle - this.angle) * tavy;
  } else {
    var codera = 0, evelean = 0;
  }
  var shiye = sprite[oberia][world.time];
  w = -shiye.width;
  h = -shiye.height;
  ctxDrawImage(ctx, shiye, -w / 2 + codera, -h / 2 + evelean, w, h);
  ctx.restore();
}
function draw_chest() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var lany = (1 - this.hit.anim.v) * delta * 600 * scale, gabrialle = Math.cos(this.hit.angle - this.angle) * lany, ramzes = Math.sin(this.hit.angle - this.angle) * lany;
  } else {
    var gabrialle = 0, ramzes = 0;
  }
  img = sprite[SPRITE.CHEST][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2 + gabrialle, -h / 2 + ramzes, w, h);
  this.lock && (img = sprite[SPRITE.LOCK][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2 + gabrialle - 1 * scale, -h / 2 + ramzes, w, h));
  ctx.restore();
}
function draw_thornbush_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.THORNBUSH_SEED_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_garlic_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.GARLIC_SEED_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_pumpkin_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.PUMPKIN_SEED_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_aloe_vera_mob() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.ALOE_VERA][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_wheat_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.WHEAT_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_life_small(lucertia) {
  var lucertia = lucertia / 100;
  if (lucertia > .8) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var marquitte = (1 - this.hit.anim.v) * delta * 600 * scale, saveena = Math.cos(this.hit.angle - this.angle) * marquitte, taddeo = Math.sin(this.hit.angle - this.angle) * marquitte;
  } else {
    var saveena = 0, taddeo = 0;
  }
  ctx.globalAlpha = .5;
  circle_angle(ctx, saveena, taddeo, 18 * scale, lucertia);
  fill_path(ctx, null, "#000000", 18 * scale);
  ctx.globalAlpha = 1;
  circle_angle(ctx, saveena, taddeo, 18 * scale, lucertia);
  fill_path(ctx, null, SPRITE.BROWN_LIFE[world.time], 6 * scale);
  ctx.restore();
}
function draw_life(maxamilian) {
  var maxamilian = maxamilian / 100;
  if (maxamilian > .95) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var ianmichael = (1 - this.hit.anim.v) * delta * 600 * scale, ripal = Math.cos(this.hit.angle - this.angle) * ianmichael, rapheal = Math.sin(this.hit.angle - this.angle) * ianmichael;
  } else {
    var ripal = 0, rapheal = 0;
  }
  ctx.globalAlpha = .5;
  circle_angle(ctx, ripal, rapheal, 28 * scale, maxamilian);
  fill_path(ctx, null, "#000000", 18 * scale);
  ctx.globalAlpha = 1;
  circle_angle(ctx, ripal, rapheal, 28 * scale, maxamilian);
  fill_path(ctx, null, SPRITE.CRAFT_LOADING[world.time], 6 * scale);
  ctx.restore();
}
function draw_roof(darrione) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var dolph = (1 - this.hit.anim.v) * delta * 600 * scale, avita = Math.cos(this.hit.angle - this.angle) * dolph, kristo = Math.sin(this.hit.angle - this.angle) * dolph;
  } else {
    var avita = 0, kristo = 0;
  }
  var ceth = sprite[SPRITE.ROOFS].length;
  img = sprite[SPRITE.ROOFS][(this.j + this.i % 2) % ceth][world.time];
  w = -img.width;
  h = -img.height;
  var ariauna = world.fast_units[user.uid];
  if (ariauna && (user.id === this.pid || user.in_team(this.pid))) {
    if (Utils.dist(this, ariauna) < 550) {
      this.opacity = Math.max(this.opacity - delta, .3);
    } else {
      this.opacity = Math.min(this.opacity + delta, 1);
    }
  } else {
    if (ariauna && Utils.dist(this, world.fast_units[user.uid]) < 150) {
      this.opacity = Math.max(this.opacity - delta, .3);
    } else {
      this.opacity = Math.min(this.opacity + delta, 1);
    }
  }
  var trevontay = ctx.globalAlpha;
  ctx.globalAlpha *= this.opacity;
  ctxDrawImage(ctx, img, -w / 2 + avita, -h / 2 + kristo, w, h);
  ctx.globalAlpha = trevontay;
  ctx.restore();
}
function draw_garland(toyoko) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var aidy = (1 - this.hit.anim.v) * delta * 600 * scale, stanton = Math.cos(this.hit.angle - this.angle) * aidy, malesia = Math.sin(this.hit.angle - this.angle) * aidy;
  } else {
    var stanton = 0, malesia = 0;
  }
  if (this.halo.update()) {
    this.color += .2 + Math.random() * .3;
  }
  img = sprite[SPRITE.GARLANDS][Math.floor(this.id + this.color) % 5][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2 + stanton, -h / 2 + malesia, w, h);
  ctx.restore();
}
function draw_bed(marlone) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var darnaja = (1 - this.hit.anim.v) * delta * 600 * scale, makhaila = Math.cos(this.hit.angle - this.angle) * darnaja, shaquel = Math.sin(this.hit.angle - this.angle) * darnaja;
  } else {
    var makhaila = 0, shaquel = 0;
  }
  if (marlone === SPRITE.BED_TOP && !world.transition) {
    var annzley = 0, lyndsey = world.units[ITEMS.PLAYERS];
    for (var hyland = 0; hyland < lyndsey.length; hyland++) {
      var natavius = Utils.dist(lyndsey[hyland], this);
      if (natavius < 140 && natavius > 35) {
        annzley = 0;
        break;
      } else {
        if (natavius <= 35) {
          annzley = 1;
        }
      }
    }
    if (annzley === 0) {
      this.opacity = Math.max(.5, this.opacity - delta / 1.5);
    } else {
      this.opacity = Math.min(1, this.opacity + delta / 1.5);
    }
    ctx.globalAlpha = this.opacity;
  }
  img = sprite[marlone][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2 + makhaila, -h / 2 + shaquel, w, h);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_simple_item(asah) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var muaz = (1 - this.hit.anim.v) * delta * 600 * scale, shaikh = Math.cos(this.hit.angle - this.angle) * muaz, wilmot = Math.sin(this.hit.angle - this.angle) * muaz;
  } else {
    var shaikh = 0, wilmot = 0;
  }
  img = sprite[asah][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2 + shaikh, -h / 2 + wilmot, w, h);
  ctx.restore();
}
var __wave = 0;
function draw_river_tile(marlvin, dreko, legacee, branoon, benee, novani, bertia, sacario, ronnee) {
  if (sacario === undefined) {
    sacario = 0;
  }
  for (var aviel = marlvin; aviel <= dreko; aviel++) {
    for (var teneeka = legacee; teneeka <= branoon; teneeka++) {
      var cheyenna = MAP.tiles[aviel][teneeka];
      if (cheyenna === undefined || cheyenna[novani] === undefined) {
        continue;
      }
      var emmelyne = cheyenna[novani], shekeia = sprite[benee][world.time][emmelyne.river];
      ctxDrawImage(ctx, shekeia, user.cam.x + emmelyne.x - shekeia.width / (4 * _scale_object), user.cam.y + emmelyne.y - shekeia.height / (4 * _scale_object), shekeia.width / (2 * _scale_object), shekeia.height / (2 * _scale_object));
      if (ui.quality) {
        var dametre = (1103515245 * (aviel * 1e3 + teneeka) + 12345) % 2147483648 / 2147483648;
        if (dametre < .2) {
          dametre = Math.floor(sprite[SPRITE.RIVER_DECO][world.time][emmelyne.river].length * (dametre * 5));
          var shekeia = sprite[SPRITE.RIVER_DECO][world.time][emmelyne.river][dametre];
          ctxDrawImage(ctx, shekeia, user.cam.x + emmelyne.x - shekeia.width / (4 * _scale_object), user.cam.y + emmelyne.y - shekeia.height / (4 * _scale_object), shekeia.width / (2 * _scale_object), shekeia.height / (2 * _scale_object));
        } else {
          if (emmelyne.current !== 0) {
            var shekeia = sprite[SPRITE.RIVER_WAVE][world.time];
            var tavona = (__wave + aviel % 2 * 30) % 60;
            ctx.globalAlpha = tavona < 30 ? tavona / 30 : 1 - (tavona - 30) / 30;
            ctxDrawImage(ctx, shekeia, user.cam.x + emmelyne.x - shekeia.width / (4 * _scale_object), user.cam.y + emmelyne.y - shekeia.height / (4 * _scale_object) - 30 + tavona, shekeia.width / (2 * _scale_object), shekeia.height / (2 * _scale_object));
            ctx.globalAlpha = 1;
          }
        }
      }
    }
  }
}
function draw_sand_worm_ground() {
  if ((this.info & 1) === 1) {
    this.dig = Math.min(this.dig + delta, 2.2);
  } else {
    this.dig = Math.max(this.dig - delta, 0);
    this.groundTimer += delta;
    if (this.groundTimer > .1) {
      this.groundTimer = 0;
      var zayvin = {x: this.x + Math.random() * 60 - 30, y: this.y + Math.random() * 60 - 30, a: 0, r: Math.random() * 30 + 30};
      this.ground.push(zayvin);
    }
  }
  for (var caroline = 0; caroline < this.ground.length; caroline++) {
    var zayvin = this.ground[caroline];
    ctx.save();
    ctx.translate(user.cam.x + zayvin.x, user.cam.y + zayvin.y);
    zayvin.a = Math.min(1, zayvin.a + delta / 2);
    var sehej = zayvin.a;
    if (sehej < .2) {
      sehej *= 5;
    } else {
      if (sehej > .8) {
        sehej = (1 - sehej) * 5;
      } else {
        sehej = 1;
      }
    }
    ctx.globalAlpha = sehej * .8;
    circle(ctx, 0, 0, zayvin.r);
    fill_path(ctx, SPRITE.SAND_WORM_GROUND[world.time]);
    ctx.restore();
    zayvin.a === 1 && (this.ground.splice(caroline, 1), caroline--);
  }
}
function draw_sand_worm() {
  var parniece = undefined;
  var fares = undefined;
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  this.rotate.update();
  if (this.dig >= .1 && this.dig <= 1.1) {
    var jamesen = Math.max(0, Math.min(1, this.dig - .1));
    if (jamesen < .2) {
      jamesen *= 5;
    } else {
      if (jamesen > .8) {
        jamesen = (1 - jamesen) * 5;
      } else {
        jamesen = 1;
      }
    }
    var parniece = sprite[SPRITE.SAND_WORM1][world.time];
    w = -parniece.width * this.breath.v;
    h = -parniece.height * this.breath.v;
    ctx.globalAlpha = jamesen;
    ctxDrawImage(ctx, parniece, -w / 4, -h / 4, w / 2, h / 2);
    var fares = sprite[SPRITE.HURT_SAND_WORM1];
  }
  if (this.dig >= .9) {
    var jamesen = Math.max(0, Math.min(1, this.dig - .9));
    if (jamesen < .2) {
      jamesen *= 5;
    } else {
      jamesen = 1;
    }
    var parniece = sprite[SPRITE.SAND_WORM2][world.time];
    w = -parniece.width * this.breath.v;
    h = -parniece.height * this.breath.v;
    ctx.globalAlpha = jamesen;
    ctxDrawImage(ctx, parniece, -w / 4, -h / 4, w / 2, h / 2);
    var fares = sprite[SPRITE.HURT_SAND_WORM2];
  }
  if (this.action & STATE.HURT && fares !== undefined) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = (.6 - this.hit.v) * jamesen;
    w = -fares.width * this.breath.v;
    h = -fares.height * this.breath.v;
    ctxDrawImage(ctx, fares, -w / 4, -h / 4, w / 2, h / 2);
  }
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_vulture() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  var nataja = Utils.dist(this, this.r);
  if (nataja > 350) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (nataja < 350) {
    this._alpha = Math.max(0, this._alpha - delta * 2.2);
  } else {
    this._alpha = Math.min(1, this._alpha + delta * 2.2);
  }
  sigmond = sprite[SPRITE.VULTURE_GROUND_ATTACK][world.time];
  w = -sigmond.width * this.breath.v * this.scale;
  h = -sigmond.height * this.breath.v * this.scale;
  ctx.globalAlpha = 1 - this._alpha;
  ctxDrawImage(ctx, sigmond, -w / 4, -h / 4, w / 2, h / 2);
  sigmond = sprite[SPRITE.VULTURE_ATTACK][world.time];
  w = -sigmond.width * this.breath.v * this.scale;
  h = -sigmond.height * this.breath.v * this.scale;
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, sigmond, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha);
    var sigmond = sprite[SPRITE.HURT_VULTURE_GROUND];
    w = -sigmond.width * this.breath.v * this.scale;
    h = -sigmond.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, sigmond, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
    var sigmond = sprite[SPRITE.HURT_VULTURE];
    w = -sigmond.width * this.breath.v * this.scale;
    h = -sigmond.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, sigmond, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  sigmond = sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][world.time];
  w = -sigmond.width * this.breath.v * this.scale;
  h = -sigmond.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-40 * scale, 80 * scale);
  ctx.rotate(this.rotate.v);
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, sigmond, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
    var sigmond = sprite[SPRITE.HURT_VULTURE_WING_LEFT];
    ctxDrawImage(ctx, sigmond, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  sigmond = sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][world.time];
  ctx.save();
  ctx.translate(40 * scale, 80 * scale);
  ctx.rotate(-this.rotate.v);
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, sigmond, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
    var sigmond = sprite[SPRITE.HURT_VULTURE_WING_RIGHT];
    ctxDrawImage(ctx, sigmond, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.globalAlpha = 1;
  ctx.restore();
  ctx.restore();
}
function draw_hawk() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  var yatharth = Utils.dist(this, this.r);
  if (yatharth > 350) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (yatharth < 350) {
    this._alpha = Math.max(0, this._alpha - delta * 2.2);
  } else {
    this._alpha = Math.min(1, this._alpha + delta * 2.2);
  }
  if ((this.info & 1) === 0) {
    lovey = sprite[SPRITE.HAWK_GROUND][world.time];
  } else {
    lovey = sprite[SPRITE.HAWK_GROUND_ATTACK][world.time];
  }
  w = -lovey.width * this.breath.v * this.scale;
  h = -lovey.height * this.breath.v * this.scale;
  ctx.globalAlpha = 1 - this._alpha;
  ctxDrawImage(ctx, lovey, -w / 4, -h / 4, w / 2, h / 2);
  if ((this.info & 1) === 0) {
    lovey = sprite[SPRITE.HAWK][world.time];
  } else {
    lovey = sprite[SPRITE.HAWK_ATTACK][world.time];
  }
  w = -lovey.width * this.breath.v * this.scale;
  h = -lovey.height * this.breath.v * this.scale;
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, lovey, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha);
    var lovey = sprite[SPRITE.HURT_HAWK_GROUND];
    w = -lovey.width * this.breath.v * this.scale;
    h = -lovey.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, lovey, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
    var lovey = sprite[SPRITE.HURT_HAWK];
    w = -lovey.width * this.breath.v * this.scale;
    h = -lovey.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, lovey, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  if ((this.info & 1) === 0) {
    lovey = sprite[SPRITE.HAWK_WING_LEFT][world.time];
  } else {
    lovey = sprite[SPRITE.HAWK_WING_LEFT_ATTACK][world.time];
  }
  w = -lovey.width * this.breath.v * this.scale;
  h = -lovey.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-20 * scale, 0 * scale);
  ctx.rotate(this.rotate.v);
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, lovey, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
    var lovey = sprite[SPRITE.HURT_HAWK_WING_LEFT];
    ctxDrawImage(ctx, lovey, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  if ((this.info & 1) === 0) {
    lovey = sprite[SPRITE.HAWK_WING_RIGHT][world.time];
  } else {
    lovey = sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][world.time];
  }
  ctx.save();
  ctx.translate(20 * scale, 0 * scale);
  ctx.rotate(-this.rotate.v);
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, lovey, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
    var lovey = sprite[SPRITE.HURT_HAWK_WING_RIGHT];
    ctxDrawImage(ctx, lovey, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.globalAlpha = 1;
  ctx.restore();
  ctx.restore();
}
function draw_baby_lava() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (this.info === 0) {
    alaynah = sprite[SPRITE.BABY_LAVA][world.time];
  } else {
    alaynah = sprite[SPRITE.BABY_LAVA_ATTACK][world.time];
  }
  w = -alaynah.width * this.breath.v * this.scale;
  h = -alaynah.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, alaynah, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var alaynah = sprite[SPRITE.HURT_BABY_LAVA];
    ctxDrawImage(ctx, alaynah, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  if (this.info === 0) {
    alaynah = sprite[SPRITE.BABY_LAVA_WING_LEFT][world.time];
  } else {
    alaynah = sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][world.time];
  }
  w = -alaynah.width * this.breath.v * this.scale;
  h = -alaynah.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-40 * scale, 10 * scale);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(ctx, alaynah, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var alaynah = sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT];
    ctxDrawImage(ctx, alaynah, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  if (this.info === 0) {
    alaynah = sprite[SPRITE.BABY_LAVA_WING_RIGHT][world.time];
  } else {
    alaynah = sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][world.time];
  }
  ctx.save();
  ctx.translate(40 * scale, 10 * scale);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(ctx, alaynah, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var alaynah = sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT];
    ctxDrawImage(ctx, alaynah, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_baby_dragon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (this.info === 0) {
    altan = sprite[SPRITE.BABY_DRAGON][world.time];
  } else {
    altan = sprite[SPRITE.BABY_DRAGON_ATTACK][world.time];
  }
  w = -altan.width * this.breath.v * this.scale;
  h = -altan.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, altan, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var altan = sprite[SPRITE.HURT_BABY_DRAGON];
    ctxDrawImage(ctx, altan, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  if (this.info === 0) {
    altan = sprite[SPRITE.BABY_DRAGON_WING_LEFT][world.time];
  } else {
    altan = sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][world.time];
  }
  w = -altan.width * this.breath.v * this.scale;
  h = -altan.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-40 * scale, 10 * scale);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(ctx, altan, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var altan = sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT];
    ctxDrawImage(ctx, altan, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  if (this.info === 0) {
    altan = sprite[SPRITE.BABY_DRAGON_WING_RIGHT][world.time];
  } else {
    altan = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][world.time];
  }
  ctx.save();
  ctx.translate(40 * scale, 10 * scale);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(ctx, altan, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var altan = sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT];
    ctxDrawImage(ctx, altan, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_lava_dragon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  assiah = sprite[SPRITE.LAVA_DRAGON][world.time];
  w = -assiah.width * this.breath.v * this.scale;
  h = -assiah.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, assiah, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var assiah = sprite[SPRITE.HURT_LAVA_DRAGON];
    ctxDrawImage(ctx, assiah, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  assiah = sprite[SPRITE.LAVA_WING_LEFT][world.time];
  w = -assiah.width * this.breath.v * this.scale;
  h = -assiah.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-60 * scale, 20 * scale);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(ctx, assiah, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var assiah = sprite[SPRITE.HURT_LAVA_WING_LEFT];
    ctxDrawImage(ctx, assiah, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  assiah = sprite[SPRITE.LAVA_WING_RIGHT][world.time];
  ctx.save();
  ctx.translate(60 * scale, 20 * scale);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(ctx, assiah, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var assiah = sprite[SPRITE.HURT_LAVA_WING_RIGHT];
    ctxDrawImage(ctx, assiah, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_dragon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  zahir = sprite[SPRITE.DRAGON][world.time];
  w = -zahir.width * this.breath.v * this.scale;
  h = -zahir.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, zahir, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var zahir = sprite[SPRITE.HURT_DRAGON];
    ctxDrawImage(ctx, zahir, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  zahir = sprite[SPRITE.WING_LEFT][world.time];
  w = -zahir.width * this.breath.v * this.scale;
  h = -zahir.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-30 * scale, 70 * scale);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(ctx, zahir, -10 * scale, -40 * scale, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var zahir = sprite[SPRITE.HURT_WING_LEFT];
    ctxDrawImage(ctx, zahir, -10 * scale, -40 * scale, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  zahir = sprite[SPRITE.WING_RIGHT][world.time];
  ctx.save();
  ctx.translate(30 * scale, 70 * scale);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(ctx, zahir, 10 * scale - w, -40 * scale, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var zahir = sprite[SPRITE.HURT_WING_RIGHT];
    ctxDrawImage(ctx, zahir, 10 * scale - w, -40 * scale, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_crate(zyeria, aason) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  zyeria === SPRITE.GIFT && (zyeria = SPRITE.CRATE, this.info = 36);
  img = sprite[zyeria][this.info][world.time];
  w = -img.width / 2;
  h = -img.height / 2;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var jvaughn = get_image_effect(this.info, img, __EFFECT_BOX__);
    ctxDrawImage(ctx, jvaughn, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_simple_mobs_2(arax, tasheba) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  aaliyiah = sprite[arax][world.time];
  w = -aaliyiah.width;
  h = -aaliyiah.height;
  ctxDrawImage(ctx, aaliyiah, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var aaliyiah = sprite[tasheba];
    ctxDrawImage(ctx, aaliyiah, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_baby_mammoth() {
  this.breath.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    zeandre = sprite[SPRITE.BABY_MAMMOTH][world.time];
  } else {
    zeandre = sprite[SPRITE.BABY_MAMMOTH_ATTACK][world.time];
  }
  w = -zeandre.width * this.breath.v;
  h = -zeandre.height * this.breath.v;
  ctxDrawImage(ctx, zeandre, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var zeandre = sprite[SPRITE.HURT_BABY_MAMMOTH];
    ctxDrawImage(ctx, zeandre, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_boar() {
  this.breath.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    ashliegh = sprite[SPRITE.BOAR][world.time];
  } else {
    ashliegh = sprite[SPRITE.BOAR_ATTACK][world.time];
  }
  w = -ashliegh.width * this.breath.v;
  h = -ashliegh.height * this.breath.v;
  ctxDrawImage(ctx, ashliegh, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var ashliegh = sprite[SPRITE.HURT_BOAR];
    ctxDrawImage(ctx, ashliegh, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_crab_boss() {
  var kang = Math.PI / 2;
  var jonique = Math.PI / 4;
  this.breath.update();
  this.breathl.update();
  this.breathr.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    nhyla = sprite[SPRITE.CRAB_BOSS][world.time];
  } else {
    nhyla = sprite[SPRITE.CRAB_BOSS_ATTACK][world.time];
  }
  w = -nhyla.width * this.breath.v;
  h = -nhyla.height * this.breath.v;
  ctxDrawImage(ctx, nhyla, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var nhyla = sprite[SPRITE.HURT_CRAB_BOSS];
    ctxDrawImage(ctx, nhyla, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    if (this.heal.update() && this.heal.o == false) {
      this.action -= STATE.COLD;
    }
    ctx.globalAlpha = .6 - this.heal.v;
    var nhyla = sprite[SPRITE.HEAL_CRAB_BOSS];
    ctxDrawImage(ctx, nhyla, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + jonique);
  ctx.translate(100, 0);
  ctx.rotate(kang);
  if (this.info === 0) {
    nhyla = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time];
  } else {
    nhyla = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][world.time];
  }
  w = -nhyla.width * this.breathl.v;
  h = -nhyla.height * this.breathl.v;
  ctxDrawImage(ctx, nhyla, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var nhyla = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT];
    ctxDrawImage(ctx, nhyla, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = .6 - this.heal.v;
    var nhyla = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT];
    ctxDrawImage(ctx, nhyla, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + kang + jonique);
  ctx.translate(100, 0);
  ctx.rotate(kang);
  if (this.info === 0) {
    nhyla = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time];
  } else {
    nhyla = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][world.time];
  }
  w = -nhyla.width * this.breathr.v;
  h = -nhyla.height * this.breathr.v;
  ctxDrawImage(ctx, nhyla, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var nhyla = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT];
    ctxDrawImage(ctx, nhyla, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = .6 - this.heal.v;
    var nhyla = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT];
    ctxDrawImage(ctx, nhyla, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_crab() {
  var velan = Math.PI / 2;
  var charlesten = Math.PI / 4;
  this.breath.update();
  this.breathl.update();
  this.breathr.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    calex = sprite[SPRITE.CRAB][world.time];
  } else {
    calex = sprite[SPRITE.CRAB_ATTACK][world.time];
  }
  w = -calex.width * this.breath.v;
  h = -calex.height * this.breath.v;
  ctxDrawImage(ctx, calex, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var calex = sprite[SPRITE.HURT_CRAB];
    ctxDrawImage(ctx, calex, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    if (this.heal.update() && this.heal.o == false) {
      this.action -= STATE.COLD;
    }
    ctx.globalAlpha = .6 - this.heal.v;
    var calex = sprite[SPRITE.HEAL_CRAB];
    ctxDrawImage(ctx, calex, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + charlesten);
  ctx.translate(55, 0);
  ctx.rotate(velan);
  if (this.info === 0) {
    calex = sprite[SPRITE.CRAB_CLAW_LEFT][world.time];
  } else {
    calex = sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][world.time];
  }
  w = -calex.width * this.breathl.v;
  h = -calex.height * this.breathl.v;
  ctxDrawImage(ctx, calex, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var calex = sprite[SPRITE.HURT_CRAB_CLAW_LEFT];
    ctxDrawImage(ctx, calex, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = .6 - this.heal.v;
    var calex = sprite[SPRITE.HEAL_CRAB_CLAW_LEFT];
    ctxDrawImage(ctx, calex, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + velan + charlesten);
  ctx.translate(55, 0);
  ctx.rotate(velan);
  if (this.info === 0) {
    calex = sprite[SPRITE.CRAB_CLAW_RIGHT][world.time];
  } else {
    calex = sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][world.time];
  }
  w = -calex.width * this.breathr.v;
  h = -calex.height * this.breathr.v;
  ctxDrawImage(ctx, calex, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = .6 - this.hit.v;
    var calex = sprite[SPRITE.HURT_CRAB_CLAW_RIGHT];
    ctxDrawImage(ctx, calex, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = .6 - this.heal.v;
    var calex = sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT];
    ctxDrawImage(ctx, calex, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_spell() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.born = Math.min(1, this.born + delta * 2);
  ctx.globalAlpha = Math.min(1, Math.max(0, Utils.dist(this, this.r) / 80)) * this.born;
  this.breath.update();
  img = sprite[SPRITE.SPELL][world.time][this.spell];
  this.spell < 2 ? (w = -img.width * this.breath.v, h = -img.height * this.breath.v) : this.fly === 0 ? (w = -img.width, h = -img.height) : (w = -img.width * 1.35, h = -img.height * 1.35);
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_simple_mobs(lakema, teiarra) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  yann = sprite[lakema][world.time];
  w = -yann.width * this.breath.v;
  h = -yann.height * this.breath.v;
  ctxDrawImage(ctx, yann, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var yann = sprite[teiarra];
    ctxDrawImage(ctx, yann, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_simple_mobs_hd(caileen, southern) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  guisela = sprite[caileen][world.time];
  w = -guisela.width * this.breath.v;
  h = -guisela.height * this.breath.v;
  ctxDrawImage(ctx, guisela, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    var guisela = sprite[southern];
    ctxDrawImage(ctx, guisela, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_breath_2(arinn, delvante, seledonio) {
  ctx.save();
  ctx.translate(user.cam.x + delvante, user.cam.y + seledonio);
  ctx.rotate(this.angle);
  ctx.translate(this.x - delvante, this.y - seledonio);
  this.breath.update();
  img = sprite[arinn][world.time];
  w = -img.width * this.breath.v;
  h = -img.height * this.breath.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_breath(ethanjacob) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  img = sprite[ethanjacob][world.time];
  w = -img.width * this.breath.v;
  h = -img.height * this.breath.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_thornbush() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var wendella = (1 - this.hit.anim.v) * delta * 600 * scale, sayid = Math.cos(this.hit.angle - this.angle) * wendella, junxi = Math.sin(this.hit.angle - this.angle) * wendella;
  } else {
    var sayid = 0, junxi = 0;
  }
  var sager = this.info & 15;
  if (this.info === 10 || sager === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var gadeer = sprite[SPRITE.PLANT_THORNBUSH_DRIED][world.time];
    } else {
      var gadeer = sprite[SPRITE.PLANT_THORNBUSH][world.time];
    }
    var amarily = -gadeer.width * this.ground.v;
    var fordyce = -gadeer.height * this.ground.v;
    ctxDrawImage(ctx, gadeer, -amarily / 2 + sayid, -fordyce / 2 + junxi, amarily, fordyce);
  } else {
    if (this.info & 16) {
      var gadeer = sprite[SPRITE.DRIED_THORNBUSH][world.time];
    } else {
      var gadeer = sprite[SPRITE.THORNBUSH][world.time];
    }
    ctx.translate(0, gadeer.height / 2);
    ctxDrawImage(ctx, gadeer, sayid - gadeer.width / 2, -gadeer.height + junxi);
  }
  ctx.restore();
}
function draw_garlic() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var daigen = (1 - this.hit.anim.v) * delta * 600 * scale, anvitha = Math.cos(this.hit.angle - this.angle) * daigen, breigh = Math.sin(this.hit.angle - this.angle) * daigen;
  } else {
    var anvitha = 0, breigh = 0;
  }
  var tahira = this.info & 15;
  if (this.info === 10 || tahira === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var rodjanae = sprite[SPRITE.PLANT_GARLIC_DRIED][world.time];
    } else {
      var rodjanae = sprite[SPRITE.PLANT_GARLIC][world.time];
    }
    var kylann = -rodjanae.width * this.ground.v;
    var derrin = -rodjanae.height * this.ground.v;
    ctxDrawImage(ctx, rodjanae, -kylann / 2 + anvitha, -derrin / 2 + breigh, kylann, derrin);
  } else {
    if (this.info & 16) {
      var rodjanae = sprite[SPRITE.DRIED_GARLIC][world.time];
    } else {
      var rodjanae = sprite[SPRITE.GARLIC][world.time];
    }
    ctx.translate(0, rodjanae.height / 2);
    ctxDrawImage(ctx, rodjanae, anvitha - rodjanae.width / 2, -rodjanae.height + breigh);
  }
  ctx.restore();
}
function draw_aloe_vera() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var jenene = (1 - this.hit.anim.v) * delta * 600 * scale, ranetta = Math.cos(this.hit.angle - this.angle) * jenene, silviana = Math.sin(this.hit.angle - this.angle) * jenene;
  } else {
    var ranetta = 0, silviana = 0;
  }
  var semyah = this.info & 15;
  if (this.info === 10 || semyah === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var ancil = sprite[SPRITE.PLANT_ALOE_VERA_DRIED][world.time];
    } else {
      var ancil = sprite[SPRITE.PLANT_ALOE_VERA][world.time];
    }
    var odeal = -ancil.width * this.ground.v;
    var chalia = -ancil.height * this.ground.v;
    ctxDrawImage(ctx, ancil, -odeal / 2 + ranetta, -chalia / 2 + silviana, odeal, chalia);
  } else {
    if (this.info & 16) {
      var ancil = sprite[SPRITE.DRIED_ALOE_VERA][world.time];
    } else {
      var ancil = sprite[SPRITE.ALOE_VERA_GROWN][world.time];
    }
    ctx.translate(0, ancil.height / 2);
    ctxDrawImage(ctx, ancil, ranetta - ancil.width / 2, -ancil.height + silviana);
  }
  ctx.restore();
}
function draw_watermelon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var sanjeev = (1 - this.hit.anim.v) * delta * 600 * scale, walburga = Math.cos(this.hit.angle - this.angle) * sanjeev, nickiyah = Math.sin(this.hit.angle - this.angle) * sanjeev;
  } else {
    var walburga = 0, nickiyah = 0;
  }
  var trayci = this.info & 15;
  if (this.info === 10 || trayci === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var jewelene = sprite[SPRITE.PLANT_WATERMELON_DRIED][world.time];
    } else {
      var jewelene = sprite[SPRITE.PLANT_WATERMELON][world.time];
    }
    var jalyse = -jewelene.width * this.ground.v;
    var taytiana = -jewelene.height * this.ground.v;
    ctxDrawImage(ctx, jewelene, -jalyse / 2 + walburga, -taytiana / 2 + nickiyah, jalyse, taytiana);
  } else {
    if (this.info & 16) {
      var jewelene = sprite[SPRITE.DRIED_WATERMELON][world.time];
    } else {
      var jewelene = sprite[SPRITE.WATERMELON][world.time];
    }
    ctx.translate(0, jewelene.height / 2);
    ctxDrawImage(ctx, jewelene, walburga - jewelene.width / 2, -jewelene.height + nickiyah);
  }
  ctx.restore();
}
function draw_carrot() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var dessire = (1 - this.hit.anim.v) * delta * 600 * scale, antonieta = Math.cos(this.hit.angle - this.angle) * dessire, chalmas = Math.sin(this.hit.angle - this.angle) * dessire;
  } else {
    var antonieta = 0, chalmas = 0;
  }
  var jahzi = this.info & 15;
  if (this.info === 10 || jahzi === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var sylivia = sprite[SPRITE.PLANT_CARROT_DRIED][world.time];
    } else {
      var sylivia = sprite[SPRITE.PLANT_CARROT][world.time];
    }
    var dyquan = -sylivia.width * this.ground.v;
    var khalii = -sylivia.height * this.ground.v;
    ctxDrawImage(ctx, sylivia, -dyquan / 2 + antonieta, -khalii / 2 + chalmas, dyquan, khalii);
  } else {
    if (this.info & 16) {
      var sylivia = sprite[SPRITE.DRIED_CARROT][world.time];
    } else {
      var sylivia = sprite[SPRITE.CARROT][world.time];
    }
    ctx.translate(0, sylivia.height / 2);
    ctxDrawImage(ctx, sylivia, antonieta - sylivia.width / 2, -sylivia.height + chalmas);
  }
  ctx.restore();
}
function draw_pumpkin() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var lakeetha = (1 - this.hit.anim.v) * delta * 600 * scale, madlin = Math.cos(this.hit.angle - this.angle) * lakeetha, dandrea = Math.sin(this.hit.angle - this.angle) * lakeetha;
  } else {
    var madlin = 0, dandrea = 0;
  }
  var jeana = this.info & 15;
  if (this.info === 10 || jeana === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var gessel = sprite[SPRITE.PLANT_PUMPKIN_DRIED][world.time];
    } else {
      var gessel = sprite[SPRITE.PLANT_PUMPKIN][world.time];
    }
    var birt = -gessel.width * this.ground.v;
    var mishita = -gessel.height * this.ground.v;
    ctxDrawImage(ctx, gessel, -birt / 2 + madlin, -mishita / 2 + dandrea, birt, mishita);
  } else {
    if (this.info & 16) {
      var gessel = sprite[SPRITE.DRIED_PUMPKIN][world.time];
    } else {
      var gessel = sprite[SPRITE.PUMPKIN][world.time];
    }
    ctx.translate(0, gessel.height / 2);
    ctxDrawImage(ctx, gessel, madlin - gessel.width / 2, -gessel.height + dandrea);
  }
  ctx.restore();
}
function draw_wheat() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var jonathna = (1 - this.hit.anim.v) * delta * 600 * scale, leylah = Math.cos(this.hit.angle - this.angle) * jonathna, bookert = Math.sin(this.hit.angle - this.angle) * jonathna;
  } else {
    var leylah = 0, bookert = 0;
  }
  var erron = this.info & 15;
  if (this.info === 10 || erron === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var airam = sprite[SPRITE.WHEAT_SEED_DRIED][world.time];
    } else {
      var airam = sprite[SPRITE.WHEAT_SEED][world.time];
    }
    var letisia = -airam.width * this.ground.v;
    var jayquan = -airam.height * this.ground.v;
    ctxDrawImage(ctx, airam, -letisia / 2 + leylah, -jayquan / 2 + bookert, letisia, jayquan);
  } else {
    this.wind.update();
    if (this.info & 16) {
      var airam = sprite[SPRITE.DRIED_WHEAT][world.time];
    } else {
      var airam = sprite[SPRITE.WILD_WHEAT][world.time];
    }
    ctx.translate(0, airam.height / 2);
    ctx.rotate(this.wind.v);
    ctxDrawImage(ctx, airam, leylah - airam.width / 2, -airam.height + bookert);
  }
  ctx.restore();
}
function draw_seed() {
  if (this.info < 10) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var jemarcus = (1 - this.hit.anim.v) * delta * 600 * scale, tajmah = Math.cos(this.hit.angle - this.angle) * jemarcus, khayman = Math.sin(this.hit.angle - this.angle) * jemarcus;
  } else {
    var tajmah = 0, khayman = 0;
  }
  this.ground.update();
  var kullen = sprite[SPRITE.PLANT_SEED][world.time];
  var shaneese = -kullen.width * this.ground.v;
  var tood = -kullen.height * this.ground.v;
  ctxDrawImage(ctx, kullen, -shaneese / 2 + tajmah, -tood / 2 + khayman, shaneese, tood);
  ctx.restore();
}
function draw_plant() {
  if (this.info === 10) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var kenso = (1 - this.hit.anim.v) * delta * 600 * scale, christof = Math.cos(this.hit.angle - this.angle) * kenso, akito = Math.sin(this.hit.angle - this.angle) * kenso;
  } else {
    var christof = 0, akito = 0;
  }
  if (this.info & 16) {
    var abdulaziz = sprite[SPRITE.DRIED_PLANT][world.time];
  } else {
    var abdulaziz = sprite[SPRITE.PLANT_MINI][world.time];
  }
  ctxDrawImage(ctx, abdulaziz, -abdulaziz.width / 2 + christof, -abdulaziz.width / 2 + akito);
  ctx.restore();
  var boede = this.info & 15;
  for (var dainty = 0; dainty < boede; dainty++) {
    this.fruits[dainty].draw(SPRITE.FRUIT);
  }
}
function draw_tomato() {
  if (this.info < 10) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var law = (1 - this.hit.anim.v) * delta * 600 * scale, doranda = Math.cos(this.hit.angle - this.angle) * law, hobbes = Math.sin(this.hit.angle - this.angle) * law;
  } else {
    var doranda = 0, hobbes = 0;
  }
  this.ground.update();
  var deovian = sprite[SPRITE.PLANT_TOMATO][world.time];
  var irey = -deovian.width * this.ground.v;
  var danja = -deovian.height * this.ground.v;
  ctxDrawImage(ctx, deovian, -irey / 2 + doranda, -danja / 2 + hobbes, irey, danja);
  ctx.restore();
}
function draw_tomato_fruit() {
  if (this.info === 10) {
    return;
  }
  var kashten = this.info & 15;
  for (var nissy = 0; nissy < kashten; nissy++) {
    this.fruits[nissy].draw(SPRITE.TOMATO, this.x, this.y);
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var saahithi = (1 - this.hit.anim.v) * delta * 600 * scale, cytnhia = Math.cos(this.hit.angle - this.angle) * saahithi, domineek = Math.sin(this.hit.angle - this.angle) * saahithi;
  } else {
    var cytnhia = 0, domineek = 0;
  }
  if (this.info & 16) {
    var wentz = sprite[SPRITE.DRIED_TOMATO_MINI][world.time];
  } else {
    var wentz = sprite[SPRITE.TOMATO_MINI][world.time];
  }
  ctxDrawImage(ctx, wentz, -wentz.width / 2 + cytnhia, -wentz.width / 2 + domineek);
  ctx.restore();
}
function draw_furnace() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var estelline = (1 - this.hit.anim.v) * delta * 600 * scale, spicie = Math.cos(this.hit.angle - this.angle) * estelline, azen = Math.sin(this.hit.angle - this.angle) * estelline;
  } else {
    var spicie = 0, azen = 0;
  }
  if (this.action == 2) {
    img = sprite[SPRITE.FURNACE_ON][world.time];
  } else {
    img = sprite[SPRITE.FURNACE_OFF][world.time];
  }
  ctxDrawImage(ctx, img, -img.width / 2 + spicie, -img.height / 2 + azen);
  ctx.restore();
}
function draw_furnace_ground() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.ground.update();
  ctx.globalAlpha = .3;
  var junell = sprite[SPRITE.GROUND_FIRE][world.time];
  var joshiah = -junell.width * this.ground.v;
  var jemarr = -junell.height * this.ground.v;
  ctxDrawImage(ctx, junell, -joshiah / 2, -jemarr / 2, joshiah, jemarr);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_bread_oven_smog() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744 && (this.smog.length == 0 || this.smog[this.smog.length - 1] <= SPRITE.SMOG_PUSH)) {
    this.smog.push(SPRITE.SMOG);
  }
  for (var mervil = 0; mervil < this.smog.length; mervil++) {
    this.smog[mervil] = Math.max(0, this.smog[mervil] - delta * SPRITE.SMOG_SPEED);
    ctx.globalAlpha = this.smog[mervil] / 1.3;
    var shatarah = (1 - this.smog[mervil]) * 40;
    var jevon = (1 - this.smog[mervil]) * 35 + 10;
    circle(ctx, -68 * scale + Math.cos(-this.angle - Math.PI / 2) * shatarah, -20 * scale + Math.sin(-this.angle - Math.PI / 2) * shatarah, jevon);
    fill_path(ctx, "#333333");
  }
  ctx.globalAlpha = 1;
  if (this.smog.length > 0 && this.smog[0] === 0) {
    this.smog.shift();
  }
  ctx.restore();
}
function draw_fire_ground(lillieann) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.ground.update();
  ctx.globalAlpha = .3;
  var delroy = sprite[SPRITE.GROUND_FIRE][world.time];
  var solie = -delroy.width * this.ground.v;
  var decie = -delroy.height * this.ground.v;
  ctxDrawImage(ctx, delroy, -solie / 2, -decie / 2, solie, decie);
  ctx.globalAlpha = 1;
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var tawon = (1 - this.hit.anim.v) * delta * 600 * scale, chamberlyn = Math.cos(this.hit.angle - this.angle) * tawon, khylen = Math.sin(this.hit.angle - this.angle) * tawon;
  } else {
    var chamberlyn = 0, khylen = 0;
  }
  delroy = sprite[lillieann][world.time];
  ctxDrawImage(ctx, delroy, -delroy.width / 2 + chamberlyn, -delroy.height / 2 + khylen);
  ctx.restore();
}
function draw_sign() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var xai = (1 - this.hit.anim.v) * delta * 600 * scale, kywan = Math.cos(this.hit.angle - this.angle) * xai, orlyn = Math.sin(this.hit.angle - this.angle) * xai;
  } else {
    var kywan = 0, orlyn = 0;
  }
  if (this.info === 0) {
    img = sprite[SPRITE.SIGN][world.time];
  } else {
    img = sprite[SPRITE.SYMBOLS][world.time][this.info - 1];
  }
  ctxDrawImage(ctx, img, -img.width / 2 + kywan, -img.height / 2 + orlyn);
  ctx.restore();
}
function draw_bread_oven() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var esha = (1 - this.hit.anim.v) * delta * 600 * scale, taurance = Math.cos(this.hit.angle - this.angle) * esha, raedon = Math.sin(this.hit.angle - this.angle) * esha;
  } else {
    var taurance = 0, raedon = 0;
  }
  if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744) {
    nataliyah = sprite[SPRITE.BREAD_OVEN_ON][world.time];
    ctxDrawImage(ctx, nataliyah, -nataliyah.width / 2 + taurance, -nataliyah.height / 2 + raedon);
    this.up.update();
    var nataliyah = sprite[SPRITE.BREAD_LIGHT_UP][world.time];
    var mardeen = -nataliyah.width * this.up.v;
    var cande = -nataliyah.height * this.up.v;
    ctxDrawImage(ctx, nataliyah, -mardeen / 2 + 1 * scale, -cande / 2 + 3 * scale, mardeen, cande);
  } else {
    nataliyah = sprite[SPRITE.BREAD_OVEN_OFF][world.time];
    ctxDrawImage(ctx, nataliyah, -nataliyah.width / 2 + taurance, -nataliyah.height / 2 + raedon);
  }
  ctx.restore();
}
function draw_windmill_wings() {
  if (this.hit.update) {
    var sarsh = (1 - this.hit.anim.v) * delta * 600 * scale, dashaan = Math.cos(this.hit.angle - this.angle) * sarsh, lavita = Math.sin(this.hit.angle - this.angle) * sarsh;
  } else {
    var dashaan = 0, lavita = 0;
  }
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * .5) % (Math.PI * 2);
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x + dashaan, user.cam.y + this.y + lavita);
  ctx.save();
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.WINDMILL_WINGS][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.angl);
  img = sprite[SPRITE.WINDMILL_HEAD][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.restore();
}
function draw_extractor_stone() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var bia = (1 - this.hit.anim.v) * delta * 600 * scale, rolen = Math.cos(this.hit.angle - this.angle) * bia, jayleeana = Math.sin(this.hit.angle - this.angle) * bia;
  } else {
    var rolen = 0, jayleeana = 0;
  }
  ctx.save();
  this.info & 255 && (this.info & 65280) != 65280 && (rolen += Math.random() * 2 - 1, jayleeana += Math.random() * 2 - 1);
  ctx.translate(user.cam.x + this.x + rolen, user.cam.y + this.y + jayleeana);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_STONE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_gold() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var sperry = (1 - this.hit.anim.v) * delta * 600 * scale, charelle = Math.cos(this.hit.angle - this.angle) * sperry, talesha = Math.sin(this.hit.angle - this.angle) * sperry;
  } else {
    var charelle = 0, talesha = 0;
  }
  ctx.save();
  this.info & 255 && (this.info & 65280) != 65280 && (charelle += Math.random() * 2 - 1, talesha += Math.random() * 2 - 1);
  ctx.translate(user.cam.x + this.x + charelle, user.cam.y + this.y + talesha);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_diamond() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var jayleene = (1 - this.hit.anim.v) * delta * 600 * scale, leilahni = Math.cos(this.hit.angle - this.angle) * jayleene, demii = Math.sin(this.hit.angle - this.angle) * jayleene;
  } else {
    var leilahni = 0, demii = 0;
  }
  ctx.save();
  this.info & 255 && (this.info & 65280) != 65280 && (leilahni += Math.random() * 2 - 1, demii += Math.random() * 2 - 1);
  ctx.translate(user.cam.x + this.x + leilahni, user.cam.y + this.y + demii);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_amethyst() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var essence = (1 - this.hit.anim.v) * delta * 600 * scale, tyasia = Math.cos(this.hit.angle - this.angle) * essence, lo = Math.sin(this.hit.angle - this.angle) * essence;
  } else {
    var tyasia = 0, lo = 0;
  }
  ctx.save();
  this.info & 255 && (this.info & 65280) != 65280 && (tyasia += Math.random() * 2 - 1, lo += Math.random() * 2 - 1);
  ctx.translate(user.cam.x + this.x + tyasia, user.cam.y + this.y + lo);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_reidite() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var nikeem = (1 - this.hit.anim.v) * delta * 600 * scale, kasondra = Math.cos(this.hit.angle - this.angle) * nikeem, kimbla = Math.sin(this.hit.angle - this.angle) * nikeem;
  } else {
    var kasondra = 0, kimbla = 0;
  }
  ctx.save();
  this.info & 255 && (this.info & 65280) != 65280 && (kasondra += Math.random() * 2 - 1, kimbla += Math.random() * 2 - 1);
  ctx.translate(user.cam.x + this.x + kasondra, user.cam.y + this.y + kimbla);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_windmill_head() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var trentin = (1 - this.hit.anim.v) * delta * 600 * scale, traneshia = Math.cos(this.hit.angle - this.angle) * trentin, ellysia = Math.sin(this.hit.angle - this.angle) * trentin;
  } else {
    var traneshia = 0, ellysia = 0;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x + traneshia, user.cam.y + this.y + ellysia);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.WINDMILL][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_emerald_machine() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var nykesha = (1 - this.hit.anim.v) * delta * 600 * scale, abriele = Math.cos(this.hit.angle - this.angle) * nykesha, domanick = Math.sin(this.hit.angle - this.angle) * nykesha;
  } else {
    var abriele = 0, domanick = 0;
  }
  this.rotate1 = (this.rotate1 + delta * 3) % (Math.PI * 2);
  this.rotate2 = (this.rotate2 - delta * 3) % (Math.PI * 2);
  ctx.save();
  ctx.translate(user.cam.x + this.x + abriele, user.cam.y + this.y + domanick);
  ctx.save();
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EMERALD_MACHINE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate1);
  img = sprite[SPRITE.EMERALD_MACHINE_ROTATE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate2);
  img = sprite[SPRITE.EMERALD_MACHINE_HOLE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.restore();
}
function draw_resurrection() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var jearold = (1 - this.hit.anim.v) * delta * 600 * scale, brendia = Math.cos(this.hit.angle - this.angle) * jearold, yohana = Math.sin(this.hit.angle - this.angle) * jearold;
  } else {
    var brendia = 0, yohana = 0;
  }
  this.rotate1 = (this.rotate1 + delta * 3) % (Math.PI * 2);
  this.rotate2 = (this.rotate2 - delta * 3) % (Math.PI * 2);
  ctx.save();
  ctx.translate(user.cam.x + this.x + brendia, user.cam.y + this.y + yohana);
  ctx.save();
  ctx.rotate(this.angle);
  img = sprite[SPRITE.RESURRECTION][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate1);
  img = sprite[SPRITE.RESURRECTION_ROTATE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate2);
  img = sprite[SPRITE.RESURRECTION_HOLE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.restore();
}
function draw_emerald_machine_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.halo.update();
  img = sprite[SPRITE.EMERALD_MACHINE_GROUND][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_resurrection_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.halo.update();
  img = sprite[SPRITE.RESURRECTION_GROUND][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_furnace_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.halo.update();
  img = sprite[SPRITE.HALO_FIRE][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_fire_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.fire.update();
  img = sprite[SPRITE.FIRE][world.time];
  w = -img.width * this.fire.v;
  h = -img.height * this.fire.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  this.halo.update();
  img = sprite[SPRITE.HALO_FIRE][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_player_effect(traysean) {
  if (traysean.right >= 0) {
    switch (traysean.right) {
      case SPRITE.WATERING_CAN_FULL:
        ctx.save();
        var kadaisha = -3 * traysean.attack.v / Math.PI;
        if (traysean.attack.o) {
          var yvon = -Math.PI / 3 - (Math.PI / 3 + traysean.attack.v) / 3;
        } else {
          var yvon = traysean.attack.v;
        }
        ctx.rotate(traysean.angle - Math.PI / 2 + yvon), ctx.globalAlpha = kadaisha / 1.2, circle(ctx, -40 * scale, 90 * scale, 5 * scale), fill_path(ctx, "#0B6A84"), ctx.globalAlpha = kadaisha / 1.2, circle(ctx, -52 * scale, 100 * scale, 8 * scale), fill_path(ctx, "#0B6A84"), ctx.globalAlpha = kadaisha / 1.2, circle(ctx, -30 * scale, 95 * scale, 4 * scale), fill_path(ctx, "#0B6A84"), ctx.globalAlpha = 1, ctx.restore();
        break;
      case SPRITE.SHOVEL:
      case SPRITE.SHOVEL_GOLD:
      case SPRITE.SHOVEL_DIAMOND:
      case SPRITE.SHOVEL_AMETHYST:
        if (traysean.fly === 1) {
          break;
        }
        if (traysean.dist_winter > 0) {
          var jahshaun = SPRITE.ICE_SHOVEL_CO[world.time];
        } else {
          if (traysean.dist_sand > 0 || traysean.dist_desert > 0) {
            var jahshaun = SPRITE.SAND_SHOVEL_CO[world.time];
          } else {
            var jahshaun = SPRITE.GRD_SHOVEL_CO[world.time];
          }
        }
        var kadaisha = -3 * traysean.attack.v / Math.PI;
        if (traysean.attack.o) {
          var yvon = Math.max(.5 - kadaisha / 2 + .5, 0);
        } else {
          var yvon = Math.max(kadaisha / 2, 0);
        }
        if (yvon === 0) {
          traysean.angle_init = traysean.angle;
        }
        ctx.save(), ctx.rotate(traysean.angle_init - Math.PI / 2), ctx.globalAlpha = kadaisha;
        var thobias = 25 * scale + yvon * 25;
        circle(ctx, thobias, 80 * scale, 15 * scale), fill_path(ctx, jahshaun), circle(ctx, -thobias, 80 * scale, 15 * scale), fill_path(ctx, jahshaun), ctx.globalAlpha = 1, ctx.restore();
        break;
    }
  }
}
function draw_player_right_stuff_after(gautham, ninarose, rhyane) {
  if (gautham >= 0) {
    img = sprite[gautham][world.time];
    switch (gautham) {
      case SPRITE.WOOD_SHIELD:
      case SPRITE.STONE_SHIELD:
      case SPRITE.GOLD_SHIELD:
        draw_image_transition_hd(gautham, img, -img.width / 4 - scale * (0 + ninarose), -img.height / 4 + scale * (rhyane + 35));
        break;
      case SPRITE.DIAMOND_SHIELD:
        draw_image_transition_hd(gautham, img, -img.width / 4 - scale * (1 + ninarose), -img.height / 4 + scale * (rhyane + 45));
        break;
      case SPRITE.AMETHYST_SHIELD:
      case SPRITE.REIDITE_SHIELD:
        draw_image_transition_hd(gautham, img, -img.width / 4 - scale * (1 + ninarose), -img.height / 4 + scale * (rhyane + 40));
        break;
    }
  }
}
function draw_player_right_stuff(alyson, inacio, asbery) {
  if (alyson >= 0) {
    img = sprite[alyson][world.time];
    switch (alyson) {
      case SPRITE.PICK:
      case SPRITE.PICK_GOLD:
      case SPRITE.PICK_DIAMOND:
      case SPRITE.PICK_WOOD:
      case SPRITE.PICK_AMETHYST:
      case SPRITE.PICK_REIDITE:
        draw_image_transition(alyson, img, -img.width / 2 - scale * (45 + inacio), -img.height / 2 + scale * (asbery + 22));
        break;
      case SPRITE.SWORD_WOOD:
      case SPRITE.SWORD:
      case SPRITE.SWORD_GOLD:
      case SPRITE.SWORD_DIAMOND:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (47 + inacio), -img.height / 4 + scale * (asbery + 45));
        break;
      case SPRITE.SWORD_AMETHYST:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (52 + inacio), -img.height / 4 + scale * (asbery + 45));
        break;
      case SPRITE.REIDITE_SWORD:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (47 + inacio), -img.height / 4 + scale * (asbery + 44));
        break;
      case SPRITE.PIRATE_SWORD:
        draw_image_transition(alyson, img, -img.width / 2 - scale * (47 + inacio), -img.height / 2 + scale * (asbery + 44));
        break;
      case SPRITE.DRAGON_SWORD:
        draw_image_transition(alyson, img, -img.width / 2 - scale * (40 + inacio), -img.height / 2 + scale * (asbery + 65));
        break;
      case SPRITE.WOOD_SPEAR:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (37 + inacio), -img.height / 4 + scale * (asbery + 85));
        break;
      case SPRITE.REIDITE_SPEAR:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (37 + inacio), -img.height / 4 + scale * (asbery + 85));
        break;
      case SPRITE.PITCHFORK2:
      case SPRITE.PITCHFORK:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (26 + inacio), -img.height / 4 + scale * (asbery + 77));
        break;
      case SPRITE.LAVA_SPEAR:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (37 + inacio), -img.height / 4 + scale * (asbery + 85));
        break;
      case SPRITE.LAVA_SWORD:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (47 + inacio), -img.height / 4 + scale * (asbery + 44));
        break;
      case SPRITE.WOOD_BOW:
      case SPRITE.STONE_BOW:
      case SPRITE.GOLD_BOW:
      case SPRITE.DIAMOND_BOW:
      case SPRITE.AMETHYST_BOW:
      case SPRITE.REIDITE_BOW:
      case SPRITE.DRAGON_BOW:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (37 + inacio), -img.height / 4 + scale * (asbery + 30));
        break;
      case SPRITE.MACHETE:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (47 + inacio), -img.height / 4 + scale * (asbery + 35));
        break;
      case SPRITE.WAND1:
      case SPRITE.WAND2:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (47 + inacio), -img.height / 4 + scale * (asbery + 40));
        break;
      case SPRITE.SADDLE:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (47 + inacio), -img.height / 4 + scale * (asbery + 34));
        break;
      case SPRITE.SPEAR:
      case SPRITE.GOLD_SPEAR:
      case SPRITE.DIAMOND_SPEAR:
      case SPRITE.AMETHYST_SPEAR:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (37 + inacio), -img.height / 4 + scale * (asbery + 90));
        break;
      case SPRITE.CRAB_SPEAR:
        draw_image_transition_hd(alyson, img, -img.width / 4 - scale * (40 + inacio), -img.height / 4 + scale * (asbery + 85));
        break;
      case SPRITE.DRAGON_SPEAR:
        draw_image_transition(alyson, img, -img.width / 2 - scale * (39 + inacio), -img.height / 2 + scale * (asbery + 90));
        break;
      case SPRITE.HAMMER:
      case SPRITE.HAMMER_GOLD:
      case SPRITE.HAMMER_DIAMOND:
      case SPRITE.HAMMER_AMETHYST:
      case SPRITE.HAMMER_REIDITE:
      case SPRITE.SUPER_HAMMER:
        draw_image_transition(alyson, img, -img.width / 2 - scale * (46 + inacio), -img.height / 2 + scale * (asbery + 35));
        break;
      case SPRITE.WATERING_CAN_FULL:
        draw_image_transition(alyson, img, -img.width / 2 - scale * (47 + inacio), -img.height / 2 + scale * (asbery + 54));
        break;
      case SPRITE.SHOVEL:
      case SPRITE.SHOVEL_GOLD:
      case SPRITE.SHOVEL_DIAMOND:
      case SPRITE.SHOVEL_AMETHYST:
        draw_image_transition(alyson, img, -img.width / 2 - scale * (46 + inacio), -img.height / 2 + scale * (asbery + 35));
        break;
      case SPRITE.SPANNER:
        draw_image_transition(alyson, img, -img.width / 2 - scale * (47 + inacio), -img.height / 2 + scale * (asbery + 20));
        break;
    }
  }
}
var draw_player_clothe = function (secora) {
  if (secora > 0) {
    var blayten = sprite[secora][world.time];
    switch (secora) {
      case SPRITE.WOOD_HELMET:
        draw_image_transition(secora, blayten, -blayten.width / 2 + 2 * scale, -blayten.height / 2 - scale * 5);
        break;
      case SPRITE.EARMUFFS:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - scale * 18);
        break;
      case SPRITE.COAT:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - scale * 10);
        break;
      case SPRITE.EXPLORER_HAT:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - scale * 19);
        break;
      case SPRITE.PIRATE_HAT:
        draw_image_transition_hd(secora, blayten, -blayten.width / 4, -blayten.height / 4 - 20 * scale);
        break;
      case SPRITE.STONE_HELMET:
        draw_image_transition(secora, blayten, -blayten.width / 2 - 1 * scale, -blayten.height / 2 - scale * 23);
        break;
      case SPRITE.GOLD_HELMET:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - scale * 5);
        break;
      case SPRITE.DIAMOND_HELMET:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - scale * 2);
        break;
      case SPRITE.AMETHYST_HELMET:
        draw_image_transition(secora, blayten, -blayten.width / 2 + 1.5 * scale, -blayten.height / 2 - 1 * scale);
        break;
      case SPRITE.REIDITE_HELMET:
      case SPRITE.DIAMOND_PROTECTION:
      case SPRITE.AMETHYST_PROTECTION:
      case SPRITE.REIDITE_PROTECTION:
      case SPRITE.TURBAN1:
      case SPRITE.TURBAN2:
      case SPRITE.PILOT_HELMET:
      case SPRITE.LAVA_HELMET:
      case SPRITE.WITCH:
      case SPRITE.FUR_HAT:
      case SPRITE.FLOWER_HAT:
        draw_image_transition_hd(secora, blayten, -blayten.width / 4, -blayten.height / 4 + 2 * scale);
        break;
      case SPRITE.CHRISTMAS_HAT:
      case SPRITE.ELF_HAT:
        draw_image_transition(secora, blayten, -blayten.width / 2 - 5 * scale, -blayten.height / 2 - scale * 2);
        break;
      case SPRITE.CAP_SCARF:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - scale * 2);
        break;
      case SPRITE.WINTER_HOOD:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - scale * 2);
        break;
      case SPRITE.DIVING_MASK:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - scale * 2);
        break;
      case SPRITE.SUPER_DIVING_SUIT:
        draw_image_transition(secora, blayten, -blayten.width / 2 + 2 * scale, -blayten.height / 2);
        break;
      case SPRITE.DRAGON_HELMET:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - 5 * scale);
        break;
      case SPRITE.CROWN_GREEN:
      case SPRITE.CROWN_ORANGE:
      case SPRITE.CROWN_BLUE:
        draw_image_transition(secora, blayten, -blayten.width / 2 - 1 * scale, -blayten.height / 2);
        break;
      case SPRITE.HOOD:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 + 2 * scale);
        break;
      case SPRITE.PEASANT:
      case SPRITE.WINTER_PEASANT:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 + 8 * scale);
        break;
      case SPRITE.CROWN_CRAB:
        draw_image_transition(secora, blayten, -blayten.width / 2, -blayten.height / 2 - 4 * scale);
        break;
    }
  }
};
function draw_vehicle() {
  if (this.ghost || this.vehicle === 0) {
    return;
  }
  if (this.x != this.r.x || this.y != this.r.y) {
    var ajena = (Utils.get_angle_2(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
    this.vehicle_fx2 = Utils.reduceAngle(ajena, this.vehicle_fx2);
    this.vehicle_fx2 = Utils.lerp(this.vehicle_fx2, ajena, .018);
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.vehicle_fx2);
  if (this.vehicle === INV.BOAT) {
    if (this.speed > 50 || this.vehicle_fx1 > 0) {
      if (this.speed > 50) {
        this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta);
      } else {
        this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
      }
      ctx.globalAlpha = this.vehicle_fx1;
      var dantavis = sprite[SPRITE.BOAT_WAVE][world.time];
      draw_image_transition_hd(SPRITE.BOAT_WAVE, dantavis, -dantavis.width / 4, -dantavis.height / 4);
      ctx.globalAlpha = 1;
    }
    var dantavis = sprite[SPRITE.BOAT][world.time];
    draw_image_transition_hd(SPRITE.BOAT, dantavis, -dantavis.width / 4, -dantavis.height / 4);
  } else {
    if (this.vehicle === INV.HAWK) {
      this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018);
      this.vehicle_fx4.update();
      if (this.speed > 85) {
        this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
      } else {
        this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - delta);
      }
      var dantavis = sprite[SPRITE.HAWK_TAMED][world.time];
      draw_image_transition_hd(SPRITE.HAWK_TAMED, dantavis, -dantavis.width / 4, -dantavis.height / 4);
      dantavis = sprite[SPRITE.HAWK_WING_LEFT_TAMED][world.time];
      w = -dantavis.width;
      h = -dantavis.height;
      ctx.save();
      ctx.translate(-20 * scale, -20 * scale);
      ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
      ctxDrawImage(ctx, dantavis, -w / 4, -h / 4, w / 2, h / 2);
      ctx.restore();
      dantavis = sprite[SPRITE.HAWK_WING_RIGHT_TAMED][world.time];
      ctx.save();
      ctx.translate(20 * scale, -20 * scale);
      ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
      ctxDrawImage(ctx, dantavis, -w / 4, -h / 4, w / 2, h / 2);
      ctx.restore();
    } else {
      if (this.vehicle === INV.BABY_LAVA) {
        this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018);
        this.vehicle_fx4.update();
        if (this.speed > 85) {
          this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
        } else {
          this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - delta);
        }
        var dantavis = sprite[SPRITE.BABY_LAVA_TAMED][world.time];
        draw_image_transition_hd(SPRITE.BABY_LAVA_TAMED, dantavis, -dantavis.width / 4, -dantavis.height / 4);
        dantavis = sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][world.time];
        w = -dantavis.width;
        h = -dantavis.height;
        ctx.save();
        ctx.translate(-40 * scale, -45 * scale);
        ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
        ctxDrawImage(ctx, dantavis, -w / 4, -h / 4, w / 2, h / 2);
        ctx.restore();
        dantavis = sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][world.time];
        ctx.save();
        ctx.translate(40 * scale, -45 * scale);
        ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
        ctxDrawImage(ctx, dantavis, -w / 4, -h / 4, w / 2, h / 2);
        ctx.restore();
      } else {
        if (this.vehicle === INV.BABY_DRAGON) {
          this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018);
          this.vehicle_fx4.update();
          if (this.speed > 85) {
            this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
          } else {
            this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - delta);
          }
          var dantavis = sprite[SPRITE.BABY_DRAGON_TAMED][world.time];
          draw_image_transition_hd(SPRITE.BABY_DRAGON_TAMED, dantavis, -dantavis.width / 4, -dantavis.height / 4);
          dantavis = sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][world.time];
          w = -dantavis.width;
          h = -dantavis.height;
          ctx.save();
          ctx.translate(-40 * scale, -45 * scale);
          ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
          ctxDrawImage(ctx, dantavis, -w / 4, -h / 4, w / 2, h / 2);
          ctx.restore();
          dantavis = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][world.time];
          ctx.save();
          ctx.translate(40 * scale, -45 * scale);
          ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
          ctxDrawImage(ctx, dantavis, -w / 4, -h / 4, w / 2, h / 2);
          ctx.restore();
        } else {
          if (this.vehicle === INV.NIMBUS) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018);
            var dantavis = sprite[SPRITE.NIMBUS][world.time];
            draw_image_transition_hd(SPRITE.NIMBUS, dantavis, -dantavis.width / 4, -dantavis.height / 4);
          } else {
            if (this.vehicle === INV.PLANE) {
              this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018);
              var dantavis = sprite[SPRITE.PLANE][world.time];
              draw_image_transition_hd(SPRITE.PLANE, dantavis, -dantavis.width / 4, -dantavis.height / 4);
            } else {
              if (this.vehicle === INV.SLED) {
                var dantavis = sprite[SPRITE.SLED][world.time];
                draw_image_transition_hd(SPRITE.SLED, dantavis, -dantavis.width / 4, -dantavis.height / 4);
              } else {
                if (this.vehicle === INV.BABY_MAMMOTH) {
                  var dantavis = sprite[SPRITE.BABY_MAMMOTH_TAMED][world.time];
                  if (this.speed > 85) {
                    this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
                  } else {
                    this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
                  }
                  this.vehicle_fx3 += delta * 60;
                  if (this.vehicle_fx3 > 60) {
                    this.vehicle_fx3 -= 60;
                  }
                  var aafreen = this.vehicle_fx1 * (-6 + 12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30));
                  draw_image_transition_hd(SPRITE.BABY_MAMMOTH_TAMED, dantavis, -dantavis.width / 4, -dantavis.height / 4 + aafreen);
                } else {
                  if (this.vehicle === INV.MOUNT_BOAR) {
                    var dantavis = sprite[SPRITE.BOAR_TAMED][world.time];
                    if (this.speed > 85) {
                      this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
                    } else {
                      this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
                    }
                    this.vehicle_fx3 += delta * 60;
                    if (this.vehicle_fx3 > 60) {
                      this.vehicle_fx3 -= 60;
                    }
                    var aafreen = this.vehicle_fx1 * (-6 + 12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30));
                    draw_image_transition_hd(SPRITE.BOAR_TAMED, dantavis, -dantavis.width / 4, -dantavis.height / 4 + aafreen);
                  } else {
                    if (this.vehicle === INV.CRAB_BOSS) {
                      var kamrin = Math.PI / 2;
                      var termell = Math.PI / 4;
                      var dantavis = sprite[SPRITE.CRAB_BOSS_TAMED][world.time];
                      if (this.speed > 85) {
                        this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
                      } else {
                        this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
                      }
                      this.vehicle_fx3 += delta * 60;
                      if (this.vehicle_fx3 > 60) {
                        this.vehicle_fx3 -= 60;
                      }
                      var aafreen = this.vehicle_fx1 * (-6 + 12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30));
                      draw_image_transition_hd(SPRITE.CRAB_BOSS_TAMED, dantavis, -dantavis.width / 4 + aafreen, -dantavis.height / 4);
                      ctx.restore();
                      ctx.save();
                      ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
                      ctx.rotate(Math.PI + this.vehicle_fx2 + termell);
                      ctx.translate(120, aafreen);
                      ctx.rotate(kamrin);
                      dantavis = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time];
                      w = -dantavis.width;
                      h = -dantavis.height;
                      ctxDrawImage(ctx, dantavis, -w / 2, -h / 2, w, h);
                      ctx.restore();
                      ctx.save();
                      ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
                      ctx.rotate(Math.PI + this.vehicle_fx2 + kamrin + termell);
                      ctx.translate(120, aafreen);
                      ctx.rotate(kamrin);
                      dantavis = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time];
                      w = -dantavis.width;
                      h = -dantavis.height;
                      ctxDrawImage(ctx, dantavis, -w / 2, -h / 2, w, h);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  ctx.restore();
}
__EFFECT_HURT__ = 0;
__EFFECT_HEAL__ = 1;
__EFFECT_COLD__ = 2;
__EFFECT_HUNGER__ = 3;
__EFFECT_BOX__ = 4;
__IMAGE_EFFECT__ = [[], [], [], [], []];
__IMAGE_EFFECT_COLOR__ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
function get_image_effect(yaelin, addaley, tsurue) {
  if (addaley.tryLoad() !== 1) {
    return addaley;
  }
  var marina = __IMAGE_EFFECT__[tsurue][yaelin];
  if (marina === undefined) {
    marina = document.createElement("canvas");
    var alinne = marina.getContext("2d");
    var kaylar = addaley.width;
    var omeisha = addaley.height;
    marina.width = kaylar;
    marina.height = omeisha;
    alinne.drawImage(addaley, 0, 0);
    alinne.globalCompositeOperation = "source-in";
    alinne.fillStyle = __IMAGE_EFFECT_COLOR__[tsurue];
    alinne.fillRect(0, 0, kaylar, omeisha);
    __IMAGE_EFFECT__[tsurue][yaelin] = marina;
  }
  return marina;
}
function draw_player() {
  var mersadies = 0;
  switch (this.right) {
    case SPRITE.WOOD_SHIELD:
    case SPRITE.STONE_SHIELD:
    case SPRITE.GOLD_SHIELD:
    case SPRITE.DIAMOND_SHIELD:
    case SPRITE.AMETHYST_SHIELD:
    case SPRITE.REIDITE_SHIELD:
      var mersadies = 1;
      break;
  }
  if (this.ghost) {
    for (var bayardo = 0; bayardo < this.bubbles.length; bayardo++) {
      var kenethia = this.bubbles[bayardo];
      if (kenethia.life > .5) {
        var lessie = 1 - (kenethia.life - .5) * 2;
      } else {
        var lessie = kenethia.life * 2;
      }
      ctx.globalAlpha = lessie;
      var vadhir = sprite[SPRITE.BUBBLES][world.time][kenethia.id];
      ctxDrawImage(ctx, vadhir, user.cam.x + kenethia.x - vadhir.width / 2, user.cam.y + kenethia.y - vadhir.height / 2);
      ctx.globalAlpha = 1;
    }
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  world.dist_from_biomes(this);
  this.action & STATE.ATTACK && draw_player_effect(this);
  ctx.save();
  ctx.rotate(this.angle - Math.PI / 2);
  if (!(this.action & STATE.ATTACK)) {
    if (this.action & STATE.IDLE || this.vehicle !== 0) {
      this.idle.update();
    } else {
      this.action & STATE.WALK && this.walk.update();
    }
  }
  var kinzly = this.idle.v, drexell = this.walk.v, kenzel;
  if (this.clothe === SPRITE.WINTER_HOOD) {
    vadhir = sprite[SPRITE.GLOVES_HOOD][world.time];
    kenzel = SPRITE.GLOVES_HOOD;
  } else {
    if (this.clothe === SPRITE.DIAMOND_PROTECTION) {
      vadhir = sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][world.time];
      kenzel = SPRITE.GLOVES_DIAMOND_PROTECTION;
    } else {
      if (this.clothe === SPRITE.AMETHYST_PROTECTION) {
        vadhir = sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][world.time];
        kenzel = SPRITE.GLOVES_AMETHYST_PROTECTION;
      } else {
        if (this.clothe === SPRITE.REIDITE_PROTECTION) {
          vadhir = sprite[SPRITE.GLOVES_REIDITE_PROTECTION][world.time];
          kenzel = SPRITE.GLOVES_REIDITE_PROTECTION;
        } else {
          this.superzombie ? (vadhir = sprite[SPRITE.ZOMBIE_HAND][world.time], kenzel = SPRITE.ZOMBIE_HAND) : (vadhir = sprite[SPRITE.HAND][this.skin][world.time], kenzel = SPRITE.HAND);
        }
      }
    }
  }
  shadow = sprite[SPRITE.HAND_SHADOW][world.time];
  var aisaiah = vadhir, anndrea = kenzel;
  if (this.action & STATE.ATTACK) {
    if (this.attack.update() && this.attack.o == false) {
      this.hand = !this.hand;
      this.action -= STATE.ATTACK;
      if (this.uid == user.uid) {
        user.control.mouse = 0;
      }
    }
    if (this.right >= 0) {
      this.hand = true;
    }
    var zyhier = this.hand ? this.attack.v : -this.attack.v / 3;
    var temilayo = this.hand ? this.attack.v / 3 : -this.attack.v;
    if (this.superzombie) {
      ctx.save();
      ctx.rotate(zyhier);
      draw_image_transition(kenzel, vadhir, -vadhir.width / 2 - scale * (66 + kinzly), -vadhir.height / 2 + (5 + drexell) * scale);
      ctx.restore();
      ctx.save();
      ctx.rotate(temilayo);
      draw_image_transition(kenzel, vadhir, -vadhir.width / 2 + scale * (66 + kinzly), -vadhir.height / 2 + (5 + drexell) * scale);
      ctx.restore();
    } else {
      if (mersadies === 0) {
        if (this.right === SPRITE.WOOD_BOW) {
          zyhier = -Utils.ease_out_quad(-zyhier);
        }
        ctx.save();
        ctx.rotate(zyhier);
        draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - scale * (49 + kinzly), -shadow.height / 2 + (15 + drexell) * scale);
        if (this.right === SPRITE.BOOK) {
          var kevianna = sprite[this.right][this.book][world.time];
          draw_image_transition_hd_2(this.right, this.book, kevianna, -kevianna.width / 4 - scale * (62 + kinzly), -kevianna.height / 4 + scale * (drexell + 18));
        } else {
          draw_player_right_stuff(this.right, kinzly, drexell);
        }
        if (kenzel >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
          draw_image_transition_hd(kenzel, vadhir, -vadhir.width / 4 - scale * (49 + kinzly), -vadhir.height / 4 + (11 + drexell) * scale);
        } else {
          if (kenzel !== SPRITE.GLOVES_HOOD) {
            draw_image_transition_hd_2(kenzel, this.skin, vadhir, -vadhir.width / 4 - scale * (49 + kinzly), -vadhir.height / 4 + (11 + drexell) * scale);
          } else {
            draw_image_transition(kenzel, vadhir, -vadhir.width / 2 - scale * (49 + kinzly), -vadhir.height / 2 + (11 + drexell) * scale);
          }
        }
        ctx.restore();
        ctx.save();
        ctx.rotate(temilayo);
        draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + scale * (49 + kinzly), -shadow.height / 2 + (15 + drexell) * scale);
        if (kenzel >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
          draw_image_transition_hd(kenzel, vadhir, -vadhir.width / 4 + scale * (49 + kinzly), -vadhir.height / 4 + (11 + drexell) * scale);
        } else {
          if (kenzel !== SPRITE.GLOVES_HOOD) {
            draw_image_transition_hd_2(kenzel, this.skin, vadhir, -vadhir.width / 4 + scale * (49 + kinzly), -vadhir.height / 4 + (11 + drexell) * scale);
          } else {
            draw_image_transition(kenzel, vadhir, -vadhir.width / 2 + scale * (49 + kinzly), -vadhir.height / 2 + (11 + drexell) * scale);
          }
        }
        ctx.restore();
      }
    }
  } else {
    if (this.superzombie) {
      draw_image_transition(kenzel, vadhir, -vadhir.width / 2 - scale * (66 + kinzly), -vadhir.height / 2 + (5 + drexell) * scale);
      draw_image_transition(kenzel, vadhir, -vadhir.width / 2 + scale * (66 + kinzly), -vadhir.height / 2 + (5 + drexell) * scale);
    } else {
      if (mersadies === 0) {
        draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - scale * (49 + kinzly), -shadow.height / 2 + (15 + drexell) * scale);
        if (this.right === SPRITE.BOOK) {
          var kevianna = sprite[this.right][this.book][world.time];
          draw_image_transition_hd_2(this.right, this.book, kevianna, -kevianna.width / 4 - scale * (62 + kinzly), -kevianna.height / 4 + scale * (drexell + 18));
        } else {
          draw_player_right_stuff(this.right, kinzly, drexell);
        }
        if (kenzel >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
          draw_image_transition_hd(kenzel, vadhir, -vadhir.width / 4 - scale * (49 + kinzly), -vadhir.height / 4 + (11 + drexell) * scale);
        } else {
          if (kenzel !== SPRITE.GLOVES_HOOD) {
            draw_image_transition_hd_2(kenzel, this.skin, vadhir, -vadhir.width / 4 - scale * (49 + kinzly), -vadhir.height / 4 + (11 + drexell) * scale);
          } else {
            draw_image_transition(kenzel, vadhir, -vadhir.width / 2 - scale * (49 + kinzly), -vadhir.height / 2 + (11 + drexell) * scale);
          }
        }
        draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + scale * (49 + kinzly), -shadow.height / 2 + (15 + drexell) * scale);
        if (kenzel >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
          draw_image_transition_hd(kenzel, vadhir, -vadhir.width / 4 + scale * (49 + kinzly), -vadhir.height / 4 + (11 + drexell) * scale);
        } else {
          if (kenzel !== SPRITE.GLOVES_HOOD) {
            draw_image_transition_hd_2(kenzel, this.skin, vadhir, -vadhir.width / 4 + scale * (49 + kinzly), -vadhir.height / 4 + (11 + drexell) * scale);
          } else {
            draw_image_transition(kenzel, vadhir, -vadhir.width / 2 + scale * (49 + kinzly), -vadhir.height / 2 + (11 + drexell) * scale);
          }
        }
      }
    }
  }
  if (this.bag && this.clothe < 1) {
    var vadhir = sprite[SPRITE.BAG][this.baglook][world.time];
    draw_image_transition_hd_2(SPRITE.BAG, this.baglook, vadhir, -vadhir.width / 4, -vadhir.height / 4 - 39 * scale);
  }
  if (this.superzombie) {
    var vadhir = sprite[SPRITE.ZOMBIE_BODY][world.time];
    draw_image_transition(SPRITE.ZOMBIE_BODY, vadhir, -vadhir.width / 2, -vadhir.height / 2);
    this.move_head.update();
    vadhir = sprite[SPRITE.ZOMBIE_HEAD][world.time];
    draw_image_transition(SPRITE.ZOMBIE_HEAD, vadhir, -vadhir.width / 2, -vadhir.height / 2 + this.move_head.v);
  } else {
    var vadhir = sprite[SPRITE.BODY][this.skin][world.time];
    if (this.clothe !== SPRITE.WINTER_HOOD) {
      draw_image_transition_hd_2(SPRITE.BODY, this.skin, vadhir, -vadhir.width / 4, -vadhir.height / 4);
      if (this.accessory > 0) {
        var vadhir = sprite[SPRITE.ACCESSORY][this.accessory][world.time];
        draw_image_transition_hd_2(SPRITE.ACCESSORY, this.accessory, vadhir, -vadhir.width / 4, -vadhir.height / 4);
      }
    }
  }
  if (this.action & STATE.HEAL) {
    if (this.heal.update() && this.heal.o == false) {
      this.action -= STATE.HEAL;
    }
    ctx.globalAlpha = .6 - this.heal.v;
    if (this.superzombie) {
      var vadhir = sprite[SPRITE.ZOMBIE_HEAL];
      ctxDrawImage(ctx, vadhir, -vadhir.width / 2, -vadhir.height / 2);
    } else {
      var vadhir = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HEAL__);
      ctxDrawImage(ctx, vadhir, vadhir.width / 4, vadhir.height / 4, -vadhir.width / 2, -vadhir.height / 2);
    }
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.WEB) {
    if (this.web.update() && this.web.o == false) {
      this.action -= STATE.WEB;
    }
    ctx.globalAlpha = .6 - this.web.v;
    var vadhir = sprite[SPRITE.WEB];
    ctxDrawImage(ctx, vadhir, -vadhir.width / 2, -vadhir.height / 2);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = .6 - this.hit.v;
    if (this.superzombie) {
      var vadhir = sprite[SPRITE.ZOMBIE_HURT];
      ctxDrawImage(ctx, vadhir, -vadhir.width / 2, -vadhir.height / 2);
    } else {
      var vadhir = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HURT__);
      ctxDrawImage(ctx, vadhir, vadhir.width / 4, vadhir.height / 4, -vadhir.width / 2, -vadhir.height / 2);
    }
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    if (this.freeze.update() && this.freeze.o == false) {
      this.action -= STATE.COLD;
    }
    ctx.globalAlpha = .6 - this.freeze.v;
    var vadhir = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_COLD__);
    ctxDrawImage(ctx, vadhir, vadhir.width / 4, vadhir.height / 4, -vadhir.width / 2, -vadhir.height / 2);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.HUNGER) {
    if (this.starve.update() && this.starve.o == false) {
      this.action -= STATE.HUNGER;
    }
    ctx.globalAlpha = .6 - this.starve.v;
    if (this.superzombie) {
      var vadhir = sprite[SPRITE.ZOMBIE_HUNGER];
      ctxDrawImage(ctx, vadhir, -vadhir.width / 2, -vadhir.height / 2);
    } else {
      var vadhir = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HUNGER__);
      ctxDrawImage(ctx, vadhir, vadhir.width / 4, vadhir.height / 4, -vadhir.width / 2, -vadhir.height / 2);
    }
    ctx.globalAlpha = 1;
  }
  draw_player_clothe(this.clothe);
  if (mersadies === 1) {
    if (this.action & STATE.ATTACK) {
      kinzly += this.attack.v * 15;
    }
    draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - scale * 26, -shadow.height / 2 + (31 + drexell + kinzly) * scale);
    if (anndrea >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
      draw_image_transition_hd(anndrea, aisaiah, -aisaiah.width / 4 - scale * 26, -aisaiah.height / 4 + (27 + drexell + kinzly) * scale);
    } else {
      if (anndrea !== SPRITE.GLOVES_HOOD) {
        draw_image_transition_hd_2(anndrea, this.skin, aisaiah, -aisaiah.width / 4 - scale * 26, -aisaiah.height / 4 + (27 + drexell + kinzly) * scale);
      } else {
        draw_image_transition(anndrea, aisaiah, -aisaiah.width / 2 - scale * 26, -aisaiah.height / 2 + (27 + drexell + kinzly) * scale);
      }
    }
    draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + scale * 26, -shadow.height / 2 + (31 + drexell + kinzly) * scale);
    if (anndrea >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
      draw_image_transition_hd(anndrea, aisaiah, -aisaiah.width / 4 + scale * 26, -aisaiah.height / 4 + (27 + drexell + kinzly) * scale);
    } else {
      if (anndrea !== SPRITE.GLOVES_HOOD) {
        draw_image_transition_hd_2(anndrea, this.skin, aisaiah, -aisaiah.width / 4 + scale * 26, -aisaiah.height / 4 + (27 + drexell + kinzly) * scale);
      } else {
        draw_image_transition(anndrea, aisaiah, -aisaiah.width / 2 + scale * 26, -aisaiah.height / 2 + (27 + drexell + kinzly) * scale);
      }
    }
    draw_player_right_stuff_after(this.right, 0, drexell + kinzly);
  }
  ctx.restore();
  if (this.clothe !== SPRITE.HOOD && this.clothe !== SPRITE.WINTER_HOOD) {
    if (this.dist_winter > 0) {
      if (!this.player.label_winter) {
        this.player.label_winter = create_text(scale, this.player.nickname, 20, "#187484", "#000", 2, null, null, 300 * scale);
      }
      var vadhir = this.player.label_winter;
    } else {
      if (!this.player.label) {
        this.player.label = create_text(scale, this.player.nickname, 20, "#FFF", "#000", 2, null, null, 300 * scale);
      }
      var vadhir = this.player.label;
    }
    if (world.day == SPRITE.NIGHT) {
      ctx.globalAlpha = .5;
    }
    var kinzly = Math.floor(-vadhir.width / 2);
    var drexell = Math.floor(-vadhir.height / 2 - 70 * scale);
    ctxDrawImage(ctx, vadhir, kinzly, drexell);
    if (this.player.level > 0) {
      var hanson = kinzly + vadhir.width + 5;
      vadhir = sprite[SPRITE.VERIFIED];
      if (PLAYER_LEVEL[this.player.level] === undefined) {
        PLAYER_LEVEL[this.player.level] = create_text(scale, "[" + this.player.level + "]", 20, "#F9E8A2", "#000", 2, null, null, 50 * scale);
      }
      ctxDrawImage(ctx, PLAYER_LEVEL[this.player.level], hanson, drexell);
    }
    ctx.globalAlpha = 1;
  } else {
    var drexell = Math.floor(-70 * scale), kinzly = Math.floor(sprite[SPRITE.ICON_MEMBER].width / 1.5);
  }
  if (user.in_team(this.pid)) {
    if (this.pid == user.team[0]) {
      var vadhir = sprite[SPRITE.ICON_LEADER];
    } else {
      var vadhir = sprite[SPRITE.ICON_MEMBER];
    }
    ctxDrawImage(ctx, vadhir, kinzly - vadhir.width - 5, drexell - 6);
  }
  ctx.restore();
}
function draw_alert_ghost() {
  if (this.enabled && this.delay >= 0) {
    var carissa = (new Date).getTime();
    var ahlyvia = carissa - this.delay;
    var agostino = ahlyvia % 1e3 / 1e3;
    if (agostino > .5) {
      agostino = 1 - (agostino - .5) * 2;
    } else {
      agostino *= 2;
    }
    ahlyvia = Math.floor(ahlyvia / 1e3);
    if (ahlyvia < WORLD.GHOST_DELAY) {
      ahlyvia = WORLD.GHOST_DELAY - ahlyvia;
      !this.label && (this.label = create_text(scale, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10));
      (this.now != ahlyvia || !this.sec) && (this.now = ahlyvia, this.sec = create_text(scale, "" + ahlyvia, 40, "#660000", null, null, null, null, null, "#000", 10));
      ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, 100 * scale);
      ctx.globalAlpha = agostino;
      ctxDrawImage(ctx, this.sec, (canw - this.label.width) / 2 - this.sec.width + 15 * scale, 100 * scale);
      ctx.globalAlpha = 1;
    }
  }
}
function draw_welcome_message() {
  if (this.message !== undefined) {
    var harperlynn = user.inv.can_select.length > 0 ? -95 : 0;
    ctxDrawImage(ctx, this.message, 0, canh - this.message.height + harperlynn);
  }
}
function draw_alert(qadriyyah, aansh) {
  if (this.text) {
    if (!this.timeout.o) {
      ctx.globalAlpha = 1;
    } else {
      ctx.globalAlpha = 1 - this.timeout.v;
    }
    if (!this.label) {
      this.label = create_text(scale, this.text, 40, qadriyyah, null, null, null, null, null, aansh, 10);
    }
    ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, 50 * scale);
    ctx.globalAlpha = 1;
    this.timeout.update() && this.timeout.o == false && (this.text = this.list.shift(), this.label = null);
  }
}
function draw_chat() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.text.length > 0) {
    for (var ransom = 0; ransom < this.text.length && ransom < 2; ransom++) {
      !this.label[ransom] && (this.label[ransom] = create_message(scale, this.text[ransom]), this.text_effect[ransom] = 0, this.text_move[ransom] = 0);
      if (ransom === 1) {
        this.text_move[0] = Utils.ease_in_out_quad(this.text_ease) * 30;
      }
    }
    this.text_effect[0] += delta;
    if (this.text.length > 1) {
      this.text_ease = Math.min(this.text_ease + delta, 1);
      if (this.text_effect[0] > 1 && this.text_ease > .5) {
        this.text_effect[1] += delta;
      }
    }
    for (var ransom = 0; ransom < this.text.length && ransom < 2; ransom++) {
      var ghazal = this.text_effect[ransom];
      if (ghazal > 0) {
        if (ghazal < .25) {
          ctx.globalAlpha = ghazal * 4;
        } else {
          if (ghazal > 3.75) {
            ctx.globalAlpha = Math.max((4 - ghazal) * 4, 0);
          } else {
            ctx.globalAlpha = 1;
          }
        }
        ctxDrawImage(ctx, this.label[ransom], -this.label[ransom].width / 2, -this.text_move[ransom] + -this.label[ransom].height / 2 - 110 * scale);
      }
    }
    if (this.text_effect[0] > 4) {
      this.text_effect.shift();
      this.text.shift();
      this.text_move.shift();
      this.label.shift();
      this.text_ease = 0;
    }
  }
  ctx.restore();
}
var __effect = 0;
function draw_objects_effect(gracen, yeslie, clouis, jelon, conrado, jitsuo, masato, charry) {
  if (charry === undefined) {
    charry = 0;
  }
  for (var jaicee = masato; jaicee >= charry; jaicee--) {
    for (var tsering = gracen; tsering <= yeslie; tsering++) {
      for (var dovber = clouis; dovber <= jelon; dovber++) {
        var felycia = MAP.tiles[tsering][dovber];
        if (!felycia || !felycia[jitsuo]) {
          continue;
        }
        var sheyla = felycia[jitsuo][jaicee];
        if (sheyla === undefined) {
          continue;
        }
        for (var naithan = 0; naithan < sheyla.length; naithan++) {
          var imperia = sheyla[naithan];
          var dymond = sprite[conrado][world.time][jaicee];
          var ethny = (__effect + (tsering + dovber) * 3) % 60;
          var nello = ethny < 30 ? ethny / 30 : 1 - (ethny - 30) / 30;
          var greycie = -dymond.width * (1 + .9 * nello / 30);
          var dalyah = -dymond.height * (1 + .9 * nello / 30);
          ethny = (__effect + (tsering + dovber) * 7) % 60;
          nello = ethny < 30 ? ethny / 30 : 1 - (ethny - 30) / 30;
          var shaguanda = ctx.globalAlpha;
          ctx.globalAlpha = (.9 + nello * .1) * shaguanda;
          ctxDrawImage(ctx, dymond, user.cam.x + imperia.x - greycie / 2, user.cam.y + imperia.y - dalyah / 2, greycie, dalyah);
          ctx.globalAlpha = shaguanda;
        }
      }
    }
  }
}
function draw_breath_objects(vaira, ladarius, ninasimone, pratham, nathean, shequitta, hillie, danie) {
  if (danie === undefined) {
    danie = 0;
  }
  world.breath[nathean].update();
  for (var tremya = hillie; tremya >= danie; tremya--) {
    for (var manly = vaira; manly <= ladarius; manly++) {
      for (var shaunell = ninasimone; shaunell <= pratham; shaunell++) {
        var geethika = MAP.tiles[manly][shaunell];
        if (!geethika || !geethika[shequitta]) {
          continue;
        }
        var eulys = geethika[shequitta][tremya];
        if (eulys === undefined) {
          continue;
        }
        for (var rusell = 0; rusell < eulys.length; rusell++) {
          var loxton = eulys[rusell];
          if (loxton.update) {
            loxton.hit.update() && loxton.hit.o == false && (loxton.update = false);
            var havi = (1 - loxton.hit.v) * delta * 600 * scale, kingsten = Math.cos(loxton.angle) * havi, kayce = Math.sin(loxton.angle) * havi;
          } else {
            var kingsten = 0, kayce = 0;
          }
          var mimi = sprite[nathean][world.time][tremya];
          var leion = -mimi.width * world.breath[nathean].v;
          var lemmie = -mimi.height * world.breath[nathean].v;
          ctxDrawImage(ctx, mimi, user.cam.x + loxton.x - leion / 2 + kingsten, user.cam.y + loxton.y - lemmie / 2 + kayce, leion, lemmie);
        }
      }
    }
  }
}
var randweb = [];
for (var i = 0; i < 100; i++) {
  var r = 1;
  if (Math.random() < .25) {
    r = 0;
  }
  randweb.push(r);
}
_scale_object = 1;
function draw_map_objects(hudayfi, silbia, trey, kostanty, zekhi, mellette, richanda, nickoli, nicko) {
  if (nickoli === undefined) {
    nickoli = 0;
  }
  for (var kealin = richanda; kealin >= nickoli; kealin--) {
    for (var kibwe = hudayfi; kibwe <= silbia; kibwe++) {
      for (var tylasia = trey; tylasia <= kostanty; tylasia++) {
        if (nicko > 0 && randweb[(kibwe + tylasia * nicko) % randweb.length] === 1) {
          continue;
        }
        var akesha = MAP.tiles[kibwe][tylasia];
        if (akesha === undefined || akesha[mellette] === undefined) {
          continue;
        }
        var seichi = akesha[mellette][kealin];
        if (seichi === undefined) {
          continue;
        }
        for (var deshala = 0; deshala < seichi.length; deshala++) {
          var wareef = seichi[deshala];
          if (wareef.update) {
            wareef.hit.update() && wareef.hit.o == false && (wareef.update = false);
            var marquess = (1 - wareef.hit.v) * delta * 600 * scale, gaspard = Math.cos(wareef.angle) * marquess, denzil = Math.sin(wareef.angle) * marquess;
          } else {
            var gaspard = 0, denzil = 0;
          }
          var lamecia = sprite[zekhi][world.time][kealin];
          ctxDrawImage(ctx, lamecia, user.cam.x + wareef.x - lamecia.width / (2 * _scale_object) + gaspard, user.cam.y + wareef.y - lamecia.height / (2 * _scale_object) + denzil, lamecia.width / _scale_object, lamecia.height / _scale_object);
        }
      }
    }
  }
}
function draw_map_decorations(neshanta, johnnisha, nzingha, doreene, josgar, padrick, alyzea, aamer, ireanna) {
  if (aamer === undefined) {
    aamer = 0;
  }
  for (var sarinna = neshanta; sarinna <= johnnisha; sarinna++) {
    for (var lissie = nzingha; lissie <= doreene; lissie++) {
      var timothhy = MAP.tiles[sarinna][lissie];
      if (timothhy === undefined || timothhy[padrick] === undefined) {
        continue;
      }
      var chaden = timothhy[padrick];
      if (chaden === undefined) {
        continue;
      }
      if (chaden.scale === 1) {
        var jumana = sprite[josgar][world.time][chaden._id];
        ctx.save();
        ctx.translate(user.cam.x + chaden.x, user.cam.y + chaden.y);
        ctx.rotate(chaden.angle);
        ctxDrawImage(ctx, jumana, -jumana.width / 4, -jumana.height / 4, jumana.width / 2, jumana.height / 2);
        ctx.restore();
      } else {
        if (chaden.scale === 3) {
          for (var mozella = 0; mozella < chaden.p.length; mozella++) {
            ctx.save();
            ctx.translate(user.cam.x + chaden.x, user.cam.y + chaden.y);
            ctx.rotate(chaden.p[mozella].angle);
            var jumana = sprite[josgar][world.time][chaden.p[mozella]._id];
            ctxDrawImage(ctx, jumana, -jumana.width / 3 + chaden.p[mozella].x, -jumana.height / 3 + chaden.p[mozella].y, jumana.width / 1.5, jumana.height / 1.5);
            ctx.restore();
          }
        } else {
          var jumana = sprite[josgar][world.time][chaden._id];
          ctx.save();
          ctx.translate(user.cam.x + chaden.x, user.cam.y + chaden.y);
          ctx.rotate(chaden.angle);
          ctxDrawImage(ctx, jumana, -jumana.width / 2, -jumana.height / 2, jumana.width, jumana.height);
          ctx.restore();
        }
      }
    }
  }
}
function draw_lava_effect(omed, avarie, ayad, tracker, orien, arlease, abdelkarim, naiyma, joseroberto) {
  if (naiyma === undefined) {
    naiyma = 0;
  }
  for (var fortino = abdelkarim; fortino >= naiyma; fortino--) {
    for (var kamila = omed; kamila <= avarie; kamila++) {
      for (var asiya = ayad; asiya <= tracker; asiya++) {
        var lorayn = MAP.tiles[kamila][asiya];
        if (lorayn === undefined || lorayn[arlease] === undefined) {
          continue;
        }
        var mykyah = lorayn[arlease][fortino];
        if (mykyah === undefined) {
          continue;
        }
        for (var deasiah = 0; deasiah < mykyah.length; deasiah++) {
          var aynan = mykyah[deasiah];
          if (aynan.update) {
            aynan.hit.update() && aynan.hit.o == false && (aynan.update = false);
            var ianna = (1 - aynan.hit.v) * delta * 600 * scale, keausha = Math.cos(aynan.angle) * ianna, bellicia = Math.sin(aynan.angle) * ianna;
          } else {
            var keausha = 0, bellicia = 0;
          }
          for (var azara = 0; azara < _bubble[fortino].amount; azara++) {
            world.lava[azara].last !== old_timestamp && (world.lava[azara].update(), world.lava[azara].last = old_timestamp);
            var harleyrae = sprite[SPRITE.LAVA_BUBBLE][world.time][_bubble[fortino].pos[azara].t];
            var huk = -harleyrae.width * world.lava[azara].v;
            var tinker = -harleyrae.height * world.lava[azara].v;
            ctxDrawImage(ctx, harleyrae, user.cam.x + aynan.x - huk / 4 + keausha + _bubble[fortino].pos[azara].x, user.cam.y + aynan.y - tinker / 4 + bellicia + _bubble[fortino].pos[azara].y, huk / 2, tinker / 2);
          }
        }
      }
    }
  }
}
_bubble = [{amount: 10, pos: [{x: -128, y: -20, t: 0}, {x: -86, y: -4, t: 1}, {x: -60, y: -74, t: 2}, {x: -22, y: -144, t: 0}, {x: -58, y: 86, t: 0}, {x: 3, y: -30, t: 0}, {x: 65, y: -115, t: 1}, {x: 118, y: -50, t: 0}, {x: 73, y: 15, t: 1}, {x: 67, y: 79, t: 0}]}, {amount: 5, pos: [{x: -45, y: -26, t: 0}, {x: -45, y: 20, t: 2}, {x: 10, y: -60, t: 1}, {x: 52, y: -17, t: 1}, {x: 14, y: 45, t: 0}]}, {amount: 3, pos: [{x: -30, y: 3, t: 2}, {x: 7, y: -38, t: 2}, {x: 37, y: 5, t: 2}]}, {amount: 11, pos: [{x: -74, y: -87, t: 2}, {x: -11, y: -10, t: 1}, {x: -99, y: 17, t: 1}, {x: -66, y: 84, t: 0}, {x: -55, y: 123, t: 1}, {x: 10, y: 81, t: 2}, {x: 52, y: 50, t: 0}, {x: 138, y: 9, t: 1}, {x: 104, y: -28, t: 0}, {x: 67, y: -56, t: 2}, {x: 5, y: -112, t: 0}]}, {amount: 6, pos: [{x: -33, y: -66, t: 2}, {x: -58, y: 10, t: 0}, {x: -19, y: 44, t: 1}, {x: 44, y: 20, t: 0}, {x: 53, y: -36, t: 2}, {x: 7, y: -62, t: 0}]}, {amount: 3, pos: [{x: -19, y: -25, t: 1}, {x: -29, y: 13, t: 2}, {x: 12, y: 12, t: 0}]}];
var _js = 0, _je = 0, _is = 0, _ie = 0;
function draw_world() {
  var darena = _js;
  var elowen = _je;
  var damaiya = _is;
  var kumar = _ie;
  if (ui.quality) {
    draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.LAKE_EDGE, "l", 2);
  }
  if (ui.quality) {
    draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.LAVA_GROUND, "la", 5);
  }
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.MAGMA, "la", 5);
  draw_map_transition(draw_breath_objects, damaiya, kumar, darena, elowen, SPRITE.LAKE, "l", 2);
  ui.quality && (draw_map_transition(draw_lava_effect, damaiya, kumar, darena, elowen, SPRITE.MAGMA, "la", 5), draw_map_transition(draw_breath_objects, damaiya, kumar, darena, elowen, SPRITE.LAKE_DEEP, "l", 2));
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.MARKER, "ma", 3);
  var kayde = world.units[ITEMS.SAND_WORM];
  for (var jira = 0; jira < kayde.length; jira++) {
    kayde[jira].draw_ground();
  }
  var shebria = world.units[ITEMS.PLAYERS];
  for (var jira = 0; jira < shebria.length; jira++) {
    var shelika = shebria[jira];
    for (var congress = 0; congress < shelika.swim.length; congress++) {
      draw_swim(shelika.swim[congress]);
    }
  }
  var korde = world.units[ITEMS.BRIDGE];
  for (var jira = 0; jira < korde.length; jira++) {
    draw_transition(korde[jira], SPRITE.BRIDGE);
    korde[jira].draw_life(korde[jira].info);
  }
  var maricar = world.units[ITEMS.FURNACE];
  for (var jira = 0; jira < maricar.length; jira++) {
    if (maricar[jira].action == 2) {
      draw_bg_transition(maricar[jira]);
    }
  }
  var alcide = world.units[ITEMS.FIRE];
  for (var jira = 0; jira < alcide.length; jira++) {
    draw_bg_transition(alcide[jira], SPRITE.WOOD_FIRE);
  }
  var lorana = world.units[ITEMS.RESURRECTION];
  for (var jira = 0; jira < lorana.length; jira++) {
    draw_bg_transition(lorana[jira]);
  }
  var raneem = world.units[ITEMS.EMERALD_MACHINE];
  for (var jira = 0; jira < raneem.length; jira++) {
    draw_bg_transition(raneem[jira]);
  }
  var ralisha = world.units[ITEMS.BIG_FIRE];
  for (var jira = 0; jira < ralisha.length; jira++) {
    draw_bg_transition(ralisha[jira], SPRITE.BIG_FIRE_WOOD);
  }
  var ladislav = world.units[ITEMS.SIGN];
  for (var jira = 0; jira < ladislav.length; jira++) {
    draw_transition(ladislav[jira]);
  }
  var cathalina = world.units[ITEMS.PLOT];
  for (var jira = 0; jira < cathalina.length; jira++) {
    draw_transition(cathalina[jira], SPRITE.PLOT);
  }
  var joyl = world.units[ITEMS.SEED];
  for (var jira = 0; jira < joyl.length; jira++) {
    draw_bg_transition(joyl[jira]);
  }
  var joyl = world.units[ITEMS.TOMATO_SEED];
  for (var jira = 0; jira < joyl.length; jira++) {
    draw_bg_transition(joyl[jira]);
  }
  var joyl = world.units[ITEMS.SEED];
  for (var jira = 0; jira < joyl.length; jira++) {
    draw_fg_transition(joyl[jira]);
  }
  var chabely = world.units[ITEMS.CARROT_SEED];
  for (var jira = 0; jira < chabely.length; jira++) {
    if ((chabely[jira].info & 15) === 0 || chabely[jira].info === 10) {
      draw_transition(chabely[jira]);
    }
  }
  var cannyn = world.units[ITEMS.WATERMELON_SEED];
  for (var jira = 0; jira < cannyn.length; jira++) {
    if ((cannyn[jira].info & 15) === 0 || cannyn[jira].info === 10) {
      draw_transition(cannyn[jira]);
    }
  }
  var josabeth = world.units[ITEMS.ALOE_VERA_SEED];
  for (var jira = 0; jira < josabeth.length; jira++) {
    if ((josabeth[jira].info & 15) === 0 || josabeth[jira].info === 10) {
      draw_transition(josabeth[jira]);
    }
  }
  var gage = world.units[ITEMS.WHEAT_MOB];
  for (var jira = 0; jira < gage.length; jira++) {
    draw_transition(gage[jira], SPRITE.WHEAT_SEED);
  }
  var ayari = world.units[ITEMS.GARLIC_SEED];
  for (var jira = 0; jira < ayari.length; jira++) {
    if ((ayari[jira].info & 15) === 0 || ayari[jira].info === 10) {
      draw_transition(ayari[jira]);
    }
  }
  var esthermae = world.units[ITEMS.THORNBUSH_SEED];
  for (var jira = 0; jira < esthermae.length; jira++) {
    if ((esthermae[jira].info & 15) === 0 || esthermae[jira].info === 10) {
      draw_transition(esthermae[jira]);
    }
  }
  var jeleesa = world.units[ITEMS.PUMPKIN_SEED];
  for (var jira = 0; jira < jeleesa.length; jira++) {
    if ((jeleesa[jira].info & 15) === 0 || jeleesa[jira].info === 10) {
      draw_transition(jeleesa[jira]);
    }
  }
  var gage = world.units[ITEMS.WHEAT_SEED];
  for (var jira = 0; jira < gage.length; jira++) {
    draw_transition(gage[jira]);
  }
  var eliahna = world.units[ITEMS.CRATE];
  for (var jira = 0; jira < eliahna.length; jira++) {
    draw_transition(eliahna[jira], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
  }
  var danayia = world.units[ITEMS.DEAD_BOX];
  for (var jira = 0; jira < danayia.length; jira++) {
    draw_transition(danayia[jira], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
  }
  var barack = world.units[ITEMS.GIFT];
  for (var jira = 0; jira < barack.length; jira++) {
    draw_transition(barack[jira], SPRITE.GIFT, SPRITE.HURT_GIFT);
  }
  var vetri = world.units[ITEMS.WOOD_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info & 1) {
      draw_transition(vetri[jira], SPRITE.DOOR_WOOD_OPEN);
    }
  }
  var vetri = world.units[ITEMS.STONE_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info & 1) {
      draw_transition(vetri[jira], SPRITE.DOOR_STONE_OPEN);
    }
  }
  var vetri = world.units[ITEMS.GOLD_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info) {
      draw_transition(vetri[jira], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var vetri = world.units[ITEMS.DIAMOND_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info) {
      draw_transition(vetri[jira], SPRITE.DOOR_DIAMOND_OPEN);
    }
  }
  var vetri = world.units[ITEMS.AMETHYST_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info) {
      draw_transition(vetri[jira], SPRITE.DOOR_AMETHYST_OPEN);
    }
  }
  var vetri = world.units[ITEMS.REIDITE_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info) {
      draw_transition(vetri[jira], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var vetri = world.units[ITEMS.WOOD_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info & 1) {
      draw_transition(vetri[jira], SPRITE.DOOR_WOOD_OPEN);
    }
  }
  var vetri = world.units[ITEMS.STONE_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info & 1) {
      draw_transition(vetri[jira], SPRITE.DOOR_STONE_OPEN);
    }
  }
  var vetri = world.units[ITEMS.GOLD_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info) {
      draw_transition(vetri[jira], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var vetri = world.units[ITEMS.DIAMOND_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info) {
      draw_transition(vetri[jira], SPRITE.DOOR_DIAMOND_OPEN);
    }
  }
  var vetri = world.units[ITEMS.AMETHYST_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info) {
      draw_transition(vetri[jira], SPRITE.DOOR_AMETHYST_OPEN);
    }
  }
  var vetri = world.units[ITEMS.REIDITE_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (vetri[jira].info) {
      draw_transition(vetri[jira], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var jericha = world.units[ITEMS.RABBIT];
  for (var jira = 0; jira < jericha.length; jira++) {
    draw_transition(jericha[jira], SPRITE.RABBIT, SPRITE.HURT_RABBIT);
  }
  var dametrius = world.units[ITEMS.BED];
  for (var jira = 0; jira < dametrius.length; jira++) {
    draw_transition(dametrius[jira], SPRITE.BED);
  }
  var kayde = world.units[ITEMS.SAND_WORM];
  for (var jira = 0; jira < kayde.length; jira++) {
    draw_transition(kayde[jira], SPRITE.SAND_WORM, SPRITE.HURT_SAND_WORM);
  }
  var lakelynn = world.units[ITEMS.SPELL];
  for (var jira = 0; jira < lakelynn.length; jira++) {
    if (lakelynn[jira].fly === 0) {
      draw_transition(lakelynn[jira]);
    }
  }
  var shebria = world.units[ITEMS.PLAYERS];
  for (var jira = 0; jira < shebria.length; jira++) {
    var shelika = shebria[jira];
    if (shebria[jira].vehicle !== INV.BABY_DRAGON && shebria[jira].vehicle !== INV.BABY_LAVA && shebria[jira].vehicle !== INV.HAWK && shebria[jira].vehicle !== INV.PLANE && shebria[jira].vehicle !== INV.NIMBUS) {
      if (shelika.tower === 0) {
        if (shelika.tower_fx > .001) {
          shelika.tower_fx = Utils.lerp(shelika.tower_fx, 0, .018);
          var essica = 1 + .18 * Math.min(1, Math.max(shelika.tower_fx, 0) / 100);
          ctx.save();
          ctx.scale(essica, essica);
          user.cam.x /= essica;
          user.cam.y /= essica;
          shelika.x /= essica;
          shelika.y /= essica;
          shelika.r.x /= essica;
          shelika.r.y /= essica;
          shelika.draw_vehicle();
          shelika.draw();
          user.cam.x *= essica;
          user.cam.y *= essica;
          shelika.x *= essica;
          shelika.y *= essica;
          shelika.r.x *= essica;
          shelika.r.y *= essica;
          ctx.restore();
        } else {
          shelika.fly = 0;
          shelika.draw_vehicle();
          shelika.draw();
        }
      }
    } else {
      if (shelika.speed <= 180) {
        ctx.save();
        var essica = 1 + .35 * Math.min(1, Math.max(shelika.vehicle_fx5 - 30, 0) / 180);
        ctx.scale(essica, essica);
        user.cam.x /= essica;
        user.cam.y /= essica;
        shelika.x /= essica;
        shelika.y /= essica;
        shelika.r.x /= essica;
        shelika.r.y /= essica;
        shelika.fly = 0;
        shelika.draw_vehicle();
        shelika.draw();
        user.cam.x *= essica;
        user.cam.y *= essica;
        shelika.x *= essica;
        shelika.y *= essica;
        shelika.r.x *= essica;
        shelika.r.y *= essica;
        ctx.restore();
      }
    }
  }
  var dametrius = world.units[ITEMS.BED];
  for (var jira = 0; jira < dametrius.length; jira++) {
    draw_transition(dametrius[jira], SPRITE.BED_TOP);
  }
  var verge = world.units[ITEMS.CRAB];
  for (var jira = 0; jira < verge.length; jira++) {
    draw_transition(verge[jira]);
  }
  var jeanitta = world.units[ITEMS.FOX];
  for (var jira = 0; jira < jeanitta.length; jira++) {
    draw_transition(jeanitta[jira], SPRITE.FOX, SPRITE.HURT_FOX);
  }
  var kobin = world.units[ITEMS.BOAR];
  for (var jira = 0; jira < kobin.length; jira++) {
    draw_transition(kobin[jira]);
  }
  var garcelle = world.units[ITEMS.WOLF];
  for (var jira = 0; jira < garcelle.length; jira++) {
    draw_transition(garcelle[jira], SPRITE.WOLF, SPRITE.HURT_WOLF);
  }
  var sahishnu = world.units[ITEMS.BABY_DRAGON];
  for (var jira = 0; jira < sahishnu.length; jira++) {
    draw_transition(sahishnu[jira], SPRITE.BABY_DRAGON, SPRITE.HURT_BABY_DRAGON);
  }
  var raeqwon = world.units[ITEMS.BABY_LAVA];
  for (var jira = 0; jira < raeqwon.length; jira++) {
    draw_transition(raeqwon[jira], SPRITE.BABY_LAVA, SPRITE.HURT_BABY_LAVA);
  }
  var chabely = world.units[ITEMS.CARROT_SEED];
  for (var jira = 0; jira < chabely.length; jira++) {
    if ((chabely[jira].info & 15) !== 0 && chabely[jira].info !== 10) {
      draw_transition(chabely[jira]);
    }
  }
  var cannyn = world.units[ITEMS.WATERMELON_SEED];
  for (var jira = 0; jira < cannyn.length; jira++) {
    if ((cannyn[jira].info & 15) !== 0 && cannyn[jira].info !== 10) {
      draw_transition(cannyn[jira]);
    }
  }
  var josabeth = world.units[ITEMS.ALOE_VERA_MOB];
  for (var jira = 0; jira < josabeth.length; jira++) {
    draw_transition(josabeth[jira], SPRITE.ALOE_VERA);
  }
  var josabeth = world.units[ITEMS.ALOE_VERA_SEED];
  for (var jira = 0; jira < josabeth.length; jira++) {
    if ((josabeth[jira].info & 15) !== 0 && josabeth[jira].info !== 10) {
      draw_transition(josabeth[jira]);
    }
  }
  var joyl = world.units[ITEMS.TOMATO_SEED];
  for (var jira = 0; jira < joyl.length; jira++) {
    draw_fg_transition(joyl[jira]);
  }
  var ayari = world.units[ITEMS.GARLIC_SEED];
  for (var jira = 0; jira < ayari.length; jira++) {
    if ((ayari[jira].info & 15) !== 0 && ayari[jira].info !== 10) {
      draw_transition(ayari[jira]);
    }
  }
  var esthermae = world.units[ITEMS.THORNBUSH_SEED];
  for (var jira = 0; jira < esthermae.length; jira++) {
    if ((esthermae[jira].info & 15) !== 0 && esthermae[jira].info !== 10) {
      draw_transition(esthermae[jira]);
    }
  }
  var jeleesa = world.units[ITEMS.PUMPKIN_SEED];
  for (var jira = 0; jira < jeleesa.length; jira++) {
    if ((jeleesa[jira].info & 15) !== 0 && jeleesa[jira].info !== 10) {
      draw_transition(jeleesa[jira]);
    }
  }
  var uwase = world.units[ITEMS.TREASURE_CHEST];
  for (var jira = 0; jira < uwase.length; jira++) {
    draw_transition(uwase[jira], SPRITE.TREASURE_CHEST, SPRITE.HURT_TREASURE_CHEST);
  }
  var betzalel = world.units[ITEMS.KRAKEN];
  for (var jira = 0; jira < betzalel.length; jira++) {
    draw_transition(betzalel[jira], SPRITE.KRAKEN, SPRITE.HURT_KRAKEN);
  }
  var nataiya = world.units[ITEMS.PIRANHA];
  for (var jira = 0; jira < nataiya.length; jira++) {
    draw_transition(nataiya[jira], SPRITE.PIRANHA, SPRITE.HURT_PIRANHA);
  }
  var annarosa = world.units[ITEMS.SPIDER];
  for (var jira = 0; jira < annarosa.length; jira++) {
    draw_transition(annarosa[jira], SPRITE.SPIDER, SPRITE.HURT_SPIDER);
  }
  var chanoa = world.units[ITEMS.PENGUIN];
  for (var jira = 0; jira < chanoa.length; jira++) {
    draw_transition(chanoa[jira], SPRITE.PENGUIN, SPRITE.HURT_PENGUIN);
  }
  var nidhish = world.units[ITEMS.BEAR];
  for (var jira = 0; jira < nidhish.length; jira++) {
    draw_transition(nidhish[jira], SPRITE.BEAR, SPRITE.HURT_BEAR);
  }
  var ciboney = world.units[ITEMS.BABY_MAMMOTH];
  for (var jira = 0; jira < ciboney.length; jira++) {
    draw_transition(ciboney[jira]);
  }
  var tawyna = world.units[ITEMS.FLAME];
  for (var jira = 0; jira < tawyna.length; jira++) {
    draw_transition(tawyna[jira], SPRITE.FIRE_MOB, SPRITE.HURT_FIRE_MOB);
  }
  var auberon = world.units[ITEMS.CRAB_BOSS];
  for (var jira = 0; jira < auberon.length; jira++) {
    draw_transition(auberon[jira]);
  }
  var valdir = world.units[ITEMS.MAMMOTH];
  for (var jira = 0; jira < valdir.length; jira++) {
    draw_transition(valdir[jira], SPRITE.MAMMOTH, SPRITE.HURT_MAMMOTH);
  }
  var mahd = world.units[ITEMS.DRAGON];
  for (var jira = 0; jira < mahd.length; jira++) {
    if (mahd[jira].scale === 1) {
      draw_transition(mahd[jira], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
    }
  }
  var mahd = world.units[ITEMS.LAVA_DRAGON];
  for (var jira = 0; jira < mahd.length; jira++) {
    if (mahd[jira].scale === 1) {
      draw_transition(mahd[jira], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
    }
  }
  var dajza = world.units[ITEMS.CHEST];
  for (var jira = 0; jira < dajza.length; jira++) {
    draw_transition(dajza[jira]);
  }
  var conleigh = world.units[ITEMS.WORKBENCH];
  for (var jira = 0; jira < conleigh.length; jira++) {
    draw_transition(conleigh[jira], SPRITE.WORKBENCH);
  }
  var maricar = world.units[ITEMS.FURNACE];
  for (var jira = 0; jira < maricar.length; jira++) {
    draw_transition(maricar[jira]);
  }
  var magabi = world.units[ITEMS.BREAD_OVEN];
  for (var jira = 0; jira < magabi.length; jira++) {
    draw_transition(magabi[jira]);
  }
  var vetri = world.units[ITEMS.WOOD_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.DOOR_WOOD_CLOSE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.STONE_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.DOOR_STONE_CLOSE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.GOLD_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.DOOR_GOLD_CLOSE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.DIAMOND_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.DOOR_DIAMOND_CLOSE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.AMETHYST_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.DOOR_AMETHYST_CLOSE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.REIDITE_DOOR];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.REIDITE_DOOR);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.WOOD_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.WOOD_DOOR_SPIKE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.STONE_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.STONE_DOOR_SPIKE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.GOLD_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.GOLD_DOOR_SPIKE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.DIAMOND_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.DIAMOND_DOOR_SPIKE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.AMETHYST_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.AMETHYST_DOOR_SPIKE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var vetri = world.units[ITEMS.REIDITE_DOOR_SPIKE];
  for (var jira = 0; jira < vetri.length; jira++) {
    if (!(vetri[jira].info & 1)) {
      draw_transition(vetri[jira], SPRITE.REIDITE_DOOR_SPIKE);
    }
    vetri[jira].draw_life(vetri[jira].info >> 1);
  }
  var lameca = world.units[ITEMS.WALL];
  for (var jira = 0; jira < lameca.length; jira++) {
    draw_transition(lameca[jira], SPRITE.WALL);
    lameca[jira].draw_life(lameca[jira].info);
  }
  var lameca = world.units[ITEMS.STONE_WALL];
  for (var jira = 0; jira < lameca.length; jira++) {
    draw_transition(lameca[jira], SPRITE.STONE_WALL);
    lameca[jira].draw_life(lameca[jira].info);
  }
  var lameca = world.units[ITEMS.GOLD_WALL];
  for (var jira = 0; jira < lameca.length; jira++) {
    draw_transition(lameca[jira], SPRITE.GOLD_WALL);
    lameca[jira].draw_life(lameca[jira].info);
  }
  var lameca = world.units[ITEMS.DIAMOND_WALL];
  for (var jira = 0; jira < lameca.length; jira++) {
    draw_transition(lameca[jira], SPRITE.DIAMOND_WALL);
    lameca[jira].draw_life(lameca[jira].info);
  }
  var lameca = world.units[ITEMS.AMETHYST_WALL];
  for (var jira = 0; jira < lameca.length; jira++) {
    draw_transition(lameca[jira], SPRITE.AMETHYST_WALL);
    lameca[jira].draw_life(lameca[jira].info);
  }
  var lameca = world.units[ITEMS.REIDITE_WALL];
  for (var jira = 0; jira < lameca.length; jira++) {
    draw_transition(lameca[jira], SPRITE.REIDITE_WALL);
    lameca[jira].draw_life(lameca[jira].info);
  }
  var hartlynn = world.units[ITEMS.SPIKE];
  for (var jira = 0; jira < hartlynn.length; jira++) {
    draw_transition(hartlynn[jira], SPRITE.SPIKE);
    hartlynn[jira].draw_life(hartlynn[jira].info);
  }
  var hartlynn = world.units[ITEMS.STONE_SPIKE];
  for (var jira = 0; jira < hartlynn.length; jira++) {
    draw_transition(hartlynn[jira], SPRITE.STONE_SPIKE);
    hartlynn[jira].draw_life(hartlynn[jira].info);
  }
  var hartlynn = world.units[ITEMS.GOLD_SPIKE];
  for (var jira = 0; jira < hartlynn.length; jira++) {
    draw_transition(hartlynn[jira], SPRITE.GOLD_SPIKE);
    hartlynn[jira].draw_life(hartlynn[jira].info);
  }
  var hartlynn = world.units[ITEMS.DIAMOND_SPIKE];
  for (var jira = 0; jira < hartlynn.length; jira++) {
    draw_transition(hartlynn[jira], SPRITE.DIAMOND_SPIKE);
    hartlynn[jira].draw_life(hartlynn[jira].info);
  }
  var hartlynn = world.units[ITEMS.AMETHYST_SPIKE];
  for (var jira = 0; jira < hartlynn.length; jira++) {
    draw_transition(hartlynn[jira], SPRITE.AMETHYST_SPIKE);
    hartlynn[jira].draw_life(hartlynn[jira].info);
  }
  var hartlynn = world.units[ITEMS.REIDITE_SPIKE];
  for (var jira = 0; jira < hartlynn.length; jira++) {
    draw_transition(hartlynn[jira], SPRITE.REIDITE_SPIKE);
    hartlynn[jira].draw_life(hartlynn[jira].info);
  }
  var tareek = world.units[ITEMS.WELL];
  for (var jira = 0; jira < tareek.length; jira++) {
    var raschell = tareek[jira];
    if (raschell.info > 0) {
      draw_transition(raschell, SPRITE.WELL_FULL);
    } else {
      draw_transition(raschell, SPRITE.WELL_EMPTY);
    }
  }
  var yuhanna = world.units[ITEMS.TOTEM];
  for (var jira = 0; jira < yuhanna.length; jira++) {
    draw_transition(yuhanna[jira], SPRITE.TOTEM);
  }
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.GOLD, "g", 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.GOLD_WINTER, "gw", 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.DIAMOND, "d", 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.DIAMOND_WINTER, "dw", 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.PLANT, "p", 0);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.EMERALD, "m", 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.AMETHYST, "a", 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.REIDITE, "re", 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.SHADOW_CAVE_STONES, "cs", 3, 3);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.SHADOW_CAVE_STONES, "cs", 2, 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.SHADOW_CAVE_STONES, "cs", 1, 1);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.SHADOW_CAVE_STONES, "cs", 0, 0);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.CAVE_STONES, "cs", 3, 3);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.CAVE_STONES, "cs", 2, 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.CAVE_STONES, "cs", 1, 1);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.CAVE_STONES, "cs", 0, 0);
  var jamiee = world.units[ITEMS.FRUIT];
  for (var jira = 0; jira < jamiee.length; jira++) {
    for (var congress = 0; congress < jamiee[jira].info; congress++) {
      draw_transition(jamiee[jira].fruits[congress], SPRITE.FRUIT);
    }
  }
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.STONES, "s", 2);
  var kiegan = world.units[ITEMS.EXTRACTOR_MACHINE_STONE];
  for (var jira = 0; jira < kiegan.length; jira++) {
    draw_transition(kiegan[jira]);
  }
  var kiegan = world.units[ITEMS.EXTRACTOR_MACHINE_GOLD];
  for (var jira = 0; jira < kiegan.length; jira++) {
    draw_transition(kiegan[jira]);
  }
  var kiegan = world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND];
  for (var jira = 0; jira < kiegan.length; jira++) {
    draw_transition(kiegan[jira]);
  }
  var kiegan = world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST];
  for (var jira = 0; jira < kiegan.length; jira++) {
    draw_transition(kiegan[jira]);
  }
  var kiegan = world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE];
  for (var jira = 0; jira < kiegan.length; jira++) {
    draw_transition(kiegan[jira]);
  }
  var montoya = world.units[ITEMS.WINDMILL];
  for (var jira = 0; jira < montoya.length; jira++) {
    draw_bg_transition(montoya[jira]);
  }
  var alcide = world.units[ITEMS.FIRE];
  for (var jira = 0; jira < alcide.length; jira++) {
    draw_fg_transition(alcide[jira]);
  }
  var alcide = world.units[ITEMS.BIG_FIRE];
  for (var jira = 0; jira < alcide.length; jira++) {
    draw_fg_transition(alcide[jira]);
  }
  var maricar = world.units[ITEMS.FURNACE];
  for (var jira = 0; jira < maricar.length; jira++) {
    if (maricar[jira].action == 2) {
      draw_fg_transition(maricar[jira]);
    }
  }
  var magabi = world.units[ITEMS.BREAD_OVEN];
  for (var jira = 0; jira < magabi.length; jira++) {
    draw_fg_transition(magabi[jira]);
  }
  var lorana = world.units[ITEMS.RESURRECTION];
  for (var jira = 0; jira < lorana.length; jira++) {
    draw_fg_transition(lorana[jira]);
  }
  var raneem = world.units[ITEMS.EMERALD_MACHINE];
  for (var jira = 0; jira < raneem.length; jira++) {
    draw_fg_transition(raneem[jira]);
    raneem[jira].draw_life(raneem[jira].info);
  }
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.CACTUS, "c", 0);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.TREE, "t", 5, 4);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.FIR, "f", 2, 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.PALM, "plm", 0, 0);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.TREE_BRANCH, "b", 3, 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.TREE, "t", 3, 2);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.TREE_BRANCH, "b", 1, 0);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.FIR, "f", 1, 1);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.PALM, "plm", 1, 1);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.TREE, "t", 1, 0);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.FIR, "f", 0, 0);
  draw_map_transition(draw_map_objects, damaiya, kumar, darena, elowen, SPRITE.PALM, "plm", 2, 2);
  var montoya = world.units[ITEMS.WINDMILL];
  for (var jira = 0; jira < montoya.length; jira++) {
    draw_fg_transition(montoya[jira]);
  }
  var kentley = world.units[ITEMS.WOOD_TOWER];
  for (var jira = 0; jira < kentley.length; jira++) {
    draw_transition(kentley[jira], SPRITE.WOOD_TOWER);
  }
  var shebria = world.units[ITEMS.PLAYERS];
  for (var jira = 0; jira < shebria.length; jira++) {
    var shelika = shebria[jira];
    if (shelika.tower === 1 && (shelika.speed < 180 || shelika.vehicle !== INV.BABY_DRAGON && shelika.vehicle !== INV.BABY_LAVA && shelika.vehicle !== INV.NIMBUS && shelika.vehicle !== INV.HAWK && shelika.vehicle !== INV.PLANE)) {
      shelika.tower_fx = Utils.lerp(shelika.tower_fx, 100, .018);
      var essica = 1 + .18 * Math.min(1, Math.max(shelika.tower_fx, 0) / 100);
      ctx.save();
      ctx.scale(essica, essica);
      user.cam.x /= essica;
      user.cam.y /= essica;
      shelika.x /= essica;
      shelika.y /= essica;
      shelika.r.x /= essica;
      shelika.r.y /= essica;
      shelika.draw_vehicle();
      shelika.draw();
      user.cam.x *= essica;
      user.cam.y *= essica;
      shelika.x *= essica;
      shelika.y *= essica;
      shelika.r.x *= essica;
      shelika.r.y *= essica;
      ctx.restore();
    }
  }
  var rudra = world.units[ITEMS.ROOF];
  for (var jira = 0; jira < rudra.length; jira++) {
    draw_transition(rudra[jira], SPRITE.ROOF);
    rudra[jira].draw_life(rudra[jira].info);
  }
  var laanthony = world.units[ITEMS.FIREFLY];
  for (var jira = 0; jira < laanthony.length; jira++) {
    draw_transition(laanthony[jira], SPRITE.FIREFLY, SPRITE.HURT_FIREFLY);
  }
  var ober = world.units[ITEMS.GARLAND];
  for (var jira = 0; jira < ober.length; jira++) {
    draw_transition(ober[jira], SPRITE.GARLAND);
  }
  var shebria = world.units[ITEMS.PLAYERS];
  for (var jira = 0; jira < shebria.length; jira++) {
    var shelika = shebria[jira];
    if ((shelika.vehicle === INV.BABY_DRAGON || shelika.vehicle === INV.BABY_LAVA || shelika.vehicle === INV.NIMBUS || shelika.vehicle === INV.HAWK || shelika.vehicle === INV.PLANE) && shelika.speed > 180) {
      shelika.fly = 1;
      ctx.save();
      var essica = 1 + .35 * Math.min(1, Math.max(shelika.vehicle_fx5 - 30, 0) / 180);
      ctx.scale(essica, essica);
      user.cam.x /= essica;
      user.cam.y /= essica;
      shelika.x /= essica;
      shelika.y /= essica;
      shelika.r.x /= essica;
      shelika.r.y /= essica;
      shelika.draw_vehicle();
      shelika.draw();
      user.cam.x *= essica;
      user.cam.y *= essica;
      shelika.x *= essica;
      shelika.y *= essica;
      shelika.r.x *= essica;
      shelika.r.y *= essica;
      ctx.restore();
    }
  }
  var lakelynn = world.units[ITEMS.SPELL];
  for (var jira = 0; jira < lakelynn.length; jira++) {
    if (lakelynn[jira].fly === 1) {
      draw_transition(lakelynn[jira]);
    }
  }
  var mahd = world.units[ITEMS.DRAGON];
  for (var jira = 0; jira < mahd.length; jira++) {
    if (mahd[jira].scale > 1) {
      draw_transition(mahd[jira], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
    }
  }
  var mahd = world.units[ITEMS.LAVA_DRAGON];
  for (var jira = 0; jira < mahd.length; jira++) {
    if (mahd[jira].scale > 1) {
      draw_transition(mahd[jira], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
    }
  }
  var shauneen = world.units[ITEMS.HAWK];
  for (var jira = 0; jira < shauneen.length; jira++) {
    draw_transition(shauneen[jira], SPRITE.HAWK, SPRITE.HURT_HAWK);
  }
  var senoria = world.units[ITEMS.VULTURE];
  for (var jira = 0; jira < senoria.length; jira++) {
    draw_transition(senoria[jira], SPRITE.VULTURE, SPRITE.HURT_VULTURE);
  }
  __effect += delta * 15;
  if (__effect > 60) {
    __effect -= 60;
  }
  draw_map_transition(draw_objects_effect, damaiya, kumar, darena, elowen, SPRITE.FOG, "fo", 2);
  draw_map_transition(draw_objects_effect, damaiya, kumar, darena, elowen, SPRITE.FOD, "fod", 2);
}
function draw_bg_transition(kianny, emmabeth) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    kianny.draw_bg(emmabeth);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    kianny.draw_bg(emmabeth);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    kianny.draw_bg(emmabeth);
  }
}
function draw_fg_transition(williem, dashauna) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    williem.draw_fg(dashauna);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    williem.draw_fg(dashauna);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    williem.draw_fg(dashauna);
  }
}
function draw_image_transition_2(jovantae, zevi, breniyah, fadumo, jaudiel) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[jovantae][zevi][world.time], fadumo, jaudiel);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[jovantae][zevi][world.time], fadumo, jaudiel);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, breniyah, fadumo, jaudiel);
  }
}
function draw_image_transition(cirenia, shulem, catoya, crete) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[cirenia][world.time], catoya, crete);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[cirenia][world.time], catoya, crete);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, shulem, catoya, crete);
  }
}
function draw_image_transition_hd_2(mckynlei, haskel, kamella, isaiha, siul) {
  var kermina = kamella.width;
  var dhruvi = kamella.height;
  var conley = Math.floor(kermina / 2);
  var luisgabriel = Math.floor(dhruvi / 2);
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[mckynlei][haskel][world.time], 0, 0, kermina, dhruvi, isaiha, siul, conley, luisgabriel);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[mckynlei][haskel][world.time], 0, 0, kermina, dhruvi, isaiha, siul, conley, luisgabriel);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, sprite[mckynlei][haskel][world.time], 0, 0, kermina, dhruvi, isaiha, siul, conley, luisgabriel);
  }
}
function draw_image_transition_hd(lamiek, marti, deyon, brierra) {
  var caci = marti.width;
  var melonie = marti.height;
  var delno = Math.floor(caci / 2);
  var emeilia = Math.floor(melonie / 2);
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[lamiek][world.time], 0, 0, caci, melonie, deyon, brierra, delno, emeilia);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[lamiek][world.time], 0, 0, caci, melonie, deyon, brierra, delno, emeilia);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, marti, 0, 0, caci, melonie, deyon, brierra, delno, emeilia);
  }
}
function draw_swim(hinano) {
  ctx.globalAlpha = hinano.alpha;
  circle(ctx, hinano.x + user.cam.x, hinano.y + user.cam.y, hinano.r);
  fill_path(ctx, SPRITE.SWIM_COLOR[world.time]);
  ctx.globalAlpha = 1;
}
function draw_foot(breyonce) {
  ctx.save();
  ctx.translate(user.cam.x + breyonce.x, user.cam.y + breyonce.y);
  ctx.rotate(breyonce.angle);
  ctx.globalAlpha = breyonce.alpha;
  var tryton = sprite[breyonce.id][world.time];
  ctxDrawImage(ctx, tryton, -tryton.width / 2, -tryton.height / 2);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_imgs_transition(vanesa, therasa, arceli, sharmine, lauramae) {
  if (world.transition && lauramae == 1) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[vanesa][world.time][therasa], arceli, sharmine);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[vanesa][world.time][therasa], arceli, sharmine);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctx.globalAlpha = lauramae;
    ctxDrawImage(ctx, sprite[vanesa][world.time][therasa], arceli, sharmine);
    ctx.globalAlpha = 1;
  }
}
function draw_transition(vahn, arfa, jefferi) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    vahn.draw(arfa, jefferi);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    vahn.draw(arfa, jefferi);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    vahn.draw(arfa, jefferi);
  }
}
function draw_map_transition(jensi, yerin, brianah, cray, kaylahni, tyker, jazlina, ladana, kyerra, lauriana) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    jensi(yerin, brianah, cray, kaylahni, tyker, jazlina, ladana, kyerra, lauriana);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    jensi(yerin, brianah, cray, kaylahni, tyker, jazlina, ladana, kyerra, lauriana);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    jensi(yerin, brianah, cray, kaylahni, tyker, jazlina, ladana, kyerra, lauriana);
  }
}
function get_color_transition(habeeba, emalyne, lene, thorin, pazong, janiyaa, mayaar) {
  var vichelle = "#";
  var aaiyana = Math.floor(thorin * mayaar + (1 - mayaar) * habeeba);
  vichelle += aaiyana < 16 ? "0" + aaiyana.toString(16) : aaiyana.toString(16);
  var aaiyana = Math.floor(pazong * mayaar + (1 - mayaar) * emalyne);
  vichelle += aaiyana < 16 ? "0" + aaiyana.toString(16) : aaiyana.toString(16);
  var aaiyana = Math.floor(janiyaa * mayaar + (1 - mayaar) * lene);
  vichelle += aaiyana < 16 ? "0" + aaiyana.toString(16) : aaiyana.toString(16);
  return vichelle;
}
function draw_simple_ground() {
  if (world.transition) {
    var mell = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(4, 43, 48, 19, 58, 43, mell);
  } else {
    ctx.fillStyle = SPRITE.GROUND[world.time];
  }
  ctx.fillRect(0, 0, canw, canh);
}
function draw_ground() {
  for (var housten = world.biomes.length - 1; housten >= 0; housten--) {
    var meshalia = world.biomes[housten];
    if (meshalia.t === world.BIOME_SEA) {
      var sein = world.BIOME[meshalia.t];
      if (-user.cam.x >= meshalia.x1 - 230 - canw && -user.cam.x <= meshalia.x2 + 330 && -user.cam.y >= meshalia.y1 - canh && -user.cam.y <= meshalia.y2 + 100) {
        var alhassane = meshalia.x2;
        if (meshalia.t !== world.BIOME_SEA) {
          alhassane -= 610;
        }
        var kendrie = meshalia.x1;
        if (meshalia.t !== world.BIOME_SEA) {
          kendrie += 610;
        }
        var ruchita = meshalia.y2;
        if (meshalia.t !== world.BIOME_SEA) {
          ruchita -= 610;
        }
        var zoeiy = meshalia.y1;
        if (meshalia.t !== world.BIOME_SEA) {
          zoeiy += 610;
        }
        if (world.transition) {
          var leonord = world.time ? 1 - world.shade.v : world.shade.v;
          ctx.fillStyle = get_color_transition(sein.night[0], sein.night[1], sein.night[2], sein.day[0], sein.day[1], sein.day[1], leonord);
        } else {
          ctx.fillStyle = sein._color[world.time];
        }
        var trevelyan = Math.max(user.cam.x + kendrie - 2 - 230, 0);
        var lando = Math.max(-user.cam.x + canw - alhassane - 330 - 2, 0);
        var travoris = Math.max(user.cam.y + zoeiy - 2, 0);
        var elzy = Math.max(-user.cam.y + canh - ruchita - 100 - 2, 0);
        ctx.beginPath();
        ctx.fillRect(trevelyan, travoris, canw - lando - trevelyan, canh - travoris - elzy);
      }
    }
  }
  for (var housten = world.biomes.length - 1; housten >= 0; housten--) {
    var meshalia = world.biomes[housten];
    if (meshalia.t !== world.BIOME_SEA) {
      var alhassane = meshalia.x2;
      if (meshalia.t !== world.BIOME_SEA) {
        alhassane -= 400;
      }
      var kendrie = meshalia.x1;
      if (meshalia.t !== world.BIOME_SEA) {
        kendrie += 400;
      }
      var ruchita = meshalia.y2;
      if (meshalia.t !== world.BIOME_SEA) {
        ruchita -= 300;
      }
      var zoeiy = meshalia.y1;
      if (meshalia.t !== world.BIOME_SEA) {
        zoeiy += 300;
      }
      ;
      (meshalia.v & WORLD.RIGHT) === 0 && -user.cam.x >= alhassane - canw + 120 && -user.cam.x <= alhassane + 820 && -user.cam.y >= zoeiy + 88 - canh && -user.cam.y <= ruchita + 50 && (draw_beach_sand_right(alhassane, zoeiy + 88, ruchita - 88, user.beach[0], world.BIOME[meshalia.t], meshalia.v & WORLD.RIGHT), draw_beach_right(alhassane, zoeiy + 88, ruchita - 88, user.beach[0], world.BIOME[meshalia.t], meshalia.v & WORLD.RIGHT));
      (meshalia.v & WORLD.LEFT) === 0 && -user.cam.x >= kendrie - canw - 700 && -user.cam.x <= kendrie - 20 && -user.cam.y >= zoeiy + 88 - canh && -user.cam.y <= ruchita + 50 && (draw_beach_sand_left(kendrie, zoeiy + 88, ruchita - 88, user.beach[1], world.BIOME[meshalia.t], meshalia.v & WORLD.LEFT), draw_beach_left(kendrie, zoeiy + 88, ruchita - 88, user.beach[1], world.BIOME[meshalia.t], meshalia.v & WORLD.LEFT));
      (meshalia.v & WORLD.BOTTOM) === 0 && -user.cam.x >= kendrie - 235 - canw && -user.cam.x <= alhassane + 350 && -user.cam.y >= ruchita - canh - 275 && -user.cam.y <= ruchita + 490 && (draw_beach_sand_bottom(ruchita - 230, kendrie - 230, alhassane + 230, user.beach[2], world.BIOME[meshalia.t], meshalia.v & WORLD.BOTTOM), draw_beach_bottom(ruchita - 230, kendrie - 230, alhassane + 230, user.beach[2], world.BIOME[meshalia.t], meshalia.v & WORLD.BOTTOM));
      (meshalia.v & WORLD.TOP) === 0 && -user.cam.x >= kendrie - 235 - canw && -user.cam.x <= alhassane + 350 && -user.cam.y >= zoeiy - canh - 390 && -user.cam.y <= zoeiy + 315 && (draw_beach_sand_top(zoeiy + 310, kendrie - 230, alhassane + 230, user.beach[3], world.BIOME[meshalia.t], meshalia.v & WORLD.TOP), draw_beach_top(zoeiy + 310, kendrie - 230, alhassane + 230, user.beach[3], world.BIOME[meshalia.t], meshalia.v & WORLD.TOP));
    }
  }
  for (var housten = world.biomes.length - 1; housten >= 0; housten--) {
    var meshalia = world.biomes[housten];
    if (meshalia.t !== world.BIOME_SEA) {
      var alhassane = meshalia.x2;
      if (meshalia.t !== world.BIOME_SEA) {
        alhassane -= 400;
      }
      var kendrie = meshalia.x1;
      if (meshalia.t !== world.BIOME_SEA) {
        kendrie += 400;
      }
      var ruchita = meshalia.y2;
      if (meshalia.t !== world.BIOME_SEA) {
        ruchita -= 300;
      }
      var zoeiy = meshalia.y1;
      if (meshalia.t !== world.BIOME_SEA) {
        zoeiy += 300;
      }
      ;
      (meshalia.v & WORLD.RIGHT) !== 0 && -user.cam.x >= alhassane - canw + 120 && -user.cam.x <= alhassane + 820 && -user.cam.y >= zoeiy + 88 - canh && -user.cam.y <= ruchita + 50 && draw_beach_sand_right(alhassane, zoeiy + 88, ruchita - 88, user.beach[0], world.BIOME[meshalia.t], meshalia.v & WORLD.RIGHT);
      (meshalia.v & WORLD.LEFT) !== 0 && -user.cam.x >= kendrie - canw - 700 && -user.cam.x <= kendrie - 20 && -user.cam.y >= zoeiy + 88 - canh && -user.cam.y <= ruchita + 50 && draw_beach_sand_left(kendrie, zoeiy + 88, ruchita - 88, user.beach[1], world.BIOME[meshalia.t], meshalia.v & WORLD.LEFT);
      (meshalia.v & WORLD.BOTTOM) !== 0 && -user.cam.x >= kendrie - 235 - canw && -user.cam.x <= alhassane + 350 && -user.cam.y >= ruchita - canh - 275 && -user.cam.y <= ruchita + 490 && draw_beach_sand_bottom(ruchita - 230, kendrie - 230, alhassane + 230, user.beach[2], world.BIOME[meshalia.t], meshalia.v & WORLD.BOTTOM);
      (meshalia.v & WORLD.TOP) !== 0 && -user.cam.x >= kendrie - 235 - canw && -user.cam.x <= alhassane + 350 && -user.cam.y >= zoeiy - canh - 390 && -user.cam.y <= zoeiy + 315 && draw_beach_sand_top(zoeiy + 310, kendrie - 230, alhassane + 230, user.beach[3], world.BIOME[meshalia.t], meshalia.v & WORLD.TOP);
    }
  }
  for (var housten = world.biomes.length - 1; housten >= 0; housten--) {
    var meshalia = world.biomes[housten];
    if (meshalia.t !== world.BIOME_SEA) {
      var sein = world.BIOME[meshalia.t];
      if (-user.cam.x >= meshalia.x1 - 230 - canw && -user.cam.x <= meshalia.x2 + 330 && -user.cam.y >= meshalia.y1 - canh && -user.cam.y <= meshalia.y2 + 100) {
        var alhassane = meshalia.x2;
        if (meshalia.t !== world.BIOME_SEA) {
          if ((meshalia.v & WORLD.RIGHT) === 0) {
            alhassane -= 414;
          } else {
            alhassane -= 610;
          }
        }
        var kendrie = meshalia.x1;
        if (meshalia.t !== world.BIOME_SEA) {
          if ((meshalia.v & WORLD.LEFT) === 0) {
            kendrie += 414;
          } else {
            kendrie += 610;
          }
        }
        var ruchita = meshalia.y2;
        if (meshalia.t !== world.BIOME_SEA) {
          if ((meshalia.v & WORLD.BOTTOM) === 0) {
            ruchita -= 414;
          } else {
            ruchita -= 610;
          }
        }
        var zoeiy = meshalia.y1;
        if (meshalia.t !== world.BIOME_SEA) {
          if ((meshalia.v & WORLD.TOP) === 0) {
            zoeiy += 414;
          } else {
            zoeiy += 610;
          }
        }
        if (world.transition) {
          var leonord = world.time ? 1 - world.shade.v : world.shade.v;
          ctx.fillStyle = get_color_transition(sein.night[0], sein.night[1], sein.night[2], sein.day[0], sein.day[1], sein.day[2], leonord);
        } else {
          ctx.fillStyle = sein._color[world.time];
        }
        var trevelyan = Math.max(user.cam.x + kendrie - 2 - 230, 0);
        var lando = Math.max(-user.cam.x + canw - alhassane - 330 - 2, 0);
        var travoris = Math.max(user.cam.y + zoeiy - 2, 0);
        var elzy = Math.max(-user.cam.y + canh - ruchita - 100 - 2, 0);
        ctx.beginPath();
        ctx.fillRect(trevelyan, travoris, canw - lando - trevelyan, canh - travoris - elzy);
      }
    }
  }
  ui.quality && (draw_map_transition(draw_breath_objects, _is, _ie, _js, _je, SPRITE.WAVE_TWO, "isl", 2), draw_map_transition(draw_breath_objects, _is, _ie, _js, _je, SPRITE.WAVE_ONE, "isl", 2));
  draw_map_transition(draw_map_objects, _is, _ie, _js, _je, SPRITE.ISLAND, "isl", 2);
  if (ui.quality) {
    draw_map_transition(draw_map_decorations, _is, _ie, _js, _je, SPRITE.DECORATION, "de");
  }
  var pariss = world.units[ITEMS.PLAYERS];
  for (var housten = 0; housten < pariss.length; housten++) {
    var kyrie = pariss[housten];
    for (var keriyah = 0; keriyah < kyrie.foot.length; keriyah++) {
      draw_foot(kyrie.foot[keriyah]);
    }
  }
  __wave += delta * 40;
  if (__wave > 60) {
    __wave -= 60;
  }
  draw_map_transition(draw_river_tile, _is, _ie, _js, _je, SPRITE.RIVER, "r", 0);
  for (var housten = 0; housten < world.biomes.length; housten++) {
    var meshalia = world.biomes[housten];
    if (meshalia.t !== world.BIOME_SEA) {
      var alhassane = meshalia.x2;
      if (meshalia.t !== world.BIOME_SEA) {
        alhassane -= 400;
      }
      var kendrie = meshalia.x1;
      if (meshalia.t !== world.BIOME_SEA) {
        kendrie += 400;
      }
      var ruchita = meshalia.y2;
      if (meshalia.t !== world.BIOME_SEA) {
        ruchita -= 300;
      }
      var zoeiy = meshalia.y1;
      if (meshalia.t !== world.BIOME_SEA) {
        zoeiy += 300;
      }
      if ((meshalia.v & WORLD.RIGHT) > 0 && -user.cam.x >= alhassane - canw + 120 && -user.cam.x <= alhassane + 820 && -user.cam.y >= zoeiy + 88 - canh && -user.cam.y <= ruchita + 50) {
        draw_beach_right(alhassane, zoeiy + 88, ruchita - 88, user.beach[0], world.BIOME[meshalia.t], meshalia.v & WORLD.RIGHT);
      }
      if ((meshalia.v & WORLD.LEFT) > 0 && -user.cam.x >= kendrie - canw - 700 && -user.cam.x <= kendrie - 20 && -user.cam.y >= zoeiy + 88 - canh && -user.cam.y <= ruchita + 50) {
        draw_beach_left(kendrie, zoeiy + 88, ruchita - 88, user.beach[1], world.BIOME[meshalia.t], meshalia.v & WORLD.LEFT);
      }
      if ((meshalia.v & WORLD.BOTTOM) > 0 && -user.cam.x >= kendrie - 235 - canw && -user.cam.x <= alhassane + 350 && -user.cam.y >= ruchita - canh - 275 && -user.cam.y <= ruchita + 490) {
        draw_beach_bottom(ruchita - 230, kendrie - 230, alhassane + 230, user.beach[2], world.BIOME[meshalia.t], meshalia.v & WORLD.BOTTOM);
      }
      if ((meshalia.v & WORLD.TOP) > 0 && -user.cam.x >= kendrie - 235 - canw && -user.cam.x <= alhassane + 350 && -user.cam.y >= zoeiy - canh - 390 && -user.cam.y <= zoeiy + 315) {
        draw_beach_top(zoeiy + 310, kendrie - 230, alhassane + 230, user.beach[3], world.BIOME[meshalia.t], meshalia.v & WORLD.TOP);
      }
    }
  }
}
function draw_ash() {
  var jniya = user.ash;
  var maryann = jniya.flakes;
  for (var brenice = 0; brenice < maryann.length; brenice++) {
    var lynsay = maryann[brenice];
    jniya.update(lynsay);
    draw_imgs_transition(SPRITE.ASHES, lynsay.id, user.cam.x + lynsay.x, user.cam.y + lynsay.y, lynsay.alpha);
  }
  for (var brenice = 0; brenice < maryann.length; brenice++) {
    var lynsay = maryann[brenice];
    if (lynsay.life <= 0 || lynsay.x > -user.cam.x + canw || lynsay.x < -user.cam.x || lynsay.y > -user.cam.y + canh) {
      maryann.splice(brenice, 1);
    }
  }
  var dolli = -user.cam.y;
  if (world.dist_lava > -1000) {
    jniya.add(dolli);
  }
}
function draw_winter() {
  var warees = user.winter;
  if (warees.tempest === 0) {
    warees.tempest_speed = Math.max(0, warees.tempest_speed - delta / 10);
  } else {
    warees.tempest_speed = Math.min(1, warees.tempest_speed + delta / 10);
  }
  var lekendric = warees.flakes;
  for (var tyke = 0; tyke < lekendric.length; tyke++) {
    var shriyaan = lekendric[tyke];
    warees.update(shriyaan);
    draw_imgs_transition(SPRITE.FLAKES, shriyaan.id, user.cam.x + shriyaan.x, user.cam.y + shriyaan.y, shriyaan.alpha);
  }
  for (var tyke = 0; tyke < lekendric.length; tyke++) {
    var shriyaan = lekendric[tyke];
    if (shriyaan.life <= 0 || shriyaan.x > -user.cam.x + canw || shriyaan.x < -user.cam.x || shriyaan.y > -user.cam.y + canh) {
      lekendric.splice(tyke, 1);
    }
  }
  var britan = -user.cam.y;
  if (world.dist_winter > -1000) {
    warees.add(britan);
  }
}
function draw_desert() {
  var terreon = user.desert;
  if (terreon.tempest === 0) {
    terreon.tempest_speed = Math.max(0, terreon.tempest_speed - delta / 10);
  } else {
    terreon.tempest_speed = Math.min(1, terreon.tempest_speed + delta / 10);
  }
  var rennae = terreon.flakes;
  for (var rilian = 0; rilian < rennae.length; rilian++) {
    var shureka = rennae[rilian];
    terreon.update(shureka);
    draw_imgs_transition(SPRITE.DESERT, shureka.id, user.cam.x + shureka.x, user.cam.y + shureka.y, shureka.alpha);
  }
  for (var rilian = 0; rilian < rennae.length; rilian++) {
    var shureka = rennae[rilian];
    if (shureka.life <= 0 || shureka.x > -user.cam.x + canw || shureka.x < -user.cam.x - user.cam.w / 2 || shureka.y > -user.cam.y + canh) {
      rennae.splice(rilian, 1);
    }
  }
  var tirah = -user.cam.y;
  if (world.dist_desert > -1000) {
    terreon.add(tirah);
  }
}
function draw_beach_sand_left(analis, mireyda, amarr, eziyah, miccah, nyemiah) {
  var brettnie = eziyah.w1;
  var skylei = eziyah.w2;
  var curtina = eziyah.w3;
  var sharissa = user.cam.x + analis - 700;
  var nahuel = Math.max(user.cam.y + mireyda, 0);
  var moniquie = Math.max(-user.cam.y + canh - amarr - 100, 0);
  var yoshikatsu = nahuel;
  var neer = canh - nahuel - moniquie;
  if (nyemiah) {
    var zuriela = eziyah.t(brettnie).x;
  } else {
    var zuriela = brettnie.r.x;
  }
  var eiichi = sharissa + WORLD.LW1SX;
  var dandria = eiichi, quinnten = yoshikatsu, aqil = zuriela + WORLD.W1SX, jaream = neer;
  eiichi += zuriela + WORLD.W1SX - 2;
  var janayah = eiichi;
  if (nyemiah) {
    var zuriela = eziyah.t(skylei).x;
  } else {
    var zuriela = skylei.r.x;
  }
  var lawanda = sharissa + WORLD.LW2SX - eiichi + zuriela;
  var jawane = eiichi, nikeia = yoshikatsu, manahil = lawanda, daveena = neer;
  eiichi += lawanda - 2;
  var pennylane = eiichi - 2;
  if (nyemiah) {
    var zuriela = eziyah.t(curtina).x;
  } else {
    var zuriela = curtina.r.x;
  }
  lawanda = sharissa + WORLD.LW3SX - eiichi + zuriela;
  if (pennylane < eiichi + lawanda - 3) {
    var myshell = true, montego = eiichi, abdinajib = yoshikatsu, murtis = lawanda, abin = neer;
    eiichi += lawanda - 2;
    var permelia = eiichi;
  } else {
    var myshell = false;
    eiichi = pennylane;
    var permelia = -1;
  }
  lawanda = sharissa + WORLD.LSANDX - eiichi;
  if (nyemiah > 0 && miccah.isSand === 1) {
    if (world.transition) {
      var shir = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, shir);
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(eiichi, yoshikatsu, lawanda, neer);
  } else {
    if (world.transition) {
      var shir = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(miccah.night[0], miccah.night[1], miccah.night[2], miccah.day[0], miccah.day[1], miccah.day[2], shir);
    } else {
      ctx.fillStyle = miccah._color[world.time];
    }
    ctx.fillRect(eiichi, yoshikatsu, lawanda, neer);
  }
}
function draw_beach_left(khanya, nechelle, ziniyah, voshon, christyle, bradi) {
  var ivel = voshon.w1;
  var michaelray = voshon.w2;
  var montgomery = voshon.w3;
  var tenor = user.cam.x + khanya - 700;
  var brendalee = Math.max(user.cam.y + nechelle, 0);
  var diyana = Math.max(-user.cam.y + canh - ziniyah - 100, 0);
  var donnetta = brendalee;
  var kijafa = canh - brendalee - diyana;
  if (bradi) {
    var annastin = voshon.t(ivel);
  } else {
    var annastin = ivel.r;
  }
  var dylanmichael = tenor + WORLD.LW1SX;
  var jazhiel = dylanmichael, lasaunda = donnetta, nalyjah = annastin.x + WORLD.W1SX, kerra = kijafa;
  dylanmichael += annastin.x + WORLD.W1SX - 2;
  var semaiah = dylanmichael;
  if (bradi) {
    var annastin = voshon.t(michaelray);
  } else {
    var annastin = michaelray.r;
  }
  var raegene = tenor + WORLD.LW2SX - dylanmichael + annastin.x;
  var guinda = dylanmichael, eastynn = donnetta, falba = raegene, alsace = kijafa;
  dylanmichael += raegene - 2;
  var aristeo = dylanmichael - 2;
  if (bradi) {
    var annastin = voshon.t(montgomery);
  } else {
    var annastin = montgomery.r;
  }
  raegene = tenor + WORLD.LW3SX - dylanmichael + annastin.x;
  if (aristeo < dylanmichael + raegene - 3) {
    var ikhlas = true, flavian = dylanmichael, donaciano = donnetta, azaelea = raegene, kessandra = kijafa;
    dylanmichael += raegene - 2;
    var armelda = dylanmichael;
  } else {
    var ikhlas = false;
    dylanmichael = aristeo;
    var armelda = -1;
  }
  raegene = tenor + WORLD.LSANDX - dylanmichael;
  if (world.transition) {
    var jaada = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, jaada);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(jazhiel, lasaunda, nalyjah, kerra);
  if (bradi) {
    if (world.transition) {
      var jaada = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, jaada);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else {
    if (world.transition) {
      var jaada = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, jaada);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
  }
  ctx.fillRect(guinda, eastynn, falba, alsace);
  if (ikhlas) {
    if (bradi) {
      if (world.transition) {
        var jaada = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, jaada);
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else {
      if (world.transition) {
        var jaada = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, jaada);
      } else {
        ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
      }
    }
    ctx.fillRect(flavian, donaciano, azaelea, kessandra);
  }
  if (ui.quality && bradi) {
    voshon.draw_foams_left(aristeo, armelda, semaiah, tenor, -user.cam.y + lasaunda, -user.cam.y + lasaunda + kerra);
  }
}
function draw_beach_sand_top(sylena, gilman, dakya, deidria, jeren, calisse) {
  var guynell = deidria.w1;
  var tatiania = deidria.w2;
  var cotenia = deidria.w3;
  var marvion = user.cam.y + sylena - 700;
  var mailynn = Math.max(user.cam.x + gilman, 0);
  var larez = Math.max(-user.cam.x + canw - dakya - 100, 0);
  var daryal = mailynn;
  var becklee = canw - mailynn - larez;
  if (calisse) {
    var eyvonne = deidria.t(guynell).x;
  } else {
    var eyvonne = guynell.r.x;
  }
  var makaylynn = marvion + WORLD.LW1SX;
  var jomar = daryal, kashiya = makaylynn, kapria = eyvonne + WORLD.W1SX, stefie = becklee;
  makaylynn += eyvonne + WORLD.W1SX - 2;
  var xithlaly = makaylynn;
  if (calisse) {
    var eyvonne = deidria.t(tatiania).x;
  } else {
    var eyvonne = tatiania.r.x;
  }
  var keley = marvion + WORLD.LW2SX - makaylynn + eyvonne;
  var timberland = makaylynn, arlandus = daryal, hau = keley, granite = becklee;
  makaylynn += keley - 2;
  var caleen = makaylynn - 2;
  if (calisse) {
    var eyvonne = deidria.t(cotenia).x;
  } else {
    var eyvonne = cotenia.r.x;
  }
  keley = marvion + WORLD.LW3SX - makaylynn + eyvonne;
  if (caleen < makaylynn + keley - 3) {
    var barlow = true, ezell = makaylynn, miladeen = daryal, rianna = keley, tammia = becklee;
    makaylynn += keley - 2;
    var malikhi = makaylynn;
  } else {
    var barlow = false;
    makaylynn = caleen;
    var malikhi = -1;
  }
  keley = marvion + WORLD.LSANDX - makaylynn;
  if (calisse > 0 && jeren.isSand === 1) {
    if (world.transition) {
      var shaniki = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, shaniki);
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(daryal, makaylynn, becklee, keley);
  } else {
    if (world.transition) {
      var shaniki = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(jeren.night[0], jeren.night[1], jeren.night[2], jeren.day[0], jeren.day[1], jeren.day[2], shaniki);
    } else {
      ctx.fillStyle = jeren._color[world.time];
    }
    ctx.fillRect(daryal, makaylynn, becklee, keley);
  }
}
function draw_beach_top(bryson, kaleesia, jeraldi, sophiaanne, genet, presly) {
  var trevohn = sophiaanne.w1;
  var hazelynn = sophiaanne.w2;
  var montra = sophiaanne.w3;
  var marreco = user.cam.y + bryson - 700;
  var malyia = Math.max(user.cam.x + kaleesia, 0);
  var corsha = Math.max(-user.cam.x + canw - jeraldi - 100, 0);
  var macin = malyia;
  var czarina = canw - malyia - corsha;
  if (presly) {
    var rodgers = sophiaanne.t(trevohn);
  } else {
    var rodgers = trevohn.r;
  }
  var keshay = marreco + WORLD.LW1SX;
  var izola = macin, jadaria = keshay, pamla = rodgers.x + WORLD.W1SX, jabarie = czarina;
  keshay += rodgers.x + WORLD.W1SX - 2;
  var amandia = keshay;
  if (presly) {
    var rodgers = sophiaanne.t(hazelynn);
  } else {
    var rodgers = hazelynn.r;
  }
  var namita = marreco + WORLD.LW2SX - keshay + rodgers.x;
  var tanishia = keshay, natelie = macin, sianna = namita, micaella = czarina;
  keshay += namita - 2;
  var ezael = keshay - 2;
  if (presly) {
    var rodgers = sophiaanne.t(montra);
  } else {
    var rodgers = montra.r;
  }
  namita = marreco + WORLD.LW3SX - keshay + rodgers.x;
  if (ezael < keshay + namita - 3) {
    var rodnika = true, crystl = keshay, quameer = macin, janyra = namita, maelo = czarina;
    keshay += namita - 2;
    var aabid = keshay;
  } else {
    var rodnika = false;
    keshay = ezael;
    var aabid = -1;
  }
  namita = marreco + WORLD.LSANDX - keshay;
  if (world.transition) {
    var anuhya = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, anuhya);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(izola, jadaria, jabarie, pamla);
  if (presly) {
    if (world.transition) {
      var anuhya = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, anuhya);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else {
    if (world.transition) {
      var anuhya = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, anuhya);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
  }
  ctx.fillRect(natelie, tanishia, micaella, sianna);
  if (rodnika) {
    if (presly) {
      if (world.transition) {
        var anuhya = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, anuhya);
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else {
      if (world.transition) {
        var anuhya = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, anuhya);
      } else {
        ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
      }
    }
    ctx.fillRect(quameer, crystl, maelo, janyra);
  }
  if (ui.quality && presly) {
    sophiaanne.draw_foams_top(ezael, aabid, amandia, marreco, -user.cam.x + izola, -user.cam.x + izola + jabarie);
  }
}
function draw_beach_sand_right(zavyer, eziquiel, tyka, gaozong, charolet, symphany) {
  var roselinda = gaozong.w1;
  var sahibdeep = gaozong.w2;
  var mandell = gaozong.w3;
  var celis = user.cam.x + zavyer + 820;
  var finneas = Math.max(user.cam.y + eziquiel, 0);
  var malquan = Math.max(-user.cam.y + canh - tyka - 100, 0);
  var trew = finneas;
  var aracelys = canh - finneas - malquan;
  if (symphany) {
    var jinu = gaozong.t(roselinda).x;
  } else {
    var jinu = roselinda.r.x;
  }
  var jevaughn = celis + WORLD.LW1SX;
  var mila = jevaughn, devontay = trew, jehieli = -jinu + WORLD.W1SX, jacquelen = aracelys;
  jevaughn += -jinu + WORLD.W1SX + 2;
  var veronda = jevaughn;
  if (symphany) {
    var jinu = gaozong.t(sahibdeep).x;
  } else {
    var jinu = sahibdeep.r.x;
  }
  var kaybri = celis - WORLD.LW2SX - jevaughn - jinu;
  var oakly = jevaughn, keeya = trew, jimeka = kaybri, steysi = aracelys;
  jevaughn += kaybri + 2;
  var yenisel = jevaughn - 2;
  if (symphany) {
    var jinu = gaozong.t(mandell).x;
  } else {
    var jinu = mandell.r.x;
  }
  kaybri = celis - WORLD.LW3SX - jevaughn - jinu;
  if (yenisel > jevaughn + kaybri) {
    var amino = true, asianna = jevaughn, shirletha = trew, morisa = kaybri, lanah = aracelys;
    jevaughn += kaybri + 2;
    var derien = jevaughn;
  } else {
    var amino = false;
    jevaughn = yenisel;
    var derien = -1;
  }
  kaybri = celis - WORLD.LSANDX - jevaughn;
  if (symphany > 0 && charolet.isSand === 1) {
    if (world.transition) {
      var mea = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, mea);
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(jevaughn, trew, kaybri, aracelys);
  } else {
    if (world.transition) {
      var mea = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(charolet.night[0], charolet.night[1], charolet.night[2], charolet.day[0], charolet.day[1], charolet.day[2], mea);
    } else {
      ctx.fillStyle = charolet._color[world.time];
    }
    ctx.fillRect(jevaughn, trew, kaybri, aracelys);
  }
}
function draw_beach_right(agatha, daisya, asmaa, tynita, saayan, shreen) {
  var yarnell = tynita.w1;
  var allson = tynita.w2;
  var cheree = tynita.w3;
  var jildardo = user.cam.x + agatha + 820;
  var jamarkus = Math.max(user.cam.y + daisya, 0);
  var becci = Math.max(-user.cam.y + canh - asmaa - 100, 0);
  var shamari = jamarkus;
  var dominyk = canh - jamarkus - becci;
  if (shreen) {
    var tremaine = tynita.t(yarnell);
  } else {
    var tremaine = yarnell.r;
  }
  var jamisen = jildardo + WORLD.LW1SX;
  var kawtar = jamisen, kayelee = shamari, koleman = -tremaine.x + WORLD.W1SX, karandeep = dominyk;
  jamisen += -tremaine.x + WORLD.W1SX + 2;
  var dasianae = jamisen;
  if (shreen) {
    var tremaine = tynita.t(allson);
  } else {
    var tremaine = allson.r;
  }
  var avian = jildardo - WORLD.LW2SX - jamisen - tremaine.x;
  var jerrill = jamisen, tajiddin = shamari, anooj = avian, evaleen = dominyk;
  jamisen += avian + 2;
  var maddin = jamisen - 2;
  if (shreen) {
    var tremaine = tynita.t(cheree);
  } else {
    var tremaine = cheree.r;
  }
  avian = jildardo - WORLD.LW3SX - jamisen - tremaine.x;
  if (maddin > jamisen + avian) {
    var klariza = true, aarna = jamisen, lachone = shamari, calypso = avian, camorah = dominyk;
    jamisen += avian + 2;
    var kampton = jamisen;
  } else {
    var klariza = false;
    jamisen = maddin;
    var kampton = -1;
  }
  avian = jildardo - WORLD.LSANDX - jamisen;
  if (world.transition) {
    var laurent = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, laurent);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(kawtar, kayelee, koleman, karandeep);
  if (shreen) {
    if (world.transition) {
      var laurent = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, laurent);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else {
    if (world.transition) {
      var laurent = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, laurent);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
  }
  ctx.fillRect(jerrill, tajiddin, anooj, evaleen);
  if (klariza) {
    if (shreen) {
      if (world.transition) {
        var laurent = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, laurent);
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else {
      if (world.transition) {
        var laurent = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, laurent);
      } else {
        ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
      }
    }
    ctx.fillRect(aarna, lachone, calypso, camorah);
  }
  if (ui.quality && shreen) {
    tynita.draw_foams_right(maddin, kampton, dasianae, jildardo, -user.cam.y + kayelee, -user.cam.y + kayelee + karandeep);
  }
}
function draw_beach_sand_bottom(lamondre, tiwatope, janaisa, temir, kyja, necha) {
  var leetha = temir.w1;
  var harmanie = temir.w2;
  var coulson = temir.w3;
  var ardilia = user.cam.y + lamondre + 710;
  var raychel = Math.max(user.cam.x + tiwatope, 0);
  var tyell = Math.max(-user.cam.x + canw - janaisa - 100, 0);
  var sopia = raychel;
  var aubryella = canw - raychel - tyell;
  if (necha) {
    var lyneshia = temir.t(leetha).x;
  } else {
    var lyneshia = leetha.r.x;
  }
  var jahree = ardilia + WORLD.LW1SX;
  var avalei = jahree, phyllistine = sopia, karyana = -lyneshia + WORLD.W1SX, nate = aubryella;
  jahree += -lyneshia + WORLD.W1SX + 2;
  var kathrynanne = jahree;
  if (necha) {
    var lyneshia = temir.t(harmanie).x;
  } else {
    var lyneshia = harmanie.r.x;
  }
  var karaya = ardilia - WORLD.LW2SX - jahree - lyneshia;
  var skylee = jahree, ehsaan = sopia, cindya = karaya, joshuajames = aubryella;
  jahree += karaya + 2;
  var emerine = jahree - 2;
  if (necha) {
    var lyneshia = temir.t(coulson).x;
  } else {
    var lyneshia = coulson.r.x;
  }
  karaya = ardilia - WORLD.LW3SX - jahree - lyneshia;
  if (emerine > jahree + karaya) {
    var michaelynn = true, nishanth = jahree, zailon = sopia, haiven = karaya, yuktha = aubryella;
    jahree += karaya + 2;
    var cotie = jahree;
  } else {
    var michaelynn = false;
    jahree = emerine;
    var cotie = -1;
  }
  karaya = ardilia - WORLD.LSANDX - jahree;
  if (necha > 0 && kyja.isSand === 1) {
    if (world.transition) {
      var jatonya = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, jatonya);
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(sopia, jahree, aubryella, karaya);
  } else {
    if (world.transition) {
      var jatonya = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(kyja.night[0], kyja.night[1], kyja.night[2], kyja.day[0], kyja.day[1], kyja.day[2], jatonya);
    } else {
      ctx.fillStyle = kyja._color[world.time];
    }
    ctx.fillRect(sopia, jahree, aubryella, karaya);
  }
}
function draw_beach_bottom(wandalene, zenaido, milez, ashyia, omir, markki) {
  var lamel = ashyia.w1;
  var luecille = ashyia.w2;
  var macalister = ashyia.w3;
  var ulys = user.cam.y + wandalene + 710;
  var cloud = Math.max(user.cam.x + zenaido, 0);
  var zimya = Math.max(-user.cam.x + canw - milez - 100, 0);
  var genvieve = cloud;
  var miichael = canw - cloud - zimya;
  if (markki) {
    var aleshanee = ashyia.t(lamel);
  } else {
    var aleshanee = lamel.r;
  }
  var zarwa = ulys + WORLD.LW1SX;
  var lamirah = zarwa, amysue = genvieve, fitzhugh = -aleshanee.x + WORLD.W1SX, adason = miichael;
  zarwa += -aleshanee.x + WORLD.W1SX + 2;
  var ceasare = zarwa;
  if (markki) {
    var aleshanee = ashyia.t(luecille);
  } else {
    var aleshanee = luecille.r;
  }
  var jacobthomas = ulys - WORLD.LW2SX - zarwa - aleshanee.x;
  var srisai = zarwa, jillane = genvieve, elaph = jacobthomas, lamorris = miichael;
  zarwa += jacobthomas + 2;
  var avilyn = zarwa - 2;
  if (markki) {
    var aleshanee = ashyia.t(macalister);
  } else {
    var aleshanee = macalister.r;
  }
  jacobthomas = ulys - WORLD.LW3SX - zarwa - aleshanee.x;
  if (avilyn > zarwa + jacobthomas) {
    var zahi = true, yosseline = zarwa, armanie = genvieve, melad = jacobthomas, kaylo = miichael;
    zarwa += jacobthomas + 2;
    var tanikia = zarwa;
  } else {
    var zahi = false;
    zarwa = avilyn;
    var tanikia = -1;
  }
  jacobthomas = ulys - WORLD.LSANDX - zarwa;
  if (world.transition) {
    var chairty = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, chairty);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(amysue, lamirah, adason, fitzhugh);
  if (markki) {
    if (world.transition) {
      var chairty = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, chairty);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else {
    if (world.transition) {
      var chairty = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, chairty);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
  }
  ctx.fillRect(jillane, srisai, lamorris, elaph);
  if (zahi) {
    if (markki) {
      if (world.transition) {
        var chairty = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, chairty);
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else {
      if (world.transition) {
        var chairty = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, chairty);
      } else {
        ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
      }
    }
    ctx.fillRect(armanie, yosseline, kaylo, melad);
  }
  if (ui.quality && markki) {
    ashyia.draw_foams_bottom(avilyn, tanikia, ceasare, ulys, -user.cam.x + amysue, -user.cam.x + amysue + adason);
  }
}
function draw_world_with_effect() {
  ctx.globalAlpha = 1;
  if (world.transition) {
    var alannie = world.shade.update();
  }
  world.update_dist_from_biomes(-user.cam.x, -user.cam.y);
  _js = Math.max(Math.floor(-user.cam.x / world.dw) - 5, 0);
  _je = Math.min(Math.floor((-user.cam.x + user.cam.w) / world.dw) + 4, world.nw - 1);
  _is = Math.max(Math.floor(-user.cam.y / world.dh) - 3, 0);
  _ie = Math.min(Math.floor((-user.cam.y + user.cam.h) / world.dh) + 3, world.nh - 1);
  draw_ground();
  draw_world();
  ui.quality && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR && (draw_desert(), draw_winter(), draw_ash());
  world.transition && alannie && (world.transition = false, world.shade.v = 0, world.shade.o = false);
}
var ANIMATION_STOP = 0, ANIMATION_RUN = 1, FOCUS_OUT = 0, FOCUS_IN = 1, ALIGN_CENTER = 0, ALIGN_LEFT = 1, STYLE_RETRO = 0, STYLE_FLAT = 1, KEYDOWN = 0, KEYPRESS = 1, GET_KEY_OUT = 0, GET_KEY_IN = 1, MOUSE_MOVE = 0, MOUSE_DOWN = 1, MOUSE_UP = 2, BUTTON_OUT = 0, BUTTON_IN = 1, BUTTON_CLICK = 2;
function gui_disable_antialiasing(sahara) {
  sahara.imageSmoothingEnabled = false;
  sahara.webkitImageSmoothingEnabled = false;
  sahara.mozImageSmoothingEnabled = false;
  sahara.msImageSmoothingEnabled = false;
  sahara.oImageSmoothingEnabled = false;
}
function get_mouse_pos(krystiana, durel) {
  var jemauri = krystiana.getBoundingClientRect();
  return {x: durel.clientX - jemauri.left, y: durel.clientY - jemauri.top};
}
function gui_render_text(irit, lisel, thaddea, whitton, bomani, kirtland, aaronjacob, veloria, jheremy, fury, lezah, diallo, dacorey, colum, jamaal) {
  if (irit.length === 0) {
    irit = " ";
  }
  if (aaronjacob === undefined) {
    aaronjacob = 0;
  }
  if (veloria === undefined) {
    veloria = 0;
  }
  if (jheremy === undefined) {
    jheremy = 0;
  }
  if (colum === undefined) {
    colum = 0;
  }
  var briannon = document.createElement("canvas");
  var marissia = briannon.getContext("2d");
  marissia.textBaseline = "middle";
  marissia.font = (jamaal !== undefined ? jamaal + " " : "") + whitton + "px " + lisel;
  if (bomani !== undefined) {
    bomani = Math.min(marissia.measureText(irit).width, bomani);
  } else {
    bomani = marissia.measureText(irit).width;
  }
  briannon.width = bomani + aaronjacob;
  briannon.height = whitton + veloria;
  if (kirtland !== undefined) {
    if (lezah !== undefined) {
      marissia.globalAlpha = lezah;
    }
    marissia.fillStyle = kirtland;
    if (diallo !== undefined) {
      roundRect(marissia, jheremy + 2, jheremy, bomani + aaronjacob - jheremy * 2 - 4, whitton + veloria - jheremy * 2, diallo);
      marissia.fill();
    } else {
      marissia.fillRect(jheremy, jheremy, bomani + aaronjacob - jheremy * 2, whitton + veloria - jheremy * 2);
    }
    marissia.globalAlpha = 1;
    jheremy !== 0 && (marissia.lineWidth = jheremy, marissia.strokeStyle = fury, marissia.stroke());
  }
  marissia.textBaseline = "middle";
  marissia.font = (jamaal !== undefined ? jamaal + " " : "") + whitton + "px " + lisel;
  if (dacorey !== undefined) {
    marissia.strokeStyle = dacorey;
    marissia.lineWidth = colum;
    marissia.lineJoin = "miter";
    marissia.miterLimit = 2;
    marissia.strokeText(irit, Math.floor(aaronjacob / 2), Math.floor(veloria / 2) + Math.floor(whitton / 2), bomani);
  }
  marissia.fillStyle = thaddea;
  marissia.fillText(irit, Math.floor(aaronjacob / 2), Math.floor(veloria / 2) + Math.floor(whitton / 2), bomani);
  briannon.w2 = briannon.width / 2;
  briannon.h2 = briannon.height / 2;
  return briannon;
}
function gui_create_button(jazmany, fernanda, sancho, terrall, symeon, yensid, ryelynn, khy, tyshun, tinasia, jacobee) {
  if (tyshun === undefined) {
    tyshun = 0;
  }
  if (khy === undefined) {
    khy = 0;
  }
  if (tinasia === undefined) {
    tinasia = 0;
  }
  if (jacobee === undefined) {
    jacobee = 1;
  }
  symeon = symeon === 3 ? 3 : symeon === 1 ? 2 : 1;
  if (yensid !== 1) {
    yensid = 0;
  }
  if (terrall) {
    var destinii = terrall;
  }
  var shadona = {width: jazmany, height: fernanda, img: destinii, state: BUTTON_OUT, translate: {x: khy, y: tyshun, _x: khy, _y: tyshun}, enable_breath: yensid, breath: 0, callback: ryelynn, position: tinasia, active: jacobee};
  var crucita = function (pujan) {
    var macklen = shadona.translate;
    return (shadona.width === 0 || shadona.height === 0) && (shadona.width = shadona.img[0].width, shadona.height = shadona.img[0].height), pujan.x > macklen.x && pujan.x < macklen.x + shadona.width / symeon && pujan.y > macklen.y && pujan.y < macklen.y + shadona.height / symeon;
  };
  var jahala = function (cassaundra, candies, mecca) {
    if (crucita(candies)) {
      if (mecca == MOUSE_DOWN) {
        shadona.state = BUTTON_CLICK;
      } else {
        if (mecca == MOUSE_UP) {
          shadona.state = BUTTON_IN;
        } else {
          if (mecca == MOUSE_MOVE && shadona.state != BUTTON_CLICK) {
            shadona.state = BUTTON_IN;
          }
        }
      }
      return true;
    }
    return shadona.state = BUTTON_OUT, false;
  };
  var yensid = function () {
    var namitha = 0;
    if (shadona.enable_breath === 1) {
      if (shadona.state === BUTTON_IN || shadona.state === BUTTON_CLICK) {
        shadona.breath = (shadona.breath + delta * 1e3) % 1e3;
      } else {
        if (shadona.breath > 0) {
          shadona.breath = shadona.breath > 500 ? shadona.breath + delta * 1e3 : shadona.breath - delta * 1e3;
          if (shadona.breath < 0 || shadona.breath > 1e3) {
            shadona.breath = 0;
          }
        }
      }
      namitha = .2 * Utils.ease_in_out_quad(shadona.breath > 500 ? (1e3 - shadona.breath) / 500 : shadona.breath / 500);
    }
    return namitha;
  };
  var dnajah;
  if (symeon === 2) {
    dnajah = function (sewilla) {
      var emmaline = 1 + yensid();
      var danai = shadona.img[shadona.state];
      var enika = shadona.width * emmaline / 2;
      var orba = shadona.height * emmaline / 2;
      var moncerrat = (enika - shadona.width / 2) / 2;
      var micahel = (orba - shadona.height / 2) / 2;
      ctxDrawImage(sewilla, danai, shadona.translate.x - moncerrat, shadona.translate.y - micahel, enika, orba);
    };
  } else {
    symeon === 3 ? (dnajah = function (nastassia) {
      var laterika = shadona.img[shadona.state];
      var rebecaa = shadona.width;
      var takisha = shadona.height;
      var celestino = (rebecaa - shadona.width) / 2;
      var philippina = (takisha - shadona.height) / 2;
      ctxDrawImage(nastassia, laterika, shadona.translate.x - celestino, shadona.translate.y - philippina, rebecaa, takisha);
    }, symeon = 1) : dnajah = function (vishwesh) {
      var tarver = shadona.img[shadona.state];
      ctxDrawImage(vishwesh, tarver, shadona.translate.x, shadona.translate.y);
    };
  }
  return {info: shadona, trigger: jahala, draw: dnajah, in_button: crucita};
}
function gui_create_image_hd(whitelaw, jasiri, longina, soumya, starsha) {
  var zubie = {x: longina, y: soumya, _x: longina, _y: soumya}, tsosie = function (linville) {
    ctxDrawImage(linville, whitelaw, zubie.x, zubie.y, whitelaw.width / 2, whitelaw.height / 2);
  };
  return {translate: zubie, draw: tsosie, active: jasiri, position: starsha};
}
function gui_create_image(tidiane) {
  var armetta = function (rawle) {
    ctxDrawImage(rawle, tidiane, 0, 0);
  };
  return {img: tidiane, translate: _0x43d517, draw: armetta};
}
function gui_create_animation(alkeem, janeisa) {
  if (janeisa === undefined) {
    janeisa = .033;
  }
  var elleigh = 0;
  var syrai = 0;
  var thianna = function (eriani) {
    ctxDrawImage(eriani, (syrai += delta, syrai > janeisa && (elleigh = (elleigh + 1) % alkeem.length, syrai -= janeisa), alkeem[elleigh]), 0, 0);
  };
  return {img: alkeem, translate: _0x3c3fba, draw: thianna};
}
function gui_add_breath_effect(javares, jobani, jaja, noreda, kylynne, ediel, thyais) {
  javares.end = jobani;
  javares.start = jaja;
  javares.speed_start = noreda;
  javares.speed_end = kylynne;
  javares.width = javares.img.width;
  javares.height = javares.img.height;
  javares.scale = (jobani + jaja) / 2;
  javares.breath = false;
  javares.draw = function (niketh) {
    javares.translate.x = canw2 - javares.width / 2;
    ctxDrawImage(niketh, javares.img, 0, 0, javares.img.width, javares.img.height, javares.translate.x, javares.translate.y, javares.width, javares.height);
  };
}
function gui_breath_effect(osbourne) {
  osbourne.scale += osbourne.breath ? delta / osbourne.speed_start : -delta / osbourne.speed_end;
  if (osbourne.scale > osbourne.end) {
    osbourne.breath = false;
  } else {
    if (osbourne.scale < osbourne.start) {
      osbourne.breath = true;
    }
  }
}
var SENDWORD = "send", SHOW_ID = Utils.getURLData("id") === "1" ? 1 : 0, PASSWORD = Utils.getURLData("password"), RIVET_API = "https://matchmaker.api.rivet.gg/v1", STATE = {DELETE: 1, HURT: 2, COLD: 4, HUNGER: 8, ATTACK: 16, WALK: 32, IDLE: 64, HEAL: 128, WEB: 256}, KIT = [{price: 1e3, items: [[2, INV.FIRE], [1, INV.COOKED_MEAT], [8, INV.PLANT], [1, INV.BREAD]]}, {price: 2e3, items: [[2, INV.BIG_FIRE], [1, INV.PICK_WOOD], [2, INV.COOKED_MEAT], [16, INV.PLANT], [2, INV.BREAD]]}, {price: 4e3, items: [[3, INV.BIG_FIRE], [1, INV.PICK], [4, INV.COOKED_MEAT], [20, INV.PLANT], [4, INV.BREAD], [1, INV.WORKBENCH], [80, INV.STONE], [140, INV.WOOD]]}, {price: 8e3, items: [[1, INV.BAG], [4, INV.BIG_FIRE], [1, INV.PICK_GOLD], [6, INV.COOKED_MEAT], [30, INV.PLANT], [6, INV.BREAD], [1, INV.WORKBENCH], [150, INV.STONE], [200, INV.WOOD], [60, INV.GOLD], [2, INV.BOTTLE_FULL]]}, {price: 16e3, items: [[1, INV.BAG], [1, INV.PICK_DIAMOND], [1, INV.BED], [7, INV.CAKE], [2, INV.BOTTLE_FULL], [2, INV.BIG_FIRE], [1, INV.FURNACE], [15, INV.STONE_WALL], [2, INV.STONE_DOOR], [1, INV.TOTEM], [1, INV.SPANNER], [200, INV.STONE], [300, INV.WOOD]]}, {price: 16e3, items: [[1, INV.BAG], [1, INV.COAT], [1, INV.SHOVEL_GOLD], [1, INV.PICK_GOLD], [10, INV.CAKE], [4, INV.BOTTLE_FULL], [6, INV.BIG_FIRE], [3, INV.BANDAGE], [1, INV.BOOK], [200, INV.STONE], [300, INV.WOOD]]}, {price: 16e3, items: [[1, INV.BAG], [1, INV.HOOD], [1, INV.HAMMER_GOLD], [3, INV.BANDAGE], [1, 0], [1, INV.PICK_GOLD], [7, INV.CAKE], [2, INV.BOTTLE_FULL], [4, INV.BIG_FIRE], [150, INV.STONE], [200, INV.WOOD], [1, INV.LOCKPICK]]}, {price: 16e3, items: [[1, INV.BAG], [1, INV.PEASANT], [1, INV.PICK_GOLD], [7, INV.CAKE], [2, INV.BOTTLE_FULL], [4, INV.BIG_FIRE], [2, INV.WINDMILL], [4, INV.BREAD_OVEN], [10, INV.PLOT], [6, INV.WHEAT_SEED], [4, INV.SEED], [1, INV.WATERING_CAN_FULL], [500, INV.WOOD]]}, {price: 16e3, items: [[1, INV.BAG], [1, INV.PICK_GOLD], [16, INV.FOODFISH_COOKED], [1, INV.BOTTLE_FULL], [6, INV.BIG_FIRE], [3, INV.BANDAGE], [1, INV.DIVING_MASK], [1, INV.SWORD], [16, INV.BRIDGE], [150, INV.STONE], [200, INV.WOOD]]}, {price: 2e4, items: [[1, INV.BAG], [1, INV.PICK_GOLD], [1, INV.CAKE], [1, INV.BOTTLE_FULL], [3, INV.BIG_FIRE], [3, INV.BANDAGE], [1, INV.GOLD_HELMET], [1, INV.SWORD_GOLD], [1, INV.DIAMOND_SPEAR], [2, INV.GOLD_SPIKE], [50, INV.STONE], [100, INV.WOOD]]}], CLIENT = {VERSION_NUMBER: 52, TIMEOUT_TIME: 2e3, TIMEOUT_NUMBER: 3, PING: "[13]", PING_DELAY: 6e4, ROTATE: .2, ATTACK: .2, SLOW_ATTACK: .58, CAM_DELAY: 50, MUTE_DELAY: 125e3, TIMEOUT_SERVER: 6e5, WAITING_FOR_SERVER: 8e3, DELAY_CONNECTION_UPDATE: 5, LAG_DISTANCE: 200, LOOSE_FOCUS: 15, TOKEN_LEN: 14, TEAM_MANAGE: 0, TEAM_SHOW: 1, TEAM_LEAVE: 2, TEAM_JOIN: 3, TEAM_FULL: 4, SKIN_MAX: 20, ACCESSORY_MAX: 14, SYMBOL_MAX: 4};
function NetworkClient() {
  var mika = this;
  this.socket = null;
  this._current_id = 0;
  this.server_list = [];
  this.mode_list = [[], [], [], [], [], [], [], [], []];
  this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
  this.current_mode = 0;
  this.privateServer = 0;
  this.get_rivet_token = async function () {
    if (environment == environments.DEV) {
      let daijha = await fetch(DB + "rivet-token");
      return await daijha.text();
    } else {
      return null;
    }
  };
  this.fetch_server_list = async function () {
    let beverly = await this.get_rivet_token(), kentra = {Authorization: "Bearer " + beverly};
    if (beverly) {}
    let latory = await fetch(RIVET_API + "/lobbies/list", {method: "GET", headers: kentra});
    if (!latory.ok) {
      console.error("Failed to list lobbies");
      throw "Failed to list lobbies";
    }
    let daylani = await latory.json();
    console.log("Lobbies", daylani);
    this.server_list = [];
    let verbena = {};
    for (let recker of daylani.game_modes) {
      this.server_list.push({a: "Auto Select", gm: recker.game_mode_id, m: 100, nu: 0, auto: true});
    }
    for (let reddick of daylani.lobbies) {
      let tymekia = reddick.game_mode_id, zaccariah;
      tymekia in verbena ? zaccariah = ++verbena[tymekia] : zaccariah = verbena[tymekia] = 1;
      let loyed = daylani.regions.find(tatsuki => tatsuki.region_id == reddick.region_id);
      this.server_list.push({a: loyed.region_display_name + " " + zaccariah, gm: reddick.game_mode_id, idx: zaccariah, m: reddick.max_players_normal, nu: reddick.total_player_count, id: reddick.lobby_id});
    }
  };
  this.geolocate_server = function (jaquice) {
    var jeliyah = [];
    for (var leveria = 0; leveria < jaquice.length; leveria++) {
      if (jaquice[leveria].a.indexOf(TZ) !== -1) {
        jeliyah.push(leveria);
      }
    }
    if (jeliyah.length === 0) {
      return 0;
    }
    return jeliyah[Math.floor(Math.random() * jeliyah.length)];
  };
  this.set_server_list = function (blakelyn) {
    var radin = 0;
    for (var baren = 0; baren < blakelyn.length; baren++) {
      radin += blakelyn[baren].nu;
    }
    var vonley = document.getElementById("servselect");
    if (client.selected_server[client.current_mode] === -1) {
      client.selected_server[client.current_mode] = vonley.selectedIndex = client.geolocate_server(blakelyn);
    } else {
      vonley.selectedIndex = client.selected_server[client.current_mode];
    }
    var jemaine = '<label for="ul-id"><button type="button" class="ng-binding">' + blakelyn[vonley.selectedIndex].a + (blakelyn[vonley.selectedIndex].nu > 0 ? " [" + blakelyn[vonley.selectedIndex].nu + " " + LANG[TEXT.PLAYERS] + "]" : "") + "</button></label>" + '<ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id">' + '<li role="option" id="selectDisabled">' + LANG[TEXT.CHOOSE] + " (" + this.total_players + ") " + LANG[TEXT.TOTAL_PLAYERS] + "</li>";
    for (var baren = 0; baren < blakelyn.length; baren++) {
      jemaine += '<li role="option">' + blakelyn[baren].a;
      jemaine += " [" + blakelyn[baren].nu + " " + LANG[TEXT.PLAYERS] + "]";
      jemaine += "</li>\n";
    }
    jemaine += '<li role="option" id="selectDisabled">(' + radin + ") " + LANG[TEXT.TOTAL_MODE] + "</li>";
    jemaine += "</div>";
    vonley.innerHTML = jemaine;
    $(".md-select").on("click", function () {
      $(this).toggleClass("active");
    });
    $(".md-select ul li").on("click", function () {
      var waddie = $(this).text(), cinamon = -1, cherena = client.mode_list[client.current_mode];
      for (var luxanna = 0; luxanna < cherena.length; luxanna++) {
        if (cherena[luxanna].a + " [" + cherena[luxanna].nu + " " + LANG[TEXT.PLAYERS] + "]" === waddie) {
          cinamon = luxanna;
          break;
        }
      }
      if (cinamon === -1) {
        return;
      }
      document.getElementById("servselect").selectedIndex = cinamon;
      client.selected_server[client.current_mode] = cinamon;
      $(".md-select ul li").removeClass("active");
      $(this).addClass("active");
      $(".md-select label button").text(waddie);
    });
  };
  this.total_players = 0;
  this.update_server_list = function () {
    this.total_players = 0;
    for (var jeylan = 0; jeylan < client.server_list.length; jeylan++) {
      if (this.server_list[jeylan].gm == "experimental") {
        this.mode_list[WORLD.MODE_EXPERIMENTAL].push(this.server_list[jeylan]);
      } else {
        if (this.server_list[jeylan].gm == "zombies") {
          this.mode_list[WORLD.MODE_ZOMBIES].push(this.server_list[jeylan]);
        } else {
          if (this.server_list[jeylan].gm == "forest") {
            this.mode_list[WORLD.MODE_LEGACY].push(this.server_list[jeylan]);
          } else {
            if (this.server_list[jeylan].gm == "battle-royale") {
              this.mode_list[WORLD.MODE_BR].push(this.server_list[jeylan]);
            } else {
              if (this.server_list[jeylan].gm == "vampires") {
                this.mode_list[WORLD.MODE_VAMPIRES].push(this.server_list[jeylan]);
              } else {
                this.mode_list[WORLD.MODE_PVP].push(this.server_list[jeylan]);
              }
            }
          }
        }
      }
      this.total_players += this.server_list[jeylan].nu;
    }
    for (jeylan = 0; jeylan < this.mode_list.length; jeylan++) {
      if (this.mode_list[jeylan].length === 0) {
        this.mode_list[jeylan].push({a: LANG[TEXT.COMMING_SOON], nu: 0, i: "127.0.0.1", p: 80});
      }
    }
    this.set_server_list(this.mode_list[0]);
    this.select_gamemode = function (arkita) {
      client.current_mode = arkita;
      client.set_server_list(client.mode_list[client.current_mode]);
      client.set_server_list(client.mode_list[client.current_mode]);
      document.getElementById("servselect").selectedIndex = client.current_mode;
    };
  };
  this.timeout_server = 0;
  this.timeout_number = 0;
  this.timeout_handler = null;
  this.timeout = function () {
    mika.timeout_number++;
    mika.socket.close();
    if (mika.timeout_number > CLIENT.TIMEOUT_NUMBER) {
      ___adsvid = 1;
      ui.error_level = CLIENT.ERROR_REFUSED;
      mika.new_alert(LANG[TEXT.YOU_CANNOT_JOIN]);
      ui.waiting = false;
      user.reconnect.enabled && game.quit(ui.run);
    } else {
      mika.connect_timeout();
    }
  };
  this.kick = function (alaxander) {
    if (this._current_id != this.socket._current_id) {
      return;
    }
    this._current_id++;
    this.new_alert(LANG[TEXT.KICKED] + alaxander);
    game.quit(ui.run);
  };
  this.mute = function () {
    this.new_alert("You speak too much");
  };
  this.already_used_key = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.KEY_ALREADY]);
    ui.waiting = false;
  };
  this.hide_shop_kit = function () {
    user.shop.open = false;
  };
  this.hide_recipe_book = function () {
    game.show_recipe_book = 0;
  };
  this.hide_clock = function () {
    game.show_clock = 0;
  };
  this.sand_tempest = function (emyr) {
    user.desert.tempest = emyr;
    if (world.dist_desert > -300) {
      if (emyr === 0) {
        this.new_alert(LANG[TEXT.TEMPEST_OFF]);
      } else {
        this.new_alert(LANG[TEXT.TEMPEST_ON]);
      }
    }
  };
  this.bandage = function (ayah) {
    user.bandage = ayah;
  };
  this.blizzard_status = function (daviya) {
    user.blizzard = daviya;
  };
  this.blizzard = function (almarie) {
    user.winter.tempest = almarie;
    if (world.dist_winter > -300) {
      if (almarie === 0) {
        this.new_alert(LANG[TEXT.BLIZZARD_OFF]);
      } else {
        this.new_alert(LANG[TEXT.BLIZZARD_ON]);
      }
    }
  };
  this.explorer_quest = function (sadavia) {
    if (sadavia === 0) {
      document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
    } else {
      if (sadavia === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else {
        if (sadavia === 2) {
          document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
        } else {
          if (sadavia === 3) {
            document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
          }
        }
      }
    }
  };
  this.hide_market = function () {
    game.show_market = 0;
  };
  this.hide_quest = function () {
    game.show_quest = 0;
  };
  this.clean_inventory = function () {
    user.inv.can_select = [];
    user.inv.n = [];
    user.inv.id = -1;
    user.inv.drag.stop();
    user.craft.can_craft = [];
    user.craft.crafting = false;
    user.craft.can_build = false;
    user.craft.preview = -1;
    user.craft.id = -1;
    user.craft.workbench = false;
    user.craft.well = false;
    user.craft.fire = false;
    user.craft.water = false;
    user.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
  };
  this.wrong_key = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert();
    ui.waiting = false;
  };
  this.commands = function (piera) {
    for (var treyvonne = 0; treyvonne < piera.length; treyvonne++) {
      if (typeof piera[treyvonne] === "string") {
        piera[treyvonne] = Utils.escape_html(piera[treyvonne]);
      }
    }
    user.terminal.write_command(piera[1], piera[2], piera[3], piera[4]);
  };
  this.message = function (lakindra) {
    this.new_alert(lakindra);
  };
  this.wrong_password = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.WRONG_PASSWORD]);
    ui.waiting = false;
  };
  this.new_version = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.NEW_VERSION]);
    ui.waiting = false;
  };
  this.old_version = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.OLD_VERSION]);
    ui.waiting = false;
  };
  this.get_bag = function () {
    user.inv.update_bag_size(1, 0);
    game.update_inv_buttons();
  };
  this.verified_account = function (yenty) {
    var jurnei = yenty[1];
    var umekia = world.players[jurnei];
    umekia.skin = yenty[2];
    umekia.accessory = yenty[3];
    umekia.baglook = yenty[4];
    umekia.book = yenty[5];
    umekia.crate = yenty[6];
    umekia.dead = yenty[7];
    umekia.level = yenty[8];
    var gilana = world.fast_units[jurnei * world.max_units];
    gilana && (gilana.skin = yenty[2], gilana.accessory = yenty[3], gilana.baglook = yenty[4], gilana.book = yenty[5]);
  };
  this.build_stop = function (janace) {
    if (janace === INV.BAG) {
      user.inv.update_bag_size(1, 0);
      game.update_inv_buttons();
    } else {
      this.gather([0, janace, 1]);
    }
    user.craft.restart();
  };
  this.recycle_ok = function (taquanta) {
    user.auto_feed.delay = 0;
    user.craft.do_recycle(taquanta);
  };
  this.recycle_stop = function (siloe) {
    var almer = RECIPES[siloe].r;
    for (var sheara = 0; sheara < almer.length; sheara++) {
      if (user.inv.max > user.inv.can_select.length || user.inv.n[almer[sheara][0]] > 0) {
        var attie = Math.floor(almer[sheara][1] * .8);
        if (!attie) {
          continue;
        }
        this.gather([0, almer[sheara][0], attie]);
      }
    }
    user.craft.restart();
  };
  this.build_ok = function (santanah) {
    user.auto_feed.delay = 0;
    user.craft.do_craft(santanah);
  };
  this.new_alert = function (kymia) {
    if (!user.alert.text) {
      user.alert.text = kymia;
    } else {
      if (kymia !== user.alert.text && kymia !== user.alert.list[user.alert.list.length - 1]) {
        user.alert.list.push(kymia);
      }
    }
  };
  this.no_resources = function () {
    this.new_alert(LANG[TEXT.NO_MORE_RESOURCES]);
  };
  this.survive = function () {
    var lynise;
    if (user.day == 0) {
      lynise = LANG[TEXT.SURVIVED_1DAY];
    } else {
      lynise = LANG[TEXT.SURVIVED] + (user.day + 1) + LANG[TEXT.DAYS];
    }
    this.new_alert(lynise);
    user.day++;
  };
  this.fail_restore = function () {
    clearTimeout(mika.timeout_handler);
    user.reconnect.enabled = false;
    user.alive = false;
    this.new_alert(LANG[TEXT.DEAD_SAD]);
    game.quit(ui.run);
    this.socket.close();
  };
  this.blocked = function () {
    ___adsvid = 1;
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.SPAM_ME]);
    ui.waiting = false;
  };
  this.full = function () {
    ___adsvid = 1;
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.SPAM_ME2]);
    ui.waiting = false;
  };
  this.new_player = function (lydian) {
    var tresor = lydian[1];
    var cove = world.players;
    cove[tresor].nickname = lydian[2];
    cove[tresor].skin = lydian[3];
    cove[tresor].accessory = lydian[4];
    cove[tresor].baglook = lydian[5];
    cove[tresor].book = lydian[6];
    cove[tresor].crate = lydian[7];
    cove[tresor].dead = lydian[8];
    cove[tresor].level = lydian[9];
    cove[tresor].score = 0;
    cove[tresor].ldb_label = null;
    cove[tresor].label = null;
    cove[tresor].label_winter = null;
    cove[tresor].alive = true;
    if (SHOW_ID === 1) {
      cove[tresor].nickname += "|" + tresor;
    }
  };
  this.get_focus = function () {
    this.socket[SENDWORD](WINDOW1[JSONWORD1].stringify([11]));
  };
  this.empty_res = function () {
    this.new_alert(LANG[TEXT.EMPTY]);
  };
  this.inv_full = function () {
    this.new_alert(LANG[TEXT.INV_FULL]);
  };
  this.choose_kit = function (cadeisha) {
    this.socket[SENDWORD](WINDOW3[JSONWORD7].stringify([21, cadeisha]));
    user.shop.open = false;
  };
  this.kit_ok = function (lynissa) {
    var camilo = KIT[lynissa - 1].items;
    for (var mckayle = 0; mckayle < camilo.length && user.inv.max > user.inv.can_select.length; mckayle++) {
      var tashanda = camilo[mckayle][1], raevynn = camilo[mckayle][0];
      if (camilo[mckayle][1] === INV.BAG) {
        user.inv.update_bag_size(1, 0);
      } else {
        this.gather([0, tashanda, raevynn]);
      }
    }
  };
  this.gather = function (yolanta) {
    var melisssa = yolanta.length, zaidyn = user.inv;
    for (var azelea = 1; azelea < melisssa; azelea += 2) {
      var shigeko = yolanta[azelea], allaya = yolanta[azelea + 1];
      for (var gano = 0; gano < zaidyn.can_select.length; gano++) {
        if (zaidyn.can_select[gano].id == shigeko) {
          zaidyn.n[shigeko] += allaya;
          break;
        }
      }
      gano == zaidyn.can_select.length && (zaidyn.n[shigeko] = allaya, zaidyn.can_select.push(game.inv_buttons[shigeko]), game.update_inv_buttons());
    }
    user.craft.update();
  };
  this.gauges = function (dabriyon, vernesa, shamell, fae, rhory, loujain, danisa) {
    user.gauges.l = dabriyon / 100;
    user.gauges.h = vernesa / 100;
    user.gauges.c = shamell / 100;
    user.gauges.t = fae / 100;
    user.gauges.o = rhory / 100;
    user.gauges.wa = loujain / 100;
    user.bandage = danisa;
  };
  this.succeed_quest = function (erelene) {
    game.quests.modify(erelene, 2);
  };
  this.fail_quest = function (mychele) {
    game.quests.modify(mychele, 0);
  };
  this.claimed = function (jaylisse) {
    game.quests.modify(jaylisse, 3);
  };
  this.gauges_life = function (yumira, zuleymi) {
    user.gauges.l = yumira / 100;
    user.bandage = zuleymi;
  };
  this.gauges_water = function (kingamir) {
    user.gauges.t = kingamir / 100;
  };
  this.gauges_food = function (kamina) {
    user.gauges.h = kamina / 100;
  };
  this.gauges_warm = function (rashelle) {
    user.gauges.wa = rashelle / 100;
  };
  this.gauges_cold = function (onir) {
    user.gauges.c = onir / 100;
  };
  this.get_time = function (raiyana) {
    world.time = raiyana;
    world.transition = true;
    audio.transition = 1;
  };
  this.change_ground = function () {
    document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[world.time];
  };
  this.kill_player = function (jabryson) {
    if (world.mode == WORLD.MODE_HUNGER_GAMES && world.players[jabryson].nickname !== "spectator") {
      this.new_alert(world.players[jabryson].nickname + LANG[TEXT.DEAD]);
    }
    world.players[jabryson].alive = false;
  };
  this.set_cam = function (vick) {
    var vondrell = new Uint16Array(vick);
    player.cam.change(vondrell[1], vondrell[2]);
  };
  this.recover_focus = function (mahaa) {
    var angelyce = new Uint16Array(mahaa);
    user.cam.change(angelyce[1], angelyce[2]);
  };
  this.hitten_other = function (annsley, stanlee) {
    var naquitta = new Uint16Array(stanlee), corvo = (annsley.length - 2) / 4;
    for (var diaz = 0; diaz < corvo; diaz++) {
      var mkaylah = naquitta[1 + 2 * diaz];
      var iyunna = annsley[4 + 4 * diaz];
      var agneda = (annsley[5 + 4 * diaz] >> 1) / 127 * Math.PI * 2;
      var eliannah = world.fast_units[iyunna * world.max_units + mkaylah];
      if (eliannah && eliannah.hit) {
        if (audio.loaded && audio.run) {
          audio.hit(annsley[5 + 4 * diaz] & 1, SOUND_BUILD[eliannah.type], eliannah.x, eliannah.y);
        }
        eliannah.hit.angle = agneda;
        eliannah.hit.update = agneda;
      }
    }
  };
  this.hitten = function (korrey) {
    var sigourney = new Uint16Array(korrey), vilma = (sigourney.length - 1) / 4;
    for (var adelia = 0; adelia < vilma; adelia++) {
      var rowley = adelia * 4, davisha = sigourney[1 + rowley], kayesha = sigourney[2 + rowley], jru = (sigourney[3 + rowley] >> 1) / 127 * Math.PI * 2, jino = sigourney[4 + rowley], aubriannah = MAP.tiles[kayesha][davisha], clariza;
      switch (jino) {
        case 0:
          ;
          clariza = aubriannah.p[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 1:
          ;
          clariza = aubriannah.s[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 2:
          ;
          clariza = aubriannah.s[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 3:
          ;
          clariza = aubriannah.s[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 4:
          ;
          clariza = aubriannah.t[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 5:
          ;
          clariza = aubriannah.t[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 6:
          ;
          clariza = aubriannah.t[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 7:
          ;
          clariza = aubriannah.t[3][0], clariza.angle = jru, clariza.update = true;
          break;
        case 8:
          ;
          clariza = aubriannah.t[4][0], clariza.angle = jru, clariza.update = true;
          break;
        case 9:
          ;
          clariza = aubriannah.t[5][0], clariza.angle = jru, clariza.update = true;
          break;
        case 10:
          ;
          clariza = aubriannah.g[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 11:
          ;
          clariza = aubriannah.g[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 12:
          ;
          clariza = aubriannah.g[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 13:
          ;
          clariza = aubriannah.d[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 14:
          ;
          clariza = aubriannah.d[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 15:
          ;
          clariza = aubriannah.d[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 16:
          ;
          clariza = aubriannah.b[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 17:
          ;
          clariza = aubriannah.b[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 18:
          ;
          clariza = aubriannah.b[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 19:
          ;
          clariza = aubriannah.b[3][0], clariza.angle = jru, clariza.update = true;
          break;
        case 20:
          ;
          clariza = aubriannah.f[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 21:
          ;
          clariza = aubriannah.f[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 22:
          ;
          clariza = aubriannah.f[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 23:
          ;
          clariza = aubriannah.sw[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 24:
          ;
          clariza = aubriannah.sw[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 25:
          ;
          clariza = aubriannah.sw[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 26:
          ;
          clariza = aubriannah.gw[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 27:
          ;
          clariza = aubriannah.gw[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 28:
          ;
          clariza = aubriannah.gw[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 29:
          ;
          clariza = aubriannah.dw[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 30:
          ;
          clariza = aubriannah.dw[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 31:
          ;
          clariza = aubriannah.dw[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 32:
          ;
          clariza = aubriannah.a[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 33:
          ;
          clariza = aubriannah.a[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 34:
          ;
          clariza = aubriannah.a[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 35:
          ;
          clariza = aubriannah.cs[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 36:
          ;
          clariza = aubriannah.cs[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 37:
          ;
          clariza = aubriannah.cs[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 38:
          ;
          clariza = aubriannah.cs[3][0], clariza.angle = jru, clariza.update = true;
          break;
        case 40:
          ;
          clariza = aubriannah.plm[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 41:
          ;
          clariza = aubriannah.plm[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 42:
          ;
          clariza = aubriannah.plm[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 50:
          ;
          clariza = aubriannah.re[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 51:
          ;
          clariza = aubriannah.re[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 52:
          ;
          clariza = aubriannah.re[2][0], clariza.angle = jru, clariza.update = true;
          break;
        case 55:
          ;
          clariza = aubriannah.c[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 56:
          ;
          clariza = aubriannah.m[0][0], clariza.angle = jru, clariza.update = true;
          break;
        case 57:
          ;
          clariza = aubriannah.m[1][0], clariza.angle = jru, clariza.update = true;
          break;
        case 58:
          ;
          clariza = aubriannah.m[2][0], clariza.angle = jru, clariza.update = true;
          break;
      }
      if (audio.loaded && audio.run && clariza) {
        audio.hit(sigourney[3 + rowley] & 1, SOUND_NATURE[jino], clariza.x, clariza.y);
      }
    }
  };
  this.resurrection = function () {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([17, user.resurrection.pid, user.resurrection.iid]));
  };
  this.give_wheat = function (hammie, dharti) {
    this.socket[SENDWORD](WINDOW2[JSONWORD4].stringify([22, dharti, hammie.pid, hammie.iid]));
  };
  this.give_bread_oven = function (beva, tischa, paco) {
    if (tischa) {
      this.socket[SENDWORD](WINDOW2[JSONWORD4].stringify([25, tischa, beva.pid, beva.iid]));
    } else {
      this.socket[SENDWORD](WINDOW2[JSONWORD3].stringify([24, paco, beva.pid, beva.iid]));
    }
  };
  this.take_bread = function (delva) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([26, delva.pid, delva.iid]));
  };
  this.claim_quest_reward = function (agela) {
    this.socket[SENDWORD](WINDOW5[JSONWORD8].stringify([27, agela]));
  };
  this.give_well = function (jeylon) {
    this.socket[SENDWORD](WINDOW4[JSONWORD2].stringify([30, jeylon.pid, jeylon.iid]));
  };
  this.give_wood_extractor = function (lebria, leonnah) {
    this.socket[SENDWORD](WINDOW3[JSONWORD5].stringify([38, leonnah, lebria.pid, lebria.iid, lebria.type]));
  };
  this.give_wood = function (sohni, jentrie) {
    this.socket[SENDWORD](WINDOW3[JSONWORD5].stringify([12, jentrie, sohni.pid, sohni.iid]));
  };
  this.give_item = function (luretha, mikalee, millan) {
    this.socket[SENDWORD](WINDOW4[JSONWORD4].stringify([8, mikalee, millan, luretha.pid, luretha.iid]));
  };
  this.take_extractor = function (timofei) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([37, timofei.pid, timofei.iid, timofei.type]));
  };
  this.take_flour = function (brealle) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([23, brealle.pid, brealle.iid]));
  };
  this.take_chest = function (markie) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([9, markie.pid, markie.iid]));
  };
  this.unlock_chest = function (macil) {
    this.socket[SENDWORD](WINDOW6[JSONWORD6].stringify([15, macil.pid, macil.iid]));
  };
  this.lock_chest = function (antron) {
    this.socket[SENDWORD](WINDOW7[JSONWORD7].stringify([16, antron.iid]));
  };
  this.kick_team = function (jaana) {
    mika.socket[SENDWORD](WINDOW8[JSONWORD8].stringify([20, user.totem.id, user.team[jaana]]));
  };
  this.join_team = function () {
    mika.socket[SENDWORD](WINDOW9[JSONWORD9].stringify([18, user.totem.pid, user.totem.id]));
  };
  this.leave_team = function () {
    mika.socket[SENDWORD](WINDOW10[JSONWORD10].stringify([19]));
  };
  this.lock_team = function () {
    mika.socket[SENDWORD](WINDOW10[JSONWORD8].stringify([35, user.totem.id]));
    document.getElementById("lock_team").innerHTML == "LOCK" ? (user.totem.lock = 1, document.getElementById("lock_team").innerHTML = "UNLOCK") : (user.totem.lock = 0, document.getElementById("lock_team").innerHTML = "LOCK");
  };
  this.units = function (clarita, kimorra, jhosep) {
    var diavionne = new Uint16Array(clarita);
    if (jhosep) {
      world.delete_all_units();
    }
    var amrit = (kimorra.length - 2) / 18;
    for (var julinda = 0; julinda < amrit; julinda++) {
      var dillion = 2 + julinda * 18, fairie = 1 + julinda * 9, jerrol = kimorra[dillion], skender = diavionne[fairie + 1], marenda = diavionne[fairie + 5], lorayne = jerrol * world.max_units + marenda;
      if (skender & STATE.DELETE) {
        world.delete_units(lorayne);
        continue;
      }
      var jaleela = diavionne[fairie + 2], naszir = diavionne[fairie + 3], sparkel = diavionne[fairie + 4], patriot = diavionne[fairie + 6], malaysa = diavionne[fairie + 7], deauntre = diavionne[fairie + 8], leve = kimorra[dillion + 1] / 255 * Math.PI * 2;
      if (!world.fast_units[lorayne]) {
        var shreenika = new Item(jaleela, jerrol, marenda, naszir, sparkel, leve, skender, patriot, malaysa, deauntre);
        world.fast_units[lorayne] = shreenika;
        world.units[jaleela].push(shreenika);
        continue;
      }
      var jiniyah = world.fast_units[lorayne];
      jiniyah.r.x = naszir;
      jiniyah.r.y = sparkel;
      jerrol != 0 && Utils.dist(jiniyah, jiniyah.r) > CLIENT.LAG_DISTANCE && (jiniyah.x = naszir, jiniyah.y = sparkel);
      if (jiniyah.id !== user.id || jerrol === 0) {
        jiniyah.nangle = leve;
      }
      jiniyah.action |= skender;
      jiniyah.info = patriot;
      jiniyah.speed = malaysa;
      jiniyah.extra = deauntre;
      if (jiniyah.update) {
        jiniyah.update(skender);
      }
    }
  };
  this.leaderboard = function (akeera) {
    this.timeout_server = old_timestamp;
    var dystiny = new Uint16Array(akeera);
    user.ldb.init(dystiny);
  };
  this.new_recipes = function (dionisio) {
    if (OLD_RECIPES !== undefined) {
      RECIPES = OLD_RECIPES;
    }
    if (dionisio.length > 0) {
      OLD_RECIPES = JSON.parse(JSON.stringify(RECIPES));
      for (var shadman = 0; shadman < dionisio.length; shadman++) {
        var konye = dionisio[shadman], chiann = RECIPES[konye.item];
        if (chiann === undefined) {
          continue;
        }
        chiann.r = konye.recipe;
        chiann.w = konye.workbench;
        chiann.f = konye.fire;
        chiann.o = konye.water;
        chiann.e = konye.well;
        chiann.time = 1 / konye.time;
      }
    }
  };
  this.welcome = function (philadelphia) {
    if (!philadelphia || philadelphia.length === 0) {
      user.welcome.message = undefined;
    } else {
      user.welcome.message = create_welcome_text(philadelphia);
    }
  };
  this.chat = function (samani) {
    var dusharme = world.fast_units[samani[1] * world.max_units];
    if (dusharme) {
      if (world.mode === WORLD.MODE_ZOMBIES && dusharme.skin === WORLD.ZOMBIE_SKIN) {
        if (!user.zombie) {
          dusharme.text.push(ZOMBIE_GRUMBLES[Math.floor(Math.random() * ZOMBIE_GRUMBLES.length)]);
        } else {
          if (Math.random() > .5) {
            dusharme.text.push(samani[2] + " ..." + ZOMBIE_GRUMBLE);
          } else {
            dusharme.text.push(ZOMBIE_GRUMBLE + "... " + samani[2]);
          }
        }
      } else {
        dusharme.text.push(samani[2]);
      }
    }
  };
  this.select_craft = function (frost) {
    if (user.inv.max === user.inv.can_select.length && RECIPES[frost].id2 !== INV.BAG && user.inv.find_item(RECIPES[frost].id2) == -1 && !user.inv.free_place(RECIPES[frost].r)) {
      return this.inv_full(), 0;
    }
    return this.socket[SENDWORD](WINDOW1[JSONWORD1].stringify([7, frost])), 1;
  };
  this.workbench = function (dashly) {
    user.craft.set_workbench(dashly);
  };
  this.well = function (laterrion) {
    user.craft.well = laterrion;
    user.craft.update();
  };
  this.fire = function (rahman) {
    user.craft.fire = rahman;
    user.craft.update();
  };
  this.water = function (verneeda) {
    user.craft.water = verneeda;
    user.craft.update();
  };
  this.dont_harvest = function (justinne) {
    this.new_alert(LANG[TEXT.WRONG_TOOL]);
  };
  this.cancel_craft = function () {
    user.craft.restart();
  };
  this.minimap = function (quiera) {
    game.minimap.players = [];
    var aleighsha = world.fast_units[user.uid], shervin = 0;
    for (var earstine = 1; earstine < quiera.length; earstine += 2) {
      var berkeley = {x: Math.floor(quiera[earstine] * world.w / 250), y: Math.floor(quiera[earstine + 1] * world.h / 250)};
      if (aleighsha && !shervin && !user.spectator && Utils.dist(berkeley, aleighsha) < 250) {
        shervin += 1;
        continue;
      }
      game.minimap.players.push(berkeley);
    }
  };
  this.reborn = function () {
    user.resurrection.open = false;
    user.ghost.enabled = false;
    user.ghost.delay = -1;
    user.ghost.label = null;
    user.ghost.sec = null;
    user.ghost.now = -1;
  };
  this.ghost = function (gorizia) {
    WORLD.GHOST_DELAY = gorizia;
    user.ghost.enabled = true;
    user.ghost.delay = (new Date).getTime();
    user.ghost.label = null;
    user.ghost.now = -1;
    var jaspreet = [INV.SUPER_HAMMER, INV.DRAGON_HEART, INV.SWORD_WOOD, INV.SWORD, INV.SWORD_GOLD, INV.SWORD_DIAMOND, INV.SWORD_AMETHYST, INV.REIDITE_SWORD, INV.DRAGON_SWORD, INV.LAVA_SWORD, INV.PIRATE_SWORD, INV.SPEAR, INV.WOOD_SPEAR, INV.GOLD_SPEAR, INV.DIAMOND_SPEAR, INV.AMETHYST_SPEAR, INV.REIDITE_SPEAR, INV.DRAGON_SPEAR, INV.LAVA_SPEAR, INV.CRAB_SPEAR, INV.WOOD_BOW, INV.STONE_BOW, INV.GOLD_BOW, INV.DIAMOND_BOW, INV.AMETHYST_BOW, INV.REIDITE_BOW, INV.DRAGON_BOW, INV.WOOD_SHIELD, INV.STONE_SHIELD, INV.GOLD_SHIELD, INV.DIAMOND_SHIELD, INV.AMETHYST_SHIELD, INV.REIDITE_SHIELD, INV.WAND1, INV.WAND2, INV.PICK_WOOD, INV.PICK, INV.PICK_GOLD, INV.PICK_DIAMOND, INV.PICK_AMETHYST, INV.PICK_REIDITE, INV.SPANNER, INV.PITCHFORK, INV.PITCHFORK2];
    for (var ayleene = 0; ayleene < jaspreet.length; ayleene++) {
      var syvella = user.inv.find_item(jaspreet[ayleene]);
      if (syvella != -1) {
        user.inv.delete_item(jaspreet.length[ayleene], syvella);
      }
    }
    user.craft.restart();
  };
  this.decrease_item2 = function (endiah, ariannie, kineshia) {
    this.decrease_item(endiah, ariannie * 256 + kineshia);
  };
  this.decrease_item = function (shanautica, kieandra) {
    user.craft.preview = -1;
    user.inv.decrease(shanautica, kieandra, user.inv.find_item(shanautica));
    user.craft.update();
  };
  this.accept_build = function (gracielynn) {
    user.craft.preview = -1;
    user.build.wait = true;
    var haedon = user.inv.find_item(gracielynn);
    user.inv.decrease(gracielynn, 1, haedon);
    if (haedon >= 0 && !user.inv.n[gracielynn]) {
      user.craft.update();
    }
    if (gracielynn == INV.TOTEM) {
      user.team = [user.id];
    }
  };
  this.cancel_crafting = function () {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([31]));
  };
  this.buy_market = function (paelynn) {
    this.socket[SENDWORD](WINDOW3[JSONWORD3].stringify([32, paelynn.val, paelynn.id]));
  };
  this.update_sign = function (zarayah, kobby) {
    this.socket[SENDWORD](WINDOW3[JSONWORD5].stringify([33, zarayah, kobby]));
  };
  this.send_build = function () {
    var florence = world.fast_units[user.uid];
    if (florence) {
      var demarian = Math.PI * 2;
      this.socket[SENDWORD](WINDOW3[JSONWORD3].stringify([10, user.craft.preview, Math.floor((florence.angle + demarian) % demarian * 255 / demarian), user.craft.mode]));
    }
  };
  this.select_inv = function (tylayshia, maielle) {
    switch (tylayshia) {
      case INV.BANDAGE:
      case INV.PLANT:
      case INV.MEAT:
      case INV.COOKED_MEAT:
      case INV.SANDWICH:
      case INV.BOTTLE_FULL:
      case INV.COOKIE:
      case INV.CAKE:
      case INV.ICE:
      case INV.BREAD:
      case INV.PUMPKIN:
      case INV.TOMATO:
      case INV.CACTUS:
      case INV.CARROT:
      case INV.WATERMELON:
      case INV.ALOE_VERA:
      case INV.GARLIC:
      case INV.FOODFISH:
      case INV.FOODFISH_COOKED:
      case INV.CRAB_STICK:
      case INV.CRAB_LOOT:
      case INV.CANDY:
      case INV.SUGAR_CAN:
        ;
        user.craft.preview = -1, this.socket[SENDWORD](WINDOW4[JSONWORD4].stringify([5, tylayshia]));
        break;
      case INV.WORKBENCH:
      case INV.SPIKE:
      case INV.SEED:
      case INV.WHEAT_SEED:
      case INV.PUMPKIN_SEED:
      case INV.TOMATO_SEED:
      case INV.CARROT_SEED:
      case INV.GARLIC_SEED:
      case INV.THORNBUSH_SEED:
      case INV.WATERMELON_SEED:
      case INV.ALOE_VERA_SEED:
      case INV.FIRE:
      case INV.WALL:
      case INV.STONE_WALL:
      case INV.GOLD_WALL:
      case INV.DIAMOND_WALL:
      case INV.BIG_FIRE:
      case INV.CHEST:
      case INV.RESURRECTION:
      case INV.EMERALD_MACHINE:
      case INV.WOOD_DOOR:
      case INV.STONE_DOOR:
      case INV.GOLD_DOOR:
      case INV.DIAMOND_DOOR:
      case INV.AMETHYST_DOOR:
      case INV.REIDITE_DOOR:
      case INV.WOOD_DOOR_SPIKE:
      case INV.STONE_DOOR_SPIKE:
      case INV.GOLD_DOOR_SPIKE:
      case INV.DIAMOND_DOOR_SPIKE:
      case INV.AMETHYST_DOOR_SPIKE:
      case INV.REIDITE_DOOR_SPIKE:
      case INV.STONE_SPIKE:
      case INV.GOLD_SPIKE:
      case INV.DIAMOND_SPIKE:
      case INV.FURNACE:
      case INV.AMETHYST_WALL:
      case INV.AMETHYST_SPIKE:
      case INV.REIDITE_WALL:
      case INV.REIDITE_SPIKE:
      case INV.BRIDGE:
      case INV.ROOF:
      case INV.PLOT:
      case INV.WINDMILL:
      case INV.EXTRACTOR_MACHINE_STONE:
      case INV.EXTRACTOR_MACHINE_GOLD:
      case INV.EXTRACTOR_MACHINE_DIAMOND:
      case INV.EXTRACTOR_MACHINE_AMETHYST:
      case INV.EXTRACTOR_MACHINE_REIDITE:
      case INV.BED:
      case INV.GARLAND:
      case INV.WELL:
      case INV.SIGN:
      case INV.BREAD_OVEN:
      case INV.TOTEM:
      case INV.WOOD_TOWER:
        if (!user.zombie) {
          if (user.craft.preview === tylayshia) {
            user.craft.preview = -1;
          } else {
            user.craft.preview = tylayshia;
          }
        }
        break;
      case INV.SWORD:
      case INV.SWORD_WOOD:
      case INV.SWORD_GOLD:
      case INV.SWORD_DIAMOND:
      case INV.SWORD_AMETHYST:
      case INV.REIDITE_SWORD:
      case INV.PIRATE_SWORD:
      case INV.DRAGON_SWORD:
      case INV.LAVA_SWORD:
      case INV.WOOD_BOW:
      case INV.STONE_BOW:
      case INV.GOLD_BOW:
      case INV.DIAMOND_BOW:
      case INV.AMETHYST_BOW:
      case INV.REIDITE_BOW:
      case INV.DRAGON_BOW:
      case INV.WAND1:
      case INV.WAND2:
      case INV.WOOD_SPEAR:
      case INV.SPEAR:
      case INV.GOLD_SPEAR:
      case INV.DIAMOND_SPEAR:
      case INV.AMETHYST_SPEAR:
      case INV.AMETHYST_REIDITE:
      case INV.DRAGON_SPEAR:
      case INV.LAVA_SPEAR:
      case INV.REIDITE_SPEAR:
      case INV.CRAB_SPEAR:
        if (!user.zombie) {
          user.craft.preview = -1;
          var wynne = world.fast_units[user.uid];
          if (wynne && wynne.right === tylayshia) {
            this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([5, INV.HAND]));
          } else {
            user.weapon.wait = true;
            this.socket[SENDWORD](WINDOW6[JSONWORD6].stringify([5, tylayshia]));
          }
        }
        break;
      case INV.PICK:
      case INV.PICK_WOOD:
      case INV.PICK_GOLD:
      case INV.PICK_DIAMOND:
      case INV.HAMMER:
      case INV.HAMMER_GOLD:
      case INV.HAMMER_DIAMOND:
      case INV.BOOK:
      case INV.HAMMER_AMETHYST:
      case INV.HAMMER_REIDITE:
      case INV.PICK_AMETHYST:
      case INV.PICK_REIDITE:
      case INV.SUPER_HAMMER:
      case INV.SHOVEL:
      case INV.SHOVEL_GOLD:
      case INV.SHOVEL_DIAMOND:
      case INV.SHOVEL_AMETHYST:
      case INV.SPANNER:
      case INV.MACHETE:
      case INV.PITCHFORK:
      case INV.PITCHFORK2:
      case INV.SADDLE:
      case INV.WATERING_CAN_FULL:
      case INV.WOOD_SHIELD:
      case INV.STONE_SHIELD:
      case INV.GOLD_SHIELD:
      case INV.DIAMOND_SHIELD:
      case INV.AMETHYST_SHIELD:
      case INV.REIDITE_SHIELD:
        if (!user.zombie) {
          user.craft.preview = -1;
          var wynne = world.fast_units[user.uid];
          if (wynne && wynne.right === tylayshia) {
            this.socket[SENDWORD](WINDOW7[JSONWORD7].stringify([5, INV.HAND]));
          } else {
            this.socket[SENDWORD](WINDOW8[JSONWORD8].stringify([5, tylayshia]));
          }
        }
        break;
      case INV.BOAT:
      case INV.SLED:
      case INV.MOUNT_BOAR:
      case INV.BABY_MAMMOTH:
      case INV.CRAB_BOSS:
      case INV.BABY_DRAGON:
      case INV.BABY_LAVA:
      case INV.HAWK:
      case INV.PLANE:
      case INV.NIMBUS:
        if (!user.zombie) {
          user.craft.preview = -1;
          var wynne = world.fast_units[user.uid];
          this.socket[SENDWORD](WINDOW8[JSONWORD8].stringify([5, tylayshia]));
        }
        break;
      case INV.CROWN_GREEN:
      case INV.CROWN_ORANGE:
      case INV.CROWN_BLUE:
      case INV.WOOD_HELMET:
      case INV.STONE_HELMET:
      case INV.GOLD_HELMET:
      case INV.DIAMOND_HELMET:
      case INV.AMETHYST_HELMET:
      case INV.REIDITE_HELMET:
      case INV.DIAMOND_PROTECTION:
      case INV.AMETHYST_PROTECTION:
      case INV.REIDITE_PROTECTION:
      case INV.DRAGON_HELMET:
      case INV.LAVA_HELMET:
      case INV.WITCH:
      case INV.CROWN_CRAB:
      case INV.SUPER_DIVING_SUIT:
        var wynne = world.fast_units[user.uid];
        if (wynne && wynne.clothe !== tylayshia) {
          user.helmet.wait = true;
        }
        this.socket[SENDWORD](WINDOW4[JSONWORD5].stringify([5, tylayshia]));
        break;
      case INV.EARMUFFS:
      case INV.HOOD:
      case INV.PEASANT:
      case INV.WINTER_PEASANT:
      case INV.COAT:
      case INV.CAP_SCARF:
      case INV.FUR_HAT:
      case INV.PILOT_HELMET:
      case INV.TURBAN1:
      case INV.TURBAN2:
      case INV.CHRISTMAS_HAT:
      case INV.ELF_HAT:
      case INV.WINTER_HOOD:
      case INV.EXPLORER_HAT:
      case INV.PIRATE_HAT:
      case INV.DIVING_MASK:
        this.socket[SENDWORD](WINDOW9[JSONWORD9].stringify([5, tylayshia]));
        break;
    }
  };
  this.delete_inv = function (baille) {
    this.socket[SENDWORD](WINDOW3[JSONWORD1].stringify([6, baille]));
  };
  this.delete_inv_ok = function (rythm) {
    user.build.wait = true;
    var primus = user.inv.find_item(rythm);
    user.inv.delete_item(rythm, primus);
    user.craft.update();
  };
  this.recycle_inv = function (eldrin, muzna) {
    this.socket[SENDWORD](WINDOW1[JSONWORD7].stringify([29, eldrin]));
  };
  this.delete_one_inv = function (brettley, anaisa) {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([28, brettley]));
  };
  this.delete_one_inv_ok = function (siniyah) {
    user.build.wait = true;
    var dnesha = user.inv.find_item(siniyah);
    user.inv.decrease(siniyah, 1, dnesha);
    user.craft.update();
  };
  this.delete_single_inv = function (paytience) {
    var amberlynne = paytience[1];
    var voni = paytience[2];
    user.build.wait = true;
    var gladies = user.inv.find_item(amberlynne);
    user.inv.decrease(amberlynne, voni, gladies);
    user.craft.update();
  };
  this.stop_attack = function () {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([14]));
  };
  this.send_attack = function (kyl) {
    var swarna = Math.PI * 2;
    this.socket[SENDWORD](WINDOW3[JSONWORD3].stringify([4, Math.floor((kyl + swarna) % swarna * 255 / swarna)]));
  };
  this.send_angle = function (ailan) {
    var tieranee = Math.PI * 2;
    this.socket[SENDWORD](WINDOW3[JSONWORD3].stringify([3, Math.floor((ailan + tieranee) % tieranee * 255 / tieranee)]));
  };
  this.send_move = function (da) {
    this.socket[SENDWORD](WINDOW12[JSONWORD12].stringify([2, da]));
  };
  this.send_command = function (avishka) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([36, avishka]));
  };
  this.send_chat = function (destinye) {
    var maryjean = world.fast_units[user.uid];
    if (user.zombie) {
      if (Math.random() > .5) {
        maryjean.text.push(destinye.substring(0, 25) + " ..." + ZOMBIE_GRUMBLE);
      } else {
        maryjean.text.push(ZOMBIE_GRUMBLE + "... " + destinye.substring(0, 25));
      }
    } else {
      maryjean.text.push(destinye);
    }
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([0, destinye]));
  };
  this.move_units = function (kulsoom) {
    var martinez = player.select.units;
    if (martinez.length == 0) {
      return;
    }
    var vyto = [2];
    var yesnia = [];
    Utils.sub_vector(kulsoom, {x: player.cam.rx, y: player.cam.ry});
    vyto.push(kulsoom.x);
    vyto.push(kulsoom.y);
    for (var wendolyn = 0; wendolyn < martinez.length; wendolyn++) {
      yesnia.push(martinez[wendolyn].oid);
    }
    vyto.push(yesnia);
    this.socket[SENDWORD](WINDOW6[JSONWORD6].stringify(vyto));
  };
  this.cam_delay = 0;
  this.last_cam = {i: 0, j: 0};
  this.update_cam = function () {
    if (old_timestamp - this.cam_delay > CLIENT.CAM_DELAY) {
      this.cam_delay = old_timestamp;
      var tousha = user.cam;
      var taunda = Math.floor(tousha.x / 100);
      var hajj = Math.floor(tousha.y / 100);
      (this.last_cam.i != taunda || this.last_cam.j != hajj) && (this.socket[SENDWORD](WINDOW8[JSONWORD7].stringify([1, Math.floor(-tousha.x), Math.floor(-tousha.y)])), this.last_cam.i = taunda, this.last_cam.j = hajj);
    }
  };
  this.ping_delay = 0;
  this.try_ping = function () {
    old_timestamp - this.ping_delay > CLIENT.PING_DELAY && (this.ping_delay = old_timestamp, this.ping());
  };
  this.lost = function () {
    user.reconnect.enabled = true;
    if (this._current_id != this.socket._current_id) {
      return;
    }
    this._current_id++;
    this.socket.close();
    client.connect();
  };
  this.join_new_team = function (tyrease) {
    this.new_alert(LANG[TEXT.JOIN_TEAM]);
    for (var indu = 1; indu < tyrease.length; indu++) {
      user.team.push(tyrease[indu]);
    }
  };
  this.new_member_team = function (jarik) {
    this.new_alert(world.players[jarik].nickname + LANG[TEXT.JOINED_TEAM]);
    user.team.push(jarik);
    var estelene = document.getElementById("team_box");
    if (game.team_buttons_id != -1 && estelene.style.display == "inline-block") {
      game.team_buttons[game.team_buttons_id].action();
    }
  };
  this.destroy_team = function () {
    this.new_alert(LANG[TEXT.TEAM_DESTROYED]);
    user.totem.wait = true;
    user.team = [];
    document.getElementById("team_box").style.display = "none";
  };
  this.exclude_team = function (morine) {
    if (morine == user.id) {
      this.new_alert(LANG[TEXT.LEFT_TEAM]);
      user.totem.wait = true;
      user.team = [];
      document.getElementById("team_box").style.display = "none";
    } else {
      this.new_alert(world.players[morine].nickname + LANG[TEXT.LEFT_TEAM2]);
      for (var urvi = 0; urvi < user.team.length; urvi++) {
        if (user.team[urvi] == morine) {
          user.team.splice(urvi, 1);
          break;
        }
      }
      var tonatiuh = document.getElementById("team_box");
      if (game.team_buttons_id != -1 && tonatiuh.style.display == "inline-block") {
        game.team_buttons[game.team_buttons_id].action();
      }
    }
  };
  this.steal_token = function (iyeshia) {
    user.alive = false;
    this.new_alert(LANG[TEXT.TOKEN]);
    if (this._current_id != this.socket._current_id) {
      return;
    }
    this._current_id++;
    game.quit(ui.run);
    this.socket.close();
  };
  this.killed = function (anael, aniye) {
    user.alive = false;
    var helenmae = new Uint16Array(aniye);
    var jeanita = new Uint32Array(aniye);
    user.die.howdie = DIE[anael][Math.floor(Math.random() * DIE[anael].length)];
    user.die.score = Utils.simplify_number(world.players[user.id].score);
    user.die.bank = Utils.simplify_number(jeanita[1]);
    user.die.kill = helenmae[1];
    this.new_alert(LANG[TEXT.YOU_DEAD]);
    if (this._current_id != this.socket._current_id) {
      return;
    }
    this._current_id++;
    game.quit(scoreboard.run);
    this.socket.close();
    window.aiptag.cmd.display.push(function () {
      window.aipDisplayTag.display("MFN_starve-io_300x250");
    });
  };
  this.ping = function () {
    this.socket[SENDWORD](CLIENT.PING);
  };
  this.check_state = function () {
    this.socket.readyState == 3 && (this.timeout_server -= CLIENT.TIMEOUT_SERVER);
  };
  this.check_pong = function () {
    if (delta > CLIENT.LOOSE_FOCUS) {
      this.timeout_server = old_timestamp;
    }
    old_timestamp - this.timeout_server > CLIENT.TIMEOUT_SERVER && (this.timeout_server = old_timestamp, this.lost());
  };
  this.handshake = function (jevette) {
    ___adsvid++;
    clearTimeout(this.timeout_handler);
    document.getElementById("commandMainBoxName").innerHTML = this.mode_list[this.current_mode][this.selected_server[this.current_mode]].a;
    document.getElementById("exploreForest").src = "img/forest-leaf.png";
    document.getElementById("exploreWinter").src = "img/winter-flake.png";
    document.getElementById("exploreDesert").src = "img/desert-cactus.png";
    document.getElementById("exploreLava").src = "img/lava-volcano.png";
    this.timeout_server = old_timestamp;
    user.gauges.cold.ed = user.gauges.cold.em;
    user.gauges.hunger.ed = user.gauges.hunger.em;
    user.gauges.thirst.ed = user.gauges.thirst.em;
    user.gauges.oxygen.ed = user.gauges.oxygen.em;
    user.gauges.warm.ed = user.gauges.warm.em;
    user.gauges.l = 1;
    user.gauges.c = 1;
    user.gauges.h = 1;
    user.gauges.t = 1;
    user.gauges.o = 1;
    user.gauges.wa = 1;
    user.bigmap = false;
    game.info_box.display = 0;
    user.inv.can_select = [];
    user.inv.n = [];
    user.inv.max = WORLD.WITHOUT_BAG;
    user.inv.bonus = 0;
    user.inv.bag = 0;
    user.inv.id = -1;
    game.show_recipe_book = 1;
    game.show_clock = 1;
    game.show_quest = 1;
    game.show_market = 1;
    user.alive = true;
    user.inv.drag.stop();
    user.craft.can_craft = [];
    user.craft.crafting = false;
    user.craft.can_build = false;
    user.craft.preview = -1;
    user.craft.id = -1;
    user.craft.workbench = false;
    user.craft.well = false;
    user.craft.fire = false;
    user.craft.water = false;
    user.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
    user.weapon.timeout = new Utils.LinearAnimation(false, 0, 1, 0, .1, 1);
    user.weapon.wait = false;
    user.helmet.timeout = new Utils.LinearAnimation(false, 0, 1, 0, .2, 1);
    user.helmet.wait = false;
    user.build.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
    user.build.wait = false;
    user.totem.id = -1;
    user.totem.pid = -1;
    user.totem.wait = false;
    user.totem.timeout = new Utils.LinearAnimation(false, 0, 1, 0, .03333333333333333, 1);
    game.minimap.marker.x = -1;
    game.minimap.marker.y = -1;
    game.craft_list.open = false;
    game.minimap.players = [];
    user.show_spectators.enabled = false;
    world.mode = jevette[1];
    jevette[20] !== undefined && jevette[21] !== undefined && (world.nw = jevette[20], world.nh = jevette[21], world.w = world.nw * world.dw, world.h = world.nh * world.dh);
    world.islands = jevette[22];
    world.custom_map = jevette[23];
    mika.welcome(jevette[24]);
    mika.new_recipes(jevette[25]);
    user.desert.tempest = jevette[26];
    user.blizzard = 0;
    user.winter.tempest = jevette[27];
    world.generate_world(jevette[19]);
    world.time = jevette[5];
    world.clock.hour = jevette[15];
    world.clock.init = (new Date).getTime();
    game.quests.born = jevette[16];
    world.transition = false;
    user.day = jevette[2];
    game.quests.reset();
    user.team = jevette[8];
    world.units[ITEMS.PLAYERS] = [];
    world.units[ITEMS.FRUIT] = [];
    world.units[ITEMS.WORKBENCH] = [];
    world.units[ITEMS.FIRE] = [];
    world.units[ITEMS.BIG_FIRE] = [];
    world.units[ITEMS.SEED] = [];
    world.units[ITEMS.WHEAT_SEED] = [];
    world.units[ITEMS.PUMPKIN_SEED] = [];
    world.units[ITEMS.TOMATO_SEED] = [];
    world.units[ITEMS.CARROT_SEED] = [];
    world.units[ITEMS.GARLIC_SEED] = [];
    world.units[ITEMS.THORNBUSH_SEED] = [];
    world.units[ITEMS.WATERMELON_SEED] = [];
    world.units[ITEMS.ALOE_VERA_SEED] = [];
    world.units[ITEMS.WALL] = [];
    world.units[ITEMS.STONE_WALL] = [];
    world.units[ITEMS.GOLD_WALL] = [];
    world.units[ITEMS.DIAMOND_WALL] = [];
    world.units[ITEMS.WOOD_DOOR] = [];
    world.units[ITEMS.STONE_DOOR] = [];
    world.units[ITEMS.GOLD_DOOR] = [];
    world.units[ITEMS.DIAMOND_DOOR] = [];
    world.units[ITEMS.WOOD_DOOR_SPIKE] = [];
    world.units[ITEMS.STONE_DOOR_SPIKE] = [];
    world.units[ITEMS.GOLD_DOOR_SPIKE] = [];
    world.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
    world.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
    world.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
    world.units[ITEMS.CHEST] = [];
    world.units[ITEMS.RESURRECTION] = [];
    world.units[ITEMS.EMERALD_MACHINE] = [];
    world.units[ITEMS.SPIKE] = [];
    world.units[ITEMS.STONE_SPIKE] = [];
    world.units[ITEMS.GOLD_SPIKE] = [];
    world.units[ITEMS.DIAMOND_SPIKE] = [];
    world.units[ITEMS.WOLF] = [];
    world.units[ITEMS.BOAR] = [];
    world.units[ITEMS.CRAB_BOSS] = [];
    world.units[ITEMS.BABY_DRAGON] = [];
    world.units[ITEMS.BABY_LAVA] = [];
    world.units[ITEMS.HAWK] = [];
    world.units[ITEMS.TREASURE_CHEST] = [];
    world.units[ITEMS.DEAD_BOX] = [];
    world.units[ITEMS.GIFT] = [];
    world.units[ITEMS.CRATE] = [];
    world.units[ITEMS.BREAD_OVEN] = [];
    world.units[ITEMS.PIRANHA] = [];
    world.units[ITEMS.KRAKEN] = [];
    world.units[ITEMS.CRAB] = [];
    world.units[ITEMS.FOX] = [];
    world.units[ITEMS.BEAR] = [];
    world.units[ITEMS.MAMMOTH] = [];
    world.units[ITEMS.BABY_MAMMOTH] = [];
    world.units[ITEMS.VULTURE] = [];
    world.units[ITEMS.SAND_WORM] = [];
    world.units[ITEMS.DRAGON] = [];
    world.units[ITEMS.LAVA_DRAGON] = [];
    world.units[ITEMS.FLAME] = [];
    world.units[ITEMS.WHEAT_MOB] = [];
    world.units[ITEMS.ALOE_VERA_MOB] = [];
    world.units[ITEMS.PUMPKIN_MOB] = [];
    world.units[ITEMS.GARLIC_MOB] = [];
    world.units[ITEMS.THORNBUSH_MOB] = [];
    world.units[ITEMS.RABBIT] = [];
    world.units[ITEMS.PENGUIN] = [];
    world.units[ITEMS.SPELL] = [];
    world.units[ITEMS.FIREFLY] = [];
    world.units[ITEMS.SPIDER] = [];
    world.units[ITEMS.FURNACE] = [];
    world.units[ITEMS.AMETHYST_WALL] = [];
    world.units[ITEMS.AMETHYST_SPIKE] = [];
    world.units[ITEMS.AMETHYST_DOOR] = [];
    world.units[ITEMS.REIDITE_WALL] = [];
    world.units[ITEMS.REIDITE_SPIKE] = [];
    world.units[ITEMS.REIDITE_DOOR] = [];
    world.units[ITEMS.TOTEM] = [];
    world.units[ITEMS.WOOD_TOWER] = [];
    world.units[ITEMS.BRIDGE] = [];
    world.units[ITEMS.ROOF] = [];
    world.units[ITEMS.PLOT] = [];
    world.units[ITEMS.WINDMILL] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
    world.units[ITEMS.GARLAND] = [];
    world.units[ITEMS.BED] = [];
    world.units[ITEMS.WELL] = [];
    world.units[ITEMS.SIGN] = [];
    world.fast_units = [];
    world.max_units = jevette[7];
    user.id = jevette[9];
    user.uid = user.id * world.max_units;
    audio.loaded && (audio.players[0].uid = user.uid, audio.players[0].free = 0);
    keyboard.clear_directionnal();
    user.cam.change(jevette[3], jevette[10]);
    world.players = [];
    var taseefa = world.players;
    for (var cavanaugh = 0; cavanaugh < jevette[11]; cavanaugh++) {
      taseefa.push(new Player);
    }
    for (var cavanaugh = 0, bard = jevette[4]; cavanaugh < bard.length; cavanaugh++) {
      var toben = taseefa[bard[cavanaugh].i];
      toben.nickname = bard[cavanaugh].n;
      toben.skin = bard[cavanaugh].s;
      toben.accessory = bard[cavanaugh].a;
      toben.crate = bard[cavanaugh].c;
      toben.book = bard[cavanaugh].b;
      toben.dead = bard[cavanaugh].d;
      toben.baglook = bard[cavanaugh].g;
      toben.level = bard[cavanaugh].l;
      toben.score = Utils.restore_number(bard[cavanaugh].p);
      toben.alive = true;
      if (SHOW_ID === 1) {
        toben.nickname += "|" + bard[cavanaugh].i;
      }
    }
    user.ldb.sort();
    if (world.mode === WORLD.MODE_HUNGER_GAMES && world.players[user.id].nickname === "spectator") {
      user.spectator = true;
    } else {
      user.spectator = false;
    }
    if (world.mode === WORLD.MODE_ZOMBIES && world.players[user.id].skin === WORLD.ZOMBIE_SKIN) {
      user.zombie = true;
    } else {
      user.zombie = false;
    }
    if (world.mode === WORLD.MODE_VAMPIRES && world.players[user.id].skin === WORLD.VAMPIRE_SKIN) {
      user.vampire = true;
    } else {
      user.vampire = false;
    }
    Cookies.set("starve_token", user.token);
    if (jevette[12] === 0) {
      user.shop.delay = 0;
      game.quests.restore(jevette[17]);
      var valmore = jevette[14];
      if (valmore[INV.BAG]) {
        user.inv.update_bag_size(1, 0);
      }
      for (var cavanaugh = 0; cavanaugh < valmore.length; cavanaugh++) {
        if (valmore[cavanaugh]) {
          if (cavanaugh == INV.BAG) {
            continue;
          } else {
            if (cavanaugh == INV.HAND) {
              continue;
            } else {
              this.gather([0, cavanaugh, valmore[cavanaugh]]);
            }
          }
        }
      }
      user.shop.open = false;
    } else {
      if (world.mode === WORLD.MODE_LEGACY) {
        this.gather([0, INV.SANDWORM_JUICE, 1]);
      } else {
        if (world.mode === WORLD.MODE_VAMPIRES) {
          if (user.vampire) {
            this.gather([0, INV.ROOF, 4]);
          } else {
            this.gather([0, INV.GARLIC_SEED, 3]);
          }
        }
      }
      world.mode === WORLD.MODE_PVP || world.mode === WORLD.MODE_VAMPIRES || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_LEGACY ? (user.shop.delay = (new Date).getTime(), user.shop.open = true, user.shop.value = jevette[13], game.shop.init()) : (user.shop.delay = 0, user.shop.open = false, user.shop.value = 0);
      user.token_id = jevette[12].toString();
    }
    user.ghost.enabled = jevette[6];
    user.ghost.delay = -1;
    user.ghost.label = null;
    user.ghost.now = -1;
    Cookies.set("starve_token_id", user.token_id);
    if (user.reconnect.enabled) {
      user.reconnect.rotate = 0;
      user.reconnect.enabled = false;
    } else {
      ui.quit(game.run);
      if (ga) {
        ga("send", "event", "Game", "play", "S" + ui.skin + "A" + ui.accessory);
      }
    }
  };
  this.connect = function () {
    this.timeout_number = 0;
    this.connect_timeout();
  };
  this.connect_timeout = async function () {
    console.log("Connect inner");
    let limairy = await this.get_rivet_token(), amayalee = WORLD.RIVET_GAME_MODES[this.current_mode];
    console.log("Current game mode", amayalee, this.current_mode);
    let sameer = this.selected_server[this.current_mode], olaiya, bardara;
    if (sameer == 0) {
      olaiya = RIVET_API + "/lobbies/find";
      bardara = {game_modes: [amayalee]};
    } else {
      console.log("Selecting server", this.server_list, this.selected_server, this.current_mode);
      let joshniel = this.server_list.find(fina => fina.gm == amayalee && fina.idx == sameer);
      console.log("Selected server", joshniel);
      olaiya = RIVET_API + "/lobbies/join";
      bardara = {lobby_id: joshniel.id};
    }
    let symia = {Authorization: "Bearer " + limairy};
    if (limairy) {}
    let annielaurie = await fetch(olaiya, {method: "POST", headers: symia, body: JSON.stringify(bardara)});
    if (!annielaurie.ok) {
      alert("Failed to join lobby");
      return;
    }
    let shatika = await annielaurie.json();
    console.log("Lobby", shatika);
    let dashawnda = shatika.lobby.ports.default, alexi = dashawnda.host, annay = dashawnda.is_tls, keshunna = shatika.lobby.player.token, cedra = "ws" + (annay ? "s" : "") + "://" + alexi + "?token=" + keshunna;
    console.log("Socket address", cedra);
    this.socket = new window.WebSocket(cedra);
    this.socket.binaryType = "arraybuffer";
    this.socket._current_id = this._current_id;
    this.socket.onmessage = function (sharde) {
      if (this._current_id != mika._current_id) {
        return;
      }
      if (typeof sharde.data == "string") {
        var solaris = JSON.parse(sharde.data);
        switch (solaris[0]) {
          case 0:
            mika.chat(solaris);
            break;
          case 1:
            mika.kick(solaris[1]);
            break;
          case 2:
            mika.new_player(solaris);
            break;
          case 3:
            mika.handshake(solaris);
            break;
          case 4:
            mika.message(solaris[1]);
            break;
          case 5:
            mika.commands(solaris);
            break;
          case 6:
            mika.welcome(solaris[1]);
            break;
        }
      } else {
        var tekelia = new Uint8Array(sharde.data);
        switch (tekelia[0]) {
          case 0:
            mika.units(sharde.data, tekelia, false);
            break;
          case 1:
            mika.units(sharde.data, tekelia, true);
            break;
          case 2:
            mika.cancel_craft();
            break;
          case 3:
            mika.gather(new Uint16Array(sharde.data));
            break;
          case 4:
            mika.old_version();
            break;
          case 5:
            mika.full();
            break;
          case 6:
            mika.dont_harvest();
            break;
          case 7:
            mika.hitten(sharde.data);
            break;
          case 8:
            mika.build_stop(tekelia[1]);
            break;
          case 9:
            mika.build_ok(tekelia[1]);
            break;
          case 10:
            mika.inv_full();
            break;
          case 11:
            mika.decrease_item(tekelia[1], tekelia[2]);
            break;
          case 12:
            mika.workbench(tekelia[1]);
            break;
          case 13:
            mika.hitten_other(tekelia, sharde.data);
            break;
          case 14:
            mika.mute();
            break;
          case 15:
            mika.kill_player(tekelia[1]);
            break;
          case 16:
            mika.gauges(tekelia[1], tekelia[2], tekelia[3], tekelia[4], tekelia[5], tekelia[6], tekelia[7]);
            break;
          case 17:
            mika.recover_focus(sharde.data);
            break;
          case 18:
            mika.empty_res();
            break;
          case 19:
            mika.fire(tekelia[1]);
            break;
          case 20:
            mika.survive();
            break;
          case 21:
            mika.leaderboard(sharde.data);
            break;
          case 22:
            mika.get_time(tekelia[1]);
            break;
          case 23:
            mika.set_cam(sharde.data);
            break;
          case 24:
            mika.accept_build(tekelia[1]);
            break;
          case 25:
            mika.killed(tekelia[1], sharde.data);
            break;
          case 26:
            mika.minimap(tekelia);
            break;
          case 27:
            mika.fail_restore();
            break;
          case 28:
            mika.ghost(tekelia[1]);
            break;
          case 29:
            mika.reborn();
            break;
          case 30:
            mika.steal_token();
            break;
          case 31:
            mika.join_new_team(tekelia);
            break;
          case 32:
            mika.exclude_team(tekelia[1]);
            break;
          case 33:
            mika.new_member_team(tekelia[1]);
            break;
          case 34:
            mika.destroy_team();
            break;
          case 35:
            mika.kit_ok(tekelia[1]);
            break;
          case 36:
            mika.water(tekelia[1]);
            break;
          case 37:
            mika.gauges_life(tekelia[1], tekelia[2]);
            break;
          case 38:
            mika.gauges_food(tekelia[1]);
            break;
          case 39:
            mika.gauges_water(tekelia[1]);
            break;
          case 40:
            mika.get_bag();
            break;
          case 41:
            mika.verified_account(tekelia);
            break;
          case 42:
            mika.succeed_quest(tekelia[1]);
            break;
          case 43:
            mika.fail_quest(tekelia[1]);
            break;
          case 44:
            mika.claimed(tekelia[1]);
            break;
          case 45:
            mika.recycle_ok(tekelia[1]);
            break;
          case 46:
            mika.recycle_stop(tekelia[1]);
            break;
          case 47:
            mika.well(tekelia[1]);
            break;
          case 48:
            mika.no_resources();
            break;
          case 50:
            mika.decrease_item2(tekelia[1], tekelia[2], tekelia[3]);
            break;
          case 51:
            mika.blocked();
            break;
          case 52:
            mika.delete_inv_ok(tekelia[1]);
            break;
          case 53:
            mika.delete_one_inv_ok(tekelia[1]);
            break;
          case 54:
            mika.account_ok();
            break;
          case 55:
            mika.gauges_warm(tekelia[1]);
            break;
          case 56:
            mika.gauges_cold(tekelia[1]);
            break;
          case 57:
            mika.new_version();
            break;
          case 58:
            mika.wrong_password();
            break;
          case 59:
            mika.clean_inventory();
            break;
          case 60:
            mika.hide_shop_kit();
            break;
          case 61:
            ;
            user.cam.forcedDelay = .2, user.cam.delay = 3;
            break;
          case 62:
            mika.delete_single_inv(new Uint16Array(sharde.data));
            break;
          case 63:
            mika.hide_clock();
            break;
          case 64:
            mika.hide_recipe_book();
            break;
          case 65:
            mika.hide_quest();
            break;
          case 66:
            mika.hide_market();
            break;
          case 67:
            mika.explorer_quest(tekelia[1]);
            break;
          case 68:
            mika.sand_tempest(tekelia[1]);
            break;
          case 69:
            mika.blizzard(tekelia[1]);
            break;
          case 70:
            mika.blizzard_status(tekelia[1]);
            break;
          case 71:
            mika.bandage(tekelia[1]);
            break;
        }
      }
    };
    this.socket.onopen = function () {
      clearTimeout(mika.timeout_handler);
      user.newToken = user.newToken || Utils.getURLData("token");
      Utils.get_recaptcha_token().then(glena => {
        mika.socket[SENDWORD](WINDOW10[JSONWORD9].stringify([ui.nickname.input.value, screen.width + 200, screen.height + 200, CLIENT.VERSION_NUMBER, user.token, user.token_id, user.reconnect.enabled ? 1 : 0, ui.skin, ui.accessory, ui.bag, ui.book, ui.crate, ui.dead, userId === undefined ? 0 : userId, userToken === undefined ? 0 : userToken.substring(userToken.length - 50), PASSWORD, user.newToken, glena]));
        user.newToken = undefined;
        mika.timeout_handler = setTimeout(mika.timeout, CLIENT.TIMEOUT_TIME);
      });
    };
  };
}
var WORLD = {DAY: 48e4, WITHOUT_BAG: 10, WITH_BAG: 16, BAG_SIZE: 6, GHOST_DELAY: 60, TOP: 1, BOTTOM: 2, LEFT: 4, RIGHT: 8, ROTATE: 10, DIST_CHEST: 100, DIST_FURNACE: 100, DIST_WINDMILL: 100, DIST_WELL: 100, DIST_BREAD_OVEN: 100, DIST_SIGN: 100, DIST_TOTEM: 100, DIST_SIGN: 100, DIST_RESURRECTION: 100, DIST_EXTRACTOR_MACHINE: 100, MODE_PVP: 0, MODE_HUNGER_GAMES: 1, MODE_ZOMBIES: 2, MODE_VAMPIRES: 3, MODE_LEGACY: 4, MODE_BR: 5, MODE_COMMUNITY: 6, MODE_EXPERIMENTAL: 7, RIVET_GAME_MODES: {0: "normal", 2: "zombies", 3: "vampires", 4: "forest", 7: "experimental"}, ZOMBIE_SKIN: 0, VAMPIRE_SKIN: 0, ROBOT_SKIN: 30, GHOST: 2, GHOST_DELAY: 6e4, WT1SY: 0, LWT1SY: 0, WT1EY: 50, WT2SY: 0, LWT2SY: 40, WT2EY: 39, LWT2: 830, FLOAM_X: 25, FLOAM_Y: 8, W1SX: 0, LW1SX: 0, W1EX: 200, W2SX: 0, LW2SX: 250, W2EX: 150, W3SX: 0, LW3SX: 350, W3EX: 100, LSANDX: 700, SEED: 39879}, SLOW_DOWN = [];
for (var i = 0; i < 500; i++) {
  SLOW_DOWN[i] = 0;
}
SLOW_DOWN[SPRITE.SUPER_DIVING_SUIT] = 1;
SLOW_DOWN[SPRITE.SWORD_WOOD] = 1;
SLOW_DOWN[SPRITE.SWORD] = 1;
SLOW_DOWN[SPRITE.SWORD_GOLD] = 1;
SLOW_DOWN[SPRITE.SWORD_DIAMOND] = 1;
SLOW_DOWN[SPRITE.SWORD_AMETHYST] = 1;
SLOW_DOWN[SPRITE.REIDITE_SWORD] = 1;
SLOW_DOWN[SPRITE.PIRATE_SWORD] = 1;
SLOW_DOWN[SPRITE.DRAGON_SWORD] = 1;
SLOW_DOWN[SPRITE.LAVA_SWORD] = 1;
SLOW_DOWN[SPRITE.SPEAR] = 1;
SLOW_DOWN[SPRITE.GOLD_SPEAR] = 1;
SLOW_DOWN[SPRITE.DIAMOND_SPEAR] = 1;
SLOW_DOWN[SPRITE.AMETHYST_SPEAR] = 1;
SLOW_DOWN[SPRITE.REIDITE_SPEAR] = 1;
SLOW_DOWN[SPRITE.DRAGON_SPEAR] = 1;
SLOW_DOWN[SPRITE.LAVA_SPEAR] = 1;
SLOW_DOWN[SPRITE.WOOD_SPEAR] = 1;
SLOW_DOWN[SPRITE.CRAB_SPEAR] = 1;
var QUESTS = [{time: 288e4}, {time: 144e4}, {time: 192e4}, {time: 144e4}, {time: 288e4}, {time: 24e5}, {time: 24e5}, {time: 48e5}, {time: 288e4}, {time: 336e4}, {time: 288e4}, {time: 384e4}, {time: 336e4}], ITEMS = {PLAYERS: 0, FIRE: 1, WORKBENCH: 2, SEED: 3, WALL: 4, SPIKE: 5, BIG_FIRE: 6, STONE_WALL: 7, GOLD_WALL: 8, DIAMOND_WALL: 9, WOOD_DOOR: 10, CHEST: 11, STONE_SPIKE: 12, GOLD_SPIKE: 13, DIAMOND_SPIKE: 14, STONE_DOOR: 15, GOLD_DOOR: 16, DIAMOND_DOOR: 17, FURNACE: 18, AMETHYST_WALL: 19, AMETHYST_SPIKE: 20, AMETHYST_DOOR: 21, RESURRECTION: 22, EMERALD_MACHINE: 23, EXTRACTOR_MACHINE_STONE: 24, EXTRACTOR_MACHINE_GOLD: 25, EXTRACTOR_MACHINE_DIAMOND: 26, EXTRACTOR_MACHINE_AMETHYST: 27, EXTRACTOR_MACHINE_REIDITE: 28, TOTEM: 29, BRIDGE: 30, WHEAT_SEED: 31, WINDMILL: 32, PLOT: 33, BREAD_OVEN: 34, WELL: 35, SIGN: 36, PUMPKIN_SEED: 37, ROOF: 38, GARLIC_SEED: 39, THORNBUSH_SEED: 40, BED: 41, GARLAND: 42, TOMATO_SEED: 43, CARROT_SEED: 44, WOOD_DOOR_SPIKE: 45, STONE_DOOR_SPIKE: 46, GOLD_DOOR_SPIKE: 47, DIAMOND_DOOR_SPIKE: 48, AMETHYST_DOOR_SPIKE: 49, REIDITE_WALL: 50, REIDITE_DOOR: 51, REIDITE_SPIKE: 52, REIDITE_DOOR_SPIKE: 53, WATERMELON_SEED: 54, ALOE_VERA_SEED: 55, WOOD_TOWER: 56, WOLF: 60, SPIDER: 61, FOX: 62, BEAR: 63, DRAGON: 64, PIRANHA: 65, KRAKEN: 66, CRAB: 67, FLAME: 68, LAVA_DRAGON: 69, BOAR: 70, CRAB_BOSS: 71, BABY_DRAGON: 72, BABY_LAVA: 73, HAWK: 74, VULTURE: 75, SAND_WORM: 76, BABY_MAMMOTH: 77, MAMMOTH: 78, WHEAT_MOB: 79, RABBIT: 80, TREASURE_CHEST: 81, DEAD_BOX: 82, PUMPKIN_MOB: 83, GARLIC_MOB: 84, THORNBUSH_MOB: 85, CRATE: 86, GIFT: 87, PENGUIN: 88, ALOE_VERA_MOB: 89, FIREFLY: 90, SPELL: 91, FRUIT: 100}, EXTRACTORS = [[ITEMS.EXTRACTOR_MACHINE_STONE, INV.STONE], [ITEMS.EXTRACTOR_MACHINE_GOLD, INV.GOLD], [ITEMS.EXTRACTOR_MACHINE_DIAMOND, INV.DIAMOND], [ITEMS.EXTRACTOR_MACHINE_AMETHYST, INV.AMETHYST], [ITEMS.EXTRACTOR_MACHINE_REIDITE, INV.REIDITE]];
function Player() {
  this.nickname = "";
  this.skin = 0;
  this.accessory = 0;
  this.bag = 0;
  this.baglook = 0;
  this.book = 0;
  this.crate = 0;
  this.dead = 0;
  this.level = 0;
  this.label = null;
  this.label_winter = null;
  this.ldb_label = null;
  this.alive = false;
  this.score = 0;
}
function Item(jonta, keondre, maylis, isoken, ursula, stella, va, jiavanna, jasa, martisa) {
  this.type = jonta;
  this.pid = keondre;
  this.id = maylis;
  this.x = isoken;
  this.y = ursula;
  this.angle = stella;
  this.nangle = stella;
  this.action = va;
  this.info = jiavanna;
  this.extra = martisa;
  this.r = {x: isoken, y: ursula};
  this.speed = jasa;
  if (world) {
    this.uid = keondre * world.max_units + maylis;
  }
  switch (jonta) {
    case ITEMS.PLAYERS:
      ;
      this.player = world.players[this.pid], this.skin = this.player.skin, this.baglook = this.player.baglook, this.book = this.player.book, this.accessory = this.player.accessory, this.dist_forest = -1000000, this.dist_lava = -1000000, this.dist_winter = -1000000, this.dist_desert = -1000000, this.dist_water = -1000000, this.dist_sand = -1000000, this.dist_dragon = -1000000, this.zombie = world.mode === WORLD.MODE_ZOMBIES && this.skin === WORLD.ZOMBIE_SKIN ? true : false, this.vampire = world.mode === WORLD.MODE_VAMPIRES && this.skin === WORLD.VAMPIRE_SKIN ? true : false, this.superzombie = this.zombie && this.player.nickname === "  " ? true : false, this.foot = [], this.tower = 0, this.move_effect = true, this.id_foot = 0, this.fly = 0, this.swim = [], this.r = {x: isoken, y: ursula}, this.draw = draw_player, this.draw_vehicle = draw_vehicle, this.vehicle_fx1 = 0, this.vehicle_fx2 = 0, this.vehicle_fx3 = 0, this.vehicle_fx4 = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, .5, 1), this.vehicle_fx5 = 0, this.tower_fx = 0, this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3), this.heal = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3), this.freeze = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3), this.starve = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3), this.idle = new Utils.LinearAnimation(true, 0, 2.25, -1.5, 3.75, 7.5), this.walk = new Utils.LinearAnimation(true, 0, 7.5, -3, 22.5, 33.75), this.attack = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 3, 6, 9), this.slow_attack = 0, this.web = new Utils.LinearAnimation(false, .6, .6, 0, 1, 3), this.move_head = this.superzombie ? new Utils.LinearAnimation(true, 0, 2.25, -1.5, 2.75, 5.5) : 0, this.angle_init = 0, this.text_ease = 0, this.text_effect = [], this.text_move = [], this.text = [], this.label = [], this.draw_text = draw_chat, this.hand = true, this.right = -1, this.vehicle = -1, this.action = STATE.IDLE, this.collide = false, this.clothe = 0, this.ghost = false, this.bubbles = [], this.bag = 0, this.sid = -1, this.update = function (deegan) {
        if (this.info & 32768) {
          this.collide = true;
          this.info = -32769 & this.info;
        } else {
          this.collide = false;
        }
        if (this.info & 16384) {
          this.info = -16385 & this.info;
          this.bag = 1;
        } else {
          this.bag = 0;
        }
        this.clothe = Math.floor(this.info / 128);
        this.info -= 128 * this.clothe;
        if (this.info === INV.HAND || this.superzombie) {
          this.right = -1;
        } else {
          this.right = this.info;
        }
        this.tower = world.find_tower(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
        this.vehicle = this.extra & 255;
        if (this.right === WORLD.GHOST) {
          this.ghost = true;
        } else {
          this.ghost = false;
        }
        if (SLOW_DOWN[this.right]) {
          this.weapon = true;
        } else {
          this.weapon = false;
        }
        if (deegan & STATE.WEB) {
          this.web.o = false;
          this.web.v = .6;
        } else {
          if (deegan & STATE.COLD) {
            this.freeze.o = false;
            this.freeze.v = .6;
          } else {
            deegan & STATE.HEAL && (this.heal.o = false, this.heal.v = .6);
          }
        }
        deegan & STATE.HUNGER && (this.starve.o = false, this.starve.v = .6);
        deegan & STATE.HURT && (this.hit.o = false, this.hit.v = .6);
        if (deegan & STATE.ATTACK) {
          this.slow_attack = CLIENT.SLOW_ATTACK;
          if (audio.run && this.sid !== -1) {
            audio.players[this.sid].swing(SOUND[this.right]);
          }
        }
      }, this.update();
      break;
    case ITEMS.EMERALD_MACHINE:
      ;
      this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw_bg = draw_emerald_machine_halo, this.draw_fg = draw_emerald_machine, this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, .01, .01), this.rotate1 = 0, this.rotate2 = 0, this.draw_life = draw_life;
      break;
    case ITEMS.RESURRECTION:
      ;
      this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw_bg = draw_resurrection_halo, this.draw_fg = draw_resurrection, this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, .01, .01), this.rotate1 = 0, this.rotate2 = 0;
      break;
    case ITEMS.FIRE:
    case ITEMS.BIG_FIRE:
      ;
      this.draw_bg = draw_fire_ground, this.draw_fg = draw_fire_halo, this.fire = new Utils.LinearAnimation(false, 1, 1.03, .98, .3, .3), this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, .01, .01), this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, .01, .01), this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.TOMATO_SEED:
      ;
      this.draw_bg = draw_tomato, this.draw_fg = draw_tomato_fruit, this.ground = new Utils.LinearAnimation(false, .9, 1.05, .9, .2, .2), this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.fruits = [];
      for (var dorianne = 0; dorianne < 3; dorianne++) {
        this.fruits.push({draw: draw_breath_2, breath: new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2)});
      }
      ;
      this.fruits[0].x = this.x - 16.5, this.fruits[0].y = this.y - 15.5, this.fruits[0].angle = this.angle, this.fruits[1].x = this.x + 36, this.fruits[1].y = this.y + 17, this.fruits[1].angle = this.angle, this.fruits[2].x = this.x - 18.5, this.fruits[2].y = this.y + 39, this.fruits[2].angle = this.angle;
      break;
    case ITEMS.SEED:
      ;
      this.draw_bg = draw_seed, this.draw_fg = draw_plant, this.ground = new Utils.LinearAnimation(false, .9, 1.05, .9, .2, .2), this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.fruits = [];
      for (var dorianne = 0; dorianne < 3; dorianne++) {
        this.fruits.push({draw: draw_breath, breath: new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2)});
      }
      ;
      this.fruits[0].x = this.x - 16.5, this.fruits[0].y = this.y - 15.5, this.fruits[1].x = this.x - 5.5, this.fruits[1].y = this.y + 7.5, this.fruits[2].x = this.x + 18, this.fruits[2].y = this.y - 5;
      break;
    case ITEMS.BABY_MAMMOTH:
      ;
      this.draw = draw_baby_mammoth, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.BOAR:
      ;
      this.draw = draw_boar, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.CRAB_BOSS:
      ;
      this.draw = draw_crab_boss, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.breathl = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.breathr = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3), this.heal = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.CRAB:
      ;
      this.draw = draw_crab, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.breathl = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.breathr = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3), this.heal = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.FLAME:
      ;
      this.draw = draw_simple_mobs_hd, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.FIREFLY:
      ;
      this.draw = draw_simple_mobs, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .5, .5), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.SPELL:
      ;
      this.spell = this.info & 15, this.fly = this.extra & 1, this.born = 0, this.x = this.info, this.y = this.extra, this.draw = draw_spell, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .6, .6);
      break;
    case ITEMS.RABBIT:
    case ITEMS.WOLF:
    case ITEMS.SPIDER:
    case ITEMS.FOX:
    case ITEMS.BEAR:
    case ITEMS.MAMMOTH:
    case ITEMS.PIRANHA:
    case ITEMS.KRAKEN:
    case ITEMS.PENGUIN:
      ;
      this.draw = draw_simple_mobs, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.SIGN:
      ;
      this.draw = draw_sign, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.BREAD_OVEN:
      ;
      this.draw_fg = draw_bread_oven_smog, this.draw = draw_bread_oven, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.up = new Utils.LinearAnimation(false, 1, 1.03, .98, .1, .1), this.smog = [];
      break;
    case ITEMS.GIFT:
      this.angle = Math.random() * Math.PI / 2;
    case ITEMS.CRATE:
    case ITEMS.DEAD_BOX:
      ;
      this.draw = draw_crate, this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.TREASURE_CHEST:
      ;
      this.draw = draw_simple_mobs_2, this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.LAVA_DRAGON:
      ;
      this.scale = 1, this.draw = draw_lava_dragon, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.SAND_WORM:
      ;
      this.dig = 0, this.ground = [], this.groundTimer = 0, this.draw_ground = draw_sand_worm_ground, this.draw = draw_sand_worm, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.VULTURE:
      ;
      this.x = this.info, this.y = this.extra, this.scale = 1, this._alpha = 0, this.draw = draw_vulture, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.HAWK:
      ;
      this.x = this.info, this.y = this.extra, this.scale = 1, this._alpha = 0, this.draw = draw_hawk, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.BABY_LAVA:
      ;
      this.scale = 1, this.draw = draw_baby_lava, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.BABY_DRAGON:
      ;
      this.scale = 1, this.draw = draw_baby_dragon, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.DRAGON:
      ;
      this.scale = 1, this.draw = draw_dragon, this.breath = new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(false, .6, .6, 0, 5, 3);
      break;
    case ITEMS.FRUIT:
      this.fruits = [];
      for (var dorianne = 0; dorianne < 5; dorianne++) {
        this.fruits.push({draw: draw_breath, breath: new Utils.LinearAnimation(false, .9 + Math.random() * .15, 1.05, .9, .2, .2)});
      }
      switch (this.id % 3) {
        case 0:
          ;
          this.fruits[0].x = this.x - 20.5, this.fruits[0].y = this.y - 22.5, this.fruits[1].x = this.x - 35.5, this.fruits[1].y = this.y + 7.5, this.fruits[2].x = this.x + 7.5, this.fruits[2].y = this.y - 30, this.fruits[3].x = this.x + 22.5, this.fruits[3].y = this.y, this.fruits[4].x = this.x - 7.5, this.fruits[4].y = this.y + 14.5;
          break;
        case 1:
          ;
          this.fruits[0].x = this.x - 30.5, this.fruits[0].y = this.y - 22.5, this.fruits[1].x = this.x - 15.5, this.fruits[1].y = this.y + 7.5, this.fruits[2].x = this.x + 15.5, this.fruits[2].y = this.y - 30, this.fruits[3].x = this.x + 12.5, this.fruits[3].y = this.y + 5, this.fruits[4].x = this.x - 40.5, this.fruits[4].y = this.y + 14.5;
          break;
        case 2:
          ;
          this.fruits[0].x = this.x - 20.5, this.fruits[0].y = this.y - 20.5, this.fruits[1].x = this.x - 35.5, this.fruits[1].y = this.y + 15.5, this.fruits[2].x = this.x + 7.5, this.fruits[2].y = this.y - 17, this.fruits[3].x = this.x + 22.5, this.fruits[3].y = this.y + 5, this.fruits[4].x = this.x - 7.5, this.fruits[4].y = this.y + 1.5;
          break;
      }
      break;
    case ITEMS.WHEAT_SEED:
      ;
      this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw = draw_wheat, this.ground = new Utils.LinearAnimation(false, .9, 1.05, .9, .2, .2), this.wind = new Utils.LinearAnimation(false, 0, Math.PI / 30, -Math.PI / 30, .06, .06);
      break;
    case ITEMS.THORNBUSH_SEED:
      ;
      this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw = draw_thornbush, this.ground = new Utils.LinearAnimation(false, .9, 1.05, .9, .2, .2);
      break;
    case ITEMS.GARLIC_SEED:
      ;
      this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw = draw_garlic, this.ground = new Utils.LinearAnimation(false, .9, 1.05, .9, .2, .2);
      break;
    case ITEMS.CARROT_SEED:
      ;
      this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw = draw_carrot, this.ground = new Utils.LinearAnimation(false, .9, 1.05, .9, .2, .2);
      break;
    case ITEMS.ALOE_VERA_SEED:
      ;
      this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw = draw_aloe_vera, this.ground = new Utils.LinearAnimation(false, .9, 1.05, .9, .2, .2);
      break;
    case ITEMS.WATERMELON_SEED:
      ;
      this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw = draw_watermelon, this.ground = new Utils.LinearAnimation(false, .9, 1.05, .9, .2, .2);
      break;
    case ITEMS.PUMPKIN_SEED:
      ;
      this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw = draw_pumpkin, this.ground = new Utils.LinearAnimation(false, .9, 1.05, .9, .2, .2);
      break;
    case ITEMS.EXTRACTOR_MACHINE_STONE:
      ;
      this.draw = draw_extractor_stone, this.rotate = 0, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.EXTRACTOR_MACHINE_GOLD:
      ;
      this.draw = draw_extractor_gold, this.rotate = 0, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
      ;
      this.draw = draw_extractor_diamond, this.rotate = 0, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
      ;
      this.draw = draw_extractor_amethyst, this.rotate = 0, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.EXTRACTOR_MACHINE_REIDITE:
      ;
      this.draw = draw_extractor_reidite, this.rotate = 0, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.WINDMILL:
      ;
      this.draw_bg = draw_windmill_head, this.draw_fg = draw_windmill_wings, this.rotate = 0, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.ROOF:
      ;
      this.draw = draw_roof, this.j = Math.floor(this.x / 100), this.i = Math.floor(this.y / 100), this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.opacity = 1, this.draw_life = draw_life_small;
      break;
    case ITEMS.GARLAND:
      ;
      this.draw = draw_garland, this.halo = new Utils.LinearAnimation(false, 1, 1.15, 1, .3, .3), this.color = 0, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.PLOT:
    case ITEMS.WORKBENCH:
    case ITEMS.WOOD_TOWER:
    case ITEMS.WELL:
    case ITEMS.TOTEM:
      ;
      this.draw = draw_simple_item, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      break;
    case ITEMS.BRIDGE:
      ;
      this.draw = draw_simple_item, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw_life = draw_life_small;
      break;
    case ITEMS.WALL:
    case ITEMS.STONE_WALL:
    case ITEMS.GOLD_WALL:
    case ITEMS.DIAMOND_WALL:
    case ITEMS.AMETHYST_WALL:
    case ITEMS.REIDITE_WALL:
    case ITEMS.SPIKE:
    case ITEMS.STONE_SPIKE:
    case ITEMS.GOLD_SPIKE:
    case ITEMS.DIAMOND_SPIKE:
    case ITEMS.AMETHYST_SPIKE:
    case ITEMS.REIDITE_SPIKE:
      ;
      this.draw = draw_simple_item, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw_life = draw_life;
      break;
    case ITEMS.BED:
      ;
      this.draw = draw_bed, this.opacity = 1, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0};
      var fredis = this.angle % (Math.PI / 2);
      if (fredis < Math.PI / 4) {
        this.angle -= fredis;
      } else {
        this.angle += Math.PI / 2 - fredis;
      }
      break;
    case ITEMS.WHEAT_MOB:
      ;
      this.draw = draw_wheat_seed, this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.ALOE_VERA_MOB:
      ;
      this.draw = draw_aloe_vera_mob, this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.PUMPKIN_MOB:
      ;
      this.draw = draw_pumpkin_seed, this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.GARLIC_MOB:
      ;
      this.draw = draw_garlic_seed, this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.THORNBUSH_MOB:
      ;
      this.draw = draw_thornbush_seed, this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.CHEST:
      ;
      this.update = function (daysi) {
        this.lock = this.info & 8192 ? 1 : 0;
        this.info = this.info & 8191;
        this.action = daysi;
      }, this.draw = draw_chest, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.lock = 0, this.update(this.action);
      break;
    case ITEMS.WOOD_DOOR_SPIKE:
    case ITEMS.STONE_DOOR_SPIKE:
    case ITEMS.GOLD_DOOR_SPIKE:
    case ITEMS.DIAMOND_DOOR_SPIKE:
    case ITEMS.AMETHYST_DOOR_SPIKE:
    case ITEMS.REIDITE_DOOR_SPIKE:
    case ITEMS.WOOD_DOOR:
    case ITEMS.STONE_DOOR:
    case ITEMS.GOLD_DOOR:
    case ITEMS.DIAMOND_DOOR:
    case ITEMS.AMETHYST_DOOR:
    case ITEMS.REIDITE_DOOR:
      ;
      this.draw = draw_door, this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.draw_life = draw_life;
      break;
    case ITEMS.FURNACE:
      ;
      this.draw_bg = draw_furnace_ground, this.draw = draw_furnace, this.draw_fg = draw_furnace_halo, this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, .02, .02), this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, .04, .04), this.hit = {anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10), update: false, angle: 0}, this.update = function (pierson) {
        this.action = pierson;
      };
      break;
  }
}
function World(brealeigh) {
  this.mode = WORLD.MODE_PVP;
  this.max_units = brealeigh;
  this.custom_map = 0;
  this.islands = 6;
  this.players = [];
  this.units = [];
  this.units[ITEMS.PLAYERS] = [];
  this.units[ITEMS.FRUIT] = [];
  this.units[ITEMS.RABBIT] = [];
  this.units[ITEMS.WOLF] = [];
  this.units[ITEMS.CRAB] = [];
  this.units[ITEMS.BOAR] = [];
  this.units[ITEMS.BABY_MAMMOTH] = [];
  this.units[ITEMS.CRAB_BOSS] = [];
  this.units[ITEMS.BABY_DRAGON] = [];
  this.units[ITEMS.BABY_LAVA] = [];
  this.units[ITEMS.HAWK] = [];
  this.units[ITEMS.PIRANHA] = [];
  this.units[ITEMS.KRAKEN] = [];
  this.units[ITEMS.FOX] = [];
  this.units[ITEMS.PENGUIN] = [];
  this.units[ITEMS.SPELL] = [];
  this.units[ITEMS.FIREFLY] = [];
  this.units[ITEMS.BEAR] = [];
  this.units[ITEMS.MAMMOTH] = [];
  this.units[ITEMS.DRAGON] = [];
  this.units[ITEMS.LAVA_DRAGON] = [];
  this.units[ITEMS.FLAME] = [];
  this.units[ITEMS.WHEAT_MOB] = [];
  this.units[ITEMS.ALOE_VERA_MOB] = [];
  this.units[ITEMS.PUMPKIN_MOB] = [];
  this.units[ITEMS.GARLIC_MOB] = [];
  this.units[ITEMS.THORNBUSH_MOB] = [];
  this.units[ITEMS.TREASURE_CHEST] = [];
  this.units[ITEMS.DEAD_BOX] = [];
  this.units[ITEMS.CRATE] = [];
  this.units[ITEMS.BREAD_OVEN] = [];
  this.units[ITEMS.SIGN] = [];
  this.units[ITEMS.SPIDER] = [];
  this.units[ITEMS.WORKBENCH] = [];
  this.units[ITEMS.FIRE] = [];
  this.units[ITEMS.BIG_FIRE] = [];
  this.units[ITEMS.SEED] = [];
  this.units[ITEMS.SPIKE] = [];
  this.units[ITEMS.STONE_SPIKE] = [];
  this.units[ITEMS.GOLD_SPIKE] = [];
  this.units[ITEMS.DIAMOND_SPIKE] = [];
  this.units[ITEMS.AMETHYST_SPIKE] = [];
  this.units[ITEMS.REIDITE_SPIKE] = [];
  this.units[ITEMS.WALL] = [];
  this.units[ITEMS.STONE_WALL] = [];
  this.units[ITEMS.GOLD_WALL] = [];
  this.units[ITEMS.DIAMOND_WALL] = [];
  this.units[ITEMS.AMETHYST_WALL] = [];
  this.units[ITEMS.REIDITE_WALL] = [];
  this.units[ITEMS.BED] = [];
  this.units[ITEMS.WOOD_DOOR] = [];
  this.units[ITEMS.STONE_DOOR] = [];
  this.units[ITEMS.GOLD_DOOR] = [];
  this.units[ITEMS.DIAMOND_DOOR] = [];
  this.units[ITEMS.AMETHYST_DOOR] = [];
  this.units[ITEMS.REIDITE_DOOR] = [];
  this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
  this.units[ITEMS.STONE_DOOR_SPIKE] = [];
  this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
  this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
  this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
  this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
  this.units[ITEMS.FURNACE] = [];
  this.units[ITEMS.TOTEM] = [];
  this.units[ITEMS.WOOD_TOWER] = [];
  this.units[ITEMS.CHEST] = [];
  this.units[ITEMS.RESURRECTION] = [];
  this.units[ITEMS.EMERALD_MACHINE] = [];
  this.units[ITEMS.BRIDGE] = [];
  this.units[ITEMS.ROOF] = [];
  this.units[ITEMS.PLOT] = [];
  this.units[ITEMS.WHEAT_SEED] = [];
  this.units[ITEMS.ALOE_VERA_SEED] = [];
  this.units[ITEMS.PUMPKIN_SEED] = [];
  this.units[ITEMS.TOMATO_SEED] = [];
  this.units[ITEMS.CARROT_SEED] = [];
  this.units[ITEMS.WATERMELON_SEED] = [];
  this.units[ITEMS.GARLIC_SEED] = [];
  this.units[ITEMS.THORNBUSH_SEED] = [];
  this.units[ITEMS.WINDMILL] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
  this.units[ITEMS.WELL] = [];
  this.units[ITEMS.GIFT] = [];
  this.units[ITEMS.GARLAND] = [];
  this.fast_units = [];
  this.nw = 260;
  this.nh = 260;
  this.dw = 100;
  this.dh = 100;
  this.w = this.nw * this.dw;
  this.h = this.nh * this.dh;
  this.RNG = new RNG.Random;
  this.biomes = [];
  this.shade = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
  this.transition = false;
  this.BIOME = [];
  this.BIOME_FOREST = 0;
  this.BIOME_WINTER = 1;
  this.BIOME_LAVA = 2;
  this.BIOME_DRAGON = 3;
  this.BIOME_SEA = 4;
  this.BIOME_DESERT = 10;
  this.BIOME[this.BIOME_FOREST] = {isSand: 1, day: [19, 58, 43], night: [4, 43, 48], _color: ["#133a2b", "#042b30"]};
  this.BIOME[this.BIOME_SEA] = {isSand: 0, day: [11, 106, 132], night: [9, 55, 63], _color: ["#0B6A84", "#09373F"]};
  this.BIOME[this.BIOME_WINTER] = {isSand: 0, day: [235, 242, 240], night: [19, 97, 103], _color: ["#EBF2F0", "#136167"]};
  this.BIOME[this.BIOME_LAVA] = {isSand: 0, day: [45, 32, 23], night: [3, 28, 30], _color: ["#2D2017", "#031C1E"]};
  this.BIOME[this.BIOME_DRAGON] = {isSand: 0, day: [74, 74, 74], night: [24, 61, 60], _color: ["#4A4A4A", "#183D3C"]};
  this.BIOME[this.BIOME_DESERT] = {isSand: 0, day: [235, 216, 166], night: [9, 61, 56], _color: ["#EBD8A6", "#093D38"]};
  this.Biome = function (melaher, saydee, beverley, chloi, lanceton, mairin) {
    this.x1 = saydee * 100;
    this.y1 = beverley * 100;
    this.w = chloi * 100;
    this.h = lanceton * 100;
    this.x2 = (saydee + chloi) * 100;
    this.y2 = (beverley + lanceton) * 100;
    this.t = melaher;
    if (mairin === undefined) {
      this.v = 15;
    } else {
      this.v = mairin;
    }
  };
  function miriya(elexi, korlyn, jestin, mylarose, zadarius) {
    var jawaan = korlyn + Math.floor(world.RNG.get() * mylarose);
    var yamilee = jestin + Math.floor(world.RNG.get() * mylarose);
    var isai = 10 + Math.floor(world.RNG.get() * (world.nw - jawaan - 20));
    var shilat = 10 + Math.floor(world.RNG.get() * (world.nh - yamilee - 20));
    var zyani = isai + jawaan;
    var adelena = shilat + yamilee;
    for (var margareta = 0; margareta < world.biomes.length; margareta++) {
      var shreshta = world.biomes[margareta];
      if (Utils.intersect_aabb(isai, zyani, shilat, adelena, shreshta.x1 / 100 - zadarius, shreshta.x2 / 100 + zadarius, shreshta.y1 / 100 - zadarius, shreshta.y2 / 100 + zadarius) === 1) {
        return 0;
      }
    }
    world.biomes.push(new world.Biome(elexi, isai, shilat, jawaan, yamilee, 15));
    return 1;
  }
  function joan(kadeejah, jagraj, madhavi) {
    var evart = jagraj;
    for (var miette = madhavi; miette < world.nh; miette++) {
      for (var casmier = jagraj; casmier < world.nw; casmier++) {
        if (miette === madhavi) {
          evart = Math.max(casmier, evart);
        }
        if (casmier > evart) {
          break;
        }
        if (kadeejah[miette][casmier] === 1) {
          break;
        }
        kadeejah[miette][casmier] = 1;
      }
      if (casmier < evart) {
        break;
      }
    }
    world.biomes.push(new world.Biome(world.BIOME_SEA, jagraj, madhavi, evart - jagraj + 1, miette - madhavi, 15));
  }
  function caseyann(daleila, amaijah, elo, alfiya, murad) {
    for (var ellieanna = 0; ellieanna < murad; ellieanna++) {
      if (miriya(daleila, amaijah, elo, alfiya, 8) === 1) {
        break;
      }
    }
    if (ellieanna === murad) {
      return 0;
    }
    return 1;
  }
  this.MAX_DIST = -1000000;
  this.dist_winter = this.MAX_DIST;
  this.dist_desert = this.MAX_DIST;
  this.dist_lava = this.MAX_DIST;
  this.dist_forest = this.MAX_DIST;
  this.dist_water = this.MAX_DIST;
  this.dist_dragon = this.MAX_DIST;
  this.dist_from_biomes = function (quina) {
    var ondria = quina.r.x;
    var chilyn = quina.r.y;
    var inigo = Math.floor(chilyn / 100);
    var simisola = Math.floor(ondria / 100);
    quina.dist_winter = world.MAX_DIST;
    quina.dist_desert = world.MAX_DIST;
    quina.dist_lava = world.MAX_DIST;
    quina.dist_forest = world.MAX_DIST;
    quina.dist_dragon = world.MAX_DIST;
    quina.dist_sand = world.MAX_DIST;
    for (var cayne = 0; world.biomes[cayne].t !== world.BIOME_SEA; cayne++) {
      if (world.biomes[cayne].t === world.BIOME_FOREST) {
        var timmya = world.dist_from_biome(cayne, ondria, chilyn);
        quina.dist_forest = Math.max(quina.dist_forest, timmya);
        if (timmya > 0 && world.dist_from_sand(cayne, ondria, chilyn) === 1) {
          quina.dist_sand = 1;
        }
      } else {
        if (world.biomes[cayne].t === world.BIOME_WINTER) {
          quina.dist_winter = Math.max(quina.dist_winter, world.dist_from_biome(cayne, ondria, chilyn));
        } else {
          if (world.biomes[cayne].t === world.BIOME_DESERT) {
            quina.dist_desert = Math.max(quina.dist_desert, world.dist_from_biome(cayne, ondria, chilyn));
          } else {
            if (world.biomes[cayne].t === world.BIOME_LAVA) {
              quina.dist_lava = Math.max(quina.dist_lava, world.dist_from_biome(cayne, ondria, chilyn));
            } else {
              world.biomes[cayne].t === world.BIOME_DRAGON && (quina.dist_dragon = Math.max(quina.dist_dragon, world.dist_from_biome(cayne, ondria, chilyn)));
            }
          }
        }
      }
    }
    if (MAP.tiles[inigo][simisola].iblk) {
      quina.dist_sand = 1;
    }
    if (world.find_bridge(simisola, inigo)) {
      quina.dist_water = quina.MAX_DIST;
    } else {
      if (MAP.tiles[inigo][simisola].wtb || quina.dist_winter < 0 && quina.dist_lava < 0 && quina.dist_forest < 0 && quina.dist_sand < 0 && quina.dist_dragon < 0 && quina.dist_desert < 0) {
        quina.dist_water = 1;
      } else {
        quina.dist_water = quina.MAX_DIST;
      }
    }
  };
  this.update_dist_from_biomes = function (nashiya, nciholas) {
    world.dist_winter = world.MAX_DIST;
    world.dist_desert = world.MAX_DIST;
    world.dist_lava = world.MAX_DIST;
    world.dist_dragon = world.MAX_DIST;
    world.dist_forest = world.MAX_DIST;
    for (var peryl = 0; world.biomes[peryl].t !== world.BIOME_SEA; peryl++) {
      if (world.biomes[peryl].t === world.BIOME_FOREST) {
        world.dist_forest = Math.max(world.dist_forest, world.dist_from_biome(peryl, nashiya, nciholas));
      } else {
        if (world.biomes[peryl].t === world.BIOME_WINTER) {
          world.dist_winter = Math.max(world.dist_winter, world.dist_from_biome(peryl, nashiya, nciholas));
        } else {
          if (world.biomes[peryl].t === world.BIOME_DESERT) {
            world.dist_desert = Math.max(world.dist_desert, world.dist_from_biome(peryl, nashiya, nciholas));
          } else {
            if (world.biomes[peryl].t === world.BIOME_LAVA) {
              world.dist_lava = Math.max(world.dist_lava, world.dist_from_biome(peryl, nashiya, nciholas));
            } else {
              if (world.biomes[peryl].t === world.BIOME_DRAGON) {
                world.dist_dragon = Math.max(world.dist_dragon, world.dist_from_biome(peryl, nashiya, nciholas));
              }
            }
          }
        }
      }
    }
    if (world.dist_winter < 0 && world.dist_dragon < 0 && world.dist_forest < 0 && world.dist_dragon < 0 && world.dist_desert < 0) {
      world.dist_water = 1;
    } else {
      world.dist_water = world.MAX_DIST;
    }
  };
  this.dist_from_sand = function (romaisa, tenney, shylie) {
    var nikiah = world.biomes[romaisa];
    var evonn = 0;
    x1 = nikiah.x1 + 30 + ((nikiah.v & WORLD.LEFT) === 0 ? 150 : 0);
    var emlyn = tenney - x1;
    if ((nikiah.v & WORLD.LEFT) > 0 && emlyn > 0 && emlyn < 320) {
      evonn = 1;
    }
    y1 = nikiah.y1 + 250 + ((nikiah.v & WORLD.TOP) === 0 ? 150 : 0);
    emlyn = shylie - y1;
    if ((nikiah.v & WORLD.TOP) > 0 && emlyn > 0 && emlyn < 320) {
      evonn = 1;
    }
    x2 = nikiah.x2 + 80 + ((nikiah.v & WORLD.RIGHT) === 0 ? -200 : 0);
    emlyn = x2 - tenney;
    if ((nikiah.v & WORLD.RIGHT) > 0 && emlyn > 0 && emlyn < 320) {
      evonn = 1;
    }
    y2 = nikiah.y2 - 200 + ((nikiah.v & WORLD.BOTTOM) === 0 ? -200 : 0);
    emlyn = y2 - shylie;
    if ((nikiah.v & WORLD.BOTTOM) > 0 && emlyn > 0 && emlyn < 320) {
      evonn = 1;
    }
    if (tenney >= x1 && tenney <= x2 && shylie >= y1 && shylie <= y2) {
      return evonn;
    }
    return 0;
  };
  this.dist_from_biome = function (aranya, everlyrose, osmo) {
    var laurrie = world.biomes[aranya];
    x1 = laurrie.x1 + 30;
    y1 = laurrie.y1 + 250;
    x2 = laurrie.x2 + 80;
    y2 = laurrie.y2 - 200;
    if (everlyrose >= x1 && everlyrose <= x2 && osmo >= y1 && osmo <= y2) {
      return Math.min(everlyrose - x1, x2 - everlyrose, osmo - y1, y2 - osmo);
    }
    var charmisa = -1000000;
    if (everlyrose - x1 < 0) {
      charmisa = Math.max(charmisa, everlyrose - x1);
    } else {
      if (x2 - everlyrose < 0) {
        charmisa = Math.max(charmisa, x2 - everlyrose);
      }
    }
    distY = -1000000;
    if (osmo < y1 || osmo > y2) {
      if (osmo - y1 < 0) {
        distY = Math.max(distY, osmo - y1);
      } else {
        distY = Math.max(distY, y2 - osmo);
      }
      if (charmisa !== -1000000 && distY !== -1000000) {
        charmisa = Math.min(charmisa, distY);
      } else {
        charmisa = distY;
      }
    }
    return charmisa;
  };
  function ansh(jaydenmichael, laurenelizabeth) {
    var rudean = world.biomes[laurenelizabeth];
    for (var aleyna = 0, bendetta = 0; aleyna < jaydenmichael && bendetta < 1e4; bendetta++) {
      var giulian = rudean.y1 + world.RNG.get() * rudean.h, patrisa = rudean.x1 + world.RNG.get() * rudean.w, sone = Math.floor(giulian / 100), morea = Math.floor(patrisa / 100), oluwaseyi = world.dist_from_biome(laurenelizabeth, morea * 100 + 50, sone * 100 + 50);
      if (oluwaseyi < 600) {
        continue;
      }
      var nalijah = 1;
      for (var kazu = sone - 4; nalijah === 1 && kazu <= sone + 4; kazu++) {
        for (var shimeeka = morea - 4; nalijah === 1 && shimeeka <= morea + 4; shimeeka++) {
          if (MAP.tiles[kazu][shimeeka] !== undefined) {
            nalijah = 0;
          }
        }
      }
      if (nalijah === 0) {
        continue;
      }
      chailyn(sone, morea, "la", aleyna % 6, 0);
      aleyna++;
    }
  }
  function teresha(grandon, chalmus, shamyra, atavia, eiva, rudee, marks, devansh) {
    var verdie = Math.floor(marks / 2);
    var cleopatria = Math.max(1, Math.floor(marks / 2));
    var sinclair = Math.floor(devansh / 2);
    var jaxsen = Math.max(1, Math.floor(devansh / 2));
    for (var nesochi = 0; nesochi < shamyra; nesochi++) {
      for (var dasya = grandon - sinclair; dasya < grandon + jaxsen; dasya++) {
        for (var clarrissa = chalmus - verdie; clarrissa < chalmus + cleopatria; clarrissa++) {
          if (chailyn(dasya, clarrissa, "wtb", 0, 1) === 1) {
            rudee.push([dasya, clarrissa, 1]);
          }
        }
      }
      grandon += atavia;
      chalmus += eiva;
    }
  }
  function meleana(quisean, myrone) {
    var ephratah = world.biomes[quisean];
    var rorik = Math.floor(ephratah.y1 / 100);
    var leizel = Math.floor(ephratah.x1 / 100);
    var turk = Math.floor(ephratah.h / 100);
    var analy = Math.floor(ephratah.w / 100);
    var eiman = rorik + Math.floor(turk / 2);
    var keundre = leizel + Math.floor(analy / 2);
    for (var abdurrahmaan = 0; abdurrahmaan < 3; abdurrahmaan++) {
      var alazah = Math.floor(eiman - 3 + world.RNG.get() * 6), sheletha = Math.floor(keundre - 3 + world.RNG.get() * 6);
      chailyn(alazah, sheletha, "plm", abdurrahmaan, 1);
    }
    for (var abdurrahmaan = 0; abdurrahmaan < 80; abdurrahmaan++) {
      var alazah = Math.floor(eiman - 3 + world.RNG.get() * 6), sheletha = Math.floor(keundre - 3 + world.RNG.get() * 6);
      if (chailyn(alazah, sheletha, "wtb", 0, 1) === 1) {
        myrone.push([alazah, sheletha, 0]);
      }
    }
  }
  function roll(jeamileth, anaysia) {
    var keeler = world.biomes[jeamileth];
    var tayt = Math.floor(keeler.y1 / 100);
    var frederique = Math.floor(keeler.x1 / 100);
    var samiyha = Math.floor(keeler.h / 100);
    var despina = Math.floor(keeler.w / 100);
    var ronnel = tayt + samiyha;
    var denna = frederique + despina;
    var yashua = 2;
    var tracilyn = samiyha;
    var chanae = tayt;
    var jeden = frederique + 10 + Math.floor((despina - 20) * world.RNG.get());
    for (var zerlene = jeden - 4; zerlene < jeden + 4; zerlene++) {
      chailyn(tayt - 1, zerlene, "wtb", 0, 1);
    }
    while (tracilyn > 0) {
      if (yashua === 2) {
        for (var cervando = 10; cervando > 1; cervando--) {
          teresha(chanae, jeden, 1, 1, 0, anaysia, cervando, 1);
          tracilyn -= 1;
          chanae += 1;
        }
        yashua = 0;
        continue;
      }
      if (tracilyn < 10) {
        for (var cervando = 1; tracilyn > 0; cervando++) {
          teresha(chanae, jeden, 1, 1, 0, anaysia, cervando, 1);
          tracilyn -= 1;
          chanae += 1;
        }
        continue;
      }
      if (yashua === 1) {
        var soroya = Math.min(tracilyn, Math.floor(1 + 4 * world.RNG.get())), despina = 1 + Math.floor(world.RNG.get() * 4);
        teresha(chanae, jeden, soroya, 1, 0, anaysia, despina, despina);
        yashua = 0;
        tracilyn -= soroya;
        chanae += soroya;
        continue;
      }
      yashua = 1;
      var shamecka = Math.floor(1 + 2 * world.RNG.get()), jenasys = 1 + Math.floor(world.RNG.get() * 4);
      if (jeden < frederique + 16) {
        teresha(chanae, jeden, shamecka, 0, 1, anaysia, jenasys, jenasys);
        jeden += shamecka;
      } else {
        if (jeden > denna - 16) {
          teresha(chanae, jeden, shamecka, 0, -1, anaysia, jenasys, jenasys);
          jeden -= shamecka;
        } else {
          world.RNG.get() > .5 ? (teresha(chanae, jeden, shamecka, 0, 1, anaysia, jenasys, jenasys), jeden += shamecka) : (teresha(chanae, jeden, shamecka, 0, -1, anaysia, jenasys, jenasys), jeden -= shamecka);
        }
      }
    }
    for (var zerlene = jeden - 1; zerlene < jeden + 2; zerlene++) {
      chailyn(chanae, zerlene, "wtb", 0, 1);
    }
  }
  function halleh(tyberius, marison) {
    for (var vikita = 0; vikita < marison.length; vikita++) {
      var kyohei = marison[vikita][0], gilma = marison[vikita][1], zeldy = marison[vikita][2];
      shamon(kyohei, gilma, tyberius, zeldy);
    }
  }
  this.add_island = function (dayanni, alonzia, mirna) {
    var lizza = mirna;
    var ferrin = alonzia;
    chailyn(lizza, ferrin, "isl", dayanni, 1);
    for (var winslet = 0; winslet < 4; winslet++) {
      for (var shaneesa = 0; shaneesa < 3; shaneesa++) {
        chailyn(lizza - shaneesa, ferrin - winslet, "iblk", 0);
        chailyn(lizza + shaneesa, ferrin - winslet, "iblk", 0);
        chailyn(lizza + shaneesa, ferrin + winslet, "iblk", 0);
        chailyn(lizza - shaneesa, ferrin + winslet, "iblk", 0);
      }
    }
    if (dayanni === 0) {
      for (var winslet = 0; winslet < 2; winslet++) {
        chailyn(lizza - winslet, ferrin - 4, "iblk", 0);
        chailyn(lizza + winslet, ferrin - 4, "iblk", 0);
        chailyn(lizza - winslet, ferrin + 4, "iblk", 0);
        chailyn(lizza + winslet, ferrin + 4, "iblk", 0);
      }
      for (var winslet = 0; winslet < 3; winslet++) {
        chailyn(lizza - 3, ferrin + winslet, "iblk", 0);
        chailyn(lizza + 3, ferrin + winslet, "iblk", 0);
        chailyn(lizza - 3, ferrin - winslet, "iblk", 0);
        chailyn(lizza + 3, ferrin - winslet, "iblk", 0);
      }
      chailyn(lizza - 2, ferrin - 4, "iblk", 0);
      chailyn(lizza - 3, ferrin - 3, "iblk", 0);
      chailyn(lizza + 2, ferrin + 4, "iblk", 0);
      chailyn(lizza + 3, ferrin + 3, "iblk", 0);
    } else {
      if (dayanni === 1) {
        for (var winslet = 0; winslet < 3; winslet++) {
          chailyn(lizza - winslet, ferrin - 4, "iblk", 0);
          chailyn(lizza + winslet, ferrin - 4, "iblk", 0);
          chailyn(lizza - winslet, ferrin + 4, "iblk", 0);
          chailyn(lizza + winslet, ferrin + 4, "iblk", 0);
        }
        for (var winslet = 0; winslet < 4; winslet++) {
          chailyn(lizza - 3, ferrin + winslet, "iblk", 0);
          chailyn(lizza + 3, ferrin + winslet, "iblk", 0);
          chailyn(lizza - 3, ferrin - winslet, "iblk", 0);
          chailyn(lizza + 3, ferrin - winslet, "iblk", 0);
        }
      } else {
        if (dayanni === 2) {
          for (var winslet = 0; winslet < 2; winslet++) {
            chailyn(lizza - winslet, ferrin - 4, "iblk", 0);
            chailyn(lizza + winslet, ferrin - 4, "iblk", 0);
            chailyn(lizza - winslet, ferrin + 4, "iblk", 0);
            chailyn(lizza + winslet, ferrin + 4, "iblk", 0);
          }
          for (var winslet = 0; winslet < 3; winslet++) {
            chailyn(lizza - 3, ferrin + winslet, "iblk", 0);
            chailyn(lizza + 3, ferrin + winslet, "iblk", 0);
            chailyn(lizza - 3, ferrin - winslet, "iblk", 0);
            chailyn(lizza + 3, ferrin - winslet, "iblk", 0);
          }
        }
      }
    }
  };
  this.add_islands = function (marlenis) {
    for (var newton = 0; newton < world.biomes.length && marlenis > 0; newton++) {
      var monquel = world.biomes[newton];
      if (monquel.t !== world.BIOME_SEA) {
        continue;
      }
      if (monquel.w > 1800 && monquel.h > 1e3) {
        var meegan = Math.floor((monquel.x1 + monquel.w / 2) / 100);
        var atwell = Math.floor((monquel.y1 + monquel.h / 2) / 100);
        world.add_island(marlenis % 3, meegan, atwell);
        for (var wilberto = 0; wilberto < 3; wilberto++) {
          var ewan = atwell - 2 + Math.floor(world.RNG.get() * 4);
          var layne = meegan - 3 + Math.floor(world.RNG.get() * 6);
          if (MAP.tiles[ewan][layne].s === undefined) {
            chailyn(ewan, layne, "plm", wilberto);
          }
          var ewan = atwell - 2 + Math.floor(world.RNG.get() * 4);
          var layne = meegan - 3 + Math.floor(world.RNG.get() * 6);
          if (MAP.tiles[ewan][layne].plm === undefined) {
            chailyn(ewan, layne, "s", wilberto);
          }
        }
        var ewan = atwell - 2 + Math.floor(world.RNG.get() * 4);
        var layne = meegan - 3 + Math.floor(world.RNG.get() * 6);
        if (MAP.tiles[ewan][layne].plm === undefined && MAP.tiles[ewan][layne].s === undefined) {
          chailyn(ewan, layne, "p", 0, 1);
        }
        marlenis--;
      }
    }
  };
  this.generate_world = function (elissandro) {
    world.RNG.init(elissandro);
    var giner = 0;
    while (1) {
      giner++;
      if (giner > 1e4) {
        return;
      }
      world.biomes = [];
      if (world.custom_map === 0 && (world.mode === WORLD.MODE_VAMPIRES || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_PVP)) {
        world.custom_map = ___MAP___;
      }
      if (world.mode === WORLD.MODE_ZOMBIES) {
        world.biomes.push(new world.Biome(world.BIOME_FOREST, 2, 2, 80, 80, 15));
      } else {
        if (world.mode === WORLD.MODE_LEGACY) {
          world.biomes.push(new world.Biome(world.BIOME_FOREST, 2, 2, 150, 150, 15));
        } else {
          if (world.custom_map !== 0 && world.custom_map.length > 0 && world.custom_map[0].length > 3) {
            for (var meighan = 0; meighan < world.custom_map.length; meighan++) {
              var arton = world.custom_map[meighan];
              if (arton[0] === 0) {
                var mariliz = WORLD.BIOME_FOREST;
                switch (arton[1]) {
                  case "FOREST":
                    mariliz = world.BIOME_FOREST;
                    break;
                  case "WINTER":
                    mariliz = world.BIOME_WINTER;
                    break;
                  case "DESERT":
                    mariliz = world.BIOME_DESERT;
                    break;
                  case "LAVA":
                    mariliz = world.BIOME_LAVA;
                    break;
                  case "DRAGON":
                    mariliz = world.BIOME_DRAGON;
                    break;
                }
                world.biomes.push(new world.Biome(mariliz, arton[2], arton[3], arton[4], arton[5], arton[6], arton[7]));
                continue;
              } else {
                break;
              }
            }
          } else {
            if (world.custom_map !== 0) {
              for (var meighan = 0; meighan < world.custom_map.length; meighan++) {
                var lacasha = world.custom_map[meighan], mariliz = WORLD.BIOME_FOREST;
                switch (lacasha[0]) {
                  case "FOREST":
                    mariliz = world.BIOME_FOREST;
                    break;
                  case "WINTER":
                    mariliz = world.BIOME_WINTER;
                    break;
                  case "DESERT":
                    mariliz = world.BIOME_DESERT;
                    break;
                  case "LAVA":
                    mariliz = world.BIOME_LAVA;
                    break;
                  case "DRAGON":
                    mariliz = world.BIOME_DRAGON;
                    break;
                }
                if (caseyann(mariliz, lacasha[1], lacasha[2], 0, (meighan + 1) * 10) === 0) {
                  break;
                }
              }
              if (meighan !== world.custom_map.length) {
                continue;
              }
            }
          }
        }
      }
      break;
    }
    render_minimap();
    var gideon = [];
    for (var bronislawa = 0; bronislawa < world.nh; bronislawa++) {
      gideon[bronislawa] = new Array(world.nw);
      for (var kristi = 0; kristi < world.nw; kristi++) {
        gideon[bronislawa][kristi] = 0;
      }
    }
    for (var bronislawa = 0; bronislawa < world.biomes.length; bronislawa++) {
      var lacasha = world.biomes[bronislawa], khaliyah = lacasha.x2 / 100, taitianna = lacasha.y2 / 100;
      for (var musab = lacasha.x1 / 100; musab <= khaliyah; musab++) {
        for (var reita = lacasha.y1 / 100; reita <= taitianna; reita++) {
          gideon[reita][musab] = 1;
        }
      }
    }
    for (var reita = 0; reita < world.nh; reita++) {
      for (var musab = 0; musab < world.nw; musab++) {
        if (gideon[reita][musab] === 0) {
          joan(gideon, musab, reita);
        }
      }
    }
    MAP = {w: world.nw, h: world.nh, tiles: []};
    for (var bronislawa = 0; bronislawa < world.nh; bronislawa++) {
      MAP.tiles[bronislawa] = [];
    }
    if (world.custom_map !== 0 && world.custom_map.length > 0 && world.custom_map[0].length > 3) {
      for (var meighan = 0; meighan < world.custom_map.length; meighan++) {
        var arton = world.custom_map[meighan];
        if (arton[1] === "isl") {
          world.add_island(arton[2], arton[3], arton[4]);
        }
      }
    } else {
      world.add_islands(world.islands);
    }
    if (world.custom_map !== 0 && world.custom_map.length > 0 && world.custom_map[0].length > 3) {
      var korbin = [];
      for (var meighan = 0; meighan < world.custom_map.length; meighan++) {
        var arton = world.custom_map[meighan];
        if (arton[0] !== 1) {
          continue;
        }
        if (arton[1] === "r") {
          chailyn(arton[3], arton[2], "wtb", 0, 1);
          korbin.push([arton[3], arton[2], arton[4]]);
        } else {
          chailyn(arton[4], arton[3], arton[1], arton[2], arton[5]);
        }
      }
      halleh(0, korbin);
      korbin = [];
    } else {
      for (var bronislawa = 0; bronislawa < world.biomes.length; bronislawa++) {
        var lacasha = world.biomes[bronislawa];
        if (world.mode === WORLD.MODE_LEGACY) {
          if (lacasha.t === world.BIOME_FOREST) {
            kinberlin(bronislawa, lacasha.w / 1e4);
          }
        } else {
          if (lacasha.t === world.BIOME_FOREST) {
            bocephus(bronislawa, lacasha.w / 1e4);
          }
          if (lacasha.t === world.BIOME_LAVA) {
            tammika(bronislawa, lacasha.w / 1e4);
          }
          if (lacasha.t === world.BIOME_WINTER) {
            mmichael(bronislawa, lacasha.w / 1e4);
          }
          if (lacasha.t === world.BIOME_DESERT) {
            nancyjo(bronislawa, lacasha.w / 1e4);
          }
          if (lacasha.t === world.BIOME_DRAGON) {
            enyssa(bronislawa);
          }
        }
      }
    }
    render_all_resources_minimap();
    world.map_wrapper(MAP);
  };
  function enyssa(hasnaa) {
    for (var arbay = 0; arbay < 3; arbay++) {
      cristena(hasnaa, "s", arbay, 15);
    }
    for (var arbay = 0; arbay < 3; arbay++) {
      cristena(hasnaa, "a", arbay, 1);
    }
    for (var arbay = 0; arbay < 3; arbay++) {
      cristena(hasnaa, "d", arbay, 1);
    }
    raffi(hasnaa);
  }
  function mmichael(maeby, leum) {
    for (var tejal = 0; tejal < 3; tejal++) {
      cristena(maeby, "s", tejal, Math.floor(18 * leum));
    }
    for (var tejal = 0; tejal < 3; tejal++) {
      cristena(maeby, "f", tejal, Math.floor(24 * leum));
    }
    for (var tejal = 0; tejal < 3; tejal++) {
      cristena(maeby, "d", tejal, Math.max(1, Math.floor(2 * leum)), .3);
    }
    for (var tejal = 0; tejal < 3; tejal++) {
      cristena(maeby, "g", tejal, Math.floor(6 * leum));
    }
    raffi(maeby);
  }
  function nancyjo(orentha, darryel) {
    for (var tinsley = 0; tinsley < 3; tinsley++) {
      cristena(orentha, "s", tinsley, Math.floor(12 * darryel));
    }
    for (var tinsley = 0; tinsley < 3; tinsley++) {
      cristena(orentha, "m", tinsley, Math.max(1, Math.floor(1 * darryel)), .2);
    }
    cristena(orentha, "c", 0, Math.floor(36 * darryel));
    var saide = [];
    meleana(orentha, saide);
    halleh(orentha, saide);
    saide = [];
  }
  function tammika(lapreal, berton) {
    ansh(80 * berton, lapreal);
    for (var brocton = 0; brocton < 3; brocton++) {
      cristena(lapreal, "s", brocton, Math.floor(12 * berton));
    }
    for (var brocton = 0; brocton < 3; brocton++) {
      cristena(lapreal, "g", brocton, Math.floor(6 * berton));
    }
    for (var brocton = 0; brocton < 3; brocton++) {
      cristena(lapreal, "re", brocton, Math.max(1, Math.floor(1 * berton)), .2);
    }
    for (var brocton = 0; brocton < 3; brocton++) {
      cristena(lapreal, "a", brocton, Math.max(1, Math.floor(2 * berton)));
    }
    raffi(lapreal);
  }
  function kinberlin(delacey, tanajha) {
    for (var asacia = 0; asacia < 6; asacia++) {
      cristena(delacey, "t", asacia, Math.floor(80 * tanajha));
    }
    for (var asacia = 0; asacia < 4; asacia++) {
      cristena(delacey, "b", asacia, Math.floor(80 * tanajha));
    }
    for (var asacia = 0; asacia < 3; asacia++) {
      cristena(delacey, "s", asacia, Math.floor(50 * tanajha));
    }
    var sybol = [];
    for (var asacia = 0; asacia < 6; asacia++) {
      roll(delacey, sybol);
    }
    halleh(delacey, sybol);
    sybol = [];
    cristena(delacey, "p", 0, Math.floor(28 * tanajha));
    for (var asacia = 0; asacia < 3; asacia++) {
      cristena(delacey, "g", asacia, Math.floor(7 * tanajha));
    }
    for (var asacia = 0; asacia < 3; asacia++) {
      cristena(delacey, "d", asacia, Math.floor(2 * tanajha));
    }
    for (var asacia = 0; asacia < 3; asacia++) {
      cristena(delacey, "a", asacia, Math.floor(1 * tanajha));
    }
    for (var asacia = 0; asacia < 3; asacia++) {
      cristena(delacey, "m", asacia, Math.floor(1 * tanajha));
    }
    cristena(delacey, "a", 0, Math.floor(1 * tanajha));
    raffi(delacey);
  }
  function bocephus(keiajah, natalieann) {
    for (var dustan = 0; dustan < 6; dustan++) {
      cristena(keiajah, "t", dustan, Math.floor(20 * natalieann));
    }
    for (var dustan = 0; dustan < 4; dustan++) {
      cristena(keiajah, "b", dustan, Math.floor(20 * natalieann));
    }
    for (var dustan = 0; dustan < 3; dustan++) {
      cristena(keiajah, "s", dustan, Math.floor(20 * natalieann));
    }
    var ajiah = [];
    roll(keiajah, ajiah);
    halleh(keiajah, ajiah);
    ajiah = [];
    cristena(keiajah, "p", 0, Math.floor(24 * natalieann));
    for (var dustan = 0; dustan < 3; dustan++) {
      cristena(keiajah, "g", dustan, Math.floor(5 * natalieann));
    }
    if (world.mode === WORLD.MODE_ZOMBIES) {
      for (var dustan = 0; dustan < 3; dustan++) {
        cristena(keiajah, "d", dustan, Math.floor(3 * natalieann));
      }
      for (var dustan = 0; dustan < 3; dustan++) {
        cristena(keiajah, "a", dustan, Math.floor(2 * natalieann));
      }
    }
    raffi(keiajah);
  }
  function raffi(quayvon) {
    var keyoni = world.biomes[quayvon];
    chailyn(-3 + Math.floor(keyoni.y2 / 100), -1 + Math.floor(keyoni.x2 / 100), "s", 0, 0);
    chailyn(3 + Math.floor(keyoni.y1 / 100), -1 + Math.floor(keyoni.x2 / 100), "s", 0, 0);
    chailyn(-3 + Math.floor(keyoni.y2 / 100), 1 + Math.floor(keyoni.x1 / 100), "s", 0, 0);
    chailyn(3 + Math.floor(keyoni.y1 / 100), 1 + Math.floor(keyoni.x1 / 100), "s", 0, 0);
  }
  function cristena(mayalee, becki, edalynn, kamla, zivon) {
    var rhyann = world.biomes[mayalee], trevonta = Math.floor(rhyann.x1 / 100), makhyla = Math.floor(rhyann.y1 / 100), ripken = Math.floor(rhyann.w / 100), juelze = Math.floor(rhyann.h / 100);
    if (zivon !== undefined) {
      zivon = 1 - zivon;
      trevonta += Math.floor(ripken * zivon / 2);
      makhyla += Math.floor(juelze * zivon / 2);
      ripken -= Math.floor(ripken * zivon);
      juelze -= Math.floor(juelze * zivon);
    }
    var metehan = MAP.tiles;
    for (var catriona = 0, rhyon = 0; catriona < kamla; rhyon++) {
      if (rhyon > 5e4) {
        break;
      }
      var zealand = makhyla + Math.floor(world.RNG.get() * juelze), marlon = trevonta + Math.floor(world.RNG.get() * ripken), taneika = world.dist_from_biome(mayalee, marlon * 100 + 50, zealand * 100 + 50);
      if (taneika < 400) {
        continue;
      }
      var marli = metehan[zealand][marlon + 1];
      if (marli !== undefined && marli[becki] !== undefined && marli[becki][edalynn] !== undefined) {
        continue;
      }
      var marli = metehan[zealand][marlon - 1];
      if (marli !== undefined && marli[becki] !== undefined && marli[becki][edalynn] !== undefined) {
        continue;
      }
      var marli = metehan[zealand + 1][marlon];
      if (marli !== undefined && marli[becki] !== undefined && marli[becki][edalynn] !== undefined) {
        continue;
      }
      var marli = metehan[zealand - 1][marlon];
      if (marli !== undefined && marli[becki] !== undefined && marli[becki][edalynn] !== undefined) {
        continue;
      }
      var marli = metehan[zealand + 1][marlon - 1];
      if (marli !== undefined && marli[becki] !== undefined && marli[becki][edalynn] !== undefined) {
        continue;
      }
      var marli = metehan[zealand - 1][marlon + 1];
      if (marli !== undefined && marli[becki] !== undefined && marli[becki][edalynn] !== undefined) {
        continue;
      }
      var marli = metehan[zealand + 1][marlon + 1];
      if (marli !== undefined && marli[becki] !== undefined && marli[becki][edalynn] !== undefined) {
        continue;
      }
      var marli = metehan[zealand - 1][marlon - 1];
      if (marli !== undefined && marli[becki] !== undefined && marli[becki][edalynn] !== undefined) {
        continue;
      }
      metehan[zealand][marlon] === undefined && (chailyn(zealand, marlon, becki, edalynn, 1), catriona++);
    }
  }
  function shamon(divyesh, dorlis, vinesh, koi) {
    if (!(divyesh >= 0 && dorlis >= 0 && divyesh < world.nh && dorlis < world.nw)) {
      return;
    }
    tiles = MAP.tiles;
    if (tiles[divyesh][dorlis] === undefined) {
      tiles[divyesh][dorlis] = {};
    }
    if (tiles[divyesh][dorlis].r !== undefined) {
      return;
    }
    var kambrey = 0;
    if (divyesh - 1 >= 0 && dorlis >= 0 && divyesh - 1 < world.nh && dorlis < world.nw && tiles[divyesh - 1][dorlis] !== undefined && tiles[divyesh - 1][dorlis].wtb !== undefined) {
      kambrey += 2;
    }
    if (divyesh >= 0 && dorlis - 1 >= 0 && divyesh < world.nh && dorlis - 1 < world.nw && tiles[divyesh][dorlis - 1] !== undefined && tiles[divyesh][dorlis - 1].wtb !== undefined) {
      kambrey += 8;
    }
    if (divyesh >= 0 && dorlis + 1 >= 0 && divyesh < world.nh && dorlis + 1 < world.nw && tiles[divyesh][dorlis + 1] !== undefined && tiles[divyesh][dorlis + 1].wtb !== undefined) {
      kambrey += 16;
    }
    if (divyesh + 1 >= 0 && dorlis >= 0 && divyesh + 1 < world.nh && dorlis < world.nw && tiles[divyesh + 1][dorlis] !== undefined && tiles[divyesh + 1][dorlis].wtb !== undefined) {
      kambrey += 64;
    }
    if (divyesh - 1 >= 0 && dorlis - 1 >= 0 && divyesh - 1 < world.nh && dorlis - 1 < world.nw && (kambrey & 10) === 10 && tiles[divyesh - 1][dorlis - 1] !== undefined && tiles[divyesh - 1][dorlis - 1].wtb !== undefined) {
      kambrey += 1;
    }
    if (divyesh - 1 >= 0 && dorlis + 1 >= 0 && divyesh - 1 < world.nh && dorlis + 1 < world.nw && (kambrey & 18) === 18 && tiles[divyesh - 1][dorlis + 1] !== undefined && tiles[divyesh - 1][dorlis + 1].wtb !== undefined) {
      kambrey += 4;
    }
    if (divyesh + 1 >= 0 && dorlis - 1 >= 0 && divyesh + 1 < world.nh && dorlis - 1 < world.nw && (kambrey & 72) === 72 && tiles[divyesh + 1][dorlis - 1] !== undefined && tiles[divyesh + 1][dorlis - 1].wtb !== undefined) {
      kambrey += 32;
    }
    if (divyesh + 1 >= 0 && dorlis + 1 >= 0 && divyesh + 1 < world.nh && dorlis + 1 < world.nw && (kambrey & 80) === 80 && tiles[divyesh + 1][dorlis + 1] !== undefined && tiles[divyesh + 1][dorlis + 1].wtb !== undefined) {
      kambrey += 128;
    }
    tiles[divyesh][dorlis].r = {};
    tiles[divyesh][dorlis].r.river = kambrey;
    tiles[divyesh][dorlis].r.current = koi;
    tiles[divyesh][dorlis].r.dist = world.dist_from_biome(vinesh, dorlis * 100 + 50, divyesh * 100 + 50) - 400;
    tiles[divyesh][dorlis].r.x = dorlis * 100 + 50;
    tiles[divyesh][dorlis].r.y = divyesh * 100 + 50;
  }
  function chailyn(caroyl, bette, baeden, jociah, marlem) {
    if (caroyl < 0 || bette < 0 || caroyl >= world.nh || bette >= world.nw) {
      return;
    }
    tiles = MAP.tiles;
    if (tiles[caroyl][bette] === undefined) {
      tiles[caroyl][bette] = {};
    }
    if (tiles[caroyl][bette][baeden] !== undefined) {
      return 0;
    }
    tiles[caroyl][bette][baeden] = [];
    tiles[caroyl][bette][baeden][jociah] = [{x: bette * 100 + 50, y: caroyl * 100 + 50}];
    if (marlem === 1) {
      add_resource_minimap(baeden, jociah, caroyl, bette);
    }
    return 1;
  }
  this.render_single_resource = chailyn;
  function ruchy(dajean, brion, kinari) {
    if (dajean[brion]) {
      for (k = 0; k < dajean[brion].length; k++) {
        if (!dajean[brion][k]) {
          continue;
        }
        for (l = 0; l < dajean[brion][k].length; l++) {
          dajean[brion][k][l].hit = kinari;
          dajean[brion][k][l].update = false;
          dajean[brion][k][l].time = 0;
          dajean[brion][k][l].angle = 0;
        }
      }
    }
  }
  this.map_wrapper = function (ninnie) {
    for (var florece = 0; florece < this.nh; florece++) {
      for (var bernie = 0; bernie < this.nw; bernie++) {
        if (!ninnie.tiles[florece]) {
          ninnie.tiles[florece] = [];
        }
        if (!ninnie.tiles[florece][bernie]) {
          ninnie.tiles[florece][bernie] = [];
          continue;
        }
        var dayshun = ninnie.tiles[florece][bernie];
        if (dayshun.de && dayshun.de.length > 0) {
          for (var syndney = 0; syndney < dayshun.de.length; syndney++) {
            if (dayshun.de[syndney] && dayshun.de[syndney].length > 0) {
              dayshun.de = dayshun.de[syndney][0];
              if (syndney >= 41 && syndney <= 49) {
                dayshun.de.scale = 3;
                var wren = Math.floor(Math.random() * 3 + 1);
                dayshun.de.p = [];
                for (var semmie = 0; semmie < wren; semmie++) {
                  dayshun.de.p.push({x: Math.random() * 120 - 60, y: Math.random() * 120 - 60, angle: Math.random() * Math.PI * 2, _id: 41 + Math.floor(Math.random() * 9)});
                }
              } else {
                if (syndney >= 19 && syndney <= 26) {
                  dayshun.de.scale = 3;
                  var wren = Math.floor(Math.random() * 3 + 1);
                  dayshun.de.p = [];
                  for (var semmie = 0; semmie < wren; semmie++) {
                    dayshun.de.p.push({x: Math.random() * 120 - 60, y: Math.random() * 120 - 60, angle: Math.random() * Math.PI * 2, _id: 19 + Math.floor(Math.random() * 8)});
                  }
                } else {
                  syndney <= 15 || syndney >= 27 && syndney <= 40 ? (dayshun.de.angle = 0, dayshun.de.scale = 2, dayshun.de._id = syndney) : (dayshun.de.angle = Math.random() * Math.PI * 2, dayshun.de.scale = 1, dayshun.de._id = syndney);
                }
              }
            }
          }
        }
        ruchy(dayshun, "p", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "t", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "s", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "g", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "d", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "b", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "f", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "sw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "gw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "dw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "a", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "cs", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "plm", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "re", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "c", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        ruchy(dayshun, "m", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
      }
    }
  };
  this.time = SPRITE.DAY;
  this.clock = {translate: {x: 0, y: 0}, init: 0, hour: 0, now: 0};
  this.delete_all_units = function () {
    this.fast_units = [];
    this.units[ITEMS.PLAYERS] = [];
    this.units[ITEMS.WORKBENCH] = [];
    this.units[ITEMS.FIRE] = [];
    this.units[ITEMS.BIG_FIRE] = [];
    this.units[ITEMS.SEED] = [];
    this.units[ITEMS.SPIKE] = [];
    this.units[ITEMS.STONE_SPIKE] = [];
    this.units[ITEMS.GOLD_SPIKE] = [];
    this.units[ITEMS.DIAMOND_SPIKE] = [];
    this.units[ITEMS.AMETHYST_SPIKE] = [];
    this.units[ITEMS.REIDITE_SPIKE] = [];
    this.units[ITEMS.BRIDGE] = [];
    this.units[ITEMS.WOOD_TOWER] = [];
    this.units[ITEMS.ROOF] = [];
    this.units[ITEMS.PLOT] = [];
    this.units[ITEMS.WHEAT_SEED] = [];
    this.units[ITEMS.ALOE_VERA_SEED] = [];
    this.units[ITEMS.PUMPKIN_SEED] = [];
    this.units[ITEMS.TOMATO_SEED] = [];
    this.units[ITEMS.CARROT_SEED] = [];
    this.units[ITEMS.WATERMELON_SEED] = [];
    this.units[ITEMS.GARLIC_SEED] = [];
    this.units[ITEMS.THORNBUSH_SEED] = [];
    this.units[ITEMS.WINDMILL] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
    this.units[ITEMS.WELL] = [];
    this.units[ITEMS.WALL] = [];
    this.units[ITEMS.STONE_WALL] = [];
    this.units[ITEMS.GOLD_WALL] = [];
    this.units[ITEMS.DIAMOND_WALL] = [];
    this.units[ITEMS.AMETHYST_WALL] = [];
    this.units[ITEMS.REIDITE_WALL] = [];
    this.units[ITEMS.BED] = [];
    this.units[ITEMS.WOOD_DOOR] = [];
    this.units[ITEMS.STONE_DOOR] = [];
    this.units[ITEMS.GOLD_DOOR] = [];
    this.units[ITEMS.DIAMOND_DOOR] = [];
    this.units[ITEMS.AMETHYST_DOOR] = [];
    this.units[ITEMS.REIDITE_DOOR] = [];
    this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
    this.units[ITEMS.STONE_DOOR_SPIKE] = [];
    this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
    this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
    this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
    this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
    this.units[ITEMS.FURNACE] = [];
    this.units[ITEMS.TOTEM] = [];
    this.units[ITEMS.WOOD_TOWER] = [];
    this.units[ITEMS.CHEST] = [];
    this.units[ITEMS.RESURRECTION] = [];
    this.units[ITEMS.EMERALD_MACHINE] = [];
    this.units[ITEMS.FRUIT] = [];
    this.units[ITEMS.RABBIT] = [];
    this.units[ITEMS.WOLF] = [];
    this.units[ITEMS.CRAB] = [];
    this.units[ITEMS.BOAR] = [];
    this.units[ITEMS.BABY_MAMMOTH] = [];
    this.units[ITEMS.CRAB_BOSS] = [];
    this.units[ITEMS.BABY_DRAGON] = [];
    this.units[ITEMS.BABY_LAVA] = [];
    this.units[ITEMS.HAWK] = [];
    this.units[ITEMS.PIRANHA] = [];
    this.units[ITEMS.KRAKEN] = [];
    this.units[ITEMS.FOX] = [];
    this.units[ITEMS.PENGUIN] = [];
    this.units[ITEMS.SPELL] = [];
    this.units[ITEMS.FIREFLY] = [];
    this.units[ITEMS.BEAR] = [];
    this.units[ITEMS.MAMMOTH] = [];
    this.units[ITEMS.VULTURE] = [];
    this.units[ITEMS.SAND_WORM] = [];
    this.units[ITEMS.DRAGON] = [];
    this.units[ITEMS.LAVA_DRAGON] = [];
    this.units[ITEMS.FLAME] = [];
    this.units[ITEMS.WHEAT_MOB] = [];
    this.units[ITEMS.ALOE_VERA_MOB] = [];
    this.units[ITEMS.PUMPKIN_MOB] = [];
    this.units[ITEMS.GARLIC_MOB] = [];
    this.units[ITEMS.THORNBUSH_MOB] = [];
    this.units[ITEMS.TREASURE_CHEST] = [];
    this.units[ITEMS.DEAD_BOX] = [];
    this.units[ITEMS.CRATE] = [];
    this.units[ITEMS.BREAD_OVEN] = [];
    this.units[ITEMS.SIGN] = [];
    this.units[ITEMS.SPIDER] = [];
    this.units[ITEMS.GIFT] = [];
    this.units[ITEMS.GARLAND] = [];
    return;
  };
  this.delete_units = function (annunziata) {
    if (!this.fast_units[annunziata]) {
      return;
    }
    type = this.fast_units[annunziata].type;
    this.fast_units[annunziata] = null;
    var moncia = this.units[type];
    for (var terriann = 0; terriann < moncia.length; terriann++) {
      if (moncia[terriann].uid == annunziata) {
        moncia.splice(terriann, 1);
        return;
      }
    }
    return;
  };
  this.find_tower = function (mattison, brexlie) {
    for (var elijahwon = 0; elijahwon < this.units[ITEMS.WOOD_TOWER].length; elijahwon++) {
      var venita = this.units[ITEMS.WOOD_TOWER][elijahwon];
      if (Math.floor(venita.x / 100) === brexlie && Math.floor(venita.y / 100) === mattison) {
        return 1;
      }
    }
    return 0;
  };
  this.find_bridge = function (sheilamarie, haydyn) {
    for (var vismaya = 0; vismaya < this.units[ITEMS.BRIDGE].length; vismaya++) {
      var shaynia = this.units[ITEMS.BRIDGE][vismaya];
      if (Math.floor(shaynia.x / 100) == sheilamarie && Math.floor(shaynia.y / 100) == haydyn) {
        return true;
      }
    }
    return false;
  };
  this.move_units = function (kayliani) {
    for (var jolina = 0; jolina < kayliani.length; jolina++) {
      b = kayliani[jolina];
      if (b.angle != b.nangle) {
        var heyden = Math.PI * 2;
        b.angle = (b.angle + heyden) % heyden;
        b.nangle = (b.nangle + heyden) % heyden;
        if (b.angle != b.nangle) {
          var kemare = b.nangle - b.angle;
          var natanael = Math.abs(kemare);
          if (natanael > Math.PI) {
            natanael = Math.PI * 2 - natanael;
          }
          var reem = 3 * (natanael / Math.PI) * WORLD.ROTATE * delta;
          if (kemare > Math.PI) {
            b.angle -= reem;
          } else {
            if (kemare < -Math.PI) {
              b.angle += reem;
            } else {
              if (kemare < 0) {
                b.angle -= reem;
              } else {
                b.angle += reem;
              }
            }
          }
          b.angle = (b.angle + heyden) % heyden;
          if (Math.abs(b.angle - b.nangle) < reem) {
            b.angle = b.nangle;
          }
        }
      }
      var elpida = Math.floor(b.r.y / 100), ondrea = Math.floor(b.r.x / 100);
      if (b.x != b.r.x || b.y != b.r.y) {
        if (b.action & STATE.IDLE) {
          b.action -= STATE.IDLE;
        }
        b.action |= STATE.WALK;
        var saraye = Utils.get_std_angle(b, b.r) + Math.PI;
        var cayd = delta * b.speed;
        var selda = Utils.build_vector(cayd, saraye);
        if (Utils.norm(selda) < Utils.norm(Utils.get_vector(b, b.r))) {
          Utils.add_vector(b, selda);
        } else {
          if (b.action & STATE.WALK) {
            b.action -= STATE.WALK;
          }
          b.action |= STATE.IDLE;
          Utils.copy_vector(b.r, b);
        }
      }
      if (b.ghost) {
        var garo = b.bubbles, talani = garo.length;
        if (talani === 0 || talani < SPRITE.GHOST_BUBBLES && garo[talani - 1].life < .95) {
          garo.push({id: Math.floor(Math.random() * sprite[SPRITE.BUBBLES][0].length), x: Math.floor(b.x + Math.random() * 80 - 40), y: Math.floor(b.y + Math.random() * 80 - 40), life: 1});
        }
        for (var raiford = 0; raiford < talani; raiford++) {
          garo[raiford].life = Math.max(0, garo[raiford].life - delta);
        }
        for (var raiford = 0; raiford < talani; raiford++) {
          if (garo[raiford].life === 0) {
            garo.splice(raiford, 1);
            break;
          }
        }
      }
      var aarish = 0;
      if (b.move_effect && ui.quality) {
        var mackinzee = b.swim;
        var talani = mackinzee.length;
        if (b.dist_water > 0 && b.vehicle !== INV.BABY_DRAGON && b.vehicle !== INV.BABY_LAVA && b.vehicle !== INV.PLANE && b.vehicle !== INV.HAWK && b.vehicle !== INV.NIMBUS && !b.ghost) {
          aarish = 1;
          if (talani === 0 || Utils.dist(mackinzee[talani - 1], b) > SPRITE.SWIM_SPACE) {
            var ho = -b.angle;
            var brejon = Math.sin(ho) * 45 * scale;
            var maeryn = Math.cos(ho) * 45 * scale;
            mackinzee.push({x: b.x + brejon, y: b.y + maeryn, r: 8, alpha: .8});
            mackinzee.push({x: b.x - brejon, y: b.y - maeryn, r: 8, alpha: .8});
            mackinzee.push({x: b.x, y: b.y, r: 24, alpha: 1});
          }
        }
        for (var raiford = 0; raiford < talani; raiford++) {
          mackinzee[raiford].alpha = Math.max(0, mackinzee[raiford].alpha - delta / 2.2);
          mackinzee[raiford].r += delta * 20;
        }
        if (mackinzee.length > 0 && mackinzee[0].alpha === 0) {
          mackinzee.splice(0, 1);
        }
        var miqueas = b.foot;
        var talani = miqueas.length;
        var eddy = -1;
        var lavon = Math.max(0, Math.sign(b.dist_sand));
        var neajah = Math.max(0, Math.sign(b.dist_winter));
        var drianna = Math.max(0, Math.sign(b.dist_desert));
        var aanchal = Math.max(0, Math.sign(b.dist_lava));
        var aaiden = Math.max(0, Math.sign(b.dist_dragon));
        if (b.dist_sand > 0 || b.dist_desert > 0) {
          var eddy = SPRITE.SAND_STEP;
        } else {
          if (b.dist_dragon > 0) {
            var eddy = SPRITE.CAVE_STEP;
          } else {
            if (b.dist_winter > 0) {
              var eddy = SPRITE.SNOW_STEP;
            } else {
              if (b.dist_lava > 0) {
                var eddy = SPRITE.LAVA_STEP;
              }
            }
          }
        }
        if (b.vehicle === INV.MOUNT_BOAR && (lavon | neajah | aanchal | aaiden) === 1) {
          eddy = SPRITE.BOAR_STEP;
          var aeon = b.vehicle_fx2 - Math.PI / 2;
          var aydun = 15;
          var lilirose = 11;
          var lawney = SPRITE.STEP_SPACE;
        } else {
          if (b.vehicle === INV.BABY_MAMMOTH && (lavon | neajah | aanchal | aaiden) === 1) {
            eddy = SPRITE.BABY_MAMMOTH_STEP;
            var aeon = b.vehicle_fx2 - Math.PI / 2;
            var aydun = 21;
            var lilirose = 16;
            var lawney = SPRITE.STEP_SPACE;
          } else {
            if (b.vehicle === INV.CRAB_BOSS && (lavon | neajah | aanchal | aaiden) === 1) {
              eddy = SPRITE.CRAB_STEP;
              var aeon = b.vehicle_fx2 - Math.PI / 2;
              var gowri = Math.random() * 50;
              var aydun = 10 + gowri;
              var lilirose = 0 + gowri;
              var lawney = SPRITE.STEP_SPACE * .9;
            } else {
              var aeon = b.angle, aydun = 15, lilirose = 11, lawney = SPRITE.STEP_SPACE;
            }
          }
        }
        if (b.vehicle === INV.BABY_DRAGON || b.vehicle === INV.BABY_LAVA || b.vehicle === INV.NIMBUS || b.vehicle === INV.HAWK || b.vehicle === INV.PLANE || b.ghost) {} else {
          if (b.vehicle === INV.SLED) {
            if (talani === 0 || Utils.dist(miqueas[talani - 1], b) > SPRITE.TRAIL_SPACE) {
              miqueas.push({x: b.x, y: b.y, angle: b.vehicle_fx2, alpha: 1, id: SPRITE.SLED_WAVE});
            }
          } else {
            if (eddy != -1 && aarish === 0) {
              if (talani === 0 || Utils.dist(miqueas[talani - 1], b) > lawney) {
                b.id_foot++;
                if (Math.abs(b.x - b.r.x) > 1 && Math.abs(b.y - b.r.y) > 1) {
                  if (b.r.x > b.x && b.r.y < b.y || b.r.x < b.x && b.r.y > b.y) {
                    if (b.id_foot % 2) {
                      var brejon = -lilirose * scale, maeryn = -lilirose * scale;
                    } else {
                      var maeryn = lilirose * scale, brejon = lilirose * scale;
                    }
                  } else {
                    if (b.id_foot % 2) {
                      var brejon = lilirose * scale, maeryn = -lilirose * scale;
                    } else {
                      var maeryn = lilirose * scale, brejon = -lilirose * scale;
                    }
                  }
                } else {
                  if (b.id_foot % 2) {
                    var brejon = Math.sin(aeon) * aydun * scale, maeryn = Math.cos(aeon) * aydun * scale;
                  } else {
                    var brejon = -Math.sin(aeon) * aydun * scale, maeryn = -Math.cos(aeon) * aydun * scale;
                  }
                }
                miqueas.push({x: b.x + brejon, y: b.y + maeryn, angle: aeon + Math.PI / 2, alpha: 1, id: eddy});
              }
            }
          }
        }
        for (var raiford = 0; raiford < talani; raiford++) {
          if (miqueas[raiford].id === SPRITE.SLED_WAVE) {
            miqueas[raiford].alpha = Math.max(0, miqueas[raiford].alpha - delta * 1.5);
          } else {
            miqueas[raiford].alpha = Math.max(0, miqueas[raiford].alpha - delta / 2.85);
          }
        }
        if (miqueas.length > 0 && miqueas[0].alpha === 0) {
          miqueas.splice(0, 1);
        }
      }
    }
  };
  this.update = function () {
    this.move_units(this.units[ITEMS.PLAYERS]);
    this.move_units(this.units[ITEMS.RABBIT]);
    this.move_units(this.units[ITEMS.WOLF]);
    this.move_units(this.units[ITEMS.CRAB]);
    this.move_units(this.units[ITEMS.BOAR]);
    this.move_units(this.units[ITEMS.BABY_MAMMOTH]);
    this.move_units(this.units[ITEMS.CRAB_BOSS]);
    this.move_units(this.units[ITEMS.BABY_DRAGON]);
    this.move_units(this.units[ITEMS.BABY_LAVA]);
    this.move_units(this.units[ITEMS.HAWK]);
    this.move_units(this.units[ITEMS.SPIDER]);
    this.move_units(this.units[ITEMS.FOX]);
    this.move_units(this.units[ITEMS.PENGUIN]);
    this.move_units(this.units[ITEMS.SPELL]);
    this.move_units(this.units[ITEMS.FIREFLY]);
    this.move_units(this.units[ITEMS.BEAR]);
    this.move_units(this.units[ITEMS.MAMMOTH]);
    this.move_units(this.units[ITEMS.VULTURE]);
    this.move_units(this.units[ITEMS.SAND_WORM]);
    this.move_units(this.units[ITEMS.DRAGON]);
    this.move_units(this.units[ITEMS.FLAME]);
    this.move_units(this.units[ITEMS.PIRANHA]);
    this.move_units(this.units[ITEMS.KRAKEN]);
    this.move_units(this.units[ITEMS.LAVA_DRAGON]);
  };
  this.breath = [];
  this.breath[SPRITE.LAKE] = new Utils.LinearAnimation(false, 1, 1.05, 1, .008, .008);
  this.breath[SPRITE.LAKE_DEEP] = new Utils.LinearAnimation(false, 1, 1.08, 1, .006, .006);
  this.breath[SPRITE.WAVE_ONE] = new Utils.LinearAnimation(false, 1, 1.02, 1, .008, .008);
  this.breath[SPRITE.WAVE_TWO] = new Utils.LinearAnimation(false, 1, 1.08, 1, .006, .006);
  this.lava = [];
  this.lava[0] = new Utils.LinearAnimation(false, .1, 1, 0, .6, .6);
  this.lava[1] = new Utils.LinearAnimation(false, .4, 1, 0, .6, .6);
  this.lava[2] = new Utils.LinearAnimation(false, .3, 1, 0, .6, .6);
  this.lava[3] = new Utils.LinearAnimation(false, .8, 1, 0, .6, .6);
  this.lava[4] = new Utils.LinearAnimation(false, .3, 1, 0, .6, .6);
  this.lava[5] = new Utils.LinearAnimation(false, .8, 1, 0, .6, .6);
  this.lava[6] = new Utils.LinearAnimation(false, .5, 1, 0, .6, .6);
  this.lava[7] = new Utils.LinearAnimation(false, .9, 1, 0, .6, .6);
  this.lava[8] = new Utils.LinearAnimation(false, .6, 1, 0, .6, .6);
  this.lava[9] = new Utils.LinearAnimation(false, .2, 1, 0, .6, .6);
  this.lava[10] = new Utils.LinearAnimation(false, .6, 1, 0, .6, .6);
  this.lava[11] = new Utils.LinearAnimation(false, .4, 1, 0, .6, .6);
  this.lava[12] = new Utils.LinearAnimation(false, .8, 1, 0, .6, .6);
  this.lava[13] = new Utils.LinearAnimation(false, .2, 1, 0, .6, .6);
  this.lava[14] = new Utils.LinearAnimation(false, .7, 1, 0, .6, .6);
}
function Flakes(bayron, kasee, lebrone, jakodi) {
  this.id = bayron;
  this.speed = (bayron + 5) * 8;
  this.life = canw / 1366;
  this.x = kasee;
  this.y = lebrone;
  this.c = Math.cos(jakodi);
  this.s = Math.sin(jakodi);
  this.alpha = 0;
}
mycyph1 = 1;
function User() {
  this.init = function () {};
  this.resurrection = {pid: 1, iid: 1, open: false};
  this.well = {pid: 1, iid: -1, open: false};
  this.windmill = {amount_wheat: 0, amount_flour: 0, pid: 1, iid: -1, open: false};
  this.extractor = {amount_wood: 0, amount_mineral: 0, type: 0, mineral: 0, pid: 1, iid: -1, open: false};
  this.bread_oven = {amount_wood: 0, amount_bread: 0, amount_flour: 0, pid: 1, iid: -1, open: false};
  this.sign = {iid: -1, open: false};
  this.furnace = {amount: 0, pid: 1, iid: -1, open: false};
  this.ghost = {enabled: false, delay: -1, label: false, now: -1, draw: draw_alert_ghost};
  this.chest = {id: -1, amount: 0, pid: 1, iid: -1, open: false, lock: false, locked: false, lockpick: false, padlock: false};
  this.alive = true;
  this.reconnect = {enabled: false, rotate: 0};
  this.key = Utils.gup("key", window.location.href);
  var kenshin = Utils.gup("egg", window.location.href);
  if (kenshin) {
    ui.skin = parseInt(kenshin);
  }
  this.beta = 0 === window.location.href.indexOf("http://starve.io/beta") ? 1 : 0;
  if (this.key && this.beta) {
    Cookies.set("starve_beta", this.key);
  } else {
    if (this.beta) {
      this.key = Cookies.get("starve_beta");
    }
  }
  this.token = Cookies.get("starve_token") ? Cookies.get("starve_token") : Utils.generate_token(CLIENT.TOKEN_LEN);
  window.baguette();
  var eulina = window.kot2;
  this.token = eulina.substring(0, 6) + this.token.substring(6);
  this.token_id = Cookies.get("starve_token_id") ? Cookies.get("starve_token_id") : "";
  this.id = 0;
  this.uid = 0;
  this.day = 0;
  this.die = {howdie: "", score: 0, bank: 0, kill: 0};
  this.account = {connected: 0, last: (new Date).getTime()};
  this.team = [];
  this.in_team = function (finnegan) {
    for (var briyith = 0; briyith < this.team.length; briyith++) {
      if (this.team[briyith] == finnegan) {
        return true;
      }
    }
    return false;
  };
  this.shop = {delay: 0, time: 0, value: 0, open: false, draw: function () {
    if (this.open) {
      var reada = (new Date).getTime();
      this.time = Math.floor((reada - this.delay) / 1e3);
      this.time < 60 ? game.shop.button.draw(ctx) : (document.getElementById("shop_starterkit").style.display = "none", this.open = false);
    }
  }};
  this.totem = {id: -1, pid: -1, lock: 0, timeout: new Utils.LinearAnimation(false, 0, 1, 0, .03333333333333333, 1), wait: false};
  this.helmet = {timeout: new Utils.LinearAnimation(false, 0, 1, 0, .2, 1), wait: false};
  this.build = {timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1), wait: false};
  this.weapon = {timeout: new Utils.LinearAnimation(false, 0, 1, 0, .1, 1), wait: false};
  this.cam = new Utils.Ease2d(Utils.ease_out_quad, 0, .4, 0, 0, canw2, canh2, canw2, canh2);
  this.cam.delay = 0;
  this.cam.forcedDelay = 0;
  this.cam.update = function () {
    if (this.forcedDelay > 0) {
      this.forcedDelay -= delta;
      return;
    }
    var baleria = world.fast_units[user.uid];
    if (baleria) {
      this.delay = 0;
      var jontasia = Math.max(Math.min(canw2 - baleria.x, -2), -world.w + 2 + canw), lougene = Math.max(Math.min(canh2 - baleria.y, -2), -world.h + 2 + canh);
      this.ease({x: jontasia, y: lougene});
    } else {
      this.delay += delta;
      if (this.delay > 3) {
        this.delay = 0;
        if (!user.reconnect.enabled) {
          client.get_focus();
        }
      }
    }
  };
  this.cam.w = screen.width;
  this.cam.h = screen.height;
  this.cam.rw = this.cam.w;
  this.cam.rh = this.cam.h;
  this.cam.rx = 0;
  this.cam.ry = 0;
  this.cam.rdw = 0;
  this.cam.rdh = 0;
  this.cam.change = function (jovienne, dvir) {
    this.x = -Math.min(Math.max(-world.dw * 2, jovienne - world.dw - this.rw / 2), world.w - this.rw);
    this.y = -Math.min(Math.max(-world.dh * 2, dvir - (world.dh + this.rh) / 2), world.h - this.rh + world.dh);
    this.ex = this.x;
    this.ey = this.y;
  };
  this.control = {angle: 0, timeout: 0, previous: 0, mouse: 0, attack: 0, update: function () {
    var topacio = world.fast_units[user.uid];
    if (topacio) {
      var sharrod = {x: user.cam.x + topacio.x, y: user.cam.y + topacio.y};
    } else {
      var sharrod = canm;
    }
    var zaysia = Utils.get_std_angle(mouse.pos, sharrod);
    var malaya = false;
    this.mouse += delta;
    !mouse.state && topacio && !(topacio.action & STATE.ATTACK) && this.mouse > CLIENT.ATTACK && (this.attack = 1, malaya = true, this.mouse = 0, client.send_attack(zaysia));
    topacio && (topacio.angle = zaysia, topacio.nangle = zaysia);
    !malaya && (this.timeout += delta, this.timeout > CLIENT.ROTATE && (this.timeout = 0, Math.abs(this.angle - zaysia) > .005 && (client.send_angle(zaysia), this.angle = zaysia)));
    if (user.chat.open) {
      return;
    }
    if (user.terminal.open) {
      return;
    }
    var alonza = 0;
    var akeim = keyboard.is_left();
    if (akeim) {
      alonza |= 1;
    }
    var joeana = keyboard.is_right();
    if (joeana) {
      alonza |= 2;
    }
    var chave = keyboard.is_bottom();
    if (chave) {
      alonza |= 4;
    }
    var talise = keyboard.is_top();
    if (talise) {
      alonza |= 8;
    }
    if (this.previous != alonza) {
      client.send_move(alonza);
    }
    this.previous = alonza;
  }};
  this.gauges = {c: 1, l: 1, h: 1, t: 1, o: 1, wa: 1, warn_cold: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3), warn_life: new Utils.LinearAnimation(true, 0, 1, 0, 2, 2), warn_hunger: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3), warn_thirst: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3), warn_oxygen: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3), warn_warm: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3), cold: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1), life: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1), hunger: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1), thirst: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1), oxygen: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1), warm: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1), update: function () {
    this.warn_cold.update();
    this.warn_life.update();
    this.warn_hunger.update();
    this.warn_thirst.update();
    this.warn_oxygen.update();
    this.warn_warm.update();
    this.cold.ease(this.c);
    this.life.ease(this.l);
    this.hunger.ease(this.h);
    this.thirst.ease(this.t);
    this.oxygen.ease(this.o);
    this.warm.ease(this.wa);
  }};
  this.bigmap = false;
  this.spectator = false;
  this.zombie = false;
  this.vampire = false;
  this.inv = {max: WORLD.WITHOUT_BAG, bonus: 0, bag: 0, n: [], can_select: [], update_bag_size: function (kastin, dhru) {
    if (kastin === 1) {
      this.bag = WORLD.BAG_SIZE;
    }
    this.bonus += dhru;
    this.max = WORLD.WITHOUT_BAG + this.bonus + this.bag;
  }, drag: {item: -1, img: null, _start: 0, _move: 0, _x: -1, _y: -1, move: function (amarye) {
    if (this._start && (amarye.x !== this._x || amarye.y !== this._y)) {
      this._move = 1;
    }
  }, start: function (jeshurun, charnika) {
    this._x = charnika.x;
    this._y = charnika.y;
    this.item = jeshurun;
    this.img = user.inv.can_select[jeshurun].info.img[2];
    this._start = 1;
  }, stop: function () {
    this._start = 0;
    this._move = 0;
    this._x = -1;
    this._y = -1;
  }, release: function () {
    var zira = -1, marielis = user.inv.can_select, ayanda = 0;
    if (this._start && this._move) {
      for (var ahlexis = 0; ahlexis < marielis.length; ahlexis++) {
        if (marielis[ahlexis].info.state === BUTTON_IN) {
          zira = ahlexis;
          break;
        }
      }
      if (zira !== -1 && zira !== this.item && marielis[this.item]) {
        ayanda = 1;
        var vergal = marielis[zira];
        marielis[zira] = marielis[this.item];
        marielis[this.item] = vergal;
        game.update_inv_buttons();
      }
    }
    return this.stop(), ayanda;
  }, draw: function (geordy, serynity) {
    if (!this._start || !this._move) {
      return;
    }
    ctxDrawImage(ctx, this.img, Math.floor(geordy - this.img.width / 2), Math.floor(serynity - this.img.height / 2));
  }}, free_place: function (caesar) {
    for (josejuan = 0; josejuan < caesar.length; josejuan++) {
      if (this.n[caesar[josejuan][0]] == caesar[josejuan][1]) {
        return true;
      }
    }
    return false;
  }, find_item: function (mallisa) {
    for (var kourtny = 0; kourtny < this.can_select.length; kourtny++) {
      if (this.can_select[kourtny].id == mallisa) {
        return kourtny;
      }
    }
    return -1;
  }, delete_item: function (zelenia, semeko) {
    this.n[zelenia] = 0;
    this.can_select.splice(semeko, 1);
    game.update_inv_buttons();
  }, decrease: function (briceson, lillibeth, kylesha) {
    update = true;
    this.n[briceson] = Math.max(0, this.n[briceson] - lillibeth);
    if (!this.n[briceson] && kylesha >= 0) {
      this.delete_item(briceson, kylesha);
    }
  }};
  this.show_spectators = {enabled: false, translate: {x: 0, y: 0}, invert: function () {
    if (world.mode != WORLD.MODE_HUNGER_GAMES || user.spectator) {
      return;
    }
    user.show_spectators.enabled = !user.show_spectators.enabled;
    if (user.show_spectators.enabled) {
      game.options.spectator_agree.display = "inline-block";
    } else {
      game.options.spectator_agree.display = "none";
    }
  }};
  game.options.spectator_agree.display = "none";
  this.auto_feed = {enabled: false, translate: {x: 0, y: 0}, delay: 0, invert: function () {
    user.auto_feed.enabled = !user.auto_feed.enabled;
    if (user.auto_feed.enabled) {
      game.options.feed_agree.display = "inline-block";
    } else {
      game.options.feed_agree.display = "none";
    }
  }, update: function () {
    if (!this.enabled || user.craft.id >= 0 || game.safe_delete.open) {
      return;
    }
    this.delay += delta;
    if (this.delay > 2) {
      this.delay = 0;
      if (user.gauges.h < .35) {
        if (user.inv.n[INV.PLANT]) {
          client.select_inv(INV.PLANT, user.inv.find_item(INV.PLANT));
        } else {
          if (user.inv.n[INV.GARLIC]) {
            client.select_inv(INV.GARLIC, user.inv.find_item(INV.GARLIC));
          } else {
            if (user.inv.n[INV.CRAB_STICK]) {
              client.select_inv(INV.CRAB_STICK, user.inv.find_item(INV.CRAB_STICK));
            } else {
              if (user.inv.n[INV.PUMPKIN]) {
                client.select_inv(INV.PUMPKIN, user.inv.find_item(INV.PUMPKIN));
              } else {
                if (user.inv.n[INV.TOMATO]) {
                  client.select_inv(INV.TOMATO, user.inv.find_item(INV.TOMATO));
                } else {
                  if (user.inv.n[INV.CARROT]) {
                    client.select_inv(INV.CARROT, user.inv.find_item(INV.CARROT));
                  } else {
                    if (user.inv.n[INV.WATERMELON]) {
                      client.select_inv(INV.WATERMELON, user.inv.find_item(INV.WATERMELON));
                    } else {
                      if (user.inv.n[INV.BREAD]) {
                        client.select_inv(INV.BREAD, user.inv.find_item(INV.BREAD));
                      } else {
                        if (user.inv.n[INV.COOKED_MEAT]) {
                          client.select_inv(INV.COOKED_MEAT, user.inv.find_item(INV.COOKED_MEAT));
                        } else {
                          if (user.inv.n[INV.FOODFISH_COOKED]) {
                            client.select_inv(INV.FOODFISH_COOKED, user.inv.find_item(INV.FOODFISH_COOKED));
                          } else {
                            if (user.inv.n[INV.COOKIE]) {
                              client.select_inv(INV.COOKIE, user.inv.find_item(INV.COOKIE));
                            } else {
                              if (user.inv.n[INV.SANDWICH]) {
                                client.select_inv(INV.SANDWICH, user.inv.find_item(INV.SANDWICH));
                              } else {
                                if (user.inv.n[INV.CAKE]) {
                                  client.select_inv(INV.CAKE, user.inv.find_item(INV.CAKE));
                                } else {
                                  if (user.inv.n[INV.CRAB_LOOT]) {
                                    client.select_inv(INV.CRAB_LOOT, user.inv.find_item(INV.CRAB_LOOT));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        if (user.gauges.t < .35) {
          if (user.inv.n[INV.BOTTLE_FULL]) {
            client.select_inv(INV.BOTTLE_FULL, user.inv.find_item(INV.BOTTLE_FULL));
          }
        }
      }
    }
  }};
  game.options.feed_agree.display = "none";
  this.craft = {id: -1, id2: -1, timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1), crafting: false, preview: -1, mode: 0, label: [], can_craft: [], workbench: false, fire: false, water: false, well: false, change_mode: function () {
    this.mode = this.mode === 0 ? 1 : 0;
  }, set_workbench: function (cranston) {
    this.workbench = cranston;
    var glenita = game.safe_delete;
    if (glenita.open) {
      glenita.del(glenita.button);
    }
    this.update();
  }, do_recycle: function (zimal) {
    var becklyn = RECIPES[zimal];
    this.id = zimal;
    this.crafting = true;
    var malayna = world.fast_units[user.uid];
    this.timeout.max_speed = becklyn.time * 8;
    this.id2 = becklyn.id2;
  }, do_craft: function (ugo) {
    var tome = RECIPES[ugo];
    this.id = ugo;
    this.crafting = true;
    var creig = world.fast_units[user.uid];
    if (creig && creig.right == INV.BOOK) {
      this.timeout.max_speed = tome.time * 3;
    } else {
      this.timeout.max_speed = tome.time;
    }
    this.id2 = tome.id2;
    for (var mozes = 0; mozes < tome.r.length; mozes++) {
      var ketherine = tome.r[mozes];
      user.inv.decrease(ketherine[0], ketherine[1], user.inv.find_item(ketherine[0]));
    }
    game.update_inv_buttons();
  }, update: function () {
    this.can_craft = [];
    if (game.info_box.craft === 1) {
      game.info_box.display = 0;
    }
    for (var tine in RECIPES) {
      var oluwatofunmi = RECIPES[tine], aliva = true;
      if (!oluwatofunmi.r) {
        continue;
      }
      for (var geraleen = 0; geraleen < oluwatofunmi.r.length; geraleen++) {
        if (user.inv.max >= WORLD.WITH_BAG && oluwatofunmi.id === CRAFT.BAG) {
          aliva = false;
          break;
        }
        if (oluwatofunmi.w > this.workbench || oluwatofunmi.f > this.fire || oluwatofunmi.o > this.water || oluwatofunmi.e > this.well) {
          aliva = false;
          break;
        }
        var takeema = oluwatofunmi.r[geraleen];
        if (!user.inv.n[takeema[0]] || user.inv.n[takeema[0]] < takeema[1]) {
          aliva = false;
          break;
        }
      }
      if (aliva) {
        this.can_craft.push(game.craft_buttons[oluwatofunmi.id]);
      }
    }
    game.update_craft_buttons();
    game.update_chest_buttons();
    game.update_furnace_button();
    game.update_windmill_button();
    game.update_extractor_button();
    game.update_bread_oven_button();
    game.sign.update_button();
  }, restart: function () {
    this.id = -1;
    this.crafting = false;
    this.timeout.v = 0;
    this.timeout.o = false;
    this.update();
  }};
  this.welcome = {message: undefined, draw: draw_welcome_message};
  this.alert = {timeout: new Utils.LinearAnimation(false, 1, 1, 0, 4, .3), text: "", label: null, draw: draw_alert, list: []};
  this.ldb = {can: document.createElement("canvas"), ids: [], update: true, translate: {x: 0, y: 0}, sort: function () {
    var arilynn = [];
    var tranisha = world.players;
    for (var adyanna = 0; adyanna < tranisha.length; adyanna++) {
      if (tranisha[adyanna].alive) {
        arilynn.push({id: adyanna, s: tranisha[adyanna].score});
      }
    }
    arilynn.sort(function (dalibor, laurisa) {
      return laurisa.s - dalibor.s;
    });
    this.ids = [];
    for (var adyanna = 0; adyanna < arilynn.length && adyanna < 10; adyanna++) {
      this.ids.push(arilynn[adyanna].id);
    }
    this.update = true;
  }, init: function (daquesha) {
    var ashley = world.players;
    for (var ashleymarie = 0; ashleymarie < ashley.length; ashleymarie++) {
      ashley[ashleymarie].score = 0;
    }
    ashley[user.id].score = Utils.restore_number(daquesha[1]);
    this.ids = [];
    for (var ashleymarie = 2; ashleymarie < daquesha.length; ashleymarie += 2) {
      this.ids.push(daquesha[ashleymarie]);
      ashley[daquesha[ashleymarie]].score = Utils.restore_number(daquesha[ashleymarie + 1]);
    }
    this.update = true;
  }};
  this.ldb.can.width = 180 * scale;
  this.ldb.can.height = 300 * scale;
  this.ldb.ctx = this.ldb.can.getContext("2d");
  this.terminal = {open: false, input: document.getElementById("commandInput"), contentBox: document.getElementById("commandsBox"), style: document.getElementById("commandMainBox").style, _print: function (marquitta) {
    this.contentBox.innerHTML += marquitta;
  }, update: function () {
    this.style.left = Math.floor(canw / 2 - 300) + "px";
    this.style.top = Math.floor(canh / 2 - 250) + "px";
  }, _clean: function () {
    this.contentBox.innerHTML = "";
  }, quit: function () {
    this.open = false;
    this.style.display = "none";
  }, create_array: function (zaynah) {
    var nazaiah = '<table class="tableList">';
    for (var raam = 0; raam < zaynah.length; raam++) {
      if (raam % 3 === 0) {
        nazaiah += "<tr>";
      }
      nazaiah += '<td class="tableList">' + zaynah[raam] + "</td>";
      if ((raam + 1) % 3 === 0 || raam + 1 === zaynah.length) {
        nazaiah += "</tr>";
      }
    }
    return nazaiah += "</table>", nazaiah;
  }, write_command: function (gwendelyn, tahjae, challen, tamai) {
    gwendelyn = !gwendelyn ? "" : gwendelyn;
    tahjae = !tahjae ? "" : tahjae;
    challen = !challen ? "" : challen;
    tamai = !tamai ? "" : tamai;
    var leeander = "<div class=commandWritten>" + gwendelyn;
    if (tahjae) {
      leeander += "<div class=commandValidated>";
    } else {
      leeander += "<div class=commandUnknown>";
    }
    leeander += challen + "</div>" + tamai + "</div>";
    this._print(leeander);
    this.scroll_down();
  }, scroll_down: function () {
    this.contentBox.scrollTop = this.contentBox.scrollHeight;
    return;
  }, commands: function (zinaida) {
    switch (zinaida) {
      case "clean":
        this._clean();
        return true;
        break;
      case "list":
        var zyaan = "", naila = world.players;
        for (var valdon = 0; valdon < naila.length; valdon++) {
          var orlin = naila[valdon];
          orlin.alive && (zyaan += orlin.nickname + ' <span style="color:green">#' + valdon + "</span><br />");
        }
        this.write_command("list", 1, "List all connected players", zyaan);
        return true;
        break;
      case "weapon-list":
        this.write_command("Weapons", 1, "List all weapons in the game", this.create_array(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
        return true;
        break;
      case "tool-list":
        this.write_command("Tools", 1, "List all tools in the game", this.create_array(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
        return true;
        break;
      case "survival-list":
        this.write_command("Survival Items", 1, "List all survival items in the game", this.create_array(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
        return true;
        break;
      case "resource-list":
        this.write_command("Resources", 1, "List all resources in the game", this.create_array(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
        return true;
        break;
      case "food-list":
        this.write_command("Food", 1, "List all food in the game", this.create_array(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
        return true;
        break;
      case "hat-list":
        this.write_command("Hats", 1, "List all hats in the game", this.create_array(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
        return true;
        break;
      case "building-list":
        this.write_command("Buildings", 1, "List all buildings in the game", this.create_array(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
        return true;
        break;
      case "biome-list":
        this.write_command("Biomes list", 1, "List all available biomes in the game", this.create_array(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
        return true;
        break;
      case "help-config":
        this.write_command("Help Configuration", 1, "Learn how to build your customized map", '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.');
        return true;
        break;
      case "pos":
        var naila = world.units[ITEMS.PLAYERS];
        for (var valdon = 0; valdon < naila.length; valdon++) {
          var vandawt = naila[valdon];
          if (vandawt.pid === user.id) {
            return this.write_command("pos", 1, "Your position is " + Math.floor(vandawt.x / 100) + ":" + Math.floor(vandawt.y / 100)), true;
          }
        }
        break;
      case "help-admin":
        this.write_command("help-admin", 1, "List all available commands for admin only", this.create_array(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
        return true;
        break;
      case "help":
        this.write_command("help", 1, "List all available commands", this.create_array(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
        return true;
        break;
    }
    return false;
  }, _open: function () {
    !this.open && (this.open = true, this.style.display = "inline-block", this.input.focus());
  }, _send: function () {
    var mikalah = this.input.value;
    if (mikalah && mikalah.length > 0) {
      if (!this.commands(mikalah)) {
        client.send_command(this.input.value);
      }
      this.input.value = "";
    }
  }};
  this.chat = {open: false, input: document.getElementById("chat_input"), style: document.getElementById("chat_block").style, update: function () {
    this.style.left = Math.floor(canw / 2 - 150) + "px";
    this.style.top = Math.floor(canh / 2 + 80) + "px";
  }, quit: function () {
    this.open = false;
    this.style.display = "none";
    this.input.value = "";
  }, prefix: "!", cmd: {hud: function (tayva) {
    if (tayva === "off") {
      if (!user.alert.text) {
        user.alert.text = 'Enter "!hud" without the quotes to restore the HUD';
      } else {
        user.alert.list.push('Enter "!hud" without the quotes to restore the HUD');
      }
      game.show_ui = 0;
    } else {
      game.show_ui = 1;
    }
  }}, commands: function (tichelle) {
    if (tichelle.charAt(0) == this.prefix) {
      var keondrae = "";
      var marysa = "";
      for (var kayo = 1; kayo < tichelle.length && tichelle.charAt(kayo) != " "; kayo++) {
        keondrae += tichelle.charAt(kayo);
      }
      kayo++;
      for (; kayo < tichelle.length; kayo++) {
        marysa += tichelle.charAt(kayo);
      }
      var veachel = this.cmd[keondrae];
      if (veachel) {
        veachel(marysa);
      }
      return true;
    } else {
      return false;
    }
  }, run: function () {
    if (!this.open) {
      this.open = true;
      this.style.display = "inline-block";
      this.input.focus();
    } else {
      this.open = false;
      this.style.display = "none";
      var jiovannie = this.input.value;
      if (jiovannie) {
        if (!this.commands(jiovannie)) {
          client.send_chat(this.input.value);
        }
        this.input.value = "";
      }
    }
  }};
  this.ash = {flakes: [], update: function (migelangel) {
    migelangel.y += delta * 80 * migelangel.s;
    migelangel.x += delta * 80 * migelangel.c;
    migelangel.life -= delta / 6;
    if (migelangel.life > .2) {
      migelangel.alpha = Math.min(migelangel.alpha + delta * 3, 1);
    } else {
      migelangel.alpha = Math.max(migelangel.alpha - delta * 1, 0);
    }
  }, add: function (yasenia) {
    var mathea = Math.floor(Math.min(SPRITE.ASHES_NUMBER * (canw / 1366), SPRITE.ASHES_NUMBER + 10) * Math.max(Math.min(world.dist_lava + 1e3, 3e3) / 3e3, 0));
    if (this.flakes.length < mathea) {
      var sheniyah = Math.floor(Math.random() * SPRITE.ASHES_SIZES);
      var deiadra = -user.cam.x + Math.floor(Math.random() * user.cam.w);
      var darlena = -user.cam.y + Math.floor(Math.random() * user.cam.h);
      var elessa = Math.random(Math.PI);
      this.flakes.push(new Flakes(sheniyah, deiadra, darlena, elessa));
    }
  }};
  this.blizzard = 0;
  this.bandage = 0;
  this.desert = {flakes: [], tempest: 0, tempest_speed: 0, update: function (zace) {
    zace.y += delta * (200 + 800 * this.tempest_speed) * zace.s;
    zace.x += delta * (200 + 800 * this.tempest_speed) * zace.c;
    zace.life -= delta / 6;
    if (zace.life > .2) {
      zace.alpha = Math.min(zace.alpha + delta * 3, 1);
    } else {
      zace.alpha = Math.max(zace.alpha - delta * 1, 0);
    }
  }, add: function (merly) {
    var charese = Math.floor(Math.min((this.tempest_speed + .1) * SPRITE.SAND_NUMBER * (canw / 1366), (this.tempest_speed + .1) * SPRITE.SAND_NUMBER + 10) * Math.max(Math.min(world.dist_desert + 1e3, 3e3) / 3e3, 0));
    if (this.flakes.length < charese) {
      var doramae = Math.floor(Math.random() * SPRITE.ASHES_SIZES);
      var prevail = -user.cam.x + Math.floor(Math.random() * user.cam.w);
      var sharia = -user.cam.y + Math.floor(Math.random() * user.cam.h);
      var marjae = Math.random(Math.PI);
      if (user.desert.tempest !== 0) {
        prevail -= user.cam.w / 2;
      }
      this.flakes.push(new Flakes(doramae, prevail, sharia, marjae));
    }
  }};
  this.winter = {flakes: [], tempest: 0, tempest_speed: 0, update: function (ceraphina) {
    if (keyboard.is_bottom()) {
      ceraphina.y += delta * ceraphina.speed * (5.5 + 10 * this.tempest_speed);
    } else {
      ceraphina.y += delta * ceraphina.speed * (5 + 10 * this.tempest_speed);
    }
    ceraphina.life -= delta / 2;
    if (keyboard.is_left()) {
      ceraphina.x += delta * (100 + 400 * this.tempest_speed);
    } else {
      if (keyboard.is_right()) {
        ceraphina.x -= delta * (130 - 400 * this.tempest_speed);
      } else {
        ceraphina.x -= delta * (30 - 400 * this.tempest_speed);
      }
    }
    if (ceraphina.life > .2) {
      ceraphina.alpha = Math.min(ceraphina.alpha + delta * 3, 1);
    } else {
      ceraphina.alpha = Math.max(ceraphina.alpha - delta * 5, 0);
    }
  }, add: function (zanye) {
    var aysenur = Math.floor(Math.min((this.tempest_speed * 1.5 + .5) * SPRITE.FLAKES_NUMBER * (canw / 1366), (this.tempest_speed * 1.5 + .5) * SPRITE.FLAKES_NUMBER + 10) * Math.max(Math.min(world.dist_winter + 1e3, 3e3) / 3e3, 0));
    if (this.flakes.length < aysenur) {
      var jermel = Math.floor(Math.random() * SPRITE.FLAKES_SIZES), kemonie = -user.cam.x + Math.floor(Math.random() * user.cam.w), elijay = -user.cam.y + Math.floor(Math.random() * 400 * scale - 200 * scale);
      this.flakes.push(new Flakes(jermel, kemonie, elijay, 0));
    }
  }};
  function jakeyla() {
    this.seed = 1;
    this.seed2 = 2;
    this.seed3 = 3;
    this.seedv = 1;
    this.seedv2 = 2;
    this.seedv3 = 3;
    this.new_seed = function (rondella) {
      this.seed = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seed2 = function (ernad) {
      this.seed2 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seed3 = function (jayzen) {
      this.seed3 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seedv = function (trampas) {
      this.seedv = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seedv2 = function (chidima) {
      this.seedv2 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seedv3 = function (evonte) {
      this.seedv3 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.draw_foam_vert = function (correy, beatryce, jacobs, lasha, kida, trevarious, valina) {
      for (var renise = 1; renise < valina;) {
        var saniy = renise * jacobs % RAND_SIZE, lynleigh = RANDOM[saniy];
        if (lynleigh < .1) {
          isys += 50;
          renise += 50;
          continue;
        }
        var isys = Math.floor(lynleigh * lasha + kida);
        if (renise > trevarious && renise < valina) {
          var ovey = Math.random() > .5 ? -10 * delta : 10 * delta;
          var guymon = isys * beatryce;
          this.bxv[saniy] = Math.max(-WORLD.FLOAM_X, Math.min(WORLD.FLOAM_X, this.bxv[saniy] + ovey));
          this.byv[saniy] = Math.max(-WORLD.FLOAM_Y, Math.min(WORLD.FLOAM_Y, this.byv[saniy] + ovey));
          if (guymon > 0) {
            ctx.beginPath();
            ctx.arc(renise + user.cam.x + this.byv[saniy], correy + this.bxv[saniy] - WORLD.FLOAM_X * .8, guymon, 0, Math.PI * 2);
            if (world.transition) {
              var darmarcus = world.time ? 1 - world.shade.v : world.shade.v;
              ctx.fillStyle = get_color_transition(83, 156, 160, 236, 247, 249, darmarcus);
            } else {
              ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
            }
            ctx.fill();
          }
        }
        renise += 2 * isys;
      }
    };
    this.draw_foam = function (kismet, acetyn, tanecia, dharius, brisseyda, fridda, taronica) {
      for (var renae = 1; renae < taronica;) {
        var juwayria = renae * tanecia % RAND_SIZE, candic = RANDOM[juwayria];
        if (candic < .1) {
          javaree += 50;
          renae += 50;
          continue;
        }
        var javaree = Math.floor(candic * dharius + brisseyda);
        if (renae > fridda && renae < taronica) {
          var quinna = Math.random() > .5 ? -10 * delta : 10 * delta;
          var enrick = javaree * acetyn;
          this.bx[juwayria] = Math.max(-WORLD.FLOAM_X, Math.min(WORLD.FLOAM_X, this.bx[juwayria] + quinna));
          this.by[juwayria] = Math.max(-WORLD.FLOAM_Y, Math.min(WORLD.FLOAM_Y, this.by[juwayria] + quinna));
          if (enrick > 0) {
            ctx.beginPath();
            ctx.arc(kismet + this.bx[juwayria] - WORLD.FLOAM_X * .8, renae + user.cam.y + this.by[juwayria], enrick, 0, Math.PI * 2);
            if (world.transition) {
              var mertice = world.time ? 1 - world.shade.v : world.shade.v;
              ctx.fillStyle = get_color_transition(83, 156, 160, 236, 247, 249, mertice);
            } else {
              ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
            }
            ctx.fill();
          }
        }
        renae += 2 * javaree;
      }
    };
    this.draw_foams_bottom = function (tanji, jalay, janaila, eliciana, diamyn, oumie) {
      diamyn -= 30;
      oumie += 30;
      var julieonna = -((janaila - WORLD.LW1SX - eliciana - 2) / WORLD.W1EX);
      if (julieonna === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(julieonna);
      this.draw_foam_vert(janaila, julieonna, this.seed3, 18, 16, diamyn, oumie);
      ctx.globalAlpha = 1;
      var julieonna = -((tanji - WORLD.LW2SX - eliciana + 500) / WORLD.W2EX);
      if (julieonna === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(julieonna);
      this.draw_foam_vert(tanji, julieonna, this.seed, 12, 10, diamyn, oumie);
      ctx.globalAlpha = 1;
      if (jalay === -1) {
        return;
      }
      var julieonna = -((jalay - WORLD.LW3SX - eliciana + 698) / WORLD.W3EX);
      if (julieonna <= .01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(julieonna);
      this.draw_foam_vert(jalay, julieonna, this.seed2, 6, 6, diamyn, oumie);
      ctx.globalAlpha = 1;
    };
    this.draw_foams_top = function (morgane, desmund, chayse, shiloh, mikale, brttany) {
      mikale -= 30;
      brttany += 30;
      var claribell = -((-chayse + WORLD.LW1SX + shiloh + 2) / WORLD.W1EX);
      if (claribell === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(claribell);
      this.draw_foam_vert(chayse, claribell, this.seed3, 18, 16, mikale, brttany);
      ctx.globalAlpha = 1;
      var claribell = -((-morgane + WORLD.LW2SX + shiloh) / WORLD.W2EX);
      if (claribell === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(claribell);
      this.draw_foam_vert(morgane, claribell, this.seed, 12, 10, mikale, brttany);
      ctx.globalAlpha = 1;
      if (desmund === -1) {
        return;
      }
      var claribell = -((-desmund + WORLD.LW3SX + shiloh) / WORLD.W3EX);
      if (claribell <= .01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(claribell);
      this.draw_foam_vert(desmund, claribell, this.seed2, 6, 6, mikale, brttany);
      ctx.globalAlpha = 1;
    };
    this.draw_foams_left = function (victorio, renard, ammelia, tresia, salma, sakeya) {
      salma -= 30;
      sakeya += 30;
      var nitosha = -((-ammelia + WORLD.LW1SX + tresia + 2) / WORLD.W1EX);
      if (nitosha === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(nitosha);
      this.draw_foam(ammelia, nitosha, this.seed3, 18, 16, salma, sakeya);
      ctx.globalAlpha = 1;
      var nitosha = -((-victorio + WORLD.LW2SX + tresia) / WORLD.W2EX);
      if (nitosha === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(nitosha);
      this.draw_foam(victorio, nitosha, this.seed, 12, 10, salma, sakeya);
      ctx.globalAlpha = 1;
      if (renard === -1) {
        return;
      }
      var nitosha = -((-renard + WORLD.LW3SX + tresia) / WORLD.W3EX);
      if (nitosha <= .01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(nitosha);
      this.draw_foam(renard, nitosha, this.seed2, 6, 6, salma, sakeya);
      ctx.globalAlpha = 1;
    };
    this.draw_foams_right = function (oconnor, plummie, lennyn, blayden, jordann, aliziah) {
      jordann -= 30;
      aliziah += 30;
      var makade = -((lennyn - WORLD.LW1SX - blayden - 2) / WORLD.W1EX);
      if (makade === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(makade);
      this.draw_foam(lennyn, makade, this.seed3, 18, 16, jordann, aliziah);
      ctx.globalAlpha = 1;
      var makade = -((oconnor - WORLD.LW2SX - blayden + 500) / WORLD.W2EX);
      if (makade === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(makade);
      this.draw_foam(oconnor, makade, this.seed, 12, 10, jordann, aliziah);
      ctx.globalAlpha = 1;
      if (plummie === -1) {
        return;
      }
      var makade = -((plummie - WORLD.LW3SX - blayden + 698) / WORLD.W3EX);
      if (makade <= .01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(makade);
      this.draw_foam(plummie, makade, this.seed2, 6, 6, jordann, aliziah);
      ctx.globalAlpha = 1;
    };
    this.w1 = {r: new Utils.Ease(Utils.ease_out_cubic, 0, 10, WORLD.W1SX, WORLD.W1SX, WORLD.W1EX), l: new Utils.Ease(Utils.ease_in_out_cubic, 0, 10, WORLD.W1EX, WORLD.W1EX, WORLD.W1SX)};
    this.w2 = {r: new Utils.Ease(Utils.ease_out_quart, 0, 10, WORLD.W2SX, WORLD.W2SX, WORLD.W2EX), l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, WORLD.W2EX, WORLD.W2EX, WORLD.W2SX)};
    this.w3 = {r: new Utils.Ease(Utils.ease_out_quint, 0, 10, WORLD.W3SX, WORLD.W3SX, WORLD.W3EX), l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, WORLD.W3EX, WORLD.W3EX, WORLD.W3SX)};
    this.t_ = function (mikaylla) {
      var dianne;
      if (mikaylla.r.x === mikaylla.r.ex) {
        if (mikaylla.l.x === mikaylla.l.ex) {
          dianne = mikaylla.r;
        } else {
          dianne = mikaylla.l;
        }
      } else {
        dianne = mikaylla.r;
      }
      return dianne;
    };
    this.t = function (bryla) {
      var lucciana;
      if (bryla.r.x === bryla.r.ex) {
        if (bryla.l.x === bryla.l.ex) {
          bryla.r.restart();
          bryla.l.restart();
          lucciana = bryla.r;
        } else {
          lucciana = bryla.l;
        }
      } else {
        lucciana = bryla.r;
      }
      return lucciana.ease(lucciana.ex), lucciana;
    };
    this.bx = [];
    this.by = [];
    this.bxv = [];
    this.byv = [];
    this.init = function () {
      for (var doro = 0; doro < RAND_SIZE; doro++) {
        this.bx[doro] = Math.floor(RANDOM[doro] * WORLD.FLOAM_X);
        this.by[doro] = Math.floor(RANDOM[doro] * WORLD.FLOAM_Y);
        this.bxv[doro] = Math.floor(RANDOM[doro] * WORLD.FLOAM_X);
        this.byv[doro] = Math.floor(RANDOM[doro] * WORLD.FLOAM_Y);
      }
      this.w1.r.x = this.w1.r.ex;
      this.w2.r.ed = 3.5;
      this.w3.r.ed = 2;
    };
    this.init();
  }
  this.beach = [];
  for (var josejuan = 0; josejuan < 4; josejuan++) {
    this.beach.push(new jakeyla);
  }
}
function get__e() {
  var thierno = Math.random();
  return "e";
}
function get__S() {
  var nickelle = Math.random();
  return "S";
}
function get__t() {
  var tiberias = Math.random();
  return "t";
}
function get__d() {
  var sheryln = Math.random();
  return "d";
}
function get__o() {
  var semiko = Math.random();
  return "o";
}
function get__r() {
  var brando = Math.random();
  return "r";
}
function get__a() {
  var kaimarie = Math.random();
  return "a";
}
function get__w() {
  var giana = Math.random();
  return "w";
}
function get__I() {
  var eshana = Math.random();
  return "I";
}
function get__k() {
  var vinicius = Math.random();
  return "k";
}
function get__W() {
  var shelcy = Math.random();
  return "W";
}
function get__a() {
  var railey = Math.random();
  return "a";
}
function get__s() {
  var taramarie = Math.random();
  return "s";
}
function get__n() {
  var payal = Math.random();
  return "n";
}
function get__p() {
  var kamrun = Math.random();
  return "p";
}
function get__2() {
  var masao = Math.random();
  return "2";
}
function get__g() {
  var chrstina = Math.random();
  return "g";
}
function get__m() {
  var shannikia = Math.random();
  return "m";
}
function get__b() {
  var jimena = Math.random();
  return "b";
}
function get__o() {
  var dakarii = Math.random();
  return "o";
}
function get__t() {
  var zaravion = Math.random();
  return "t";
}
function get__y() {
  var vallee = Math.random();
  return "y";
}
function get__c() {
  var jj = Math.random();
  return "c";
}
function get__p() {
  var caziyah = Math.random();
  return "p";
}
function get__i() {
  var daney = Math.random();
  return "i";
}
function get__v() {
  var lesvia = Math.random();
  return "v";
}
function get__C() {
  var ario = Math.random();
  return "C";
}
function get__R() {
  var zuha = Math.random();
  return "R";
}
function get__x() {
  var prayag = Math.random();
  return "x";
}
function get__D() {
  var dayrin = Math.random();
  return "D";
}
function fixNative() {
  var damonn = get__n() + get__a() + get__t() + get__i();
  var keawe = get__W() + get__e() + get__b() + get__S() + get__o() + get__c() + get__k() + get__e() + get__t();
  if (window[keawe].toString().indexOf(damonn) === -1) {
    Math.floor = function () {
      return Math.round() + 1;
    };
  }
  var brandarius = get__s() + get__e() + get__n() + get__d();
  var nabeela = get__p() + get__r() + get__o() + get__t() + get__o() + get__t() + get__y() + get__p() + get__e();
  if (window[keawe][nabeela][brandarius].toString().indexOf(damonn) === -1) {
    Math.floor = function () {
      return Math.round() + 1;
    };
  }
  var keawe = get__d() + get__r() + get__a() + get__w() + get__I() + get__m() + get__a() + get__g() + get__e();
  var brandarius = get__C() + get__a() + get__n() + get__v() + get__a() + get__s() + get__R() + get__e() + get__n() + get__d() + get__e() + get__r() + get__i() + get__n() + get__g() + get__C() + get__o() + get__n() + get__t() + get__e() + get__x() + get__t() + get__2() + get__D();
  if (window[brandarius][nabeela][keawe].toString().indexOf(damonn) === -1) {
    Math.floor = function () {
      return Math.round() + 1;
    };
  }
  setTimeout(fixNative, 1e5);
}
setTimeout(fixNative, 1e5);
var SERVER_INFO_URL = "datas/info.json";
environment === environments.DEV && (SERVER_INFO_URL = "datas/info.local.json");
var LOADER = {SERVER_INFO_URL: SERVER_INFO_URL};
function Loader(tamijo, kiamani, mandela) {
  this.can = tamijo;
  this.ctx = kiamani;
  this.logo = {translate: {x: 0, y: 0}, style: document.getElementById("loading").style, update: function () {
    this.style.left = this.translate.x + "px";
    this.style.top = Math.floor(this.translate.y) + "px";
  }};
  this.logo.style.position = "absolute";
  this.logo.style.display = "inline-block";
  this.logo.update();
  this.is_run = true;
  this.stop = function () {
    this.is_run = false;
  };
  this.loading = {total: 1};
  var marth = this, jamore = function () {}, alnisa = 0;
  this.quit_effect = function () {
    marth.update();
    alnisa++;
    if (alnisa == 40) {
      marth.stop();
      jamore();
      return;
    }
    window.setTimeout(marth.quit_effect, 33);
  };
  this.quit = function (osias) {
    jamore = osias;
    marth.quit_effect();
  };
  var jhanelle = (new Date).getTime();
  function teneika(frasier) {
    if (frasier.indexOf("normal-mode") !== -1 || frasier.indexOf("player0") !== -1) {
      return 1;
    }
    if (frasier.indexOf("day-bag") !== -1 || frasier.indexOf("night-bag") !== -1 || frasier.indexOf("day-book") !== -1 || frasier.indexOf("night-book") !== -1 || frasier.indexOf("day-player") !== -1 || frasier.indexOf("night-player") !== -1 || frasier.indexOf("day-accessory") !== -1 || frasier.indexOf("night-accessory") !== -1 || frasier.indexOf("day-crate") !== -1 || frasier.indexOf("night-crate") !== -1 || frasier.indexOf("day-skin") !== -1 || frasier.indexOf("night-skin") !== -1 || frasier.indexOf("day-river") !== -1 || frasier.indexOf("night-river") !== -1 || frasier.indexOf("day-river") !== -1 || frasier.indexOf("night-river") !== -1 || frasier.indexOf("day-rock") !== -1 || frasier.indexOf("night-rock") !== -1 || frasier.indexOf("day-flower") !== -1 || frasier.indexOf("night-flower") !== -1 || frasier.indexOf("day-leaf") !== -1 || frasier.indexOf("night-leaf") !== -1 || frasier.indexOf("day-herb") !== -1 || frasier.indexOf("night-herb") !== -1 || frasier.indexOf("day-shell") !== -1 || frasier.indexOf("night-shell") !== -1 || frasier.indexOf("day-hand-skin") !== -1 || frasier.indexOf("night-hand-skin") !== -1 || frasier.indexOf("bignight") !== -1 || frasier.indexOf("bigday") !== -1 || frasier.indexOf("bigzday") !== -1 || frasier.indexOf("bigznight") !== -1 || frasier.indexOf("tutorial-box") !== -1 || frasier.indexOf("tuto-") !== -1 || frasier.indexOf("-leaderboard-") !== -1 || frasier.indexOf("-lead-") !== -1 || frasier.indexOf("day-lava-") !== -1 || frasier.indexOf("night-lava-") !== -1 || frasier.indexOf("-click.png") !== -1 || frasier.indexOf("-in.png") !== -1 || frasier.indexOf("-fog") !== -1 || frasier.indexOf("-lava") !== -1 || frasier.indexOf("pebblecompo") !== -1 || frasier.indexOf("avatar-player") !== -1) {
      return 0;
    }
    return 1;
  }
  var zalie = Object.keys(IMAGES).length, tyleah = zalie;
  console.log("Image to load: ", zalie);
  for (var leashia in IMAGES) {
    if (teneika(IMAGES[leashia]) === 0) {
      zalie--;
    }
  }
  console.log("Image to load with high priority: ", zalie);
  var gariella = function () {
    if (this.isLoaded !== 0) {
      return this.isLoaded;
    }
    return this.isLoaded = 2, this.src = this._src, 0;
  }, clennon = function (daliah) {
    this.isLoaded = 1;
  }, aldon = 0, cergio = function () {
    console.log("Received server info");
    if (aldon === 1) {
      return;
    }
    aldon = 1;
    console.log(Date.now() - jhanelle);
    if (next_lang !== set_english) {
      set_english();
    }
    next_lang();
    var iman = Utils.getURLData("server");
    iman !== null && (client.privateServer = 1, client.server_list = [{nu: 0, m: 100, i: "server" + iman + ".starve.io", p: 443, a: "Private Server " + iman, ssl: 1}]);
    client.update_server_list();
    setTimeout(mandela, 100);
  }, ivanshi = function () {
    let reynaldo = async () => {
      await client.fetch_server_list();
      cergio();
    };
    if (!document.fonts || !document.fonts.check) {
      setTimeout(reynaldo, 1e3);
    } else {
      if (document.fonts.check("1em Baloo Paaji")) {
        setTimeout(reynaldo, 100);
      } else {
        setTimeout(ivanshi, 100);
      }
    }
  }, vema = function () {
    this.loadAttempts++;
    console.warn("Image (" + this.src + ") failed to load, attempt " + this.loadAttempts, this);
    this.loadAttempts > 3 && console.warn("Failed to load image too many times");
    var roneisha = this.loadAttempts, annikka = this.src, domynic = teneika(annikka) === 0 ? 1e4 : 2e3;
    setTimeout(function () {
      for (var travianna in DUMP_IMAGES) {
        if (annikka.indexOf(DUMP_IMAGES[travianna]) !== -1) {
          IMAGES[travianna] = new Image;
          IMAGES[travianna].onload = clennon;
          IMAGES[travianna].onerror = vema;
          IMAGES[travianna].loadAttempts = roneisha;
          IMAGES[travianna].src = annikka;
          break;
        }
      }
    }, domynic);
  };
  function shantle(kededra) {
    for (var peydon in IMAGES) {
      var damyen = IMAGES[peydon];
      if (typeof damyen !== "string") {
        continue;
      }
      if (teneika(damyen) !== kededra) {
        continue;
      }
      IMAGES[peydon] = new Image;
      IMAGES[peydon].isLoaded = 0;
      IMAGES[peydon].loadAttempts = 0;
      IMAGES[peydon].onload = clennon;
      IMAGES[peydon].onerror = vema;
      IMAGES[peydon].tryLoad = gariella;
      if (window.location.protocol !== "https:") {
        IMAGES[peydon]._src = damyen;
      } else {
        IMAGES[peydon]._src = "https://starve.io/" + damyen;
      }
    }
  }
  shantle(1);
  shantle(0);
  create_text(1, "l", 20, "#000");
  ivanshi();
  _load_images();
  this.update = function () {
    this.logo.translate.x = (canw - 500) / 2;
    this.logo.translate.y = (canh - 150) / 2;
    var jevonna = 2500 / (40 - alnisa + 1) - 48;
    this.logo.translate.y -= jevonna;
    this.logo.update();
  };
  this.logo.update();
  this.draw = function () {
    try {
      draw_fake_world();
    } catch (nechama) {}
    this.update();
  };
}
function UI(avila, imran) {
  this.can = avila;
  this.ctx = imran;
  window.navigator.userAgent.indexOf("Edge") > -1 ? (this.cursor0 = "default", this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default", this.cursor1 = "url('img/cursor1.png'), pointer");
  var elior = this;
  this.waiting = false;
  this.in_this_view = 0;
  this.current_mode_score = -1;
  this.loading = {translate: {x: 0, y: 0}, angle: 0, img: sprite[SPRITE.GEAR2], draw: function () {
    this.angle += delta * 2;
    imran.save();
    imran.translate(this.translate.x + this.img.width / 2, this.translate.y + this.img.height / 2);
    imran.rotate(this.angle);
    ctxDrawImage(imran, this.img, -this.img.width / 2, -this.img.height / 2);
    imran.restore();
  }};
  this.langselect = {id: document.getElementById("langselect"), style: document.getElementById("langselect").style, translate: {x: 0, y: 0}, update: function () {
    this.style.left = Math.floor(this.translate.x) + "px";
    this.style.top = Math.floor(this.translate.y) + "px";
  }};
  this.bread = 0;
  this.previous_bread = -1;
  this.bread_img = undefined;
  this.new_nickname = "";
  this.previous_new_nickname = "";
  this.new_nickname_img = undefined;
  this.lvl = 0;
  this.previous_lvl = -1;
  this.lvl_img = undefined;
  this.xp = 0;
  this.xp_dest = 0;
  this.firstName = 0;
  this.kill = 0;
  this.death = 0;
  this.time = 0;
  this.score = 0;
  this.scoreTotal = 0;
  this.bestKill = 0;
  this.bestTime = 0;
  this.bestScore = 0;
  this.seasons = [];
  this.kit = -1;
  this.previous_kit_hour = -1;
  this.previous_kit_min = -1;
  this.kit_img_min = undefined;
  this.kit_img_hour = undefined;
  this.privateServerTime = -1;
  this.previous_privateServerTime_day = -1;
  this.previous_privateServerTime_hour = -1;
  this.previous_privateServerTime_min = -1;
  this.privateServerTime_img_min = undefined;
  this.privateServerTime_img_hour = undefined;
  this.privateServerTime_img_day = undefined;
  this.cosmetic_name = undefined;
  this.cosmetic_author = undefined;
  this.leaderboard_range = undefined;
  this.leaderboard_mode = undefined;
  this.leaderboard_sorted = undefined;
  this.leaderboard_season = undefined;
  this.profile_season = 3;
  this.breath = 0;
  function ishir(zeana, arquan, callan, alexa, ryverlynn) {
    var desirae = this, kristyn = arquan + 9, analaura = 0, koressa = alexa;
    for (var hermino = arquan; hermino < kristyn; hermino++) {
      elior.buttons[hermino].info.callback = jemari;
      elior.buttons[hermino].info.cosmeticType = zeana;
    }
    function eliab() {
      var brittain = zeana[koressa];
      ui.cosmetic_name = gui_render_text(brittain.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
      if (brittain.level !== undefined) {
        ui.cosmetic_author = gui_render_text("Level " + brittain.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
      } else {
        ui.cosmetic_author = gui_render_text("by " + brittain.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
      }
    }
    function jemari() {
      if (koressa === this.cosmeticId || this.cosmeticId === -1) {
        return;
      }
      if (this.unlocked > 0) {
        if (arquan === FIRST_BUTTON_SKIN) {
          keren(chazmin, 0, "none");
        } else {
          keren(karis, 0, "none");
        }
      } else {
        if (arquan === FIRST_BUTTON_SKIN) {
          keren(chazmin, 1, "inline-block");
        } else {
          keren(karis, 1, "inline-block");
        }
      }
      koressa = this.cosmeticId;
      callan(this.cosmeticId);
      eliab();
    }
    function dieudonne() {
      if (analaura * 3 + 9 < zeana.length) {
        analaura++;
      }
      desirae.initSelector();
    }
    function gallagher() {
      if (analaura > 0) {
        analaura--;
      }
      desirae.initSelector();
    }
    function caylee() {
      for (var aydrik = arquan, yi = analaura * 3; aydrik < kristyn && yi < zeana.length; aydrik++, yi++) {
        if (zeana[yi].rarity === RARITY.SPECIAL && ryverlynn[yi] === 0) {
          elior.buttons[aydrik].info.cosmeticId = -1;
          elior.buttons[aydrik].info.active = 0;
          continue;
        }
        elior.buttons[aydrik].info.cosmeticId = yi;
        for (var shantell = 0; shantell < 3; shantell++) {
          elior.buttons[aydrik].info.img[shantell] = RARITY_BUTTON[zeana[yi].rarity][shantell];
          elior.buttons[aydrik].info.active = 1;
          elior.buttons[aydrik].info.unlocked = ryverlynn[yi];
        }
      }
      for (; aydrik < kristyn; aydrik++) {
        elior.buttons[aydrik].info.cosmeticId = -1;
        elior.buttons[aydrik].info.active = 0;
      }
      eliab();
    }
    this.initSelector = caylee;
    elior.buttons[kristyn].info.callback = gallagher;
    elior.buttons[kristyn + 1].info.callback = dieudonne;
  }
  this.settings = false;
  this.quality = Cookies.get("starve_quality") ? Cookies.get("starve_quality") : "high";
  this.quality === "high" ? (document.getElementById("high_ing").style.backgroundColor = "#B56D18", document.getElementById("low_ing").style.backgroundColor = "#3A2A0D", this.quality = 1) : (document.getElementById("low_ing").style.backgroundColor = "#B56D18", document.getElementById("high_ing").style.backgroundColor = "#3A2A0D", this.quality = 0);
  this.high_quality = function () {
    document.getElementById("high_ing").style.backgroundColor = "#B56D18";
    document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
    Cookies.set("starve_quality", "high", {expires: 30});
    document.getElementById("input_ratio").value = 1;
    game.change_ratio();
    ui.quality = 1;
  };
  this.low_quality = function () {
    document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
    document.getElementById("low_ing").style.backgroundColor = "#B56D18";
    Cookies.set("starve_quality", "low", {expires: 30});
    document.getElementById("input_ratio").value = .5 / (devicePixelRatio / backingStoreRatio);
    game.change_ratio();
    ui.quality = 0;
  };
  if (Cookies.get("starve_mapping") === undefined && lang === "FR") {
    keyboard.set_azerty();
    this.mapping = "azerty";
  } else {
    this.mapping = Cookies.get("starve_mapping") ? Cookies.get("starve_mapping") : "qwerty";
  }
  this.mapping == "azerty" ? (keyboard.set_azerty(), document.getElementById("azerty_ing").style.backgroundColor = "#B56D18", document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D") : (document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18", document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D");
  this.set_azerty = function () {
    keyboard.set_azerty();
    document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
    document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    Cookies.set("starve_mapping", "azerty", {expires: 30});
  };
  this.set_qwerty = function () {
    keyboard.set_qwerty();
    document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
    Cookies.set("starve_mapping", "qwerty", {expires: 30});
  };
  this.all_rights_reserved = {id: document.getElementById("all_rights_reserved"), style: document.getElementById("all_rights_reserved").style, translate: {x: 0, y: 0}, update: function () {
    this.style.left = this.translate.x + "px";
    this.style.top = Math.floor(this.translate.y) + "px";
  }};
  function daniellee() {
    var mija = Number(Cookies.get("starve_crate"));
    var isrrael = Number(Cookies.get("starve_dead"));
    var bonard = Number(Cookies.get("starve_book"));
    var finnan = Number(Cookies.get("starve_bag"));
    var selyn = Number(Cookies.get("starve_skin"));
    var cameria = Number(Cookies.get("starve_accessory"));
    elior.skin = selyn ? selyn : 0;
    elior.book = bonard ? bonard : 0;
    elior.crate = mija ? mija : 1;
    elior.accessory = cameria ? cameria : 0;
    elior.bag = finnan ? finnan : 0;
    elior.dead = isrrael ? isrrael : 0;
  }
  daniellee();
  this.unlock = {};
  this.unlock.skin = [];
  this.unlock.bag = [];
  this.unlock.book = [];
  this.unlock.crate = [];
  this.unlock.dead = [];
  this.unlock.accessory = [];
  this.day_mode = 0;
  function marlani() {
    var hilma = COSMETICS.SKIN;
    for (var ramia = 0; ramia < hilma.length; ramia++) {
      if (hilma[ramia].rarity === RARITY.FREE) {
        elior.unlock.skin[ramia] = 1;
      } else {
        elior.unlock.skin[ramia] = 0;
      }
    }
    var hilma = COSMETICS.ACCESSORY;
    for (var ramia = 0; ramia < hilma.length; ramia++) {
      if (hilma[ramia].rarity === RARITY.FREE) {
        elior.unlock.accessory[ramia] = 1;
      } else {
        elior.unlock.accessory[ramia] = 0;
      }
    }
    var hilma = COSMETICS.BAG;
    for (var ramia = 0; ramia < hilma.length; ramia++) {
      if (hilma[ramia].rarity === RARITY.FREE) {
        elior.unlock.bag[ramia] = 1;
      } else {
        elior.unlock.bag[ramia] = 0;
      }
    }
    var hilma = COSMETICS.BOOK;
    for (var ramia = 0; ramia < hilma.length; ramia++) {
      if (hilma[ramia].rarity === RARITY.FREE) {
        elior.unlock.book[ramia] = 1;
      } else {
        elior.unlock.book[ramia] = 0;
      }
    }
    var hilma = COSMETICS.CRATE;
    for (var ramia = 0; ramia < hilma.length; ramia++) {
      hilma[ramia].rarity === RARITY.FREE ? (elior.unlock.crate[ramia] = 1, elior.unlock.dead[ramia] = 1) : (elior.unlock.crate[ramia] = 0, elior.unlock.dead[ramia] = 0);
    }
  }
  this.unlock_cosmetics = marlani;
  marlani();
  this.trevda = {id: document.getElementById("trevda"), style: document.getElementById("trevda").style, translate: {x: 0, y: 0}, update: function () {
    this.style.left = this.translate.x + "px";
    this.style.top = Math.floor(this.translate.y) + "px";
  }};
  var jahzelle = 0, daia = function () {
    elior.update();
    jahzelle++;
    if (jahzelle == 30) {
      elior.add_event_listener();
      elior.in_this_view = true;
      elior.update();
      return;
    }
    window.setTimeout(daia, 33);
  };
  this.quit = function (nam) {
    kyonna = nam;
    elior.remove_event_listener();
    elior.in_this_view = 0;
    eboni = -1;
    olida();
  };
  var kyonna, eboni = -1, olida = function () {
    elior.update();
    eboni++;
    if (eboni == 30) {
      Cookies.set("starve_nickname", elior.nickname.input.value, {expires: 30});
      elior.nickname.style.display = "none";
      elior.server_list.style.display = "none";
      elior.langselect.style.display = "none";
      elior.all_rights_reserved.style.display = "none";
      elior.trevda.style.display = "none";
      elior.stop();
      kyonna();
      return;
    }
    window.setTimeout(olida, 33);
  };
  this.is_run = false;
  this.stop = function () {
    this.is_run = false;
  };
  this.run = function () {
    check_ads();
    document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
    elior.nickname.style.display = "inline-block";
    elior.server_list.style.display = "inline-block";
    elior.langselect.style.display = "inline-block";
    elior.all_rights_reserved.style.display = "inline-block";
    elior.trevda.style.display = "inline-block";
    elior.waiting = false;
    elior.is_run = true;
    eboni = -1;
    jahzelle = 0;
    daia();
  };
  this.update_component = function (carisha, myanah) {
    myanah = myanah < 0 ? -myanah : myanah;
    if ((carisha.position & 16) === 16) {
      if ((carisha.position & 1) === 1) {
        carisha.translate.x = canw2 + carisha.translate._x - myanah;
      } else {
        if ((carisha.position & 2) === 2) {
          carisha.translate.x = canw2 + carisha.translate._x + myanah;
        } else {
          carisha.translate.x = canw2 + carisha.translate._x;
        }
      }
    } else {
      if ((carisha.position & 1) === 1) {
        carisha.translate.x = carisha.translate._x - myanah;
      } else {
        if ((carisha.position & 2) === 2) {
          carisha.translate.x = canw - carisha.translate._x + myanah;
        } else {
          carisha.translate.x = carisha.translate._x;
        }
      }
    }
    if ((carisha.position & 32) === 32) {
      if ((carisha.position & 4) === 4) {
        carisha.translate.y = canh2 + carisha.translate._y - myanah;
      } else {
        if ((carisha.position & 8) === 8) {
          carisha.translate.y = canh2 + carisha.translate._y + myanah;
        } else {
          carisha.translate.y = canh2 + carisha.translate._y;
        }
      }
    } else {
      if ((carisha.position & 4) === 4) {
        carisha.translate.y = carisha.translate._y - myanah;
      } else {
        if ((carisha.position & 8) === 8) {
          carisha.translate.y = canh + carisha.translate._y + myanah;
        } else {
          carisha.translate.y = carisha.translate._y;
        }
      }
    }
    carisha.style !== undefined && (carisha.style.left = Math.floor(carisha.translate.x) + "px", carisha.style.top = Math.floor(carisha.translate.y) + "px");
  };
  this.update = function () {
    var rayshawnda = 0;
    if (jahzelle != 30 || eboni != -1) {
      if (jahzelle != 30) {
        var rayshawnda = 1500 / (jahzelle + 1) - 50;
      }
      if (eboni != -1) {
        var rayshawnda = -(1750 / (30 - eboni + 1) - 48);
      }
    }
    for (var trevar = 0; trevar < this.bkgd.length; trevar++) {
      this.update_component(this.bkgd[trevar], rayshawnda);
    }
    for (var trevar = 0; trevar < this.buttons.length; trevar++) {
      this.update_component(this.buttons[trevar].info, rayshawnda);
    }
    for (var trevar = 0; trevar < this.css.length; trevar++) {
      this.update_component(this.css[trevar], rayshawnda);
    }
    this.loading.translate.x = (canw - this.loading.img.width) / 2;
    this.loading.translate.y = 0;
    this.langselect.translate.x = canw - 450;
    this.langselect.translate.y = canh - 40;
    this.all_rights_reserved.translate.x = canw - 340;
    this.all_rights_reserved.translate.y = canh - 25;
    this.trevda.translate.x = canw - 320;
    this.trevda.translate.y = 80;
    if (jahzelle != 30 || eboni != -1) {
      var hitney = 0;
      if (jahzelle != 30) {
        var hitney = 1500 / (jahzelle + 1) - 50;
      }
      if (eboni != -1) {
        var hitney = -(1750 / (30 - eboni + 1) - 48);
      }
      this.loading.translate.y -= hitney > 0 ? hitney : -hitney;
      this.langselect.translate.y -= hitney < 0 ? hitney : -hitney;
      this.all_rights_reserved.translate.y -= hitney < 0 ? hitney : -hitney;
    }
    this.langselect.update();
    this.all_rights_reserved.update();
    this.trevda.update();
  };
  this.create_spin = function (roswell) {
    var kaior = document.createElement("canvas");
    var anoush = kaior.getContext("2d");
    kaior.width = 342;
    kaior.height = 342;
    var shanike = -Math.PI / 2;
    for (var jarrell = 0; jarrell < roswell.length; jarrell++) {
      var niilah = roswell[jarrell][0];
      var greenwood = roswell[jarrell][1] * Math.PI / 180;
      anoush.beginPath();
      anoush.arc(171, 171, 170, shanike, shanike + greenwood, false);
      anoush.lineTo(171, 171);
      anoush.fillStyle = niilah;
      anoush.fill();
      shanike += greenwood;
    }
    return kaior;
  };
  this.generate_new_nickname = function () {
    this.new_nickname = document.getElementById("account_nickname_input").value;
    this.new_nickname !== this.previous_new_nickname && (this.previous_new_nickname = this.new_nickname, this.new_nickname_img = gui_render_text(this.new_nickname, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550));
  };
  this.draw = function () {
    draw_fake_world();
    ui.xp = Utils.lerp(ui.xp, ui.xp_dest, .03);
    this.bkgd[LEVEL_GAUGE].translate.x = this.bkgd[0].translate.x + -72 + 165 * ui.xp;
    this.bkgd[LEVEL_GAUGE].translate._x = this.bkgd[LEVEL_GAUGE].translate.x;
    this.bkgd[LEVEL_GAUGE].translate.y = this.bkgd[0].translate.y + 30;
    this.bkgd[LEVEL_GAUGE].translate._y = this.bkgd[LEVEL_GAUGE].translate.y;
    for (var wandra = 2; wandra < this.bkgd.length; wandra++) {
      if (this.bkgd[wandra].active === 1) {
        this.bkgd[wandra].draw(imran);
      }
    }
    var joandri = this.kit - Date.now();
    if (joandri > 0) {
      var starkesha = Math.floor(joandri / 6e4);
      var jewelyssa = Math.floor(starkesha / 60);
      starkesha %= 60;
      starkesha !== this.previous_kit_min && (this.previous_kit_min = starkesha, starkesha = starkesha < 10 ? "0" + starkesha : "" + starkesha, elior.kit_img_min = gui_render_text(starkesha, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200));
      jewelyssa !== this.previous_kit_hour && (this.previous_kit_hour = jewelyssa, jewelyssa = jewelyssa < 10 ? "0" + jewelyssa : "" + jewelyssa, elior.kit_img_hour = gui_render_text(jewelyssa, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200));
      var camirah = this.bkgd[BAG_REMAIN_BOX];
      camirah.draw(imran);
      var deionta = this.kit_img_hour;
      ctxDrawImage(imran, deionta, camirah.translate.x - deionta.width / 4 + 182, camirah.translate.y - deionta.height / 4 + 40, deionta.width / 2, deionta.height / 2);
      var deionta = this.kit_img_min;
      ctxDrawImage(imran, deionta, camirah.translate.x - deionta.width / 4 + 251, camirah.translate.y - deionta.height / 4 + 40, deionta.width / 2, deionta.height / 2);
    }
    var joandri = this.privateServerTime - Date.now();
    if (joandri > 0) {
      var starkesha = Math.floor(joandri / 6e4);
      var jewelyssa = Math.floor(starkesha / 60);
      var endra = Math.floor(jewelyssa / 24);
      starkesha %= 60;
      jewelyssa %= 24;
      starkesha !== this.previous_privateServerTime_min && (this.previous_privateServerTime_min = starkesha, starkesha = starkesha < 10 ? "0" + starkesha : "" + starkesha, elior.privateServerTime_img_min = gui_render_text(starkesha, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200));
      jewelyssa !== this.previous_privateServerTime_hour && (this.previous_privateServerTime_hour = jewelyssa, jewelyssa = jewelyssa < 10 ? "0" + jewelyssa : "" + jewelyssa, elior.privateServerTime_img_hour = gui_render_text(jewelyssa, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200));
      endra !== this.previous_privateServerTime_day && (this.previous_privateServerTime_day = endra, endra = endra < 10 ? "0" + endra : "" + endra, elior.privateServerTime_img_day = gui_render_text(endra, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200));
      var camirah = this.bkgd[SERVER_REMAIN_BOX];
      camirah.draw(imran);
      var deionta = this.privateServerTime_img_day;
      ctxDrawImage(imran, deionta, camirah.translate.x - deionta.width / 4 + 113, camirah.translate.y - deionta.height / 4 + 40, deionta.width / 2, deionta.height / 2);
      var deionta = this.privateServerTime_img_hour;
      ctxDrawImage(imran, deionta, camirah.translate.x - deionta.width / 4 + 182, camirah.translate.y - deionta.height / 4 + 40, deionta.width / 2, deionta.height / 2);
      var deionta = this.privateServerTime_img_min;
      ctxDrawImage(imran, deionta, camirah.translate.x - deionta.width / 4 + 251, camirah.translate.y - deionta.height / 4 + 40, deionta.width / 2, deionta.height / 2);
    }
    if ((this.current_view & vanity) === vanity) {
      this.buttons[GAME_BUTTON].info.state = BUTTON_CLICK;
    } else {
      if ((this.current_view & ajianna) === ajianna) {
        this.buttons[LEADERBOARD_BUTTON].info.state = BUTTON_CLICK;
      } else {
        if ((this.current_view & ernestene) === ernestene) {
          this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
        } else {
          if ((this.current_view & davilucas) === davilucas) {
            this.buttons[PROFILE_BUTTON].info.state = BUTTON_CLICK;
          } else {
            if ((this.current_view & jizele) === jizele) {
              this.buttons[TUTORIAL_BUTTON].info.state = BUTTON_CLICK;
            } else {
              if ((this.current_view & kenobi) === kenobi) {
                this.buttons[LOGIN_BUTTON].info.state = BUTTON_CLICK;
              } else {
                if ((this.current_view & lindey) === lindey) {
                  this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                } else {
                  if ((this.current_view & tashaya) === tashaya) {
                    this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                  } else {
                    if ((this.current_view & antoria) === antoria) {
                      this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                    } else {
                      if ((this.current_view & schad) === schad) {
                        this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                      } else {
                        if ((this.current_view & jonross) === jonross) {
                          this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                        } else {
                          if ((this.current_view & ilihia) === ilihia) {
                            this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                          } else {
                            if ((this.current_view & ridgway) === ridgway) {
                              this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                            } else {
                              if ((this.current_view & jazzlynne) === jazzlynne) {
                                this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
                              } else {
                                if ((this.current_view & zuhra) === zuhra) {
                                  this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
                                } else {
                                  if ((this.current_view & alvine) === alvine) {
                                    this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
                                  } else {
                                    if ((this.current_view & holland) === holland) {
                                      this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
                                    } else {
                                      if ((this.current_view & adeleen) === adeleen) {
                                        this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
                                      } else {
                                        if ((this.current_view & ajak) === ajak) {
                                          this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
                                        } else {
                                          if ((this.current_view & bryley) === bryley) {
                                            this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK;
                                          } else {
                                            if ((this.current_view & jrew) === jrew) {
                                              this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK;
                                            } else {
                                              if ((this.current_view & marilynne) === marilynne) {
                                                this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK;
                                              } else {
                                                if ((this.current_view & damariye) === damariye) {
                                                  this.buttons[PROFILE_BUTTON].info.state = BUTTON_CLICK;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((this.current_view & ajianna) === ajianna) {
      this.leaderboard_mode === this.LEADERBOARD_TOTAL ? (this.leaderboard_range = this.LEADERBOARD_ALL, this.buttons[this.LEADERBOARD_ALL].info.active = 0, this.buttons[this.LEADERBOARD_WEEK].info.active = 0, this.buttons[this.LEADERBOARD_TODAY].info.active = 0) : (this.buttons[this.LEADERBOARD_ALL].info.active = 1, this.buttons[this.LEADERBOARD_WEEK].info.active = 1, this.buttons[this.LEADERBOARD_TODAY].info.active = 1);
      if (this.leaderboard_mode === this.LEADERBOARD_NORMAL) {
        this.buttons[this.LEADERBOARD_NORMAL].info.state = BUTTON_CLICK;
      } else {
        if (this.leaderboard_mode === this.LEADERBOARD_VAMPIRE) {
          this.buttons[this.LEADERBOARD_VAMPIRE].info.state = BUTTON_CLICK;
        } else {
          if (this.leaderboard_mode === this.LEADERBOARD_TOTAL) {
            this.buttons[this.LEADERBOARD_TOTAL].info.state = BUTTON_CLICK;
          } else {
            if (this.leaderboard_mode === this.LEADERBOARD_ZOMBIE) {
              this.buttons[this.LEADERBOARD_ZOMBIE].info.state = BUTTON_CLICK;
            } else {
              if (this.leaderboard_mode === this.LEADERBOARD_FOREST) {
                this.buttons[this.LEADERBOARD_FOREST].info.state = BUTTON_CLICK;
              }
            }
          }
        }
      }
      if (this.leaderboard_range === this.LEADERBOARD_ALL) {
        this.buttons[this.LEADERBOARD_ALL].info.state = BUTTON_CLICK;
      } else {
        if (this.leaderboard_range === this.LEADERBOARD_WEEK) {
          this.buttons[this.LEADERBOARD_WEEK].info.state = BUTTON_CLICK;
        } else {
          if (this.leaderboard_range === this.LEADERBOARD_TODAY) {
            this.buttons[this.LEADERBOARD_TODAY].info.state = BUTTON_CLICK;
          }
        }
      }
      if (this.leaderboard_sorted === this.LEADERBOARD_KILL) {
        this.buttons[this.LEADERBOARD_KILL].info.state = BUTTON_CLICK;
      } else {
        if (this.leaderboard_sorted === this.LEADERBOARD_SCORE) {
          this.buttons[this.LEADERBOARD_SCORE].info.state = BUTTON_CLICK;
        } else {
          if (this.leaderboard_sorted === this.LEADERBOARD_TIME) {
            this.buttons[this.LEADERBOARD_TIME].info.state = BUTTON_CLICK;
          }
        }
      }
      if (this.leaderboard_season === this.LEADERBOARD_SEASON1) {
        this.buttons[this.LEADERBOARD_SEASON1].info.state = BUTTON_CLICK;
      } else {
        if (this.leaderboard_season === this.LEADERBOARD_SEASON2) {
          this.buttons[this.LEADERBOARD_SEASON2].info.state = BUTTON_CLICK;
        } else {
          if (this.leaderboard_season === this.LEADERBOARD_SEASON3) {
            this.buttons[this.LEADERBOARD_SEASON3].info.state = BUTTON_CLICK;
          } else {
            if (this.leaderboard_season === this.LEADERBOARD_SEASON4) {
              this.buttons[this.LEADERBOARD_SEASON4].info.state = BUTTON_CLICK;
            } else {
              if (this.leaderboard_season === this.LEADERBOARD_SEASON5) {
                this.buttons[this.LEADERBOARD_SEASON5].info.state = BUTTON_CLICK;
              }
            }
          }
        }
      }
    }
    if ((this.current_view & davilucas) === davilucas) {
      if (this.current_mode_score === -1) {
        this.buttons[kaeliana].info.state = BUTTON_CLICK;
      } else {
        if (this.current_mode_score === WORLD.MODE_PVP) {
          this.buttons[drene].info.state = BUTTON_CLICK;
        } else {
          if (this.current_mode_score === WORLD.MODE_ZOMBIES) {
            this.buttons[breeah].info.state = BUTTON_CLICK;
          } else {
            if (this.current_mode_score === WORLD.MODE_VAMPIRES) {
              this.buttons[dimple].info.state = BUTTON_CLICK;
            } else {
              if (this.current_mode_score === WORLD.MODE_LEGACY) {
                this.buttons[samaia].info.state = BUTTON_CLICK;
              }
            }
          }
        }
      }
      if (this.profile_season === 0) {
        this.buttons[kwan].info.state = BUTTON_CLICK;
      } else {
        if (this.profile_season === 1) {
          this.buttons[real].info.state = BUTTON_CLICK;
        } else {
          if (this.profile_season === 2) {
            this.buttons[rainen].info.state = BUTTON_CLICK;
          } else {
            if (this.profile_season === 3) {
              this.buttons[analyssa].info.state = BUTTON_CLICK;
            } else {
              if (this.profile_season === 4) {
                this.buttons[annakat].info.state = BUTTON_CLICK;
              }
            }
          }
        }
      }
    }
    if ((this.current_view & vanity) === vanity && client.privateServer === 0) {
      if (this.buttons[katyana].in_button(mouse.pos)) {
        this.buttons[katyana].hint = Math.min(1, this.buttons[katyana].hint + delta * 1.5);
      } else {
        this.buttons[katyana].hint = Math.max(0, this.buttons[katyana].hint - delta * 1.5);
      }
      if (this.buttons[quill].in_button(mouse.pos)) {
        this.buttons[quill].hint = Math.min(1, this.buttons[quill].hint + delta * 1.5);
      } else {
        this.buttons[quill].hint = Math.max(0, this.buttons[quill].hint - delta * 1.5);
      }
      if (this.buttons[leetal].in_button(mouse.pos)) {
        this.buttons[leetal].hint = Math.min(1, this.buttons[leetal].hint + delta * 1.5);
      } else {
        this.buttons[leetal].hint = Math.max(0, this.buttons[leetal].hint - delta * 1.5);
      }
      if (this.buttons[azyia].in_button(mouse.pos)) {
        this.buttons[azyia].hint = Math.min(1, this.buttons[azyia].hint + delta * 1.5);
      } else {
        this.buttons[azyia].hint = Math.max(0, this.buttons[azyia].hint - delta * 1.5);
      }
      if (this.buttons[everitt].in_button(mouse.pos)) {
        this.buttons[everitt].hint = Math.min(1, this.buttons[everitt].hint + delta * 1.5);
      } else {
        this.buttons[everitt].hint = Math.max(0, this.buttons[everitt].hint - delta * 1.5);
      }
      if (this.buttons[leoma].in_button(mouse.pos)) {
        this.buttons[leoma].hint = Math.min(1, this.buttons[leoma].hint + delta * 1.5);
      } else {
        this.buttons[leoma].hint = Math.max(0, this.buttons[leoma].hint - delta * 1.5);
      }
    }
    var tangula = 1;
    if ((this.current_view & (tashaya | antoria | schad | jonross | ilihia | ridgway)) > 1) {
      var deionta = IMAGES.ARROW_SPIN;
      imran.save();
      imran.translate(canw2, nairy + deionta.height / 4);
      this.spin === 1 && (this.spin_effect += delta / 3, tangula = this.spin_target - 100 / Math.pow(1 + this.spin_effect, 1 + this.spin_effect), imran.rotate(tangula));
      ctxDrawImage(imran, deionta, -deionta.width / 4, -deionta.height / 4, deionta.width / 2, deionta.height / 2);
      imran.restore();
    }
    if (client.privateServer === 0) {
      if (client.current_mode === WORLD.MODE_PVP) {
        this.buttons[katyana].info.state = BUTTON_CLICK;
      } else {
        if (client.current_mode === WORLD.MODE_LEGACY) {
          this.buttons[quill].info.state = BUTTON_CLICK;
        } else {
          if (client.current_mode === WORLD.MODE_ZOMBIES) {
            this.buttons[everitt].info.state = BUTTON_CLICK;
          } else {
            if (client.current_mode === WORLD.MODE_VAMPIRES) {
              this.buttons[leoma].info.state = BUTTON_CLICK;
            } else {
              if (client.current_mode === WORLD.MODE_COMMUNITY) {
                this.buttons[leetal].info.state = BUTTON_CLICK;
              } else {
                if (client.current_mode === WORLD.MODE_EXPERIMENTAL) {
                  this.buttons[azyia].info.state = BUTTON_CLICK;
                }
              }
            }
          }
        }
      }
    }
    for (var wandra = 1; wandra < this.buttons.length; wandra++) {
      if (this.buttons[wandra].info.active === 1) {
        this.buttons[wandra].draw(imran);
      }
    }
    this.bkgd[0].draw(imran);
    if ((this.current_view & (micharl | bosie)) > 0) {
      var deionta = this.new_nickname_img;
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4, 138, deionta.width / 2, deionta.height / 2);
    }
    var kaysea = Math.max(1, Math.min(18, Math.floor((ui.lvl + 3) / 2)));
    this.bkgd[kaysea].active = 1;
    this.bkgd[kaysea].draw(imran);
    this.bkgd[kaysea].active = 0;
    this.buttons[0].draw(imran);
    if ((this.current_view & (ernestene | zuhra | holland | jazzlynne | adeleen)) > 1) {
      var jacqui = (this.current_view & (zuhra | holland | jazzlynne | adeleen)) > 1 ? -190 : 0;
      var deionta = sprite[SPRITE.BAG][this.bag][this.day_mode];
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 + jacqui, 183, deionta.width / 2, deionta.height / 2);
      this.breath = (this.breath + delta * 1e3) % 2e3;
      var kelcei = 4.5 * (this.breath < 1e3) ? this.breath / 1e3 : (2e3 - this.breath) / 1e3;
      var deionta = sprite[SPRITE.BOOK][this.book][this.day_mode];
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 - 62 + kelcei + jacqui, 240, deionta.width / 2, deionta.height / 2);
      var deionta = sprite[SPRITE.HAND][this.skin][this.day_mode];
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 - 54 + kelcei + jacqui, 272, deionta.width / 2, deionta.height / 2);
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 + 54 - kelcei + jacqui, 272, deionta.width / 2, deionta.height / 2);
      var deionta = sprite[SPRITE.BODY][this.skin][this.day_mode];
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 + jacqui, 222, deionta.width / 2, deionta.height / 2);
      var deionta = sprite[SPRITE.ACCESSORY][this.accessory][this.day_mode];
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 + jacqui, 222, deionta.width / 2, deionta.height / 2);
    }
    if ((this.current_view & ernestene) === ernestene) {
      var deionta = sprite[SPRITE.CRATE][this.crate][this.day_mode];
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 - 61, 406 - deionta.height / 4, deionta.width / 2, deionta.height / 2);
      var deionta = sprite[SPRITE.CRATE][this.dead][this.day_mode];
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 + 53, 406 - deionta.height / 4, deionta.width / 2, deionta.height / 2);
    }
    if ((this.current_view & alvine) === alvine) {
      var deionta = sprite[SPRITE.CRATE][this.dead][this.day_mode];
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 - 200, 268 - deionta.height / 4, deionta.width / 2, deionta.height / 2);
    }
    if ((this.current_view & ajak) === ajak) {
      var deionta = sprite[SPRITE.CRATE][this.crate][this.day_mode];
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4 - 200, 268 - deionta.height / 4, deionta.width / 2, deionta.height / 2);
    }
    if ((this.current_view & (zuhra | holland | jazzlynne | adeleen | alvine | ajak)) > 1) {
      for (var wandra = 1; wandra < this.buttons.length; wandra++) {
        if ((this.buttons[wandra].view & this.current_view) === 0) {
          continue;
        }
        var dix = this.buttons[wandra].info;
        if (dix.cosmeticId >= 0) {
          var deionta = dix.cosmeticType[dix.cosmeticId].day;
          ctxDrawImage(imran, deionta, dix.translate.x - deionta.width / 8 + 44.5, dix.translate.y - deionta.height / 8 + 45.5, deionta.width / 4, deionta.height / 4);
          if (dix.unlocked !== 1) {
            var deionta = IMAGES.RED_LOCKED;
            ctxDrawImage(imran, deionta, dix.translate.x - deionta.width / 4 + 44.5, dix.translate.y - deionta.height / 4 + 44.5, deionta.width / 2, deionta.height / 2);
          }
        }
      }
      var deionta = this.cosmetic_name;
      ctxDrawImage(imran, deionta, canw2 - 312, 375, deionta.width / 2, deionta.height / 2);
      var deionta = this.cosmetic_author;
      ctxDrawImage(imran, deionta, canw2 - 312, 395, deionta.width / 2, deionta.height / 2);
    }
    this.bread !== this.previous_bread && (this.previous_bread = this.bread, this.bread_img = gui_render_text("" + this.bread, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250));
    ctxDrawImage(imran, this.bread_img, this.bkgd[0].translate.x + 350, 15, this.bread_img.w2, this.bread_img.h2);
    this.lvl !== this.previous_lvl && (this.previous_lvl = this.lvl, this.lvl_img = gui_render_text("LVL " + (this.lvl + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, undefined, undefined, undefined, "#3F3019", 20));
    ctxDrawImage(imran, this.lvl_img, this.bkgd[0].translate.x + 94, 0, this.lvl_img.w2, this.lvl_img.h2);
    if (client.privateServer === 0) {
      var caylor = this.buttons[katyana].hint;
      if (caylor > 0) {
        var deionta = IMAGES.NORMAL_MODE_HOVER;
        ctxDrawImage(imran, deionta, canw2 - deionta.width / 4, -36 - deionta.height * Utils.ease_in_out_quad(1 - caylor) / 2, deionta.width / 2, deionta.height / 2);
      }
      var caylor = this.buttons[quill].hint;
      if (caylor > 0) {
        var deionta = IMAGES.FOREST_MODE_HOVER;
        ctxDrawImage(imran, deionta, canw2 - deionta.width / 4, -36 - deionta.height * Utils.ease_in_out_quad(1 - caylor) / 2, deionta.width / 2, deionta.height / 2);
      }
      var caylor = this.buttons[leetal].hint;
      if (caylor > 0) {
        var deionta = IMAGES.MODE_COMMUNITY_HOVER;
        ctxDrawImage(imran, deionta, canw2 - deionta.width / 4, -36 - deionta.height * Utils.ease_in_out_quad(1 - caylor) / 2, deionta.width / 2, deionta.height / 2);
      }
      var caylor = this.buttons[azyia].hint;
      if (caylor > 0) {
        var deionta = IMAGES.MODE_EXPERIMENTAL_HOVER;
        ctxDrawImage(imran, deionta, canw2 - deionta.width / 4, -36 - deionta.height * Utils.ease_in_out_quad(1 - caylor) / 2, deionta.width / 2, deionta.height / 2);
      }
      var caylor = this.buttons[leoma].hint;
      if (caylor > 0) {
        var deionta = IMAGES.VAMPIRE_MODE_HOVER;
        ctxDrawImage(imran, deionta, canw2 - deionta.width / 4, -36 - deionta.height * Utils.ease_in_out_quad(1 - caylor) / 2, deionta.width / 2, deionta.height / 2);
      }
      var caylor = this.buttons[everitt].hint;
      if (caylor > 0) {
        var deionta = IMAGES.ZOMBIE_MODE_HOVER;
        ctxDrawImage(imran, deionta, canw2 - deionta.width / 4, -36 - deionta.height * Utils.ease_in_out_quad(1 - caylor) / 2, deionta.width / 2, deionta.height / 2);
      }
    }
    if (this.spin === 1 && Math.abs(tangula - this.spin_target) < .006) {
      imran.globalAlpha = Math.min(1, this.spin_win_effect * 3);
      var deionta = IMAGES.SPIN_LIGHT;
      imran.save();
      imran.translate(canw2, 260);
      this.spin_win_effect += delta;
      imran.rotate(this.spin_win_effect);
      ctxDrawImage(imran, deionta, -deionta.width / 2, -deionta.height / 2, deionta.width, deionta.height);
      imran.restore();
      var kelcei = 1.05 + .05 * Math.sin(this.spin_win_effect * 5);
      if (this.spin_type === 0) {
        deionta = COSMETICS.SKIN[this.spin_win].day;
        var cherine = kelcei * deionta.width, mendal = kelcei * deionta.height;
        ctxDrawImage(imran, deionta, canw2 - cherine / 2, 260 - mendal / 2, cherine, mendal);
      } else {
        if (this.spin_type === 1) {
          deionta = COSMETICS.SKIN[0].day;
          var cherine = kelcei * deionta.width;
          var mendal = kelcei * deionta.height;
          ctxDrawImage(imran, deionta, canw2 - cherine / 2, 260 - mendal / 2, cherine, mendal);
          deionta = COSMETICS.ACCESSORY[this.spin_win].day;
          var cherine = kelcei * deionta.width;
          var mendal = kelcei * deionta.height;
          ctxDrawImage(imran, deionta, canw2 - cherine / 2, 260 - mendal / 2, cherine, mendal);
        } else {
          if (this.spin_type === 2) {
            deionta = COSMETICS.BAG[this.spin_win].day;
            var cherine = kelcei * deionta.width;
            var mendal = kelcei * deionta.height;
            ctxDrawImage(imran, deionta, canw2 - cherine / 2, 180 - mendal / 2, cherine, mendal);
            deionta = COSMETICS.SKIN[0].day;
            var cherine = kelcei * deionta.width;
            var mendal = kelcei * deionta.height;
            ctxDrawImage(imran, deionta, canw2 - cherine / 2, 260 - mendal / 2, cherine, mendal);
          } else {
            if (this.spin_type === 3) {
              deionta = COSMETICS.BOOK[this.spin_win].day;
              var cherine = kelcei * deionta.width;
              var mendal = kelcei * deionta.height;
              imran.save();
              imran.translate(canw2, 260);
              imran.rotate(Math.PI);
              ctxDrawImage(imran, deionta, -cherine / 2, -mendal / 2, cherine, mendal);
              imran.restore();
            } else {
              if (this.spin_type === 4) {
                deionta = COSMETICS.CRATE[this.spin_win].day;
                var cherine = kelcei * deionta.width, mendal = kelcei * deionta.height;
                ctxDrawImage(imran, deionta, canw2 - cherine / 2, 260 - mendal / 2, cherine, mendal);
              }
            }
          }
        }
      }
      var deionta = this.spin_name;
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4, 340, deionta.width / 2, deionta.height / 2);
      var deionta = this.spin_author;
      ctxDrawImage(imran, deionta, canw2 - deionta.width / 4, 365, deionta.width / 2, deionta.height / 2);
      this.spin_win_effect > 6 && (this.spin = 0, telesia(lindey));
      imran.globalAlpha = 1;
    }
    user.alert.draw("#FFF", "#000");
    if (elior.waiting) {
      this.loading.draw();
    }
  };
  var dioselyn = 0, vanity = Math.pow(2, dioselyn++), davilucas = Math.pow(2, dioselyn++);
  this.__PROFILE__ = davilucas;
  var kenobi = Math.pow(2, dioselyn++), ernestene = Math.pow(2, dioselyn++), lindey = Math.pow(2, dioselyn++), jizele = Math.pow(2, dioselyn++), ajianna = Math.pow(2, dioselyn++), iam = Math.pow(2, dioselyn++);
  this.__BUY__ = iam;
  var chazmin = Math.pow(2, dioselyn++), karis = Math.pow(2, dioselyn++), tashaya = Math.pow(2, dioselyn++), antoria = Math.pow(2, dioselyn++), schad = Math.pow(2, dioselyn++), jonross = Math.pow(2, dioselyn++), ilihia = Math.pow(2, dioselyn++), ridgway = Math.pow(2, dioselyn++), jazzlynne = Math.pow(2, dioselyn++), alvine = Math.pow(2, dioselyn++), zuhra = Math.pow(2, dioselyn++), holland = Math.pow(2, dioselyn++), adeleen = Math.pow(2, dioselyn++), ajak = Math.pow(2, dioselyn++), bosie = Math.pow(2, dioselyn++), micharl = Math.pow(2, dioselyn++), bryley = Math.pow(2, dioselyn++);
  this.__SERVER_LOCATION__ = bryley;
  var jrew = Math.pow(2, dioselyn++);
  this.__SERVER_DURATION__ = jrew;
  var marilynne = Math.pow(2, dioselyn++);
  this.__SERVER_ACCESS__ = marilynne;
  var damariye = Math.pow(2, dioselyn++);
  this.current_view = vanity;
  function keren(cheo, devarus, brittnie) {
    for (var mossie = 0; mossie < elior.bkgd.length; mossie++) {
      if ((elior.bkgd[mossie].view & cheo) !== 0) {
        elior.bkgd[mossie].active = devarus;
      }
    }
    for (var mossie = 0; mossie < elior.buttons.length; mossie++) {
      if ((elior.buttons[mossie].view & cheo) !== 0) {
        elior.buttons[mossie].info.active = devarus;
      }
    }
    for (var mossie = 0; mossie < elior.css.length; mossie++) {
      if ((elior.css[mossie].view & cheo) !== 0) {
        elior.css[mossie].style.display = brittnie;
      }
    }
  }
  var iassac = [];
  this.hijackedAsset = 0;
  function reberta(kokomi, sureya) {
    kokomi = kokomi.replace("Xday", "day");
    kokomi = kokomi.replace("Xnight", "night");
    for (var xyair = 0; xyair < iassac.length; xyair++) {
      var zayshaun = iassac[xyair];
      if (zayshaun[0] === kokomi) {
        if (zayshaun[1] !== sureya) {
          ui.hijackedAsset = 1;
        }
        return;
      }
    }
    iassac.push([kokomi, sureya]);
  }
  function evangely(altay) {
    altay = altay.replace("http://starve.io", "https://starve.io");
    var xade = new XMLHttpRequest;
    xade.open("HEAD", altay, true);
    xade.onreadystatechange = function () {
      if (xade.readyState === 4) {
        if (xade.status === 200) {
          var normen = Number(xade.getResponseHeader("Content-Length"));
          if (normen > 0) {
            reberta(altay, normen);
          }
        }
      }
    };
    xade.send(null);
  }
  function jathan() {}
  function aubreyona() {
    var jiten = Number(Cookies.get("starve_crate"));
    var ugene = Number(Cookies.get("starve_dead"));
    var saliha = Number(Cookies.get("starve_book"));
    var sheala = Number(Cookies.get("starve_bag"));
    var vaidik = Number(Cookies.get("starve_skin"));
    var adoniyah = Number(Cookies.get("starve_accessory"));
    if (!(ui.unlock.skin[ui.skin] > 0)) {
      ui.skin = !(ui.unlock.skin[vaidik] > 0) ? 0 : vaidik;
    }
    if (!(ui.unlock.book[ui.book] > 0)) {
      ui.book = !(ui.unlock.book[saliha] > 0) ? 0 : saliha;
    }
    if (!(ui.unlock.dead[ui.dead] > 0)) {
      ui.dead = !(ui.unlock.dead[ugene] > 0) ? 0 : ugene;
    }
    if (!(ui.unlock.crate[ui.crate] > 0)) {
      ui.crate = !(ui.unlock.crate[jiten] > 0) ? 0 : jiten;
    }
    if (!(ui.unlock.accessory[ui.accessory] > 0)) {
      ui.accessory = !(ui.unlock.accessory[adoniyah] > 0) ? 0 : adoniyah;
    }
    if (!(ui.unlock.bag[ui.bag] > 0)) {
      ui.bag = !(ui.unlock.bag[sheala] > 0) ? 0 : sheala;
    }
  }
  function telesia(emaya) {
    if (elior.in_this_view === false) {
      return;
    }
    keren(chazmin, 0, "none");
    keren(karis, 0, "none");
    aubreyona();
    if (emaya === elior.current_view || elior.spin >= 1) {
      return;
    }
    if (emaya === vanity || emaya === lindey || emaya === davilucas || emaya === ajianna || emaya === ernestene || emaya === jizele) {
      elior.trevda.style.display = "inline-block";
    } else {
      elior.trevda.style.display = "none";
    }
    keren(elior.current_view, 0, "none");
    elior.current_view = emaya;
    keren(elior.current_view, 1, "inline-block");
  }
  this.select_subview = telesia;
  function elvert() {
    aubreyona();
    !(___adsvid % 2) && isYolla === 1 ? (console.log("Showing ads"), window.YMPB.que.push(function () {
      document.getElementById("preroll").style.display = "block";
      window.YMPB.preroll("preroll", yollaCallback);
    })) : (console.log("Connecting to game"), client.connect());
  }
  function ruthvika(jestine, talan, deverly) {
    const twila = new XMLHttpRequest;
    twila.open("GET", jestine);
    twila.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    twila.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        if (talan !== undefined) {
          talan(twila.responseText);
        }
      } else {
        if (this.readyState == 4) {
          if (deverly !== undefined) {
            deverly();
          }
        }
      }
    };
    twila.send();
  }
  this.play_game = function () {
    if (elior.waiting === false) {
      user.reconnect.enabled = false;
      elior.waiting = true;
      if (user.newToken) {
        elvert();
      } else {
        ruthvika(DB + "token", function (emayah) {
          console.log("::: [iandev] /token token :::", emayah);
          try {
            var melvinia = emayah.split("_"), lorijean = melvinia[0] + "_", zecharyah = Number(melvinia[1]), shuniya = Math.abs(fun0_token(zecharyah, 8260, 46947, 8004, 37330, 5330));
            console.log("::: [iandev] /challenge token :::", shuniya);
            user.newToken = lorijean + shuniya;
          } catch (baxlee) {
            console.error("::: [iandev] /token error :::", baxlee);
          }
          elvert();
        }, function () {
          elior.waiting = false;
        });
      }
    }
  };
  window.innerWidth < 1300 ? this.nickname = {id: document.getElementById("nickname_block"), style: document.getElementById("nickname_block").style, input: document.getElementById("nickname_input"), active: 1, position: 5, view: vanity, translate: {x: 0, y: 0, _x: 200, _y: 184}} : this.nickname = {id: document.getElementById("nickname_block"), style: document.getElementById("nickname_block").style, input: document.getElementById("nickname_input"), active: 1, position: 20, view: vanity, translate: {x: 0, y: 0, _x: -180, _y: 184}};
  this.nickname.id.addEventListener("keyup", function (ralinda) {
    ralinda.preventDefault();
    if (ralinda.keyCode == 13 && !elior.waiting && !elior.settings) {
      elior.play_game();
    }
  });
  this.nickname.input.value = Cookies.get("starve_nickname") ? Cookies.get("starve_nickname") : "";
  this.account_nickname = {id: document.getElementById("account_nickname_block"), style: document.getElementById("account_nickname_block").style, input: document.getElementById("account_nickname_input"), active: 0, position: 20, view: davilucas, translate: {x: 0, y: 0, _x: -122, _y: 110}};
  if (window.innerWidth < 1300) {
    this.server_list = {id: document.getElementById("servselect"), style: document.getElementById("servselect").style, active: 1, position: 5, view: vanity, translate: {x: 0, y: 0, _x: 208, _y: 225}};
  } else {
    this.server_list = {id: document.getElementById("servselect"), style: document.getElementById("servselect").style, active: 1, position: 20, view: vanity, translate: {x: 0, y: 0, _x: -180, _y: 225}};
  }
  this.leaderboard = {id: document.getElementById("leaderboard"), style: document.getElementById("leaderboard").style, active: 0, position: 20, view: ajianna, translate: {x: 0, y: 0, _x: -294.5, _y: 190}};
  this.stats_box = {id: document.getElementById("stats_box"), style: document.getElementById("stats_box").style, active: 0, position: 20, view: davilucas, translate: {x: 0, y: 0, _x: 125, _y: 187}};
  this.serverAddressBlock = {id: document.getElementById("serverAddressBlock"), style: document.getElementById("serverAddressBlock").style, input: document.getElementById("serverAddressInput"), active: 0, position: 20, view: marilynne, translate: {x: 0, y: 0, _x: -220, _y: 350}};
  dioselyn = 0;
  this.css = [];
  this.css[dioselyn++] = this.nickname;
  this.css[dioselyn++] = this.server_list;
  this.css[dioselyn++] = this.leaderboard;
  this.css[dioselyn++] = this.account_nickname;
  this.css[dioselyn++] = this.stats_box;
  this.css[dioselyn++] = this.serverAddressBlock;
  dioselyn = 0;
  this.bkgd = [];
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_RESUME, 1, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL1, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL2, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL3, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL4, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL5, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL6, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL7, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL8, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL9, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL10, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL11, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL12, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL13, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL14, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL15, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL16, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL17, 0, 0, 0, 1);
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.AVATAR_LVL18, 0, 0, 0, 1);
  if (window.innerWidth < 1300) {
    this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.LOGO_INTERFACE, 1, 200, 100, 5);
  } else {
    this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.LOGO_INTERFACE, 1, -188.25, 100, 20);
  }
  this.bkgd[dioselyn++].view = vanity;
  this.bkgd[dioselyn++] = gui_create_image_hd(IMAGES.LINKS_BG, 1, 403, -10, 2);
  window.innerWidth > 1300 && (this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.CHANGELOG_BOX, 1, -221.25, -159.5, 24), this.bkgd[dioselyn++].view = vanity);
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.PROFILE_BOX, 0, -323.25, 100, 20);
  this.bkgd[dioselyn++].view = davilucas;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SKINS_BOX, 0, -356.25, 100, 20);
  this.bkgd[dioselyn++].view = ernestene;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.ACCOUNT_BOX, 0, -226.25, 50, 20);
  this.bkgd[dioselyn++].view = kenobi;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SHOP_BOX, 0, -402, 130, 20);
  this.bkgd[dioselyn++].view = lindey;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SERVER_LOCATION_BOX, 0, -279.25, 130, 20);
  this.bkgd[dioselyn++].view = bryley;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SERVER_DURATION_BOX, 0, -305.5, 130, 20);
  this.bkgd[dioselyn++].view = jrew;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SERVER_ACCESS_BOX, 0, -305.5, 100, 20);
  this.bkgd[dioselyn++].view = marilynne;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SEASON5_BOX, 0, -IMAGES.SEASON5_BOX.width / 4 - 350, -15, 20);
  this.bkgd[dioselyn++].view = damariye;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.TUTORIAL_BOX, 0, -374.25, 110, 20);
  this.bkgd[dioselyn++].view = jizele;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.LEADERBOARD_BOX, 0, -306.5, 100, 20);
  this.bkgd[dioselyn++].view = ajianna;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.BUY_BREAD_BOX, 0, -345.25, 80, 20);
  this.bkgd[dioselyn++].view = iam;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SPIN1, 0, -385.5, 150, 20);
  this.bkgd[dioselyn++].view = tashaya;
  var osaretin = 3.6, taniko = this.create_spin([["#25c5d6", osaretin * 3], ["#e2cf27", osaretin * 10], ["#afac98", osaretin * 30], ["#d88e23", osaretin * 57]]);
  this.bkgd[dioselyn] = gui_create_image_hd(taniko, 0, -taniko.width / 4, 178, 20);
  this.bkgd[dioselyn++].view = tashaya;
  this.play_spin = function (jarratt, elvada, tatsue) {
    elior.spin = 1;
    elior.spin_effect = 0;
    elior.spin_win_effect = 0;
    elior.spin_target = jarratt;
    elior.spin_type = elvada;
    var arvin, rynell = 0;
    if (elvada === 0) {
      for (rynell = 0; rynell < COSMETICS.SKIN.length; rynell++) {
        if (tatsue === COSMETICS.SKIN[rynell].id) {
          break;
        }
      }
      arvin = COSMETICS.SKIN[rynell];
      elior.unlock.skin[rynell] = 1;
    } else {
      if (elvada === 1) {
        for (rynell = 0; rynell < COSMETICS.ACCESSORY.length; rynell++) {
          if (tatsue === COSMETICS.ACCESSORY[rynell].id) {
            break;
          }
        }
        arvin = COSMETICS.ACCESSORY[rynell];
        elior.unlock.accessory[rynell] = 1;
      } else {
        if (elvada === 2) {
          for (rynell = 0; rynell < COSMETICS.BAG.length; rynell++) {
            if (tatsue === COSMETICS.BAG[rynell].id) {
              break;
            }
          }
          arvin = COSMETICS.BAG[rynell];
          elior.unlock.bag[rynell] = 1;
        } else {
          if (elvada === 3) {
            for (rynell = 0; rynell < COSMETICS.BOOK.length; rynell++) {
              if (tatsue === COSMETICS.BOOK[rynell].id) {
                break;
              }
            }
            arvin = COSMETICS.BOOK[rynell];
            elior.unlock.book[rynell] = 1;
          } else {
            if (elvada === 4) {
              for (rynell = 0; rynell < COSMETICS.CRATE.length; rynell++) {
                if (tatsue === COSMETICS.CRATE[rynell].id) {
                  break;
                }
              }
              arvin = COSMETICS.CRATE[rynell];
              elior.unlock.crate[rynell] = 1;
              elior.unlock.dead[rynell] = 1;
            }
          }
        }
      }
    }
    elior.spin_win = rynell;
    elior.spin_author = gui_render_text("by " + arvin.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 24);
    elior.spin_name = gui_render_text(arvin.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 20);
  };
  this.spin = 0;
  this.spin_effect = 0;
  this.spin_target = 0;
  this.spin_type = 0;
  this.spin_win_effect = 0;
  this.spin_author = undefined;
  this.spin_name = undefined;
  var nairy = 197, mark = -65;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SPIN2, 0, -385.5, 150, 20);
  this.bkgd[dioselyn++].view = ilihia;
  var taniko = this.create_spin([["#d45ce5", osaretin * 3], ["#25c5d6", osaretin * 10], ["#e2cf27", osaretin * 30], ["#afac98", osaretin * 57]]);
  this.bkgd[dioselyn] = gui_create_image_hd(taniko, 0, -taniko.width / 4, 178, 20);
  this.bkgd[dioselyn++].view = ilihia;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SPIN3, 0, -385.5, 150, 20);
  this.bkgd[dioselyn++].view = schad;
  var taniko = this.create_spin([["#d33a2a", osaretin * 3], ["#d45ce5", osaretin * 10], ["#25c5d6", osaretin * 30], ["#e2cf27", osaretin * 57]]);
  this.bkgd[dioselyn] = gui_create_image_hd(taniko, 0, -taniko.width / 4, 178, 20);
  this.bkgd[dioselyn++].view = schad;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SPIN4, 0, -385.5, 150, 20);
  this.bkgd[dioselyn++].view = jonross;
  var taniko = this.create_spin([["#25c5d6", osaretin * 3], ["#e2cf27", osaretin * 10], ["#afac98", osaretin * 30], ["#d88e23", osaretin * 57]]);
  this.bkgd[dioselyn] = gui_create_image_hd(taniko, 0, -taniko.width / 4, 178, 20);
  this.bkgd[dioselyn++].view = jonross;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SPIN5, 0, -385.5, 150, 20);
  this.bkgd[dioselyn++].view = antoria;
  var taniko = this.create_spin([["#d45ce5", osaretin * 3], ["#25c5d6", osaretin * 10], ["#e2cf27", osaretin * 30], ["#afac98", osaretin * 57]]);
  this.bkgd[dioselyn] = gui_create_image_hd(taniko, 0, -taniko.width / 4, 178, 20);
  this.bkgd[dioselyn++].view = antoria;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.SPIN6, 0, -385.5, 150, 20);
  this.bkgd[dioselyn++].view = ridgway;
  var taniko = this.create_spin([["#d33a2a", osaretin * 3], ["#d45ce5", osaretin * 10], ["#25c5d6", osaretin * 30], ["#e2cf27", osaretin * 57]]);
  this.bkgd[dioselyn] = gui_create_image_hd(taniko, 0, -taniko.width / 4, 178, 20);
  this.bkgd[dioselyn++].view = ridgway;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.CUSTOM_SKIN_BOX, 0, -341.5, 100, 20);
  this.bkgd[dioselyn++].view = jazzlynne;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.ACCESSORIES_BOX, 0, -341.5, 100, 20);
  this.bkgd[dioselyn++].view = adeleen;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.BAG_BOX, 0, -341.5, 100, 20);
  this.bkgd[dioselyn++].view = zuhra;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.BOOK_BOX, 0, -341.5, 100, 20);
  this.bkgd[dioselyn++].view = holland;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.CRATE_BOX, 0, -341.5, 100, 20);
  this.bkgd[dioselyn++].view = alvine;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.LOOT_BOX, 0, -341.5, 100, 20);
  this.bkgd[dioselyn++].view = ajak;
  BAG_REMAIN_BOX = dioselyn++;
  this.bkgd[BAG_REMAIN_BOX] = gui_create_image_hd(IMAGES.BAG_REMAIN_BOX, 0, 484, 0, 4);
  SERVER_REMAIN_BOX = dioselyn++;
  this.bkgd[SERVER_REMAIN_BOX] = gui_create_image_hd(IMAGES.SERVER_REMAIN_BOX, 0, 812.5, 0, 4);
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.LOCKED_CUSTOM_ALERT, 0, -189.5, -5, 20);
  this.bkgd[dioselyn++].view = karis;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.LOCKED_SKIN_ALERT, 0, -189.5, -5, 20);
  this.bkgd[dioselyn++].view = chazmin;
  LEVEL_GAUGE = dioselyn++;
  this.bkgd[LEVEL_GAUGE] = gui_create_image_hd(IMAGES.GAUGE, 1, 93, 30, 4);
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.CHANGE_NICKNAME1_BOX, 0, -173, 110, 20);
  this.bkgd[dioselyn++].view = bosie;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.CHANGE_NICKNAME0_BOX, 0, -173, 110, 20);
  this.bkgd[dioselyn++].view = micharl;
  var jyaire = window.innerWidth < 1300 ? 500 : 310;
  this.bkgd[dioselyn] = gui_create_image_hd(IMAGES.MOBILE_BOXAD, 1, -153, jyaire, 20);
  this.bkgd[dioselyn].view = vanity;
  dioselyn = 0;
  this.buttons = [];
  this.buttons[dioselyn] = gui_create_button(50, 57, "", [IMAGES.BUY_BREAD_OUT, IMAGES.BUY_BREAD_IN, IMAGES.BUY_BREAD_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      telesia(iam);
    } else {
      telesia(kenobi);
    }
  }, 320, 0, 1, 1);
  dioselyn++;
  if (window.innerWidth < 1300) {
    this.buttons[dioselyn] = gui_create_button(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 462, 235, 5, 1);
  } else {
    this.buttons[dioselyn] = gui_create_button(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 74, 235, 20, 1);
  }
  this.buttons[dioselyn].view = vanity;
  dioselyn++;
  this.buttons[dioselyn] = gui_create_button(120, 40, "", [IMAGES.APP_STORE_BADGE, IMAGES.APP_STORE_BADGE, IMAGES.APP_STORE_BADGE], 0, 0, () => window.open("https://apps.apple.com/us/app/id1538497844", "_blank"), -137, jyaire + 200, 20, 1);
  this.buttons[dioselyn].view = vanity;
  dioselyn++;
  this.buttons[dioselyn] = gui_create_button(135, 40, "", [IMAGES.PLAY_STORE_BADGE, IMAGES.PLAY_STORE_BADGE, IMAGES.PLAY_STORE_BADGE], 0, 0, () => window.open("https://play.google.com/store/apps/details?id=com.addictinggames.starveio", "_blank"), 2, jyaire + 200, 20, 1);
  this.buttons[dioselyn].view = vanity;
  dioselyn++;
  window.innerWidth > 1300 && (this.buttons[dioselyn] = gui_create_button(355, 168, "", [IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT], 1, 0, function () {
    window.open("./changelog.html", "_blank");
  }, -195, -115, 24, 1), this.buttons[dioselyn++].view = vanity, this.buttons[dioselyn] = gui_create_button(355, 168, "", [IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT], 1, 0, function () {
    window.open("https://devast.io", "_blank");
  }, 20, -115, 24, 1), this.buttons[dioselyn++].view = vanity);
  this.buttons[dioselyn++] = gui_create_button(80, 80, "", [IMAGES.MERCH_BUTTON_OUT, IMAGES.MERCH_BUTTON_IN, IMAGES.MERCH_BUTTON_CLICK], 1, 0, function () {
    window.open("https://shop.addictinggames.com/", "_blank");
  }, 380, 10, 2, 1);
  this.buttons[dioselyn++] = gui_create_button(80, 80, "", [IMAGES.DISCORD_BUTTON_OUT, IMAGES.DISCORD_BUTTON_IN, IMAGES.DISCORD_BUTTON_CLICK], 1, 0, function () {
    window.open("https://discord.gg/starveio", "_blank");
  }, 330, 10, 2, 1);
  this.buttons[dioselyn++] = gui_create_button(80, 80, "", [IMAGES.REDDIT_BUTTON_OUT, IMAGES.REDDIT_BUTTON_IN, IMAGES.REDDIT_BUTTON_CLICK], 1, 0, function () {
    window.open("https://reddit.com/r/starveio", "_blank");
  }, 280, 10, 2, 1);
  this.buttons[dioselyn++] = gui_create_button(80, 80, "", [IMAGES.WIKI_BUTTON_OUT, IMAGES.WIKI_BUTTON_IN, IMAGES.WIKI_BUTTON_CLICK], 1, 0, function () {
    window.open("https://starveiopro.wikia.com/wiki/", "_blank");
  }, 230, 10, 2, 1);
  this.buttons[dioselyn++] = gui_create_button(80, 80, "", [IMAGES.FACEBOOK_BUTTON_OUT, IMAGES.FACEBOOK_BUTTON_IN, IMAGES.FACEBOOK_BUTTON_CLICK], 1, 0, function () {
    window.open("https://www.facebook.com/pages/category/Video-Game/limaxio-571818073000979/", "_blank");
  }, 155, 10, 2, 1);
  this.buttons[dioselyn++] = gui_create_button(80, 80, "", [IMAGES.TWITTER_BUTTON_OUT, IMAGES.TWITTER_BUTTON_IN, IMAGES.TWITTER_BUTTON_CLICK], 1, 0, function () {
    window.open("https://twitter.com/lapamauve", "_blank");
  }, 105, 10, 2, 1);
  this.buttons[dioselyn++] = gui_create_button(80, 80, "", [IMAGES.YOUTUBE_BUTTON_OUT, IMAGES.YOUTUBE_BUTTON_IN, IMAGES.YOUTUBE_BUTTON_CLICK], 1, 0, function () {
    window.open("https://youtube.com/c/lapamauve", "_blank");
  }, 55, 10, 2, 1);
  LEADERBOARD_BUTTON = dioselyn++;
  this.buttons[LEADERBOARD_BUTTON] = gui_create_button(232, 142, "", [IMAGES.ICONS_BOTTOM_BG_BUTTON_OUT, IMAGES.ICONS_BOTTOM_BG_BUTTON_IN, IMAGES.ICONS_BOTTOM_BG_BUTTON_CLICK], 1, 0, function () {
    telesia(ajianna);
    getLeaderboard(ui.LEADERBOARD_ALL, ui.LEADERBOARD_TOTAL, ui.LEADERBOARD_SCORE, ui.LEADERBOARD_SEASON5);
  }, -5, 573, 1, 1);
  this.buttons[dioselyn++] = gui_create_button(236, 165, "", [IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON], 1, 1, function () {
    telesia(ajianna);
  }, -5, 566, 1, 1);
  TUTORIAL_BUTTON = dioselyn++;
  this.buttons[TUTORIAL_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
    telesia(jizele);
  }, -5, 494, 1, 1);
  this.buttons[dioselyn++] = gui_create_button(236, 165, "", [IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON], 1, 1, function () {
    telesia(jizele);
  }, -5, 494, 1, 1);
  SERVER_BUTTON = dioselyn++;
  this.buttons[SERVER_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      if (ui.privateServerTime - Date.now() > 0) {
        telesia(marilynne);
      }
    } else {
      telesia(kenobi);
    }
  }, -5, 415, 1, 1);
  this.buttons[dioselyn++] = gui_create_button(236, 165, "", [IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON], 1, 1, function () {
    if (elior.isUserLogged()) {
      if (ui.privateServerTime - Date.now() > 0) {
        telesia(marilynne);
      }
    } else {
      telesia(kenobi);
    }
  }, -5, 415, 1, 1);
  SHOP_BUTTON = dioselyn++;
  this.buttons[SHOP_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
    telesia(lindey);
  }, -5, 336, 1, 1);
  this.buttons[dioselyn++] = gui_create_button(236, 165, "", [IMAGES.SHOP_ICON, IMAGES.SHOP_ICON, IMAGES.SHOP_ICON], 1, 1, function () {
    telesia(lindey);
  }, -5, 336, 1, 1);
  COSMETICS_BUTTON = dioselyn++;
  this.buttons[COSMETICS_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
    telesia(ernestene);
  }, -5, 257, 1, 1);
  this.buttons[dioselyn++] = gui_create_button(236, 165, "", [IMAGES.SKINS_ICON, IMAGES.SKINS_ICON, IMAGES.SKINS_ICON], 1, 1, function () {
    telesia(ernestene);
  }, -5, 257, 1, 1);
  GAME_BUTTON = dioselyn++;
  this.buttons[GAME_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
    telesia(vanity);
  }, -5, 178, 1, 1);
  this.buttons[dioselyn++] = gui_create_button(236, 165, "", [IMAGES.START_ICON, IMAGES.START_ICON, IMAGES.START_ICON], 1, 1, function () {
    telesia(vanity);
  }, -5, 178, 1, 1);
  LOGIN_BUTTON = dioselyn++;
  this.LOGIN_BUTTON = LOGIN_BUTTON;
  this.buttons[LOGIN_BUTTON] = gui_create_button(324, 222, "", [IMAGES.LOGIN_BUTTON_OUT, IMAGES.LOGIN_BUTTON_IN, IMAGES.LOGIN_BUTTON_CLICK], 1, 0, function () {
    telesia(kenobi);
  }, 0, 70, 1, 1);
  PROFILE_BUTTON = dioselyn++;
  PROFILE_BUTTON_2 = dioselyn++;
  this.PROFILE_BUTTON = PROFILE_BUTTON;
  this.PROFILE_BUTTON_2 = PROFILE_BUTTON_2;
  this.buttons[PROFILE_BUTTON] = gui_create_button(324, 222, "", [IMAGES.PROFILE_BUTTON_OUT, IMAGES.PROFILE_BUTTON_IN, IMAGES.PROFILE_BUTTON_CLICK], 1, 0, function () {
    telesia(davilucas);
    mykell(-1);
  }, 0, 70, 1, 0);
  this.buttons[PROFILE_BUTTON_2] = gui_create_button(324, 222, "", [IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON], 1, 1, function () {
    telesia(davilucas);
    mykell(-1);
  }, 0, 70, 1, 0);
  if (client.privateServer === 0) {
    var katyana = dioselyn++;
    if (window.innerWidth < 1300) {
      this.buttons[katyana] = gui_create_button(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_PVP);
      }, 150, 300, 5, 1);
    } else {
      this.buttons[katyana] = gui_create_button(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_PVP);
      }, -340, 100, 20, 1);
    }
    this.buttons[katyana].view = vanity;
    this.buttons[katyana].hint = 0;
    var quill = dioselyn++;
    if (window.innerWidth < 1300) {
      this.buttons[quill] = gui_create_button(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_LEGACY);
      }, 150, 400, 5, 1);
    } else {
      this.buttons[quill] = gui_create_button(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_LEGACY);
      }, -340, 200, 20, 1);
    }
    this.buttons[quill].view = vanity;
    this.buttons[quill].hint = 0;
    var leetal = dioselyn++;
    if (window.innerWidth < 1300) {
      this.buttons[leetal] = gui_create_button(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_COMMUNITY);
      }, 450, 300, 5, 1);
    } else {
      this.buttons[leetal] = gui_create_button(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_COMMUNITY);
      }, -340, 300, 20, 1);
    }
    this.buttons[leetal].view = vanity;
    this.buttons[leetal].hint = 0;
    var everitt = dioselyn++;
    if (window.innerWidth < 1300) {
      this.buttons[everitt] = gui_create_button(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_ZOMBIES);
      }, 300, 300, 5, 1);
    } else {
      this.buttons[everitt] = gui_create_button(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_ZOMBIES);
      }, 204, 100, 20, 1);
    }
    this.buttons[everitt].view = vanity;
    this.buttons[everitt].hint = 0;
    var leoma = dioselyn++;
    if (window.innerWidth < 1300) {
      this.buttons[leoma] = gui_create_button(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_VAMPIRES);
      }, 300, 400, 5, 1);
    } else {
      this.buttons[leoma] = gui_create_button(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, function () {
        client.select_gamemode(WORLD.MODE_VAMPIRES);
      }, 204, 200, 20, 1);
    }
    this.buttons[leoma].view = vanity;
    this.buttons[leoma].hint = 0;
    var azyia = dioselyn++;
    this.buttons[azyia] = gui_create_button(266, 176, "", [IMAGES.MODE_EXPERIMENTAL_OUT, IMAGES.MODE_EXPERIMENTAL_IN, IMAGES.MODE_EXPERIMENTAL_CLICK], 1, 0, function () {
      client.select_gamemode(WORLD.MODE_EXPERIMENTAL);
    }, window.innerWidth < 1300 ? 450 : 204, window.innerWidth < 1300 ? 400 : 300, (window.innerWidth < 1300 ? 1 : 16) | 4, 1);
    this.buttons[azyia].view = vanity;
    this.buttons[azyia].hint = 0;
  }
  this.buttons[dioselyn] = gui_create_button(87, 78, "", [IMAGES.MODIFY_NAME_OUT, IMAGES.MODIFY_NAME_IN, IMAGES.MODIFY_NAME_CLICK], 1, 0, function () {
    ui.generate_new_nickname();
    if (ui.firstName === 0) {
      telesia(micharl);
    } else {
      telesia(bosie);
    }
  }, 127, 110, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  this.buttons[dioselyn] = gui_create_button(87, 78, "", [IMAGES.LOGOUT_OUT, IMAGES.LOGOUT_IN, IMAGES.LOGOUT_CLICK], 1, 0, function () {
    logout();
  }, 255, 110, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  this.buttons[dioselyn] = gui_create_button(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, function () {
    telesia(vanity);
  }, 189, 118, 20, 0);
  this.buttons[dioselyn++].view = kenobi;
  this.buttons[dioselyn] = gui_create_button(497, 72, "", [IMAGES.LOGIN_GOOGLE_OUT, IMAGES.LOGIN_GOOGLE_IN, IMAGES.LOGIN_GOOGLE_CLICK], 1, 0, function () {
    loginWithGoogle();
  }, -130, 390, 20, 0);
  this.buttons[dioselyn++].view = kenobi;
  this.buttons[dioselyn] = gui_create_button(497, 72, "", [IMAGES.LOGIN_FACEBOOK_OUT, IMAGES.LOGIN_FACEBOOK_IN, IMAGES.LOGIN_FACEBOOK_CLICK], 1, 0, function () {
    logWithFacebook();
  }, -130, 430, 20, 0);
  this.buttons[dioselyn++].view = kenobi;
  __LEVEL_FACTOR__ = 2e4;
  function siaani(daquez) {
    var josaiah = ui.level_formula(daquez);
    var jaisiah = josaiah * josaiah * __LEVEL_FACTOR__;
    var wyndee = (josaiah + 1) * (josaiah + 1) * __LEVEL_FACTOR__ - jaisiah;
    daquez -= jaisiah;
    return daquez / wyndee;
  }
  this.xp_formula = siaani;
  this.level_formula = _0x4af51d;
  this.update_score = function (cahlia) {
    ui.lvl = ui.level_formula(cahlia);
    ui.xp_dest = ui.xp_formula(cahlia);
    ui.xp = 0;
    ui.score = cahlia;
  };
  function mykell(kristell, manfried) {
    if (manfried !== undefined) {
      ui.profile_season = manfried;
      var merla = ui.seasons[manfried];
      ui.score = merla.score;
      ui.kill = merla.kill;
      ui.death = merla.death;
      ui.time = merla.time;
      ui.bestScore = merla.bestScore;
      ui.bestKill = merla.bestKill;
      ui.bestTime = merla.bestTime;
      ui.scoreTotal = merla.scoreTotal;
    }
    if (kristell === undefined) {
      kristell = ui.current_mode_score;
    }
    ui.current_mode_score = kristell;
    if (kristell >= 0) {
      document.getElementById("stats_box_time").innerHTML = ui.bestTime[kristell];
      document.getElementById("stats_box_kill").innerHTML = ui.bestKill[kristell];
      document.getElementById("stats_box_score").innerHTML = ui.bestScore[kristell];
    } else {
      var towns = 0;
      for (var markus = 0; markus < ui.kill.length; markus++) {
        towns += ui.kill[markus];
      }
      var shasa = 0;
      for (var markus = 0; markus < ui.time.length; markus++) {
        shasa += ui.time[markus];
      }
      document.getElementById("stats_box_time").innerHTML = shasa;
      document.getElementById("stats_box_kill").innerHTML = towns;
      document.getElementById("stats_box_score").innerHTML = ui.score;
    }
  }
  this.login_restore_data = function (ishmil) {
    ui.buttons[ui.LOGIN_BUTTON].info.active = 0;
    ui.buttons[ui.PROFILE_BUTTON].info.active = 1;
    ui.buttons[ui.PROFILE_BUTTON_2].info.active = 1;
    daniellee();
    if (ishmil.name.indexOf("Starver#") === -1) {
      document.getElementById("account_nickname_input").value = window.decodeURIComponent(window.escape(window.atob(ishmil.name)));
    } else {
      document.getElementById("account_nickname_input").value = ishmil.name;
    }
    ui.bread = ishmil.bread;
    var sharvesh = ishmil.seasons;
    var rhudine = sharvesh[sharvesh.length - 1];
    ui.seasons = sharvesh;
    elior.update_score(rhudine.score);
    ui.score = rhudine.score;
    ui.kill = rhudine.kill;
    ui.death = rhudine.death;
    ui.time = rhudine.time;
    ui.bestScore = rhudine.bestScore;
    ui.bestKill = rhudine.bestKill;
    ui.bestTime = rhudine.bestTime;
    ui.scoreTotal = rhudine.scoreTotal;
    ui.firstName = ishmil.firstName;
    document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + ishmil.privateServer;
    if (ui.firstName === undefined) {
      ui.firstName = 0;
    }
    ui.privateServerTime = Date.now() + ishmil.privateServerTime;
    if (Number(ishmil.privateServerTime) > 0) {
      ui.privateServerTime = Date.now() + Number(ishmil.privateServerTime);
    }
    ui.kit = Date.now() + ishmil.kit;
    if (Number(ishmil.kit) > 0) {
      ui.kit = Date.now() + Number(ishmil.kit);
    }
    var anjail = COSMETICS.SKIN;
    for (var sandeep = 0; sandeep < ishmil.skins.length; sandeep++) {
      var dezarey = ishmil.skins[sandeep];
      if (dezarey > 0) {
        for (var cassiah = 0; cassiah < anjail.length; cassiah++) {
          if (anjail[cassiah].id === sandeep) {
            elior.unlock.skin[cassiah] = 1;
          }
        }
      }
    }
    var anjail = COSMETICS.ACCESSORY;
    for (var sandeep = 0; sandeep < ishmil.accessories.length; sandeep++) {
      var dezarey = ishmil.accessories[sandeep];
      if (dezarey > 0) {
        for (var cassiah = 0; cassiah < anjail.length; cassiah++) {
          if (anjail[cassiah].id === sandeep) {
            elior.unlock.accessory[cassiah] = 1;
          }
        }
      }
    }
    var anjail = COSMETICS.BOOK;
    for (var sandeep = 0; sandeep < ishmil.books.length; sandeep++) {
      var dezarey = ishmil.books[sandeep];
      if (dezarey > 0) {
        for (var cassiah = 0; cassiah < anjail.length; cassiah++) {
          if (anjail[cassiah].id === sandeep) {
            elior.unlock.book[cassiah] = 1;
          }
        }
      }
    }
    var anjail = COSMETICS.BAG;
    for (var sandeep = 0; sandeep < ishmil.bags.length; sandeep++) {
      var dezarey = ishmil.bags[sandeep];
      if (dezarey > 0) {
        for (var cassiah = 0; cassiah < anjail.length; cassiah++) {
          if (anjail[cassiah].id === sandeep) {
            elior.unlock.bag[cassiah] = 1;
          }
        }
      }
    }
    var anjail = COSMETICS.CRATE;
    for (var sandeep = 0; sandeep < ishmil.crates.length; sandeep++) {
      var dezarey = ishmil.crates[sandeep];
      if (dezarey > 0) {
        for (var cassiah = 0; cassiah < anjail.length; cassiah++) {
          anjail[cassiah].id === sandeep && (elior.unlock.crate[cassiah] = 1, elior.unlock.dead[cassiah] = 1);
        }
      }
    }
  };
  this.login_after = function () {
    window.onUserLogin = function () {
      telesia(vanity);
      getUserDetails(elior.login_restore_data);
    };
    if (userAlreadyLoggedIn === 1) {
      window.onUserLogin();
    }
  };
  window.onUserLogout = function () {
    ui.buttons[ui.LOGIN_BUTTON].info.active = 1;
    ui.buttons[ui.PROFILE_BUTTON].info.active = 0;
    ui.buttons[ui.PROFILE_BUTTON_2].info.active = 0;
    telesia(vanity);
  };
  this.isUserLogged = function () {
    return ui.buttons[ui.PROFILE_BUTTON].info.active;
  };
  this.buttons[dioselyn] = gui_create_button(461, 105, "", [IMAGES.GET_MORE_BUTTON_OUT, IMAGES.GET_MORE_BUTTON_IN, IMAGES.GET_MORE_BUTTON_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      telesia(iam);
    } else {
      telesia(kenobi);
    }
  }, -100, 80, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  this.buttons[dioselyn] = gui_create_button(157, 158, "", [IMAGES.TUTO_WIKI_OUT, IMAGES.TUTO_WIKI_IN, IMAGES.TUTO_WIKI_CLICK], 1, 0, function () {
    window.open("https://starveiopro.wikia.com/wiki/", "_blank");
  }, -35, 125, 20, 0);
  this.buttons[dioselyn++].view = jizele;
  this.buttons[dioselyn] = gui_create_button(66, 73, "", [IMAGES.TUTO_PREVIOUS_OUT, IMAGES.TUTO_PREVIOUS_IN, IMAGES.TUTO_PREVIOUS_CLICK], 1, 0, undefined, -68, 340, 20, 0);
  this.buttons[dioselyn++].view = jizele;
  this.buttons[dioselyn] = gui_create_button(66, 73, "", [IMAGES.TUTO_NEXT_OUT, IMAGES.TUTO_NEXT_IN, IMAGES.TUTO_NEXT_CLICK], 1, 0, undefined, -30, 340, 20, 0);
  this.buttons[dioselyn++].view = jizele;
  this.buttons[dioselyn] = gui_create_button(97, 66, "", [IMAGES.LVL_LEADERBOARD_OUT, IMAGES.LVL_LEADERBOARD_IN, IMAGES.LVL_LEADERBOARD_CLICK], 1, 0, undefined, -14, 151, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_KILL = dioselyn;
  this.buttons[dioselyn] = gui_create_button(135, 66, "", [IMAGES.KILL_LEADERBOARD_OUT, IMAGES.KILL_LEADERBOARD_IN, IMAGES.KILL_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, undefined, ui.LEADERBOARD_KILL);
  }, 37.5, 151, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_TIME = dioselyn;
  this.buttons[dioselyn] = gui_create_button(160, 66, "", [IMAGES.TIME_LEADERBOARD_OUT, IMAGES.TIME_LEADERBOARD_IN, IMAGES.TIME_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, undefined, ui.LEADERBOARD_TIME);
  }, 107.5, 151, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_SCORE = dioselyn;
  this.buttons[dioselyn] = gui_create_button(207, 66, "", [IMAGES.SCORE_LEADERBOARD_OUT, IMAGES.SCORE_LEADERBOARD_IN, IMAGES.SCORE_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, undefined, ui.LEADERBOARD_SCORE);
  }, 190.5, 151, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_TODAY = dioselyn;
  this.buttons[dioselyn] = gui_create_button(144, 66, "", [IMAGES.TODAY_LEADERBOARD_OUT, IMAGES.TODAY_LEADERBOARD_IN, IMAGES.TODAY_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(ui.LEADERBOARD_TODAY);
  }, 103.5, 110, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_WEEK = dioselyn;
  this.buttons[dioselyn] = gui_create_button(124, 66, "", [IMAGES.WEEK_LEADERBOARD_OUT, IMAGES.WEEK_LEADERBOARD_IN, IMAGES.WEEK_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(ui.LEADERBOARD_WEEK);
  }, 177.5, 110, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_ALL = dioselyn;
  this.buttons[dioselyn] = gui_create_button(104, 66, "", [IMAGES.ALL_LEADERBOARD_OUT, IMAGES.ALL_LEADERBOARD_IN, IMAGES.ALL_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(ui.LEADERBOARD_ALL);
  }, 242, 110, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_SEASON1 = dioselyn;
  this.buttons[dioselyn] = gui_create_button(183, 66, "", [IMAGES.SEASON1_LEADERBOARD_OUT, IMAGES.SEASON1_LEADERBOARD_IN, IMAGES.SEASON1_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON1);
  }, -290, 521, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_SEASON2 = dioselyn;
  this.buttons[dioselyn] = gui_create_button(183, 66, "", [IMAGES.SEASON2_LEADERBOARD_OUT, IMAGES.SEASON2_LEADERBOARD_IN, IMAGES.SEASON2_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON2);
  }, -185, 521, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_SEASON3 = dioselyn;
  this.buttons[dioselyn] = gui_create_button(183, 66, "", [IMAGES.SEASON3_LEADERBOARD_OUT, IMAGES.SEASON3_LEADERBOARD_IN, IMAGES.SEASON3_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON3);
  }, -80, 521, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_SEASON4 = dioselyn;
  this.buttons[dioselyn] = gui_create_button(183, 66, "", [IMAGES.SEASON4_LEADERBOARD_OUT, IMAGES.SEASON4_LEADERBOARD_IN, IMAGES.SEASON4_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON4);
  }, 25, 521, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_SEASON5 = dioselyn;
  this.buttons[dioselyn] = gui_create_button(183, 66, "", [IMAGES.SEASON5_LEADERBOARD_OUT, IMAGES.SEASON5_LEADERBOARD_IN, IMAGES.SEASON5_LEADERBOARD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON5);
  }, 130, 521, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.buttons[dioselyn] = gui_create_button(232, 352, "", [IMAGES.CURRENCY1_OUT, IMAGES.CURRENCY1_IN, IMAGES.CURRENCY1_CLICK], 1, 0, function () {
    openXsolla(300);
  }, -330, 135, 20, 0);
  this.buttons[dioselyn++].view = iam;
  this.buttons[dioselyn] = gui_create_button(232, 352, "", [IMAGES.CURRENCY2_OUT, IMAGES.CURRENCY2_IN, IMAGES.CURRENCY2_CLICK], 1, 0, function () {
    openXsolla(600);
  }, -195, 135, 20, 0);
  this.buttons[dioselyn++].view = iam;
  this.buttons[dioselyn] = gui_create_button(243, 374, "", [IMAGES.CURRENCY3_OUT, IMAGES.CURRENCY3_IN, IMAGES.CURRENCY3_CLICK], 1, 0, function () {
    openXsolla(2600);
  }, -60, 130, 20, 0);
  this.buttons[dioselyn++].view = iam;
  this.buttons[dioselyn] = gui_create_button(232, 352, "", [IMAGES.CURRENCY4_OUT, IMAGES.CURRENCY4_IN, IMAGES.CURRENCY4_CLICK], 1, 0, function () {
    openXsolla(7e3);
  }, 78, 135, 20, 0);
  this.buttons[dioselyn++].view = iam;
  this.buttons[dioselyn] = gui_create_button(243, 374, "", [IMAGES.CURRENCY5_OUT, IMAGES.CURRENCY5_IN, IMAGES.CURRENCY5_CLICK], 1, 0, function () {
    openXsolla(2e4);
  }, 213, 130, 20, 0);
  this.buttons[dioselyn++].view = iam;
  this.buttons[dioselyn] = gui_create_button(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, function () {
    telesia(lindey);
  }, 300, 88, 20, 0);
  this.buttons[dioselyn++].view = iam;
  this.buttons[dioselyn] = gui_create_button(323, 112, "", [IMAGES.SKIN_BUTTON_OUT, IMAGES.SKIN_BUTTON_IN, IMAGES.SKIN_BUTTON_CLICK], 1, 0, function () {
    telesia(jazzlynne);
    katyanna.initSelector();
  }, -315, 185, 20, 0);
  this.buttons[dioselyn++].view = ernestene;
  this.buttons[dioselyn] = gui_create_button(323, 112, "", [IMAGES.ACCESSORY_BUTTON_OUT, IMAGES.ACCESSORY_BUTTON_IN, IMAGES.ACCESSORY_BUTTON_CLICK], 1, 0, function () {
    telesia(adeleen);
    ariea.initSelector();
  }, -315, 321, 20, 0);
  this.buttons[dioselyn++].view = ernestene;
  this.buttons[dioselyn] = gui_create_button(323, 112, "", [IMAGES.BAG_BUTTON_OUT, IMAGES.BAG_BUTTON_IN, IMAGES.BAG_BUTTON_CLICK], 1, 0, function () {
    telesia(zuhra);
    lashun.initSelector();
  }, 153, 185, 20, 0);
  this.buttons[dioselyn++].view = ernestene;
  this.buttons[dioselyn] = gui_create_button(323, 112, "", [IMAGES.BOOK_BUTTON_OUT, IMAGES.BOOK_BUTTON_IN, IMAGES.BOOK_BUTTON_CLICK], 1, 0, function () {
    telesia(holland);
    dymir.initSelector();
  }, 153, 321, 20, 0);
  this.buttons[dioselyn++].view = ernestene;
  this.buttons[dioselyn] = gui_create_button(323, 112, "", [IMAGES.CRATE_BUTTON_OUT, IMAGES.CRATE_BUTTON_IN, IMAGES.CRATE_BUTTON_CLICK], 1, 0, function () {
    telesia(alvine);
    kinuko.initSelector();
  }, 153, 463, 20, 0);
  this.buttons[dioselyn++].view = ernestene;
  this.buttons[dioselyn] = gui_create_button(323, 112, "", [IMAGES.LOOT_BUTTON_OUT, IMAGES.LOOT_BUTTON_IN, IMAGES.LOOT_BUTTON_CLICK], 1, 0, function () {
    telesia(ajak);
    carterjames.initSelector();
  }, -315, 463, 20, 0);
  this.buttons[dioselyn++].view = ernestene;
  this.buttons[dioselyn] = gui_create_button(327, 117, "", [IMAGES.SEASON_5, IMAGES.SEASON_5_IN, IMAGES.SEASON_5_OUT], 1, 0, function () {
    telesia(damariye);
  }, 155, 70, 1, 1);
  this.buttons[dioselyn++].view = vanity;
  this.buttons[dioselyn] = gui_create_button(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, function () {
    keren(chazmin, 0, "none");
    telesia(lindey);
  }, 10, 40, 20, 0);
  this.buttons[dioselyn++].view = chazmin;
  this.buttons[dioselyn] = gui_create_button(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, function () {
    keren(karis, 0, "none");
    telesia(lindey);
  }, 10, 40, 20, 0);
  this.buttons[dioselyn++].view = karis;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(lindey);
  }, 200, 140, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.ATLANTA_OUT, IMAGES.ATLANTA_IN, IMAGES.ATLANTA_CLICK], 1, 0, function () {
    regionPreference("Atlanta");
  }, -265, 300, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.DALLAS_OUT, IMAGES.DALLAS_IN, IMAGES.DALLAS_CLICK], 1, 0, function () {
    regionPreference("Dallas");
  }, -130, 300, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.FREMONT_OUT, IMAGES.FREMONT_IN, IMAGES.FREMONT_CLICK], 1, 0, function () {
    regionPreference("Fremont");
  }, 5, 300, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.NEWARK_OUT, IMAGES.NEWARK_IN, IMAGES.NEWARK_CLICK], 1, 0, function () {
    regionPreference("Newark");
  }, 140, 300, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.LONDON_OUT, IMAGES.LONDON_IN, IMAGES.LONDON_CLICK], 1, 0, function () {
    regionPreference("London");
  }, -265, 365, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.FRANKFURT_OUT, IMAGES.FRANKFURT_IN, IMAGES.FRANKFURT_CLICK], 1, 0, function () {
    regionPreference("Frankfurt");
  }, -130, 365, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.SINGAPORE_OUT, IMAGES.SINGAPORE_IN, IMAGES.SINGAPORE_CLICK], 1, 0, function () {
    regionPreference("Singapore");
  }, 5, 365, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.TOKYO_OUT, IMAGES.TOKYO_IN, IMAGES.TOKYO_CLICK], 1, 0, function () {
    regionPreference("Tokyo");
  }, 140, 365, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.TORONTO_OUT, IMAGES.TORONTO_IN, IMAGES.TORONTO_CLICK], 1, 0, function () {
    regionPreference("Toronto");
  }, -265, 430, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(253, 110, "", [IMAGES.MUMBAI_OUT, IMAGES.MUMBAI_IN, IMAGES.MUMBAI_CLICK], 1, 0, function () {
    regionPreference("Mumbai");
  }, -130, 430, 20, 0);
  this.buttons[dioselyn++].view = bryley;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(bryley);
  }, 230, 140, 20, 0);
  this.buttons[dioselyn++].view = jrew;
  this.buttons[dioselyn] = gui_create_button(230, 352, "", [IMAGES.DAYS3_OUT, IMAGES.DAYS3_IN, IMAGES.DAYS3_CLICK], 1, 0, function () {
    openXsolla(350);
  }, -280, 240, 20, 0);
  this.buttons[dioselyn++].view = jrew;
  this.buttons[dioselyn] = gui_create_button(230, 352, "", [IMAGES.DAYS7_OUT, IMAGES.DAYS7_IN, IMAGES.DAYS7_CLICK], 1, 0, function () {
    openXsolla(700);
  }, -130, 240, 20, 0);
  this.buttons[dioselyn++].view = jrew;
  this.buttons[dioselyn] = gui_create_button(230, 352, "", [IMAGES.DAYS30_OUT, IMAGES.DAYS30_IN, IMAGES.DAYS30_CLICK], 1, 0, function () {
    openXsolla(1400);
  }, 20, 240, 20, 0);
  this.buttons[dioselyn++].view = jrew;
  this.buttons[dioselyn] = gui_create_button(230, 352, "", [IMAGES.DAYS90_OUT, IMAGES.DAYS90_IN, IMAGES.DAYS90_CLICK], 1, 0, function () {
    openXsolla(3e3);
  }, 170, 240, 20, 0);
  this.buttons[dioselyn++].view = jrew;
  this.buttons[dioselyn] = gui_create_button(105, 119, "", [IMAGES.COPY_PASTE_OUT, IMAGES.COPY_PASTE_IN, IMAGES.COPY_PASTE_CLICK], 1, 0, function () {
    document.getElementById("serverAddressInput").select();
    document.execCommand("copy");
  }, 170, 310, 20, 0);
  this.buttons[dioselyn++].view = marilynne;
  this.buttons[dioselyn] = gui_create_button(105, 119, "", [IMAGES.RESTART_OUT, IMAGES.RESTART_IN, IMAGES.RESTART_CLICK], 1, 0, function () {
    rebootServer();
  }, 235, 310, 20, 0);
  this.buttons[dioselyn++].view = marilynne;
  this.buttons[dioselyn] = gui_create_button(204, 115, "", [IMAGES.GUIDE_OUT, IMAGES.GUIDE_IN, IMAGES.GUIDE_CLICK], 1, 0, function () {
    window.open("./commands.html", "_blank");
  }, -265, 490, 20, 0);
  this.buttons[dioselyn++].view = marilynne;
  this.buttons[dioselyn] = gui_create_button(145, 69, "", [IMAGES.PRICE5_OUT, IMAGES.PRICE5_IN, IMAGES.PRICE5_CLICK], 1, 0, function () {
    telesia(tashaya);
  }, -210, 170, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  this.buttons[dioselyn] = gui_create_button(145, 69, "", [IMAGES.PRICE1_OUT, IMAGES.PRICE1_IN, IMAGES.PRICE1_CLICK], 1, 0, function () {
    telesia(jonross);
  }, 70, 170, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  this.buttons[dioselyn] = gui_create_button(145, 69, "", [IMAGES.PRICE2_OUT, IMAGES.PRICE2_IN, IMAGES.PRICE2_CLICK], 1, 0, function () {
    telesia(antoria);
  }, 70, 204, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  this.buttons[dioselyn] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, function () {
    telesia(ilihia);
  }, -210, 204, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  this.buttons[dioselyn] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, function () {
    telesia(ridgway);
  }, 70, 238, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  this.buttons[dioselyn] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      buyKit(0, 300);
    } else {
      telesia(kenobi);
    }
  }, 307, 205, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  this.buttons[dioselyn] = gui_create_button(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, function () {
    telesia(schad);
  }, -210, 238, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  this.buttons[dioselyn] = gui_create_button(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      buyKit(1, 600);
    } else {
      telesia(kenobi);
    }
  }, 307, 239, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  this.buttons[dioselyn] = gui_create_button(192, 101, "", [IMAGES.YES_BUTTON_OUT, IMAGES.YES_BUTTON_IN, IMAGES.YES_BUTTON_CLICK], 1, 0, function () {
    buyNameChanger();
  }, -100, 250, 20, 0);
  this.buttons[dioselyn++].view = micharl;
  this.buttons[dioselyn] = gui_create_button(192, 104, "", [IMAGES.YES_300_BUTTON_OUT, IMAGES.YES_300_BUTTON_IN, IMAGES.YES_300_BUTTON_CLICK], 1, 0, function () {
    buyNameChanger();
  }, -100, 239, 20, 0);
  this.buttons[dioselyn++].view = bosie;
  this.buttons[dioselyn] = gui_create_button(192, 101, "", [IMAGES.NO_BUTTON_OUT, IMAGES.NO_BUTTON_IN, IMAGES.NO_BUTTON_CLICK], 1, 0, function () {
    telesia(davilucas);
  }, 10, 250, 20, 0);
  this.buttons[dioselyn++].view = micharl;
  this.buttons[dioselyn] = gui_create_button(192, 104, "", [IMAGES.NO_THANKS_BUTTON_OUT, IMAGES.NO_THANKS_BUTTON_IN, IMAGES.NO_THANKS_BUTTON_CLICK], 1, 0, function () {
    telesia(davilucas);
  }, 10, 239, 20, 0);
  this.buttons[dioselyn++].view = bosie;
  RARITY_BUTTON = [];
  RARITY_BUTTON[RARITY.FREE] = [IMAGES.FREE_ITEM_OUT, IMAGES.FREE_ITEM_IN, IMAGES.FREE_ITEM_CLICK];
  RARITY_BUTTON[RARITY.WOOD] = [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK];
  RARITY_BUTTON[RARITY.STONE] = [IMAGES.STONE_ITEM_OUT, IMAGES.STONE_ITEM_IN, IMAGES.STONE_ITEM_CLICK];
  RARITY_BUTTON[RARITY.GOLD] = [IMAGES.GOLD_ITEM_OUT, IMAGES.GOLD_ITEM_IN, IMAGES.GOLD_ITEM_CLICK];
  RARITY_BUTTON[RARITY.DIAMOND] = [IMAGES.DIAMOND_ITEM_OUT, IMAGES.DIAMOND_ITEM_IN, IMAGES.DIAMOND_ITEM_CLICK];
  RARITY_BUTTON[RARITY.AMETHYST] = [IMAGES.AMETHYST_ITEM_OUT, IMAGES.AMETHYST_ITEM_IN, IMAGES.AMETHYST_ITEM_CLICK];
  RARITY_BUTTON[RARITY.REIDITE] = [IMAGES.REIDITE_ITEM_OUT, IMAGES.REIDITE_ITEM_IN, IMAGES.REIDITE_ITEM_CLICK];
  RARITY_BUTTON[RARITY.LEVEL] = [IMAGES.LEVEL_ITEM_OUT, IMAGES.LEVEL_ITEM_IN, IMAGES.LEVEL_ITEM_CLICK];
  RARITY_BUTTON[RARITY.SPECIAL] = [IMAGES.SPECIAL_ITEM_OUT, IMAGES.SPECIAL_ITEM_IN, IMAGES.SPECIAL_ITEM_CLICK];
  FIRST_BUTTON_SKIN = dioselyn;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(ernestene);
  }, -320, 470, 20, 0);
  this.buttons[dioselyn++].view = jazzlynne;
  FIRST_BUTTON_ACCESSORY = dioselyn;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(ernestene);
  }, -320, 470, 20, 0);
  this.buttons[dioselyn++].view = adeleen;
  FIRST_BUTTON_LOOT = dioselyn;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(ernestene);
  }, -320, 470, 20, 0);
  this.buttons[dioselyn++].view = ajak;
  FIRST_BUTTON_BAG = dioselyn;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(ernestene);
  }, -320, 470, 20, 0);
  this.buttons[dioselyn++].view = zuhra;
  FIRST_BUTTON_BOOK = dioselyn;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, 20, 0);
  this.buttons[dioselyn++].view = holland;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(ernestene);
  }, -320, 470, 20, 0);
  this.buttons[dioselyn++].view = holland;
  FIRST_BUTTON_CRATE = dioselyn;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(ernestene);
  }, -320, 470, 20, 0);
  this.buttons[dioselyn++].view = alvine;
  this.buttons[dioselyn] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_1_OUT, IMAGES.SPIN_BUTTON_1_IN, IMAGES.SPIN_BUTTON_1_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      buySpin(3, 50);
    } else {
      telesia(kenobi);
    }
  }, -65, 197, 20, 0);
  this.buttons[dioselyn++].view = jonross;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(lindey);
  }, 309, 180, 20, 0);
  this.buttons[dioselyn++].view = jonross;
  this.buttons[dioselyn] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_2_OUT, IMAGES.SPIN_BUTTON_2_IN, IMAGES.SPIN_BUTTON_2_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      buySpin(0, 100);
    } else {
      telesia(kenobi);
    }
  }, -65, 197, 20, 0);
  this.buttons[dioselyn++].view = tashaya;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(lindey);
  }, 309, 180, 20, 0);
  this.buttons[dioselyn++].view = tashaya;
  this.buttons[dioselyn] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_3_OUT, IMAGES.SPIN_BUTTON_3_IN, IMAGES.SPIN_BUTTON_3_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      buySpin(4, 150);
    } else {
      telesia(kenobi);
    }
  }, -65, 197, 20, 0);
  this.buttons[dioselyn++].view = antoria;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(lindey);
  }, 309, 180, 20, 0);
  this.buttons[dioselyn++].view = antoria;
  this.buttons[dioselyn] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      buySpin(1, 300);
    } else {
      telesia(kenobi);
    }
  }, -65, 197, 20, 0);
  this.buttons[dioselyn++].view = ilihia;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(lindey);
  }, 309, 180, 20, 0);
  this.buttons[dioselyn++].view = ilihia;
  this.buttons[dioselyn] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_5_OUT, IMAGES.SPIN_BUTTON_5_IN, IMAGES.SPIN_BUTTON_5_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      buySpin(2, 600);
    } else {
      telesia(kenobi);
    }
  }, -65, 197, 20, 0);
  this.buttons[dioselyn++].view = schad;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(lindey);
  }, 309, 180, 20, 0);
  this.buttons[dioselyn++].view = schad;
  this.buttons[dioselyn] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, function () {
    if (elior.isUserLogged()) {
      buySpin(5, 300);
    } else {
      telesia(kenobi);
    }
  }, -65, 197, 20, 0);
  this.buttons[dioselyn++].view = ridgway;
  this.buttons[dioselyn] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
    telesia(lindey);
  }, 309, 180, 20, 0);
  this.buttons[dioselyn++].view = ridgway;
  var kwan = dioselyn;
  this.buttons[dioselyn] = gui_create_button(205, 67, "", [IMAGES.SEASON1_PROFILE_OUT, IMAGES.SEASON1_PROFILE_IN, IMAGES.SEASON1_PROFILE_CLICK], 1, 0, function () {
    mykell(undefined, 0);
  }, -305, 125, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  var real = dioselyn;
  this.buttons[dioselyn] = gui_create_button(205, 67, "", [IMAGES.SEASON2_PROFILE_OUT, IMAGES.SEASON2_PROFILE_IN, IMAGES.SEASON2_PROFILE_CLICK], 1, 0, function () {
    mykell(undefined, 1);
  }, -305, 170, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  var rainen = dioselyn;
  this.buttons[dioselyn] = gui_create_button(205, 67, "", [IMAGES.SEASON3_PROFILE_OUT, IMAGES.SEASON3_PROFILE_IN, IMAGES.SEASON3_PROFILE_CLICK], 1, 0, function () {
    mykell(undefined, 2);
  }, -305, 215, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  var analyssa = dioselyn;
  this.buttons[dioselyn] = gui_create_button(205, 67, "", [IMAGES.SEASON4_PROFILE_OUT, IMAGES.SEASON4_PROFILE_IN, IMAGES.SEASON4_PROFILE_CLICK], 1, 0, function () {
    mykell(undefined, 3);
  }, -305, 260, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  var annakat = dioselyn;
  this.buttons[dioselyn] = gui_create_button(205, 67, "", [IMAGES.SEASON5_PROFILE_OUT, IMAGES.SEASON5_PROFILE_IN, IMAGES.SEASON5_PROFILE_CLICK], 1, 0, function () {
    mykell(undefined, 3);
  }, -305, 305, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  var kaeliana = dioselyn;
  this.buttons[dioselyn] = gui_create_button(460, 73, "", [IMAGES.TOTAL_PROFILE_OUT, IMAGES.TOTAL_PROFILE_IN, IMAGES.TOTAL_PROFILE_CLICK], 1, 0, function () {
    mykell(-1);
  }, -180, 170, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  var drene = dioselyn;
  this.buttons[dioselyn] = gui_create_button(222, 68, "", [IMAGES.NORMAL_PROFILE_OUT, IMAGES.NORMAL_PROFILE_IN, IMAGES.NORMAL_PROFILE_CLICK], 1, 0, function () {
    mykell(WORLD.MODE_PVP);
  }, -180, 215, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  var samaia = dioselyn;
  this.buttons[dioselyn] = gui_create_button(222, 68, "", [IMAGES.FOREST_PROFILE_OUT, IMAGES.FOREST_PROFILE_IN, IMAGES.FOREST_PROFILE_CLICK], 1, 0, function () {
    mykell(WORLD.MODE_LEGACY);
  }, -180, 260, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  var breeah = dioselyn;
  this.buttons[dioselyn] = gui_create_button(222, 68, "", [IMAGES.ZOMBIE_PROFILE_OUT, IMAGES.ZOMBIE_PROFILE_IN, IMAGES.ZOMBIE_PROFILE_CLICK], 1, 0, function () {
    mykell(WORLD.MODE_ZOMBIES);
  }, -60, 215, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  var dimple = dioselyn;
  this.buttons[dioselyn] = gui_create_button(222, 68, "", [IMAGES.VAMPIRE_PROFILE_OUT, IMAGES.VAMPIRE_PROFILE_IN, IMAGES.VAMPIRE_PROFILE_CLICK], 1, 0, function () {
    mykell(WORLD.MODE_VAMPIRES);
  }, -60, 260, 20, 0);
  this.buttons[dioselyn++].view = davilucas;
  this.LEADERBOARD_TOTAL = dioselyn;
  this.buttons[dioselyn] = gui_create_button(143, 66, "", [IMAGES.TOTAL_LEAD_OUT, IMAGES.TOTAL_LEAD_IN, IMAGES.TOTAL_LEAD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_TOTAL);
  }, -298, 110, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_NORMAL = dioselyn;
  this.buttons[dioselyn] = gui_create_button(104, 66, "", [IMAGES.NORMAL_LEAD_OUT, IMAGES.NORMAL_LEAD_IN, IMAGES.NORMAL_LEAD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_NORMAL);
  }, -223, 110, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_FOREST = dioselyn;
  this.buttons[dioselyn] = gui_create_button(110, 66, "", [IMAGES.FOREST_LEAD_OUT, IMAGES.FOREST_LEAD_IN, IMAGES.FOREST_LEAD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_FOREST);
  }, -168, 110, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_ZOMBIE = dioselyn;
  this.buttons[dioselyn] = gui_create_button(88, 66, "", [IMAGES.ZOMBIE_LEAD_OUT, IMAGES.ZOMBIE_LEAD_IN, IMAGES.ZOMBIE_LEAD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_ZOMBIE);
  }, -110, 110, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.LEADERBOARD_VAMPIRE = dioselyn;
  this.buttons[dioselyn] = gui_create_button(88, 66, "", [IMAGES.VAMPIRE_LEAD_OUT, IMAGES.VAMPIRE_LEAD_IN, IMAGES.VAMPIRE_LEAD_CLICK], 1, 0, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_VAMPIRE);
  }, -63, 110, 20, 0);
  this.buttons[dioselyn++].view = ajianna;
  this.buttons[dioselyn] = gui_create_button(86, 44, "", [IMAGES.TERMS_BUTTON_OUT, IMAGES.TERMS_BUTTON_IN, IMAGES.TERMS_BUTTON_CLICK], 1, 0, function () {
    window.open("./terms.html", "_blank");
  }, 349, 290, 20, 0);
  this.buttons[dioselyn++].view = lindey;
  var katyanna = new ishir(COSMETICS.SKIN, FIRST_BUTTON_SKIN, function (haleem) {
    ui.skin = haleem;
    if (ui.unlock.skin[haleem] === 1) {
      Cookies.set("starve_skin", "" + haleem, {expires: 30});
    }
  }, this.skin, this.unlock.skin), lashun = new ishir(COSMETICS.BAG, FIRST_BUTTON_BAG, function (delonta) {
    ui.bag = delonta;
    if (ui.unlock.bag[delonta] === 1) {
      Cookies.set("starve_bag", "" + delonta, {expires: 30});
    }
  }, this.bag, this.unlock.bag), dymir = new ishir(COSMETICS.BOOK, FIRST_BUTTON_BOOK, function (willodeen) {
    ui.book = willodeen;
    if (ui.unlock.book[willodeen] === 1) {
      Cookies.set("starve_book", "" + willodeen, {expires: 30});
    }
  }, this.book, this.unlock.book), kinuko = new ishir(COSMETICS.CRATE, FIRST_BUTTON_CRATE, function (lukyan) {
    ui.dead = lukyan;
    if (ui.unlock.dead[lukyan] === 1) {
      Cookies.set("starve_dead", "" + lukyan, {expires: 30});
    }
  }, this.dead, this.unlock.dead), carterjames = new ishir(COSMETICS.CRATE, FIRST_BUTTON_LOOT, function (makayiah) {
    ui.crate = makayiah;
    if (ui.unlock.crate[makayiah] === 1) {
      Cookies.set("starve_crate", "" + makayiah, {expires: 30});
    }
  }, this.crate, this.unlock.crate), ariea = new ishir(COSMETICS.ACCESSORY, FIRST_BUTTON_ACCESSORY, function (nyheem) {
    ui.accessory = nyheem;
    if (ui.unlock.accessory[nyheem] === 1) {
      Cookies.set("starve_accessory", "" + nyheem, {expires: 30});
    }
  }, this.accessory, this.unlock.accessory);
  this.trigger_mousedown = function (caprisha) {
    mouse.pos = get_mouse_pos(elior.can, caprisha);
    for (var sherrylyn = 0; sherrylyn < elior.buttons.length; sherrylyn++) {
      if (elior.buttons[sherrylyn].info.active === 1) {
        elior.buttons[sherrylyn].trigger(elior.can, mouse.pos, MOUSE_DOWN);
      }
    }
  };
  this.trigger_mouseup = function (gaonou) {
    mouse.pos = get_mouse_pos(elior.can, gaonou);
    for (var maheera = 0; maheera < elior.buttons.length; maheera++) {
      var eirnin = elior.buttons[maheera];
      if (eirnin.info.active === 1) {
        if (eirnin.trigger(elior.can, mouse.pos, MOUSE_UP)) {
          eirnin.info.callback();
          return;
        }
      }
    }
  };
  this.current_cursor = false;
  this.trigger_mousemove = function (judithann) {
    mouse.pos = get_mouse_pos(elior.can, judithann);
    var nusaibah = false;
    for (var jeremiha = 0; jeremiha < elior.buttons.length; jeremiha++) {
      if (elior.buttons[jeremiha].info.active === 1) {
        nusaibah |= elior.buttons[jeremiha].trigger(elior.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (elior.current_cursor !== nusaibah) {
      elior.current_cursor = nusaibah;
      if (nusaibah) {
        avila.style.cursor = elior.cursor1;
      } else {
        avila.style.cursor = elior.cursor0;
      }
    }
  };
  this.add_event_listener = function () {
    window.addEventListener("mousedown", this.trigger_mousedown, false);
    window.addEventListener("mouseup", this.trigger_mouseup, false);
    window.addEventListener("mousemove", this.trigger_mousemove, false);
  };
  this.remove_event_listener = function () {
    window.removeEventListener("mousedown", this.trigger_mousedown, false);
    window.removeEventListener("mouseup", this.trigger_mouseup, false);
    window.removeEventListener("mousemove", this.trigger_mousemove, false);
  };
}
function Game(datra, mais) {
  var niayla = this;
  this.can = datra;
  this.ctx = mais;
  window.navigator.userAgent.indexOf("Edge") > -1 ? (this.cursor0 = "default", this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default", this.cursor1 = "url('img/cursor1.png'), pointer");
  this.show_ui = 1;
  this.show_clock = 1;
  this.show_recipe_book = 1;
  this.show_quest = 1;
  this.team_box = {id: document.getElementById("team_box"), style: document.getElementById("team_box").style, update: function () {
    this.style.left = Math.floor(canw2 - 125) + "px";
    this.style.top = "110px";
  }};
  this.audio = {button_on: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_ON]), button_off: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_OFF])};
  this.sign = {open: false, breads: 0, symbol: document.getElementById("sign_object"), symbol_id: 0, id: document.getElementById("sign_window"), style: document.getElementById("sign_window").style, button: gui_create_button(60, 60, "", sprite[SPRITE.SIGN_BUTTON]), update_button: function () {
    var jarayah = Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + sprite[SPRITE.INV_WOOD][0].width) + 35);
    this.button.info.translate.x = jarayah;
    this.button.info.translate.y = 22;
  }, update: function () {
    this.style.left = Math.floor(canw2 - 150) + "px";
    this.style.top = Math.floor(canh2 - 115) + "px";
  }, quit: function () {
    game.sign.style.display = "none";
    game.sign.open = false;
  }, select: function () {
    game.sign.open = !game.sign.open;
    if (game.sign.open) {
      game.sign.style.display = "inline-block";
    } else {
      game.sign.style.display = "none";
    }
  }, ok: function () {
    client.update_sign(user.sign.iid, game.sign.symbol_id);
    game.sign.select();
  }, up: function () {
    game.sign.symbol_id = game.sign.symbol_id === 0 ? CLIENT.SYMBOL_MAX - 1 : game.sign.symbol_id - 1;
    game.sign.symbol.src = "./img/sign" + game.sign.symbol_id + ".png";
  }, down: function () {
    game.sign.symbol_id = (game.sign.symbol_id + 1) % CLIENT.SYMBOL_MAX;
    game.sign.symbol.src = "./img/sign" + game.sign.symbol_id + ".png";
  }};
  document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
  document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
  document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
  document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
  this.market = {open: false, id: document.getElementById("shop_market"), style: document.getElementById("shop_market").style, items: [{id: 0, name: "wood", val: 1, b: 1, a: 3, img_item: SPRITE.INV_WOOD}, {id: 1, name: "stone", val: 1, b: 1, a: 4, img_item: SPRITE.INV_STONE}, {id: 2, name: "gold", val: 1, b: 1, a: 6, img_item: SPRITE.INV_GOLD}, {id: 3, name: "diamond", val: 4, b: 4, a: 1, img_item: SPRITE.INV_DIAMOND}, {id: 4, name: "amethyst", val: 8, b: 8, a: 1, img_item: SPRITE.INV_AMETHYST}, {id: 5, name: "reidite", val: 16, b: 16, a: 1, img_item: SPRITE.INV_REIDITE}, {id: 6, name: "pumpkin_seed", val: 10, b: 10, a: 1, img_item: SPRITE.INV_PUMPKIN_SEED}, {id: 7, name: "carrot_seed", val: 16, b: 16, a: 1, img_item: SPRITE.INV_CARROT_SEED}, {id: 8, name: "tomato_seed", val: 20, b: 20, a: 1, img_item: SPRITE.INV_TOMATO_SEED}, {id: 9, name: "thornbush_seed", val: 30, b: 30, a: 1, img_item: SPRITE.INV_THORNBUSH_SEED}, {id: 10, name: "garlic_seed", val: 40, b: 40, a: 1, img_item: SPRITE.INV_GARLIC_SEED}, {id: 11, name: "watermelon_seed", val: 60, b: 60, a: 1, img_item: SPRITE.INV_WATERMELON_SEED}], button: gui_create_button(60, 60, "", sprite[SPRITE.MARKET_BUTTON]), update: function () {
    this.style.left = Math.floor(canw2 - 450) + "px";
    this.style.top = Math.floor(canh2 - 270) + "px";
  }, select: function () {
    game.market.open = !game.market.open;
    if (game.market.open) {
      game.market.style.display = "inline-block";
    } else {
      game.market.style.display = "none";
    }
  }, quit: function () {
    game.market.style.display = "none";
    game.market.open = false;
  }, buy: function () {
    client.buy_market(this.itemMarket);
  }, change: function () {
    var alician = this.id;
    if (this.itemMarket.a === 1) {
      var maruska = Math.floor(Number(this.value) * this.itemMarket.b);
      this.itemMarket.val = maruska;
      document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = maruska + "";
    } else {
      var maruska = Math.floor(Number(this.value) / this.itemMarket.a);
      this.itemMarket.val = maruska;
      document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = maruska + "";
    }
  }};
  document.getElementById("quit_market").addEventListener("mouseup", this.market.quit, false);
  var chrsitina = [["mouseup", this.market.buy, "buy_"], ["click", this.market.change, ""], ["change", this.market.change, ""], ["keypress", this.market.keypress, ""]];
  for (var keagan = 0; keagan < this.market.items.length; keagan++) {
    var denetris = this.market.items[keagan];
    document.getElementById(denetris.name + "_market").src = sprite[denetris.img_item][0]._src === undefined ? sprite[denetris.img_item][0].src : sprite[denetris.img_item][0]._src;
    if (denetris.a === 1) {
      document.getElementById(denetris.name + "_trad_number").innerHTML = denetris.b;
      document.getElementById(denetris.name + "_number").value = 1;
      document.getElementById(denetris.name + "_number").step = 1;
      document.getElementById(denetris.name + "_number").min = 1;
      document.getElementById(denetris.name + "_number").max = Math.floor(255 / denetris.b);
    } else {
      document.getElementById(denetris.name + "_trad_number").innerHTML = 1;
      document.getElementById(denetris.name + "_number").value = denetris.a;
      document.getElementById(denetris.name + "_number").step = denetris.a;
      document.getElementById(denetris.name + "_number").min = denetris.a;
    }
    document.getElementById("buy_" + denetris.name + "_number").itemMarket = denetris;
    document.getElementById(denetris.name + "_number").itemMarket = denetris;
    for (var jarule = 0; jarule < chrsitina.length; jarule++) {
      document.getElementById(chrsitina[jarule][2] + denetris.name + "_number").addEventListener(chrsitina[jarule][0], chrsitina[jarule][1], false);
    }
  }
  $("[type='number']").keypress(function (jayshon) {
    jayshon.preventDefault();
  });
  this.options = {open: false, id: document.getElementById("option_in_game"), style: document.getElementById("option_in_game").style, agree: document.getElementById("agree_ing").style, cancel_agree: document.getElementById("cancel_agree_ing").style, quests_agree: document.getElementById("quest_agree_ing").style, spectator_agree: document.getElementById("spectator_agree_ing").style, feed_agree: document.getElementById("auto_feed_agree_ing").style, info_box_agree: document.getElementById("info_agree_ing").style, aliasing_agree: document.getElementById("pixelated_agree_ing").style, button: gui_create_button(60, 60, "", sprite[SPRITE.OPTION_BUTTON]), select_options: function () {
    game.options.open = !game.options.open;
    if (game.options.open) {
      game.options.style.display = "inline-block";
    } else {
      game.options.style.display = "none";
    }
  }, azerty: function () {
    ui.set_azerty();
  }, qwerty: function () {
    ui.set_qwerty();
  }, high: function () {
    ui.high_quality();
  }, low: function () {
    ui.low_quality();
  }, checkbox: function () {
    game.safe_delete.checkbox();
  }, cancel_checkbox: function () {
    game.safe_cancel.checkbox();
  }, quest_checkbox: function () {
    game.quests.checkbox();
  }, spectator_checkbox: function () {
    user.show_spectators.invert();
  }, feed_checkbox: function () {
    user.auto_feed.invert();
  }, quit: function () {
    game.options.style.display = "none";
    game.options.open = false;
  }, update: function () {
    this.style.left = Math.floor(canw2 - 235) + "px";
    this.style.top = Math.floor(canh2 - 170) + "px";
  }};
  document.getElementById("azerty_ing").addEventListener("mouseup", this.options.azerty, false);
  document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.qwerty, false);
  document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
  document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
  document.getElementById("quit_opt").addEventListener("mouseup", this.options.quit, false);
  document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.checkbox, false);
  document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.quest_checkbox, false);
  document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.cancel_checkbox, false);
  document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.spectator_checkbox, false);
  document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.feed_checkbox, false);
  this.safe_cancel = {open: false, activated: Cookies.get("starve_cancel") ? Cookies.get("starve_cancel") === "0" ? 0 : 1 : 1, id: document.getElementById("cancel_sure_delete"), style: document.getElementById("cancel_sure_delete").style, agree: document.getElementById("cancel_agree").style, button: 0, i: 0, quit: function () {
    game.safe_cancel.style.display = "none";
    game.safe_cancel.open = false;
  }, yes: function () {
    if (user.craft.crafting) {
      client.cancel_crafting();
    }
    game.safe_cancel.quit();
  }, checkbox: function () {
    !game.safe_cancel.activated ? (Cookies.set("starve_cancel", "1"), game.safe_cancel.agree.display = "none", game.options.cancel_agree.display = "inline-block") : (Cookies.set("starve_cancel", "0"), game.safe_cancel.agree.display = "inline-block", game.options.cancel_agree.display = "none");
    game.safe_cancel.activated = !game.safe_cancel.activated;
  }, del: function () {
    if (!this.activated) {
      this.yes();
    } else {
      this.style.display = "inline-block";
      this.open = true;
    }
  }, update: function () {
    this.style.left = Math.floor(canw2 - 235) + "px";
    this.style.top = Math.floor(canh2 - 130) + "px";
  }};
  this.safe_cancel.id.oncontextmenu = function () {
    return false;
  };
  this.safe_cancel.agree.display = "none";
  if (this.safe_cancel.activated) {
    this.options.cancel_agree.display = "inline-block";
  } else {
    this.options.cancel_agree.display = "none";
  }
  document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.safe_cancel.yes, false);
  document.getElementById("cancel_no_delete").addEventListener("mouseup", this.safe_cancel.quit, false);
  document.getElementById("cancel_case_agree").addEventListener("mouseup", this.safe_cancel.checkbox, false);
  document.addEventListener("cancel_sure_delete", function (ruhi) {
    ruhi.preventDefault();
  }, false);
  this.aliasing = {activated: Cookies.get("starve_aliasing") ? Cookies.get("starve_aliasing") === "0" ? 0 : 1 : 1, set_aliasing: function (layney) {
    if (layney) {
      document.getElementById("game_canvas").style.imageRendering = "pixelated";
    } else {
      document.getElementById("game_canvas").style.imageRendering = "auto";
    }
  }, checkbox: function () {
    game.aliasing.activated === 0 ? (Cookies.set("starve_aliasing", "1"), game.aliasing.set_aliasing(1), game.options.aliasing_agree.display = "inline-block") : (Cookies.set("starve_aliasing", "0"), game.aliasing.set_aliasing(0), game.options.aliasing_agree.display = "none");
    game.aliasing.activated = (game.aliasing.activated + 1) % 2;
  }};
  if (this.aliasing.activated === 1) {
    this.options.aliasing_agree.display = "inline-block";
  } else {
    this.aliasing.set_aliasing(0);
    this.options.aliasing_agree.display = "none";
  }
  document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.aliasing.checkbox, false);
  this.info_box = {activated: Cookies.get("starve_info_box") ? Cookies.get("starve_info_box") === "0" ? 0 : 1 : 1, display: 0, x: 0, y: 0, id: 0, craft: 0, checkbox: function () {
    game.info_box.activated === 0 ? (Cookies.set("starve_info_box", "1"), game.options.info_box_agree.display = "inline-block") : (Cookies.set("starve_info_box", "0"), game.options.info_box_agree.display = "none");
    game.info_box.activated = (game.info_box.activated + 1) % 2;
  }, trigger: function (aalam, florann, yeniel) {
    if (aalam && this.activated) {
      this.display = 1;
      if (yeniel === 0) {
        this.id = florann.id;
      } else {
        this.id = RECIPES[florann.id].id2;
      }
      this.x = florann.info.translate.x + 80;
      this.y = florann.info.translate.y;
      this.craft = yeniel;
    }
    return aalam;
  }};
  if (this.info_box.activated === 1) {
    this.options.info_box_agree.display = "inline-block";
  } else {
    this.options.info_box_agree.display = "none";
  }
  document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.info_box.checkbox, false);
  Cookies.get("starve_scale") && (ratio_opt = Number(Cookies.get("starve_scale")), document.getElementById("input_ratio").value = ratio_opt, ratio_opt *= devicePixelRatio / backingStoreRatio, resize_canvas());
  this.change_ratio = function () {
    Cookies.set("starve_scale", "" + document.getElementById("input_ratio").value);
    ratio_opt = document.getElementById("input_ratio").value * (devicePixelRatio / backingStoreRatio);
    resize_canvas();
  };
  document.getElementById("input_ratio").addEventListener("input", this.change_ratio, false);
  this.safe_delete = {open: false, activated: Cookies.get("starve_safe") ? Cookies.get("starve_safe") === "0" ? 0 : 1 : 1, id: document.getElementById("sure_delete"), style: document.getElementById("sure_delete").style, agree: document.getElementById("agree").style, button: 0, i: 0, quit: function () {
    game.safe_delete.style.display = "none";
    game.safe_delete.open = false;
  }, all: function () {
    if (!user.build.wait) {
      if (user.craft.preview < 0 && user.craft.id < 0 && !user.ghost.enabled) {
        client.delete_inv(game.safe_delete.button);
      }
      game.safe_delete.quit();
    }
  }, recycle: function () {
    if (user.craft.workbench && !user.build.wait) {
      if (user.craft.preview < 0 && user.craft.id < 0 && !user.ghost.enabled) {
        client.recycle_inv(game.safe_delete.button);
      }
      game.safe_delete.quit();
    }
  }, one: function () {
    if (!user.build.wait) {
      if (user.craft.preview < 0 && user.craft.id < 0 && !user.ghost.enabled) {
        client.delete_one_inv(game.safe_delete.button);
      }
      game.safe_delete.quit();
    }
  }, checkbox: function () {
    !game.safe_delete.activated ? (Cookies.set("starve_safe", "1"), game.safe_delete.agree.display = "none", game.options.agree.display = "inline-block") : (Cookies.set("starve_safe", "0"), game.safe_delete.agree.display = "inline-block", game.options.agree.display = "none");
    game.safe_delete.activated = !game.safe_delete.activated;
  }, del: function (kitana) {
    this.button = kitana;
    document.getElementById("item_to_del").src = sprite[INV_INFOS[kitana].img][0]._src === undefined ? sprite[INV_INFOS[kitana].img][0].src : sprite[INV_INFOS[kitana].img][0]._src;
    if (INV_INFOS[kitana].recycle && !user.zombie && user.craft.workbench) {
      document.getElementById("recycle_delete").style.display = "inline-block";
    } else {
      document.getElementById("recycle_delete").style.display = "none";
    }
    if (!this.activated) {
      this.all();
    } else {
      this.style.display = "inline-block";
      this.open = true;
    }
  }, update: function () {
    this.style.left = Math.floor(canw2 - 235) + "px";
    this.style.top = Math.floor(canh2 - 175) + "px";
  }};
  this.safe_delete.agree.display = "none";
  if (this.safe_delete.activated) {
    this.options.agree.display = "inline-block";
  } else {
    this.options.agree.display = "none";
  }
  document.getElementById("one_delete").addEventListener("mouseup", this.safe_delete.one, false);
  document.getElementById("yes_delete").addEventListener("mouseup", this.safe_delete.all, false);
  document.getElementById("recycle_delete").addEventListener("mouseup", this.safe_delete.recycle, false);
  document.getElementById("no_delete").addEventListener("mouseup", this.safe_delete.quit, false);
  document.getElementById("case_agree").addEventListener("mouseup", this.safe_delete.checkbox, false);
  this.shop = {open: false, kit: -1, button: gui_create_button(60, 60, "", sprite[SPRITE.SHOP]), id: document.getElementById("shop_starterkit"), style: document.getElementById("shop_starterkit").style, update: function () {
    this.style.left = Math.floor(canw2 - 300) + "px";
    this.style.top = Math.floor(canh2 - 215) + "px";
  }, quit: function () {
    game.shop.open = false;
    game.shop.style.display = "none";
  }, select: function () {
    game.shop.open = !game.shop.open;
    if (!game.shop.open) {
      game.shop.style.display = "none";
    } else {
      game.shop.style.display = "inline-block";
    }
  }, buy: function () {
    if (game.shop.kit >= 0) {
      client.choose_kit(game.shop.kit);
      game.shop.quit();
      if (ga) {
        ga("send", "event", "Game", "kit", "" + game.shop.kit);
      }
    }
  }, init: function () {
    var maliya = user.shop.value;
    document.getElementById("points_bank").innerHTML = Utils.simplify_number(maliya) + " points";
    for (var tralaya = 0; tralaya < KIT.length; tralaya++) {
      if (KIT[tralaya].price > maliya) {
        document.getElementById("starter" + (tralaya + 1)).style.opacity = "0.4";
      } else {
        document.getElementById("starter" + (tralaya + 1)).style.opacity = "1";
      }
    }
    for (tralaya = 1; tralaya < 13; tralaya++) {
      document.getElementById("inv_shop" + tralaya).src = "./img/empty-shop.png";
      document.getElementById("amount_shop" + tralaya).innerHTML = "";
    }
    document.getElementById("buy_kit").style.opacity = "0.2";
  }, get_starter: function () {
    if (this.id.length > 8) {
      var latea = Number(this.id.charAt(7) + this.id.charAt(8));
    } else {
      var latea = Number(this.id.charAt(7));
    }
    var sok = KIT[latea - 1];
    user.shop.value >= sok.price ? (game.shop.kit = latea, document.getElementById("buy_kit").style.opacity = "1") : (game.shop.kit = -1, document.getElementById("buy_kit").style.opacity = "0.2");
    sok = sok.items;
    for (var lovelia = 1, carolay = 1; lovelia < sok.length + 1; lovelia++) {
      if (sok[lovelia - 1][1] === INV.BAG) {
        continue;
      }
      document.getElementById("inv_shop" + carolay).style.display = "inline-block";
      document.getElementById("inv_shop" + carolay).src = sprite[INV_INFOS[sok[lovelia - 1][1]].img][0]._src === undefined ? sprite[INV_INFOS[sok[lovelia - 1][1]].img][0].src : sprite[INV_INFOS[sok[lovelia - 1][1]].img][0]._src;
      document.getElementById("amount_shop" + carolay).innerHTML = "" + sok[lovelia - 1][0];
      carolay++;
    }
    for (; carolay < 13; carolay++) {
      document.getElementById("inv_shop" + carolay).src = "./img/empty-shop.png";
      document.getElementById("amount_shop" + carolay).innerHTML = "";
    }
  }};
  document.getElementById("quit3").addEventListener("mouseup", this.shop.quit, false);
  document.getElementById("buy_kit").addEventListener("mouseup", this.shop.buy, false);
  for (var jarule = 1; jarule < 11; jarule++) {
    document.getElementById("starter" + jarule).addEventListener("mouseup", this.shop.get_starter, false);
  }
  this.quests = {open: false, activated: Cookies.get("starve_quests") ? Cookies.get("starve_quests") === "1" ? 1 : 0 : 0, button: gui_create_button(60, 60, "", sprite[SPRITE.QUEST_BUTTON]), id: document.getElementById("chronoquest"), style: document.getElementById("chronoquest").style, update: function () {
    this.style.left = Math.floor(canw2 - 420) + "px";
    this.style.top = Math.floor(canh2 - 270) + "px";
  }, quit: function () {
    game.quests.style.display = "none";
    game.quests.open = false;
  }, select: function () {
    game.quests.open = !game.quests.open;
    if (!game.quests.open) {
      game.quests.style.display = "none";
    } else {
      game.quests.style.display = "inline-block";
    }
  }, list: [], reset: function () {
    for (var daijon = 0; daijon < QUESTS.length; daijon++) {
      this.list[daijon] = 1;
      document.getElementById("timeremain_" + daijon).style.display = "inline-block";
      document.getElementById("time_finished_" + daijon).style.display = "none";
      document.getElementById("claim_reward_" + daijon).style.display = "none";
    }
  }, timer: 0, born: 0, update_chrono: function () {
    if (!game.quests.open) {
      return;
    }
    var diquan = (new Date).getTime();
    if (diquan - this.timer < 1e3) {
      return;
    }
    this.timer = diquan;
    for (var makaylah = 0; makaylah < QUESTS.length; makaylah++) {
      if (!game.quests.list[makaylah]) {
        continue;
      }
      var zelna = QUESTS[makaylah].time - (diquan - world.clock.init + game.quests.born);
      if (zelna > 96e4) {
        document.getElementById("timeremain_" + makaylah).innerHTML = Math.floor(zelna / 48e4) + " days";
      } else {
        if (zelna > 48e4) {
          document.getElementById("timeremain_" + makaylah).innerHTML = Math.floor(zelna / 48e4) + " day";
        } else {
          if (zelna > 6e4) {
            document.getElementById("timeremain_" + makaylah).innerHTML = Math.floor(zelna / 6e4) + " min";
          } else {
            document.getElementById("timeremain_" + makaylah).innerHTML = Math.floor(zelna / 1e3) + " sec";
          }
        }
      }
    }
  }, restore: function (romain) {
    for (var telise = 0; telise < romain.length; telise++) {
      if (romain[telise] != 1) {
        game.quests.modify_simple(telise, romain[telise]);
      }
    }
  }, modify_simple: function (aquetzalli, ahava) {
    ahava === 3 && (aquetzalli === 11 || aquetzalli === 12) && (user.inv.update_bag_size(0, 1), game.update_inv_buttons());
    document.getElementById("timeremain_" + aquetzalli).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
    if (ahava > 1) {
      document.getElementById("time_finished_" + aquetzalli).innerHTML = "SUCCEED";
      document.getElementById("timeremain_" + aquetzalli).style.display = "none";
    } else {
      ahava === 0 && (document.getElementById("time_finished_" + aquetzalli).innerHTML = "FAILED", document.getElementById("timeremain_" + aquetzalli).style.display = "none");
    }
    if (ahava === 2) {
      document.getElementById("claim_reward_" + aquetzalli).style.display = "inline-block";
    } else {
      document.getElementById("claim_reward_" + aquetzalli).style.display = "none";
    }
    document.getElementById("time_finished_" + aquetzalli).style.display = "inline";
    game.quests.list[aquetzalli] = 0;
  }, modify: function (menyon, karisia) {
    game.quests.modify_simple(menyon, karisia);
    game.quests.activated && (game.quests.open = true, game.quests.style.display = "inline-block");
  }, checkbox: function () {
    !game.quests.activated ? (Cookies.set("starve_quests", "1"), game.options.quests_agree.display = "inline-block") : (Cookies.set("starve_quests", "0"), game.options.quests_agree.display = "none");
    game.quests.activated = !game.quests.activated;
  }, claim: function () {
    var crstal = Number(this.id.charAt(13)), melaya = Number(this.id.charAt(14));
    if (this.id.charAt(14) !== "" && melaya >= 0 && melaya <= 9) {
      crstal = crstal * 10 + melaya;
    }
    client.claim_quest_reward(crstal);
  }};
  if (this.quests.activated) {
    this.options.quests_agree.display = "inline-block";
  } else {
    this.options.quests_agree.display = "none";
  }
  document.getElementById("quit_chronoquest").addEventListener("mouseup", this.quests.quit, false);
  for (var jarule = 0; jarule < QUESTS.length; jarule++) {
    document.getElementById("claim_reward_" + jarule).addEventListener("mouseup", this.quests.claim, false);
  }
  this.craft_list = {open: false, button: gui_create_button(60, 60, "", sprite[SPRITE.RECIPE_BUTTON]), list: {id: document.getElementById("recipe_craft"), style: document.getElementById("recipe_craft").style, recipes: [], category: 0, update: function () {
    this.style.left = Math.floor(canw2 - 335) + "px";
    this.style.top = Math.floor(canh2 - 215) + "px";
  }, quit: function () {
    document.getElementById("recipe_craft").style.display = "none";
    game.craft_list.open = false;
  }, previous: function () {
    document.getElementById("recipe_craft").style.display = "none";
    document.getElementById("home_craft").style.display = "inline-block";
  }, get_recipe: function (marceau) {
    var malikka = this.recipes[marceau];
    if (malikka.o) {
      document.getElementById("watercraft").style.display = "inline-block";
    } else {
      document.getElementById("watercraft").style.display = "none";
    }
    if (malikka.f) {
      document.getElementById("firecraft").style.display = "inline-block";
    } else {
      document.getElementById("firecraft").style.display = "none";
    }
    if (malikka.w) {
      document.getElementById("workcraft").style.display = "inline-block";
    } else {
      document.getElementById("workcraft").style.display = "none";
    }
    if (malikka.e) {
      document.getElementById("wellcraft").style.display = "inline-block";
    } else {
      document.getElementById("wellcraft").style.display = "none";
    }
    var malikka = malikka.r;
    for (var marceau = 0, tulip = 1; marceau < malikka.length; marceau++) {
      document.getElementById("inv" + tulip).style.display = "inline-block";
      document.getElementById("inv" + tulip).src = sprite[INV_INFOS[malikka[marceau][0]].img][0]._src === undefined ? sprite[INV_INFOS[malikka[marceau][0]].img][0].src : sprite[INV_INFOS[malikka[marceau][0]].img][0]._src;
      document.getElementById("numb" + tulip).innerHTML = "" + malikka[marceau][1];
      tulip++;
    }
    for (; tulip < 6; tulip++) {
      document.getElementById("inv" + tulip).style.display = "none";
      document.getElementById("numb" + tulip).innerHTML = "";
    }
  }, select: function (idora) {
    this.category = idora;
    document.getElementById("home_craft").style.display = "none";
    document.getElementById("workcraft").style.display = "none";
    document.getElementById("firecraft").style.display = "none";
    document.getElementById("watercraft").style.display = "none";
    document.getElementById("wellcraft").style.display = "none";
    document.getElementById("recipe_craft").style.display = "inline-block";
    document.getElementById("inv1").style.display = "none";
    document.getElementById("inv2").style.display = "none";
    document.getElementById("inv3").style.display = "none";
    document.getElementById("inv4").style.display = "none";
    document.getElementById("inv5").style.display = "none";
    document.getElementById("numb1").innerHTML = "";
    document.getElementById("numb2").innerHTML = "";
    document.getElementById("numb3").innerHTML = "";
    document.getElementById("numb4").innerHTML = "";
    document.getElementById("numb5").innerHTML = "";
    for (var cosha = 0, chanteal = 0; cosha < RECIPES.length; cosha++) {
      var zeferino = RECIPES[cosha];
      idora === zeferino.t && (this.recipes[chanteal] = zeferino, chanteal++, document.getElementById("img_" + chanteal).style.display = "inline-block", document.getElementById("img_" + chanteal).src = sprite[INV_INFOS[zeferino.id2].img][0]._src === undefined ? sprite[INV_INFOS[zeferino.id2].img][0].src : sprite[INV_INFOS[zeferino.id2].img][0]._src);
    }
    for (chanteal++; chanteal < 49; chanteal++) {
      document.getElementById("img_" + chanteal).style.display = "none";
    }
  }}, home: {id: document.getElementById("home_craft"), style: document.getElementById("home_craft").style, update: function () {
    this.style.left = Math.floor(canw2 - 285) + "px";
    this.style.top = Math.floor(canh2 - 170) + "px";
  }, quit: function () {
    document.getElementById("home_craft").style.display = "none";
    game.craft_list.open = false;
  }}, select_book: function () {
    this.open = !this.open;
    if (!this.open) {
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
    } else {
      document.getElementById("home_craft").style.display = "inline-block";
    }
  }};
  document.getElementById("quit").addEventListener("mouseup", this.craft_list.home.quit, false);
  document.getElementById("quitmenu").addEventListener("mouseup", this.craft_list.list.quit, false);
  document.getElementById("backhome").addEventListener("mouseup", this.craft_list.list.previous, false);
  document.getElementById("hatcategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.CLOTHES);
  }, false);
  document.getElementById("weaponcategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.WEAPONS);
  }, false);
  document.getElementById("toolcategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.TOOLS);
  }, false);
  document.getElementById("foodcategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.FOODS);
  }, false);
  document.getElementById("placeablecategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.UTILS);
  }, false);
  document.getElementById("constructioncategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.BASES);
  }, false);
  document.getElementById("img_1").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(0);
  }, false);
  document.getElementById("img_2").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(1);
  }, false);
  document.getElementById("img_3").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(2);
  }, false);
  document.getElementById("img_4").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(3);
  }, false);
  document.getElementById("img_5").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(4);
  }, false);
  document.getElementById("img_6").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(5);
  }, false);
  document.getElementById("img_7").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(6);
  }, false);
  document.getElementById("img_8").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(7);
  }, false);
  document.getElementById("img_9").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(8);
  }, false);
  document.getElementById("img_10").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(9);
  }, false);
  document.getElementById("img_11").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(10);
  }, false);
  document.getElementById("img_12").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(11);
  }, false);
  document.getElementById("img_13").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(12);
  }, false);
  document.getElementById("img_14").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(13);
  }, false);
  document.getElementById("img_15").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(14);
  }, false);
  document.getElementById("img_16").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(15);
  }, false);
  document.getElementById("img_17").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(16);
  }, false);
  document.getElementById("img_18").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(17);
  }, false);
  document.getElementById("img_19").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(18);
  }, false);
  document.getElementById("img_20").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(19);
  }, false);
  document.getElementById("img_21").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(20);
  }, false);
  document.getElementById("img_22").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(21);
  }, false);
  document.getElementById("img_23").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(22);
  }, false);
  document.getElementById("img_24").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(23);
  }, false);
  document.getElementById("img_25").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(24);
  }, false);
  document.getElementById("img_26").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(25);
  }, false);
  document.getElementById("img_27").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(26);
  }, false);
  document.getElementById("img_28").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(27);
  }, false);
  document.getElementById("img_29").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(28);
  }, false);
  document.getElementById("img_30").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(29);
  }, false);
  document.getElementById("img_31").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(30);
  }, false);
  document.getElementById("img_32").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(31);
  }, false);
  document.getElementById("img_33").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(32);
  }, false);
  document.getElementById("img_34").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(33);
  }, false);
  document.getElementById("img_35").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(34);
  }, false);
  document.getElementById("img_36").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(35);
  }, false);
  document.getElementById("img_37").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(36);
  }, false);
  document.getElementById("img_38").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(37);
  }, false);
  document.getElementById("img_39").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(38);
  }, false);
  document.getElementById("img_40").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(39);
  }, false);
  document.getElementById("img_41").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(40);
  }, false);
  document.getElementById("img_42").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(41);
  }, false);
  document.getElementById("img_43").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(42);
  }, false);
  document.getElementById("img_44").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(43);
  }, false);
  document.getElementById("img_45").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(44);
  }, false);
  document.getElementById("img_46").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(45);
  }, false);
  document.getElementById("img_47").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(46);
  }, false);
  document.getElementById("img_48").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(47);
  }, false);
  this.minimap = {translate: {x: 0, y: 0}, marker: {x: -1, y: -1}, players: [], focus: function (dalaynee) {
    var shaneise = this.translate.y + (user.inv.can_select.length > 0 ? -120 : -50);
    dalaynee.x > this.translate.x && dalaynee.x < this.translate.x + 193 && dalaynee.y > shaneise && dalaynee.y < shaneise + 193 && (this.marker.x = dalaynee.x - this.translate.x, this.marker.y = dalaynee.y - shaneise);
  }};
  this.leaderboard = {translate: {x: 0, y: 0}, img: sprite[SPRITE.LEADERBOARD], can: document.createElement("canvas")};
  this.leaderboard.can.width = this.leaderboard.img.width;
  this.leaderboard.can.height = this.leaderboard.img.height;
  this.leaderboard.ctx = this.leaderboard.can.getContext("2d");
  this.gauges = {translate: {x: 0, y: 0}, img: sprite[SPRITE.GAUGES], draw: draw_gauges, y: 0};
  this.leave_team = function () {
    div = document.getElementById("team_box");
    div.innerHTML = "";
    div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + world.players[user.team[0]].nickname + "</div";
    for (var yocelyne = 1; yocelyne < user.team.length; yocelyne++) {
      div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + world.players[user.team[yocelyne]].nickname + "</div></div>";
    }
    div.innerHTML += '<div id="leave" style="display:inline-block;">LEAVE</div></div>';
    div.style.display = "inline-block";
    document.getElementById("leave").addEventListener("click", client.leave_team, false);
  };
  this.show_team = function () {
    div = document.getElementById("team_box");
    div.innerHTML = "";
    div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + world.players[user.team[0]].nickname + "</div";
    for (var talbott = 1; talbott < user.team.length; talbott++) {
      div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + world.players[user.team[talbott]].nickname + "</div></div>";
    }
    div.innerHTML += "</div>";
    div.style.display = "inline-block";
  };
  this.manage_team = function () {
    div = document.getElementById("team_box");
    div.innerHTML = "";
    div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + world.players[user.team[0]].nickname + "</div";
    for (var abdrew = 1; abdrew < user.team.length; abdrew++) {
      div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + world.players[user.team[abdrew]].nickname + '</div><div class="eject_member" id="eject_member' + abdrew + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
    }
    if (user.totem.lock === 0) {
      div.innerHTML += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>';
    } else {
      div.innerHTML += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>';
    }
    document.getElementById("lock_team").addEventListener("click", client.lock_team, false);
    div.style.display = "inline-block";
    for (var abdrew = 1; abdrew < user.team.length; abdrew++) {
      switch (abdrew) {
        case 1:
          document.getElementById("eject_member" + abdrew).addEventListener("click", function () {
            client.kick_team(1);
          }, false);
          break;
        case 2:
          document.getElementById("eject_member" + abdrew).addEventListener("click", function () {
            client.kick_team(2);
          }, false);
          break;
        case 3:
          document.getElementById("eject_member" + abdrew).addEventListener("click", function () {
            client.kick_team(3);
          }, false);
          break;
        case 4:
          document.getElementById("eject_member" + abdrew).addEventListener("click", function () {
            client.kick_team(4);
          }, false);
          break;
        case 5:
          document.getElementById("eject_member" + abdrew).addEventListener("click", function () {
            client.kick_team(5);
          }, false);
          break;
        case 6:
          document.getElementById("eject_member" + abdrew).addEventListener("click", function () {
            client.kick_team(6);
          }, false);
          break;
        case 7:
          document.getElementById("eject_member" + abdrew).addEventListener("click", function () {
            client.kick_team(7);
          }, false);
          break;
        case 8:
          document.getElementById("eject_member" + abdrew).addEventListener("click", function () {
            client.kick_team(8);
          }, false);
          break;
      }
    }
  };
  this.team_buttons = [];
  this.team_buttons[CLIENT.TEAM_LEAVE] = {button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]), action: this.leave_team};
  this.team_buttons[CLIENT.TEAM_JOIN] = {button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]), action: client.join_team};
  this.team_buttons[CLIENT.TEAM_MANAGE] = {button: gui_create_button(60, 60, "", sprite[SPRITE.MANAGE_TEAM_BUTTON]), action: this.manage_team};
  this.team_buttons[CLIENT.TEAM_SHOW] = {button: gui_create_button(60, 60, "", sprite[SPRITE.SHOW_TEAM_BUTTON]), action: this.show_team};
  this.team_buttons[CLIENT.TEAM_FULL] = {button: gui_create_button(60, 60, "", sprite[SPRITE.FULL_TEAM_BUTTON]), action: function () {}};
  this.team_buttons_id = -1;
  this.bread_oven_wood_button = gui_create_button(60, 60, "", sprite[SPRITE.BREAD_OVEN_WOOD]);
  this.bread_oven_bread_button = gui_create_button(60, 60, "", sprite[SPRITE.BREAD_OVEN_BREAD]);
  this.bread_oven_flour_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]);
  this.windmill_wheat_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_WHEAT_SEED]);
  this.windmill_flour_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]);
  this.extractor_wood_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD]);
  this.extractor_stone_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE]);
  this.extractor_gold_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD]);
  this.extractor_diamond_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND]);
  this.extractor_amethyst_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST]);
  this.extractor_reidite_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE]);
  this.furnace_button = gui_create_button(60, 60, "", sprite[SPRITE.FURNACE_BUTTON]);
  this.chest_padlock = gui_create_button(60, 60, "", sprite[SPRITE.PADLOCK]);
  this.chest_lockpick = gui_create_button(60, 60, "", sprite[SPRITE.KEY]);
  this.chest_locked = gui_create_button(60, 60, "", sprite[SPRITE.LOCKED]);
  this.resurrection = gui_create_button(120, 120, "", sprite[SPRITE.DRAGON_HEART]);
  this.resurrection.info.translate.x = 10;
  this.resurrection.info.translate.y = 10;
  this.chest_buttons = [];
  this.chest_buttons[INV.SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD], 3);
  this.chest_buttons[INV.SWORD].id = INV.SWORD;
  this.chest_buttons[INV.PICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK], 3);
  this.chest_buttons[INV.PICK].id = INV.PICK;
  this.chest_buttons[INV.STONE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE], 3);
  this.chest_buttons[INV.STONE].id = INV.STONE;
  this.chest_buttons[INV.WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD], 3);
  this.chest_buttons[INV.WOOD].id = INV.WOOD;
  this.chest_buttons[INV.PLANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLANT], 3);
  this.chest_buttons[INV.PLANT].id = INV.PLANT;
  this.chest_buttons[INV.CACTUS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CACTUS], 3);
  this.chest_buttons[INV.CACTUS].id = INV.CACTUS;
  this.chest_buttons[INV.GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD], 3);
  this.chest_buttons[INV.GOLD].id = INV.GOLD;
  this.chest_buttons[INV.DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND], 3);
  this.chest_buttons[INV.DIAMOND].id = INV.DIAMOND;
  this.chest_buttons[INV.PICK_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_GOLD], 3);
  this.chest_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD;
  this.chest_buttons[INV.PICK_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_DIAMOND], 3);
  this.chest_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND;
  this.chest_buttons[INV.SWORD_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_GOLD], 3);
  this.chest_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD;
  this.chest_buttons[INV.SWORD_WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_WOOD], 3);
  this.chest_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD;
  this.chest_buttons[INV.SWORD_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_DIAMOND], 3);
  this.chest_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND;
  this.chest_buttons[INV.FIRE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FIRE], 3);
  this.chest_buttons[INV.FIRE].id = INV.FIRE;
  this.chest_buttons[INV.WORKBENCH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WORKBENCH], 3);
  this.chest_buttons[INV.WORKBENCH].id = INV.WORKBENCH;
  this.chest_buttons[INV.SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SEED], 3);
  this.chest_buttons[INV.SEED].id = INV.SEED;
  this.chest_buttons[INV.WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WALL], 3);
  this.chest_buttons[INV.WALL].id = INV.WALL;
  this.chest_buttons[INV.SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPIKE], 3);
  this.chest_buttons[INV.SPIKE].id = INV.SPIKE;
  this.chest_buttons[INV.PICK_WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_WOOD], 3);
  this.chest_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD;
  this.chest_buttons[INV.COOKED_MEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COOKED_MEAT], 3);
  this.chest_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT;
  this.chest_buttons[INV.MEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MEAT], 3);
  this.chest_buttons[INV.MEAT].id = INV.MEAT;
  this.chest_buttons[INV.BIG_FIRE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BIG_FIRE], 3);
  this.chest_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE;
  this.chest_buttons[INV.BANDAGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BANDAGE], 3);
  this.chest_buttons[INV.BANDAGE].id = INV.BANDAGE;
  this.chest_buttons[INV.CORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CORD], 3);
  this.chest_buttons[INV.CORD].id = INV.CORD;
  this.chest_buttons[INV.STONE_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_WALL], 3);
  this.chest_buttons[INV.STONE_WALL].id = INV.STONE_WALL;
  this.chest_buttons[INV.GOLD_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_WALL], 3);
  this.chest_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL;
  this.chest_buttons[INV.DIAMOND_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_WALL], 3);
  this.chest_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL;
  this.chest_buttons[INV.WOOD_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE], 3);
  this.chest_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR;
  this.chest_buttons[INV.CHEST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CHEST], 3);
  this.chest_buttons[INV.CHEST].id = INV.CHEST;
  this.chest_buttons[INV.STONE_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_SPIKE], 3);
  this.chest_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE;
  this.chest_buttons[INV.GOLD_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPIKE], 3);
  this.chest_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE;
  this.chest_buttons[INV.DIAMOND_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPIKE], 3);
  this.chest_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE;
  this.chest_buttons[INV.FUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR], 3);
  this.chest_buttons[INV.FUR].id = INV.FUR;
  this.chest_buttons[INV.FUR_BOAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_BOAR], 3);
  this.chest_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR;
  this.chest_buttons[INV.FUR_WOLF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_WOLF], 3);
  this.chest_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF;
  this.chest_buttons[INV.PENGUIN_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PENGUIN_FEATHER], 3);
  this.chest_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER;
  this.chest_buttons[INV.HAWK_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAWK_FEATHER], 3);
  this.chest_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER;
  this.chest_buttons[INV.VULTURE_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_VULTURE_FEATHER], 3);
  this.chest_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER;
  this.chest_buttons[INV.EMERALD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EMERALD], 3);
  this.chest_buttons[INV.EMERALD].id = INV.EMERALD;
  this.chest_buttons[INV.EARMUFFS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EARMUFFS], 3);
  this.chest_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
  this.chest_buttons[INV.STONE_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_STONE_CLOSE], 3);
  this.chest_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR;
  this.chest_buttons[INV.GOLD_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE], 3);
  this.chest_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR;
  this.chest_buttons[INV.DIAMOND_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE], 3);
  this.chest_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR;
  this.chest_buttons[INV.COAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COAT], 3);
  this.chest_buttons[INV.COAT].id = INV.COAT;
  this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3);
  this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.chest_buttons[INV.SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPEAR], 3);
  this.chest_buttons[INV.SPEAR].id = INV.SPEAR;
  this.chest_buttons[INV.GOLD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPEAR], 3);
  this.chest_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR;
  this.chest_buttons[INV.DIAMOND_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPEAR], 3);
  this.chest_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR;
  this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3);
  this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.chest_buttons[INV.FURNACE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FURNACE], 3);
  this.chest_buttons[INV.FURNACE].id = INV.FURNACE;
  this.chest_buttons[INV.EXPLORER_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXPLORER_HAT], 3);
  this.chest_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT;
  this.chest_buttons[INV.PIRATE_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PIRATE_HAT], 3);
  this.chest_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT;
  this.chest_buttons[INV.FLOWER_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLOWER_HAT], 3);
  this.chest_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT;
  this.chest_buttons[INV.FUR_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_HAT], 3);
  this.chest_buttons[INV.FUR_HAT].id = INV.FUR_HAT;
  this.chest_buttons[INV.TURBAN1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TURBAN1], 3);
  this.chest_buttons[INV.TURBAN1].id = INV.TURBAN1;
  this.chest_buttons[INV.TURBAN2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TURBAN2], 3);
  this.chest_buttons[INV.TURBAN2].id = INV.TURBAN2;
  this.chest_buttons[INV.WOOD_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_ARROW], 3);
  this.chest_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW;
  this.chest_buttons[INV.WOOD_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_BOW], 3);
  this.chest_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW;
  this.chest_buttons[INV.WOOD_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SHIELD], 3);
  this.chest_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD;
  this.chest_buttons[INV.STONE_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_ARROW], 3);
  this.chest_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW;
  this.chest_buttons[INV.STONE_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_BOW], 3);
  this.chest_buttons[INV.STONE_BOW].id = INV.STONE_BOW;
  this.chest_buttons[INV.STONE_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_SHIELD], 3);
  this.chest_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD;
  this.chest_buttons[INV.GOLD_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_ARROW], 3);
  this.chest_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW;
  this.chest_buttons[INV.GOLD_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_BOW], 3);
  this.chest_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW;
  this.chest_buttons[INV.GOLD_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SHIELD], 3);
  this.chest_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD;
  this.chest_buttons[INV.DIAMOND_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_ARROW], 3);
  this.chest_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW;
  this.chest_buttons[INV.DIAMOND_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_BOW], 3);
  this.chest_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW;
  this.chest_buttons[INV.DIAMOND_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SHIELD], 3);
  this.chest_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD;
  this.chest_buttons[INV.AMETHYST_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_ARROW], 3);
  this.chest_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW;
  this.chest_buttons[INV.AMETHYST_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_BOW], 3);
  this.chest_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW;
  this.chest_buttons[INV.AMETHYST_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SHIELD], 3);
  this.chest_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD;
  this.chest_buttons[INV.REIDITE_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_ARROW], 3);
  this.chest_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW;
  this.chest_buttons[INV.REIDITE_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_BOW], 3);
  this.chest_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW;
  this.chest_buttons[INV.REIDITE_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SHIELD], 3);
  this.chest_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD;
  this.chest_buttons[INV.DRAGON_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ARROW], 3);
  this.chest_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW;
  this.chest_buttons[INV.DRAGON_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_BOW], 3);
  this.chest_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW;
  this.chest_buttons[INV.WOOD_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_HELMET], 3);
  this.chest_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET;
  this.chest_buttons[INV.STONE_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_HELMET], 3);
  this.chest_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET;
  this.chest_buttons[INV.GOLD_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_HELMET], 3);
  this.chest_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET;
  this.chest_buttons[INV.DIAMOND_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_HELMET], 3);
  this.chest_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET;
  this.chest_buttons[INV.BOOK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOOK], 3);
  this.chest_buttons[INV.BOOK].id = INV.BOOK;
  this.chest_buttons[INV.PAPER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PAPER], 3);
  this.chest_buttons[INV.PAPER].id = INV.PAPER;
  this.chest_buttons[INV.BAG] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BAG], 3);
  this.chest_buttons[INV.BAG].id = INV.BAG;
  this.chest_buttons[INV.AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST], 3);
  this.chest_buttons[INV.AMETHYST].id = INV.AMETHYST;
  this.chest_buttons[INV.SWORD_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_AMETHYST], 3);
  this.chest_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST;
  this.chest_buttons[INV.PIRATE_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PIRATE_SWORD], 3);
  this.chest_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD;
  this.chest_buttons[INV.PICK_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_AMETHYST], 3);
  this.chest_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST;
  this.chest_buttons[INV.PICK_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_REIDITE], 3);
  this.chest_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE;
  this.chest_buttons[INV.AMETHYST_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPEAR], 3);
  this.chest_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR;
  this.chest_buttons[INV.HAMMER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER], 3);
  this.chest_buttons[INV.HAMMER].id = INV.HAMMER;
  this.chest_buttons[INV.HAMMER_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_GOLD], 3);
  this.chest_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD;
  this.chest_buttons[INV.HAMMER_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_DIAMOND], 3);
  this.chest_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND;
  this.chest_buttons[INV.HAMMER_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_AMETHYST], 3);
  this.chest_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST;
  this.chest_buttons[INV.HAMMER_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_REIDITE], 3);
  this.chest_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE;
  this.chest_buttons[INV.AMETHYST_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_WALL], 3);
  this.chest_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL;
  this.chest_buttons[INV.AMETHYST_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPIKE], 3);
  this.chest_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE;
  this.chest_buttons[INV.AMETHYST_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE], 3);
  this.chest_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR;
  this.chest_buttons[INV.CAP_SCARF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CAP_SCARF], 3);
  this.chest_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF;
  this.chest_buttons[INV.FUR_WINTER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_WINTER], 3);
  this.chest_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER;
  this.chest_buttons[INV.FUR_MAMMOTH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_MAMMOTH], 3);
  this.chest_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH;
  this.chest_buttons[INV.BLUE_CORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BLUE_CORD], 3);
  this.chest_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD;
  this.chest_buttons[INV.LOCK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LOCK], 3);
  this.chest_buttons[INV.LOCK].id = INV.LOCK;
  this.chest_buttons[INV.DRAGON_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HEART], 3);
  this.chest_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART;
  this.chest_buttons[INV.LAVA_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3);
  this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.chest_buttons[INV.RESURRECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_RESURRECTION], 3);
  this.chest_buttons[INV.RESURRECTION].id = INV.RESURRECTION;
  this.chest_buttons[INV.LOCKPICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LOCKPICK], 3);
  this.chest_buttons[INV.LOCKPICK].id = INV.LOCKPICK;
  this.chest_buttons[INV.TOTEM] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOTEM], 3);
  this.chest_buttons[INV.TOTEM].id = INV.TOTEM;
  this.chest_buttons[INV.AMETHYST_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_HELMET], 3);
  this.chest_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET;
  this.chest_buttons[INV.SUPER_HAMMER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUPER_HAMMER], 3);
  this.chest_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER;
  this.chest_buttons[INV.BRIDGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BRIDGE], 3);
  this.chest_buttons[INV.BRIDGE].id = INV.BRIDGE;
  this.chest_buttons[INV.WOOD_TOWER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_TOWER], 3);
  this.chest_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER;
  this.chest_buttons[INV.BOAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOAT], 3);
  this.chest_buttons[INV.BOAT].id = INV.BOAT;
  this.chest_buttons[INV.SLED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SLED], 3);
  this.chest_buttons[INV.SLED].id = INV.SLED;
  this.chest_buttons[INV.PLANE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLANE], 3);
  this.chest_buttons[INV.PLANE].id = INV.PLANE;
  this.chest_buttons[INV.SADDLE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SADDLE], 3);
  this.chest_buttons[INV.SADDLE].id = INV.SADDLE;
  this.chest_buttons[INV.MOUNT_BOAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MOUNT_BOAR], 3);
  this.chest_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR;
  this.chest_buttons[INV.BABY_DRAGON] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_DRAGON], 3);
  this.chest_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON;
  this.chest_buttons[INV.BABY_MAMMOTH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_MAMMOTH], 3);
  this.chest_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH;
  this.chest_buttons[INV.BABY_LAVA] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_LAVA], 3);
  this.chest_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA;
  this.chest_buttons[INV.HAWK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAWK], 3);
  this.chest_buttons[INV.HAWK].id = INV.HAWK;
  this.chest_buttons[INV.CRAB_BOSS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_BOSS], 3);
  this.chest_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS;
  this.chest_buttons[INV.SAND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SAND], 3);
  this.chest_buttons[INV.SAND].id = INV.SAND;
  this.chest_buttons[INV.BOTTLE_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_FULL], 3);
  this.chest_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL;
  this.chest_buttons[INV.BOTTLE_EMPTY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_EMPTY], 3);
  this.chest_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY;
  this.chest_buttons[INV.SHOVEL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL], 3);
  this.chest_buttons[INV.SHOVEL].id = INV.SHOVEL;
  this.chest_buttons[INV.SHOVEL_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_GOLD], 3);
  this.chest_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD;
  this.chest_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_DIAMOND], 3);
  this.chest_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND;
  this.chest_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_AMETHYST], 3);
  this.chest_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST;
  this.chest_buttons[INV.SPANNER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPANNER], 3);
  this.chest_buttons[INV.SPANNER].id = INV.SPANNER;
  this.chest_buttons[INV.KRAKEN_SKIN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_KRAKEN_SKIN], 3);
  this.chest_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN;
  this.chest_buttons[INV.WATERING_CAN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN], 3);
  this.chest_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN;
  this.chest_buttons[INV.FLOUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLOUR], 3);
  this.chest_buttons[INV.FLOUR].id = INV.FLOUR;
  this.chest_buttons[INV.WHEAT_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WHEAT_SEED], 3);
  this.chest_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED;
  this.chest_buttons[INV.COOKIE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COOKIE], 3);
  this.chest_buttons[INV.COOKIE].id = INV.COOKIE;
  this.chest_buttons[INV.WILD_WHEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WILD_WHEAT], 3);
  this.chest_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT;
  this.chest_buttons[INV.WINDMILL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINDMILL], 3);
  this.chest_buttons[INV.WINDMILL].id = INV.WINDMILL;
  this.chest_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUPER_DIVING_SUIT], 3);
  this.chest_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT;
  this.chest_buttons[INV.DIVING_MASK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIVING_MASK], 3);
  this.chest_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK;
  this.chest_buttons[INV.WATERING_CAN_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN_FULL], 3);
  this.chest_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL;
  this.chest_buttons[INV.CAKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CAKE], 3);
  this.chest_buttons[INV.CAKE].id = INV.CAKE;
  this.chest_buttons[INV.BREAD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BREAD], 3);
  this.chest_buttons[INV.BREAD].id = INV.BREAD;
  this.chest_buttons[INV.FOODFISH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FOODFISH], 3);
  this.chest_buttons[INV.FOODFISH].id = INV.FOODFISH;
  this.chest_buttons[INV.FOODFISH_COOKED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FOODFISH_COOKED], 3);
  this.chest_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED;
  this.chest_buttons[INV.SCALES] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SCALES], 3);
  this.chest_buttons[INV.SCALES].id = INV.SCALES;
  this.chest_buttons[INV.GROUND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GROUND], 3);
  this.chest_buttons[INV.GROUND].id = INV.GROUND;
  this.chest_buttons[INV.PLOT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLOT], 3);
  this.chest_buttons[INV.PLOT].id = INV.PLOT;
  this.chest_buttons[INV.ICE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ICE], 3);
  this.chest_buttons[INV.ICE].id = INV.ICE;
  this.chest_buttons[INV.BREAD_OVEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BREAD_OVEN], 3);
  this.chest_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN;
  this.chest_buttons[INV.SANDWICH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SANDWICH], 3);
  this.chest_buttons[INV.SANDWICH].id = INV.SANDWICH;
  this.chest_buttons[INV.DRAGON_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HELMET], 3);
  this.chest_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET;
  this.chest_buttons[INV.DRAGON_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SWORD], 3);
  this.chest_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD;
  this.chest_buttons[INV.DRAGON_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ORB], 3);
  this.chest_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB;
  this.chest_buttons[INV.DRAGON_CUBE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_CUBE], 3);
  this.chest_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE;
  this.chest_buttons[INV.LAVA_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3);
  this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.chest_buttons[INV.LAVA_CUBE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_CUBE], 3);
  this.chest_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE;
  this.chest_buttons[INV.CROWN_GREEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_GREEN], 3);
  this.chest_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN;
  this.chest_buttons[INV.GEMME_GREEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_GREEN], 3);
  this.chest_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN;
  this.chest_buttons[INV.GEMME_ORANGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_ORANGE], 3);
  this.chest_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE;
  this.chest_buttons[INV.CROWN_ORANGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_ORANGE], 3);
  this.chest_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE;
  this.chest_buttons[INV.GEMME_BLUE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_BLUE], 3);
  this.chest_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE;
  this.chest_buttons[INV.CROWN_BLUE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_BLUE], 3);
  this.chest_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE;
  this.chest_buttons[INV.HOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HOOD], 3);
  this.chest_buttons[INV.HOOD].id = INV.HOOD;
  this.chest_buttons[INV.PEASANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PEASANT], 3);
  this.chest_buttons[INV.PEASANT].id = INV.PEASANT;
  this.chest_buttons[INV.SPECIAL_FUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR], 3);
  this.chest_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR;
  this.chest_buttons[INV.SPECIAL_FUR_2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR_2], 3);
  this.chest_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2;
  this.chest_buttons[INV.WINTER_PEASANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINTER_PEASANT], 3);
  this.chest_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT;
  this.chest_buttons[INV.WINTER_HOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINTER_HOOD], 3);
  this.chest_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD;
  this.chest_buttons[INV.BUCKET_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BUCKET_FULL], 3);
  this.chest_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL;
  this.chest_buttons[INV.BUCKET_EMPTY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BUCKET_EMPTY], 3);
  this.chest_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY;
  this.chest_buttons[INV.WELL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WELL], 3);
  this.chest_buttons[INV.WELL].id = INV.WELL;
  this.chest_buttons[INV.SIGN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SIGN], 3);
  this.chest_buttons[INV.SIGN].id = INV.SIGN;
  this.chest_buttons[INV.PUMPKIN_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN_SEED], 3);
  this.chest_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED;
  this.chest_buttons[INV.PUMPKIN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN], 3);
  this.chest_buttons[INV.PUMPKIN].id = INV.PUMPKIN;
  this.chest_buttons[INV.ROOF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ROOF], 3);
  this.chest_buttons[INV.ROOF].id = INV.ROOF;
  this.chest_buttons[INV.GARLIC_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLIC_SEED], 3);
  this.chest_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED;
  this.chest_buttons[INV.GARLIC] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLIC], 3);
  this.chest_buttons[INV.GARLIC].id = INV.GARLIC;
  this.chest_buttons[INV.THORNBUSH_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH_SEED], 3);
  this.chest_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED;
  this.chest_buttons[INV.THORNBUSH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH], 3);
  this.chest_buttons[INV.THORNBUSH].id = INV.THORNBUSH;
  this.chest_buttons[INV.TOMATO_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOMATO_SEED], 3);
  this.chest_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED;
  this.chest_buttons[INV.TOMATO] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOMATO], 3);
  this.chest_buttons[INV.TOMATO].id = INV.TOMATO;
  this.chest_buttons[INV.CARROT_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CARROT_SEED], 3);
  this.chest_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED;
  this.chest_buttons[INV.CARROT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CARROT], 3);
  this.chest_buttons[INV.CARROT].id = INV.CARROT;
  this.chest_buttons[INV.WATERMELON_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERMELON_SEED], 3);
  this.chest_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED;
  this.chest_buttons[INV.WATERMELON] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERMELON], 3);
  this.chest_buttons[INV.WATERMELON].id = INV.WATERMELON;
  this.chest_buttons[INV.ALOE_VERA_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA_SEED], 3);
  this.chest_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED;
  this.chest_buttons[INV.ALOE_VERA] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA], 3);
  this.chest_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA;
  this.chest_buttons[INV.CHRISTMAS_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CHRISTMAS_HAT], 3);
  this.chest_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT;
  this.chest_buttons[INV.ELF_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ELF_HAT], 3);
  this.chest_buttons[INV.ELF_HAT].id = INV.ELF_HAT;
  this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3);
  this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3);
  this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.chest_buttons[INV.CRAB_STICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_STICK], 3);
  this.chest_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK;
  this.chest_buttons[INV.CRAB_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_SPEAR], 3);
  this.chest_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR;
  this.chest_buttons[INV.CRAB_LOOT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_LOOT], 3);
  this.chest_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT;
  this.chest_buttons[INV.BED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BED], 3);
  this.chest_buttons[INV.BED].id = INV.BED;
  this.chest_buttons[INV.CROWN_CRAB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_CRAB], 3);
  this.chest_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB;
  this.chest_buttons[INV.GARLAND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLAND], 3);
  this.chest_buttons[INV.GARLAND].id = INV.GARLAND;
  this.chest_buttons[INV.SUGAR_CAN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUGAR_CAN], 3);
  this.chest_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN;
  this.chest_buttons[INV.CANDY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CANDY], 3);
  this.chest_buttons[INV.CANDY].id = INV.CANDY;
  this.plus_buttons = [];
  for (var jarule = 0; jarule < 250; jarule++) {
    this.plus_buttons[jarule] = gui_create_button(0, 0, "", sprite[SPRITE.CHEST_PLUS]);
  }
  this.inv_buttons = [];
  this.inv_buttons[INV.SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD], 3);
  this.inv_buttons[INV.SWORD].id = INV.SWORD;
  this.inv_buttons[INV.PICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK], 3);
  this.inv_buttons[INV.PICK].id = INV.PICK;
  this.inv_buttons[INV.STONE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE], 3);
  this.inv_buttons[INV.STONE].id = INV.STONE;
  this.inv_buttons[INV.STONE].info.img[2] = this.inv_buttons[INV.STONE].info.img[0];
  this.inv_buttons[INV.WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD], 3);
  this.inv_buttons[INV.WOOD].id = INV.WOOD;
  this.inv_buttons[INV.WOOD].info.img[2] = this.inv_buttons[INV.WOOD].info.img[0];
  this.inv_buttons[INV.PLANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLANT], 3);
  this.inv_buttons[INV.PLANT].id = INV.PLANT;
  this.inv_buttons[INV.CACTUS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CACTUS], 3);
  this.inv_buttons[INV.CACTUS].id = INV.CACTUS;
  this.inv_buttons[INV.GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD], 3);
  this.inv_buttons[INV.GOLD].id = INV.GOLD;
  this.inv_buttons[INV.GOLD].info.img[2] = this.inv_buttons[INV.GOLD].info.img[0];
  this.inv_buttons[INV.DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND], 3);
  this.inv_buttons[INV.DIAMOND].id = INV.DIAMOND;
  this.inv_buttons[INV.DIAMOND].info.img[2] = this.inv_buttons[INV.DIAMOND].info.img[0];
  this.inv_buttons[INV.PICK_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_GOLD], 3);
  this.inv_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD;
  this.inv_buttons[INV.PICK_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_DIAMOND], 3);
  this.inv_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND;
  this.inv_buttons[INV.SWORD_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_GOLD], 3);
  this.inv_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD;
  this.inv_buttons[INV.SWORD_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_WOOD], 3);
  this.inv_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD;
  this.inv_buttons[INV.SWORD_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_DIAMOND], 3);
  this.inv_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND;
  this.inv_buttons[INV.FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FIRE], 3);
  this.inv_buttons[INV.FIRE].id = INV.FIRE;
  this.inv_buttons[INV.WORKBENCH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WORK], 3);
  this.inv_buttons[INV.WORKBENCH].id = INV.WORKBENCH;
  this.inv_buttons[INV.SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SEED], 3);
  this.inv_buttons[INV.SEED].id = INV.SEED;
  this.inv_buttons[INV.WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WALL], 3);
  this.inv_buttons[INV.WALL].id = INV.WALL;
  this.inv_buttons[INV.SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPIKE], 3);
  this.inv_buttons[INV.SPIKE].id = INV.SPIKE;
  this.inv_buttons[INV.PICK_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_WOOD], 3);
  this.inv_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD;
  this.inv_buttons[INV.COOKED_MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COOKED_MEAT], 3);
  this.inv_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT;
  this.inv_buttons[INV.MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MEAT], 3);
  this.inv_buttons[INV.MEAT].id = INV.MEAT;
  this.inv_buttons[INV.BIG_FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BIG_FIRE], 3);
  this.inv_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE;
  this.inv_buttons[INV.BANDAGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BANDAGE], 3);
  this.inv_buttons[INV.BANDAGE].id = INV.BANDAGE;
  this.inv_buttons[INV.CORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CORD], 3);
  this.inv_buttons[INV.CORD].id = INV.CORD;
  this.inv_buttons[INV.CORD].info.img[2] = this.inv_buttons[INV.CORD].info.img[0];
  this.inv_buttons[INV.STONE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_WALL], 3);
  this.inv_buttons[INV.STONE_WALL].id = INV.STONE_WALL;
  this.inv_buttons[INV.GOLD_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_WALL], 3);
  this.inv_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL;
  this.inv_buttons[INV.DIAMOND_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_WALL], 3);
  this.inv_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL;
  this.inv_buttons[INV.WOOD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_WOOD_CLOSE], 3);
  this.inv_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR;
  this.inv_buttons[INV.CHEST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CHEST], 3);
  this.inv_buttons[INV.CHEST].id = INV.CHEST;
  this.inv_buttons[INV.STONE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_SPIKE], 3);
  this.inv_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE;
  this.inv_buttons[INV.GOLD_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SPIKE], 3);
  this.inv_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE;
  this.inv_buttons[INV.DIAMOND_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPIKE], 3);
  this.inv_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE;
  this.inv_buttons[INV.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BAG], 3);
  this.inv_buttons[INV.BAG].id = INV.BAG;
  this.inv_buttons[INV.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3);
  this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
  this.inv_buttons[INV.STONE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_STONE_CLOSE], 3);
  this.inv_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR;
  this.inv_buttons[INV.GOLD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_GOLD_CLOSE], 3);
  this.inv_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR;
  this.inv_buttons[INV.DIAMOND_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE], 3);
  this.inv_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR;
  this.inv_buttons[INV.FUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR], 3);
  this.inv_buttons[INV.FUR].id = INV.FUR;
  this.inv_buttons[INV.FUR].info.img[2] = this.inv_buttons[INV.FUR].info.img[0];
  this.inv_buttons[INV.FUR_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_BOAR], 3);
  this.inv_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR;
  this.inv_buttons[INV.FUR_BOAR].info.img[2] = this.inv_buttons[INV.FUR_BOAR].info.img[0];
  this.inv_buttons[INV.FUR_WOLF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_WOLF], 3);
  this.inv_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF;
  this.inv_buttons[INV.FUR_WOLF].info.img[2] = this.inv_buttons[INV.FUR_WOLF].info.img[0];
  this.inv_buttons[INV.PENGUIN_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PENGUIN_FEATHER], 3);
  this.inv_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER;
  this.inv_buttons[INV.HAWK_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAWK_FEATHER], 3);
  this.inv_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER;
  this.inv_buttons[INV.VULTURE_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_VULTURE_FEATHER], 3);
  this.inv_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER;
  this.inv_buttons[INV.EMERALD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EMERALD], 3);
  this.inv_buttons[INV.EMERALD].id = INV.EMERALD;
  this.inv_buttons[INV.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3);
  this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
  this.inv_buttons[INV.COAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COAT], 3);
  this.inv_buttons[INV.COAT].id = INV.COAT;
  this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3);
  this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.inv_buttons[INV.SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPEAR], 3);
  this.inv_buttons[INV.SPEAR].id = INV.SPEAR;
  this.inv_buttons[INV.GOLD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SPEAR], 3);
  this.inv_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR;
  this.inv_buttons[INV.DIAMOND_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPEAR], 3);
  this.inv_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR;
  this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3);
  this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.inv_buttons[INV.FURNACE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FURNACE], 3);
  this.inv_buttons[INV.FURNACE].id = INV.FURNACE;
  this.inv_buttons[INV.EXPLORER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXPLORER_HAT], 3);
  this.inv_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT;
  this.inv_buttons[INV.PIRATE_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PIRATE_HAT], 3);
  this.inv_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT;
  this.inv_buttons[INV.FLOWER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLOWER_HAT], 3);
  this.inv_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT;
  this.inv_buttons[INV.FUR_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_HAT], 3);
  this.inv_buttons[INV.FUR_HAT].id = INV.FUR_HAT;
  this.inv_buttons[INV.TURBAN1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TURBAN1], 3);
  this.inv_buttons[INV.TURBAN1].id = INV.TURBAN1;
  this.inv_buttons[INV.TURBAN2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TURBAN2], 3);
  this.inv_buttons[INV.TURBAN2].id = INV.TURBAN2;
  this.inv_buttons[INV.WOOD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_BOW], 3);
  this.inv_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW;
  this.inv_buttons[INV.WOOD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_ARROW], 3);
  this.inv_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW;
  this.inv_buttons[INV.WOOD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SHIELD], 3);
  this.inv_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD;
  this.inv_buttons[INV.STONE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_BOW], 3);
  this.inv_buttons[INV.STONE_BOW].id = INV.STONE_BOW;
  this.inv_buttons[INV.STONE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_ARROW], 3);
  this.inv_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW;
  this.inv_buttons[INV.STONE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_SHIELD], 3);
  this.inv_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD;
  this.inv_buttons[INV.GOLD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_BOW], 3);
  this.inv_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW;
  this.inv_buttons[INV.GOLD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_ARROW], 3);
  this.inv_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW;
  this.inv_buttons[INV.GOLD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SHIELD], 3);
  this.inv_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD;
  this.inv_buttons[INV.DIAMOND_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_BOW], 3);
  this.inv_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW;
  this.inv_buttons[INV.DIAMOND_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_ARROW], 3);
  this.inv_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW;
  this.inv_buttons[INV.DIAMOND_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SHIELD], 3);
  this.inv_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD;
  this.inv_buttons[INV.AMETHYST_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_BOW], 3);
  this.inv_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW;
  this.inv_buttons[INV.AMETHYST_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_ARROW], 3);
  this.inv_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW;
  this.inv_buttons[INV.AMETHYST_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SHIELD], 3);
  this.inv_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD;
  this.inv_buttons[INV.REIDITE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_BOW], 3);
  this.inv_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW;
  this.inv_buttons[INV.REIDITE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_ARROW], 3);
  this.inv_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW;
  this.inv_buttons[INV.REIDITE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SHIELD], 3);
  this.inv_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD;
  this.inv_buttons[INV.DRAGON_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_BOW], 3);
  this.inv_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW;
  this.inv_buttons[INV.DRAGON_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_ARROW], 3);
  this.inv_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW;
  this.inv_buttons[INV.WOOD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_HELMET], 3);
  this.inv_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET;
  this.inv_buttons[INV.STONE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_HELMET], 3);
  this.inv_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET;
  this.inv_buttons[INV.GOLD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_HELMET], 3);
  this.inv_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET;
  this.inv_buttons[INV.DIAMOND_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_HELMET], 3);
  this.inv_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET;
  this.inv_buttons[INV.BOOK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOOK], 3);
  this.inv_buttons[INV.BOOK].id = INV.BOOK;
  this.inv_buttons[INV.PAPER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PAPER], 3);
  this.inv_buttons[INV.PAPER].id = INV.PAPER;
  this.inv_buttons[INV.PAPER].info.img[2] = this.inv_buttons[INV.PAPER].info.img[0];
  this.inv_buttons[INV.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BAG], 3);
  this.inv_buttons[INV.BAG].id = INV.BAG;
  this.inv_buttons[INV.AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST], 3);
  this.inv_buttons[INV.AMETHYST].id = INV.AMETHYST;
  this.inv_buttons[INV.AMETHYST].info.img[2] = this.inv_buttons[INV.AMETHYST].info.img[0];
  this.inv_buttons[INV.SWORD_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_AMETHYST], 3);
  this.inv_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST;
  this.inv_buttons[INV.PIRATE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PIRATE_SWORD], 3);
  this.inv_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD;
  this.inv_buttons[INV.PICK_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_AMETHYST], 3);
  this.inv_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST;
  this.inv_buttons[INV.PICK_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_REIDITE], 3);
  this.inv_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE;
  this.inv_buttons[INV.AMETHYST_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPEAR], 3);
  this.inv_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR;
  this.inv_buttons[INV.HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER], 3);
  this.inv_buttons[INV.HAMMER].id = INV.HAMMER;
  this.inv_buttons[INV.HAMMER_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_GOLD], 3);
  this.inv_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD;
  this.inv_buttons[INV.HAMMER_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_DIAMOND], 3);
  this.inv_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND;
  this.inv_buttons[INV.HAMMER_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_AMETHYST], 3);
  this.inv_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST;
  this.inv_buttons[INV.HAMMER_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_REIDITE], 3);
  this.inv_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE;
  this.inv_buttons[INV.AMETHYST_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_WALL], 3);
  this.inv_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL;
  this.inv_buttons[INV.AMETHYST_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPIKE], 3);
  this.inv_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE;
  this.inv_buttons[INV.AMETHYST_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE], 3);
  this.inv_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR;
  this.inv_buttons[INV.CAP_SCARF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CAP_SCARF], 3);
  this.inv_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF;
  this.inv_buttons[INV.FUR_WINTER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_WINTER], 3);
  this.inv_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER;
  this.inv_buttons[INV.FUR_WINTER].info.img[2] = this.inv_buttons[INV.FUR_WINTER].info.img[0];
  this.inv_buttons[INV.FUR_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_MAMMOTH], 3);
  this.inv_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH;
  this.inv_buttons[INV.FUR_MAMMOTH].info.img[2] = this.inv_buttons[INV.FUR_MAMMOTH].info.img[0];
  this.inv_buttons[INV.BLUE_CORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BLUE_CORD], 3);
  this.inv_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD;
  this.inv_buttons[INV.BLUE_CORD].info.img[2] = this.inv_buttons[INV.BLUE_CORD].info.img[0];
  this.inv_buttons[INV.LOCK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LOCK], 3);
  this.inv_buttons[INV.LOCK].id = INV.LOCK;
  this.inv_buttons[INV.LOCK].info.img[2] = this.inv_buttons[INV.LOCK].info.img[0];
  this.inv_buttons[INV.DRAGON_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_HEART], 3);
  this.inv_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART;
  this.inv_buttons[INV.LAVA_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3);
  this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.inv_buttons[INV.RESURRECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_RESURRECTION], 3);
  this.inv_buttons[INV.RESURRECTION].id = INV.RESURRECTION;
  this.inv_buttons[INV.LOCKPICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LOCKPICK], 3);
  this.inv_buttons[INV.LOCKPICK].id = INV.LOCKPICK;
  this.inv_buttons[INV.TOTEM] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOTEM], 3);
  this.inv_buttons[INV.TOTEM].id = INV.TOTEM;
  this.inv_buttons[INV.AMETHYST_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_HELMET], 3);
  this.inv_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET;
  this.inv_buttons[INV.SUPER_HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUPER_HAMMER], 3);
  this.inv_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER;
  this.inv_buttons[INV.BRIDGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BRIDGE], 3);
  this.inv_buttons[INV.BRIDGE].id = INV.BRIDGE;
  this.inv_buttons[INV.WOOD_TOWER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_TOWER], 3);
  this.inv_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER;
  this.inv_buttons[INV.BOAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOAT], 3);
  this.inv_buttons[INV.BOAT].id = INV.BOAT;
  this.inv_buttons[INV.SLED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SLED], 3);
  this.inv_buttons[INV.SLED].id = INV.SLED;
  this.inv_buttons[INV.PLANE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLANE], 3);
  this.inv_buttons[INV.PLANE].id = INV.PLANE;
  this.inv_buttons[INV.SADDLE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SADDLE], 3);
  this.inv_buttons[INV.SADDLE].id = INV.SADDLE;
  this.inv_buttons[INV.MOUNT_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MOUNT_BOAR], 3);
  this.inv_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR;
  this.inv_buttons[INV.CRAB_BOSS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_BOSS], 3);
  this.inv_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS;
  this.inv_buttons[INV.BABY_DRAGON] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_DRAGON], 3);
  this.inv_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON;
  this.inv_buttons[INV.BABY_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_MAMMOTH], 3);
  this.inv_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH;
  this.inv_buttons[INV.BABY_LAVA] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_LAVA], 3);
  this.inv_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA;
  this.inv_buttons[INV.HAWK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAWK], 3);
  this.inv_buttons[INV.HAWK].id = INV.HAWK;
  this.inv_buttons[INV.SAND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SAND], 3);
  this.inv_buttons[INV.SAND].id = INV.SAND;
  this.inv_buttons[INV.SAND].info.img[2] = this.inv_buttons[INV.SAND].info.img[0];
  this.inv_buttons[INV.BOTTLE_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOTTLE_FULL], 3);
  this.inv_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL;
  this.inv_buttons[INV.BOTTLE_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOTTLE_EMPTY], 3);
  this.inv_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY;
  this.inv_buttons[INV.SHOVEL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL], 3);
  this.inv_buttons[INV.SHOVEL].id = INV.SHOVEL;
  this.inv_buttons[INV.SHOVEL_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_GOLD], 3);
  this.inv_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD;
  this.inv_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_DIAMOND], 3);
  this.inv_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND;
  this.inv_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_AMETHYST], 3);
  this.inv_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST;
  this.inv_buttons[INV.SPANNER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPANNER], 3);
  this.inv_buttons[INV.SPANNER].id = INV.SPANNER;
  this.inv_buttons[INV.KRAKEN_SKIN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_KRAKEN_SKIN], 3);
  this.inv_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN;
  this.inv_buttons[INV.KRAKEN_SKIN].info.img[2] = this.inv_buttons[INV.KRAKEN_SKIN].info.img[0];
  this.inv_buttons[INV.WATERING_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERING_CAN], 3);
  this.inv_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN;
  this.inv_buttons[INV.FLOUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLOUR], 3);
  this.inv_buttons[INV.FLOUR].id = INV.FLOUR;
  this.inv_buttons[INV.FLOUR].info.img[2] = this.inv_buttons[INV.FLOUR].info.img[0];
  this.inv_buttons[INV.WHEAT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WHEAT_SEED], 3);
  this.inv_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED;
  this.inv_buttons[INV.COOKIE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COOKIE], 3);
  this.inv_buttons[INV.COOKIE].id = INV.COOKIE;
  this.inv_buttons[INV.WILD_WHEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WILD_WHEAT], 3);
  this.inv_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT;
  this.inv_buttons[INV.WILD_WHEAT].info.img[2] = this.inv_buttons[INV.WILD_WHEAT].info.img[0];
  this.inv_buttons[INV.WINDMILL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINDMILL], 3);
  this.inv_buttons[INV.WINDMILL].id = INV.WINDMILL;
  this.inv_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUPER_DIVING_SUIT], 3);
  this.inv_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT;
  this.inv_buttons[INV.DIVING_MASK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIVING_MASK], 3);
  this.inv_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK;
  this.inv_buttons[INV.WATERING_CAN_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERING_CAN_FULL], 3);
  this.inv_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL;
  this.inv_buttons[INV.CAKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CAKE], 3);
  this.inv_buttons[INV.CAKE].id = INV.CAKE;
  this.inv_buttons[INV.BREAD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BREAD], 3);
  this.inv_buttons[INV.BREAD].id = INV.BREAD;
  this.inv_buttons[INV.FOODFISH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FOODFISH], 3);
  this.inv_buttons[INV.FOODFISH].id = INV.FOODFISH;
  this.inv_buttons[INV.FOODFISH_COOKED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FOODFISH_COOKED], 3);
  this.inv_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED;
  this.inv_buttons[INV.SCALES] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SCALES], 3);
  this.inv_buttons[INV.SCALES].id = INV.SCALES;
  this.inv_buttons[INV.SCALES].info.img[2] = this.inv_buttons[INV.SCALES].info.img[0];
  this.inv_buttons[INV.GROUND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GROUND], 3);
  this.inv_buttons[INV.GROUND].id = INV.GROUND;
  this.inv_buttons[INV.GROUND].info.img[2] = this.inv_buttons[INV.GROUND].info.img[0];
  this.inv_buttons[INV.PLOT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLOT], 3);
  this.inv_buttons[INV.PLOT].id = INV.PLOT;
  this.inv_buttons[INV.ICE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ICE], 3);
  this.inv_buttons[INV.ICE].id = INV.ICE;
  this.inv_buttons[INV.ICE].info.img[2] = this.inv_buttons[INV.ICE].info.img[0];
  this.inv_buttons[INV.BREAD_OVEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BREAD_OVEN], 3);
  this.inv_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN;
  this.inv_buttons[INV.SANDWICH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SANDWICH], 3);
  this.inv_buttons[INV.SANDWICH].id = INV.SANDWICH;
  this.inv_buttons[INV.DRAGON_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_HELMET], 3);
  this.inv_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET;
  this.inv_buttons[INV.DRAGON_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3);
  this.inv_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD;
  this.inv_buttons[INV.DRAGON_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_ORB], 3);
  this.inv_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB;
  this.inv_buttons[INV.DRAGON_ORB].info.img[2] = this.inv_buttons[INV.DRAGON_ORB].info.img[0];
  this.inv_buttons[INV.DRAGON_CUBE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_CUBE], 3);
  this.inv_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE;
  this.inv_buttons[INV.DRAGON_CUBE].info.img[2] = this.inv_buttons[INV.DRAGON_CUBE].info.img[0];
  this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3);
  this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
  this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3);
  this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
  this.inv_buttons[INV.LAVA_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3);
  this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.inv_buttons[INV.LAVA_ORB].info.img[2] = this.inv_buttons[INV.LAVA_ORB].info.img[0];
  this.inv_buttons[INV.LAVA_CUBE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_CUBE], 3);
  this.inv_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE;
  this.inv_buttons[INV.LAVA_CUBE].info.img[2] = this.inv_buttons[INV.LAVA_CUBE].info.img[0];
  this.inv_buttons[INV.CROWN_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_GREEN], 3);
  this.inv_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN;
  this.inv_buttons[INV.GEMME_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_GREEN], 3);
  this.inv_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN;
  this.inv_buttons[INV.GEMME_GREEN].info.img[2] = this.inv_buttons[INV.GEMME_GREEN].info.img[0];
  this.inv_buttons[INV.GEMME_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_ORANGE], 3);
  this.inv_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE;
  this.inv_buttons[INV.GEMME_ORANGE].info.img[2] = this.inv_buttons[INV.GEMME_ORANGE].info.img[0];
  this.inv_buttons[INV.CROWN_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_ORANGE], 3);
  this.inv_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE;
  this.inv_buttons[INV.GEMME_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_BLUE], 3);
  this.inv_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE;
  this.inv_buttons[INV.GEMME_BLUE].info.img[2] = this.inv_buttons[INV.GEMME_BLUE].info.img[0];
  this.inv_buttons[INV.CROWN_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_BLUE], 3);
  this.inv_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE;
  this.inv_buttons[INV.HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HOOD], 3);
  this.inv_buttons[INV.HOOD].id = INV.HOOD;
  this.inv_buttons[INV.PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PEASANT], 3);
  this.inv_buttons[INV.PEASANT].id = INV.PEASANT;
  this.inv_buttons[INV.SPECIAL_FUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR], 3);
  this.inv_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR;
  this.inv_buttons[INV.SPECIAL_FUR_2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR_2], 3);
  this.inv_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2;
  this.inv_buttons[INV.WINTER_PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINTER_PEASANT], 3);
  this.inv_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT;
  this.inv_buttons[INV.WINTER_HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINTER_HOOD], 3);
  this.inv_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD;
  this.inv_buttons[INV.BUCKET_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BUCKET_FULL], 3);
  this.inv_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL;
  this.inv_buttons[INV.BUCKET_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BUCKET_EMPTY], 3);
  this.inv_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY;
  this.inv_buttons[INV.WELL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WELL], 3);
  this.inv_buttons[INV.WELL].id = INV.WELL;
  this.inv_buttons[INV.SIGN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SIGN], 3);
  this.inv_buttons[INV.SIGN].id = INV.SIGN;
  this.inv_buttons[INV.PUMPKIN_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PUMPKIN_SEED], 3);
  this.inv_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED;
  this.inv_buttons[INV.PUMPKIN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PUMPKIN], 3);
  this.inv_buttons[INV.PUMPKIN].id = INV.PUMPKIN;
  this.inv_buttons[INV.GARLIC_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLIC_SEED], 3);
  this.inv_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED;
  this.inv_buttons[INV.GARLIC] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLIC], 3);
  this.inv_buttons[INV.GARLIC].id = INV.GARLIC;
  this.inv_buttons[INV.ROOF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ROOF], 3);
  this.inv_buttons[INV.ROOF].id = INV.ROOF;
  this.inv_buttons[INV.THORNBUSH_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_THORNBUSH_SEED], 3);
  this.inv_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED;
  this.inv_buttons[INV.THORNBUSH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_THORNBUSH], 3);
  this.inv_buttons[INV.THORNBUSH].id = INV.THORNBUSH;
  this.inv_buttons[INV.CARROT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CARROT_SEED], 3);
  this.inv_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED;
  this.inv_buttons[INV.CARROT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CARROT], 3);
  this.inv_buttons[INV.CARROT].id = INV.CARROT;
  this.inv_buttons[INV.TOMATO_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOMATO_SEED], 3);
  this.inv_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED;
  this.inv_buttons[INV.TOMATO] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOMATO], 3);
  this.inv_buttons[INV.TOMATO].id = INV.TOMATO;
  this.inv_buttons[INV.WATERMELON_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERMELON_SEED], 3);
  this.inv_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED;
  this.inv_buttons[INV.WATERMELON] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERMELON], 3);
  this.inv_buttons[INV.WATERMELON].id = INV.WATERMELON;
  this.inv_buttons[INV.ALOE_VERA_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ALOE_VERA_SEED], 3);
  this.inv_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED;
  this.inv_buttons[INV.ALOE_VERA] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ALOE_VERA], 3);
  this.inv_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA;
  this.inv_buttons[INV.CHRISTMAS_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CHRISTMAS_HAT], 3);
  this.inv_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT;
  this.inv_buttons[INV.ELF_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ELF_HAT], 3);
  this.inv_buttons[INV.ELF_HAT].id = INV.ELF_HAT;
  this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3);
  this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3);
  this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.inv_buttons[INV.CRAB_STICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_STICK], 3);
  this.inv_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK;
  this.inv_buttons[INV.CRAB_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_SPEAR], 3);
  this.inv_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR;
  this.inv_buttons[INV.CRAB_LOOT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_LOOT], 3);
  this.inv_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT;
  this.inv_buttons[INV.BED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BED], 3);
  this.inv_buttons[INV.BED].id = INV.BED;
  this.inv_buttons[INV.CROWN_CRAB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_CRAB], 3);
  this.inv_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB;
  this.inv_buttons[INV.GARLAND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLAND], 3);
  this.inv_buttons[INV.GARLAND].id = INV.GARLAND;
  this.inv_buttons[INV.CANDY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CANDY], 3);
  this.inv_buttons[INV.CANDY].id = INV.CANDY;
  this.inv_buttons[INV.SUGAR_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUGAR_CAN], 3);
  this.inv_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN;
  this.craft_buttons = [];
  this.craft_buttons[CRAFT.SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD], 3);
  this.craft_buttons[CRAFT.SWORD].id = CRAFT.SWORD;
  this.craft_buttons[CRAFT.PICK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK], 3);
  this.craft_buttons[CRAFT.PICK].id = CRAFT.PICK;
  this.craft_buttons[CRAFT.FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FIRE], 3);
  this.craft_buttons[CRAFT.FIRE].id = CRAFT.FIRE;
  this.craft_buttons[CRAFT.WORKBENCH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WORK], 3);
  this.craft_buttons[CRAFT.WORKBENCH].id = CRAFT.WORKBENCH;
  this.craft_buttons[CRAFT.WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WALL], 3);
  this.craft_buttons[CRAFT.WALL].id = CRAFT.WALL;
  this.craft_buttons[CRAFT.SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPIKE], 3);
  this.craft_buttons[CRAFT.SPIKE].id = CRAFT.SPIKE;
  this.craft_buttons[CRAFT.SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SEED], 3);
  this.craft_buttons[CRAFT.SEED].id = CRAFT.SEED;
  this.craft_buttons[CRAFT.PICK_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_GOLD], 3);
  this.craft_buttons[CRAFT.PICK_GOLD].id = CRAFT.PICK_GOLD;
  this.craft_buttons[CRAFT.PICK_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_DIAMOND], 3);
  this.craft_buttons[CRAFT.PICK_DIAMOND].id = CRAFT.PICK_DIAMOND;
  this.craft_buttons[CRAFT.SWORD_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_GOLD], 3);
  this.craft_buttons[CRAFT.SWORD_GOLD].id = CRAFT.SWORD_GOLD;
  this.craft_buttons[CRAFT.SWORD_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_WOOD], 3);
  this.craft_buttons[CRAFT.SWORD_WOOD].id = CRAFT.SWORD_WOOD;
  this.craft_buttons[CRAFT.SWORD_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_DIAMOND], 3);
  this.craft_buttons[CRAFT.SWORD_DIAMOND].id = CRAFT.SWORD_DIAMOND;
  this.craft_buttons[CRAFT.PICK_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_WOOD], 3);
  this.craft_buttons[CRAFT.PICK_WOOD].id = CRAFT.PICK_WOOD;
  this.craft_buttons[CRAFT.COOKED_MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COOKED_MEAT], 3);
  this.craft_buttons[CRAFT.COOKED_MEAT].id = CRAFT.COOKED_MEAT;
  this.craft_buttons[CRAFT.BIG_FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BIG_FIRE], 3);
  this.craft_buttons[CRAFT.BIG_FIRE].id = CRAFT.BIG_FIRE;
  this.craft_buttons[CRAFT.BANDAGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BANDAGE], 3);
  this.craft_buttons[CRAFT.BANDAGE].id = CRAFT.BANDAGE;
  this.craft_buttons[CRAFT.STONE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_WALL], 3);
  this.craft_buttons[CRAFT.STONE_WALL].id = CRAFT.STONE_WALL;
  this.craft_buttons[CRAFT.GOLD_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_WALL], 3);
  this.craft_buttons[CRAFT.GOLD_WALL].id = CRAFT.GOLD_WALL;
  this.craft_buttons[CRAFT.DIAMOND_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_WALL], 3);
  this.craft_buttons[CRAFT.DIAMOND_WALL].id = CRAFT.DIAMOND_WALL;
  this.craft_buttons[CRAFT.WOOD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE], 3);
  this.craft_buttons[CRAFT.WOOD_DOOR].id = CRAFT.WOOD_DOOR;
  this.craft_buttons[CRAFT.CHEST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CHEST], 3);
  this.craft_buttons[CRAFT.CHEST].id = CRAFT.CHEST;
  this.craft_buttons[CRAFT.STONE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_SPIKE], 3);
  this.craft_buttons[CRAFT.STONE_SPIKE].id = CRAFT.STONE_SPIKE;
  this.craft_buttons[CRAFT.GOLD_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPIKE], 3);
  this.craft_buttons[CRAFT.GOLD_SPIKE].id = CRAFT.GOLD_SPIKE;
  this.craft_buttons[CRAFT.DIAMOND_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPIKE], 3);
  this.craft_buttons[CRAFT.DIAMOND_SPIKE].id = CRAFT.DIAMOND_SPIKE;
  this.craft_buttons[CRAFT.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3);
  this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG;
  this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3);
  this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS;
  this.craft_buttons[CRAFT.STONE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE], 3);
  this.craft_buttons[CRAFT.STONE_DOOR].id = CRAFT.STONE_DOOR;
  this.craft_buttons[CRAFT.GOLD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE], 3);
  this.craft_buttons[CRAFT.GOLD_DOOR].id = CRAFT.GOLD_DOOR;
  this.craft_buttons[CRAFT.DIAMOND_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE], 3);
  this.craft_buttons[CRAFT.DIAMOND_DOOR].id = CRAFT.DIAMOND_DOOR;
  this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3);
  this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS;
  this.craft_buttons[CRAFT.COAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COAT], 3);
  this.craft_buttons[CRAFT.COAT].id = CRAFT.COAT;
  this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3);
  this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR;
  this.craft_buttons[CRAFT.SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPEAR], 3);
  this.craft_buttons[CRAFT.SPEAR].id = CRAFT.SPEAR;
  this.craft_buttons[CRAFT.GOLD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPEAR], 3);
  this.craft_buttons[CRAFT.GOLD_SPEAR].id = CRAFT.GOLD_SPEAR;
  this.craft_buttons[CRAFT.DIAMOND_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPEAR], 3);
  this.craft_buttons[CRAFT.DIAMOND_SPEAR].id = CRAFT.DIAMOND_SPEAR;
  this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3);
  this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR;
  this.craft_buttons[CRAFT.FURNACE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FURNACE], 3);
  this.craft_buttons[CRAFT.FURNACE].id = CRAFT.FURNACE;
  this.craft_buttons[CRAFT.EXPLORER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXPLORER_HAT], 3);
  this.craft_buttons[CRAFT.EXPLORER_HAT].id = CRAFT.EXPLORER_HAT;
  this.craft_buttons[CRAFT.PIRATE_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_HAT], 3);
  this.craft_buttons[CRAFT.PIRATE_HAT].id = CRAFT.PIRATE_HAT;
  this.craft_buttons[CRAFT.FLOWER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FLOWER_HAT], 3);
  this.craft_buttons[CRAFT.FLOWER_HAT].id = CRAFT.FLOWER_HAT;
  this.craft_buttons[CRAFT.FUR_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FUR_HAT], 3);
  this.craft_buttons[CRAFT.FUR_HAT].id = CRAFT.FUR_HAT;
  this.craft_buttons[CRAFT.TURBAN1] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TURBAN1], 3);
  this.craft_buttons[CRAFT.TURBAN1].id = CRAFT.TURBAN1;
  this.craft_buttons[CRAFT.TURBAN2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TURBAN2], 3);
  this.craft_buttons[CRAFT.TURBAN2].id = CRAFT.TURBAN2;
  this.craft_buttons[CRAFT.WOOD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_BOW], 3);
  this.craft_buttons[CRAFT.WOOD_BOW].id = CRAFT.WOOD_BOW;
  this.craft_buttons[CRAFT.WOOD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_ARROW], 3);
  this.craft_buttons[CRAFT.WOOD_ARROW].id = CRAFT.WOOD_ARROW;
  this.craft_buttons[CRAFT.WOOD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SHIELD], 3);
  this.craft_buttons[CRAFT.WOOD_SHIELD].id = CRAFT.WOOD_SHIELD;
  this.craft_buttons[CRAFT.STONE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_BOW], 3);
  this.craft_buttons[CRAFT.STONE_BOW].id = CRAFT.STONE_BOW;
  this.craft_buttons[CRAFT.STONE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_ARROW], 3);
  this.craft_buttons[CRAFT.STONE_ARROW].id = CRAFT.STONE_ARROW;
  this.craft_buttons[CRAFT.STONE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_SHIELD], 3);
  this.craft_buttons[CRAFT.STONE_SHIELD].id = CRAFT.STONE_SHIELD;
  this.craft_buttons[CRAFT.GOLD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_BOW], 3);
  this.craft_buttons[CRAFT.GOLD_BOW].id = CRAFT.GOLD_BOW;
  this.craft_buttons[CRAFT.GOLD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_ARROW], 3);
  this.craft_buttons[CRAFT.GOLD_ARROW].id = CRAFT.GOLD_ARROW;
  this.craft_buttons[CRAFT.GOLD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SHIELD], 3);
  this.craft_buttons[CRAFT.GOLD_SHIELD].id = CRAFT.GOLD_SHIELD;
  this.craft_buttons[CRAFT.DIAMOND_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_BOW], 3);
  this.craft_buttons[CRAFT.DIAMOND_BOW].id = CRAFT.DIAMOND_BOW;
  this.craft_buttons[CRAFT.DIAMOND_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_ARROW], 3);
  this.craft_buttons[CRAFT.DIAMOND_ARROW].id = CRAFT.DIAMOND_ARROW;
  this.craft_buttons[CRAFT.DIAMOND_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SHIELD], 3);
  this.craft_buttons[CRAFT.DIAMOND_SHIELD].id = CRAFT.DIAMOND_SHIELD;
  this.craft_buttons[CRAFT.AMETHYST_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_BOW], 3);
  this.craft_buttons[CRAFT.AMETHYST_BOW].id = CRAFT.AMETHYST_BOW;
  this.craft_buttons[CRAFT.AMETHYST_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_ARROW], 3);
  this.craft_buttons[CRAFT.AMETHYST_ARROW].id = CRAFT.AMETHYST_ARROW;
  this.craft_buttons[CRAFT.AMETHYST_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SHIELD], 3);
  this.craft_buttons[CRAFT.AMETHYST_SHIELD].id = CRAFT.AMETHYST_SHIELD;
  this.craft_buttons[CRAFT.REIDITE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_BOW], 3);
  this.craft_buttons[CRAFT.REIDITE_BOW].id = CRAFT.REIDITE_BOW;
  this.craft_buttons[CRAFT.REIDITE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_ARROW], 3);
  this.craft_buttons[CRAFT.REIDITE_ARROW].id = CRAFT.REIDITE_ARROW;
  this.craft_buttons[CRAFT.REIDITE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SHIELD], 3);
  this.craft_buttons[CRAFT.REIDITE_SHIELD].id = CRAFT.REIDITE_SHIELD;
  this.craft_buttons[CRAFT.DRAGON_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_BOW], 3);
  this.craft_buttons[CRAFT.DRAGON_BOW].id = CRAFT.DRAGON_BOW;
  this.craft_buttons[CRAFT.DRAGON_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_ARROW], 3);
  this.craft_buttons[CRAFT.DRAGON_ARROW].id = CRAFT.DRAGON_ARROW;
  this.craft_buttons[CRAFT.WOOD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_HELMET], 3);
  this.craft_buttons[CRAFT.WOOD_HELMET].id = CRAFT.WOOD_HELMET;
  this.craft_buttons[CRAFT.STONE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_HELMET], 3);
  this.craft_buttons[CRAFT.STONE_HELMET].id = CRAFT.STONE_HELMET;
  this.craft_buttons[CRAFT.GOLD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_HELMET], 3);
  this.craft_buttons[CRAFT.GOLD_HELMET].id = CRAFT.GOLD_HELMET;
  this.craft_buttons[CRAFT.DIAMOND_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_HELMET], 3);
  this.craft_buttons[CRAFT.DIAMOND_HELMET].id = CRAFT.DIAMOND_HELMET;
  this.craft_buttons[CRAFT.BOOK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOOK], 3);
  this.craft_buttons[CRAFT.BOOK].id = CRAFT.BOOK;
  this.craft_buttons[CRAFT.PAPER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PAPER], 3);
  this.craft_buttons[CRAFT.PAPER].id = CRAFT.PAPER;
  this.craft_buttons[CRAFT.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3);
  this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG;
  this.craft_buttons[CRAFT.SWORD_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_AMETHYST], 3);
  this.craft_buttons[CRAFT.SWORD_AMETHYST].id = CRAFT.SWORD_AMETHYST;
  this.craft_buttons[CRAFT.PIRATE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_SWORD], 3);
  this.craft_buttons[CRAFT.PIRATE_SWORD].id = CRAFT.PIRATE_SWORD;
  this.craft_buttons[CRAFT.PICK_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_AMETHYST], 3);
  this.craft_buttons[CRAFT.PICK_AMETHYST].id = CRAFT.PICK_AMETHYST;
  this.craft_buttons[CRAFT.PICK_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_REIDITE], 3);
  this.craft_buttons[CRAFT.PICK_REIDITE].id = CRAFT.PICK_REIDITE;
  this.craft_buttons[CRAFT.AMETHYST_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPEAR], 3);
  this.craft_buttons[CRAFT.AMETHYST_SPEAR].id = CRAFT.AMETHYST_SPEAR;
  this.craft_buttons[CRAFT.HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER], 3);
  this.craft_buttons[CRAFT.HAMMER].id = CRAFT.HAMMER;
  this.craft_buttons[CRAFT.HAMMER_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_GOLD], 3);
  this.craft_buttons[CRAFT.HAMMER_GOLD].id = CRAFT.HAMMER_GOLD;
  this.craft_buttons[CRAFT.HAMMER_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_DIAMOND], 3);
  this.craft_buttons[CRAFT.HAMMER_DIAMOND].id = CRAFT.HAMMER_DIAMOND;
  this.craft_buttons[CRAFT.HAMMER_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_AMETHYST], 3);
  this.craft_buttons[CRAFT.HAMMER_AMETHYST].id = CRAFT.HAMMER_AMETHYST;
  this.craft_buttons[CRAFT.HAMMER_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_REIDITE], 3);
  this.craft_buttons[CRAFT.HAMMER_REIDITE].id = CRAFT.HAMMER_REIDITE;
  this.craft_buttons[CRAFT.AMETHYST_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_WALL], 3);
  this.craft_buttons[CRAFT.AMETHYST_WALL].id = CRAFT.AMETHYST_WALL;
  this.craft_buttons[CRAFT.AMETHYST_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPIKE], 3);
  this.craft_buttons[CRAFT.AMETHYST_SPIKE].id = CRAFT.AMETHYST_SPIKE;
  this.craft_buttons[CRAFT.AMETHYST_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE], 3);
  this.craft_buttons[CRAFT.AMETHYST_DOOR].id = CRAFT.AMETHYST_DOOR;
  this.craft_buttons[CRAFT.CAP_SCARF] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CAP_SCARF], 3);
  this.craft_buttons[CRAFT.CAP_SCARF].id = CRAFT.CAP_SCARF;
  this.craft_buttons[CRAFT.BLUE_CORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BLUE_CORD], 3);
  this.craft_buttons[CRAFT.BLUE_CORD].id = CRAFT.BLUE_CORD;
  this.craft_buttons[CRAFT.LOCK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LOCK], 3);
  this.craft_buttons[CRAFT.LOCK].id = CRAFT.LOCK;
  this.craft_buttons[CRAFT.RESURRECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_RESURRECTION], 3);
  this.craft_buttons[CRAFT.RESURRECTION].id = CRAFT.RESURRECTION;
  this.craft_buttons[CRAFT.LOCKPICK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LOCKPICK], 3);
  this.craft_buttons[CRAFT.LOCKPICK].id = CRAFT.LOCKPICK;
  this.craft_buttons[CRAFT.TOTEM] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TOTEM], 3);
  this.craft_buttons[CRAFT.TOTEM].id = CRAFT.TOTEM;
  this.craft_buttons[CRAFT.AMETHYST_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_HELMET], 3);
  this.craft_buttons[CRAFT.AMETHYST_HELMET].id = CRAFT.AMETHYST_HELMET;
  this.craft_buttons[CRAFT.SUPER_HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SUPER_HAMMER], 3);
  this.craft_buttons[CRAFT.SUPER_HAMMER].id = CRAFT.SUPER_HAMMER;
  this.craft_buttons[CRAFT.BRIDGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BRIDGE], 3);
  this.craft_buttons[CRAFT.BRIDGE].id = CRAFT.BRIDGE;
  this.craft_buttons[CRAFT.WOOD_TOWER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_TOWER], 3);
  this.craft_buttons[CRAFT.WOOD_TOWER].id = CRAFT.WOOD_TOWER;
  this.craft_buttons[CRAFT.BOAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOAT], 3);
  this.craft_buttons[CRAFT.BOAT].id = CRAFT.BOAT;
  this.craft_buttons[CRAFT.SLED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SLED], 3);
  this.craft_buttons[CRAFT.SLED].id = CRAFT.SLED;
  this.craft_buttons[CRAFT.PLANE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PLANE], 3);
  this.craft_buttons[CRAFT.PLANE].id = CRAFT.PLANE;
  this.craft_buttons[CRAFT.SADDLE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SADDLE], 3);
  this.craft_buttons[CRAFT.SADDLE].id = CRAFT.SADDLE;
  this.craft_buttons[CRAFT.MOUNT_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_MOUNT_BOAR], 3);
  this.craft_buttons[CRAFT.MOUNT_BOAR].id = CRAFT.MOUNT_BOAR;
  this.craft_buttons[CRAFT.BABY_DRAGON] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BABY_DRAGON], 3);
  this.craft_buttons[CRAFT.BABY_DRAGON].id = CRAFT.BABY_DRAGON;
  this.craft_buttons[CRAFT.BABY_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BABY_MAMMOTH], 3);
  this.craft_buttons[CRAFT.BABY_MAMMOTH].id = CRAFT.BABY_MAMMOTH;
  this.craft_buttons[CRAFT.CRAB_BOSS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CRAB_BOSS], 3);
  this.craft_buttons[CRAFT.CRAB_BOSS].id = CRAFT.CRAB_BOSS;
  this.craft_buttons[CRAFT.BOTTLE_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_EMPTY], 3);
  this.craft_buttons[CRAFT.BOTTLE_EMPTY].id = CRAFT.BOTTLE_EMPTY;
  this.craft_buttons[CRAFT.BOTTLE_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3);
  this.craft_buttons[CRAFT.BOTTLE_FULL].id = CRAFT.BOTTLE_FULL;
  this.craft_buttons[CRAFT.BOTTLE_FULL_2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3);
  this.craft_buttons[CRAFT.BOTTLE_FULL_2].id = CRAFT.BOTTLE_FULL_2;
  this.craft_buttons[CRAFT.BOTTLE_FULL_3] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3);
  this.craft_buttons[CRAFT.BOTTLE_FULL_3].id = CRAFT.BOTTLE_FULL_3;
  this.craft_buttons[CRAFT.SHOVEL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL], 3);
  this.craft_buttons[CRAFT.SHOVEL].id = CRAFT.SHOVEL;
  this.craft_buttons[CRAFT.SHOVEL_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_GOLD], 3);
  this.craft_buttons[CRAFT.SHOVEL_GOLD].id = CRAFT.SHOVEL_GOLD;
  this.craft_buttons[CRAFT.SHOVEL_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_DIAMOND], 3);
  this.craft_buttons[CRAFT.SHOVEL_DIAMOND].id = CRAFT.SHOVEL_DIAMOND;
  this.craft_buttons[CRAFT.SHOVEL_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_AMETHYST], 3);
  this.craft_buttons[CRAFT.SHOVEL_AMETHYST].id = CRAFT.SHOVEL_AMETHYST;
  this.craft_buttons[CRAFT.SPANNER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPANNER], 3);
  this.craft_buttons[CRAFT.SPANNER].id = CRAFT.SPANNER;
  this.craft_buttons[CRAFT.WATERING_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN], 3);
  this.craft_buttons[CRAFT.WATERING_CAN].id = CRAFT.WATERING_CAN;
  this.craft_buttons[CRAFT.WHEAT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WHEAT_SEED], 3);
  this.craft_buttons[CRAFT.WHEAT_SEED].id = CRAFT.WHEAT_SEED;
  this.craft_buttons[CRAFT.COOKIE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COOKIE], 3);
  this.craft_buttons[CRAFT.COOKIE].id = CRAFT.COOKIE;
  this.craft_buttons[CRAFT.WINDMILL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINDMILL], 3);
  this.craft_buttons[CRAFT.WINDMILL].id = CRAFT.WINDMILL;
  this.craft_buttons[CRAFT.SUPER_DIVING_SUIT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT], 3);
  this.craft_buttons[CRAFT.SUPER_DIVING_SUIT].id = CRAFT.SUPER_DIVING_SUIT;
  this.craft_buttons[CRAFT.DIVING_MASK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIVING_MASK], 3);
  this.craft_buttons[CRAFT.DIVING_MASK].id = CRAFT.DIVING_MASK;
  this.craft_buttons[CRAFT.WATERING_CAN_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN_FULL], 3);
  this.craft_buttons[CRAFT.WATERING_CAN_FULL].id = CRAFT.WATERING_CAN_FULL;
  this.craft_buttons[CRAFT.CAKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CAKE], 3);
  this.craft_buttons[CRAFT.CAKE].id = CRAFT.CAKE;
  this.craft_buttons[CRAFT.BREAD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BREAD], 3);
  this.craft_buttons[CRAFT.BREAD].id = CRAFT.BREAD;
  this.craft_buttons[CRAFT.FOODFISH_COOKED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FOODFISH_COOKED], 3);
  this.craft_buttons[CRAFT.FOODFISH_COOKED].id = CRAFT.FOODFISH_COOKED;
  this.craft_buttons[CRAFT.PLOT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PLOT], 3);
  this.craft_buttons[CRAFT.PLOT].id = CRAFT.PLOT;
  this.craft_buttons[CRAFT.BREAD_OVEN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BREAD_OVEN], 3);
  this.craft_buttons[CRAFT.BREAD_OVEN].id = CRAFT.BREAD_OVEN;
  this.craft_buttons[CRAFT.SANDWICH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SANDWICH], 3);
  this.craft_buttons[CRAFT.SANDWICH].id = CRAFT.SANDWICH;
  this.craft_buttons[CRAFT.DRAGON_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_HELMET], 3);
  this.craft_buttons[CRAFT.DRAGON_HELMET].id = CRAFT.DRAGON_HELMET;
  this.craft_buttons[CRAFT.DRAGON_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3);
  this.craft_buttons[CRAFT.DRAGON_SWORD].id = CRAFT.DRAGON_SWORD;
  this.craft_buttons[CRAFT.CROWN_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_GREEN], 3);
  this.craft_buttons[CRAFT.CROWN_GREEN].id = CRAFT.CROWN_GREEN;
  this.craft_buttons[CRAFT.CROWN_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_ORANGE], 3);
  this.craft_buttons[CRAFT.CROWN_ORANGE].id = CRAFT.CROWN_ORANGE;
  this.craft_buttons[CRAFT.CROWN_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_BLUE], 3);
  this.craft_buttons[CRAFT.CROWN_BLUE].id = CRAFT.CROWN_BLUE;
  this.craft_buttons[CRAFT.HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HOOD], 3);
  this.craft_buttons[CRAFT.HOOD].id = CRAFT.HOOD;
  this.craft_buttons[CRAFT.PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PEASANT], 3);
  this.craft_buttons[CRAFT.PEASANT].id = CRAFT.PEASANT;
  this.craft_buttons[CRAFT.WINTER_PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINTER_PEASANT], 3);
  this.craft_buttons[CRAFT.WINTER_PEASANT].id = CRAFT.WINTER_PEASANT;
  this.craft_buttons[CRAFT.WINTER_HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINTER_HOOD], 3);
  this.craft_buttons[CRAFT.WINTER_HOOD].id = CRAFT.WINTER_HOOD;
  this.craft_buttons[CRAFT.BUCKET_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_FULL], 3);
  this.craft_buttons[CRAFT.BUCKET_FULL].id = CRAFT.BUCKET_FULL;
  this.craft_buttons[CRAFT.BUCKET_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_EMPTY], 3);
  this.craft_buttons[CRAFT.BUCKET_EMPTY].id = CRAFT.BUCKET_EMPTY;
  this.craft_buttons[CRAFT.WELL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WELL], 3);
  this.craft_buttons[CRAFT.WELL].id = CRAFT.WELL;
  this.craft_buttons[CRAFT.SIGN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SIGN], 3);
  this.craft_buttons[CRAFT.SIGN].id = CRAFT.SIGN;
  this.craft_buttons[CRAFT.PUMPKIN_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PUMPKIN_SEED], 3);
  this.craft_buttons[CRAFT.PUMPKIN_SEED].id = CRAFT.PUMPKIN_SEED;
  this.craft_buttons[CRAFT.GARLIC_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GARLIC_SEED], 3);
  this.craft_buttons[CRAFT.GARLIC_SEED].id = CRAFT.GARLIC_SEED;
  this.craft_buttons[CRAFT.ROOF] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_ROOF], 3);
  this.craft_buttons[CRAFT.ROOF].id = CRAFT.ROOF;
  this.craft_buttons[CRAFT.THORNBUSH_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_THORNBUSH_SEED], 3);
  this.craft_buttons[CRAFT.THORNBUSH_SEED].id = CRAFT.THORNBUSH_SEED;
  this.craft_buttons[CRAFT.TOMATO_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TOMATO_SEED], 3);
  this.craft_buttons[CRAFT.TOMATO_SEED].id = CRAFT.TOMATO_SEED;
  this.craft_buttons[CRAFT.CARROT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CARROT_SEED], 3);
  this.craft_buttons[CRAFT.CARROT_SEED].id = CRAFT.CARROT_SEED;
  this.craft_buttons[CRAFT.WATERMELON_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERMELON_SEED], 3);
  this.craft_buttons[CRAFT.WATERMELON_SEED].id = CRAFT.WATERMELON_SEED;
  this.craft_buttons[CRAFT.ALOE_VERA_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_ALOE_VERA_SEED], 3);
  this.craft_buttons[CRAFT.ALOE_VERA_SEED].id = CRAFT.ALOE_VERA_SEED;
  this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3);
  this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR;
  this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3);
  this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR;
  this.craft_buttons[CRAFT.CRAB_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CRAB_SPEAR], 3);
  this.craft_buttons[CRAFT.CRAB_SPEAR].id = CRAFT.CRAB_SPEAR;
  this.craft_buttons[CRAFT.BED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BED], 3);
  this.craft_buttons[CRAFT.BED].id = CRAFT.BED;
  this.craft_buttons[CRAFT.CROWN_CRAB] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_CRAB], 3);
  this.craft_buttons[CRAFT.CROWN_CRAB].id = CRAFT.CROWN_CRAB;
  this.chest_buttons[INV.PITCHFORK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK], 3);
  this.chest_buttons[INV.PITCHFORK].id = INV.PITCHFORK;
  this.inv_buttons[INV.PITCHFORK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK], 3);
  this.inv_buttons[INV.PITCHFORK].id = INV.PITCHFORK;
  this.craft_buttons[CRAFT.PITCHFORK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK], 3);
  this.craft_buttons[CRAFT.PITCHFORK].id = CRAFT.PITCHFORK;
  this.chest_buttons[INV.PITCHFORK2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK2], 3);
  this.chest_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2;
  this.inv_buttons[INV.PITCHFORK2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK2], 3);
  this.inv_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2;
  this.craft_buttons[CRAFT.PITCHFORK2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK2], 3);
  this.craft_buttons[CRAFT.PITCHFORK2].id = CRAFT.PITCHFORK2;
  this.chest_buttons[INV.MACHETE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MACHETE], 3);
  this.chest_buttons[INV.MACHETE].id = INV.MACHETE;
  this.inv_buttons[INV.MACHETE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MACHETE], 3);
  this.inv_buttons[INV.MACHETE].id = INV.MACHETE;
  this.craft_buttons[CRAFT.MACHETE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_MACHETE], 3);
  this.craft_buttons[CRAFT.MACHETE].id = CRAFT.MACHETE;
  this.chest_buttons[INV.PILOT_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PILOT_HELMET], 3);
  this.chest_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET;
  this.inv_buttons[INV.PILOT_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PILOT_HELMET], 3);
  this.inv_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET;
  this.craft_buttons[CRAFT.PILOT_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PILOT_HELMET], 3);
  this.craft_buttons[CRAFT.PILOT_HELMET].id = CRAFT.PILOT_HELMET;
  this.chest_buttons[INV.PITCHFORK_PART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK_PART], 3);
  this.chest_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART;
  this.inv_buttons[INV.PITCHFORK_PART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK_PART], 3);
  this.inv_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART;
  this.chest_buttons[INV.SANDWORM_JUICE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SANDWORM_JUICE], 3);
  this.chest_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE;
  this.inv_buttons[INV.SANDWORM_JUICE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SANDWORM_JUICE], 3);
  this.inv_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE;
  this.chest_buttons[INV.PILOT_GLASSES] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PILOT_GLASSES], 3);
  this.chest_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES;
  this.inv_buttons[INV.PILOT_GLASSES] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PILOT_GLASSES], 3);
  this.inv_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES;
  this.chest_buttons[INV.EMERALD_MACHINE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EMERALD_MACHINE], 3);
  this.chest_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE;
  this.inv_buttons[INV.EMERALD_MACHINE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EMERALD_MACHINE], 3);
  this.inv_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE;
  this.craft_buttons[CRAFT.EMERALD_MACHINE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EMERALD_MACHINE], 3);
  this.craft_buttons[CRAFT.EMERALD_MACHINE].id = CRAFT.EMERALD_MACHINE;
  this.chest_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE], 3);
  this.chest_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE;
  this.inv_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_DOOR_SPIKE], 3);
  this.inv_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE;
  this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE].id = CRAFT.WOOD_DOOR_SPIKE;
  this.chest_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_DOOR_SPIKE], 3);
  this.chest_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE;
  this.inv_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_DOOR_SPIKE], 3);
  this.inv_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE;
  this.craft_buttons[CRAFT.STONE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.STONE_DOOR_SPIKE].id = CRAFT.STONE_DOOR_SPIKE;
  this.chest_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE], 3);
  this.chest_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE;
  this.inv_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_DOOR_SPIKE], 3);
  this.inv_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE;
  this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE].id = CRAFT.GOLD_DOOR_SPIKE;
  this.chest_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE], 3);
  this.chest_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE;
  this.inv_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE], 3);
  this.inv_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE;
  this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE].id = CRAFT.DIAMOND_DOOR_SPIKE;
  this.chest_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE], 3);
  this.chest_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
  this.inv_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE], 3);
  this.inv_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
  this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE].id = CRAFT.AMETHYST_DOOR_SPIKE;
  this.chest_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE], 3);
  this.chest_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE;
  this.inv_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR_SPIKE], 3);
  this.inv_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE;
  this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE].id = CRAFT.REIDITE_DOOR_SPIKE;
  this.chest_buttons[INV.REIDITE_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_WALL], 3);
  this.chest_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL;
  this.inv_buttons[INV.REIDITE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_WALL], 3);
  this.inv_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL;
  this.craft_buttons[CRAFT.REIDITE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_WALL], 3);
  this.craft_buttons[CRAFT.REIDITE_WALL].id = CRAFT.REIDITE_WALL;
  this.chest_buttons[INV.REIDITE_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPIKE], 3);
  this.chest_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE;
  this.inv_buttons[INV.REIDITE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SPIKE], 3);
  this.inv_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE;
  this.craft_buttons[CRAFT.REIDITE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPIKE], 3);
  this.craft_buttons[CRAFT.REIDITE_SPIKE].id = CRAFT.REIDITE_SPIKE;
  this.chest_buttons[INV.REIDITE_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR], 3);
  this.chest_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR;
  this.inv_buttons[INV.REIDITE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR], 3);
  this.inv_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR;
  this.craft_buttons[CRAFT.REIDITE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR], 3);
  this.craft_buttons[CRAFT.REIDITE_DOOR].id = CRAFT.REIDITE_DOOR;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE].id = CRAFT.EXTRACTOR_MACHINE_STONE;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD].id = CRAFT.EXTRACTOR_MACHINE_GOLD;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND].id = CRAFT.EXTRACTOR_MACHINE_DIAMOND;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST].id = CRAFT.EXTRACTOR_MACHINE_AMETHYST;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE].id = CRAFT.EXTRACTOR_MACHINE_REIDITE;
  this.chest_buttons[INV.FLAME] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLAME], 3);
  this.chest_buttons[INV.FLAME].id = INV.FLAME;
  this.inv_buttons[INV.FLAME] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLAME], 3);
  this.inv_buttons[INV.FLAME].id = INV.FLAME;
  this.inv_buttons[INV.FLAME].info.img[2] = this.inv_buttons[INV.FLAME].info.img[0];
  this.chest_buttons[INV.LAVA_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3);
  this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.inv_buttons[INV.LAVA_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3);
  this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.inv_buttons[INV.LAVA_HEART].info.img[2] = this.inv_buttons[INV.LAVA_HEART].info.img[0];
  this.chest_buttons[INV.REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE], 3);
  this.chest_buttons[INV.REIDITE].id = INV.REIDITE;
  this.inv_buttons[INV.REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE], 3);
  this.inv_buttons[INV.REIDITE].id = INV.REIDITE;
  this.inv_buttons[INV.REIDITE].info.img[2] = this.inv_buttons[INV.REIDITE].info.img[0];
  this.chest_buttons[INV.REIDITE_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SWORD], 3);
  this.chest_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD;
  this.inv_buttons[INV.REIDITE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SWORD], 3);
  this.inv_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD;
  this.craft_buttons[CRAFT.REIDITE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SWORD], 3);
  this.craft_buttons[CRAFT.REIDITE_SWORD].id = CRAFT.REIDITE_SWORD;
  this.chest_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_PROTECTION], 3);
  this.chest_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION;
  this.inv_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_PROTECTION], 3);
  this.inv_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION;
  this.craft_buttons[CRAFT.DIAMOND_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_PROTECTION], 3);
  this.craft_buttons[CRAFT.DIAMOND_PROTECTION].id = CRAFT.DIAMOND_PROTECTION;
  this.chest_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_PROTECTION], 3);
  this.chest_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION;
  this.inv_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_PROTECTION], 3);
  this.inv_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION;
  this.craft_buttons[CRAFT.AMETHYST_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_PROTECTION], 3);
  this.craft_buttons[CRAFT.AMETHYST_PROTECTION].id = CRAFT.AMETHYST_PROTECTION;
  this.chest_buttons[INV.REIDITE_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_PROTECTION], 3);
  this.chest_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION;
  this.inv_buttons[INV.REIDITE_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_PROTECTION], 3);
  this.inv_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION;
  this.craft_buttons[CRAFT.REIDITE_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_PROTECTION], 3);
  this.craft_buttons[CRAFT.REIDITE_PROTECTION].id = CRAFT.REIDITE_PROTECTION;
  this.chest_buttons[INV.LAVA_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HELMET], 3);
  this.chest_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET;
  this.inv_buttons[INV.LAVA_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HELMET], 3);
  this.inv_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET;
  this.craft_buttons[CRAFT.LAVA_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_HELMET], 3);
  this.craft_buttons[CRAFT.LAVA_HELMET].id = CRAFT.LAVA_HELMET;
  this.chest_buttons[INV.WITCH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WITCH], 3);
  this.chest_buttons[INV.WITCH].id = INV.WITCH;
  this.inv_buttons[INV.WITCH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WITCH], 3);
  this.inv_buttons[INV.WITCH].id = INV.WITCH;
  this.craft_buttons[CRAFT.WITCH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WITCH], 3);
  this.craft_buttons[CRAFT.WITCH].id = CRAFT.WITCH;
  this.chest_buttons[INV.WAND1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WAND1], 3);
  this.chest_buttons[INV.WAND1].id = INV.WAND1;
  this.inv_buttons[INV.WAND1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WAND1], 3);
  this.inv_buttons[INV.WAND1].id = INV.WAND1;
  this.craft_buttons[CRAFT.WAND1] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WAND1], 3);
  this.craft_buttons[CRAFT.WAND1].id = CRAFT.WAND1;
  this.chest_buttons[INV.WAND2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WAND2], 3);
  this.chest_buttons[INV.WAND2].id = INV.WAND2;
  this.inv_buttons[INV.WAND2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WAND2], 3);
  this.inv_buttons[INV.WAND2].id = INV.WAND2;
  this.craft_buttons[CRAFT.WAND2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WAND2], 3);
  this.craft_buttons[CRAFT.WAND2].id = CRAFT.WAND2;
  this.chest_buttons[INV.NIMBUS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_NIMBUS], 3);
  this.chest_buttons[INV.NIMBUS].id = INV.NIMBUS;
  this.inv_buttons[INV.NIMBUS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_NIMBUS], 3);
  this.inv_buttons[INV.NIMBUS].id = INV.NIMBUS;
  this.craft_buttons[CRAFT.NIMBUS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_NIMBUS], 3);
  this.craft_buttons[CRAFT.NIMBUS].id = CRAFT.NIMBUS;
  this.chest_buttons[INV.FIREFLY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FIREFLY], 3);
  this.chest_buttons[INV.FIREFLY].id = INV.FIREFLY;
  this.inv_buttons[INV.FIREFLY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FIREFLY], 3);
  this.inv_buttons[INV.FIREFLY].id = INV.FIREFLY;
  this.craft_buttons[CRAFT.FIREFLY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FIREFLY], 3);
  this.craft_buttons[CRAFT.FIREFLY].id = CRAFT.FIREFLY;
  this.chest_buttons[INV.REIDITE_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPEAR], 3);
  this.chest_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR;
  this.inv_buttons[INV.REIDITE_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SPEAR], 3);
  this.inv_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR;
  this.craft_buttons[CRAFT.REIDITE_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPEAR], 3);
  this.craft_buttons[CRAFT.REIDITE_SPEAR].id = CRAFT.REIDITE_SPEAR;
  this.chest_buttons[INV.REIDITE_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_HELMET], 3);
  this.chest_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET;
  this.inv_buttons[INV.REIDITE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_HELMET], 3);
  this.inv_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET;
  this.craft_buttons[CRAFT.REIDITE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_HELMET], 3);
  this.craft_buttons[CRAFT.REIDITE_HELMET].id = CRAFT.REIDITE_HELMET;
  this.chest_buttons[INV.LAVA_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_SPEAR], 3);
  this.chest_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
  this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3);
  this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
  this.craft_buttons[CRAFT.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SPEAR], 3);
  this.craft_buttons[CRAFT.LAVA_SPEAR].id = CRAFT.LAVA_SPEAR;
  this.chest_buttons[INV.LAVA_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_SWORD], 3);
  this.chest_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
  this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3);
  this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
  this.craft_buttons[CRAFT.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SWORD], 3);
  this.craft_buttons[CRAFT.LAVA_SWORD].id = CRAFT.LAVA_SWORD;
  this.chest_buttons[INV.LAVA_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3);
  this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.inv_buttons[INV.LAVA_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3);
  this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.chest_buttons[INV.EGG0] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG0], 3);
  this.chest_buttons[INV.EGG0].id = INV.EGG0;
  this.inv_buttons[INV.EGG0] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG0], 3);
  this.inv_buttons[INV.EGG0].id = INV.EGG0;
  this.chest_buttons[INV.EGG1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG1], 3);
  this.chest_buttons[INV.EGG1].id = INV.EGG1;
  this.inv_buttons[INV.EGG1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG1], 3);
  this.inv_buttons[INV.EGG1].id = INV.EGG1;
  this.chest_buttons[INV.EGG2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG2], 3);
  this.chest_buttons[INV.EGG2].id = INV.EGG2;
  this.inv_buttons[INV.EGG2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG2], 3);
  this.inv_buttons[INV.EGG2].id = INV.EGG2;
  this.chest_buttons[INV.EGG3] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG3], 3);
  this.chest_buttons[INV.EGG3].id = INV.EGG3;
  this.inv_buttons[INV.EGG3] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG3], 3);
  this.inv_buttons[INV.EGG3].id = INV.EGG3;
  this.chest_buttons[INV.EGG4] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG4], 3);
  this.chest_buttons[INV.EGG4].id = INV.EGG4;
  this.inv_buttons[INV.EGG4] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG4], 3);
  this.inv_buttons[INV.EGG4].id = INV.EGG4;
  this.update_craft_buttons = function () {
    var artemas = user.craft.can_craft, szander = 10, zina = 10;
    for (var knesha = 0; knesha < artemas.length; knesha++) {
      knesha > 0 && !(knesha % 4) && (szander += artemas[0].info.width + 10, zina = 10);
      artemas[knesha].info.translate.x = szander;
      artemas[knesha].info.translate.y = zina;
      zina += 10 + artemas[knesha].info.height;
    }
  };
  this.update_chest_buttons = function () {
    var orva = Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.chest_buttons[0].info.img[0].width) + 35);
    for (var crisinda = 0; crisinda < this.chest_buttons.length; crisinda++) {
      if (!this.chest_buttons[crisinda]) {
        continue;
      }
      this.chest_buttons[crisinda].info.translate.x = orva;
      this.chest_buttons[crisinda].info.translate.y = 22;
    }
    this.chest_lockpick.info.translate.x = orva + 17;
    this.chest_lockpick.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height;
    this.chest_locked.info.translate.x = orva + 17;
    this.chest_locked.info.translate.y = 30;
    this.chest_padlock.info.translate.x = orva + 17;
    this.chest_padlock.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height;
  };
  this.update_team_buttons = function () {
    var valita = Math.floor((canw - sprite[SPRITE.TEAM_BUTTON][0].width) / 2);
    for (var johnesha = 0; johnesha < this.team_buttons.length; johnesha++) {
      this.team_buttons[johnesha].button.info.translate.x = valita;
      this.team_buttons[johnesha].button.info.translate.y = -13;
    }
  };
  this.update_bread_oven_button = function () {
    var arkel = 12 + Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.bread_oven_wood_button.info.img[0].width) + 35);
    this.bread_oven_wood_button.info.translate.x = arkel;
    this.bread_oven_wood_button.info.translate.y = 33;
    this.bread_oven_flour_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
    this.bread_oven_flour_button.info.translate.y = 137;
    this.bread_oven_bread_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
    this.bread_oven_bread_button.info.translate.y = 240;
  };
  this.update_extractor_button = function () {
    var arita = 12 + Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.extractor_wood_button.info.img[0].width) + 35);
    this.extractor_wood_button.info.translate.x = arita;
    this.extractor_wood_button.info.translate.y = 36;
    arita += 83;
    this.extractor_stone_button.info.translate.x = arita;
    this.extractor_stone_button.info.translate.y = 36;
    this.extractor_gold_button.info.translate.x = arita;
    this.extractor_gold_button.info.translate.y = 36;
    this.extractor_diamond_button.info.translate.x = arita;
    this.extractor_diamond_button.info.translate.y = 36;
    this.extractor_amethyst_button.info.translate.x = arita;
    this.extractor_amethyst_button.info.translate.y = 36;
    this.extractor_reidite_button.info.translate.x = arita;
    this.extractor_reidite_button.info.translate.y = 36;
  };
  this.update_windmill_button = function () {
    var shamel = 12 + Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.windmill_wheat_button.info.img[0].width) + 35);
    this.windmill_wheat_button.info.translate.x = shamel;
    this.windmill_wheat_button.info.translate.y = 36;
    shamel += 83;
    this.windmill_flour_button.info.translate.x = shamel;
    this.windmill_flour_button.info.translate.y = 36;
  };
  this.update_furnace_button = function () {
    var damariah = Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.furnace_button.info.img[0].width) + 35);
    this.furnace_button.info.translate.x = damariah;
    this.furnace_button.info.translate.y = 22;
  };
  this.update_inv_buttons = function () {
    var lucianna = user.inv.can_select;
    if (lucianna.length > 0) {
      var nishaan = Math.floor((canw - (lucianna[0].info.width + 5) * user.inv.max) / 2);
    }
    for (var camylah = 0; camylah < lucianna.length; camylah++) {
      lucianna[camylah].info.translate.x = nishaan + (lucianna[camylah].info.width + 5) * camylah;
      lucianna[camylah].info.translate.y = canh - lucianna[camylah].info.width - 10;
      this.plus_buttons[lucianna[camylah].id].info.translate.x = lucianna[camylah].info.translate.x + 13;
      this.plus_buttons[lucianna[camylah].id].info.translate.y = lucianna[camylah].info.translate.y - this.plus_buttons[lucianna[camylah].id].info.img[0].height - 6;
    }
  };
  var cennet = 0, ether = function () {
    niayla.update();
    cennet++;
    if (cennet == 30) {
      niayla.add_event_listener();
      niayla.update();
      return;
    }
    window.setTimeout(ether, 33);
  };
  this.quit = function (shanterrica) {
    if (user.chat.open) {
      user.chat.quit();
    }
    if (user.terminal.open) {
      user.terminal.quit();
    }
    document.getElementById("team_box").style.display = "none";
    niayla.market.style.display = "none";
    niayla.market.open = false;
    niayla.sign.style.display = "none";
    niayla.sign.open = false;
    document.getElementById("shop_starterkit").style.display = "none";
    document.getElementById("home_craft").style.display = "none";
    document.getElementById("recipe_craft").style.display = "none";
    niayla.craft_list.open = false;
    document.getElementById("option_in_game").style.display = "none";
    niayla.options.open = false;
    document.getElementById("sure_delete").style.display = "none";
    niayla.safe_delete.open = false;
    document.getElementById("cancel_sure_delete").style.display = "none";
    niayla.safe_cancel.open = false;
    document.getElementById("chronoquest").style.display = "none";
    niayla.quests.open = false;
    aaryahi = shanterrica;
    niayla.remove_event_listener();
    niayla.can.style.cursor = niayla.cursor0;
    audio.quit();
    aleks = -1;
    franke();
    refreshAds();
  };
  var aaryahi, aleks = -1, franke = function () {
    niayla.update();
    aleks++;
    if (aleks == 30) {
      niayla.stop();
      aaryahi();
      return;
    }
    window.setTimeout(franke, 33);
  };
  this.is_run = false;
  this.stop = function () {
    this.is_run = false;
  };
  this.run = function () {
    client.change_ground();
    niayla.is_run = true;
    aleks = -1;
    cennet = 0;
    ether();
  };
  this.update = function () {
    this.leaderboard.translate.x = canw - this.leaderboard.img.width - 10;
    this.leaderboard.translate.y = 5;
    world.clock.translate.x = this.leaderboard.translate.x - sprite[SPRITE.CLOCK][0].width - 85;
    world.clock.translate.y = 10;
    this.craft_list.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.RECIPE_BUTTON][0].width - 10;
    this.craft_list.button.info.translate.y = 10;
    this.quests.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.QUEST_BUTTON][0].width - 20;
    this.quests.button.info.translate.y = this.craft_list.button.info.translate.y + sprite[SPRITE.RECIPE_BUTTON][0].height + 5;
    this.options.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20;
    this.options.button.info.translate.y = this.quests.button.info.translate.y + sprite[SPRITE.OPTION_BUTTON][0].height + 18;
    this.audio.button_on.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20;
    this.audio.button_on.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height;
    this.audio.button_off.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20;
    this.audio.button_off.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height;
    this.market.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.MARKET_BUTTON][0].width - 20;
    this.market.button.info.translate.y = this.audio.button_on.info.translate.y + sprite[SPRITE.MARKET_BUTTON][0].height;
    user.auto_feed.translate.x = this.leaderboard.translate.x - 63 - 85;
    user.auto_feed.translate.y = 100;
    user.show_spectators.translate.x = this.leaderboard.translate.x - sprite[SPRITE.SHOW_SPECTATORS].width - 85;
    user.show_spectators.translate.y = user.auto_feed.translate.y + 10 + sprite[SPRITE.AUTO_FEED].height;
    this.minimap.translate.y = canh - 3 - 193;
    this.minimap.translate.x = canw - 3 - 193;
    this.gauges.translate.x = 5;
    this.gauges.translate.y = canh - this.gauges.img.height - 5;
    this.shop.button.info.translate.x = canw2 - 45.5;
    this.shop.button.info.translate.y = 50;
    this.update_craft_buttons();
    this.update_inv_buttons();
    this.update_chest_buttons();
    this.update_furnace_button();
    this.update_windmill_button();
    this.update_extractor_button();
    this.update_bread_oven_button();
    this.update_team_buttons();
    this.sign.update_button();
    draw_team_buttons();
    user.chat.update();
    user.terminal.update();
    this.team_box.update();
    this.craft_list.home.update();
    this.craft_list.list.update();
    this.safe_delete.update();
    this.safe_cancel.update();
    this.quests.update();
    this.shop.update();
    this.options.update();
    this.market.update();
    this.sign.update();
    var chrishiya = 0;
    if (cennet != 30) {
      var chrishiya = 1500 / (cennet + 1) - 50;
    }
    if (aleks != -1) {
      var chrishiya = -(1500 / (30 - aleks + 1) - 48);
    }
    this.shop.button.info.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    this.leaderboard.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    user.auto_feed.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    user.show_spectators.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    this.craft_list.button.info.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    this.quests.button.info.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    this.options.button.info.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    this.market.button.info.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    this.audio.button_on.info.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    this.audio.button_off.info.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    world.clock.translate.y -= chrishiya > 0 ? chrishiya : -chrishiya;
    this.gauges.translate.y -= chrishiya < 0 ? chrishiya : -chrishiya;
    this.minimap.translate.y -= chrishiya < 0 ? chrishiya : -chrishiya;
  };
  this.draw_UI = function () {
    if (!user.ghost.enabled && this.show_ui && !user.zombie) {
      draw_ui_crafting();
    }
    draw_ui_gear();
    draw_ui_chat();
    if (this.show_ui) {
      draw_minimap();
      if (this.show_recipe_book === 1) {
        this.craft_list.button.draw(mais);
      }
      if (world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR && this.show_quest === 1) {
        this.quests.button.draw(mais);
      }
      this.options.button.draw(mais);
      if (this.show_market === 1) {
        this.market.button.draw(mais);
      }
      if (audio.run) {
        this.audio.button_on.draw(mais);
      } else {
        this.audio.button_off.draw(mais);
      }
      draw_leaderboard();
      draw_status();
      this.gauges.draw();
      draw_weapon_switch_delay();
      draw_helmet_switch_delay();
      draw_build_delay();
      draw_totem_delay();
      draw_ui_inventory();
      draw_chest_inventory();
      draw_furnace_inventory();
      draw_well_inventory();
      draw_windmill_inventory();
      draw_extractor_inventory();
      draw_bread_oven_inventory();
      draw_sign_button();
      draw_team_buttons();
      draw_info_box();
    }
    if (user.ghost.enabled) {
      draw_resurrection_inventory();
    }
    draw_bigmap();
    if (this.show_ui && this.show_clock === 1) {
      draw_clock();
    }
    user.welcome.draw();
    user.alert.draw("#FFF", "#000");
    this.show_ui && (user.ghost.draw(), user.shop.draw(), user.inv.drag.draw(mouse.pos.x, mouse.pos.y));
    draw_reconnect();
  };
  this.update_scene = function () {
    user.cam.update();
    user.gauges.update();
    !user.reconnect.enabled && user.alive && (user.control.update(), user.auto_feed.update());
    world.update();
    this.quests.update_chrono();
  };
  this.draw_scene = function () {
    draw_world_with_effect();
  };
  this.update_connection = function () {
    client.check_state();
    client.check_pong();
    client.try_ping();
    client.update_cam();
  };
  this.draw = function () {
    if (!user.reconnect.enabled && user.alive) {
      this.update_connection();
    }
    audio.scheduler();
    this.update_scene();
    if (ui.hijackedAsset === 1) {
      var elodee = IMAGES.CHEATING_BOX;
      ctxDrawImage(mais, elodee, canw2 - elodee.width / 4, canh2 - elodee.height / 4, elodee.width / 2, elodee.height / 2);
      return;
    }
    this.draw_scene();
    this.draw_UI();
  };
  this.trigger_keyup = function (khalik) {
    if (user.chat.open && khalik.keyCode === 27) {
      user.chat.quit();
    } else {
      if (user.terminal.open && khalik.keyCode === 27) {
        user.terminal.quit();
      } else {
        if (!user.chat.open && !user.terminal.open && khalik.keyCode == 79 && aleks == -1) {
          user.terminal._open();
        } else {
          if (khalik.keyCode == 13 && aleks == -1) {
            if (user.terminal.open) {
              user.terminal._send();
            } else {
              user.chat.run();
            }
          } else {
            if (!user.chat.open && !user.terminal.open) {
              if (khalik.keyCode === 82) {
                user.auto_feed.invert();
              } else {
                if (khalik.keyCode === 80 && world.mode === WORLD.MODE_HUNGER_GAMES && !user.spectator) {
                  user.show_spectators.invert();
                } else {
                  if (khalik.keyCode >= 49 && khalik.keyCode <= 57) {
                    if (user.craft.id < 0) {
                      var christey = khalik.keyCode - 49, mykaya = user.inv.can_select[christey];
                      if (mykaya) {
                        client.select_inv(mykaya.id, christey);
                      }
                    }
                  } else {
                    if (khalik.keyCode == 89) {
                      user.bigmap = !user.bigmap;
                    } else {
                      if (khalik.keyCode == 71) {
                        user.craft.change_mode();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    keyboard.up(khalik);
  };
  this.trigger_keydown = function (aldolfo) {
    keyboard.down(aldolfo);
    if (aldolfo.keyCode == 8 && !user.chat.open && !user.terminal.open) {
      aldolfo.preventDefault();
    }
  };
  this.trigger_mousedown = function (jenesys) {
    mouse.pos = get_mouse_pos(niayla.can, jenesys);
    var ilee = false;
    if (user.craft.preview < 0) {
      niayla.minimap.focus(mouse.pos);
    }
    var yurani = user.chest;
    if (user.craft.id < 0 && yurani.id >= 0) {
      if (!user.chest.lock || user.chest.pid === user.id) {
        ilee |= niayla.chest_buttons[user.chest.id].trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      }
    }
    var luddy = user.windmill;
    luddy.open && luddy.amount_flour > 0 && (ilee |= niayla.windmill_flour_button.trigger(niayla.can, mouse.pos, MOUSE_DOWN));
    var shavonne = user.extractor;
    if (shavonne.open && shavonne.amount_mineral > 0) {
      ilee |= niayla.extractor_stone_button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      ilee |= niayla.extractor_gold_button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      ilee |= niayla.extractor_diamond_button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      ilee |= niayla.extractor_amethyst_button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      ilee |= niayla.extractor_reidite_button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
    }
    var breton = user.bread_oven;
    breton.open && breton.amount_bread > 0 && (ilee |= niayla.bread_oven_bread_button.trigger(niayla.can, mouse.pos, MOUSE_DOWN));
    if (user.sign.open) {
      ilee |= niayla.sign.button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
    }
    if (!user.chest.lock) {
      if (user.chest.padlock) {
        ilee |= niayla.chest_padlock.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      }
    }
    if (user.chest.lockpick) {
      ilee |= niayla.chest_lockpick.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.id < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.options.open && !niayla.market.open) {
      var rovenia = user.inv.can_select;
      for (var jumalay = 0; jumalay < rovenia.length; jumalay++) {
        var dawson = rovenia[jumalay].trigger(niayla.can, mouse.pos, MOUSE_DOWN);
        ilee |= dawson;
        if (dawson) {
          user.inv.drag.start(jumalay, mouse.pos);
        }
        ;
        (yurani.open && (yurani.id < 0 || yurani.id == rovenia[jumalay].id) || user.furnace.open && rovenia[jumalay].id === INV.WOOD || user.well.open && rovenia[jumalay].id === INV.BUCKET_FULL || user.bread_oven.open && (rovenia[jumalay].id === INV.WOOD || rovenia[jumalay].id === INV.FLOUR) || user.windmill.open && rovenia[jumalay].id === INV.WILD_WHEAT || user.extractor.open && rovenia[jumalay].id === INV.WOOD) && (ilee |= niayla.plus_buttons[rovenia[jumalay].id].trigger(niayla.can, mouse.pos, MOUSE_DOWN));
      }
    }
    if (user.resurrection.open) {
      ilee |= niayla.resurrection.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
    }
    if (niayla.team_buttons_id != -1) {
      ilee |= niayla.team_buttons[niayla.team_buttons_id].button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      if (ilee) {
        var praharsh = true;
      }
    } else {
      var praharsh = false;
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && !praharsh && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.market.open && !user.zombie) {
      var rovenia = user.craft.can_craft;
      for (var jumalay = 0; jumalay < rovenia.length; jumalay++) {
        ilee |= rovenia[jumalay].trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && user.shop.open && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.market.open) {
      ilee |= niayla.shop.button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.preview < 0 && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.market.open) {
      ilee |= niayla.craft_list.button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.market.open) {
      ilee |= niayla.options.button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.options.open) {
      ilee |= niayla.market.button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.options.open && !niayla.market.open) {
      if (audio.run) {
        ilee |= niayla.audio.button_on.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      } else {
        ilee |= niayla.audio.button_off.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
      }
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.market.open && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR) {
      ilee |= niayla.quests.button.trigger(niayla.can, mouse.pos, MOUSE_DOWN);
    }
    if (!ilee && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.market.open && !niayla.sign.open) {
      if (user.craft.preview >= 0) {
        client.send_build();
      } else {
        if (!praharsh) {
          mouse.down();
        }
      }
    }
  };
  this.trigger_mouseup = function (daquain) {
    mouse.pos = get_mouse_pos(niayla.can, daquain);
    mouse.up();
    if (user.inv.drag.release()) {
      return;
    }
    var gertrud = user.chest, gamila = user.furnace, lannie = user.well, alajia = user.windmill, saleha = user.extractor, aniyahlee = user.bread_oven;
    user.control.attack && (user.control.attack = 0, client.stop_attack());
    if (niayla.team_buttons_id != -1) {
      var rashawd = niayla.team_buttons[niayla.team_buttons_id].button.trigger(niayla.can, mouse.pos, MOUSE_UP), liora = document.getElementById("team_box").style;
      if (rashawd && liora.display == "inline-block") {
        liora.display = "none";
        return;
      } else {
        if (rashawd) {
          niayla.team_buttons[niayla.team_buttons_id].action();
        }
      }
    }
    if (user.craft.id < 0 && gertrud.id >= 0 && !niayla.safe_delete.open) {
      if (!user.chest.lock || user.chest.pid === user.id) {
        var rashawd = niayla.chest_buttons[user.chest.id].trigger(niayla.can, mouse.pos, MOUSE_UP);
        if (rashawd) {
          client.take_chest(gertrud);
        }
      }
    }
    var alajia = user.windmill;
    if (alajia.open && alajia.amount_flour > 0 && !niayla.safe_delete.open) {
      var rashawd = niayla.windmill_flour_button.trigger(niayla.can, mouse.pos, MOUSE_UP);
      if (rashawd) {
        client.take_flour(alajia);
      }
    }
    var saleha = user.extractor;
    if (saleha.open && saleha.amount_mineral > 0 && !niayla.safe_delete.open) {
      switch (saleha.type) {
        case ITEMS.EXTRACTOR_MACHINE_STONE:
          var rashawd = niayla.extractor_stone_button.trigger(niayla.can, mouse.pos, MOUSE_UP);
          if (rashawd) {
            client.take_extractor(saleha);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_GOLD:
          var rashawd = niayla.extractor_gold_button.trigger(niayla.can, mouse.pos, MOUSE_UP);
          if (rashawd) {
            client.take_extractor(saleha);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
          var rashawd = niayla.extractor_diamond_button.trigger(niayla.can, mouse.pos, MOUSE_UP);
          if (rashawd) {
            client.take_extractor(saleha);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
          var rashawd = niayla.extractor_amethyst_button.trigger(niayla.can, mouse.pos, MOUSE_UP);
          if (rashawd) {
            client.take_extractor(saleha);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_REIDITE:
          var rashawd = niayla.extractor_reidite_button.trigger(niayla.can, mouse.pos, MOUSE_UP);
          if (rashawd) {
            client.take_extractor(saleha);
          }
          break;
      }
    }
    var aniyahlee = user.bread_oven;
    if (aniyahlee.open && aniyahlee.amount_bread > 0 && !niayla.safe_delete.open) {
      var rashawd = niayla.bread_oven_bread_button.trigger(niayla.can, mouse.pos, MOUSE_UP);
      if (rashawd) {
        client.take_bread(aniyahlee);
      }
    }
    if (user.sign.open && !niayla.safe_delete.open) {
      var rashawd = niayla.sign.button.trigger(niayla.can, mouse.pos, MOUSE_UP);
      if (rashawd) {
        niayla.sign.select();
      }
    }
    if (!user.chest.lock && !niayla.safe_delete.open) {
      if (user.chest.padlock) {
        rashawd = niayla.chest_padlock.trigger(niayla.can, mouse.pos, MOUSE_UP);
        if (rashawd) {
          client.lock_chest(gertrud);
        }
      }
    }
    if (user.chest.lockpick && !niayla.safe_delete.open) {
      rashawd = niayla.chest_lockpick.trigger(niayla.can, mouse.pos, MOUSE_UP);
      if (rashawd) {
        client.unlock_chest(gertrud);
        if (ga) {
          ga("send", "event", "Game", "lockpick");
        }
      }
    }
    if (user.resurrection.open) {
      var rashawd = niayla.resurrection.trigger(niayla.can, mouse.pos, MOUSE_UP);
      if (rashawd) {
        client.resurrection();
        if (ga) {
          ga("send", "event", "Game", "resurrection");
        }
      }
    }
    if (user.craft.id < 0 && !user.ghost.enabled && !niayla.safe_delete.open) {
      var marliyah = user.inv.can_select;
      for (var toronda = 0; toronda < marliyah.length; toronda++) {
        var rashawd = marliyah[toronda].trigger(niayla.can, mouse.pos, MOUSE_UP);
        if (!rashawd) {
          if (gertrud.open && (gertrud.id < 0 || gertrud.id === marliyah[toronda].id)) {
            var rashawd = niayla.plus_buttons[marliyah[toronda].id].trigger(niayla.can, mouse.pos, MOUSE_UP);
            if (rashawd && user.craft.preview < 0) {
              client.give_item(gertrud, marliyah[toronda].id, daquain.shiftKey ? 10 : 1);
            }
          } else {
            if (lannie.open && marliyah[toronda].id === INV.BUCKET_FULL) {
              var rashawd = niayla.plus_buttons[marliyah[toronda].id].trigger(niayla.can, mouse.pos, MOUSE_UP);
              if (rashawd && user.craft.preview < 0) {
                client.give_well(lannie);
              }
            } else {
              if (gamila.open && marliyah[toronda].id === INV.WOOD) {
                var rashawd = niayla.plus_buttons[marliyah[toronda].id].trigger(niayla.can, mouse.pos, MOUSE_UP);
                if (rashawd && user.craft.preview < 0) {
                  client.give_wood(gamila, daquain.shiftKey ? 10 : 1);
                }
              } else {
                if (alajia.open && marliyah[toronda].id === INV.WILD_WHEAT) {
                  var rashawd = niayla.plus_buttons[marliyah[toronda].id].trigger(niayla.can, mouse.pos, MOUSE_UP);
                  if (rashawd && user.craft.preview < 0) {
                    client.give_wheat(alajia, daquain.shiftKey ? 10 : 1);
                  }
                } else {
                  if (saleha.open && marliyah[toronda].id === INV.WOOD) {
                    var rashawd = niayla.plus_buttons[marliyah[toronda].id].trigger(niayla.can, mouse.pos, MOUSE_UP);
                    if (rashawd && user.craft.preview < 0) {
                      client.give_wood_extractor(saleha, daquain.shiftKey ? 10 : 1);
                    }
                  } else {
                    if (aniyahlee.open && (marliyah[toronda].id === INV.WOOD || marliyah[toronda].id === INV.FLOUR)) {
                      var rashawd = niayla.plus_buttons[marliyah[toronda].id].trigger(niayla.can, mouse.pos, MOUSE_UP);
                      if (rashawd && user.craft.preview < 0) {
                        if (marliyah[toronda].id === INV.WOOD) {
                          client.give_bread_oven(aniyahlee, daquain.shiftKey ? 10 : 1, 0);
                        } else {
                          client.give_bread_oven(aniyahlee, 0, daquain.shiftKey ? 10 : 1);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue;
        } else {
          if (daquain.which == 1 && !daquain.shiftKey) {
            client.select_inv(marliyah[toronda].id, toronda);
          } else {
            if ((daquain.which == 1 && daquain.shiftKey || daquain.which == 3) && user.craft.preview < 0) {
              niayla.safe_delete.del(marliyah[toronda].id);
            }
          }
        }
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && !user.ghost.enabled && !niayla.safe_delete.open && !user.zombie) {
      var marliyah = user.craft.can_craft;
      for (var toronda = 0; toronda < marliyah.length; toronda++) {
        var rashawd = marliyah[toronda].trigger(niayla.can, mouse.pos, MOUSE_UP);
        if (!rashawd) {
          continue;
        }
        ret = client.select_craft(marliyah[toronda].id);
        if (ret && ga) {
          ga("send", "event", "Game", "craft", INV_INFOS[RECIPES[marliyah[toronda].id].id2].name);
        }
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && user.shop.open && !niayla.market.open && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.quests.open) {
      var rashawd = niayla.shop.button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
      if (rashawd) {
        game.shop.select();
      }
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.market.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.options.open) {
      if (audio.run) {
        var rashawd = niayla.audio.button_on.trigger(niayla.can, mouse.pos, MOUSE_UP);
        if (rashawd) {
          audio.select();
          if (ga) {
            ga("send", "event", "Game", "sound on");
          }
        }
      } else {
        var rashawd = niayla.audio.button_off.trigger(niayla.can, mouse.pos, MOUSE_UP);
        if (rashawd) {
          audio.select();
          if (ga) {
            ga("send", "event", "Game", "sound off");
          }
        }
      }
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.market.open) {
      var rashawd = niayla.options.button.trigger(niayla.can, mouse.pos, MOUSE_UP);
      if (rashawd) {
        niayla.options.select_options();
        if (ga) {
          ga("send", "event", "Game", "options");
        }
      }
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.options.open && niayla.show_market === 1) {
      var rashawd = niayla.market.button.trigger(niayla.can, mouse.pos, MOUSE_UP);
      if (rashawd) {
        niayla.market.select();
        if (ga) {
          ga("send", "event", "Game", "market");
        }
      }
    }
    if (user.craft.preview < 0 && !niayla.safe_delete.open && !niayla.market.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.quests.open && niayla.show_recipe_book === 1) {
      var rashawd = niayla.craft_list.button.trigger(niayla.can, mouse.pos, MOUSE_UP);
      if (rashawd) {
        niayla.craft_list.select_book();
        if (ga) {
          ga("send", "event", "Game", "recipe");
        }
      }
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.market.open && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR && niayla.show_quest === 1) {
      var rashawd = niayla.quests.button.trigger(niayla.can, mouse.pos, MOUSE_UP);
      if (rashawd) {
        niayla.quests.select();
        if (ga) {
          ga("send", "event", "Game", "quests");
        }
      }
    }
    if (user.craft.crafting && daquain.which == 3) {
      niayla.safe_cancel.del();
    }
  };
  this.current_cursor = false;
  this.trigger_mousemove = function (herb) {
    mouse.pos = get_mouse_pos(niayla.can, herb);
    var jenniferlee = false;
    game.info_box.display = 0;
    user.inv.drag.move(mouse.pos);
    if (niayla.team_buttons_id != -1) {
      jenniferlee |= niayla.team_buttons[niayla.team_buttons_id].button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    var quiana = user.windmill;
    if (quiana.open && quiana.amount_flour > 0) {
      jenniferlee |= niayla.windmill_flour_button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    var ansel = user.extractor;
    if (ansel.open && ansel.amount_mineral > 0) {
      jenniferlee |= niayla.extractor_stone_button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
      jenniferlee |= niayla.extractor_gold_button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
      jenniferlee |= niayla.extractor_diamond_button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
      jenniferlee |= niayla.extractor_amethyst_button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
      jenniferlee |= niayla.extractor_reidite_button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    var lucha = user.bread_oven;
    if (lucha.open && lucha.amount_bread > 0) {
      jenniferlee |= niayla.bread_oven_bread_button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.sign.open) {
      jenniferlee |= niayla.sign.button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    var sheelagh = user.chest;
    if (user.craft.id < 0 && sheelagh.id >= 0 && !user.ghost.enabled) {
      if (!user.chest.lock || user.chest.pid === user.id) {
        jenniferlee |= niayla.chest_buttons[sheelagh.id].trigger(niayla.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (user.resurrection.open) {
      jenniferlee |= niayla.resurrection.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    if (!user.chest.lock && !user.ghost.enabled) {
      if (user.chest.padlock) {
        jenniferlee |= niayla.chest_padlock.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (user.chest.lockpick && !user.ghost.enabled) {
      jenniferlee |= niayla.chest_lockpick.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.id < 0 && !user.ghost.enabled) {
      var taquetta = user.inv.can_select;
      for (var daegan = 0; daegan < taquetta.length; daegan++) {
        var tanvitha = taquetta[daegan].trigger(niayla.can, mouse.pos, MOUSE_MOVE);
        jenniferlee |= game.info_box.trigger(tanvitha, taquetta[daegan], 0);
        (sheelagh.open && (sheelagh.id < 0 || sheelagh.id == taquetta[daegan].id) || user.furnace.open && taquetta[daegan].id == INV.WOOD || user.well.open && taquetta[daegan].id === INV.BUCKET_FULL || user.bread_oven.open && (taquetta[daegan].id == INV.WOOD || taquetta[daegan].id == INV.FLOUR) || user.windmill.open && taquetta[daegan].id == INV.WILD_WHEAT || user.extractor.open && taquetta[daegan].id == INV.WOOD) && (jenniferlee |= niayla.plus_buttons[taquetta[daegan].id].trigger(niayla.can, mouse.pos, MOUSE_MOVE));
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && !user.ghost.enabled && !user.zombie) {
      var taquetta = user.craft.can_craft;
      for (var daegan = 0; daegan < taquetta.length; daegan++) {
        var tanvitha = false;
        tanvitha = taquetta[daegan].trigger(niayla.can, mouse.pos, MOUSE_MOVE);
        jenniferlee |= game.info_box.trigger(tanvitha, taquetta[daegan], 1);
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && user.shop.open && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.market.open) {
      jenniferlee |= niayla.shop.button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.preview < 0 && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.market.open && niayla.show_recipe_book === 1) {
      jenniferlee |= niayla.craft_list.button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.market.open) {
      jenniferlee |= niayla.options.button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.options.open && niayla.show_market === 1) {
      jenniferlee |= niayla.market.button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.safe_cancel.open && !niayla.quests.open && !niayla.options.open && !niayla.market.open) {
      if (audio.run) {
        jenniferlee |= niayla.audio.button_on.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
      } else {
        jenniferlee |= niayla.audio.button_off.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (user.craft.preview < 0 && !niayla.craft_list.open && !niayla.safe_delete.open && !niayla.options.open && !niayla.safe_cancel.open && !niayla.market.open && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_B && niayla.show_quest === 1) {
      jenniferlee |= niayla.quests.button.trigger(niayla.can, mouse.pos, MOUSE_MOVE);
    }
    if (niayla.current_cursor !== jenniferlee) {
      niayla.current_cursor = jenniferlee;
      if (jenniferlee) {
        datra.style.cursor = niayla.cursor1;
      } else {
        datra.style.cursor = niayla.cursor0;
      }
    }
  };
  this.add_event_listener = function () {
    window.addEventListener("mousedown", this.trigger_mousedown, false);
    window.addEventListener("mouseup", this.trigger_mouseup, false);
    window.addEventListener("mousemove", this.trigger_mousemove, false);
    window.addEventListener("keyup", this.trigger_keyup, false);
    window.addEventListener("keydown", this.trigger_keydown, false);
  };
  this.remove_event_listener = function () {
    window.removeEventListener("mousedown", this.trigger_mousedown, false);
    window.removeEventListener("mouseup", this.trigger_mouseup, false);
    window.removeEventListener("mousemove", this.trigger_mousemove, false);
    window.removeEventListener("keyup", this.trigger_keyup, false);
    window.removeEventListener("keydown", this.trigger_keydown, false);
  };
}
function open_twitter() {
  Utils.open_in_new_box("https://twitter.com/intent/tweet?text=I%20survived%20" + user.day + "%20days%20with%20" + user.die.score + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
}
function open_facebook() {
  Utils.open_in_new_box("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
}
function Scoreboard(zyeon, latae) {
  this.can = zyeon;
  this.ctx = latae;
  var izayiah = this;
  this.enable_interface = false;
  this.sb = {id: document.getElementById("scoreboard"), style: document.getElementById("scoreboard").style, height: 0, translate: {x: 0, y: 0}, update: function () {
    this.style.left = this.translate.x + "px";
    this.style.top = this.translate.y + "px";
  }, init: function () {
    this.id.innerHTML = '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' + user.die.howdie + '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' + LANG[TEXT.DAYS_SURVIVED] + " : " + user.day + '</div><div class="stats"> ' + LANG[TEXT.KILL] + " : " + user.die.kill + "</div></div>" + '<div id="flexDisplay"><div id="score"> ' + LANG[TEXT.SCORE] + " : " + user.die.score + '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' + user.die.bank + " " + LANG[TEXT.POINTS] + '</div></div><div id="shop_points">' + LANG[TEXT.KIT_NEXT] + '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' + LANG[TEXT.TWITTER] + '</div><div class="social" id="fffacebook">' + LANG[TEXT.FACEBOOK] + '</div></div><div id="bbback">' + LANG[TEXT.BACK_TO_THE_GAME] + "</div>";
    this.style.display = "inline-block";
    document.getElementById("tttwitter").addEventListener("mouseup", open_twitter, false);
    document.getElementById("bbback").addEventListener("mouseup", function () {
      scoreboard.quit(ui.run);
    }, false);
    document.getElementById("fffacebook").addEventListener("mouseup", open_facebook, false);
    this.height = Math.floor(this.id.clientHeight / 2);
    getBreadAndScore();
  }};
  var preslei = 0;
  var warn = function () {
    izayiah.update();
    preslei++;
    if (preslei == 30) {
      izayiah.update();
      return;
    }
    window.setTimeout(warn, 33);
  };
  this.quit = function (kalanni) {
    if (izayiah.enable_interface === true) {
      izayiah.enable_interface = false;
      dorelia = kalanni;
      sifan = -1;
      jelicia();
      refreshAds();
    }
  };
  var dorelia;
  var sifan = -1;
  var jelicia = function () {
    izayiah.update();
    sifan++;
    if (sifan == 30) {
      izayiah.stop();
      izayiah.sb.style.display = "none";
      dorelia();
      return;
    }
    window.setTimeout(jelicia, 33);
  };
  this.is_run = false;
  this.stop = function () {
    this.is_run = false;
  };
  this.run = function () {
    check_ads();
    document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
    izayiah.sb.init();
    ui.trevda.style.display = "inline-block";
    izayiah.is_run = true;
    izayiah.enable_interface = true;
    sifan = -1;
    preslei = 0;
    warn();
  };
  this.update = function () {
    this.sb.translate.x = Math.floor(canw2 - 275);
    this.sb.translate.y = Math.floor(canh2 - this.sb.height - 28);
    ui.trevda.translate.x = this.sb.translate.x - 350;
    ui.trevda.translate.y = this.sb.translate.y + 0;
    ui.trevda.update();
    if (preslei != 30 || sifan != -1) {
      var quron = 0;
      if (preslei != 30) {
        var quron = 1500 / (preslei + 1) - 50;
      }
      if (sifan != -1) {
        var quron = -(1750 / (30 - sifan + 1) - 48);
      }
      this.sb.translate.y -= quron;
    }
    this.sb.update();
  };
  this.draw = function () {
    draw_fake_world();
    user.alert.draw("#FFF", "#000");
  };
}
!function () {
  "use strict";
  var elizama = function () {
    this.init();
  };
  elizama.prototype = {init: function () {
    var nashiyah = this || menah;
    return nashiyah._counter = 1e3, nashiyah._codecs = {}, nashiyah._howls = [], nashiyah._muted = false, nashiyah._volume = 1, nashiyah._canPlayEvent = "canplaythrough", nashiyah._navigator = "undefined" != typeof window && window.navigator ? window.navigator : null, nashiyah.masterGain = null, nashiyah.noAudio = false, nashiyah.usingWebAudio = true, nashiyah.autoSuspend = true, nashiyah.ctx = null, nashiyah.mobileAutoEnable = true, nashiyah._setup(), nashiyah;
  }, volume: function (momen) {
    var cebron = this || menah;
    if (momen = parseFloat(momen), cebron.ctx || taimur(), void 0 !== momen && momen >= 0 && momen <= 1) {
      if (cebron._volume = momen, cebron._muted) {
        return cebron;
      }
      cebron.usingWebAudio && (cebron.masterGain.gain.value = momen);
      for (var nikata = 0; nikata < cebron._howls.length; nikata++) {
        if (!cebron._howls[nikata]._webAudio) {
          for (var sussan = cebron._howls[nikata]._getSoundIds(), itianna = 0; itianna < sussan.length; itianna++) {
            var maiya = cebron._howls[nikata]._soundById(sussan[itianna]);
            maiya && maiya._node && (maiya._node.volume = maiya._volume * momen);
          }
        }
      }
      return cebron;
    }
    return cebron._volume;
  }, mute: function (shakiyah) {
    var kaybre = this || menah;
    kaybre.ctx || taimur();
    kaybre._muted = shakiyah;
    kaybre.usingWebAudio && (kaybre.masterGain.gain.value = shakiyah ? 0 : kaybre._volume);
    for (var karan = 0; karan < kaybre._howls.length; karan++) {
      if (!kaybre._howls[karan]._webAudio) {
        for (var renny = kaybre._howls[karan]._getSoundIds(), cord = 0; cord < renny.length; cord++) {
          var sevi = kaybre._howls[karan]._soundById(renny[cord]);
          sevi && sevi._node && (sevi._node.muted = !!shakiyah || sevi._muted);
        }
      }
    }
    return kaybre;
  }, unload: function () {
    for (var elin = this || menah, miryah = elin._howls.length - 1; miryah >= 0; miryah--) {
      elin._howls[miryah].unload();
    }
    return elin.usingWebAudio && elin.ctx && void 0 !== elin.ctx.close && (elin.ctx.close(), elin.ctx = null, taimur()), elin;
  }, codecs: function (shanreka) {
    return (this || menah)._codecs[shanreka.replace(/^x-/, "")];
  }, _setup: function () {
    var malachi = this || menah;
    if (malachi.state = malachi.ctx ? malachi.ctx.state || "running" : "running", malachi._autoSuspend(), !malachi.usingWebAudio) {
      if ("undefined" != typeof Audio) {
        try {
          var colicia = new Audio;
          void 0 === colicia.oncanplaythrough && (malachi._canPlayEvent = "canplay");
        } catch (lethie) {
          malachi.noAudio = true;
        }
      } else {
        malachi.noAudio = true;
      }
    }
    try {
      var colicia = new Audio;
      colicia.muted && (malachi.noAudio = true);
    } catch (darzell) {}
    return malachi.noAudio || malachi._setupCodecs(), malachi;
  }, _setupCodecs: function () {
    var josten = this || menah, tadayoshi = null;
    try {
      tadayoshi = "undefined" != typeof Audio ? new Audio : null;
    } catch (dajanique) {
      return josten;
    }
    if (!tadayoshi || "function" != typeof tadayoshi.canPlayType) {
      return josten;
    }
    var gelena = tadayoshi.canPlayType("audio/mpeg;").replace(/^no$/, ""), rekita = josten._navigator && josten._navigator.userAgent.match(/OPR\/([0-6].)/g), nicholl = rekita && parseInt(rekita[0].split("/")[1], 10) < 33;
    return josten._codecs = {mp3: !(nicholl || !gelena && !tadayoshi.canPlayType("audio/mp3;").replace(/^no$/, "")), mpeg: !!gelena, opus: !!tadayoshi.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""), ogg: !!tadayoshi.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""), oga: !!tadayoshi.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""), wav: !!tadayoshi.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ""), aac: !!tadayoshi.canPlayType("audio/aac;").replace(/^no$/, ""), caf: !!tadayoshi.canPlayType("audio/x-caf;").replace(/^no$/, ""), m4a: !!(tadayoshi.canPlayType("audio/x-m4a;") || tadayoshi.canPlayType("audio/m4a;") || tadayoshi.canPlayType("audio/aac;")).replace(/^no$/, ""), mp4: !!(tadayoshi.canPlayType("audio/x-mp4;") || tadayoshi.canPlayType("audio/mp4;") || tadayoshi.canPlayType("audio/aac;")).replace(/^no$/, ""), weba: !!tadayoshi.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""), webm: !!tadayoshi.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""), dolby: !!tadayoshi.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""), flac: !!(tadayoshi.canPlayType("audio/x-flac;") || tadayoshi.canPlayType("audio/flac;")).replace(/^no$/, "")}, josten;
  }, _enableMobileAudio: function () {
    var miricle = this || menah, sharini = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(miricle._navigator && miricle._navigator.userAgent), elexus = !!("ontouchend" in window || miricle._navigator && miricle._navigator.maxTouchPoints > 0 || miricle._navigator && miricle._navigator.msMaxTouchPoints > 0);
    if (!miricle._mobileEnabled && miricle.ctx && (sharini || elexus)) {
      miricle._mobileEnabled = false;
      miricle._mobileUnloaded || 44100 === miricle.ctx.sampleRate || (miricle._mobileUnloaded = true, miricle.unload());
      miricle._scratchBuffer = miricle.ctx.createBuffer(1, 1, 22050);
      var xoel = function () {
        menah._autoResume();
        var blannie = miricle.ctx.createBufferSource();
        blannie.buffer = miricle._scratchBuffer;
        blannie.connect(miricle.ctx.destination);
        void 0 === blannie.start ? blannie.noteOn(0) : blannie.start(0);
        "function" == typeof miricle.ctx.resume && miricle.ctx.resume();
        blannie.onended = function () {
          blannie.disconnect(0);
          miricle._mobileEnabled = true;
          miricle.mobileAutoEnable = false;
          document.removeEventListener("touchend", xoel, true);
        };
      };
      return document.addEventListener("touchend", xoel, true), miricle;
    }
  }, _autoSuspend: function () {
    var thayle = this;
    if (thayle.autoSuspend && thayle.ctx && void 0 !== thayle.ctx.suspend && menah.usingWebAudio) {
      for (var vontrell = 0; vontrell < thayle._howls.length; vontrell++) {
        if (thayle._howls[vontrell]._webAudio) {
          for (var dula = 0; dula < thayle._howls[vontrell]._sounds.length; dula++) {
            if (!thayle._howls[vontrell]._sounds[dula]._paused) {
              return thayle;
            }
          }
        }
      }
      return thayle._suspendTimer && clearTimeout(thayle._suspendTimer), thayle._suspendTimer = setTimeout(function () {
        thayle.autoSuspend && (thayle._suspendTimer = null, thayle.state = "suspending", thayle.ctx.suspend().then(function () {
          thayle.state = "suspended";
          thayle._resumeAfterSuspend && (delete thayle._resumeAfterSuspend, thayle._autoResume());
        }));
      }, 3e4), thayle;
    }
  }, _autoResume: function () {
    var jackie = this;
    if (jackie.ctx && void 0 !== jackie.ctx.resume && menah.usingWebAudio) {
      return "running" === jackie.state && jackie._suspendTimer ? (clearTimeout(jackie._suspendTimer), jackie._suspendTimer = null) : "suspended" === jackie.state ? (jackie.ctx.resume().then(function () {
        jackie.state = "running";
        for (var tru = 0; tru < jackie._howls.length; tru++) {
          jackie._howls[tru]._emit("resume");
        }
      }), jackie._suspendTimer && (clearTimeout(jackie._suspendTimer), jackie._suspendTimer = null)) : "suspending" === jackie.state && (jackie._resumeAfterSuspend = true), jackie;
    }
  }};
  var menah = new elizama, essined = function (oreva) {
    var monekia = this;
    if (!oreva.src || 0 === oreva.src.length) {
      return void console.error("An array of source files must be passed with any new Howl.");
    }
    monekia.init(oreva);
  };
  essined.prototype = {init: function (ahva) {
    var renu = this;
    return menah.ctx || taimur(), renu._autoplay = ahva.autoplay || false, renu._format = "string" != typeof ahva.format ? ahva.format : [ahva.format], renu._html5 = ahva.html5 || false, renu._muted = ahva.mute || false, renu._loop = ahva.loop || false, renu._pool = ahva.pool || 5, renu._preload = "boolean" != typeof ahva.preload || ahva.preload, renu._rate = ahva.rate || 1, renu._sprite = ahva.sprite || {}, renu._src = "string" != typeof ahva.src ? ahva.src : [ahva.src], renu._volume = void 0 !== ahva.volume ? ahva.volume : 1, renu._duration = 0, renu._state = "unloaded", renu._sounds = [], renu._endTimers = {}, renu._queue = [], renu._onend = ahva.onend ? [{fn: ahva.onend}] : [], renu._onfade = ahva.onfade ? [{fn: ahva.onfade}] : [], renu._onload = ahva.onload ? [{fn: ahva.onload}] : [], renu._onloaderror = ahva.onloaderror ? [{fn: ahva.onloaderror}] : [], renu._onpause = ahva.onpause ? [{fn: ahva.onpause}] : [], renu._onplay = ahva.onplay ? [{fn: ahva.onplay}] : [], renu._onstop = ahva.onstop ? [{fn: ahva.onstop}] : [], renu._onmute = ahva.onmute ? [{fn: ahva.onmute}] : [], renu._onvolume = ahva.onvolume ? [{fn: ahva.onvolume}] : [], renu._onrate = ahva.onrate ? [{fn: ahva.onrate}] : [], renu._onseek = ahva.onseek ? [{fn: ahva.onseek}] : [], renu._onresume = [], renu._webAudio = menah.usingWebAudio && !renu._html5, void 0 !== menah.ctx && menah.ctx && menah.mobileAutoEnable && menah._enableMobileAudio(), menah._howls.push(renu), renu._autoplay && renu._queue.push({event: "play", action: function () {
      renu.play();
    }}), renu._preload && renu.load(), renu;
  }, load: function () {
    var jonquin = this, zaeon = null;
    if (menah.noAudio) {
      return void jonquin._emit("loaderror", null, "No audio support.");
    }
    "string" == typeof jonquin._src && (jonquin._src = [jonquin._src]);
    for (var kingzley = 0; kingzley < jonquin._src.length; kingzley++) {
      var busra, kasinda;
      if (jonquin._format && jonquin._format[kingzley]) {
        busra = jonquin._format[kingzley];
      } else {
        if ("string" != typeof (kasinda = jonquin._src[kingzley])) {
          jonquin._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
          continue;
        }
        busra = /^data:audio\/([^;,]+);/i.exec(kasinda);
        busra || (busra = /\.([^.]+)$/.exec(kasinda.split("?", 1)[0]));
        busra && (busra = busra[1].toLowerCase());
      }
      if (busra || console.warn('No file extension was found. Consider using the "format" property or specify an extension.'), busra && menah.codecs(busra)) {
        zaeon = jonquin._src[kingzley];
        break;
      }
    }
    return zaeon ? (jonquin._src = zaeon, jonquin._state = "loading", "https:" === window.location.protocol && "http:" === zaeon.slice(0, 5) && (jonquin._html5 = true, jonquin._webAudio = false), new trevonna(jonquin), jonquin._webAudio && omaurion(jonquin), jonquin) : void jonquin._emit("loaderror", null, "No codec support for selected audio sources.");
  }, play: function (baptiste, joh) {
    var sanora = this, devale = null;
    if ("number" == typeof baptiste) {
      devale = baptiste;
      baptiste = null;
    } else {
      if ("string" == typeof baptiste && "loaded" === sanora._state && !sanora._sprite[baptiste]) {
        return null;
      }
      if (void 0 === baptiste) {
        baptiste = "__default";
        for (var izadora = 0, likita = 0; likita < sanora._sounds.length; likita++) {
          sanora._sounds[likita]._paused && !sanora._sounds[likita]._ended && (izadora++, devale = sanora._sounds[likita]._id);
        }
        1 === izadora ? baptiste = null : devale = null;
      }
    }
    var tatia = devale ? sanora._soundById(devale) : sanora._inactiveSound();
    if (!tatia) {
      return null;
    }
    if (devale && !baptiste && (baptiste = tatia._sprite || "__default"), "loaded" !== sanora._state) {
      tatia._sprite = baptiste;
      tatia._ended = false;
      var skyeler = tatia._id;
      return sanora._queue.push({event: "play", action: function () {
        sanora.play(skyeler);
      }}), skyeler;
    }
    if (devale && !tatia._paused) {
      return joh || setTimeout(function () {
        sanora._emit("play", tatia._id);
      }, 0), tatia._id;
    }
    sanora._webAudio && menah._autoResume();
    var demyiah = Math.max(0, tatia._seek > 0 ? tatia._seek : sanora._sprite[baptiste][0] / 1e3), aishling = Math.max(0, (sanora._sprite[baptiste][0] + sanora._sprite[baptiste][1]) / 1e3 - demyiah), raisha = 1e3 * aishling / Math.abs(tatia._rate);
    tatia._paused = false;
    tatia._ended = false;
    tatia._sprite = baptiste;
    tatia._seek = demyiah;
    tatia._start = sanora._sprite[baptiste][0] / 1e3;
    tatia._stop = (sanora._sprite[baptiste][0] + sanora._sprite[baptiste][1]) / 1e3;
    tatia._loop = !(!tatia._loop && !sanora._sprite[baptiste][2]);
    var bartolome = tatia._node;
    if (sanora._webAudio) {
      var sejla = function () {
        sanora._refreshBuffer(tatia);
        var emary = tatia._muted || sanora._muted ? 0 : tatia._volume;
        bartolome.gain.setValueAtTime(emary, menah.ctx.currentTime);
        tatia._playStart = menah.ctx.currentTime;
        void 0 === bartolome.bufferSource.start ? tatia._loop ? bartolome.bufferSource.noteGrainOn(0, demyiah, 86400) : bartolome.bufferSource.noteGrainOn(0, demyiah, aishling) : tatia._loop ? bartolome.bufferSource.start(0, demyiah, 86400) : bartolome.bufferSource.start(0, demyiah, aishling);
        raisha !== 2e308 && (sanora._endTimers[tatia._id] = setTimeout(sanora._ended.bind(sanora, tatia), raisha));
        joh || setTimeout(function () {
          sanora._emit("play", tatia._id);
        }, 0);
      }, nojus = "running" === menah.state;
      if ("loaded" === sanora._state && nojus) {
        sejla();
      } else {
        var athyna = nojus || "loaded" !== sanora._state ? "load" : "resume";
        sanora.once(athyna, sejla, nojus ? tatia._id : null);
        sanora._clearTimer(tatia._id);
      }
    } else {
      var dreylon = function () {
        bartolome.currentTime = demyiah;
        bartolome.muted = tatia._muted || sanora._muted || menah._muted || bartolome.muted;
        bartolome.volume = tatia._volume * menah.volume();
        bartolome.playbackRate = tatia._rate;
        bartolome.play();
        raisha !== 2e308 && (sanora._endTimers[tatia._id] = setTimeout(sanora._ended.bind(sanora, tatia), raisha));
        joh || sanora._emit("play", tatia._id);
      }, maudeen = "loaded" === sanora._state && (window && window.ejecta || !bartolome.readyState && menah._navigator.isCocoonJS);
      if (4 === bartolome.readyState || maudeen) {
        dreylon();
      } else {
        var leidi = function () {
          dreylon();
          bartolome.removeEventListener(menah._canPlayEvent, leidi, false);
        };
        bartolome.addEventListener(menah._canPlayEvent, leidi, false);
        sanora._clearTimer(tatia._id);
      }
    }
    return tatia._id;
  }, pause: function (sylvanus) {
    var flavis = this;
    if ("loaded" !== flavis._state) {
      return flavis._queue.push({event: "pause", action: function () {
        flavis.pause(sylvanus);
      }}), flavis;
    }
    for (var albano = flavis._getSoundIds(sylvanus), orah = 0; orah < albano.length; orah++) {
      flavis._clearTimer(albano[orah]);
      var jerane = flavis._soundById(albano[orah]);
      if (jerane && !jerane._paused && (jerane._seek = flavis.seek(albano[orah]), jerane._rateSeek = 0, jerane._paused = true, flavis._stopFade(albano[orah]), jerane._node)) {
        if (flavis._webAudio) {
          if (!jerane._node.bufferSource) {
            continue;
          }
          void 0 === jerane._node.bufferSource.stop ? jerane._node.bufferSource.noteOff(0) : jerane._node.bufferSource.stop(0);
          flavis._cleanBuffer(jerane._node);
        } else {
          ;
          isNaN(jerane._node.duration) && jerane._node.duration !== 2e308 || jerane._node.pause();
        }
      }
      arguments[1] || flavis._emit("pause", jerane ? jerane._id : null);
    }
    return flavis;
  }, stop: function (merritt, jonson) {
    var brendell = this;
    if ("loaded" !== brendell._state) {
      return brendell._queue.push({event: "stop", action: function () {
        brendell.stop(merritt);
      }}), brendell;
    }
    for (var jafar = brendell._getSoundIds(merritt), shekayla = 0; shekayla < jafar.length; shekayla++) {
      brendell._clearTimer(jafar[shekayla]);
      var nakyra = brendell._soundById(jafar[shekayla]);
      nakyra && (nakyra._seek = nakyra._start || 0, nakyra._rateSeek = 0, nakyra._paused = true, nakyra._ended = true, brendell._stopFade(jafar[shekayla]), nakyra._node && (brendell._webAudio ? nakyra._node.bufferSource && (void 0 === nakyra._node.bufferSource.stop ? nakyra._node.bufferSource.noteOff(0) : nakyra._node.bufferSource.stop(0), brendell._cleanBuffer(nakyra._node)) : isNaN(nakyra._node.duration) && nakyra._node.duration !== 2e308 || (nakyra._node.currentTime = nakyra._start || 0, nakyra._node.pause())), jonson || brendell._emit("stop", nakyra._id));
    }
    return brendell;
  }, mute: function (shameekia, kayleann) {
    var tarkesha = this;
    if ("loaded" !== tarkesha._state) {
      return tarkesha._queue.push({event: "mute", action: function () {
        tarkesha.mute(shameekia, kayleann);
      }}), tarkesha;
    }
    if (void 0 === kayleann) {
      if ("boolean" != typeof shameekia) {
        return tarkesha._muted;
      }
      tarkesha._muted = shameekia;
    }
    for (var kehly = tarkesha._getSoundIds(kayleann), iridian = 0; iridian < kehly.length; iridian++) {
      var tyandre = tarkesha._soundById(kehly[iridian]);
      tyandre && (tyandre._muted = shameekia, tarkesha._webAudio && tyandre._node ? tyandre._node.gain.setValueAtTime(shameekia ? 0 : tyandre._volume, menah.ctx.currentTime) : tyandre._node && (tyandre._node.muted = !!menah._muted || shameekia), tarkesha._emit("mute", tyandre._id));
    }
    return tarkesha;
  }, volume: function () {
    var adey, corraine, cutina = this, katarina = arguments;
    if (0 === katarina.length) {
      return cutina._volume;
    }
    if (1 === katarina.length || 2 === katarina.length && void 0 === katarina[1]) {
      cutina._getSoundIds().indexOf(katarina[0]) >= 0 ? corraine = parseInt(katarina[0], 10) : adey = parseFloat(katarina[0]);
    } else {
      katarina.length >= 2 && (adey = parseFloat(katarina[0]), corraine = parseInt(katarina[1], 10));
    }
    var shayaan;
    if (!(void 0 !== adey && adey >= 0 && adey <= 1)) {
      return shayaan = corraine ? cutina._soundById(corraine) : cutina._sounds[0], shayaan ? shayaan._volume : 0;
    }
    if ("loaded" !== cutina._state) {
      return cutina._queue.push({event: "volume", action: function () {
        cutina.volume.apply(cutina, katarina);
      }}), cutina;
    }
    void 0 === corraine && (cutina._volume = adey);
    corraine = cutina._getSoundIds(corraine);
    for (var amous = 0; amous < corraine.length; amous++) {
      ;
      (shayaan = cutina._soundById(corraine[amous])) && (shayaan._volume = adey, katarina[2] || cutina._stopFade(corraine[amous]), cutina._webAudio && shayaan._node && !shayaan._muted ? shayaan._node.gain.setValueAtTime(adey, menah.ctx.currentTime) : shayaan._node && !shayaan._muted && (shayaan._node.volume = adey * menah.volume()), cutina._emit("volume", shayaan._id));
    }
    return cutina;
  }, fade: function (shyaire, authar, xamora, levinia) {
    var hershy = this, roxeanne = Math.abs(shyaire - authar), natalea = shyaire > authar ? "out" : "in", kalayia = roxeanne / .01, akili = kalayia > 0 ? xamora / kalayia : xamora;
    if (akili < 4 && (kalayia = Math.ceil(kalayia / (4 / akili)), akili = 4), "loaded" !== hershy._state) {
      return hershy._queue.push({event: "fade", action: function () {
        hershy.fade(shyaire, authar, xamora, levinia);
      }}), hershy;
    }
    hershy.volume(shyaire, levinia);
    for (var sabria = hershy._getSoundIds(levinia), trinea = 0; trinea < sabria.length; trinea++) {
      var anaviah = hershy._soundById(sabria[trinea]);
      if (anaviah) {
        if (levinia || hershy._stopFade(sabria[trinea]), hershy._webAudio && !anaviah._muted) {
          var kupaa = menah.ctx.currentTime, celsey = kupaa + xamora / 1e3;
          anaviah._volume = shyaire;
          anaviah._node.gain.setValueAtTime(shyaire, kupaa);
          anaviah._node.gain.linearRampToValueAtTime(authar, celsey);
        }
        var garran = shyaire;
        anaviah._interval = setInterval(function (wrinley, cario) {
          kalayia > 0 && (garran += "in" === natalea ? .01 : -0.01);
          garran = Math.max(0, garran);
          garran = Math.min(1, garran);
          garran = Math.round(100 * garran) / 100;
          hershy._webAudio ? (void 0 === levinia && (hershy._volume = garran), cario._volume = garran) : hershy.volume(garran, wrinley, true);
          (authar < shyaire && garran <= authar || authar > shyaire && garran >= authar) && (clearInterval(cario._interval), cario._interval = null, hershy.volume(authar, wrinley), hershy._emit("fade", wrinley));
        }.bind(hershy, sabria[trinea], anaviah), akili);
      }
    }
    return hershy;
  }, _stopFade: function (joylin) {
    var ebaristo = this, deiby = ebaristo._soundById(joylin);
    return deiby && deiby._interval && (ebaristo._webAudio && deiby._node.gain.cancelScheduledValues(menah.ctx.currentTime), clearInterval(deiby._interval), deiby._interval = null, ebaristo._emit("fade", joylin)), ebaristo;
  }, loop: function () {
    var mucaad, smaya, jalie, innaya = this, dustyn = arguments;
    if (0 === dustyn.length) {
      return innaya._loop;
    }
    if (1 === dustyn.length) {
      if ("boolean" != typeof dustyn[0]) {
        return !!(jalie = innaya._soundById(parseInt(dustyn[0], 10))) && jalie._loop;
      }
      mucaad = dustyn[0];
      innaya._loop = mucaad;
    } else {
      2 === dustyn.length && (mucaad = dustyn[0], smaya = parseInt(dustyn[1], 10));
    }
    for (var marle = innaya._getSoundIds(smaya), jiren = 0; jiren < marle.length; jiren++) {
      ;
      (jalie = innaya._soundById(marle[jiren])) && (jalie._loop = mucaad, innaya._webAudio && jalie._node && jalie._node.bufferSource && (jalie._node.bufferSource.loop = mucaad, mucaad && (jalie._node.bufferSource.loopStart = jalie._start || 0, jalie._node.bufferSource.loopEnd = jalie._stop)));
    }
    return innaya;
  }, rate: function () {
    var naeisha, simrit, sakhi = this, rieker = arguments;
    if (0 === rieker.length) {
      simrit = sakhi._sounds[0]._id;
    } else {
      if (1 === rieker.length) {
        var sodbileg = sakhi._getSoundIds(), demitrie = sodbileg.indexOf(rieker[0]);
        demitrie >= 0 ? simrit = parseInt(rieker[0], 10) : naeisha = parseFloat(rieker[0]);
      } else {
        2 === rieker.length && (naeisha = parseFloat(rieker[0]), simrit = parseInt(rieker[1], 10));
      }
    }
    var kamaura;
    if ("number" != typeof naeisha) {
      return kamaura = sakhi._soundById(simrit), kamaura ? kamaura._rate : sakhi._rate;
    }
    if ("loaded" !== sakhi._state) {
      return sakhi._queue.push({event: "rate", action: function () {
        sakhi.rate.apply(sakhi, rieker);
      }}), sakhi;
    }
    void 0 === simrit && (sakhi._rate = naeisha);
    simrit = sakhi._getSoundIds(simrit);
    for (var ryston = 0; ryston < simrit.length; ryston++) {
      if (kamaura = sakhi._soundById(simrit[ryston])) {
        kamaura._rateSeek = sakhi.seek(simrit[ryston]);
        kamaura._playStart = sakhi._webAudio ? menah.ctx.currentTime : kamaura._playStart;
        kamaura._rate = naeisha;
        sakhi._webAudio && kamaura._node && kamaura._node.bufferSource ? kamaura._node.bufferSource.playbackRate.value = naeisha : kamaura._node && (kamaura._node.playbackRate = naeisha);
        var ulissa = sakhi.seek(simrit[ryston]), tamyrah = (sakhi._sprite[kamaura._sprite][0] + sakhi._sprite[kamaura._sprite][1]) / 1e3 - ulissa, aleeka = 1e3 * tamyrah / Math.abs(kamaura._rate);
        !sakhi._endTimers[simrit[ryston]] && kamaura._paused || (sakhi._clearTimer(simrit[ryston]), sakhi._endTimers[simrit[ryston]] = setTimeout(sakhi._ended.bind(sakhi, kamaura), aleeka));
        sakhi._emit("rate", kamaura._id);
      }
    }
    return sakhi;
  }, seek: function () {
    var tionnie, nyria, chau = this, jaelah = arguments;
    if (0 === jaelah.length) {
      nyria = chau._sounds[0]._id;
    } else {
      if (1 === jaelah.length) {
        var chasten = chau._getSoundIds(), calliegh = chasten.indexOf(jaelah[0]);
        calliegh >= 0 ? nyria = parseInt(jaelah[0], 10) : (nyria = chau._sounds[0]._id, tionnie = parseFloat(jaelah[0]));
      } else {
        2 === jaelah.length && (tionnie = parseFloat(jaelah[0]), nyria = parseInt(jaelah[1], 10));
      }
    }
    if (void 0 === nyria) {
      return chau;
    }
    if ("loaded" !== chau._state) {
      return chau._queue.push({event: "seek", action: function () {
        chau.seek.apply(chau, jaelah);
      }}), chau;
    }
    var milas = chau._soundById(nyria);
    if (milas) {
      if (!("number" == typeof tionnie && tionnie >= 0)) {
        if (chau._webAudio) {
          var tatyonna = chau.playing(nyria) ? menah.ctx.currentTime - milas._playStart : 0, jonet = milas._rateSeek ? milas._rateSeek - milas._seek : 0;
          return milas._seek + (jonet + tatyonna * Math.abs(milas._rate));
        }
        return milas._node.currentTime;
      }
      var zodi = chau.playing(nyria);
      zodi && chau.pause(nyria, true);
      milas._seek = tionnie;
      milas._ended = false;
      chau._clearTimer(nyria);
      zodi && chau.play(nyria, true);
      !chau._webAudio && milas._node && (milas._node.currentTime = tionnie);
      chau._emit("seek", nyria);
    }
    return chau;
  }, playing: function (tran) {
    var nitzia = this;
    if ("number" == typeof tran) {
      var moayed = nitzia._soundById(tran);
      return !!moayed && !moayed._paused;
    }
    for (var jadarian = 0; jadarian < nitzia._sounds.length; jadarian++) {
      if (!nitzia._sounds[jadarian]._paused) {
        return true;
      }
    }
    return false;
  }, duration: function (micheale) {
    var samatar = this, vinal = samatar._duration, valek = samatar._soundById(micheale);
    return valek && (vinal = samatar._sprite[valek._sprite][1] / 1e3), vinal;
  }, state: function () {
    return this._state;
  }, unload: function () {
    for (var aree = this, desery = aree._sounds, josephpaul = 0; josephpaul < desery.length; josephpaul++) {
      ;
      (desery[josephpaul]._paused || aree.stop(desery[josephpaul]._id), !aree._webAudio) && (/MSIE |Trident\//.test(menah._navigator && menah._navigator.userAgent) || (desery[josephpaul]._node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"), desery[josephpaul]._node.removeEventListener("error", desery[josephpaul]._errorFn, false), desery[josephpaul]._node.removeEventListener(menah._canPlayEvent, desery[josephpaul]._loadFn, false));
      delete desery[josephpaul]._node;
      aree._clearTimer(desery[josephpaul]._id);
      var yazen = menah._howls.indexOf(aree);
      yazen >= 0 && menah._howls.splice(yazen, 1);
    }
    var daylin = true;
    for (josephpaul = 0; josephpaul < menah._howls.length; josephpaul++) {
      if (menah._howls[josephpaul]._src === aree._src) {
        daylin = false;
        break;
      }
    }
    return kena && daylin && delete kena[aree._src], menah.noAudio = false, aree._state = "unloaded", aree._sounds = [], aree = null, null;
  }, on: function (hartleigh, augus, aber, brinly) {
    var sivani = this, devantre = sivani["_on" + hartleigh];
    return "function" == typeof augus && devantre.push(brinly ? {id: aber, fn: augus, once: brinly} : {id: aber, fn: augus}), sivani;
  }, off: function (hather, denni, jesselin) {
    var payeng = this, lynex = payeng["_on" + hather], audrea = 0;
    if ("number" == typeof denni && (jesselin = denni, denni = null), denni || jesselin) {
      for (audrea = 0; audrea < lynex.length; audrea++) {
        var aidaliz = jesselin === lynex[audrea].id;
        if (denni === lynex[audrea].fn && aidaliz || !denni && aidaliz) {
          lynex.splice(audrea, 1);
          break;
        }
      }
    } else {
      if (hather) {
        payeng["_on" + hather] = [];
      } else {
        var izzak = Object.keys(payeng);
        for (audrea = 0; audrea < izzak.length; audrea++) {
          0 === izzak[audrea].indexOf("_on") && Array.isArray(payeng[izzak[audrea]]) && (payeng[izzak[audrea]] = []);
        }
      }
    }
    return payeng;
  }, once: function (jodee, jabree, xabian) {
    var alaska = this;
    return alaska.on(jodee, jabree, xabian, 1), alaska;
  }, _emit: function (genele, melvina, correan) {
    for (var damarae = this, jerod = damarae["_on" + genele], tyrita = jerod.length - 1; tyrita >= 0; tyrita--) {
      ;
      jerod[tyrita].id && jerod[tyrita].id !== melvina && "load" !== genele || (setTimeout(function (jeylah) {
        jeylah.call(this, melvina, correan);
      }.bind(damarae, jerod[tyrita].fn), 0), jerod[tyrita].once && damarae.off(genele, jerod[tyrita].fn, jerod[tyrita].id));
    }
    return damarae;
  }, _loadQueue: function () {
    var leilane = this;
    if (leilane._queue.length > 0) {
      var jardon = leilane._queue[0];
      leilane.once(jardon.event, function () {
        leilane._queue.shift();
        leilane._loadQueue();
      });
      jardon.action();
    }
    return leilane;
  }, _ended: function (tilford) {
    var pajtim = this, joelina = tilford._sprite;
    if (!pajtim._webAudio && pajtim._node && !pajtim._node.ended) {
      return setTimeout(pajtim._ended.bind(pajtim, tilford), 100), pajtim;
    }
    var novarose = !(!tilford._loop && !pajtim._sprite[joelina][2]);
    if (pajtim._emit("end", tilford._id), !pajtim._webAudio && novarose && pajtim.stop(tilford._id, true).play(tilford._id), pajtim._webAudio && novarose) {
      pajtim._emit("play", tilford._id);
      tilford._seek = tilford._start || 0;
      tilford._rateSeek = 0;
      tilford._playStart = menah.ctx.currentTime;
      var khyzer = 1e3 * (tilford._stop - tilford._start) / Math.abs(tilford._rate);
      pajtim._endTimers[tilford._id] = setTimeout(pajtim._ended.bind(pajtim, tilford), khyzer);
    }
    return pajtim._webAudio && !novarose && (tilford._paused = true, tilford._ended = true, tilford._seek = tilford._start || 0, tilford._rateSeek = 0, pajtim._clearTimer(tilford._id), pajtim._cleanBuffer(tilford._node), menah._autoSuspend()), pajtim._webAudio || novarose || pajtim.stop(tilford._id), pajtim;
  }, _clearTimer: function (davyn) {
    var serenia = this;
    return serenia._endTimers[davyn] && (clearTimeout(serenia._endTimers[davyn]), delete serenia._endTimers[davyn]), serenia;
  }, _soundById: function (mariagrazia) {
    for (var camala = this, orfalinda = 0; orfalinda < camala._sounds.length; orfalinda++) {
      if (mariagrazia === camala._sounds[orfalinda]._id) {
        return camala._sounds[orfalinda];
      }
    }
    return null;
  }, _inactiveSound: function () {
    var ramah = this;
    ramah._drain();
    for (var rahima = 0; rahima < ramah._sounds.length; rahima++) {
      if (ramah._sounds[rahima]._ended) {
        return ramah._sounds[rahima].reset();
      }
    }
    return new trevonna(ramah);
  }, _drain: function () {
    var leighna = this, ratzy = leighna._pool, giacobbe = 0, symba = 0;
    if (!(leighna._sounds.length < ratzy)) {
      for (symba = 0; symba < leighna._sounds.length; symba++) {
        leighna._sounds[symba]._ended && giacobbe++;
      }
      for (symba = leighna._sounds.length - 1; symba >= 0; symba--) {
        if (giacobbe <= ratzy) {
          return;
        }
        leighna._sounds[symba]._ended && (leighna._webAudio && leighna._sounds[symba]._node && leighna._sounds[symba]._node.disconnect(0), leighna._sounds.splice(symba, 1), giacobbe--);
      }
    }
  }, _getSoundIds: function (yaheem) {
    var zamarian = this;
    if (void 0 === yaheem) {
      for (var jaivion = [], yedida = 0; yedida < zamarian._sounds.length; yedida++) {
        jaivion.push(zamarian._sounds[yedida]._id);
      }
      return jaivion;
    }
    return [yaheem];
  }, _refreshBuffer: function (brayten) {
    var ulisess = this;
    return brayten._node.bufferSource = menah.ctx.createBufferSource(), brayten._node.bufferSource.buffer = kena[ulisess._src], brayten._panner ? brayten._node.bufferSource.connect(brayten._panner) : brayten._node.bufferSource.connect(brayten._node), brayten._node.bufferSource.loop = brayten._loop, brayten._loop && (brayten._node.bufferSource.loopStart = brayten._start || 0, brayten._node.bufferSource.loopEnd = brayten._stop), brayten._node.bufferSource.playbackRate.value = brayten._rate, ulisess;
  }, _cleanBuffer: function (currin) {
    var kronos = this;
    if (kronos._scratchBuffer) {
      currin.bufferSource.onended = null;
      currin.bufferSource.disconnect(0);
      try {
        currin.bufferSource.buffer = kronos._scratchBuffer;
      } catch (esmaralda) {}
    }
    return currin.bufferSource = null, kronos;
  }};
  var trevonna = function (kopelan) {
    this._parent = kopelan;
    this.init();
  };
  trevonna.prototype = {init: function () {
    var jackhenry = this, georgialee = jackhenry._parent;
    return jackhenry._muted = georgialee._muted, jackhenry._loop = georgialee._loop, jackhenry._volume = georgialee._volume, jackhenry._rate = georgialee._rate, jackhenry._seek = 0, jackhenry._paused = true, jackhenry._ended = true, jackhenry._sprite = "__default", jackhenry._id = ++menah._counter, georgialee._sounds.push(jackhenry), jackhenry.create(), jackhenry;
  }, create: function () {
    var babetta = this, karanveer = babetta._parent, crystale = menah._muted || babetta._muted || babetta._parent._muted ? 0 : babetta._volume;
    return karanveer._webAudio ? (babetta._node = void 0 === menah.ctx.createGain ? menah.ctx.createGainNode() : menah.ctx.createGain(), babetta._node.gain.setValueAtTime(crystale, menah.ctx.currentTime), babetta._node.paused = true, babetta._node.connect(menah.masterGain)) : (babetta._node = new Audio, babetta._errorFn = babetta._errorListener.bind(babetta), babetta._node.addEventListener("error", babetta._errorFn, false), babetta._loadFn = babetta._loadListener.bind(babetta), babetta._node.addEventListener(menah._canPlayEvent, babetta._loadFn, false), babetta._node.src = karanveer._src, babetta._node.preload = "auto", babetta._node.volume = crystale * menah.volume(), babetta._node.load()), babetta;
  }, reset: function () {
    var masa = this, kaisyn = masa._parent;
    return masa._muted = kaisyn._muted, masa._loop = kaisyn._loop, masa._volume = kaisyn._volume, masa._rate = kaisyn._rate, masa._seek = 0, masa._rateSeek = 0, masa._paused = true, masa._ended = true, masa._sprite = "__default", masa._id = ++menah._counter, masa;
  }, _errorListener: function () {
    var timmyah = this;
    timmyah._parent._emit("loaderror", timmyah._id, timmyah._node.error ? timmyah._node.error.code : 0);
    timmyah._node.removeEventListener("error", timmyah._errorFn, false);
  }, _loadListener: function () {
    var demira = this, ahlea = demira._parent;
    ahlea._duration = Math.ceil(10 * demira._node.duration) / 10;
    0 === Object.keys(ahlea._sprite).length && (ahlea._sprite = {__default: [0, 1e3 * ahlea._duration]});
    "loaded" !== ahlea._state && (ahlea._state = "loaded", ahlea._emit("load"), ahlea._loadQueue());
    demira._node.removeEventListener(menah._canPlayEvent, demira._loadFn, false);
  }};
  var kena = {}, omaurion = function (jacaden) {
    var tyhesia = jacaden._src;
    if (kena[tyhesia]) {
      return jacaden._duration = kena[tyhesia].duration, void myshayla(jacaden);
    }
    if (/^data:[^;]+;base64,/.test(tyhesia)) {
      for (var vonshae = atob(tyhesia.split(",")[1]), tytan = new Uint8Array(vonshae.length), amicia = 0; amicia < vonshae.length; ++amicia) {
        tytan[amicia] = vonshae.charCodeAt(amicia);
      }
      issiac(tytan.buffer, jacaden);
    } else {
      var dayshanay = new XMLHttpRequest;
      dayshanay.open("GET", tyhesia, true);
      dayshanay.responseType = "arraybuffer";
      dayshanay.onload = function () {
        var clinard = (dayshanay.status + "")[0];
        if ("0" !== clinard && "2" !== clinard && "3" !== clinard) {
          return void jacaden._emit("loaderror", null, "Failed loading audio file with status: " + dayshanay.status + ".");
        }
        issiac(dayshanay.response, jacaden);
      };
      dayshanay.onerror = function () {
        jacaden._webAudio && (jacaden._html5 = true, jacaden._webAudio = false, jacaden._sounds = [], delete kena[tyhesia], jacaden.load());
      };
      yordyn(dayshanay);
    }
  }, yordyn = function (kimberlyy) {
    try {
      kimberlyy.send();
    } catch (hellan) {
      kimberlyy.onerror();
    }
  }, issiac = function (kyneshia, kelleigh) {
    menah.ctx.decodeAudioData(kyneshia, function (danelia) {
      danelia && kelleigh._sounds.length > 0 && (kena[kelleigh._src] = danelia, myshayla(kelleigh, danelia));
    }, function () {
      kelleigh._emit("loaderror", null, "Decoding audio data failed.");
    });
  }, myshayla = function (roniesha, mckenze) {
    mckenze && !roniesha._duration && (roniesha._duration = mckenze.duration);
    0 === Object.keys(roniesha._sprite).length && (roniesha._sprite = {__default: [0, 1e3 * roniesha._duration]});
    "loaded" !== roniesha._state && (roniesha._state = "loaded", roniesha._emit("load"), roniesha._loadQueue());
  }, taimur = function () {
    try {
      "undefined" != typeof AudioContext ? menah.ctx = new AudioContext : "undefined" != typeof webkitAudioContext ? menah.ctx = new webkitAudioContext : menah.usingWebAudio = false;
    } catch (uraz) {
      menah.usingWebAudio = false;
    }
    var leonte = /iP(hone|od|ad)/.test(menah._navigator && menah._navigator.platform), raizel = menah._navigator && menah._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/), simeon = raizel ? parseInt(raizel[1], 10) : null;
    if (leonte && simeon && simeon < 9) {
      var quashawna = /safari/.test(menah._navigator && menah._navigator.userAgent.toLowerCase());
      (menah._navigator && menah._navigator.standalone && !quashawna || menah._navigator && !menah._navigator.standalone && !quashawna) && (menah.usingWebAudio = false);
    }
    menah.usingWebAudio && (menah.masterGain = void 0 === menah.ctx.createGain ? menah.ctx.createGainNode() : menah.ctx.createGain(), menah.masterGain.gain.value = menah._muted ? 0 : 1, menah.masterGain.connect(menah.ctx.destination));
    menah._setup();
  };
  "function" == typeof define && define.amd && define([], function () {
    return {Howler: menah, Howl: essined};
  });
  "undefined" != typeof exports && (exports.Howler = menah, exports.Howl = essined);
  "undefined" != typeof window ? (window.HowlerGlobal = elizama, window.Howler = menah, window.Howl = essined, window.Sound = trevonna) : "undefined" != typeof global && (global.HowlerGlobal = elizama, global.Howler = menah, global.Howl = essined, global.Sound = trevonna);
}();
!function () {
  "use strict";
  HowlerGlobal.prototype._pos = [0, 0, 0];
  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
  HowlerGlobal.prototype.stereo = function (sonji) {
    var shedric = this;
    if (!shedric.ctx || !shedric.ctx.listener) {
      return shedric;
    }
    for (var javanni = shedric._howls.length - 1; javanni >= 0; javanni--) {
      shedric._howls[javanni].stereo(sonji);
    }
    return shedric;
  };
  HowlerGlobal.prototype.pos = function (zyshawn, anayelly, jevontay) {
    var alori = this;
    return alori.ctx && alori.ctx.listener ? (anayelly = "number" != typeof anayelly ? alori._pos[1] : anayelly, jevontay = "number" != typeof jevontay ? alori._pos[2] : jevontay, "number" != typeof zyshawn ? alori._pos : (alori._pos = [zyshawn, anayelly, jevontay], alori.ctx.listener.setPosition(alori._pos[0], alori._pos[1], alori._pos[2]), alori)) : alori;
  };
  HowlerGlobal.prototype.orientation = function (ronni, aliena, shubha, lyall, ahed, cydne) {
    var gigette = this;
    if (!gigette.ctx || !gigette.ctx.listener) {
      return gigette;
    }
    var ginevieve = gigette._orientation;
    return aliena = "number" != typeof aliena ? ginevieve[1] : aliena, shubha = "number" != typeof shubha ? ginevieve[2] : shubha, lyall = "number" != typeof lyall ? ginevieve[3] : lyall, ahed = "number" != typeof ahed ? ginevieve[4] : ahed, cydne = "number" != typeof cydne ? ginevieve[5] : cydne, "number" != typeof ronni ? ginevieve : (gigette._orientation = [ronni, aliena, shubha, lyall, ahed, cydne], gigette.ctx.listener.setOrientation(ronni, aliena, shubha, lyall, ahed, cydne), gigette);
  };
  Howl.prototype.init = function (raevan) {
    return function (porcia) {
      var vu = this;
      return vu._orientation = porcia.orientation || [1, 0, 0], vu._stereo = porcia.stereo || null, vu._pos = porcia.pos || null, vu._pannerAttr = {coneInnerAngle: void 0 !== porcia.coneInnerAngle ? porcia.coneInnerAngle : 360, coneOuterAngle: void 0 !== porcia.coneOuterAngle ? porcia.coneOuterAngle : 360, coneOuterGain: void 0 !== porcia.coneOuterGain ? porcia.coneOuterGain : 0, distanceModel: void 0 !== porcia.distanceModel ? porcia.distanceModel : "inverse", maxDistance: void 0 !== porcia.maxDistance ? porcia.maxDistance : 1e4, panningModel: void 0 !== porcia.panningModel ? porcia.panningModel : "HRTF", refDistance: void 0 !== porcia.refDistance ? porcia.refDistance : 1, rolloffFactor: void 0 !== porcia.rolloffFactor ? porcia.rolloffFactor : 1}, vu._onstereo = porcia.onstereo ? [{fn: porcia.onstereo}] : [], vu._onpos = porcia.onpos ? [{fn: porcia.onpos}] : [], vu._onorientation = porcia.onorientation ? [{fn: porcia.onorientation}] : [], raevan.call(this, porcia);
    };
  }(Howl.prototype.init);
  Howl.prototype.stereo = function (apriel, rosalinda) {
    var etham = this;
    if (!etham._webAudio) {
      return etham;
    }
    if ("loaded" !== etham._state) {
      return etham._queue.push({event: "stereo", action: function () {
        etham.stereo(apriel, rosalinda);
      }}), etham;
    }
    var edword = void 0 === Howler.ctx.createStereoPanner ? "spatial" : "stereo";
    if (void 0 === rosalinda) {
      if ("number" != typeof apriel) {
        return etham._stereo;
      }
      etham._stereo = apriel;
      etham._pos = [apriel, 0, 0];
    }
    for (var nadal = etham._getSoundIds(rosalinda), karem = 0; karem < nadal.length; karem++) {
      var jekhi = etham._soundById(nadal[karem]);
      if (jekhi) {
        if ("number" != typeof apriel) {
          return jekhi._stereo;
        }
        jekhi._stereo = apriel;
        jekhi._pos = [apriel, 0, 0];
        jekhi._node && (jekhi._pannerAttr.panningModel = "equalpower", jekhi._panner && jekhi._panner.pan || izabellah(jekhi, edword), "spatial" === edword ? jekhi._panner.setPosition(apriel, 0, 0) : jekhi._panner.pan.value = apriel);
        etham._emit("stereo", jekhi._id);
      }
    }
    return etham;
  };
  Howl.prototype.pos = function (evalia, frandy, carlianna, mickyle) {
    var deaijah = this;
    if (!deaijah._webAudio) {
      return deaijah;
    }
    if ("loaded" !== deaijah._state) {
      return deaijah._queue.push({event: "pos", action: function () {
        deaijah.pos(evalia, frandy, carlianna, mickyle);
      }}), deaijah;
    }
    if (frandy = "number" != typeof frandy ? 0 : frandy, carlianna = "number" != typeof carlianna ? -0.5 : carlianna, void 0 === mickyle) {
      if ("number" != typeof evalia) {
        return deaijah._pos;
      }
      deaijah._pos = [evalia, frandy, carlianna];
    }
    for (var triste = deaijah._getSoundIds(mickyle), ovie = 0; ovie < triste.length; ovie++) {
      var kyriakos = deaijah._soundById(triste[ovie]);
      if (kyriakos) {
        if ("number" != typeof evalia) {
          return kyriakos._pos;
        }
        kyriakos._pos = [evalia, frandy, carlianna];
        kyriakos._node && (kyriakos._panner && !kyriakos._panner.pan || izabellah(kyriakos, "spatial"), kyriakos._panner.setPosition(evalia, frandy, carlianna));
        deaijah._emit("pos", kyriakos._id);
      }
    }
    return deaijah;
  };
  Howl.prototype.orientation = function (urena, christyanna, aretha, gwendalina) {
    var adryan = this;
    if (!adryan._webAudio) {
      return adryan;
    }
    if ("loaded" !== adryan._state) {
      return adryan._queue.push({event: "orientation", action: function () {
        adryan.orientation(urena, christyanna, aretha, gwendalina);
      }}), adryan;
    }
    if (christyanna = "number" != typeof christyanna ? adryan._orientation[1] : christyanna, aretha = "number" != typeof aretha ? adryan._orientation[2] : aretha, void 0 === gwendalina) {
      if ("number" != typeof urena) {
        return adryan._orientation;
      }
      adryan._orientation = [urena, christyanna, aretha];
    }
    for (var jerrylee = adryan._getSoundIds(gwendalina), marah = 0; marah < jerrylee.length; marah++) {
      var sema = adryan._soundById(jerrylee[marah]);
      if (sema) {
        if ("number" != typeof urena) {
          return sema._orientation;
        }
        sema._orientation = [urena, christyanna, aretha];
        sema._node && (sema._panner || (sema._pos || (sema._pos = adryan._pos || [0, 0, -0.5]), izabellah(sema, "spatial")), sema._panner.setOrientation(urena, christyanna, aretha));
        adryan._emit("orientation", sema._id);
      }
    }
    return adryan;
  };
  Howl.prototype.pannerAttr = function () {
    var donielle, dominee, arquilla, dolorosa = this, jalanni = arguments;
    if (!dolorosa._webAudio) {
      return dolorosa;
    }
    if (0 === jalanni.length) {
      return dolorosa._pannerAttr;
    }
    if (1 === jalanni.length) {
      if ("object" != typeof jalanni[0]) {
        return arquilla = dolorosa._soundById(parseInt(jalanni[0], 10)), arquilla ? arquilla._pannerAttr : dolorosa._pannerAttr;
      }
      donielle = jalanni[0];
      void 0 === dominee && (dolorosa._pannerAttr = {coneInnerAngle: void 0 !== donielle.coneInnerAngle ? donielle.coneInnerAngle : dolorosa._coneInnerAngle, coneOuterAngle: void 0 !== donielle.coneOuterAngle ? donielle.coneOuterAngle : dolorosa._coneOuterAngle, coneOuterGain: void 0 !== donielle.coneOuterGain ? donielle.coneOuterGain : dolorosa._coneOuterGain, distanceModel: void 0 !== donielle.distanceModel ? donielle.distanceModel : dolorosa._distanceModel, maxDistance: void 0 !== donielle.maxDistance ? donielle.maxDistance : dolorosa._maxDistance, panningModel: void 0 !== donielle.panningModel ? donielle.panningModel : dolorosa._panningModel, refDistance: void 0 !== donielle.refDistance ? donielle.refDistance : dolorosa._refDistance, rolloffFactor: void 0 !== donielle.rolloffFactor ? donielle.rolloffFactor : dolorosa._rolloffFactor});
    } else {
      2 === jalanni.length && (donielle = jalanni[0], dominee = parseInt(jalanni[1], 10));
    }
    for (var anda = dolorosa._getSoundIds(dominee), rozenia = 0; rozenia < anda.length; rozenia++) {
      if (arquilla = dolorosa._soundById(anda[rozenia])) {
        var amileah = arquilla._pannerAttr;
        amileah = {coneInnerAngle: void 0 !== donielle.coneInnerAngle ? donielle.coneInnerAngle : amileah.coneInnerAngle, coneOuterAngle: void 0 !== donielle.coneOuterAngle ? donielle.coneOuterAngle : amileah.coneOuterAngle, coneOuterGain: void 0 !== donielle.coneOuterGain ? donielle.coneOuterGain : amileah.coneOuterGain, distanceModel: void 0 !== donielle.distanceModel ? donielle.distanceModel : amileah.distanceModel, maxDistance: void 0 !== donielle.maxDistance ? donielle.maxDistance : amileah.maxDistance, panningModel: void 0 !== donielle.panningModel ? donielle.panningModel : amileah.panningModel, refDistance: void 0 !== donielle.refDistance ? donielle.refDistance : amileah.refDistance, rolloffFactor: void 0 !== donielle.rolloffFactor ? donielle.rolloffFactor : amileah.rolloffFactor};
        var autumnrayne = arquilla._panner;
        autumnrayne ? (autumnrayne.coneInnerAngle = amileah.coneInnerAngle, autumnrayne.coneOuterAngle = amileah.coneOuterAngle, autumnrayne.coneOuterGain = amileah.coneOuterGain, autumnrayne.distanceModel = amileah.distanceModel, autumnrayne.maxDistance = amileah.maxDistance, autumnrayne.panningModel = amileah.panningModel, autumnrayne.refDistance = amileah.refDistance, autumnrayne.rolloffFactor = amileah.rolloffFactor) : (arquilla._pos || (arquilla._pos = dolorosa._pos || [0, 0, -0.5]), izabellah(arquilla, "spatial"));
      }
    }
    return dolorosa;
  };
  Sound.prototype.init = function (khalisha) {
    return function () {
      var akeil = this, gregario = akeil._parent;
      akeil._orientation = gregario._orientation;
      akeil._stereo = gregario._stereo;
      akeil._pos = gregario._pos;
      akeil._pannerAttr = gregario._pannerAttr;
      khalisha.call(this);
      akeil._stereo ? gregario.stereo(akeil._stereo) : akeil._pos && gregario.pos(akeil._pos[0], akeil._pos[1], akeil._pos[2], akeil._id);
    };
  }(Sound.prototype.init);
  Sound.prototype.reset = function (brenicia) {
    return function () {
      var karthik = this, shastity = karthik._parent;
      return karthik._orientation = shastity._orientation, karthik._pos = shastity._pos, karthik._pannerAttr = shastity._pannerAttr, brenicia.call(this);
    };
  }(Sound.prototype.reset);
  var izabellah = function (anaira, walfre) {
    walfre = walfre || "spatial";
    "spatial" === walfre ? (anaira._panner = Howler.ctx.createPanner(), anaira._panner.coneInnerAngle = anaira._pannerAttr.coneInnerAngle, anaira._panner.coneOuterAngle = anaira._pannerAttr.coneOuterAngle, anaira._panner.coneOuterGain = anaira._pannerAttr.coneOuterGain, anaira._panner.distanceModel = anaira._pannerAttr.distanceModel, anaira._panner.maxDistance = anaira._pannerAttr.maxDistance, anaira._panner.panningModel = anaira._pannerAttr.panningModel, anaira._panner.refDistance = anaira._pannerAttr.refDistance, anaira._panner.rolloffFactor = anaira._pannerAttr.rolloffFactor, anaira._panner.setPosition(anaira._pos[0], anaira._pos[1], anaira._pos[2]), anaira._panner.setOrientation(anaira._orientation[0], anaira._orientation[1], anaira._orientation[2])) : (anaira._panner = Howler.ctx.createStereoPanner(), anaira._panner.pan.value = anaira._stereo);
    anaira._panner.connect(anaira._node);
    anaira._paused || anaira._parent.pause(anaira._id, true).play(anaira._id);
  };
}();
var VOLUME = {AMB: 1, FX: 1}, CONST_AUDIO = {SEA_DELAY: 12, SEA_FADE: 5e3, FOREST_DELAY: 12, FOREST_FADE: 5e3, SNOW_DELAY: 12, SNOW_FADE: 5e3, TRANSITION: 3e3, DISABLE_EFFECT: 46e4, PLAYERS: 8, ITEMS: 6, HAND: 1, MISC: 2, SHOVEL: 3}, SOUND = [];
SOUND[-1] = CONST_AUDIO.HAND;
SOUND[INV.BOOK] = CONST_AUDIO.HAND;
SOUND[INV.WATERING_CAN_FULL] = CONST_AUDIO.HAND;
SOUND[INV.WRENCH] = CONST_AUDIO.MISC;
SOUND[INV.PICK_WOOD] = CONST_AUDIO.MISC;
SOUND[INV.PICK] = CONST_AUDIO.MISC;
SOUND[INV.PICK_GOLD] = CONST_AUDIO.MISC;
SOUND[INV.PICK_DIAMOND] = CONST_AUDIO.MISC;
SOUND[INV.PICK_AMETHYST] = CONST_AUDIO.MISC;
SOUND[INV.PICK_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.PIRATE_SWORD] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_WOOD] = CONST_AUDIO.MISC;
SOUND[INV.SWORD] = CONST_AUDIO.MISC;
SOUND[INV.LAVA_SWORD] = CONST_AUDIO.MISC;
SOUND[INV.LAVA_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_GOLD] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_DIAMOND] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_AMETHYST] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.CRAB_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.WOOD_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.GOLD_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.DIAMOND_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.DRAGON_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.AMETHYST_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.AMETHYST_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_GOLD] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_DIAMOND] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_AMETHYST] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.SUPER_HAMMER] = CONST_AUDIO.MISC;
SOUND[INV.DRAGON_SWORD] = CONST_AUDIO.MISC;
SOUND[INV.PITCHFORK2] = CONST_AUDIO.MISC;
SOUND[INV.PITCHFORK] = CONST_AUDIO.MISC;
SOUND[INV.SHOVEL] = CONST_AUDIO.SHOVEL;
SOUND[INV.SHOVEL_GOLD] = CONST_AUDIO.SHOVEL;
SOUND[INV.SHOVEL_DIAMOND] = CONST_AUDIO.SHOVEL;
SOUND[INV.SHOVEL_AMETHYST] = CONST_AUDIO.SHOVEL;
SOUND_NATURE = [];
SOUND_NATURE[0] = 0;
SOUND_NATURE[1] = 1;
SOUND_NATURE[2] = 1;
SOUND_NATURE[3] = 1;
SOUND_NATURE[4] = 0;
SOUND_NATURE[5] = 0;
SOUND_NATURE[6] = 0;
SOUND_NATURE[7] = 0;
SOUND_NATURE[8] = 0;
SOUND_NATURE[9] = 0;
SOUND_NATURE[10] = 1;
SOUND_NATURE[11] = 1;
SOUND_NATURE[12] = 1;
SOUND_NATURE[13] = 1;
SOUND_NATURE[14] = 1;
SOUND_NATURE[15] = 1;
SOUND_NATURE[16] = 0;
SOUND_NATURE[17] = 0;
SOUND_NATURE[18] = 0;
SOUND_NATURE[19] = 0;
SOUND_NATURE[20] = 0;
SOUND_NATURE[21] = 0;
SOUND_NATURE[22] = 0;
SOUND_NATURE[23] = 1;
SOUND_NATURE[24] = 1;
SOUND_NATURE[25] = 1;
SOUND_NATURE[26] = 1;
SOUND_NATURE[27] = 1;
SOUND_NATURE[28] = 1;
SOUND_NATURE[29] = 1;
SOUND_NATURE[30] = 1;
SOUND_NATURE[31] = 1;
SOUND_NATURE[32] = 1;
SOUND_NATURE[33] = 1;
SOUND_NATURE[34] = 1;
SOUND_NATURE[35] = 1;
SOUND_NATURE[36] = 1;
SOUND_NATURE[37] = 1;
SOUND_NATURE[38] = 1;
SOUND_NATURE[40] = 0;
SOUND_NATURE[41] = 0;
SOUND_NATURE[42] = 0;
SOUND_NATURE[50] = 1;
SOUND_NATURE[51] = 1;
SOUND_NATURE[52] = 1;
SOUND_NATURE[55] = 0;
SOUND_NATURE[56] = 0;
SOUND_NATURE[57] = 0;
SOUND_NATURE[58] = 0;
SOUND_BUILD = [];
SOUND_BUILD[ITEMS.PLANT] = 0;
SOUND_BUILD[ITEMS.FIRE] = 0;
SOUND_BUILD[ITEMS.TOTEM] = 0;
SOUND_BUILD[ITEMS.BIG_FIRE] = 0;
SOUND_BUILD[ITEMS.SEED] = -1;
SOUND_BUILD[ITEMS.WHEAT_SEED] = -1;
SOUND_BUILD[ITEMS.WORKBENCH] = 0;
SOUND_BUILD[ITEMS.WALL] = 0;
SOUND_BUILD[ITEMS.BRIDGE] = 0;
SOUND_BUILD[ITEMS.PLOT] = 0;
SOUND_BUILD[ITEMS.WINDMILL] = 1;
SOUND_BUILD[ITEMS.WELL] = 1;
SOUND_BUILD[ITEMS.STONE_WALL] = 1;
SOUND_BUILD[ITEMS.GOLD_WALL] = 1;
SOUND_BUILD[ITEMS.DIAMOND_WALL] = 1;
SOUND_BUILD[ITEMS.AMETHYST_WALL] = 1;
SOUND_BUILD[ITEMS.REIDITE_WALL] = 1;
SOUND_BUILD[ITEMS.SPIKE] = 0;
SOUND_BUILD[ITEMS.STONE_SPIKE] = 1;
SOUND_BUILD[ITEMS.GOLD_SPIKE] = 1;
SOUND_BUILD[ITEMS.DIAMOND_SPIKE] = 1;
SOUND_BUILD[ITEMS.AMETHYST_SPIKE] = 1;
SOUND_BUILD[ITEMS.REIDITE_SPIKE] = 1;
SOUND_BUILD[ITEMS.WOOD_DOOR] = 0;
SOUND_BUILD[ITEMS.STONE_DOOR] = 1;
SOUND_BUILD[ITEMS.GOLD_DOOR] = 1;
SOUND_BUILD[ITEMS.DIAMOND_DOOR] = 1;
SOUND_BUILD[ITEMS.AMETHYST_DOOR] = 1;
SOUND_BUILD[ITEMS.REIDITE_DOOR] = 1;
SOUND_BUILD[ITEMS.WOOD_DOOR_SPIKE] = 0;
SOUND_BUILD[ITEMS.STONE_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.GOLD_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.DIAMOND_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.AMETHYST_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.REIDITE_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.FURNACE] = 1;
SOUND_BUILD[ITEMS.RESURRECTION] = 1;
SOUND_BUILD[ITEMS.EMERALD_MACHINE] = 1;
SOUND_BUILD[ITEMS.CHEST] = 0;
SOUND_BUILD[ITEMS.BREAD_OVEN] = 1;
var AUDIO = {DIG: {sound: null, path: ["audio/ambience.mp3"], sprite: {d0: [90086, 300, false], d1: [90391, 300, false], d2: [90684, 300, false]}, sample: {d0: CONST_AUDIO.PLAYERS, d1: CONST_AUDIO.PLAYERS, d2: CONST_AUDIO.PLAYERS}}, PUNCH: {sound: null, path: ["audio/ambience.mp3"], sprite: {p0: [89303, 300, false], p1: [89549, 300, false], p2: [89815, 300, false]}, sample: {p0: CONST_AUDIO.PLAYERS, p1: CONST_AUDIO.PLAYERS, p2: CONST_AUDIO.PLAYERS}}, WEAPON: {sound: null, path: ["audio/ambience.mp3"], sprite: {w0: [88195, 300, false], w1: [88473, 300, false], w2: [88751, 300, false], w3: [89025, 300, false]}, sample: {w0: CONST_AUDIO.PLAYERS, w1: CONST_AUDIO.PLAYERS, w2: CONST_AUDIO.PLAYERS, w3: CONST_AUDIO.PLAYERS}}, AMBIENCE: {sound: null, path: ["audio/ambience.mp3"], sprite: {cook: [100, 2800, true], seaday: [3100, 8800, true], seanight: [19882, 8301, true], forestday: [32604, 21890, true], forestnight: [54524, 11393, true], snowday: [66961, 21223, true], snownight: [66961, 21223, true], fire: [12356, 6965, true], swim: [28380, 1797, true], sand: [30562, 655, true], walk: [31658, 813, true], snow: [66014, 925, true], hwood: [91022, 400, false], hand: [91431, 400, false], hstone: [92249, 500, false]}, sample: {cook: 1, seaday: 1, seanight: 1, forestday: 1, forestnight: 1, snowday: 1, snownight: 1, fire: CONST_AUDIO.PLAYERS, swim: CONST_AUDIO.PLAYERS, sand: CONST_AUDIO.PLAYERS, walk: CONST_AUDIO.PLAYERS, snow: CONST_AUDIO.PLAYERS, hwood: CONST_AUDIO.ITEMS, hand: CONST_AUDIO.ITEMS, hstone: CONST_AUDIO.ITEMS}}}, SoundArea = function (alean, loyalty, bigyan, tamilore, alaiarose, hoyte, haylin, kristjana, suman, jarmen, charylene) {
  this.r = 1;
  this.delay = alean;
  this.max_delay = alean;
  this.night = loyalty;
  this.day = bigyan;
  this.fade = tamilore;
  this.r_base = alaiarose;
  this.r_seed = hoyte;
  this.player = haylin;
  this.transition_delay = kristjana;
  this.source = suman;
  this.source.lx = suman.x + suman.w;
  this.source.by = suman.y + suman.h;
  this.outside_box = jarmen;
  this.inside_box = charylene;
  this.inside = 0;
  this.hackish = {d: 5, m: 5};
  this.effect = function () {
    this.delay -= delta;
    if (this.delay < 0) {
      this.delay = this.max_delay;
      var demarious = AUDIO.AMBIENCE.sound.playing(this.night), okemia = AUDIO.AMBIENCE.sound.playing(this.day);
      if (demarious && !okemia) {
        var edlyn = this.player.volume(this.night) * VOLUME.AMB, seah = (Math.random() * this.r_seed + this.r_base) * VOLUME.AMB;
        this.player.fade(edlyn, seah, this.fade, this.night);
      } else {
        if (!demarious && okemia) {
          var edlyn = this.player.volume(this.day) * VOLUME.AMB, seah = (Math.random() * this.r_seed + this.r_base) * VOLUME.AMB;
          this.player.fade(edlyn, seah, this.fade, this.day);
        }
      }
    }
  };
  this.transition = function () {
    this.delay = this.max_delay;
    this.hackish.d = this.hackish.m;
    if (world.time) {
      this.player.fade(0, this.r_base * VOLUME.AMB, this.transition_delay, this.night);
      this.player.play(this.night);
      if (this.player.playing(this.day)) {
        var ariday = this.player.volume(this.day) * VOLUME.AMB;
        this.player.fade(ariday, 0, this.transition_delay, this.day);
      }
    } else {
      this.player.fade(0, this.r_base * VOLUME.AMB, this.transition_delay, this.day);
      this.player.play(this.day);
      if (this.player.playing(this.night)) {
        var ariday = this.player.volume(this.night) * VOLUME.AMB;
        this.player.fade(ariday, 0, this.transition_delay, this.night);
      }
    }
  };
  this.check = function (jaquavious) {
    if (this.inside) {
      if (!Utils.inside_box(jaquavious, this.outside_box)) {
        this.inside = 0;
        if (this.player.playing(this.night)) {
          var shabree = this.player.volume(this.night) * VOLUME.AMB;
          this.player.fade(shabree, 0, this.transition_delay, this.night);
        }
        if (this.player.playing(this.day)) {
          var shabree = this.player.volume(this.day) * VOLUME.AMB;
          this.player.fade(shabree, 0, this.transition_delay, this.day);
        }
      } else {
        if (!audio.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
          if (world.time) {
            if (!this.player.playing(this.night)) {
              this.hackish.d -= delta;
              if (this.hackish.d < 0) {
                this.transition();
              }
            }
          } else {
            if (!this.player.playing(this.day)) {
              this.hackish.d -= delta;
              if (this.hackish.d < 0) {
                this.transition();
              }
            }
          }
        }
      }
    } else {
      if (Utils.inside_box(jaquavious, this.inside_box)) {
        this.inside = 1;
        if (!audio.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
          this.transition();
        }
      }
    }
  };
  this.update = function (sharal, darail) {
    var elander, jacoblee;
    if (sharal.x < this.source.x) {
      elander = audio.get_x(this.source.x);
    } else {
      if (sharal.x > this.source.lx) {
        elander = audio.get_x(this.source.lx);
      } else {
        elander = darail.x;
      }
    }
    if (sharal.y < this.source.y) {
      jacoblee = audio.get_y(this.source.y);
    } else {
      if (sharal.y > this.source.by) {
        jacoblee = audio.get_y(this.source.by);
      } else {
        jacoblee = darail.y;
      }
    }
    this.player.pos(elander, jacoblee, -0.5, this.night);
    this.player.pos(elander, jacoblee, -0.5, this.day);
  };
};
SOUND_PLAYER = {DELAY_SWIM: .4, DELAY_SAND: .2, DELAY_WALK: .2, DELAY_SNOW: .2, FADE_SWIM: 300, FADE_SAND: 100, FADE_WALK: 100, FADE_SNOW: 100, WALK: 0, SWIM: 1, SAND: 2, SNOW: 3, FACTOR: 4, FACTOR2: 2};
var SoundPlayerEffect = function (jacolyn, mackenzy, brendalis) {
  this.mom = jacolyn;
  this.c = 0;
  this.player = mackenzy;
  this.ids = brendalis;
  this.max = brendalis.length;
  this.play = function () {
    this.c = (this.c + 1) % this.max;
    var icaro = this.ids[this.c];
    this.mom.update_pos(this.player, icaro);
    this.player.play(icaro);
  };
}, SoundPlayer = function (arijah) {
  this.free = 1;
  this.uid = 0;
  this.mode = -1;
  this.swim = audio.sample.swim[arijah];
  this.sand = audio.sample.sand[arijah];
  this.walk = audio.sample.walk[arijah];
  this.snow = audio.sample.snow[arijah];
  this.punch = new SoundPlayerEffect(this, AUDIO.PUNCH.sound, audio.samples.punch[arijah]);
  this.weapon = new SoundPlayerEffect(this, AUDIO.WEAPON.sound, audio.samples.weapon[arijah]);
  this.dig = new SoundPlayerEffect(this, AUDIO.DIG.sound, audio.samples.dig[arijah]);
  this.sid = arijah;
  this.x = 0;
  this.y = 0;
  this.move = 0;
  this.delay = SOUND_PLAYER.DELAY;
  this.pos = {x: 0, y: 0};
  this.ambience = AUDIO.AMBIENCE.sound;
  this.swing = function (pattye) {
    if (pattye === CONST_AUDIO.HAND) {
      this.punch.play();
    } else {
      if (pattye === CONST_AUDIO.MISC) {
        this.weapon.play();
      } else {
        if (pattye === CONST_AUDIO.SHOVEL) {
          this.dig.play();
        }
      }
    }
  };
  this.detect_position = function (ovee) {
    if (ovee.dist_sand > 0) {
      return SOUND_PLAYER.SAND;
    } else {
      if (ovee.dist_water > 0) {
        return SOUND_PLAYER.SWIM;
      } else {
        if (ovee.dist_winter > 0 || ovee.dist_lava > 0) {
          return SOUND_PLAYER.SNOW;
        } else {
          return SOUND_PLAYER.WALK;
        }
      }
    }
  };
  this.init = function (beatrica) {
    this.free = 0;
    this.uid = beatrica;
    var hallett = world.fast_units[beatrica];
    hallett.sid = this.sid;
    this.mode = this.detect_position(hallett);
    this.pos.x = hallett.x;
    this.pos.y = hallett.y;
  };
  this.clean = function () {
    this.free = 1;
    this.mode = -1;
    this.ambience.stop(this.swim);
    this.ambience.stop(this.sand);
    this.ambience.stop(this.walk);
    this.ambience.stop(this.snow);
  };
  this.fade = function (marqueshia, josiaah) {
    var jaasritha = this.ambience.volume(marqueshia) * VOLUME.FX;
    this.ambience.fade(jaasritha, 0, josiaah, marqueshia);
  };
  this.update_pos = function (ilissa, diedre) {
    this.move && this.sid && ilissa.pos(this.x, this.y, -0.5, diedre);
  };
  this.effect = function (tyzion, tonisa, leilla, shanikque, keenon, lilit, elisianna) {
    this.delay = lilit;
    if (shanikque && this.mode === keenon) {
      var zed = this.ambience.volume(tyzion) * VOLUME.FX;
      if (this.move) {
        var konstantin = (Math.random() * leilla + tonisa) * VOLUME.FX;
        this.ambience.fade(zed, konstantin, elisianna, tyzion);
      } else {
        this.ambience.fade(zed, 0, elisianna, tyzion);
      }
    } else {
      if (this.mode != keenon && this.move) {
        this.ambience.fade(0, (tonisa + leilla) * VOLUME.FX, elisianna, tyzion);
      } else {
        if (this.move) {
          var zed = this.ambience.volume(tyzion) * VOLUME.FX, konstantin = (Math.random() * leilla + tonisa) * VOLUME.FX;
          this.ambience.fade(zed, konstantin, elisianna, tyzion);
        }
      }
    }
    this.update_pos(this.ambience, tyzion);
    this.ambience.play(tyzion);
  };
  this.update = function () {
    var vineeth = world.fast_units[this.uid];
    this.delay -= delta;
    if (this.delay > 0) {
      return;
    }
    var shandee = 0;
    vineeth.x != this.pos.x || vineeth.y != this.pos.y ? (!this.move && (shandee = 1, this.move = 1), this.x = audio.get_x_ext(vineeth.x, SOUND_PLAYER.FACTOR2), this.y = audio.get_y_ext(vineeth.y, SOUND_PLAYER.FACTOR2)) : this.move && (shandee = 1, this.move = 0);
    this.pos.x = vineeth.x;
    this.pos.y = vineeth.y;
    mode = this.detect_position(vineeth);
    if (mode != this.mode) {
      if (this.mode === SOUND_PLAYER.SWIM) {
        this.fade(this.swim, SOUND_PLAYER.FADE_SWIM);
      } else {
        if (this.mode === SOUND_PLAYER.SAND) {
          this.fade(this.sand, SOUND_PLAYER.FADE_SAND);
        } else {
          if (this.mode === SOUND_PLAYER.WALK) {
            this.fade(this.walk, SOUND_PLAYER.FADE_WALK);
          } else {
            if (this.mode === SOUND_PLAYER.SNOW) {
              this.fade(this.snow, SOUND_PLAYER.FADE_SNOW);
            }
          }
        }
      }
    }
    if (mode === SOUND_PLAYER.SWIM) {
      this.effect(this.swim, .08, .3, shandee, mode, SOUND_PLAYER.DELAY_SWIM, SOUND_PLAYER.FADE_SWIM);
    } else {
      if (mode === SOUND_PLAYER.SAND) {
        this.effect(this.sand, .2, .3, shandee, mode, SOUND_PLAYER.DELAY_SAND, SOUND_PLAYER.FADE_SAND);
      } else {
        if (mode === SOUND_PLAYER.WALK) {
          this.effect(this.walk, .3, .6, shandee, mode, SOUND_PLAYER.DELAY_WALK, SOUND_PLAYER.FADE_WALK);
        } else {
          if (mode === SOUND_PLAYER.SNOW) {
            this.effect(this.snow, .1, .25, shandee, mode, SOUND_PLAYER.DELAY_SNOW, SOUND_PLAYER.FADE_SNOW);
          }
        }
      }
    }
    this.mode = mode;
  };
  this.check = function () {
    var ameriana = world.fast_units[this.uid];
    if (!ameriana) {
      return this.clean(ameriana), false;
    }
    return true;
  };
}, MyAudio = function () {
  this.run = 0;
  this.loaded = 0;
  this.transition = 0;
  this.get_x = function (tynetta) {
    return 100 * (tynetta / world.w);
  };
  this.get_y = function (wylodine) {
    return 100 * (wylodine / world.h);
  };
  this.get_x_ext = function (kweku, darchelle) {
    return kweku = this.get_x(kweku) - this.ltr.x, this.ltr.x + darchelle * kweku;
  };
  this.get_y_ext = function (davvid, shadasia) {
    return davvid = Math.abs(this.get_y(davvid) - this.ltr.y), this.ltr.y + shadasia * davvid;
  };
  this.sample = {};
  this.samples = {};
  this.player = {};
  this.play_sample = function (mynette, zenaya, shigeno, kesly) {
    for (var anaston = 0; anaston < zenaya.length; anaston++) {
      var khimora = zenaya[anaston];
      if (mynette.playing(khimora)) {
        continue;
      }
      return mynette.pos(shigeno, kesly, -0.5, khimora), mynette.play(khimora), true;
    }
    return false;
  };
  this.hit = function (jula, dlaney, danele, eufaula) {
    danele = this.get_x_ext(danele, SOUND_PLAYER.FACTOR);
    eufaula = this.get_y_ext(eufaula, SOUND_PLAYER.FACTOR);
    console.log("HIT", jula, dlaney, danele, eufaula, SOUND_PLAYER.FACTOR);
    if (!jula) {
      this.play_sample(this.player.hand, this.sample.hand, danele, eufaula);
    } else {
      if (dlaney === 1) {
        this.play_sample(this.player.hstone, this.sample.hstone, danele, eufaula);
      } else {
        if (dlaney === 0) {
          this.play_sample(this.player.hwood, this.sample.hwood, danele, eufaula);
        }
      }
    }
  };
  this.ltr = {x: 0, y: 0};
  this.oldp = {x: 0, y: 0};
  this.area = {};
  this.players = [];
  this.ambience = function (jiraiyah, addah) {
    for (var miye in this.area) {
      var leilyn = this.area[miye];
      leilyn.check(jiraiyah);
      if (leilyn.inside) {
        if (world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
          leilyn.effect();
        }
        if (addah) {
          leilyn.update(jiraiyah, this.ltr);
        }
        if (this.transition) {
          leilyn.transition();
        }
      }
    }
    if (this.transition) {
      this.transition = 0;
    }
  };
  this.hook_players = function () {
    var altonio = [];
    for (var kristiana = 0; kristiana < this.players.length; kristiana++) {
      var oweda = this.players[kristiana];
      if (oweda.free) {
        altonio.push(kristiana);
      } else {
        !oweda.free && !world.fast_units[oweda.uid] && (oweda.clean(), altonio.push(kristiana));
      }
    }
    var esbeydy = world.units[ITEMS.PLAYERS];
    for (var kristiana = 0, philippa = 0; kristiana < esbeydy.length && philippa < altonio.length; kristiana++) {
      var oweda = esbeydy[kristiana];
      if (world.mode == WORLD.MODE_HUNGER_GAMES && world.players[oweda.id].nickname === "spectator" || oweda.sid !== -1 || oweda.uid === user.uid) {
        continue;
      }
      this.players[altonio[philippa]].init(oweda.uid);
      philippa++;
    }
  };
  this.players_effect = function () {
    this.hook_players();
    for (var tineke = 0; tineke < this.players.length; tineke++) {
      var journi = this.players[tineke];
      if (journi.free || !journi.check()) {
        continue;
      }
      journi.update();
    }
  };
  this.update_listener = function (krisna) {
    if (this.oldp.x === krisna.x && this.oldp.y === krisna.y) {
      return 0;
    }
    this.oldp.x = krisna.x;
    this.oldp.y = krisna.y;
    this.ltr.x = this.get_x(krisna.x);
    this.ltr.y = this.get_y(krisna.y);
    Howler.pos(this.ltr.x, this.ltr.y, 0);
    return 1;
  };
  this.scheduler = function () {
    if (!this.run || !this.loaded) {
      return;
    }
    var demariea = world.fast_units[user.uid];
    if (!demariea) {
      return;
    }
    demariea.sid = 0;
    var karhonda = this.update_listener(demariea);
    if (world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR) {
      this.ambience(demariea, karhonda);
    }
    this.players_effect();
  };
  this.load_sound = function () {
    for (var otta in AUDIO) {
      var damal = AUDIO[otta];
      typeof damal === "object" && damal.path && (damal.sound = new Howl({src: damal.path, volume: 0, sprite: damal.sprite}));
      for (var martajah in damal.sample) {
        var taahirah = damal.sample[martajah];
        var jaliyl = [];
        console.log(martajah);
        for (var eliezel = 0; eliezel < taahirah; eliezel++) {
          var nessiah = damal.sound.play(martajah);
          damal.sound.stop(nessiah);
          damal.sound.on("fade", function (jessey) {
            !this.volume(jessey) && (console.log(jessey, "OUT"), this.stop(jessey));
          }, nessiah);
          jaliyl.push(nessiah);
        }
        if (jaliyl.length > 1) {
          audio.sample[martajah] = jaliyl;
        } else {
          audio.sample[martajah] = jaliyl[0];
        }
        audio.player[martajah] = damal.sound;
      }
    }
  };
  this.volume_sample = function (solmon, henos, neili) {
    for (var tyde = 0; tyde < solmon.length; tyde++) {
      henos.volume(neili, solmon[tyde]);
    }
  };
  this.organize_samples = function (rosaliyah, bertella, otniel, shayne, crysania, berklie) {
    var arthea = rosaliyah;
    for (var kaitlee = 0; kaitlee < otniel; kaitlee++) {
      var jaicey = arthea[kaitlee] = [];
      for (j = 0; j < shayne; j++) {
        jaicey[j] = audio.sample[crysania + j][kaitlee];
        bertella.sound.volume(berklie, jaicey[j]);
      }
    }
  };
  this.init = function () {
    audio.load_sound();
    audio.samples.punch = [];
    audio.samples.weapon = [];
    audio.samples.dig = [];
    audio.organize_samples(audio.samples.punch, AUDIO.PUNCH, CONST_AUDIO.PLAYERS, 3, "p", .15);
    audio.organize_samples(audio.samples.weapon, AUDIO.WEAPON, CONST_AUDIO.PLAYERS, 4, "w", .15);
    audio.organize_samples(audio.samples.dig, AUDIO.DIG, CONST_AUDIO.PLAYERS, 3, "d", .09);
    audio.volume_sample(audio.sample.hand, audio.player.hand, .15);
    audio.volume_sample(audio.sample.hwood, audio.player.hwood, .2);
    audio.volume_sample(audio.sample.hstone, audio.player.hstone, 1);
    audio.area.sea = new SoundArea(CONST_AUDIO.SEA_DELAY, this.sample.seanight, this.sample.seaday, CONST_AUDIO.SEA_FADE, .05, .4, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {x: SPRITE.SEE_BIOME_X, y: SPRITE.WINTER_BIOME_Y, w: world.w, h: world.h}, {x: SPRITE.SEE_BIOME_X - 2300, y: SPRITE.WINTER_BIOME_Y - 4e3, w: world.w, h: world.h}, {x: SPRITE.SEE_BIOME_X - 1500, y: SPRITE.WINTER_BIOME_Y - 2e3, w: world.w, h: world.h});
    audio.area.forest = new SoundArea(CONST_AUDIO.FOREST_DELAY, this.sample.forestnight, this.sample.forestday, CONST_AUDIO.FOREST_FADE, .03, .25, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {x: 0, y: SPRITE.WINTER_BIOME_Y + 800, w: SPRITE.SEE_BIOME_X - 2300, h: world.h}, {x: -100, y: SPRITE.WINTER_BIOME_Y - 300, w: SPRITE.SEE_BIOME_X - 100, h: world.h}, {x: -100, y: SPRITE.WINTER_BIOME_Y + 400, w: SPRITE.SEE_BIOME_X - 1400, h: world.h});
    audio.area.snow = new SoundArea(CONST_AUDIO.FOREST_DELAY, this.sample.snownight, this.sample.snowday, CONST_AUDIO.SNOW_FADE, .01, .22, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {x: -100, y: -100, w: world.w + 200, h: SPRITE.WINTER_BIOME_Y - 1e3}, {x: -100, y: -100, w: world.w + 200, h: SPRITE.WINTER_BIOME_Y + 600}, {x: -100, y: -100, w: world.w + 200, h: SPRITE.WINTER_BIOME_Y + 100});
    for (var hayat = 0; hayat < CONST_AUDIO.PLAYERS; hayat++) {
      audio.players[hayat] = new SoundPlayer(hayat);
    }
    audio.players[0].init(user.uid);
    audio.loaded = 1;
  };
  this.launch = function () {
    if (!this.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
      this.transition = 1;
    }
  };
  this.quit = function () {
    if (!this.run || !this.loaded) {
      return;
    }
    for (var corie in audio.sample) {
      var maliayah = audio.sample[corie];
      if (typeof maliayah === "object") {
        for (var monroe = 0; monroe < maliayah.length; monroe++) {
          audio.player[corie].stop(maliayah[monroe]);
        }
      } else {
        audio.player[corie].stop(maliayah);
      }
    }
    for (var monroe = 0; monroe < audio.players.length; monroe++) {
      audio.players[monroe].clean();
    }
  };
  this.select = function () {
    if (!audio.run) {
      if (!audio.loaded) {
        audio.init();
      }
      audio.players[0].uid = user.uid;
      audio.players[0].free = 0;
      audio.launch();
    } else {
      audio.quit();
    }
    audio.run = !audio.run;
  };
};
mobile = 0;
document.getElementById("version").innerHTML = "" + CLIENT.VERSION_NUMBER + ".3";
var MAP = [], fake_world = {time: Math.floor(Math.random() * 2), items: []};
init_fake_world();
client = new NetworkClient;
var ui, game = {is_run: false}, world, user, scoreboard, audio = new MyAudio, keyboard = new Keyboard, mouse = new Mouse, delta = 0, old_timestamp = 0, fps = {img: false, counter: 0, delay: 0, cycle: 60, display: true}, loader = new Loader(can, ctx, function () {
  create_images();
  game = new Game(can, ctx);
  ui = new UI(can, ctx);
  ui.login_after();
  scoreboard = new Scoreboard(can, ctx);
  world = new World;
  user = new User;
  loader.quit(function () {
    loader.logo.style.display = "none";
    ui.run();
  });
});
function draw(rosco) {
  window.requestAnimationFrame(draw);
  delta = (rosco - old_timestamp) / 1e3;
  old_timestamp = rosco;
  delta = delta > 1 ? 1 : delta;
  if (game.is_run) {
    game.draw();
  } else {
    ctx.clearRect(0, 0, canw, canh);
    if (loader.is_run) {
      loader.draw();
    } else {
      if (ui.is_run) {
        ui.draw();
      } else {
        if (scoreboard.is_run) {
          scoreboard.draw();
        }
      }
    }
  }
}
window.onbeforeunload = function () {
  if (game.is_run) {
    return "Are you sure you want quit starve.io ;-; ?";
  }
};
resize_canvas();
draw(0);
if (!window.YMPB) {
  window.YMPB = window.YMPB || {};
  isYolla = 0;
} else {
  isYolla = 1;
}
window.YMPB.que = window.YMPB.que || [];
window.aiptag = window.aiptag || {};
window.aiptag.consented = true;
window.aiptag.cmd = window.aiptag.cmd || [];
window.aiptag.cmd.display = window.aiptag.cmd.display || [];
window.aiptag.cmd.player = window.aiptag.cmd.player || [];
function refreshAds() {
  window.YMPB.refresh();
}
function yollaCallback() {
  document.getElementById("preroll").style.display = "none";
  client.connect();
}
var fun = function () {
  adplayer = new aipPlayer({AD_WIDTH: 960, AD_HEIGHT: 540, AD_FULLSCREEN: true, AD_CENTERPLAYER: true, LOADING_TEXT: "loading advertisement", PREROLL_ELEM: function () {
    return document.getElementById("preroll");
  }, AIP_COMPLETE: function () {
    client.connect();
  }, AIP_REMOVE: function () {}});
};
window.aiptag.cmd.player.push(fun);
var ___adsvid = 0;
function check_ads() {
  xhttp.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
  xhttp.send();
}
var xhttp = new XMLHttpRequest;
xhttp.onreadystatechange = function () {
  if (this.readyState === 4 && this.status === 0) {}
};
var DB = "https://token.starve.io/";
if (environment === environments.DEV) {
  var DB = "http://localhost:3002/";
}
var __GOOGLE_LOGIN__ = 0, __FACEBOOK_LOGIN__ = 1, userLoginType = undefined, userToken = undefined, userId = undefined, userData = undefined, userAlreadyLoggedIn = 0;
window.onUserLogin = function () {
  userAlreadyLoggedIn = 1;
};
function loginWithGoogle() {
  window.gapi.auth2.getAuthInstance().signIn();
}
var ip = undefined, xsolla_options = {access_token: "ACCESS_TOKEN"}, s = document.createElement("script");
s.type = "text/javascript";
s.async = true;
s.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
s.addEventListener("load", function (nihira) {
  window.XPayStationWidget.init(xsolla_options);
  window.XPayStationWidget.on("status-done", claimBread);
}, false);
var head = document.getElementsByTagName("head")[0];
head.appendChild(s);
window.fbAsyncInit = function () {
  login();
  console.log("fb async init called");
};
(function (santosha, deztiney, kabela) {
  var jamee, kavante = santosha.getElementsByTagName(deztiney)[0];
  if (santosha.getElementById(kabela)) {
    return;
  }
  jamee = santosha.createElement(deztiney);
  jamee.id = kabela;
  jamee.src = "https://connect.facebook.net/en_US/sdk.js";
  kavante.parentNode.insertBefore(jamee, kavante);
}(document, "script", "facebook-jssdk"));
function logWithFacebook() {
  window.FB.login(function (ledonia) {
    if (ledonia.authResponse) {
      window.FB.api("/me", function (chasya) {
        userLoginType = __FACEBOOK_LOGIN__;
        userToken = window.FB.getAuthResponse().accessToken;
        login();
        window.onUserLogin(userId);
      });
    } else {}
  });
}
var auth2 = undefined, googleUser = undefined, appStart = function () {
  window.gapi.load("auth2", initSigninV2);
}, initSigninV2 = function () {
  window.gapi.auth2.init({client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com", scope: "https://www.googleapis.com/auth/userinfo.profile"}).then(roylee => {
    auth2 = roylee;
    auth2.isSignedIn.listen(signinChanged);
    auth2.currentUser.listen(userChanged);
    const marletta = auth2.isSignedIn.get();
    if (marletta) {
      auth2.signIn();
    }
    refreshValues();
  });
}, signinChanged = function (sherifat) {}, userChanged = function (katriona) {
  login();
  userToken === undefined && googleUser !== undefined && (userToken = googleUser.getAuthResponse().id_token, console.log("::: iandev userToken :::", userToken), userToken !== undefined && (userLoginType = __GOOGLE_LOGIN__, window.onUserLogin(userId)));
  katriona !== undefined && katriona.isSignedIn() === true && (googleUser = katriona, window.onUserLogin(katriona.id));
}, refreshValues = function () {
  if (auth2) {
    googleUser = auth2.currentUser.get();
  }
};
window.onload = function () {
  appStart();
};
function logout() {
  if (userLoginType === __FACEBOOK_LOGIN__ && window.FB.getUserID()) {
    window.FB.logout();
  }
  userLoginType === __GOOGLE_LOGIN__ && googleUser !== undefined && (window.gapi.auth2.getAuthInstance().signOut(), googleUser = undefined);
  userId = undefined;
  userToken = undefined;
  userLoginType = undefined;
  ui.kit = 0;
  ui.bread = 0;
  ui.score = 0;
  ui.unlock_cosmetics();
  onUserLogout();
}
function login() {
  window.FB.init({appId: "642017356260407", cookie: true, xfbml: true, version: "v15.0"});
  if (userId !== undefined) {
    return;
  }
  getUserId();
  if (!userId) {
    return;
  }
}
function getUserId() {
  try {
    window.FB && window.FB.getUserID() && (userId = window.FB.getUserID(), userToken === undefined && window.FB.getLoginStatus(function () {
      userLoginType = __FACEBOOK_LOGIN__;
      userToken = window.FB.getAuthResponse().accessToken;
      window.onUserLogin(userId);
    }));
  } catch (messian) {}
  try {
    userId = googleUser.getBasicProfile().getId();
  } catch (ceinna) {}
}
function openXsolla(amorina) {
  if (!userId) {
    return;
  }
  var faraji = new XMLHttpRequest;
  faraji.open("GET", DB + "xsolla?userid=" + userId + "&item=" + amorina);
  faraji.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  faraji.onreadystatechange = function () {
    this.readyState == 4 && this.status == 200 && faraji.responseText !== "0" && (xsolla_options.access_token = faraji.responseText, window.XPayStationWidget.init(xsolla_options), window.XPayStationWidget.open());
  };
  faraji.send();
}
function getUserDetails(doyle) {
  var arrie = new XMLHttpRequest;
  arrie.open("GET", DB + "login?token=" + userToken + "&type=" + userLoginType);
  arrie.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  arrie.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      if (arrie.responseText !== "0") {
        doyle(JSON.parse(arrie.responseText));
      }
    }
  };
  arrie.send();
}
function rebootServer() {
  var kaly = new XMLHttpRequest;
  kaly.open("GET", DB + "rebootServer?token=" + userToken + "&userid=" + userId);
  kaly.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  kaly.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      if (kaly.responseText !== "0") {
        location.href = document.getElementById("serverAddressInput").value;
      }
    }
  };
  kaly.send();
}
function regionPreference(catoria) {
  var breck = new XMLHttpRequest;
  breck.open("GET", DB + "setRegion?token=" + userToken + "&userid=" + userId + "&region=" + catoria);
  breck.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  breck.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      if (breck.responseText !== "0") {
        ui.select_subview(ui.__SERVER_DURATION__);
      } else {
        ui.select_subview(ui.__GAME__);
      }
    }
  };
  breck.send();
}
function buySpin(enma, hanief) {
  if (ui.spin > 0) {
    return;
  }
  if (ui.bread < hanief) {
    ui.select_subview(ui.__BUY__);
    return;
  }
  ui.spin = 2;
  ui.spin_effect = 0;
  ui.spin_target = 100;
  var chevee = new XMLHttpRequest;
  chevee.open("GET", DB + "buySpin?token=" + userToken + "&userid=" + userId + "&spin=" + enma);
  chevee.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  chevee.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (chevee.responseText !== "0") {
        var jessie = JSON.parse(chevee.responseText);
        ui.play_spin(jessie.rand * Math.PI * 2, jessie.type, jessie.id);
        ui.bread -= hanief;
      } else {
        ui.spin = 0;
      }
    }
  };
  chevee.send();
}
function buyNameChanger() {
  if (ui.bread < 300 && ui.firstName > 0) {
    return;
  }
  var alahn = document.getElementById("account_nickname_input").value.trim();
  document.getElementById("account_nickname_input").value = alahn;
  if (alahn.length < 1 || alahn.length > 20) {
    return;
  }
  var dov = new XMLHttpRequest;
  dov.open("GET", DB + "changeNickname?token=" + userToken + "&userid=" + userId + "&nickname=" + encodeURIComponent(alahn));
  dov.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  dov.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (dov.responseText !== "0") {
        var waled = Number(dov.responseText);
        if (waled > 0) {
          ui.bread -= waled;
        }
        ui.firstName = 1;
        ui.select_subview(ui.__PROFILE__);
      }
    }
  };
  dov.send();
}
function buyKit(ryser, francetta) {
  if (ui.bread < francetta) {
    ui.select_subview(ui.__BUY__);
    return;
  }
  var karinn = new XMLHttpRequest;
  karinn.open("GET", DB + "buyKit?token=" + userToken + "&userid=" + userId + "&kit=" + ryser);
  karinn.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  karinn.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (karinn.responseText !== "0") {
        var vaydah = JSON.parse(karinn.responseText);
        ui.bread -= francetta;
        ui.kit = Date.now() + Number(vaydah);
      }
    }
  };
  karinn.send();
}
function claimBread() {
  var zebra = new XMLHttpRequest;
  zebra.open("GET", DB + "claimBread?userid=" + userId);
  zebra.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  zebra.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (zebra.responseText !== "0") {
        var derrianna = Number(zebra.responseText);
        if (!isNaN(derrianna)) {
          ui.bread = derrianna;
        }
      }
    }
  };
  zebra.send();
}
function getBreadAndScore() {
  var euniqua = new XMLHttpRequest;
  euniqua.open("GET", DB + "getBreadAndScore?userid=" + userId);
  euniqua.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  euniqua.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (euniqua.responseText !== "0") {
        var carolene = JSON.parse(euniqua.responseText);
        var jacqualyne = carolene.b - ui.bread;
        ui.bread = carolene.b;
        ui.score = carolene.s;
        ui.lvl = ui.level_formula(ui.score);
        ui.xp_dest = ui.xp_formula(ui.score);
        ui.xp = 0;
        document.getElementById("breadWonInner").innerHTML = "" + jacqualyne;
      }
    }
  };
  euniqua.send();
}
function sendCheat() {
  xhr.open("GET", DB + "getScore?userid=" + userId);
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  xhr.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (xhr.responseText !== "0") {
        var argenys = JSON.parse(xhr.responseText);
      }
    }
  };
  xhr.send();
}
function getLeaderboard(gehad, fabain, orel, georganna) {
  gehad = gehad === undefined ? ui.leaderboard_range : gehad;
  fabain = fabain === undefined ? ui.leaderboard_mode : fabain;
  orel = orel === undefined ? ui.leaderboard_sorted : orel;
  georganna = georganna === undefined ? ui.leaderboard_season : georganna;
  if (gehad === ui.leaderboard_range && fabain === ui.leaderboard_mode && orel === ui.leaderboard_sorted && georganna === ui.leaderboard_season) {
    return;
  }
  ui.leaderboard_range = gehad;
  ui.leaderboard_mode = fabain;
  ui.leaderboard_sorted = orel;
  ui.leaderboard_season = georganna;
  if (ui.LEADERBOARD_SEASON1 === georganna) {
    georganna = "0";
  } else {
    if (ui.LEADERBOARD_SEASON2 === georganna) {
      georganna = "1";
    } else {
      if (ui.LEADERBOARD_SEASON3 === georganna) {
        georganna = "2";
      } else {
        if (ui.LEADERBOARD_SEASON4 === georganna) {
          georganna = "3";
        }
      }
    }
  }
  if (ui.LEADERBOARD_TOTAL === fabain) {
    fabain = "total";
  } else {
    if (ui.LEADERBOARD_NORMAL === fabain) {
      fabain = "normal";
    } else {
      if (ui.LEADERBOARD_ZOMBIE === fabain) {
        fabain = "zombie";
      } else {
        if (ui.LEADERBOARD_VAMPIRE === fabain) {
          fabain = "vampire";
        } else {
          if (ui.LEADERBOARD_FOREST === fabain) {
            fabain = "forest";
          }
        }
      }
    }
  }
  if (ui.LEADERBOARD_ALL === gehad) {
    gehad = "all";
  }
  if (ui.LEADERBOARD_WEEK === gehad) {
    gehad = "week";
  }
  if (ui.LEADERBOARD_TODAY === gehad) {
    gehad = "today";
  }
  if (ui.LEADERBOARD_KILL === orel) {
    orel = "kill";
  } else {
    if (ui.LEADERBOARD_SCORE === orel) {
      orel = "score";
    } else {
      if (ui.LEADERBOARD_TIME === orel) {
        orel = "time";
      }
    }
  }
  var safwan = new XMLHttpRequest;
  safwan.open("GET", DB + "leaderboard?range=" + gehad + "&mode=" + fabain + "&sort=" + orel + "&season=" + georganna);
  safwan.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  safwan.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (safwan.responseText !== "0") {
        var azaleigh = JSON.parse(safwan.responseText), druey = "";
        for (var avacyn = 0; avacyn < azaleigh.length; avacyn++) {
          line = azaleigh[avacyn];
          var paulena = line[1];
          if (paulena.indexOf("Starver#") === -1) {
            paulena = window.decodeURIComponent(window.escape(window.atob(paulena)));
          }
          druey += '<div class="lineLeaderboard">';
          druey += '<div class="rank">';
          druey += avacyn + 1 + "";
          druey += "</div>";
          druey += '<div class="name">';
          druey += paulena;
          druey += "</div>";
          druey += '<div class="lvl">';
          druey += ui.level_formula(line[6]) + 1 + "";
          druey += "</div>";
          druey += '<div class="kills">';
          druey += line[5] + "";
          druey += "</div>";
          druey += '<div class="time">';
          druey += line[4] + "";
          druey += "</div>";
          druey += '<div class="score">';
          druey += line[3] + "";
          druey += "</div>";
          druey += "</div>";
        }
        document.getElementById("leaderboard").innerHTML = druey;
      }
    }
  };
  safwan.send();
}
